{"sha": "e734733a9e931cbbe26cfccbdf9849faef8e5125", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MzQ3MzNhOWU5MzFjYmJlMjZjZmNjYmRmOTg0OWZhZWY4ZTUxMjU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-19T01:49:11Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-21T19:10:16Z"}, "message": "Record `tcx.def_span` instead of `item.span` in crate metadata\n\nThis was missed in PR #75465. As a result, a few places have been using\nthe full body span of functions, instead of just the header span.", "tree": {"sha": "befb546ce63c508298387ba0eca6c2efd8da9c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/befb546ce63c508298387ba0eca6c2efd8da9c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e734733a9e931cbbe26cfccbdf9849faef8e5125", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9o+pkACgkQtAh+UQ6Y\nsWQQ2hAAt8jwQQUFYMAK8aLJuy4S/2pyCdyyr8IuS7cpBUZXpU807+4UC4cIIb1B\nMfWbHMBbiBF+Yb6/k563V1gt8SOmavMRx6JLa5pVCH+4NX3zxaqMeclrfdGiTKUh\nvZaG8gPDj2BhzNBJEEjJ/sdZbO9Ca9tnyiT5j/Mx8dqjt9lFutnQGQ3oo2sW88GR\nDt7+ZScCehMvKRx6e9HW352/xq0b6FJ6UqUBLHQhalWXPRMH4Fa52fsAQ3S/chIn\nYbak1xFdW+oat5X/UhJFyYt/DDNjdsDmEVu1r5YNWkxUeqfTLO6HD5z9d5GmVHvW\nhvGpTT3fusabG3gAvpCYilVhqH04bRZvc1HuiJ+6h74tVZnk97IzY0n/7RhEQ0kr\n50eKIg2EVnUAncvgzb5rrwqa7oXRh7sYNNr6ntQ8hhgpzlmBLRiM4hKoa5GRie0g\nWu7fnbUqKzwT5op1+V+oP2Yjc25ddDLa5R1LPg6Up+EhIHeG/X5877atrj4ovfE+\nqttG+BYFeEr3nTNzDNxNgMJGFJFA33OpD753I3sSnPY/kA+IJgQ/BUYMElK8U1jb\n7F7LQqR/gyWBVAQPq2STx9D9v6gsyUa1XIsKQfgWxMZ+IM11OCI2y7xmEPd9F2bk\nlbdvF/itAYmPvbMgXkiiz0lH7hPIwiJJtZbyYgpp4NBtlXFbvuA=\n=t7d3\n-----END PGP SIGNATURE-----", "payload": "tree befb546ce63c508298387ba0eca6c2efd8da9c74\nparent 4eff9b0b29a8898c839d46f3c66526710afed68a\nauthor Aaron Hill <aa1ronham@gmail.com> 1600480151 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1600715416 -0400\n\nRecord `tcx.def_span` instead of `item.span` in crate metadata\n\nThis was missed in PR #75465. As a result, a few places have been using\nthe full body span of functions, instead of just the header span.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e734733a9e931cbbe26cfccbdf9849faef8e5125", "html_url": "https://github.com/rust-lang/rust/commit/e734733a9e931cbbe26cfccbdf9849faef8e5125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e734733a9e931cbbe26cfccbdf9849faef8e5125/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff9b0b29a8898c839d46f3c66526710afed68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff9b0b29a8898c839d46f3c66526710afed68a", "html_url": "https://github.com/rust-lang/rust/commit/4eff9b0b29a8898c839d46f3c66526710afed68a"}], "stats": {"total": 62, "additions": 20, "deletions": 42}, "files": [{"sha": "d5b0a868a364e4cdc6cf040ed0555b2c8c886533", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -1300,7 +1300,7 @@ impl EncodeContext<'a, 'tcx> {\n         });\n         record!(self.tables.visibility[def_id] <-\n             ty::Visibility::from_hir(&item.vis, item.hir_id, tcx));\n-        record!(self.tables.span[def_id] <- item.span);\n+        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n         record!(self.tables.attributes[def_id] <- item.attrs);\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {"}, {"sha": "eb1b42c57bc51f905566b45ec2e76c69e082e6c2", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -1,22 +1,16 @@\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-LL | |     // Code here does not matter - this is replaced by the\n-LL | |     // real drop glue by the compiler.\n-LL | |\n-LL | |     // SAFETY: see comment above\n-LL | |     unsafe { drop_in_place(to_drop) }\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_calling non-const function `<Vec<i32> as Drop>::drop`\n-   |   inside `drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | calling non-const function `<Vec<i32> as Drop>::drop`\n+   | inside `drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    | \n   ::: $DIR/drop.rs:18:1\n    |\n-LL |   };\n-   |   - inside `TEST_BAD` at $DIR/drop.rs:18:1\n+LL | };\n+   | - inside `TEST_BAD` at $DIR/drop.rs:18:1\n \n warning: skipping const checks\n    |"}, {"sha": "63b8b29d6ce2861db2a879c6d2d2bca76fa67d3c", "filename": "src/test/ui/macros/same-sequence-span.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -17,15 +17,11 @@ LL |                $(= $z:tt)*\n error: `$x:expr` may be followed by `$y:tt`, which is not allowed for `expr` fragments\n   --> $DIR/same-sequence-span.rs:19:1\n    |\n-LL |   proc_macro_sequence::make_foo!();\n-   |   ^--------------------------------\n-   |   |\n-   |  _in this macro invocation\n+LL | proc_macro_sequence::make_foo!();\n+   | ---------------------------------^^^^^^^^^^^^^\n    | |\n-LL | |\n-LL | |\n-LL | | fn main() {}\n-...  |\n+   | not allowed after `expr` fragments\n+   | in this macro invocation\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "81cebae17aeba4d1690326f5831650a86638be59", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -1,6 +1,6 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5)\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5)\n Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:24:37: 24:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:24:45: 24:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:50: 24:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:24:51: 24:53 (#4) }]\n-Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#5) }]\n+Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }]\n #![feature /* 0#0 */(prelude_import)]\n // ignore-tidy-linelength\n // aux-build:make-macro.rs"}, {"sha": "662682d40b2c68640e5c057d43f531802f1e90c7", "filename": "src/test/ui/proc-macro/meta-macro.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -1,3 +1,3 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4)\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#4)\n Input: TokenStream []\n Respanned: TokenStream []"}, {"sha": "5bf381607c5ed6eb78b7886bc211e17270f6d38f", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -1,26 +1,14 @@\n error: reached the recursion limit while instantiating `drop_in_place::<S<fn(fn(fn(fn(fn...)))))))))))))))))))))))))))))>))`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-LL | |     // Code here does not matter - this is replaced by the\n-LL | |     // real drop glue by the compiler.\n-LL | |\n-LL | |     // SAFETY: see comment above\n-LL | |     unsafe { drop_in_place(to_drop) }\n-LL | | }\n-   | |_^\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `drop_in_place` defined here\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n-LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-LL | |     // Code here does not matter - this is replaced by the\n-LL | |     // real drop glue by the compiler.\n-LL | |\n-LL | |     // SAFETY: see comment above\n-LL | |     unsafe { drop_in_place(to_drop) }\n-LL | | }\n-   | |_^\n+LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-38591-non-regular-dropck-recursion/issue-38591-non-regular-dropck-recursion.long-type.txt'\n \n error: aborting due to previous error"}, {"sha": "a2ddffff997d882af39f5f3ac15b1c9c34b8566f", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e734733a9e931cbbe26cfccbdf9849faef8e5125/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=e734733a9e931cbbe26cfccbdf9849faef8e5125", "patch": "@@ -2,7 +2,7 @@ error: reached the type-length limit while instantiating `std::mem::drop::<Optio\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n    = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate"}]}