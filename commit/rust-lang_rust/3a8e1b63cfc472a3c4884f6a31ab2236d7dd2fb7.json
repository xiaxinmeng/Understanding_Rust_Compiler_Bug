{"sha": "3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOGUxYjYzY2ZjNDcyYTNjNDg4NGY2YTMxYWIyMjM2ZDdkZDJmYjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-26T07:18:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-26T07:21:51Z"}, "message": "panic_handler -> begin_panic_handler (and more comments)", "tree": {"sha": "baab769f1f8d64f2c6f5bce0c21808040834a281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baab769f1f8d64f2c6f5bce0c21808040834a281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7", "html_url": "https://github.com/rust-lang/rust/commit/3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "html_url": "https://github.com/rust-lang/rust/commit/3c485795517d1f5a6ebfff6368dfae7a7cd85b85"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "31dcbc6a7cbda22647e9b46c1a65276cbab3281a", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=3a8e1b63cfc472a3c4884f6a31ab2236d7dd2fb7", "patch": "@@ -316,16 +316,17 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>,\n         unsafe { intrinsics::abort() }\n     }\n \n+    // Just package everything into a `PanicInfo` and continue like libcore panics.\n     let (file, line, col) = *file_line_col;\n     let location = Location::internal_constructor(file, line, col);\n     let info = PanicInfo::internal_constructor(Some(msg), &location);\n-    panic_handler(&info)\n+    begin_panic_handler(&info)\n }\n \n-/// Entry point of panic from the libcore crate (`panic_impl` lang item).\n+/// Entry point of panics from the libcore crate (`panic_impl` lang item).\n #[cfg_attr(not(test), panic_handler)]\n #[unwind(allowed)]\n-fn panic_handler(info: &PanicInfo<'_>) -> ! {\n+pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     struct PanicPayload<'a> {\n         inner: &'a fmt::Arguments<'a>,\n         string: Option<String>,\n@@ -374,7 +375,9 @@ fn panic_handler(info: &PanicInfo<'_>) -> ! {\n         &file_line_col);\n }\n \n-/// This is the entry point of panicking for panic!() and assert!().\n+/// This is the entry point of panicking for the non-format-string variants of\n+/// panic!() and assert!(). In particular, this is the only entry point that supports\n+/// arbitrary payloads, not just format strings.\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]"}]}