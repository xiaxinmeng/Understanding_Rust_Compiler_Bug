{"sha": "4cb3d6f983cfeab13171a7171425b624545b9ccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjNkNmY5ODNjZmVhYjEzMTcxYTcxNzE0MjViNjI0NTQ1YjljY2M=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-12-23T18:16:25Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-16T23:40:47Z"}, "message": "Intermediate formatting and such", "tree": {"sha": "5e94af6fafb39ef7c4074f13f93957544560e5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e94af6fafb39ef7c4074f13f93957544560e5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb3d6f983cfeab13171a7171425b624545b9ccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3d6f983cfeab13171a7171425b624545b9ccc", "html_url": "https://github.com/rust-lang/rust/commit/4cb3d6f983cfeab13171a7171425b624545b9ccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3d6f983cfeab13171a7171425b624545b9ccc/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8278314a8bf76c9d56072d294ee1d5ba76551cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8278314a8bf76c9d56072d294ee1d5ba76551cb6", "html_url": "https://github.com/rust-lang/rust/commit/8278314a8bf76c9d56072d294ee1d5ba76551cb6"}], "stats": {"total": 139, "additions": 64, "deletions": 75}, "files": [{"sha": "b7e045534b2eceae69403f81b820eb3640c5265b", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -205,13 +205,8 @@ impl FlagComputation {\n     }\n \n     fn add_predicate_kind(&mut self, kind: ty::PredicateKind<'_>) {\n-        match kind {\n-            ty::PredicateKind::ForAll(binder) => {\n-                self.bound_computation(binder, |computation, atom| {\n-                    computation.add_predicate_atom(atom)\n-                });\n-            }\n-        }\n+        let ty::PredicateKind::ForAll(binder) = kind;\n+        self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));\n     }\n \n     fn add_predicate_atom(&mut self, atom: ty::PredicateAtom<'_>) {"}, {"sha": "97f8cc0a2398be2559d738c5ad0b3a1efd9a8e59", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -1072,9 +1072,8 @@ impl<'tcx> Predicate<'tcx> {\n     ///\n     /// Note that this method panics in case this predicate has unbound variables.\n     pub fn skip_binders(self) -> PredicateAtom<'tcx> {\n-        match self.kind() {\n-            &PredicateKind::ForAll(binder) => binder.skip_binder(),\n-        }\n+        let &PredicateKind::ForAll(binder) = self.kind();\n+        binder.skip_binder()\n     }\n \n     /// Returns the inner `PredicateAtom`.\n@@ -1084,25 +1083,22 @@ impl<'tcx> Predicate<'tcx> {\n     /// Rebinding the returned atom can causes the previously bound variables\n     /// to end up at the wrong binding level.\n     pub fn skip_binders_unchecked(self) -> PredicateAtom<'tcx> {\n-        match self.kind() {\n-            &PredicateKind::ForAll(binder) => binder.skip_binder(),\n-        }\n+        let &PredicateKind::ForAll(binder) = self.kind();\n+        binder.skip_binder()\n     }\n \n     /// Converts this to a `Binder<PredicateAtom<'tcx>>`. If the value was an\n     /// `Atom`, then it is not allowed to contain escaping bound vars.\n     pub fn bound_atom(self) -> Binder<PredicateAtom<'tcx>> {\n-        match self.kind() {\n-            &PredicateKind::ForAll(binder) => binder,\n-        }\n+        let &PredicateKind::ForAll(binder) = self.kind();\n+        binder\n     }\n \n     /// Allows using a `Binder<PredicateAtom<'tcx>>` even if the given predicate previously\n     /// contained unbound variables by shifting these variables outwards.\n     pub fn bound_atom_with_opt_escaping(self, _tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n-        match self.kind() {\n-            &PredicateKind::ForAll(binder) => binder,\n-        }\n+        let &PredicateKind::ForAll(binder) = self.kind();\n+        binder\n     }\n }\n "}, {"sha": "33bb54542660a1b8cc9b6b99e2951513dcf7a08e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -2068,9 +2068,8 @@ define_print_and_forward_display! {\n     }\n \n     ty::Predicate<'tcx> {\n-        match self.kind() {\n-            ty::PredicateKind::ForAll(binder) => p!(print(binder)),\n-        }\n+        let ty::PredicateKind::ForAll(binder) = self.kind();\n+        p!(print(binder))\n     }\n \n     ty::PredicateAtom<'tcx> {"}, {"sha": "0e933c82c3e6b0ddf3e21c199ca4950d1295dc3b", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -1034,12 +1034,12 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        let new = ty::PredicateKind::super_fold_with(self.inner.kind, folder);\n+        let new = self.inner.kind.super_fold_with(folder);\n         folder.tcx().reuse_or_mk_predicate(self, new)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        ty::PredicateKind::super_visit_with(&self.inner.kind, visitor)\n+        self.inner.kind.super_visit_with(visitor)\n     }\n \n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {"}, {"sha": "c783f964e14c6cb68a9d5a923a812ad2ee7095e4", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -345,48 +345,48 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n         let infcx = self.selcx.infcx();\n \n-        match *obligation.predicate.kind() {\n-            ty::PredicateKind::ForAll(binder) if binder.skip_binder().has_escaping_bound_vars() => {\n-                match binder.skip_binder() {\n-                    // Evaluation will discard candidates using the leak check.\n-                    // This means we need to pass it the bound version of our\n-                    // predicate.\n-                    ty::PredicateAtom::Trait(trait_ref, _constness) => {\n-                        let trait_obligation = obligation.with(binder.rebind(trait_ref));\n-\n-                        self.process_trait_obligation(\n-                            obligation,\n-                            trait_obligation,\n-                            &mut pending_obligation.stalled_on,\n-                        )\n-                    }\n-                    ty::PredicateAtom::Projection(data) => {\n-                        let project_obligation = obligation.with(binder.rebind(data));\n+        let ty::PredicateKind::ForAll(binder) = *obligation.predicate.kind();\n+        if binder.skip_binder().has_escaping_bound_vars() {\n+            match binder.skip_binder() {\n+                // Evaluation will discard candidates using the leak check.\n+                // This means we need to pass it the bound version of our\n+                // predicate.\n+                ty::PredicateAtom::Trait(trait_ref, _constness) => {\n+                    let trait_obligation = obligation.with(binder.rebind(trait_ref));\n \n-                        self.process_projection_obligation(\n-                            project_obligation,\n-                            &mut pending_obligation.stalled_on,\n-                        )\n-                    }\n-                    ty::PredicateAtom::RegionOutlives(_)\n-                    | ty::PredicateAtom::TypeOutlives(_)\n-                    | ty::PredicateAtom::WellFormed(_)\n-                    | ty::PredicateAtom::ObjectSafe(_)\n-                    | ty::PredicateAtom::ClosureKind(..)\n-                    | ty::PredicateAtom::Subtype(_)\n-                    | ty::PredicateAtom::ConstEvaluatable(..)\n-                    | ty::PredicateAtom::ConstEquate(..) => {\n-                        let pred = infcx.replace_bound_vars_with_placeholders(binder);\n-                        ProcessResult::Changed(mk_pending(vec![\n-                            obligation.with(pred.to_predicate(self.selcx.tcx())),\n-                        ]))\n-                    }\n-                    ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n-                        bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n-                    }\n+                    self.process_trait_obligation(\n+                        obligation,\n+                        trait_obligation,\n+                        &mut pending_obligation.stalled_on,\n+                    )\n+                }\n+                ty::PredicateAtom::Projection(data) => {\n+                    let project_obligation = obligation.with(binder.rebind(data));\n+\n+                    self.process_projection_obligation(\n+                        project_obligation,\n+                        &mut pending_obligation.stalled_on,\n+                    )\n+                }\n+                ty::PredicateAtom::RegionOutlives(_)\n+                | ty::PredicateAtom::TypeOutlives(_)\n+                | ty::PredicateAtom::WellFormed(_)\n+                | ty::PredicateAtom::ObjectSafe(_)\n+                | ty::PredicateAtom::ClosureKind(..)\n+                | ty::PredicateAtom::Subtype(_)\n+                | ty::PredicateAtom::ConstEvaluatable(..)\n+                | ty::PredicateAtom::ConstEquate(..) => {\n+                    let pred = infcx.replace_bound_vars_with_placeholders(binder);\n+                    ProcessResult::Changed(mk_pending(vec![\n+                        obligation.with(pred.to_predicate(self.selcx.tcx())),\n+                    ]))\n+                }\n+                ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n+                    bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n             }\n-            ty::PredicateKind::ForAll(binder) => match binder.skip_binder() {\n+        } else {\n+            match binder.skip_binder() {\n                 ty::PredicateAtom::Trait(data, _) => {\n                     let trait_obligation = obligation.with(Binder::dummy(data));\n \n@@ -598,7 +598,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ty::PredicateAtom::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n-            },\n+            }\n         }\n     }\n "}, {"sha": "adb20364ddf6ac27069e947c13321c401b15c4f4", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -94,13 +94,11 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // region relationships.\n         implied_bounds.extend(obligations.into_iter().flat_map(|obligation| {\n             assert!(!obligation.has_escaping_bound_vars());\n-            match obligation.predicate.kind() {\n-                &ty::PredicateKind::ForAll(binder)\n-                    if binder.skip_binder().has_escaping_bound_vars() =>\n-                {\n-                    vec![]\n-                }\n-                &ty::PredicateKind::ForAll(binder) => match binder.skip_binder() {\n+            let ty::PredicateKind::ForAll(binder) = obligation.predicate.kind();\n+            if binder.skip_binder().has_escaping_bound_vars() {\n+                vec![]\n+            } else {\n+                match binder.skip_binder() {\n                     ty::PredicateAtom::Trait(..)\n                     | ty::PredicateAtom::Subtype(..)\n                     | ty::PredicateAtom::Projection(..)\n@@ -124,7 +122,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                         tcx.push_outlives_components(ty_a, &mut components);\n                         implied_bounds_from_components(r_b, components)\n                     }\n-                },\n+                }\n             }\n         }));\n     }"}, {"sha": "a7322711f90c5a9e174e449b0e1fbc73f7e70fca", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb3d6f983cfeab13171a7171425b624545b9ccc/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=4cb3d6f983cfeab13171a7171425b624545b9ccc", "patch": "@@ -30,12 +30,13 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n                 if tcx.has_attr(item_def_id, sym::rustc_outlives) {\n                     let mut pred: Vec<String> = predicates\n                         .iter()\n-                        .map(|(out_pred, _)| match out_pred.kind() {\n-                            ty::PredicateKind::ForAll(binder) => match binder.skip_binder() {\n+                        .map(|(out_pred, _)| {\n+                            let ty::PredicateKind::ForAll(binder) = out_pred.kind();\n+                            match binder.skip_binder() {\n                                 ty::PredicateAtom::RegionOutlives(p) => p.to_string(),\n                                 ty::PredicateAtom::TypeOutlives(p) => p.to_string(),\n                                 err => bug!(\"unexpected predicate {:?}\", err),\n-                            },\n+                            }\n                         })\n                         .collect();\n                     pred.sort();"}]}