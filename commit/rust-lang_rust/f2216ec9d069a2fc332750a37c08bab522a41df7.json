{"sha": "f2216ec9d069a2fc332750a37c08bab522a41df7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMjE2ZWM5ZDA2OWEyZmMzMzI3NTBhMzdjMDhiYWI1MjJhNDFkZjc=", "commit": {"author": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-25T01:42:41Z"}, "committer": {"name": "Simon BD", "email": "simon@server", "date": "2012-10-25T01:42:41Z"}, "message": "Move binarysort out of MergeState", "tree": {"sha": "4fe3ceedf502d525df07ed7db541a1d02ea64ec0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe3ceedf502d525df07ed7db541a1d02ea64ec0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2216ec9d069a2fc332750a37c08bab522a41df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2216ec9d069a2fc332750a37c08bab522a41df7", "html_url": "https://github.com/rust-lang/rust/commit/f2216ec9d069a2fc332750a37c08bab522a41df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2216ec9d069a2fc332750a37c08bab522a41df7/comments", "author": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "committer": {"login": "14427", "id": 2423611, "node_id": "MDQ6VXNlcjI0MjM2MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2423611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/14427", "html_url": "https://github.com/14427", "followers_url": "https://api.github.com/users/14427/followers", "following_url": "https://api.github.com/users/14427/following{/other_user}", "gists_url": "https://api.github.com/users/14427/gists{/gist_id}", "starred_url": "https://api.github.com/users/14427/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/14427/subscriptions", "organizations_url": "https://api.github.com/users/14427/orgs", "repos_url": "https://api.github.com/users/14427/repos", "events_url": "https://api.github.com/users/14427/events{/privacy}", "received_events_url": "https://api.github.com/users/14427/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c8a40828d5f86890439eccb9199236ae9e60d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c8a40828d5f86890439eccb9199236ae9e60d9", "html_url": "https://github.com/rust-lang/rust/commit/98c8a40828d5f86890439eccb9199236ae9e60d9"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "14af2ead61b0f07204e6b396e5b20b89b8914d17", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f2216ec9d069a2fc332750a37c08bab522a41df7/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2216ec9d069a2fc332750a37c08bab522a41df7/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=f2216ec9d069a2fc332750a37c08bab522a41df7", "patch": "@@ -172,16 +172,16 @@ pub fn tim_sort<T: Copy Ord>(array: &[mut T]) {\n         return;\n     }\n \n-    let ms = &MergeState();\n-    ms.array = array;\n-    let min_run = min_run_length(size);\n-\n     if size < MIN_MERGE {\n         let init_run_len = count_run_ascending(array);\n-        ms.binarysort(array, init_run_len);\n+        binarysort(array, init_run_len);\n         return;\n     }\n \n+    let ms = &MergeState();\n+    ms.array = array;\n+    let min_run = min_run_length(size);\n+\n     let mut idx = 0;\n     let mut remaining = size;\n     loop {\n@@ -191,7 +191,7 @@ pub fn tim_sort<T: Copy Ord>(array: &[mut T]) {\n         if run_len < min_run {\n             let force = if remaining <= min_run {remaining} else {min_run};\n             let slice = vec::mut_view(arr, 0, force);\n-            ms.binarysort(slice, run_len);\n+            binarysort(slice, run_len);\n             run_len = force;\n         }\n \n@@ -206,6 +206,36 @@ pub fn tim_sort<T: Copy Ord>(array: &[mut T]) {\n     ms.merge_force_collapse(array);\n }\n \n+fn binarysort<T: Copy Ord>(array: &[mut T], start: uint) {\n+    let size = array.len();\n+    let mut start = start;\n+    assert start <= size;\n+\n+    if start == 0 { start += 1; }\n+\n+    while start < size {\n+        let pivot = array[start];\n+        let mut left = 0;\n+        let mut right = start;\n+        assert left <= right;\n+\n+        while left < right {\n+            let mid = (left + right) >> 1;\n+            if pivot < array[mid] {\n+                right = mid;\n+            } else {\n+                left = mid+1;\n+            }\n+        }\n+        assert left == right;\n+        let mut n = start-left;\n+\n+        copy_vec(array, left+1, array, left, n);\n+        array[left] = move pivot;\n+        start += 1;\n+    }\n+}\n+\n // Reverse the order of elements in a slice, in place\n fn reverse_slice<T>(v: &[mut T], start: uint, end:uint) {\n     let mut i = start;\n@@ -366,36 +396,6 @@ fn MergeState<T>() -> MergeState<T> {\n }\n \n impl<T: Copy Ord> MergeState<T> {\n-    fn binarysort(&self, array: &[mut T], start: uint) {\n-        let size = array.len();\n-        let mut start = start;\n-        assert start <= size;\n-\n-        if start == 0 { start += 1; }\n-\n-        while start < size {\n-            let pivot = array[start];\n-            let mut left = 0;\n-            let mut right = start;\n-            assert left <= right;\n-\n-            while left < right {\n-                let mid = (left + right) >> 1;\n-                if pivot < array[mid] {\n-                    right = mid;\n-                } else {\n-                    left = mid+1;\n-                }\n-            }\n-            assert left == right;\n-            let mut n = start-left;\n-\n-            copy_vec(array, left+1, array, left, n);\n-            array[left] = move pivot;\n-            start += 1;\n-        }\n-    }\n-\n     fn push_run(&self, run_base: uint, run_len: uint) {\n         let tmp = RunState{base: run_base, len: run_len};\n         self.runs.push(tmp);"}]}