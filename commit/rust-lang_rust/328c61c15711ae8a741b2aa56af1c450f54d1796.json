{"sha": "328c61c15711ae8a741b2aa56af1c450f54d1796", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyOGM2MWMxNTcxMWFlOGE3NDFiMmFhNTZhZjFjNDUwZjU0ZDE3OTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-12T02:17:16Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-15T15:19:55Z"}, "message": "Make the default stage for x.py configurable\n\nThis allows configuring the default stage for each sub-command individually.\n\n- Normalize the stage as early as possible, so there's no confusion\n  about which to use.\n- Don't add an explicit `stage` option in config.toml\n\n  This offers no more flexibility than `*_stage` and makes it confusing\n  which takes precedence.\n\n- Always give `--stage N` precedence over config.toml\n- Fix bootstrap tests\n\n  This changes the tests to go through `Config::parse` so that they test\n  the actual defaults, not the dummy ones provided by `default_opts`.  To\n  make this workable (and independent of the environment), it does not\n  read `config.toml` for tests.", "tree": {"sha": "63b43832663dab8e75d3ee2ddc6b4e3cb63502eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b43832663dab8e75d3ee2ddc6b4e3cb63502eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/328c61c15711ae8a741b2aa56af1c450f54d1796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/328c61c15711ae8a741b2aa56af1c450f54d1796", "html_url": "https://github.com/rust-lang/rust/commit/328c61c15711ae8a741b2aa56af1c450f54d1796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/328c61c15711ae8a741b2aa56af1c450f54d1796/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c10e34a49385d329e15575027d0faa729986f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c10e34a49385d329e15575027d0faa729986f3", "html_url": "https://github.com/rust-lang/rust/commit/12c10e34a49385d329e15575027d0faa729986f3"}], "stats": {"total": 121, "additions": 79, "deletions": 42}, "files": [{"sha": "f10d1a7b44e5e39a41e513e0d0647a797fa6532f", "filename": "config.toml.example", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/328c61c15711ae8a741b2aa56af1c450f54d1796/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/328c61c15711ae8a741b2aa56af1c450f54d1796/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=328c61c15711ae8a741b2aa56af1c450f54d1796", "patch": "@@ -111,6 +111,23 @@\n # General build configuration options\n # =============================================================================\n [build]\n+# The default stage to use for the `doc` subcommand\n+#doc-stage = 0\n+\n+# The default stage to use for the `build` subcommand\n+#build-stage = 1\n+\n+# The default stage to use for the `test` subcommand\n+#test-stage = 1\n+\n+# The default stage to use for the `dist` subcommand\n+#dist-stage = 2\n+\n+# The default stage to use for the `install` subcommand\n+#install-stage = 2\n+\n+# The default stage to use for the `bench` subcommand\n+#bench-stage = 2\n \n # Build triple for the original snapshot compiler. This must be a compiler that\n # nightlies are already produced for. The current platform must be able to run"}, {"sha": "034b01a502cc59fe23e68f4b39c619db3ec0689e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/328c61c15711ae8a741b2aa56af1c450f54d1796/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/328c61c15711ae8a741b2aa56af1c450f54d1796/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=328c61c15711ae8a741b2aa56af1c450f54d1796", "patch": "@@ -526,23 +526,9 @@ impl<'a> Builder<'a> {\n     }\n \n     fn new_internal(build: &Build, kind: Kind, paths: Vec<PathBuf>) -> Builder<'_> {\n-        let top_stage = if let Some(explicit_stage) = build.config.stage {\n-            explicit_stage\n-        } else {\n-            // See https://github.com/rust-lang/compiler-team/issues/326\n-            match kind {\n-                Kind::Doc => 0,\n-                Kind::Build | Kind::Test => 1,\n-                Kind::Bench | Kind::Dist | Kind::Install => 2,\n-                // These are all bootstrap tools, which don't depend on the compiler.\n-                // The stage we pass shouldn't matter, but use 0 just in case.\n-                Kind::Check | Kind::Clippy | Kind::Fix | Kind::Run | Kind::Format => 0,\n-            }\n-        };\n-\n         Builder {\n             build,\n-            top_stage,\n+            top_stage: build.config.stage,\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n@@ -566,20 +552,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n \n-        let this = Self::new_internal(build, kind, paths.to_owned());\n-\n-        // CI should always run stage 2 builds, unless it specifically states otherwise\n-        #[cfg(not(test))]\n-        if build.config.stage.is_none() && build.ci_env != crate::CiEnv::None {\n-            match kind {\n-                Kind::Test | Kind::Doc | Kind::Build | Kind::Bench | Kind::Dist | Kind::Install => {\n-                    assert_eq!(this.top_stage, 2)\n-                }\n-                Kind::Check | Kind::Clippy | Kind::Fix | Kind::Run | Kind::Format => {}\n-            }\n-        }\n-\n-        this\n+        Self::new_internal(build, kind, paths.to_owned())\n     }\n \n     pub fn execute_cli(&self) {"}, {"sha": "f96925f927086ad1e64c3902e7427288ccef655c", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/328c61c15711ae8a741b2aa56af1c450f54d1796/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/328c61c15711ae8a741b2aa56af1c450f54d1796/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=328c61c15711ae8a741b2aa56af1c450f54d1796", "patch": "@@ -2,8 +2,8 @@ use super::*;\n use crate::config::{Config, TargetSelection};\n use std::thread;\n \n-fn configure(host: &[&str], target: &[&str]) -> Config {\n-    let mut config = Config::default_opts();\n+fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n+    let mut config = Config::parse(&[cmd.to_owned()]);\n     // don't save toolstates\n     config.save_toolstates = None;\n     config.skip_only_host_steps = false;\n@@ -42,7 +42,7 @@ mod defaults {\n \n     #[test]\n     fn build_default() {\n-        let build = Build::new(configure(&[], &[]));\n+        let build = Build::new(configure(\"build\", &[], &[]));\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n \n@@ -70,7 +70,7 @@ mod defaults {\n \n     #[test]\n     fn build_stage_0() {\n-        let config = Config { stage: Some(0), ..configure(&[], &[]) };\n+        let config = Config { stage: 0, ..configure(\"build\", &[], &[]) };\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n@@ -92,7 +92,7 @@ mod defaults {\n \n     #[test]\n     fn doc_default() {\n-        let mut config = configure(&[], &[]);\n+        let mut config = configure(\"doc\", &[], &[]);\n         config.compiler_docs = true;\n         config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n         let build = Build::new(config);\n@@ -126,7 +126,7 @@ mod dist {\n     use pretty_assertions::assert_eq;\n \n     fn configure(host: &[&str], target: &[&str]) -> Config {\n-        Config { stage: Some(2), ..super::configure(host, target) }\n+        Config { stage: 2, ..super::configure(\"dist\", host, target) }\n     }\n \n     #[test]\n@@ -455,7 +455,7 @@ mod dist {\n     #[test]\n     fn test_with_no_doc_stage0() {\n         let mut config = configure(&[], &[]);\n-        config.stage = Some(0);\n+        config.stage = 0;\n         config.cmd = Subcommand::Test {\n             paths: vec![\"library/std\".into()],\n             test_args: vec![],"}, {"sha": "cc0a534314a52859677d61904f95bec49ceef827", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/328c61c15711ae8a741b2aa56af1c450f54d1796/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/328c61c15711ae8a741b2aa56af1c450f54d1796/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=328c61c15711ae8a741b2aa56af1c450f54d1796", "patch": "@@ -10,7 +10,6 @@ use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process;\n \n use crate::cache::{Interned, INTERNER};\n use crate::flags::Flags;\n@@ -57,7 +56,7 @@ pub struct Config {\n     pub skip_only_host_steps: bool,\n \n     pub on_fail: Option<String>,\n-    pub stage: Option<u32>,\n+    pub stage: u32,\n     pub keep_stage: Vec<u32>,\n     pub src: PathBuf,\n     pub jobs: Option<u32>,\n@@ -300,6 +299,12 @@ struct Build {\n     configure_args: Option<Vec<String>>,\n     local_rebuild: Option<bool>,\n     print_step_timings: Option<bool>,\n+    doc_stage: Option<u32>,\n+    build_stage: Option<u32>,\n+    test_stage: Option<u32>,\n+    install_stage: Option<u32>,\n+    dist_stage: Option<u32>,\n+    bench_stage: Option<u32>,\n }\n \n /// TOML representation of various global install decisions.\n@@ -480,13 +485,11 @@ impl Config {\n \n     pub fn parse(args: &[String]) -> Config {\n         let flags = Flags::parse(&args);\n-        let file = flags.config.clone();\n         let mut config = Config::default_opts();\n         config.exclude = flags.exclude;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;\n         config.on_fail = flags.on_fail;\n-        config.stage = flags.stage;\n         config.jobs = flags.jobs.map(threads_from_config);\n         config.cmd = flags.cmd;\n         config.incremental = flags.incremental;\n@@ -503,8 +506,14 @@ impl Config {\n             config.out = dir;\n         }\n \n-        let toml = file\n+        #[cfg(test)]\n+        let toml = TomlConfig::default();\n+        #[cfg(not(test))]\n+        let toml = flags\n+            .config\n             .map(|file| {\n+                use std::process;\n+\n                 let contents = t!(fs::read_to_string(&file));\n                 match toml::from_str(&contents) {\n                     Ok(table) => table,\n@@ -520,7 +529,7 @@ impl Config {\n             })\n             .unwrap_or_else(TomlConfig::default);\n \n-        let build = toml.build.clone().unwrap_or_default();\n+        let build = toml.build.unwrap_or_default();\n \n         // If --target was specified but --host wasn't specified, don't run any host-only tests.\n         let has_hosts = build.host.is_some() || flags.host.is_some();\n@@ -564,6 +573,44 @@ impl Config {\n         set(&mut config.configure_args, build.configure_args);\n         set(&mut config.local_rebuild, build.local_rebuild);\n         set(&mut config.print_step_timings, build.print_step_timings);\n+\n+        // See https://github.com/rust-lang/compiler-team/issues/326\n+        config.stage = match config.cmd {\n+            Subcommand::Doc { .. } => flags.stage.or(build.doc_stage).unwrap_or(0),\n+            Subcommand::Build { .. } => flags.stage.or(build.build_stage).unwrap_or(1),\n+            Subcommand::Test { .. } => flags.stage.or(build.test_stage).unwrap_or(1),\n+            Subcommand::Bench { .. } => flags.stage.or(build.bench_stage).unwrap_or(2),\n+            Subcommand::Dist { .. } => flags.stage.or(build.dist_stage).unwrap_or(2),\n+            Subcommand::Install { .. } => flags.stage.or(build.install_stage).unwrap_or(2),\n+            // These are all bootstrap tools, which don't depend on the compiler.\n+            // The stage we pass shouldn't matter, but use 0 just in case.\n+            Subcommand::Clean { .. }\n+            | Subcommand::Check { .. }\n+            | Subcommand::Clippy { .. }\n+            | Subcommand::Fix { .. }\n+            | Subcommand::Run { .. }\n+            | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n+        };\n+\n+        // CI should always run stage 2 builds, unless it specifically states otherwise\n+        #[cfg(not(test))]\n+        if flags.stage.is_none() && crate::CiEnv::current() != crate::CiEnv::None {\n+            match config.cmd {\n+                Subcommand::Test { .. }\n+                | Subcommand::Doc { .. }\n+                | Subcommand::Build { .. }\n+                | Subcommand::Bench { .. }\n+                | Subcommand::Dist { .. }\n+                | Subcommand::Install { .. } => assert_eq!(config.stage, 2),\n+                Subcommand::Clean { .. }\n+                | Subcommand::Check { .. }\n+                | Subcommand::Clippy { .. }\n+                | Subcommand::Fix { .. }\n+                | Subcommand::Run { .. }\n+                | Subcommand::Format { .. } => {}\n+            }\n+        }\n+\n         config.verbose = cmp::max(config.verbose, flags.verbose);\n \n         if let Some(ref install) = toml.install {"}]}