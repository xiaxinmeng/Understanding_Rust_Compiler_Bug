{"sha": "72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZmM0YTVlYjcyYjhiYTk2ZGJhNjY0MDBjN2VlY2FjOTNiMGIyNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-12T00:51:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-12T00:51:41Z"}, "message": "auto merge of #14119 : thestinger/rust/heap, r=cmr", "tree": {"sha": "b9bea326ff923ff3f5f54e8c57e4350203add0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bea326ff923ff3f5f54e8c57e4350203add0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "html_url": "https://github.com/rust-lang/rust/commit/72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b40c3e9d3dd0a6be4d048389d33435f82205d376", "url": "https://api.github.com/repos/rust-lang/rust/commits/b40c3e9d3dd0a6be4d048389d33435f82205d376", "html_url": "https://github.com/rust-lang/rust/commit/b40c3e9d3dd0a6be4d048389d33435f82205d376"}, {"sha": "f1735cefcfdee5260ea6961cf785f545a340ff85", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1735cefcfdee5260ea6961cf785f545a340ff85", "html_url": "https://github.com/rust-lang/rust/commit/f1735cefcfdee5260ea6961cf785f545a340ff85"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "c15f7aba7c9c11b85f8abd659ee60f9421bf6d1d", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -7,4 +7,4 @@\n src/etc/pkg/rust-logo.ico binary\n src/etc/pkg/rust-logo.png binary\n src/rt/msvc/* -whitespace\n-src/rt/vg/* -whitespace\n+src/rt/valgrind/* -whitespace"}, {"sha": "6a89897c292778572a3f71d9114c767ba632fca9", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -36,7 +36,7 @@ LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n PKG_TAR = dist/$(PKG_NAME).tar.gz\n \n PKG_GITMODULES := $(S)src/libuv $(S)src/llvm $(S)src/gyp $(S)src/compiler-rt \\\n-\t\t  $(S)src/rt/hoedown\n+\t\t  $(S)src/rt/hoedown $(S)src/jemalloc\n PKG_FILES := \\\n     $(S)COPYRIGHT                              \\\n     $(S)LICENSE-APACHE                         \\"}, {"sha": "67ca5fefffc3ede870062ca9a88f77ba26f11a20", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -260,6 +260,7 @@ $$(JEMALLOC_LIB_$(1)): $$(JEMALLOC_DEPS) $$(MKFILE_DEPS)\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n \t\tRANLIB=\"$$(AR_$(1)) s\" \\\n+\t\tCPPFLAGS=\"-I $(S)src/rt/\" \\\n \t\tEXTRA_CFLAGS=\"$$(CFG_CFLAGS_$(1))\"\n \t$$(Q)$$(MAKE) -C \"$$(JEMALLOC_BUILD_DIR_$(1))\" build_lib_static\n \t$$(Q)cp $$(JEMALLOC_BUILD_DIR_$(1))/lib/$$(JEMALLOC_REAL_NAME_$(1)) $$(JEMALLOC_LIB_$(1))"}, {"sha": "9ce7077e03cccc468d9fdc0326f48d868ad2da4f", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -227,8 +227,8 @@ ALL_HS := $(wildcard $(S)src/rt/*.h \\\n                      $(S)src/rt/*/*.h \\\n                      $(S)src/rt/*/*/*.h \\\n                      $(S)src/rustllvm/*.h)\n-ALL_HS := $(filter-out $(S)src/rt/vg/valgrind.h \\\n-                       $(S)src/rt/vg/memcheck.h \\\n+ALL_HS := $(filter-out $(S)src/rt/valgrind/valgrind.h \\\n+                       $(S)src/rt/valgrind/memcheck.h \\\n                        $(S)src/rt/msvc/typeof.h \\\n                        $(S)src/rt/msvc/stdint.h \\\n                        $(S)src/rt/msvc/inttypes.h \\"}, {"sha": "87c2f826af5921f9dba686a2f52c916e889c0d55", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -33,7 +33,7 @@ use option::{Option, Some, None};\n use ptr;\n use ptr::RawPtr;\n use mem::{min_align_of, size_of};\n-use rt::heap::exchange_free;\n+use rt::heap::deallocate;\n \n struct RcBox<T> {\n     value: T,\n@@ -105,8 +105,8 @@ impl<T> Drop for Rc<T> {\n                     self.dec_weak();\n \n                     if self.weak() == 0 {\n-                        exchange_free(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n-                                      min_align_of::<RcBox<T>>())\n+                        deallocate(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n+                                   min_align_of::<RcBox<T>>())\n                     }\n                 }\n             }\n@@ -179,8 +179,8 @@ impl<T> Drop for Weak<T> {\n                 // the weak count starts at 1, and will only go to\n                 // zero if all the strong pointers have disappeared.\n                 if self.weak() == 0 {\n-                    exchange_free(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n-                                  min_align_of::<RcBox<T>>())\n+                    deallocate(self.ptr as *mut u8, size_of::<RcBox<T>>(),\n+                               min_align_of::<RcBox<T>>())\n                 }\n             }\n         }"}, {"sha": "b729fb3803514a7c73aa6bb743ea8e1b03f58006", "filename": "src/libstd/rt/heap.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibstd%2Frt%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibstd%2Frt%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fheap.rs?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -12,8 +12,9 @@\n // FIXME: #13996: need a way to mark the `allocate` and `reallocate` return values as `noalias`\n \n use intrinsics::{abort, cttz32};\n-use libc::{c_int, c_void, size_t};\n-use ptr::RawPtr;\n+use libc::{c_char, c_int, c_void, size_t};\n+use ptr::{RawPtr, mut_null, null};\n+use option::{None, Option};\n \n #[link(name = \"jemalloc\", kind = \"static\")]\n extern {\n@@ -22,6 +23,9 @@ extern {\n     fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n     fn je_dallocx(ptr: *mut c_void, flags: c_int);\n     fn je_nallocx(size: size_t, flags: c_int) -> size_t;\n+    fn je_malloc_stats_print(write_cb: Option<extern \"C\" fn(cbopaque: *mut c_void, *c_char)>,\n+                             cbopaque: *mut c_void,\n+                             opts: *c_char);\n }\n \n // -lpthread needs to occur after -ljemalloc, the earlier argument isn't enough\n@@ -99,6 +103,16 @@ pub fn usable_size(size: uint, align: uint) -> uint {\n     unsafe { je_nallocx(size as size_t, mallocx_align(align)) as uint }\n }\n \n+/// Print implementation-defined allocator statistics.\n+///\n+/// These statistics may be inconsistent if other threads use the allocator during the call.\n+#[unstable]\n+pub fn stats_print() {\n+    unsafe {\n+        je_malloc_stats_print(None, mut_null(), null())\n+    }\n+}\n+\n /// The allocator for unique pointers.\n #[cfg(stage0)]\n #[lang=\"exchange_malloc\"]\n@@ -151,13 +165,8 @@ pub unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n #[lang=\"exchange_free\"]\n #[inline]\n // FIXME: #13994 (rustc should pass align and size here)\n-pub unsafe fn exchange_free_(ptr: *mut u8) {\n-    exchange_free(ptr, 0, 8)\n-}\n-\n-#[inline]\n-pub unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n-    deallocate(ptr, size, align);\n+unsafe fn exchange_free(ptr: *mut u8) {\n+    deallocate(ptr, 0, 8);\n }\n \n // FIXME: #7496\n@@ -179,26 +188,26 @@ unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint, align: uin\n #[doc(hidden)]\n #[deprecated]\n #[cfg(stage0, not(test))]\n-pub extern \"C\" fn rust_malloc(size: uint) -> *mut u8 {\n-    unsafe { exchange_malloc(size) }\n+pub unsafe extern \"C\" fn rust_malloc(size: uint) -> *mut u8 {\n+    exchange_malloc(size)\n }\n \n // hack for libcore\n #[no_mangle]\n #[doc(hidden)]\n #[deprecated]\n #[cfg(not(stage0), not(test))]\n-pub extern \"C\" fn rust_malloc(size: uint, align: uint) -> *mut u8 {\n-    unsafe { exchange_malloc(size, align) }\n+pub unsafe extern \"C\" fn rust_malloc(size: uint, align: uint) -> *mut u8 {\n+    exchange_malloc(size, align)\n }\n \n // hack for libcore\n #[no_mangle]\n #[doc(hidden)]\n #[deprecated]\n #[cfg(not(test))]\n-pub extern \"C\" fn rust_free(ptr: *mut u8, size: uint, align: uint) {\n-    unsafe { exchange_free(ptr, size, align) }\n+pub unsafe extern \"C\" fn rust_free(ptr: *mut u8, size: uint, align: uint) {\n+    deallocate(ptr, size, align)\n }\n \n #[cfg(test)]"}, {"sha": "3c0d0efa7660c514c91453a9fadea71446fd8374", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -109,7 +109,7 @@ use ops::Drop;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n-use rt::heap::{exchange_malloc, exchange_free};\n+use rt::heap::{exchange_malloc, deallocate};\n use unstable::finally::try_finally;\n use vec::Vec;\n \n@@ -330,7 +330,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n                         ptr::read(&*p.offset(j));\n                     }\n                     // FIXME: #13994 (should pass align and size here)\n-                    exchange_free(ret as *mut u8, 0, 8);\n+                    deallocate(ret as *mut u8, 0, 8);\n                 });\n             mem::transmute(ret)\n         }\n@@ -377,7 +377,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n                         ptr::read(&*p.offset(j));\n                     }\n                     // FIXME: #13994 (should pass align and size here)\n-                    exchange_free(ret as *mut u8, 0, 8);\n+                    deallocate(ret as *mut u8, 0, 8);\n                 });\n             mem::transmute(ret)\n         }\n@@ -817,7 +817,7 @@ impl<T> Drop for MoveItems<T> {\n         for _x in *self {}\n         unsafe {\n             // FIXME: #13994 (should pass align and size here)\n-            exchange_free(self.allocation, 0, 8)\n+            deallocate(self.allocation, 0, 8)\n         }\n     }\n }"}, {"sha": "26d7e04fe1d15afb1fb0589580a529cb19c7d15e", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -15,7 +15,7 @@\n \n use std::mem;\n use std::ptr;\n-use std::rt::heap::exchange_free;\n+use std::rt::heap::deallocate;\n use std::sync::atomics;\n use std::mem::{min_align_of, size_of};\n \n@@ -191,8 +191,8 @@ impl<T: Share + Send> Drop for Arc<T> {\n \n         if self.inner().weak.fetch_sub(1, atomics::Release) == 1 {\n             atomics::fence(atomics::Acquire);\n-            unsafe { exchange_free(self.x as *mut u8, size_of::<ArcInner<T>>(),\n-                                   min_align_of::<ArcInner<T>>()) }\n+            unsafe { deallocate(self.x as *mut u8, size_of::<ArcInner<T>>(),\n+                                min_align_of::<ArcInner<T>>()) }\n         }\n     }\n }\n@@ -242,8 +242,8 @@ impl<T: Share + Send> Drop for Weak<T> {\n         // the memory orderings\n         if self.inner().weak.fetch_sub(1, atomics::Release) == 1 {\n             atomics::fence(atomics::Acquire);\n-            unsafe { exchange_free(self.x as *mut u8, size_of::<ArcInner<T>>(),\n-                                   min_align_of::<ArcInner<T>>()) }\n+            unsafe { deallocate(self.x as *mut u8, size_of::<ArcInner<T>>(),\n+                                min_align_of::<ArcInner<T>>()) }\n         }\n     }\n }"}, {"sha": "6ab36f1db7a82f56ffb5c46b0af730e2d8c9e46f", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "patch": "@@ -10,7 +10,7 @@\n \n /* Foreign builtins. */\n \n-#include \"vg/valgrind.h\"\n+#include \"valgrind/valgrind.h\"\n \n #include <stdint.h>\n #include <time.h>"}, {"sha": "68474b44186c68879716bf1d49715b8bade4ed4f", "filename": "src/rt/valgrind/memcheck.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Frt%2Fvalgrind%2Fmemcheck.h", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Frt%2Fvalgrind%2Fmemcheck.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvalgrind%2Fmemcheck.h?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "previous_filename": "src/rt/vg/memcheck.h"}, {"sha": "c9aa0fd0328356b0d3b376fc575b2ad6420074d4", "filename": "src/rt/valgrind/valgrind.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Frt%2Fvalgrind%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/72fc4a5eb72b8ba96dba66400c7eecac93b0b252/src%2Frt%2Fvalgrind%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvalgrind%2Fvalgrind.h?ref=72fc4a5eb72b8ba96dba66400c7eecac93b0b252", "previous_filename": "src/rt/vg/valgrind.h"}]}