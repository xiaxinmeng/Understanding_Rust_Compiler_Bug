{"sha": "c75aeaac0bb2af593b9819cfeae6d518617d48cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWFlYWFjMGJiMmFmNTkzYjk4MTljZmVhZTZkNTE4NjE3ZDQ4Y2M=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-26T17:58:28Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T05:07:38Z"}, "message": "Fix #88155", "tree": {"sha": "63821c786135ed628b1ffe12c7fdb433fd75d9a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63821c786135ed628b1ffe12c7fdb433fd75d9a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75aeaac0bb2af593b9819cfeae6d518617d48cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEocxoACgkQAn35M4hi\nrd2A6w//VEj1jfb2WqglbqAy8yfDrAZaPoxB4N1E2xkCblRLVSp+L4mi05DZXIzc\neIrloclQZT4Sqw7efmlaD+l0bl5doblc/Eg8Yt4Nre/0GyupkbihhBEvx7hZjZVl\ntgc1Lp3qLcVyxAc35v0/HtSEnOPhYCQejOKJt/jg1+p56dSRab5j8GZOrfO3xnfm\naPl842vD2H0myOPEtSZk/8HDZQc/Tg6ciN6oytPUUzqmV/SUBelI0dWAeRcUFiQO\nSu+Mati/i8uxvkQWBY/jfI3PW8Nl9/BhTOPbL0ObvQeNUftUAt9TqLNmyN7tuLDu\nK04wuHM5rMO+DOkMIkIRugWUUNrpRRfXTEq3SHgP6Sf9k/zSPcFAQVztASpFsUC1\nX45DOQzD1x1AC6G+i0zCjg1foKu4ZQZZR4i6kDxEWoAWX7b/7N8MSKS45dbwowCI\nA3y/t3+GrwTxEie5GIGfObDrmEH13gU+qeHzwu8pZrN/brU2swa9k1R3amjxg6RT\nJUNLvyTtN60GUYVbWnDz8jgv4B3iGKFJLTK6ZOqHgztpyTqk1yNZxhO0lpKgrr5e\nW1AToeChpxneKAwfw+1XQuvi/fX/dcZqRBpt0HQuM6FMnCil4N/CVO7BEpifTLx3\nJLiTl/moUS9zScHVz0R8AsPakDMfbLzVm3SKbpK5c+0JF97KkKQ=\n=cSo+\n-----END PGP SIGNATURE-----", "payload": "tree 63821c786135ed628b1ffe12c7fdb433fd75d9a2\nparent 703c557aaa48ba647f6fafea2330819a8bbe6734\nauthor Deadbeef <ent3rm4n@gmail.com> 1630000708 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630040858 +0000\n\nFix #88155\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75aeaac0bb2af593b9819cfeae6d518617d48cc", "html_url": "https://github.com/rust-lang/rust/commit/c75aeaac0bb2af593b9819cfeae6d518617d48cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75aeaac0bb2af593b9819cfeae6d518617d48cc/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703c557aaa48ba647f6fafea2330819a8bbe6734", "url": "https://api.github.com/repos/rust-lang/rust/commits/703c557aaa48ba647f6fafea2330819a8bbe6734", "html_url": "https://github.com/rust-lang/rust/commit/703c557aaa48ba647f6fafea2330819a8bbe6734"}], "stats": {"total": 104, "additions": 68, "deletions": 36}, "files": [{"sha": "0de6d743a7a7982c7e3da8b020f863d528cf088b", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 46, "deletions": 36, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c75aeaac0bb2af593b9819cfeae6d518617d48cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75aeaac0bb2af593b9819cfeae6d518617d48cc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=c75aeaac0bb2af593b9819cfeae6d518617d48cc", "patch": "@@ -805,6 +805,8 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     }\n                 };\n \n+                let mut nonconst_call_permission = false;\n+\n                 // Attempting to call a trait method?\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n@@ -824,18 +826,44 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {\n-                        let mut selcx = SelectionContext::new(&infcx);\n-                        selcx.select(&obligation).unwrap()\n+                        let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+                        selcx.select(&obligation)\n                     });\n \n-                    // If the method is provided via a where-clause that does not use the `?const`\n-                    // opt-out, the call is allowed.\n-                    if let Some(ImplSource::Param(_, hir::Constness::Const)) = implsrc {\n-                        debug!(\n-                            \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n-                            trait_ref, param_env\n-                        );\n-                        return;\n+                    match implsrc {\n+                        Ok(Some(ImplSource::Param(_, hir::Constness::Const))) => {\n+                            debug!(\n+                                \"const_trait_impl: provided {:?} via where-clause in {:?}\",\n+                                 trait_ref, param_env\n+                            );\n+                            return;\n+                        }\n+                        Ok(Some(ImplSource::UserDefined(data))) => {\n+                            let callee_name = tcx.item_name(callee);\n+                            if let Some(&did) = tcx.associated_item_def_ids(data.impl_def_id).iter().find(|did| tcx.item_name(**did) == callee_name) {\n+                                callee = did;\n+                            }\n+                        }\n+                        _ => {\n+                            if !tcx.is_const_fn_raw(callee) {\n+                                // At this point, it is only legal when the caller is marked with\n+                                // #[default_method_body_is_const], and the callee is in the same\n+                                // trait.\n+                                let callee_trait = tcx.trait_of_item(callee);\n+                                if callee_trait.is_some() {\n+                                    if tcx.has_attr(caller, sym::default_method_body_is_const) {\n+                                        if tcx.trait_of_item(caller) == callee_trait {\n+                                            nonconst_call_permission = true;\n+                                        }\n+                                    }\n+                                }\n+\n+                                if !nonconst_call_permission {\n+                                    self.check_op(ops::FnCallNonConst);\n+                                    return;\n+                                }\n+                            }\n+                        }\n                     }\n \n                     // Resolve a trait method call to its concrete implementation, which may be in a\n@@ -875,34 +903,16 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 let is_intrinsic = tcx.fn_sig(callee).abi() == RustIntrinsic;\n \n                 if !tcx.is_const_fn_raw(callee) {\n-                    let mut permitted = false;\n-\n-                    let callee_trait = tcx.trait_of_item(callee);\n-                    if let Some(trait_id) = callee_trait {\n-                        if tcx.has_attr(caller, sym::default_method_body_is_const) {\n-                            // permit call to non-const fn when caller has default_method_body_is_const..\n-                            if tcx.trait_of_item(caller) == callee_trait {\n-                                // ..and caller and callee are in the same trait.\n-                                permitted = true;\n-                            }\n-                        }\n-                        if !permitted {\n-                            // if trait's impls are all const, permit the call.\n-                            let mut const_impls = true;\n-                            tcx.for_each_relevant_impl(trait_id, substs.type_at(0), |imp| {\n-                                if const_impls {\n-                                    if let hir::Constness::NotConst = tcx.impl_constness(imp) {\n-                                        const_impls = false;\n-                                    }\n-                                }\n-                            });\n-                            if const_impls {\n-                                permitted = true;\n-                            }\n-                        }\n+                    if tcx.trait_of_item(callee).is_some() {\n+                        if tcx.has_attr(callee, sym::default_method_body_is_const) {\n+                            // To get to here we must have already found a const impl for the\n+                            // trait, but for it to still be non-const can be that the impl is\n+                            // using default method bodies.\n+                            nonconst_call_permission = true;\n+                        }    \n                     }\n \n-                    if !permitted {\n+                    if !nonconst_call_permission {\n                         self.check_op(ops::FnCallNonConst);\n                         return;\n                     }"}, {"sha": "157005bba7b7593782f11a4ca5627b9d85a38731", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c75aeaac0bb2af593b9819cfeae6d518617d48cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75aeaac0bb2af593b9819cfeae6d518617d48cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs?ref=c75aeaac0bb2af593b9819cfeae6d518617d48cc", "patch": "@@ -0,0 +1,13 @@\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+pub trait A {\n+    fn assoc() -> bool;\n+}\n+\n+pub const fn foo<T: A>() -> bool {\n+    T::assoc()\n+    //~^ ERROR calls in constant functions are limited\n+}\n+\n+fn main() {}"}, {"sha": "931baac5389e6fbf69afa85354a022482f38033e", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c75aeaac0bb2af593b9819cfeae6d518617d48cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c75aeaac0bb2af593b9819cfeae6d518617d48cc/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr?ref=c75aeaac0bb2af593b9819cfeae6d518617d48cc", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-88155.rs:9:5\n+   |\n+LL |     T::assoc()\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}]}