{"sha": "9c62193fec1c5d2200c19d9445fe9bad753eefea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNjIxOTNmZWMxYzVkMjIwMGMxOWQ5NDQ1ZmU5YmFkNzUzZWVmZWE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2018-09-28T14:40:06Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2018-09-29T10:00:41Z"}, "message": "Do not put noalias annotations by default\n\nThis will be re-enabled sooner or later depending on results of further\ninvestigation.\n\nFixes #54462", "tree": {"sha": "79710beff41e5f750a8a57b08bba3e36ce5e1a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79710beff41e5f750a8a57b08bba3e36ce5e1a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c62193fec1c5d2200c19d9445fe9bad753eefea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c62193fec1c5d2200c19d9445fe9bad753eefea", "html_url": "https://github.com/rust-lang/rust/commit/9c62193fec1c5d2200c19d9445fe9bad753eefea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c62193fec1c5d2200c19d9445fe9bad753eefea/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e6e3e582a9eb9115900d51ae6edecf46d81f6e", "html_url": "https://github.com/rust-lang/rust/commit/80e6e3e582a9eb9115900d51ae6edecf46d81f6e"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "765708aeafd94f7e2f1c257a53fb3f0b17d4a754", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9c62193fec1c5d2200c19d9445fe9bad753eefea/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c62193fec1c5d2200c19d9445fe9bad753eefea/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=9c62193fec1c5d2200c19d9445fe9bad753eefea", "patch": "@@ -10,11 +10,9 @@\n \n use abi::{FnType, FnTypeExt};\n use common::*;\n-use llvm;\n use rustc::hir;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n-use rustc_target::spec::PanicStrategy;\n use rustc_target::abi::FloatTy;\n use rustc_mir::monomorphize::item::DefPathBasedNames;\n use type_::Type;\n@@ -433,12 +431,19 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                         PointerKind::Shared\n                     },\n                     hir::MutMutable => {\n-                        // Only emit noalias annotations for LLVM >= 6 or in panic=abort\n-                        // mode, as prior versions had many bugs in conjunction with\n-                        // unwinding. See also issue #31681.\n+                        // Previously we would only emit noalias annotations for LLVM >= 6 or in\n+                        // panic=abort mode. That was deemed right, as prior versions had many bugs\n+                        // in conjunction with unwinding, but later versions didn\u2019t seem to have\n+                        // said issues. See issue #31681.\n+                        //\n+                        // Alas, later on we encountered a case where noalias would generate wrong\n+                        // code altogether even with recent versions of LLVM in *safe* code with no\n+                        // unwinding involved. See #54462.\n+                        //\n+                        // For now, do not enable mutable_noalias by default at all, while the\n+                        // issue is being figured out.\n                         let mutable_noalias = cx.tcx.sess.opts.debugging_opts.mutable_noalias\n-                            .unwrap_or(unsafe { llvm::LLVMRustVersionMajor() >= 6 }\n-                                || cx.tcx.sess.panic_strategy() == PanicStrategy::Abort);\n+                            .unwrap_or(false);\n                         if mutable_noalias {\n                             PointerKind::UniqueBorrowed\n                         } else {"}, {"sha": "5061d9a915e2e9296fe462c750dc1f7f0a3a02ec", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c62193fec1c5d2200c19d9445fe9bad753eefea/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c62193fec1c5d2200c19d9445fe9bad753eefea/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=9c62193fec1c5d2200c19d9445fe9bad753eefea", "patch": "@@ -53,13 +53,13 @@ pub fn named_borrow<'r>(_: &'r i32) {\n pub fn unsafe_borrow(_: &UnsafeInner) {\n }\n \n-// CHECK: @mutable_unsafe_borrow(i16* noalias dereferenceable(2) %arg0)\n+// CHECK: @mutable_unsafe_borrow(i16* dereferenceable(2) %arg0)\n // ... unless this is a mutable borrow, those never alias\n #[no_mangle]\n pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n }\n \n-// CHECK: @mutable_borrow(i32* noalias dereferenceable(4) %arg0)\n+// CHECK: @mutable_borrow(i32* dereferenceable(4) %arg0)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_borrow(_: &mut i32) {\n@@ -102,7 +102,7 @@ pub fn helper(_: usize) {\n pub fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice([0 x i8]* noalias nonnull %arg0.0, [[USIZE]] %arg0.1)\n+// CHECK: @mutable_slice([0 x i8]* nonnull %arg0.0, [[USIZE]] %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn mutable_slice(_: &mut [u8]) {"}, {"sha": "f0e52b292878305cfc1c9e1008dc38d6c0248db4", "filename": "src/test/run-pass/issue-54462-mutable-noalias-correctness.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9c62193fec1c5d2200c19d9445fe9bad753eefea/src%2Ftest%2Frun-pass%2Fissue-54462-mutable-noalias-correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c62193fec1c5d2200c19d9445fe9bad753eefea/src%2Ftest%2Frun-pass%2Fissue-54462-mutable-noalias-correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-54462-mutable-noalias-correctness.rs?ref=9c62193fec1c5d2200c19d9445fe9bad753eefea", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: -Ccodegen-units=1 -O\n+\n+fn linidx(row: usize, col: usize) -> usize {\n+    row * 1 + col * 3\n+}\n+\n+fn main() {\n+    let mut mat = [1.0f32, 5.0, 9.0, 2.0, 6.0, 10.0, 3.0, 7.0, 11.0, 4.0, 8.0, 12.0];\n+\n+    for i in 0..2 {\n+        for j in i+1..3 {\n+            if mat[linidx(j, 3)] > mat[linidx(i, 3)] {\n+                    for k in 0..4 {\n+                            let (x, rest) = mat.split_at_mut(linidx(i, k) + 1);\n+                            let a = x.last_mut().unwrap();\n+                            let b = rest.get_mut(linidx(j, k) - linidx(i, k) - 1).unwrap();\n+                            ::std::mem::swap(a, b);\n+                    }\n+            }\n+        }\n+    }\n+    assert_eq!([9.0, 5.0, 1.0, 10.0, 6.0, 2.0, 11.0, 7.0, 3.0, 12.0, 8.0, 4.0], mat);\n+}"}]}