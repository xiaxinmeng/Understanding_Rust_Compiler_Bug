{"sha": "68a7fd22ad39e1d7a50f2fd052696517e719dd18", "node_id": "C_kwDOAAsO6NoAKDY4YTdmZDIyYWQzOWUxZDdhNTBmMmZkMDUyNjk2NTE3ZTcxOWRkMTg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T02:14:43Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:26Z"}, "message": "Move `BitMask` into `Operators` lint pass", "tree": {"sha": "334678b77c14f91044ebbbc4c8d16e23b4f5c77b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334678b77c14f91044ebbbc4c8d16e23b4f5c77b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a7fd22ad39e1d7a50f2fd052696517e719dd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a7fd22ad39e1d7a50f2fd052696517e719dd18", "html_url": "https://github.com/rust-lang/rust/commit/68a7fd22ad39e1d7a50f2fd052696517e719dd18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a7fd22ad39e1d7a50f2fd052696517e719dd18/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "751131b4acce37d0d4d62edd1eb831143c8fa46f", "url": "https://api.github.com/repos/rust-lang/rust/commits/751131b4acce37d0d4d62edd1eb831143c8fa46f", "html_url": "https://github.com/rust-lang/rust/commit/751131b4acce37d0d4d62edd1eb831143c8fa46f"}], "stats": {"total": 345, "additions": 179, "deletions": 166}, "files": [{"sha": "ccb5357b86ebe7ce9bd55eda252cfb4658039148", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -15,8 +15,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n-    LintId::of(bit_mask::BAD_BIT_MASK),\n-    LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n     LintId::of(blacklisted_name::BLACKLISTED_NAME),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n@@ -259,6 +257,8 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n     LintId::of(operators::ASSIGN_OP_PATTERN),\n+    LintId::of(operators::BAD_BIT_MASK),\n+    LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),"}, {"sha": "76286e93493e585b91cdb99a7ac49f03714a4740", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -8,8 +8,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(attrs::DEPRECATED_SEMVER),\n     LintId::of(attrs::MISMATCHED_TARGET_OS),\n     LintId::of(attrs::USELESS_ATTRIBUTE),\n-    LintId::of(bit_mask::BAD_BIT_MASK),\n-    LintId::of(bit_mask::INEFFECTIVE_BIT_MASK),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(casts::CAST_REF_TO_MUT),\n     LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n@@ -51,6 +49,8 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n     LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n     LintId::of(operators::ABSURD_EXTREME_COMPARISONS),\n+    LintId::of(operators::BAD_BIT_MASK),\n+    LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n     LintId::of(ptr::MUT_FROM_REF),"}, {"sha": "1bcba0bc988badd03b5c6e722607ed23cc508c12", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -54,9 +54,6 @@ store.register_lints(&[\n     await_holding_invalid::AWAIT_HOLDING_INVALID_TYPE,\n     await_holding_invalid::AWAIT_HOLDING_LOCK,\n     await_holding_invalid::AWAIT_HOLDING_REFCELL_REF,\n-    bit_mask::BAD_BIT_MASK,\n-    bit_mask::INEFFECTIVE_BIT_MASK,\n-    bit_mask::VERBOSE_BIT_MASK,\n     blacklisted_name::BLACKLISTED_NAME,\n     blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n     bool_assert_comparison::BOOL_ASSERT_COMPARISON,\n@@ -434,9 +431,12 @@ store.register_lints(&[\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n     operators::ABSURD_EXTREME_COMPARISONS,\n     operators::ASSIGN_OP_PATTERN,\n+    operators::BAD_BIT_MASK,\n     operators::FLOAT_ARITHMETIC,\n+    operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,\n     operators::MISREFACTORED_ASSIGN_OP,\n+    operators::VERBOSE_BIT_MASK,\n     option_env_unwrap::OPTION_ENV_UNWRAP,\n     option_if_let_else::OPTION_IF_LET_ELSE,\n     overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,"}, {"sha": "b1603afa25fdf24bf57d138aeab4a20c9595c02e", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -4,7 +4,6 @@\n \n store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(attrs::INLINE_ALWAYS),\n-    LintId::of(bit_mask::VERBOSE_BIT_MASK),\n     LintId::of(borrow_as_ptr::BORROW_AS_PTR),\n     LintId::of(bytecount::NAIVE_BYTECOUNT),\n     LintId::of(case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS),\n@@ -76,6 +75,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(no_effect::NO_EFFECT_UNDERSCORE_BINDING),\n     LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n     LintId::of(non_expressive_names::SIMILAR_NAMES),\n+    LintId::of(operators::VERBOSE_BIT_MASK),\n     LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n     LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n     LintId::of(ranges::RANGE_MINUS_ONE),"}, {"sha": "f8362998b8ce628722f573eb9556e0694f0bfac3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -177,7 +177,6 @@ mod assertions_on_constants;\n mod async_yields_async;\n mod attrs;\n mod await_holding_invalid;\n-mod bit_mask;\n mod blacklisted_name;\n mod blocks_in_if_conditions;\n mod bool_assert_comparison;\n@@ -582,8 +581,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(eq_op::EqOp));\n     store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n     store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n-    let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || Box::new(bit_mask::BitMask::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|| Box::new(ptr::Ptr));\n     store.register_late_pass(|| Box::new(ptr_eq::PtrEq));\n     store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n@@ -936,7 +933,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(default_instead_of_iter_empty::DefaultIterEmpty));\n     store.register_late_pass(move || Box::new(manual_rem_euclid::ManualRemEuclid::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_retain::ManualRetain::new(msrv)));\n-    store.register_late_pass(|| Box::new(operators::Operators::default()));\n+    let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n+    store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "74387fbc87be06be2f3b5e9b370f2fdf6af642c4", "filename": "clippy_lints/src/operators/bit_mask.rs", "status": "renamed", "additions": 15, "deletions": 153, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -1,161 +1,23 @@\n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n-use clippy_utils::sugg::Sugg;\n-use rustc_ast::ast::LitKind;\n-use rustc_errors::Applicability;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for incompatible bit masks in comparisons.\n-    ///\n-    /// The formula for detecting if an expression of the type `_ <bit_op> m\n-    /// <cmp_op> c` (where `<bit_op>` is one of {`&`, `|`} and `<cmp_op>` is one of\n-    /// {`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following\n-    /// table:\n-    ///\n-    /// |Comparison  |Bit Op|Example      |is always|Formula               |\n-    /// |------------|------|-------------|---------|----------------------|\n-    /// |`==` or `!=`| `&`  |`x & 2 == 3` |`false`  |`c & m != c`          |\n-    /// |`<`  or `>=`| `&`  |`x & 2 < 3`  |`true`   |`m < c`               |\n-    /// |`>`  or `<=`| `&`  |`x & 1 > 1`  |`false`  |`m <= c`              |\n-    /// |`==` or `!=`| `\\|` |`x \\| 1 == 0`|`false`  |`c \\| m != c`         |\n-    /// |`<`  or `>=`| `\\|` |`x \\| 1 < 1` |`false`  |`m >= c`              |\n-    /// |`<=` or `>` | `\\|` |`x \\| 1 > 0` |`true`   |`m > c`               |\n-    ///\n-    /// ### Why is this bad?\n-    /// If the bits that the comparison cares about are always\n-    /// set to zero or one by the bit mask, the comparison is constant `true` or\n-    /// `false` (depending on mask, compared value, and operators).\n-    ///\n-    /// So the code is actively misleading, and the only reason someone would write\n-    /// this intentionally is to win an underhanded Rust contest or create a\n-    /// test-case for this lint.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let x = 1;\n-    /// if (x & 1 == 2) { }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub BAD_BIT_MASK,\n-    correctness,\n-    \"expressions of the form `_ & mask == select` that will only ever return `true` or `false`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for bit masks in comparisons which can be removed\n-    /// without changing the outcome. The basic structure can be seen in the\n-    /// following table:\n-    ///\n-    /// |Comparison| Bit Op   |Example     |equals |\n-    /// |----------|----------|------------|-------|\n-    /// |`>` / `<=`|`\\|` / `^`|`x \\| 2 > 3`|`x > 3`|\n-    /// |`<` / `>=`|`\\|` / `^`|`x ^ 1 < 4` |`x < 4`|\n-    ///\n-    /// ### Why is this bad?\n-    /// Not equally evil as [`bad_bit_mask`](#bad_bit_mask),\n-    /// but still a bit misleading, because the bit mask is ineffective.\n-    ///\n-    /// ### Known problems\n-    /// False negatives: This lint will only match instances\n-    /// where we have figured out the math (which is for a power-of-two compared\n-    /// value). This means things like `x | 1 >= 7` (which would be better written\n-    /// as `x >= 6`) will not be reported (but bit masks like this are fairly\n-    /// uncommon).\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let x = 1;\n-    /// if (x | 1 > 3) {  }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub INEFFECTIVE_BIT_MASK,\n-    correctness,\n-    \"expressions where a bit mask will be rendered useless by a comparison, e.g., `(x | 1) > 2`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for bit masks that can be replaced by a call\n-    /// to `trailing_zeros`\n-    ///\n-    /// ### Why is this bad?\n-    /// `x.trailing_zeros() > 4` is much clearer than `x & 15\n-    /// == 0`\n-    ///\n-    /// ### Known problems\n-    /// llvm generates better code for `x & 15 == 0` on x86\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let x = 1;\n-    /// if x & 0b1111 == 0 { }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub VERBOSE_BIT_MASK,\n-    pedantic,\n-    \"expressions where a bit mask is less readable than the corresponding method call\"\n-}\n+use super::{BAD_BIT_MASK, INEFFECTIVE_BIT_MASK};\n \n-#[derive(Copy, Clone)]\n-pub struct BitMask {\n-    verbose_bit_mask_threshold: u64,\n-}\n-\n-impl BitMask {\n-    #[must_use]\n-    pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n-        Self {\n-            verbose_bit_mask_threshold,\n-        }\n-    }\n-}\n-\n-impl_lint_pass!(BitMask => [BAD_BIT_MASK, INEFFECTIVE_BIT_MASK, VERBOSE_BIT_MASK]);\n-\n-impl<'tcx> LateLintPass<'tcx> for BitMask {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::Binary(cmp, left, right) = &e.kind {\n-            if cmp.node.is_comparison() {\n-                if let Some(cmp_opt) = fetch_int_literal(cx, right) {\n-                    check_compare(cx, left, cmp.node, cmp_opt, e.span);\n-                } else if let Some(cmp_val) = fetch_int_literal(cx, left) {\n-                    check_compare(cx, right, invert_cmp(cmp.node), cmp_val, e.span);\n-                }\n-            }\n-        }\n-\n-        if let ExprKind::Binary(op, left, right) = &e.kind\n-            && BinOpKind::Eq == op.node\n-            && let ExprKind::Binary(op1, left1, right1) = &left.kind\n-            && BinOpKind::BitAnd == op1.node\n-            && let ExprKind::Lit(lit) = &right1.kind\n-            && let LitKind::Int(n, _) = lit.node\n-            && let ExprKind::Lit(lit1) = &right.kind\n-            && let LitKind::Int(0, _) = lit1.node\n-            && n.leading_zeros() == n.count_zeros()\n-            && n > u128::from(self.verbose_bit_mask_threshold)\n-        {\n-            span_lint_and_then(\n-                cx,\n-                VERBOSE_BIT_MASK,\n-                e.span,\n-                \"bit mask could be simplified with a call to `trailing_zeros`\",\n-                |diag| {\n-                    let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n-                    diag.span_suggestion(\n-                        e.span,\n-                        \"try\",\n-                        format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                },\n-            );\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    left: &'tcx Expr<'_>,\n+    right: &'tcx Expr<'_>,\n+) {\n+    if op.is_comparison() {\n+        if let Some(cmp_opt) = fetch_int_literal(cx, right) {\n+            check_compare(cx, left, op, cmp_opt, e.span);\n+        } else if let Some(cmp_val) = fetch_int_literal(cx, left) {\n+            check_compare(cx, right, invert_cmp(op), cmp_val, e.span);\n         }\n     }\n }", "previous_filename": "clippy_lints/src/bit_mask.rs"}, {"sha": "fd91fbd63a45099e1d57bd92d65484ab03d61c07", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 110, "deletions": 1, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -4,8 +4,10 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n+mod bit_mask;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n+mod verbose_bit_mask;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -146,17 +148,122 @@ declare_clippy_lint! {\n     \"having a variable on both sides of an assign op\"\n }\n \n-#[derive(Default)]\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for incompatible bit masks in comparisons.\n+    ///\n+    /// The formula for detecting if an expression of the type `_ <bit_op> m\n+    /// <cmp_op> c` (where `<bit_op>` is one of {`&`, `|`} and `<cmp_op>` is one of\n+    /// {`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following\n+    /// table:\n+    ///\n+    /// |Comparison  |Bit Op|Example      |is always|Formula               |\n+    /// |------------|------|-------------|---------|----------------------|\n+    /// |`==` or `!=`| `&`  |`x & 2 == 3` |`false`  |`c & m != c`          |\n+    /// |`<`  or `>=`| `&`  |`x & 2 < 3`  |`true`   |`m < c`               |\n+    /// |`>`  or `<=`| `&`  |`x & 1 > 1`  |`false`  |`m <= c`              |\n+    /// |`==` or `!=`| `\\|` |`x \\| 1 == 0`|`false`  |`c \\| m != c`         |\n+    /// |`<`  or `>=`| `\\|` |`x \\| 1 < 1` |`false`  |`m >= c`              |\n+    /// |`<=` or `>` | `\\|` |`x \\| 1 > 0` |`true`   |`m > c`               |\n+    ///\n+    /// ### Why is this bad?\n+    /// If the bits that the comparison cares about are always\n+    /// set to zero or one by the bit mask, the comparison is constant `true` or\n+    /// `false` (depending on mask, compared value, and operators).\n+    ///\n+    /// So the code is actively misleading, and the only reason someone would write\n+    /// this intentionally is to win an underhanded Rust contest or create a\n+    /// test-case for this lint.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if (x & 1 == 2) { }\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub BAD_BIT_MASK,\n+    correctness,\n+    \"expressions of the form `_ & mask == select` that will only ever return `true` or `false`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for bit masks in comparisons which can be removed\n+    /// without changing the outcome. The basic structure can be seen in the\n+    /// following table:\n+    ///\n+    /// |Comparison| Bit Op   |Example     |equals |\n+    /// |----------|----------|------------|-------|\n+    /// |`>` / `<=`|`\\|` / `^`|`x \\| 2 > 3`|`x > 3`|\n+    /// |`<` / `>=`|`\\|` / `^`|`x ^ 1 < 4` |`x < 4`|\n+    ///\n+    /// ### Why is this bad?\n+    /// Not equally evil as [`bad_bit_mask`](#bad_bit_mask),\n+    /// but still a bit misleading, because the bit mask is ineffective.\n+    ///\n+    /// ### Known problems\n+    /// False negatives: This lint will only match instances\n+    /// where we have figured out the math (which is for a power-of-two compared\n+    /// value). This means things like `x | 1 >= 7` (which would be better written\n+    /// as `x >= 6`) will not be reported (but bit masks like this are fairly\n+    /// uncommon).\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if (x | 1 > 3) {  }\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub INEFFECTIVE_BIT_MASK,\n+    correctness,\n+    \"expressions where a bit mask will be rendered useless by a comparison, e.g., `(x | 1) > 2`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for bit masks that can be replaced by a call\n+    /// to `trailing_zeros`\n+    ///\n+    /// ### Why is this bad?\n+    /// `x.trailing_zeros() > 4` is much clearer than `x & 15\n+    /// == 0`\n+    ///\n+    /// ### Known problems\n+    /// llvm generates better code for `x & 15 == 0` on x86\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let x = 1;\n+    /// if x & 0b1111 == 0 { }\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub VERBOSE_BIT_MASK,\n+    pedantic,\n+    \"expressions where a bit mask is less readable than the corresponding method call\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n+    verbose_bit_mask_threshold: u64,\n }\n impl_lint_pass!(Operators => [\n     ABSURD_EXTREME_COMPARISONS,\n     INTEGER_ARITHMETIC,\n     FLOAT_ARITHMETIC,\n     ASSIGN_OP_PATTERN,\n     MISREFACTORED_ASSIGN_OP,\n+    BAD_BIT_MASK,\n+    INEFFECTIVE_BIT_MASK,\n+    VERBOSE_BIT_MASK,\n ]);\n+impl Operators {\n+    pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n+        Self {\n+            arithmetic_context: numeric_arithmetic::Context::default(),\n+            verbose_bit_mask_threshold,\n+        }\n+    }\n+}\n impl<'tcx> LateLintPass<'tcx> for Operators {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         match e.kind {\n@@ -165,6 +272,8 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                     absurd_extreme_comparisons::check(cx, e, op.node, lhs, rhs);\n                 }\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n+                bit_mask::check(cx, e, op.node, lhs, rhs);\n+                verbose_bit_mask::check(cx, e, op.node, lhs, rhs, self.verbose_bit_mask_threshold);\n             },\n             ExprKind::AssignOp(op, lhs, rhs) => {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);"}, {"sha": "ff85fd554298822f768df19441cafa4b959f00c9", "filename": "clippy_lints/src/operators/verbose_bit_mask.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a7fd22ad39e1d7a50f2fd052696517e719dd18/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs?ref=68a7fd22ad39e1d7a50f2fd052696517e719dd18", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg::Sugg;\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+\n+use super::VERBOSE_BIT_MASK;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    left: &'tcx Expr<'_>,\n+    right: &'tcx Expr<'_>,\n+    threshold: u64,\n+) {\n+    if BinOpKind::Eq == op\n+        && let ExprKind::Binary(op1, left1, right1) = &left.kind\n+        && BinOpKind::BitAnd == op1.node\n+        && let ExprKind::Lit(lit) = &right1.kind\n+        && let LitKind::Int(n, _) = lit.node\n+        && let ExprKind::Lit(lit1) = &right.kind\n+        && let LitKind::Int(0, _) = lit1.node\n+        && n.leading_zeros() == n.count_zeros()\n+        && n > u128::from(threshold)\n+    {\n+        span_lint_and_then(\n+            cx,\n+            VERBOSE_BIT_MASK,\n+            e.span,\n+            \"bit mask could be simplified with a call to `trailing_zeros`\",\n+            |diag| {\n+                let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n+                diag.span_suggestion(\n+                    e.span,\n+                    \"try\",\n+                    format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+        );\n+    }\n+}"}]}