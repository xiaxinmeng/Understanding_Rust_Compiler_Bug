{"sha": "735ac057bb94d179c81afcd0f3e63bc6e6856734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNWFjMDU3YmI5NGQxNzljODFhZmNkMGYzZTYzYmM2ZTY4NTY3MzQ=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-09T12:43:31Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-09T13:14:55Z"}, "message": "Actually translate CRLF in raw byte strings and unify unescape impl", "tree": {"sha": "733cc2590a849cd2cd38ffef69dbd2aaba95006a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/733cc2590a849cd2cd38ffef69dbd2aaba95006a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735ac057bb94d179c81afcd0f3e63bc6e6856734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735ac057bb94d179c81afcd0f3e63bc6e6856734", "html_url": "https://github.com/rust-lang/rust/commit/735ac057bb94d179c81afcd0f3e63bc6e6856734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735ac057bb94d179c81afcd0f3e63bc6e6856734/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1d352dc4a66cae9127cf677ec5e609aee1b7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1d352dc4a66cae9127cf677ec5e609aee1b7ae", "html_url": "https://github.com/rust-lang/rust/commit/3c1d352dc4a66cae9127cf677ec5e609aee1b7ae"}], "stats": {"total": 94, "additions": 69, "deletions": 25}, "files": [{"sha": "24dddcb6141c7873b253141667f776c1b712bcf2", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735ac057bb94d179c81afcd0f3e63bc6e6856734/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735ac057bb94d179c81afcd0f3e63bc6e6856734/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=735ac057bb94d179c81afcd0f3e63bc6e6856734", "patch": "@@ -1348,7 +1348,7 @@ impl<'a> StringReader<'a> {\n \n     fn validate_raw_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n         self.with_str_from_to(content_start, content_end, |lit: &str| {\n-            unescape::unescape_raw_str(lit, unescape::Mode::Str, &mut |range, c| {\n+            unescape::unescape_raw_str(lit, &mut |range, c| {\n                 if let Err(err) = c {\n                     emit_unescape_error(\n                         &self.sess.span_diagnostic,\n@@ -1365,7 +1365,7 @@ impl<'a> StringReader<'a> {\n \n     fn validate_raw_byte_str_escape(&self, content_start: BytePos, content_end: BytePos) {\n         self.with_str_from_to(content_start, content_end, |lit: &str| {\n-            unescape::unescape_raw_str(lit, unescape::Mode::ByteStr, &mut |range, c| {\n+            unescape::unescape_raw_byte_str(lit, &mut |range, c| {\n                 if let Err(err) = c {\n                     emit_unescape_error(\n                         &self.sess.span_diagnostic,"}, {"sha": "3baa5858c9db87c089db16e7430b1b2b31f8be46", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/735ac057bb94d179c81afcd0f3e63bc6e6856734/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735ac057bb94d179c81afcd0f3e63bc6e6856734/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=735ac057bb94d179c81afcd0f3e63bc6e6856734", "patch": "@@ -4,8 +4,9 @@ use crate::ast::{self, Lit, LitKind};\n use crate::parse::parser::Parser;\n use crate::parse::PResult;\n use crate::parse::token::{self, Token, TokenKind};\n-use crate::parse::unescape::{self, unescape_str, unescape_byte_str, unescape_raw_str};\n use crate::parse::unescape::{unescape_char, unescape_byte};\n+use crate::parse::unescape::{unescape_str, unescape_byte_str};\n+use crate::parse::unescape::{unescape_raw_str, unescape_raw_byte_str};\n use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{TokenStream, TokenTree};\n@@ -144,7 +145,7 @@ impl LitKind {\n                 let symbol = if s.contains('\\r') {\n                     let mut buf = String::with_capacity(s.len());\n                     let mut error = Ok(());\n-                    unescape_raw_str(&s, unescape::Mode::Str, &mut |_, unescaped_char| {\n+                    unescape_raw_str(&s, &mut |_, unescaped_char| {\n                         match unescaped_char {\n                             Ok(c) => buf.push(c),\n                             Err(_) => error = Err(LitError::LexerError),\n@@ -172,7 +173,26 @@ impl LitKind {\n                 buf.shrink_to_fit();\n                 LitKind::ByteStr(Lrc::new(buf))\n             }\n-            token::ByteStrRaw(_) => LitKind::ByteStr(Lrc::new(symbol.to_string().into_bytes())),\n+            token::ByteStrRaw(_) => {\n+                let s = symbol.as_str();\n+                let bytes = if s.contains('\\r') {\n+                    let mut buf = Vec::with_capacity(s.len());\n+                    let mut error = Ok(());\n+                    unescape_raw_byte_str(&s, &mut |_, unescaped_byte| {\n+                        match unescaped_byte {\n+                            Ok(c) => buf.push(c),\n+                            Err(_) => error = Err(LitError::LexerError),\n+                        }\n+                    });\n+                    error?;\n+                    buf.shrink_to_fit();\n+                    buf\n+                } else {\n+                    symbol.to_string().into_bytes()\n+                };\n+\n+                LitKind::ByteStr(Lrc::new(bytes))\n+            },\n             token::Err => LitKind::Err(symbol),\n         })\n     }"}, {"sha": "da6de8a12daaaa9fc616b52b1c4c54077bf8fbe6", "filename": "src/libsyntax/parse/unescape.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/735ac057bb94d179c81afcd0f3e63bc6e6856734/src%2Flibsyntax%2Fparse%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735ac057bb94d179c81afcd0f3e63bc6e6856734/src%2Flibsyntax%2Fparse%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Funescape.rs?ref=735ac057bb94d179c81afcd0f3e63bc6e6856734", "patch": "@@ -71,29 +71,24 @@ where\n /// sequence of characters or errors.\n /// NOTE: Raw strings do not perform any explicit character escaping, here we\n /// only translate CRLF to LF and produce errors on bare CR.\n-pub(crate) fn unescape_raw_str<F>(literal_text: &str, mode: Mode, callback: &mut F)\n+pub(crate) fn unescape_raw_str<F>(literal_text: &str, callback: &mut F)\n where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n-    let mut byte_offset: usize = 0;\n+    unescape_raw_str_or_byte_str(literal_text, Mode::Str, callback)\n+}\n \n-    let mut chars = literal_text.chars().peekable();\n-    while let Some(curr) = chars.next() {\n-        let (result, scanned) = match (curr, chars.peek()) {\n-            ('\\r', Some('\\n')) => {\n-                chars.next();\n-                (Ok('\\n'), [Some('\\r'), Some('\\n')])\n-            },\n-            ('\\r', _) =>\n-                (Err(EscapeError::BareCarriageReturn), [Some('\\r'), None]),\n-            (c, _) if mode.is_bytes() && c > '\\x7F' =>\n-                (Err(EscapeError::NonAsciiCharInByteString), [Some(c), None]),\n-            (c, _) => (Ok(c), [Some(c), None]),\n-        };\n-        let len_utf8: usize = scanned.iter().filter_map(|&x| x).map(char::len_utf8).sum();\n-        callback(byte_offset..(byte_offset + len_utf8), result);\n-        byte_offset += len_utf8;\n-    }\n+/// Takes a contents of a string literal (without quotes) and produces a\n+/// sequence of characters or errors.\n+/// NOTE: Raw strings do not perform any explicit character escaping, here we\n+/// only translate CRLF to LF and produce errors on bare CR.\n+pub(crate) fn unescape_raw_byte_str<F>(literal_text: &str, callback: &mut F)\n+where\n+    F: FnMut(Range<usize>, Result<u8, EscapeError>),\n+{\n+    unescape_raw_str_or_byte_str(literal_text, Mode::ByteStr, &mut |range, char| {\n+        callback(range, char.map(byte_from_char))\n+    })\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -284,9 +279,38 @@ where\n     }\n }\n \n+/// Takes a contents of a string literal (without quotes) and produces a\n+/// sequence of characters or errors.\n+/// NOTE: Raw strings do not perform any explicit character escaping, here we\n+/// only translate CRLF to LF and produce errors on bare CR.\n+fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)\n+where\n+    F: FnMut(Range<usize>, Result<char, EscapeError>),\n+{\n+    let mut byte_offset: usize = 0;\n+\n+    let mut chars = literal_text.chars().peekable();\n+    while let Some(curr) = chars.next() {\n+        let (result, scanned) = match (curr, chars.peek()) {\n+            ('\\r', Some('\\n')) => {\n+                chars.next();\n+                (Ok('\\n'), [Some('\\r'), Some('\\n')])\n+            },\n+            ('\\r', _) =>\n+                (Err(EscapeError::BareCarriageReturn), [Some('\\r'), None]),\n+            (c, _) if mode.is_bytes() && !c.is_ascii() =>\n+                (Err(EscapeError::NonAsciiCharInByteString), [Some(c), None]),\n+            (c, _) => (Ok(c), [Some(c), None]),\n+        };\n+        let len_utf8: usize = scanned.iter().filter_map(|&x| x).map(char::len_utf8).sum();\n+        callback(byte_offset..(byte_offset + len_utf8), result);\n+        byte_offset += len_utf8;\n+    }\n+}\n+\n fn byte_from_char(c: char) -> u8 {\n     let res = c as u32;\n-    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::Byte\");\n+    assert!(res <= u8::max_value() as u32, \"guaranteed because of Mode::Byte(Str)\");\n     res as u8\n }\n "}]}