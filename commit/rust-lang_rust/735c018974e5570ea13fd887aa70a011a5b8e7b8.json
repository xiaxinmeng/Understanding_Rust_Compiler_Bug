{"sha": "735c018974e5570ea13fd887aa70a011a5b8e7b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNWMwMTg5NzRlNTU3MGVhMTNmZDg4N2FhNzBhMDExYTViOGU3Yjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T12:09:05Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T12:09:05Z"}, "message": "skip double negation in const eval", "tree": {"sha": "79e86d484e93f433e3a428d02e5b2a5bbb18cf59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e86d484e93f433e3a428d02e5b2a5bbb18cf59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735c018974e5570ea13fd887aa70a011a5b8e7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735c018974e5570ea13fd887aa70a011a5b8e7b8", "html_url": "https://github.com/rust-lang/rust/commit/735c018974e5570ea13fd887aa70a011a5b8e7b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735c018974e5570ea13fd887aa70a011a5b8e7b8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3acee3b6c5381d84fe4ad68e077517bd0975333d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3acee3b6c5381d84fe4ad68e077517bd0975333d", "html_url": "https://github.com/rust-lang/rust/commit/3acee3b6c5381d84fe4ad68e077517bd0975333d"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "c2ac3d838c8d071074982ad2997dcb84e083eeea", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/735c018974e5570ea13fd887aa70a011a5b8e7b8/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c018974e5570ea13fd887aa70a011a5b8e7b8/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=735c018974e5570ea13fd887aa70a011a5b8e7b8", "patch": "@@ -562,44 +562,51 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n     let result = match e.node {\n       hir::ExprUnary(hir::UnNeg, ref inner) => {\n         // unary neg literals already got their sign during creation\n-        if let hir::ExprLit(ref lit) = inner.node {\n-            use syntax::ast::*;\n-            use syntax::ast::LitIntType::*;\n-            const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n-            const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n-            const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n-            const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n-            match (&lit.node, ety.map(|t| &t.sty)) {\n-                (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n-                (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n-                    return Ok(Integral(I8(::std::i8::MIN)))\n-                },\n-                (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n-                (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n-                    return Ok(Integral(I16(::std::i16::MIN)))\n-                },\n-                (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n-                (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n-                    return Ok(Integral(I32(::std::i32::MIN)))\n-                },\n-                (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n-                (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n-                    return Ok(Integral(I64(::std::i64::MIN)))\n-                },\n-                (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n-                (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n-                    match tcx.sess.target.int_type {\n-                        IntTy::I32 => if n == I32_OVERFLOW {\n-                            return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n-                        },\n-                        IntTy::I64 => if n == I64_OVERFLOW {\n-                            return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n-                        },\n-                        _ => bug!(),\n-                    }\n-                },\n-                _ => {},\n-            }\n+        match inner.node {\n+            hir::ExprLit(ref lit) => {\n+                use syntax::ast::*;\n+                use syntax::ast::LitIntType::*;\n+                const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n+                const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n+                const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n+                const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n+                match (&lit.node, ety.map(|t| &t.sty)) {\n+                    (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n+                    (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n+                        return Ok(Integral(I8(::std::i8::MIN)))\n+                    },\n+                    (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n+                    (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n+                        return Ok(Integral(I16(::std::i16::MIN)))\n+                    },\n+                    (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n+                    (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n+                        return Ok(Integral(I32(::std::i32::MIN)))\n+                    },\n+                    (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n+                    (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n+                        return Ok(Integral(I64(::std::i64::MIN)))\n+                    },\n+                    (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n+                    (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n+                        match tcx.sess.target.int_type {\n+                            IntTy::I32 => if n == I32_OVERFLOW {\n+                                return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n+                            },\n+                            IntTy::I64 => if n == I64_OVERFLOW {\n+                                return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n+                            },\n+                            _ => bug!(),\n+                        }\n+                    },\n+                    _ => {},\n+                }\n+            },\n+            hir::ExprUnary(hir::UnNeg, ref inner) => {\n+                // skip `--$expr`\n+                return eval_const_expr_partial(tcx, inner, ty_hint, fn_args);\n+            },\n+            _ => {},\n         }\n         match eval_const_expr_partial(tcx, &inner, ty_hint, fn_args)? {\n           Float(f) => Float(-f),"}, {"sha": "9499d732a38355b03802ed58fc79159a800d4772", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c018974e5570ea13fd887aa70a011a5b8e7b8/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c018974e5570ea13fd887aa70a011a5b8e7b8/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=735c018974e5570ea13fd887aa70a011a5b8e7b8", "patch": "@@ -15,7 +15,6 @@\n #[allow(unused_variables)]\n fn main() {\n     let x2: i8 = --128; //~ error: literal out of range for i8\n-    //~^ error: attempted to negate with overflow\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for f32"}]}