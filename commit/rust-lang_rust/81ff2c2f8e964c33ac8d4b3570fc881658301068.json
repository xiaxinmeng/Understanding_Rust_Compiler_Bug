{"sha": "81ff2c2f8e964c33ac8d4b3570fc881658301068", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZmYyYzJmOGU5NjRjMzNhYzhkNGIzNTcwZmM4ODE2NTgzMDEwNjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-21T21:33:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-03T09:35:00Z"}, "message": "Change adt case handling fn to be less tied to match", "tree": {"sha": "f021f10267af8aefa8fbffcda5720167390c9980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f021f10267af8aefa8fbffcda5720167390c9980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ff2c2f8e964c33ac8d4b3570fc881658301068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ff2c2f8e964c33ac8d4b3570fc881658301068", "html_url": "https://github.com/rust-lang/rust/commit/81ff2c2f8e964c33ac8d4b3570fc881658301068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ff2c2f8e964c33ac8d4b3570fc881658301068/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a62158a4e1bb012d5b0778701dd67b65a8754c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a62158a4e1bb012d5b0778701dd67b65a8754c2", "html_url": "https://github.com/rust-lang/rust/commit/0a62158a4e1bb012d5b0778701dd67b65a8754c2"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "3c53d5588656530c4b81b6dc01c8c5749fd99c52", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81ff2c2f8e964c33ac8d4b3570fc881658301068/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ff2c2f8e964c33ac8d4b3570fc881658301068/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=81ff2c2f8e964c33ac8d4b3570fc881658301068", "patch": "@@ -303,7 +303,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n                 RangeResult(Result::new(bcx, l1), Result::new(bcx, l2))\n             }\n             Variant(disr_val, ref repr, _, _) => {\n-                adt::trans_case(bcx, &**repr, disr_val)\n+                SingleResult(Result::new(bcx, adt::trans_case(bcx, &**repr, disr_val)))\n             }\n             SliceLengthEqual(length, _) => {\n                 SingleResult(Result::new(bcx, C_uint(ccx, length)))"}, {"sha": "a4f66110450dfc6adb2dc6503e743febe70ac27b", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ff2c2f8e964c33ac8d4b3570fc881658301068/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ff2c2f8e964c33ac8d4b3570fc881658301068/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=81ff2c2f8e964c33ac8d4b3570fc881658301068", "patch": "@@ -945,23 +945,21 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n ///\n /// This should ideally be less tightly tied to `_match`.\n pub fn trans_case<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr, discr: Disr)\n-                              -> _match::OptResult<'blk, 'tcx> {\n+                              -> ValueRef {\n     match *r {\n         CEnum(ity, _, _) => {\n-            _match::SingleResult(Result::new(bcx, C_integral(ll_inttype(bcx.ccx(), ity),\n-                                                              discr as u64, true)))\n+            C_integral(ll_inttype(bcx.ccx(), ity), discr as u64, true)\n         }\n         General(ity, _, _) => {\n-            _match::SingleResult(Result::new(bcx, C_integral(ll_inttype(bcx.ccx(), ity),\n-                                                              discr as u64, true)))\n+            C_integral(ll_inttype(bcx.ccx(), ity), discr as u64, true)\n         }\n         Univariant(..) => {\n             bcx.ccx().sess().bug(\"no cases for univariants or structs\")\n         }\n         RawNullablePointer { .. } |\n         StructWrappedNullablePointer { .. } => {\n             assert!(discr == 0 || discr == 1);\n-            _match::SingleResult(Result::new(bcx, C_bool(bcx.ccx(), discr != 0)))\n+            C_bool(bcx.ccx(), discr != 0)\n         }\n     }\n }"}, {"sha": "9530c6d4058eef1b9db1c747ad4dd2fe78bacf2e", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81ff2c2f8e964c33ac8d4b3570fc881658301068/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ff2c2f8e964c33ac8d4b3570fc881658301068/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=81ff2c2f8e964c33ac8d4b3570fc881658301068", "patch": "@@ -498,13 +498,8 @@ pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n                               &format!(\"enum-iter-variant-{}\",\n                                       &variant.disr_val.to_string())\n                               );\n-                      match adt::trans_case(cx, &*repr, variant.disr_val) {\n-                          _match::SingleResult(r) => {\n-                              AddCase(llswitch, r.val, variant_cx.llbb)\n-                          }\n-                          _ => ccx.sess().unimpl(\"value from adt::trans_case \\\n-                                                  in iter_structural_ty\")\n-                      }\n+                      let case_val = adt::trans_case(cx, &*repr, variant.disr_val);\n+                      AddCase(llswitch, case_val, variant_cx.llbb);\n                       let variant_cx =\n                           iter_variant(variant_cx,\n                                        &*repr,"}]}