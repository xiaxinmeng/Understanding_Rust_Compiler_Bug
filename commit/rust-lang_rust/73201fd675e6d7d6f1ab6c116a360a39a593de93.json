{"sha": "73201fd675e6d7d6f1ab6c116a360a39a593de93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMjAxZmQ2NzVlNmQ3ZDZmMWFiNmMxMTZhMzYwYTM5YTU5M2RlOTM=", "commit": {"author": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2015-02-07T12:14:17Z"}, "committer": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2015-02-10T17:27:05Z"}, "message": "Make the live code analysis visit method declarations.\n\nThe live code analysis only visited the function's body when visiting a\nmethod, and not the FnDecl and the generics, resulting in code to be\nincorrectly marked as unused when it only appeared in the generics, the\narguments, or the return type, whereas the same code in non-method\nfunctions was correctly detected as used. Fixes #20343.", "tree": {"sha": "1154a10a006c3285a17ab525add26679293ab083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1154a10a006c3285a17ab525add26679293ab083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73201fd675e6d7d6f1ab6c116a360a39a593de93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73201fd675e6d7d6f1ab6c116a360a39a593de93", "html_url": "https://github.com/rust-lang/rust/commit/73201fd675e6d7d6f1ab6c116a360a39a593de93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73201fd675e6d7d6f1ab6c116a360a39a593de93/comments", "author": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75b21cb9b187a6f836da61769a8110354fd6dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b21cb9b187a6f836da61769a8110354fd6dad", "html_url": "https://github.com/rust-lang/rust/commit/b75b21cb9b187a6f836da61769a8110354fd6dad"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "cf680871dcf2227f3149728777a67bb3ed531f1b", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73201fd675e6d7d6f1ab6c116a360a39a593de93/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73201fd675e6d7d6f1ab6c116a360a39a593de93/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=73201fd675e6d7d6f1ab6c116a360a39a593de93", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             ast_map::NodeImplItem(impl_item) => {\n                 match *impl_item {\n                     ast::MethodImplItem(ref method) => {\n-                        visit::walk_block(self, method.pe_body());\n+                        visit::walk_method_helper(self, method);\n                     }\n                     ast::TypeImplItem(_) => {}\n                 }"}, {"sha": "79034a4a4a6d65590e8980a10fd2c16eda2a03a6", "filename": "src/test/run-pass/issue-20343.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/73201fd675e6d7d6f1ab6c116a360a39a593de93/src%2Ftest%2Frun-pass%2Fissue-20343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73201fd675e6d7d6f1ab6c116a360a39a593de93/src%2Ftest%2Frun-pass%2Fissue-20343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20343.rs?ref=73201fd675e6d7d6f1ab6c116a360a39a593de93", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for Issue #20343.\n+\n+#![deny(dead_code)]\n+\n+struct B { b: u32 }\n+struct C;\n+struct D;\n+\n+trait T<A> {}\n+impl<A> T<A> for () {}\n+\n+impl B {\n+    // test for unused code in arguments\n+    fn foo(B { b }: B) -> u32 { b }\n+\n+    // test for unused code in return type\n+    fn bar() -> C { unsafe { ::std::mem::transmute(()) } }\n+\n+    // test for unused code in generics\n+    fn baz<A: T<D>>() {}\n+}\n+\n+pub fn main() {\n+    let b = B { b: 3 };\n+    B::foo(b);\n+    B::bar();\n+    B::baz::<()>();\n+}"}]}