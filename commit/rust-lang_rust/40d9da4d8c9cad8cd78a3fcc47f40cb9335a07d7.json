{"sha": "40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDlkYTRkOGM5Y2FkOGNkNzhhM2ZjYzQ3ZjQwY2I5MzM1YTA3ZDc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-26T19:27:27Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-05-13T21:31:58Z"}, "message": "global_asm! consts do not depend on other items", "tree": {"sha": "b0375a11da3088d7ea6a0267933289a16a65d49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0375a11da3088d7ea6a0267933289a16a65d49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7", "html_url": "https://github.com/rust-lang/rust/commit/40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6bec1d55586abfb6aa6ca924994b09035752dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6bec1d55586abfb6aa6ca924994b09035752dc", "html_url": "https://github.com/rust-lang/rust/commit/bb6bec1d55586abfb6aa6ca924994b09035752dc"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "e4ad92eb1b1a13ab0f22c44bca4d2ffa5155b5b0", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=40d9da4d8c9cad8cd78a3fcc47f40cb9335a07d7", "patch": "@@ -397,13 +397,10 @@ fn collect_items_rec<'tcx>(\n             if let hir::ItemKind::GlobalAsm(asm) = item.kind {\n                 for (op, op_sp) in asm.operands {\n                     match op {\n-                        hir::InlineAsmOperand::Const { ref anon_const } => {\n-                            // Treat these the same way as ItemKind::Const\n-                            let anon_const_def_id =\n-                                tcx.hir().local_def_id(anon_const.hir_id).to_def_id();\n-                            if let Ok(val) = tcx.const_eval_poly(anon_const_def_id) {\n-                                collect_const_value(tcx, val, &mut neighbors);\n-                            }\n+                        hir::InlineAsmOperand::Const { .. } => {\n+                            // Only constants which resolve to a plain integer\n+                            // are supported. Therefore the value should not\n+                            // depend on any other items.\n                         }\n                         _ => span_bug!(*op_sp, \"invalid operand type for global_asm!\"),\n                     }"}]}