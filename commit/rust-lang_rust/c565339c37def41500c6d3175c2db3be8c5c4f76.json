{"sha": "c565339c37def41500c6d3175c2db3be8c5c4f76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NjUzMzljMzdkZWY0MTUwMGM2ZDMxNzVjMmRiM2JlOGM1YzRmNzY=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-08-22T16:55:45Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-08-24T21:24:44Z"}, "message": "Convert some functions to return Cow<'static,str> instead of String to reduce potential reallocations", "tree": {"sha": "84c10d644be15d113f565b4061cfcfd34f4f0912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c10d644be15d113f565b4061cfcfd34f4f0912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c565339c37def41500c6d3175c2db3be8c5c4f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c565339c37def41500c6d3175c2db3be8c5c4f76", "html_url": "https://github.com/rust-lang/rust/commit/c565339c37def41500c6d3175c2db3be8c5c4f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c565339c37def41500c6d3175c2db3be8c5c4f76/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad56d5c9031636c1509f4417e88099a49405b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad56d5c9031636c1509f4417e88099a49405b4e", "html_url": "https://github.com/rust-lang/rust/commit/2ad56d5c9031636c1509f4417e88099a49405b4e"}], "stats": {"total": 104, "additions": 53, "deletions": 51}, "files": [{"sha": "e74f38dd89c35c4a34bb572b5c34070bdeb89594", "filename": "compiler/rustc_ast_pretty/src/pprust/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs?ref=c565339c37def41500c6d3175c2db3be8c5c4f76", "patch": "@@ -8,17 +8,19 @@ use rustc_ast as ast;\n use rustc_ast::token::{Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n \n+use std::borrow::Cow;\n+\n pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     State::new().nonterminal_to_string(nt)\n }\n \n /// Print the token kind precisely, without converting `$crate` into its respective crate name.\n-pub fn token_kind_to_string(tok: &TokenKind) -> String {\n+pub fn token_kind_to_string(tok: &TokenKind) -> Cow<'static, str> {\n     State::new().token_kind_to_string(tok)\n }\n \n /// Print the token precisely, without converting `$crate` into its respective crate name.\n-pub fn token_to_string(token: &Token) -> String {\n+pub fn token_to_string(token: &Token) -> Cow<'static, str> {\n     State::new().token_to_string(token)\n }\n "}, {"sha": "26a7096781f5cc8eb01bf25fdc7c7a3954ff4480", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=c565339c37def41500c6d3175c2db3be8c5c4f76", "patch": "@@ -658,80 +658,80 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     /// Print the token kind precisely, without converting `$crate` into its respective crate name.\n-    fn token_kind_to_string(&self, tok: &TokenKind) -> String {\n+    fn token_kind_to_string(&self, tok: &TokenKind) -> Cow<'static, str> {\n         self.token_kind_to_string_ext(tok, None)\n     }\n \n     fn token_kind_to_string_ext(\n         &self,\n         tok: &TokenKind,\n         convert_dollar_crate: Option<Span>,\n-    ) -> String {\n+    ) -> Cow<'static, str> {\n         match *tok {\n-            token::Eq => \"=\".to_string(),\n-            token::Lt => \"<\".to_string(),\n-            token::Le => \"<=\".to_string(),\n-            token::EqEq => \"==\".to_string(),\n-            token::Ne => \"!=\".to_string(),\n-            token::Ge => \">=\".to_string(),\n-            token::Gt => \">\".to_string(),\n-            token::Not => \"!\".to_string(),\n-            token::Tilde => \"~\".to_string(),\n-            token::OrOr => \"||\".to_string(),\n-            token::AndAnd => \"&&\".to_string(),\n-            token::BinOp(op) => binop_to_string(op).to_string(),\n-            token::BinOpEq(op) => format!(\"{}=\", binop_to_string(op)),\n+            token::Eq => \"=\".into(),\n+            token::Lt => \"<\".into(),\n+            token::Le => \"<=\".into(),\n+            token::EqEq => \"==\".into(),\n+            token::Ne => \"!=\".into(),\n+            token::Ge => \">=\".into(),\n+            token::Gt => \">\".into(),\n+            token::Not => \"!\".into(),\n+            token::Tilde => \"~\".into(),\n+            token::OrOr => \"||\".into(),\n+            token::AndAnd => \"&&\".into(),\n+            token::BinOp(op) => binop_to_string(op).into(),\n+            token::BinOpEq(op) => format!(\"{}=\", binop_to_string(op)).into(),\n \n             /* Structural symbols */\n-            token::At => \"@\".to_string(),\n-            token::Dot => \".\".to_string(),\n-            token::DotDot => \"..\".to_string(),\n-            token::DotDotDot => \"...\".to_string(),\n-            token::DotDotEq => \"..=\".to_string(),\n-            token::Comma => \",\".to_string(),\n-            token::Semi => \";\".to_string(),\n-            token::Colon => \":\".to_string(),\n-            token::ModSep => \"::\".to_string(),\n-            token::RArrow => \"->\".to_string(),\n-            token::LArrow => \"<-\".to_string(),\n-            token::FatArrow => \"=>\".to_string(),\n-            token::OpenDelim(token::Paren) => \"(\".to_string(),\n-            token::CloseDelim(token::Paren) => \")\".to_string(),\n-            token::OpenDelim(token::Bracket) => \"[\".to_string(),\n-            token::CloseDelim(token::Bracket) => \"]\".to_string(),\n-            token::OpenDelim(token::Brace) => \"{\".to_string(),\n-            token::CloseDelim(token::Brace) => \"}\".to_string(),\n-            token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim) => \"\".to_string(),\n-            token::Pound => \"#\".to_string(),\n-            token::Dollar => \"$\".to_string(),\n-            token::Question => \"?\".to_string(),\n-            token::SingleQuote => \"'\".to_string(),\n+            token::At => \"@\".into(),\n+            token::Dot => \".\".into(),\n+            token::DotDot => \"..\".into(),\n+            token::DotDotDot => \"...\".into(),\n+            token::DotDotEq => \"..=\".into(),\n+            token::Comma => \",\".into(),\n+            token::Semi => \";\".into(),\n+            token::Colon => \":\".into(),\n+            token::ModSep => \"::\".into(),\n+            token::RArrow => \"->\".into(),\n+            token::LArrow => \"<-\".into(),\n+            token::FatArrow => \"=>\".into(),\n+            token::OpenDelim(token::Paren) => \"(\".into(),\n+            token::CloseDelim(token::Paren) => \")\".into(),\n+            token::OpenDelim(token::Bracket) => \"[\".into(),\n+            token::CloseDelim(token::Bracket) => \"]\".into(),\n+            token::OpenDelim(token::Brace) => \"{\".into(),\n+            token::CloseDelim(token::Brace) => \"}\".into(),\n+            token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim) => \"\".into(),\n+            token::Pound => \"#\".into(),\n+            token::Dollar => \"$\".into(),\n+            token::Question => \"?\".into(),\n+            token::SingleQuote => \"'\".into(),\n \n             /* Literals */\n-            token::Literal(lit) => literal_to_string(lit),\n+            token::Literal(lit) => literal_to_string(lit).into(),\n \n             /* Name components */\n             token::Ident(s, is_raw) => {\n-                IdentPrinter::new(s, is_raw, convert_dollar_crate).to_string()\n+                IdentPrinter::new(s, is_raw, convert_dollar_crate).to_string().into()\n             }\n-            token::Lifetime(s) => s.to_string(),\n+            token::Lifetime(s) => s.to_string().into(),\n \n             /* Other */\n             token::DocComment(comment_kind, attr_style, data) => {\n-                doc_comment_to_string(comment_kind, attr_style, data)\n+                doc_comment_to_string(comment_kind, attr_style, data).into()\n             }\n-            token::Eof => \"<eof>\".to_string(),\n+            token::Eof => \"<eof>\".into(),\n \n-            token::Interpolated(ref nt) => self.nonterminal_to_string(nt),\n+            token::Interpolated(ref nt) => self.nonterminal_to_string(nt).into(),\n         }\n     }\n \n     /// Print the token precisely, without converting `$crate` into its respective crate name.\n-    fn token_to_string(&self, token: &Token) -> String {\n+    fn token_to_string(&self, token: &Token) -> Cow<'static, str> {\n         self.token_to_string_ext(token, false)\n     }\n \n-    fn token_to_string_ext(&self, token: &Token, convert_dollar_crate: bool) -> String {\n+    fn token_to_string_ext(&self, token: &Token, convert_dollar_crate: bool) -> Cow<'static, str> {\n         let convert_dollar_crate = convert_dollar_crate.then_some(token.span);\n         self.token_kind_to_string_ext(&token.kind, convert_dollar_crate)\n     }"}, {"sha": "abc8fd18fd75c3a656d5a7fad17a4b7c87bc18d8", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=c565339c37def41500c6d3175c2db3be8c5c4f76", "patch": "@@ -1221,7 +1221,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n \n fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n     match *tt {\n-        mbe::TokenTree::Token(ref token) => pprust::token_to_string(&token),\n+        mbe::TokenTree::Token(ref token) => pprust::token_to_string(&token).into(),\n         mbe::TokenTree::MetaVar(_, name) => format!(\"${}\", name),\n         mbe::TokenTree::MetaVarDecl(_, name, Some(kind)) => format!(\"${}:{}\", name, kind),\n         mbe::TokenTree::MetaVarDecl(_, name, None) => format!(\"${}:\", name),"}, {"sha": "7952b475dc2be07df5a0d57539b3da87ae956987", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c565339c37def41500c6d3175c2db3be8c5c4f76", "patch": "@@ -1528,7 +1528,7 @@ impl<'a> Parser<'a> {\n             .span_suggestion(\n                 token.span,\n                 \"must have an integer part\",\n-                pprust::token_to_string(token),\n+                pprust::token_to_string(token).into(),\n                 Applicability::MachineApplicable,\n             )\n             .emit();"}, {"sha": "04ad323e51a9253b79afd6cdeb06f232bc777194", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c565339c37def41500c6d3175c2db3be8c5c4f76/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c565339c37def41500c6d3175c2db3be8c5c4f76", "patch": "@@ -806,7 +806,7 @@ impl<'a> Parser<'a> {\n                                         .span_suggestion_short(\n                                             sp,\n                                             &format!(\"missing `{}`\", token_str),\n-                                            token_str,\n+                                            token_str.into(),\n                                             Applicability::MaybeIncorrect,\n                                         )\n                                         .emit();"}]}