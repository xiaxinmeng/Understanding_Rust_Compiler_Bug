{"sha": "a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "node_id": "C_kwDOAAsO6NoAKGE2MTYyZjZjMGZmMzlhNmNjOGRjYjExYTQ1NmU1NGY1OTI2NTNjYzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T01:29:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T01:29:41Z"}, "message": "Auto merge of #90574 - notriddle:notriddle/doc-fold-stripped-conditional, r=camelid,GuillaumeGomez\n\nrustdoc: Use conditional for _stripped fold\n\nFollowup: https://github.com/rust-lang/rust/pull/90475#discussion_r741405472", "tree": {"sha": "4746e9870416c8df4833b39c09dac2ee054b1c6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4746e9870416c8df4833b39c09dac2ee054b1c6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "html_url": "https://github.com/rust-lang/rust/commit/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cff30b17a5409e15134f8634444069fc6f21cb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cff30b17a5409e15134f8634444069fc6f21cb6", "html_url": "https://github.com/rust-lang/rust/commit/2cff30b17a5409e15134f8634444069fc6f21cb6"}, {"sha": "7f268838cd2ea00e3d9a724b8994962510cc7778", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f268838cd2ea00e3d9a724b8994962510cc7778", "html_url": "https://github.com/rust-lang/rust/commit/7f268838cd2ea00e3d9a724b8994962510cc7778"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "cd0f44e5696fec3e2038dcb5d5a76f24b8fbfbb5", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "patch": "@@ -20,22 +20,28 @@ crate trait DocFolder: Sized {\n             StructItem(mut i) => {\n                 let num_fields = i.fields.len();\n                 i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                i.fields_stripped |=\n-                    num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                if !i.fields_stripped {\n+                    i.fields_stripped =\n+                        num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                }\n                 StructItem(i)\n             }\n             UnionItem(mut i) => {\n                 let num_fields = i.fields.len();\n                 i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                i.fields_stripped |=\n-                    num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                if !i.fields_stripped {\n+                    i.fields_stripped =\n+                        num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n+                }\n                 UnionItem(i)\n             }\n             EnumItem(mut i) => {\n                 let num_variants = i.variants.len();\n                 i.variants = i.variants.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                i.variants_stripped |=\n-                    num_variants != i.variants.len() || i.variants.iter().any(|f| f.is_stripped());\n+                if !i.variants_stripped {\n+                    i.variants_stripped = num_variants != i.variants.len()\n+                        || i.variants.iter().any(|f| f.is_stripped());\n+                }\n                 EnumItem(i)\n             }\n             TraitItem(mut i) => {\n@@ -50,8 +56,10 @@ crate trait DocFolder: Sized {\n                 Variant::Struct(mut j) => {\n                     let num_fields = j.fields.len();\n                     j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    j.fields_stripped |=\n-                        num_fields != j.fields.len() || j.fields.iter().any(|f| f.is_stripped());\n+                    if !j.fields_stripped {\n+                        j.fields_stripped = num_fields != j.fields.len()\n+                            || j.fields.iter().any(|f| f.is_stripped());\n+                    }\n                     VariantItem(Variant::Struct(j))\n                 }\n                 Variant::Tuple(fields) => {"}]}