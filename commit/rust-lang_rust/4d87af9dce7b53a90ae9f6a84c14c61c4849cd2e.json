{"sha": "4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODdhZjlkY2U3YjUzYTkwYWU5ZjZhODRjMTRjNjFjNDg0OWNkMmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-06T23:14:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:50Z"}, "message": "core: Convert statics to constants", "tree": {"sha": "883c129578b2776e2f34134d6c0e4620cd0922d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883c129578b2776e2f34134d6c0e4620cd0922d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "html_url": "https://github.com/rust-lang/rust/commit/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90d03d792669fed99b659d1efbe835d4b9b8873c", "url": "https://api.github.com/repos/rust-lang/rust/commits/90d03d792669fed99b659d1efbe835d4b9b8873c", "html_url": "https://github.com/rust-lang/rust/commit/90d03d792669fed99b659d1efbe835d4b9b8873c"}], "stats": {"total": 166, "additions": 83, "deletions": 83}, "files": [{"sha": "cc6fe06665bc823cc5dc23f070eb7bc6036f4a3e", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -77,19 +77,19 @@ pub enum Ordering {\n \n /// An `AtomicBool` initialized to `false`\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n-pub static INIT_ATOMIC_BOOL: AtomicBool =\n+pub const INIT_ATOMIC_BOOL: AtomicBool =\n         AtomicBool { v: UnsafeCell { value: 0 }, nocopy: marker::NoCopy };\n /// An `AtomicInt` initialized to `0`\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n-pub static INIT_ATOMIC_INT: AtomicInt =\n+pub const INIT_ATOMIC_INT: AtomicInt =\n         AtomicInt { v: UnsafeCell { value: 0 }, nocopy: marker::NoCopy };\n /// An `AtomicUint` initialized to `0`\n #[unstable = \"may be renamed, pending conventions for static initalizers\"]\n-pub static INIT_ATOMIC_UINT: AtomicUint =\n+pub const INIT_ATOMIC_UINT: AtomicUint =\n         AtomicUint { v: UnsafeCell { value: 0, }, nocopy: marker::NoCopy };\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n-static UINT_TRUE: uint = -1;\n+const UINT_TRUE: uint = -1;\n \n #[stable]\n impl AtomicBool {"}, {"sha": "d644fd0063ed34ae24d4e552665e3f36d407108d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -219,8 +219,8 @@ pub struct RefCell<T> {\n // Values [1, MAX-1] represent the number of `Ref` active\n // (will not outgrow its range since `uint` is the size of the address space)\n type BorrowFlag = uint;\n-static UNUSED: BorrowFlag = 0;\n-static WRITING: BorrowFlag = -1;\n+const UNUSED: BorrowFlag = 0;\n+const WRITING: BorrowFlag = -1;\n \n impl<T> RefCell<T> {\n     /// Create a new `RefCell` containing `value`"}, {"sha": "8f3ecf0633cf3780b7f2e0f7a6d17fc4d5160e5f", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -63,7 +63,7 @@ static MAX_THREE_B: u32 =  0x10000u32;\n */\n \n /// The highest valid code point\n-pub static MAX: char = '\\U0010ffff';\n+pub const MAX: char = '\\U0010ffff';\n \n /// Converts from `u32` to a `char`\n #[inline]"}, {"sha": "b439f5577cbea126ef6a433af40b9928b6f68955", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -20,29 +20,29 @@ use num::{FPNormal, FPCategory, FPZero, FPSubnormal, FPInfinite, FPNaN};\n use num::Float;\n use option::Option;\n \n-pub static RADIX: uint = 2u;\n+pub const RADIX: uint = 2u;\n \n-pub static MANTISSA_DIGITS: uint = 24u;\n-pub static DIGITS: uint = 6u;\n+pub const MANTISSA_DIGITS: uint = 24u;\n+pub const DIGITS: uint = 6u;\n \n-pub static EPSILON: f32 = 1.19209290e-07_f32;\n+pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n /// Smallest finite f32 value\n-pub static MIN_VALUE: f32 = -3.40282347e+38_f32;\n+pub const MIN_VALUE: f32 = -3.40282347e+38_f32;\n /// Smallest positive, normalized f32 value\n-pub static MIN_POS_VALUE: f32 = 1.17549435e-38_f32;\n+pub const MIN_POS_VALUE: f32 = 1.17549435e-38_f32;\n /// Largest finite f32 value\n-pub static MAX_VALUE: f32 = 3.40282347e+38_f32;\n+pub const MAX_VALUE: f32 = 3.40282347e+38_f32;\n \n-pub static MIN_EXP: int = -125;\n-pub static MAX_EXP: int = 128;\n+pub const MIN_EXP: int = -125;\n+pub const MAX_EXP: int = 128;\n \n-pub static MIN_10_EXP: int = -37;\n-pub static MAX_10_EXP: int = 38;\n+pub const MIN_10_EXP: int = -37;\n+pub const MAX_10_EXP: int = 38;\n \n-pub static NAN: f32 = 0.0_f32/0.0_f32;\n-pub static INFINITY: f32 = 1.0_f32/0.0_f32;\n-pub static NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n+pub const NAN: f32 = 0.0_f32/0.0_f32;\n+pub const INFINITY: f32 = 1.0_f32/0.0_f32;\n+pub const NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n \n /// Various useful constants.\n pub mod consts {\n@@ -53,55 +53,55 @@ pub mod consts {\n     // of `Float`.\n \n     /// Archimedes' constant\n-    pub static PI: f32 = 3.14159265358979323846264338327950288_f32;\n+    pub const PI: f32 = 3.14159265358979323846264338327950288_f32;\n \n     /// pi * 2.0\n-    pub static PI_2: f32 = 6.28318530717958647692528676655900576_f32;\n+    pub const PI_2: f32 = 6.28318530717958647692528676655900576_f32;\n \n     /// pi/2.0\n-    pub static FRAC_PI_2: f32 = 1.57079632679489661923132169163975144_f32;\n+    pub const FRAC_PI_2: f32 = 1.57079632679489661923132169163975144_f32;\n \n     /// pi/3.0\n-    pub static FRAC_PI_3: f32 = 1.04719755119659774615421446109316763_f32;\n+    pub const FRAC_PI_3: f32 = 1.04719755119659774615421446109316763_f32;\n \n     /// pi/4.0\n-    pub static FRAC_PI_4: f32 = 0.785398163397448309615660845819875721_f32;\n+    pub const FRAC_PI_4: f32 = 0.785398163397448309615660845819875721_f32;\n \n     /// pi/6.0\n-    pub static FRAC_PI_6: f32 = 0.52359877559829887307710723054658381_f32;\n+    pub const FRAC_PI_6: f32 = 0.52359877559829887307710723054658381_f32;\n \n     /// pi/8.0\n-    pub static FRAC_PI_8: f32 = 0.39269908169872415480783042290993786_f32;\n+    pub const FRAC_PI_8: f32 = 0.39269908169872415480783042290993786_f32;\n \n     /// 1.0/pi\n-    pub static FRAC_1_PI: f32 = 0.318309886183790671537767526745028724_f32;\n+    pub const FRAC_1_PI: f32 = 0.318309886183790671537767526745028724_f32;\n \n     /// 2.0/pi\n-    pub static FRAC_2_PI: f32 = 0.636619772367581343075535053490057448_f32;\n+    pub const FRAC_2_PI: f32 = 0.636619772367581343075535053490057448_f32;\n \n     /// 2.0/sqrt(pi)\n-    pub static FRAC_2_SQRTPI: f32 = 1.12837916709551257389615890312154517_f32;\n+    pub const FRAC_2_SQRTPI: f32 = 1.12837916709551257389615890312154517_f32;\n \n     /// sqrt(2.0)\n-    pub static SQRT2: f32 = 1.41421356237309504880168872420969808_f32;\n+    pub const SQRT2: f32 = 1.41421356237309504880168872420969808_f32;\n \n     /// 1.0/sqrt(2.0)\n-    pub static FRAC_1_SQRT2: f32 = 0.707106781186547524400844362104849039_f32;\n+    pub const FRAC_1_SQRT2: f32 = 0.707106781186547524400844362104849039_f32;\n \n     /// Euler's number\n-    pub static E: f32 = 2.71828182845904523536028747135266250_f32;\n+    pub const E: f32 = 2.71828182845904523536028747135266250_f32;\n \n     /// log2(e)\n-    pub static LOG2_E: f32 = 1.44269504088896340735992468100189214_f32;\n+    pub const LOG2_E: f32 = 1.44269504088896340735992468100189214_f32;\n \n     /// log10(e)\n-    pub static LOG10_E: f32 = 0.434294481903251827651128918916605082_f32;\n+    pub const LOG10_E: f32 = 0.434294481903251827651128918916605082_f32;\n \n     /// ln(2.0)\n-    pub static LN_2: f32 = 0.693147180559945309417232121458176568_f32;\n+    pub const LN_2: f32 = 0.693147180559945309417232121458176568_f32;\n \n     /// ln(10.0)\n-    pub static LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n+    pub const LN_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n impl Float for f32 {\n@@ -143,8 +143,8 @@ impl Float for f32 {\n     /// is going to be tested, it is generally faster to use the specific\n     /// predicate instead.\n     fn classify(self) -> FPCategory {\n-        static EXP_MASK: u32 = 0x7f800000;\n-        static MAN_MASK: u32 = 0x007fffff;\n+        const EXP_MASK: u32 = 0x7f800000;\n+        const MAN_MASK: u32 = 0x007fffff;\n \n         let bits: u32 = unsafe { mem::transmute(self) };\n         match (bits & MAN_MASK, bits & EXP_MASK) {"}, {"sha": "d980009c0db0d8a96153fea094b00dbba89f88dd", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -24,31 +24,31 @@ use option::Option;\n // constants are implemented in favour of referencing the respective\n // members of `Bounded` and `Float`.\n \n-pub static RADIX: uint = 2u;\n+pub const RADIX: uint = 2u;\n \n-pub static MANTISSA_DIGITS: uint = 53u;\n-pub static DIGITS: uint = 15u;\n+pub const MANTISSA_DIGITS: uint = 53u;\n+pub const DIGITS: uint = 15u;\n \n-pub static EPSILON: f64 = 2.2204460492503131e-16_f64;\n+pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n /// Smallest finite f64 value\n-pub static MIN_VALUE: f64 = -1.7976931348623157e+308_f64;\n+pub const MIN_VALUE: f64 = -1.7976931348623157e+308_f64;\n /// Smallest positive, normalized f64 value\n-pub static MIN_POS_VALUE: f64 = 2.2250738585072014e-308_f64;\n+pub const MIN_POS_VALUE: f64 = 2.2250738585072014e-308_f64;\n /// Largest finite f64 value\n-pub static MAX_VALUE: f64 = 1.7976931348623157e+308_f64;\n+pub const MAX_VALUE: f64 = 1.7976931348623157e+308_f64;\n \n-pub static MIN_EXP: int = -1021;\n-pub static MAX_EXP: int = 1024;\n+pub const MIN_EXP: int = -1021;\n+pub const MAX_EXP: int = 1024;\n \n-pub static MIN_10_EXP: int = -307;\n-pub static MAX_10_EXP: int = 308;\n+pub const MIN_10_EXP: int = -307;\n+pub const MAX_10_EXP: int = 308;\n \n-pub static NAN: f64 = 0.0_f64/0.0_f64;\n+pub const NAN: f64 = 0.0_f64/0.0_f64;\n \n-pub static INFINITY: f64 = 1.0_f64/0.0_f64;\n+pub const INFINITY: f64 = 1.0_f64/0.0_f64;\n \n-pub static NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n+pub const NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n \n /// Various useful constants.\n pub mod consts {\n@@ -59,55 +59,55 @@ pub mod consts {\n     // of `Float`.\n \n     /// Archimedes' constant\n-    pub static PI: f64 = 3.14159265358979323846264338327950288_f64;\n+    pub const PI: f64 = 3.14159265358979323846264338327950288_f64;\n \n     /// pi * 2.0\n-    pub static PI_2: f64 = 6.28318530717958647692528676655900576_f64;\n+    pub const PI_2: f64 = 6.28318530717958647692528676655900576_f64;\n \n     /// pi/2.0\n-    pub static FRAC_PI_2: f64 = 1.57079632679489661923132169163975144_f64;\n+    pub const FRAC_PI_2: f64 = 1.57079632679489661923132169163975144_f64;\n \n     /// pi/3.0\n-    pub static FRAC_PI_3: f64 = 1.04719755119659774615421446109316763_f64;\n+    pub const FRAC_PI_3: f64 = 1.04719755119659774615421446109316763_f64;\n \n     /// pi/4.0\n-    pub static FRAC_PI_4: f64 = 0.785398163397448309615660845819875721_f64;\n+    pub const FRAC_PI_4: f64 = 0.785398163397448309615660845819875721_f64;\n \n     /// pi/6.0\n-    pub static FRAC_PI_6: f64 = 0.52359877559829887307710723054658381_f64;\n+    pub const FRAC_PI_6: f64 = 0.52359877559829887307710723054658381_f64;\n \n     /// pi/8.0\n-    pub static FRAC_PI_8: f64 = 0.39269908169872415480783042290993786_f64;\n+    pub const FRAC_PI_8: f64 = 0.39269908169872415480783042290993786_f64;\n \n     /// 1.0/pi\n-    pub static FRAC_1_PI: f64 = 0.318309886183790671537767526745028724_f64;\n+    pub const FRAC_1_PI: f64 = 0.318309886183790671537767526745028724_f64;\n \n     /// 2.0/pi\n-    pub static FRAC_2_PI: f64 = 0.636619772367581343075535053490057448_f64;\n+    pub const FRAC_2_PI: f64 = 0.636619772367581343075535053490057448_f64;\n \n     /// 2.0/sqrt(pi)\n-    pub static FRAC_2_SQRTPI: f64 = 1.12837916709551257389615890312154517_f64;\n+    pub const FRAC_2_SQRTPI: f64 = 1.12837916709551257389615890312154517_f64;\n \n     /// sqrt(2.0)\n-    pub static SQRT2: f64 = 1.41421356237309504880168872420969808_f64;\n+    pub const SQRT2: f64 = 1.41421356237309504880168872420969808_f64;\n \n     /// 1.0/sqrt(2.0)\n-    pub static FRAC_1_SQRT2: f64 = 0.707106781186547524400844362104849039_f64;\n+    pub const FRAC_1_SQRT2: f64 = 0.707106781186547524400844362104849039_f64;\n \n     /// Euler's number\n-    pub static E: f64 = 2.71828182845904523536028747135266250_f64;\n+    pub const E: f64 = 2.71828182845904523536028747135266250_f64;\n \n     /// log2(e)\n-    pub static LOG2_E: f64 = 1.44269504088896340735992468100189214_f64;\n+    pub const LOG2_E: f64 = 1.44269504088896340735992468100189214_f64;\n \n     /// log10(e)\n-    pub static LOG10_E: f64 = 0.434294481903251827651128918916605082_f64;\n+    pub const LOG10_E: f64 = 0.434294481903251827651128918916605082_f64;\n \n     /// ln(2.0)\n-    pub static LN_2: f64 = 0.693147180559945309417232121458176568_f64;\n+    pub const LN_2: f64 = 0.693147180559945309417232121458176568_f64;\n \n     /// ln(10.0)\n-    pub static LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n+    pub const LN_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n impl Float for f64 {\n@@ -149,8 +149,8 @@ impl Float for f64 {\n     /// is going to be tested, it is generally faster to use the specific\n     /// predicate instead.\n     fn classify(self) -> FPCategory {\n-        static EXP_MASK: u64 = 0x7ff0000000000000;\n-        static MAN_MASK: u64 = 0x000fffffffffffff;\n+        const EXP_MASK: u64 = 0x7ff0000000000000;\n+        const MAN_MASK: u64 = 0x000fffffffffffff;\n \n         let bits: u64 = unsafe { mem::transmute(self) };\n         match (bits & MAN_MASK, bits & EXP_MASK) {"}, {"sha": "0f8950344c8a0524a175125d488fd3449b81911a", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -16,20 +16,20 @@ macro_rules! int_module (($T:ty, $bits:expr) => (\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable]\n-pub static BITS : uint = $bits;\n+pub const BITS : uint = $bits;\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable]\n-pub static BYTES : uint = ($bits / 8);\n+pub const BYTES : uint = ($bits / 8);\n \n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `Bounded::min_value` function.\n #[unstable]\n-pub static MIN: $T = (-1 as $T) << (BITS - 1);\n+pub const MIN: $T = (-1 as $T) << (BITS - 1);\n // FIXME(#9837): Compute MIN like this so the high bits that shouldn't exist are 0.\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `Bounded::max_value` function.\n #[unstable]\n-pub static MAX: $T = !MIN;\n+pub const MAX: $T = !MIN;\n \n ))"}, {"sha": "2a94f851646c4f4bda95d17039f994689629941b", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -14,13 +14,13 @@\n macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n #[unstable]\n-pub static BITS : uint = $bits;\n+pub const BITS : uint = $bits;\n #[unstable]\n-pub static BYTES : uint = ($bits / 8);\n+pub const BYTES : uint = ($bits / 8);\n \n #[unstable]\n-pub static MIN: $T = 0 as $T;\n+pub const MIN: $T = 0 as $T;\n #[unstable]\n-pub static MAX: $T = 0 as $T - 1 as $T;\n+pub const MAX: $T = 0 as $T - 1 as $T;\n \n ))"}, {"sha": "1cbe955274b65995ac281a960f948d2993be8aab", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4d87af9dce7b53a90ae9f6a84c14c61c4849cd2e", "patch": "@@ -1049,9 +1049,9 @@ pub struct CharRange {\n }\n \n /// Mask of the value bits of a continuation byte\n-static CONT_MASK: u8 = 0b0011_1111u8;\n+const CONT_MASK: u8 = 0b0011_1111u8;\n /// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte\n-static TAG_CONT_U8: u8 = 0b1000_0000u8;\n+const TAG_CONT_U8: u8 = 0b1000_0000u8;\n \n /// Unsafe operations\n pub mod raw {"}]}