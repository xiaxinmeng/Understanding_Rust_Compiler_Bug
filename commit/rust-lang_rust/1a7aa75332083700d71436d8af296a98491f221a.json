{"sha": "1a7aa75332083700d71436d8af296a98491f221a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2FhNzUzMzIwODM3MDBkNzE0MzZkOGFmMjk2YTk4NDkxZjIyMWE=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-10-06T15:35:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-06T15:35:42Z"}, "message": "Rollup merge of #36960 - michaelwoerister:linker-regression, r=eddyb\n\nLinker regression\n\nThis should fix the symbol conflicts reported in #36852.\nThe PR also makes some debug output a bit more informative.\n\nr? @eddyb", "tree": {"sha": "aa417a8f04886c8f1dee8d542d2c05f37d40d006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa417a8f04886c8f1dee8d542d2c05f37d40d006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7aa75332083700d71436d8af296a98491f221a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7aa75332083700d71436d8af296a98491f221a", "html_url": "https://github.com/rust-lang/rust/commit/1a7aa75332083700d71436d8af296a98491f221a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7aa75332083700d71436d8af296a98491f221a/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1089b56f32c5023b5fe7f31532423aff97f479", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1089b56f32c5023b5fe7f31532423aff97f479", "html_url": "https://github.com/rust-lang/rust/commit/9f1089b56f32c5023b5fe7f31532423aff97f479"}, {"sha": "2d34ad04ef6a2a5b69da24ed6b7b2c9f38e4678f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d34ad04ef6a2a5b69da24ed6b7b2c9f38e4678f", "html_url": "https://github.com/rust-lang/rust/commit/2d34ad04ef6a2a5b69da24ed6b7b2c9f38e4678f"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "c87497384ad6afbdeb8e9aa6c4a4558b5bd29da8", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a7aa75332083700d71436d8af296a98491f221a/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7aa75332083700d71436d8af296a98491f221a/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=1a7aa75332083700d71436d8af296a98491f221a", "patch": "@@ -217,6 +217,10 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     llreffn: ValueRef)\n     -> ValueRef\n {\n+    if let Some(&llfn) = ccx.instances().borrow().get(&method_instance) {\n+        return llfn;\n+    }\n+\n     debug!(\"trans_fn_once_adapter_shim(closure_def_id={:?}, substs={:?}, llreffn={:?})\",\n            closure_def_id, substs, Value(llreffn));\n \n@@ -257,7 +261,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     // Create the by-value helper.\n     let function_name = method_instance.symbol_name(ccx.shared());\n-    let lloncefn = declare::declare_fn(ccx, &function_name, llonce_fn_ty);\n+    let lloncefn = declare::define_internal_fn(ccx, &function_name, llonce_fn_ty);\n     attributes::set_frame_pointer_elimination(ccx, lloncefn);\n \n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n@@ -312,5 +316,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     fcx.finish(bcx, DebugLoc::None);\n \n+    ccx.instances().borrow_mut().insert(method_instance, lloncefn);\n+\n     lloncefn\n }"}, {"sha": "625b43c7d179255d44aefd33028a58ac1d26be7b", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a7aa75332083700d71436d8af296a98491f221a/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7aa75332083700d71436d8af296a98491f221a/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=1a7aa75332083700d71436d8af296a98491f221a", "patch": "@@ -267,14 +267,14 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n     let mut initial_partitioning = place_root_translation_items(scx,\n                                                                 trans_items);\n \n-    debug_dump(tcx, \"INITIAL PARTITONING:\", initial_partitioning.codegen_units.iter());\n+    debug_dump(scx, \"INITIAL PARTITONING:\", initial_partitioning.codegen_units.iter());\n \n     // If the partitioning should produce a fixed count of codegen units, merge\n     // until that count is reached.\n     if let PartitioningStrategy::FixedUnitCount(count) = strategy {\n         merge_codegen_units(&mut initial_partitioning, count, &tcx.crate_name[..]);\n \n-        debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n+        debug_dump(scx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n     }\n \n     // In the next step, we use the inlining map to determine which addtional\n@@ -284,7 +284,7 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n     let post_inlining = place_inlined_translation_items(initial_partitioning,\n                                                         inlining_map);\n \n-    debug_dump(tcx, \"POST INLINING:\", post_inlining.0.iter());\n+    debug_dump(scx, \"POST INLINING:\", post_inlining.0.iter());\n \n     // Finally, sort by codegen unit name, so that we get deterministic results\n     let mut result = post_inlining.0;\n@@ -552,7 +552,7 @@ fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString\n         index)[..])\n }\n \n-fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn debug_dump<'a, 'b, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                                label: &str,\n                                cgus: I)\n     where I: Iterator<Item=&'b CodegenUnit<'tcx>>,\n@@ -561,10 +561,21 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);\n         for cgu in cgus {\n+            let symbol_map = SymbolMap::build(scx, cgu.items\n+                                                      .iter()\n+                                                      .map(|(&trans_item, _)| trans_item));\n             debug!(\"CodegenUnit {}:\", cgu.name);\n \n             for (trans_item, linkage) in &cgu.items {\n-                debug!(\" - {} [{:?}]\", trans_item.to_string(tcx), linkage);\n+                let symbol_name = symbol_map.get_or_compute(scx, *trans_item);\n+                let symbol_hash_start = symbol_name.rfind('h');\n+                let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n+                                                   .unwrap_or(\"<no hash>\");\n+\n+                debug!(\" - {} [{:?}] [{}]\",\n+                       trans_item.to_string(scx.tcx()),\n+                       linkage,\n+                       symbol_hash);\n             }\n \n             debug!(\"\");"}]}