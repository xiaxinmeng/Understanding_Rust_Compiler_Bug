{"sha": "b6a397888689a22803bb364f74177e855b64c680", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YTM5Nzg4ODY4OWEyMjgwM2JiMzY0Zjc0MTc3ZTg1NWI2NGM2ODA=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-03T10:35:34Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-03T10:35:34Z"}, "message": "clippy improvements to iterators", "tree": {"sha": "695dbb3010e8f9242e7f1000b6db2e409c704c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/695dbb3010e8f9242e7f1000b6db2e409c704c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a397888689a22803bb364f74177e855b64c680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a397888689a22803bb364f74177e855b64c680", "html_url": "https://github.com/rust-lang/rust/commit/b6a397888689a22803bb364f74177e855b64c680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a397888689a22803bb364f74177e855b64c680/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1661947014fc2ecbbb7a30b1604499500dcf767e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1661947014fc2ecbbb7a30b1604499500dcf767e", "html_url": "https://github.com/rust-lang/rust/commit/1661947014fc2ecbbb7a30b1604499500dcf767e"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "53b72fe2ba795aa1c81ca317f5a92c1a2f773427", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6a397888689a22803bb364f74177e855b64c680/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a397888689a22803bb364f74177e855b64c680/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b6a397888689a22803bb364f74177e855b64c680", "patch": "@@ -1513,7 +1513,7 @@ impl<A, B> Iterator for Chain<A, B> where\n     fn next(&mut self) -> Option<A::Item> {\n         match self.state {\n             ChainState::Both => match self.a.next() {\n-                elt @ Some(..) => return elt,\n+                elt @ Some(..) => elt,\n                 None => {\n                     self.state = ChainState::Back;\n                     self.b.next()\n@@ -1590,7 +1590,7 @@ impl<A, B> DoubleEndedIterator for Chain<A, B> where\n     fn next_back(&mut self) -> Option<A::Item> {\n         match self.state {\n             ChainState::Both => match self.b.next_back() {\n-                elt @ Some(..) => return elt,\n+                elt @ Some(..) => elt,\n                 None => {\n                     self.state = ChainState::Front;\n                     self.a.next_back()\n@@ -1683,7 +1683,7 @@ impl<B, I: Iterator, F> Iterator for Map<I, F> where F: FnMut(I::Item) -> B {\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        self.iter.next().map(|a| (self.f)(a))\n+        self.iter.next().map(self.f)\n     }\n \n     #[inline]\n@@ -1698,7 +1698,7 @@ impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for Map<I, F> where\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n-        self.iter.next_back().map(|a| (self.f)(a))\n+        self.iter.next_back().map(self.f)\n     }\n }\n \n@@ -2210,7 +2210,7 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n                     return Some(x)\n                 }\n             }\n-            match self.iter.next().map(|x| (self.f)(x)) {\n+            match self.iter.next().map(self.f) {\n                 None => return self.backiter.as_mut().and_then(|it| it.next()),\n                 next => self.frontiter = next.map(IntoIterator::into_iter),\n             }\n@@ -2243,7 +2243,7 @@ impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F> wher\n                     return Some(y)\n                 }\n             }\n-            match self.iter.next_back().map(|x| (self.f)(x)) {\n+            match self.iter.next_back().map(self.f) {\n                 None => return self.frontiter.as_mut().and_then(|it| it.next_back()),\n                 next => self.backiter = next.map(IntoIterator::into_iter),\n             }"}]}