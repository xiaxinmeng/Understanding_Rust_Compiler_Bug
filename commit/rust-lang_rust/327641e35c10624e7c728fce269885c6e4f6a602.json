{"sha": "327641e35c10624e7c728fce269885c6e4f6a602", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNzY0MWUzNWMxMDYyNGU3YzcyOGZjZTI2OTg4NWM2ZTRmNmE2MDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T12:35:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "recover on 'do catch { .. }'", "tree": {"sha": "6dbd7285c99100f06bfecba5848036c74895143f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dbd7285c99100f06bfecba5848036c74895143f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/327641e35c10624e7c728fce269885c6e4f6a602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/327641e35c10624e7c728fce269885c6e4f6a602", "html_url": "https://github.com/rust-lang/rust/commit/327641e35c10624e7c728fce269885c6e4f6a602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/327641e35c10624e7c728fce269885c6e4f6a602/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4", "html_url": "https://github.com/rust-lang/rust/commit/32ac9d0e45fe3a8a6b3666cb2e065b8f935ee0a4"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "292d277a6786316935153516ea544afc9db33fb5", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/327641e35c10624e7c728fce269885c6e4f6a602/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327641e35c10624e7c728fce269885c6e4f6a602/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=327641e35c10624e7c728fce269885c6e4f6a602", "patch": "@@ -876,14 +876,11 @@ impl<'a> Parser<'a> {\n                     return self.parse_labeled_expr(label, attrs);\n                 }\n                 if self.eat_keyword(kw::Loop) {\n-                    let lo = self.prev_span;\n-                    return self.parse_loop_expr(None, lo, attrs);\n+                    return self.parse_loop_expr(None, self.prev_span, attrs);\n                 }\n                 if self.eat_keyword(kw::Continue) {\n-                    let label = self.eat_label();\n-                    let ex = ExprKind::Continue(label);\n-                    let hi = self.prev_span;\n-                    return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n+                    let kind = ExprKind::Continue(self.eat_label());\n+                    return Ok(self.mk_expr(lo.to(self.prev_span), kind, attrs));\n                 }\n                 if self.eat_keyword(kw::Match) {\n                     let match_sp = self.prev_span;\n@@ -893,20 +890,14 @@ impl<'a> Parser<'a> {\n                     });\n                 }\n                 if self.eat_keyword(kw::Unsafe) {\n-                    return self.parse_block_expr(\n-                        None,\n-                        lo,\n-                        BlockCheckMode::Unsafe(ast::UserProvided),\n-                        attrs);\n+                    let mode = BlockCheckMode::Unsafe(ast::UserProvided);\n+                    return self.parse_block_expr(None, lo, mode, attrs);\n                 }\n                 if self.is_do_catch_block() {\n-                    let mut db = self.fatal(\"found removed `do catch` syntax\");\n-                    db.help(\"following RFC #2388, the new non-placeholder syntax is `try`\");\n-                    return Err(db);\n+                    return self.recover_do_catch(attrs);\n                 }\n                 if self.is_try_block() {\n-                    let lo = self.token.span;\n-                    assert!(self.eat_keyword(kw::Try));\n+                    self.expect_keyword(kw::Try)?;\n                     return self.parse_try_block(lo, attrs);\n                 }\n \n@@ -1104,6 +1095,27 @@ impl<'a> Parser<'a> {\n         self.parse_expr()\n     }\n \n+    /// Recover on the syntax `do catch { ... }` suggesting `try { ... }` instead.\n+    fn recover_do_catch(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let lo = self.token.span;\n+\n+        self.bump(); // `do`\n+        self.bump(); // `catch`\n+\n+        let span_dc = lo.to(self.prev_span);\n+        self.struct_span_err(span_dc, \"found removed `do catch` syntax\")\n+            .span_suggestion(\n+                span_dc,\n+                \"replace with the new syntax\",\n+                \"try\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .note(\"following RFC #2388, the new non-placeholder syntax is `try`\")\n+            .emit();\n+\n+        self.parse_try_block(lo, attrs)\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all."}, {"sha": "f64568d06e96d00e3d7e6fe05e99d5b8e127ccb9", "filename": "src/test/ui/parser/do-catch-suggests-try.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/327641e35c10624e7c728fce269885c6e4f6a602/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327641e35c10624e7c728fce269885c6e4f6a602/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.rs?ref=327641e35c10624e7c728fce269885c6e4f6a602", "patch": "@@ -1,5 +1,10 @@\n+#![feature(try_blocks)]\n+\n fn main() {\n     let _: Option<()> = do catch {};\n     //~^ ERROR found removed `do catch` syntax\n-    //~^^ HELP following RFC #2388, the new non-placeholder syntax is `try`\n+    //~| replace with the new syntax\n+    //~| following RFC #2388, the new non-placeholder syntax is `try`\n+\n+    let _recovery_witness: () = 1; //~ ERROR mismatched types\n }"}, {"sha": "cd8907b7eac9a6f1e8dd1060e2e589c3ae341566", "filename": "src/test/ui/parser/do-catch-suggests-try.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/327641e35c10624e7c728fce269885c6e4f6a602/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/327641e35c10624e7c728fce269885c6e4f6a602/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdo-catch-suggests-try.stderr?ref=327641e35c10624e7c728fce269885c6e4f6a602", "patch": "@@ -1,10 +1,19 @@\n error: found removed `do catch` syntax\n-  --> $DIR/do-catch-suggests-try.rs:2:25\n+  --> $DIR/do-catch-suggests-try.rs:4:25\n    |\n LL |     let _: Option<()> = do catch {};\n-   |                         ^^\n+   |                         ^^^^^^^^ help: replace with the new syntax: `try`\n    |\n-   = help: following RFC #2388, the new non-placeholder syntax is `try`\n+   = note: following RFC #2388, the new non-placeholder syntax is `try`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/do-catch-suggests-try.rs:9:33\n+   |\n+LL |     let _recovery_witness: () = 1;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}