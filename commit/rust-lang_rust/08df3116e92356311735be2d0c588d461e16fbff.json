{"sha": "08df3116e92356311735be2d0c588d461e16fbff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGYzMTE2ZTkyMzU2MzExNzM1YmUyZDBjNTg4ZDQ2MWUxNmZiZmY=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-04-24T07:17:29Z"}, "committer": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-25T20:09:02Z"}, "message": "librustc_mir: Add support for const fn offset/arith_offset\n\nMiri's pointer_offset_inbounds implementation has been moved into\nlibrustc_mir as ptr_offset_inbounds (to avoid breaking miri on a\nnightly update). The comments have been slightly reworked to better\nmatch `offset`'s external documentation about what causes UB.\n\nThe intrinsic implementations are taken directly from miri.\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "e3c8f0edb658252370c1e07ad99834d4ea504b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3c8f0edb658252370c1e07ad99834d4ea504b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08df3116e92356311735be2d0c588d461e16fbff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08df3116e92356311735be2d0c588d461e16fbff", "html_url": "https://github.com/rust-lang/rust/commit/08df3116e92356311735be2d0c588d461e16fbff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08df3116e92356311735be2d0c588d461e16fbff/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283", "html_url": "https://github.com/rust-lang/rust/commit/a0f06d11ae7fe29c8e263e2a5d8cd41b372f0283"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "0db9c7026588da776a047282e8324985d6a3e278", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/08df3116e92356311735be2d0c588d461e16fbff/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08df3116e92356311735be2d0c588d461e16fbff/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=08df3116e92356311735be2d0c588d461e16fbff", "patch": "@@ -10,11 +10,11 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n \n-use super::{ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n+use super::{CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n \n mod caller_location;\n mod type_name;\n@@ -279,7 +279,24 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n+            sym::offset => {\n+                let ptr = self.read_scalar(args[0])?.not_undef()?;\n+                let offset_count = self.read_scalar(args[1])?.to_machine_isize(self)?;\n+                let pointee_ty = substs.type_at(0);\n \n+                let offset_ptr = self.ptr_offset_inbounds(ptr, pointee_ty, offset_count)?;\n+                self.write_scalar(offset_ptr, dest)?;\n+            }\n+            sym::arith_offset => {\n+                let ptr = self.read_scalar(args[0])?.not_undef()?;\n+                let offset_count = self.read_scalar(args[1])?.to_machine_isize(self)?;\n+                let pointee_ty = substs.type_at(0);\n+\n+                let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n+                let offset_bytes = offset_count.wrapping_mul(pointee_size);\n+                let offset_ptr = ptr.ptr_wrapping_signed_offset(offset_bytes, self);\n+                self.write_scalar(offset_ptr, dest)?;\n+            }\n             sym::ptr_offset_from => {\n                 let a = self.read_immediate(args[0])?.to_scalar()?;\n                 let b = self.read_immediate(args[1])?.to_scalar()?;\n@@ -409,4 +426,36 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `Rem` says this is all right, so we can let `Div` do its job.\n         self.binop_ignore_overflow(BinOp::Div, a, b, dest)\n     }\n+\n+    /// Offsets a pointer by some multiple of its type, returning an error if the pointer leaves its\n+    /// allocation. For integer pointers, we consider each of them their own tiny allocation of size\n+    /// 0, so offset-by-0 (and only 0) is okay -- except that NULL cannot be offset by _any_ value.\n+    pub fn ptr_offset_inbounds(\n+        &self,\n+        ptr: Scalar<M::PointerTag>,\n+        pointee_ty: Ty<'tcx>,\n+        offset_count: i64,\n+    ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n+        let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n+        // The computed offset, in bytes, cannot overflow an isize.\n+        let offset_bytes = offset_count\n+            .checked_mul(pointee_size)\n+            .ok_or(err_ub_format!(\"inbounds pointer arithmetic: overflow computing offset\"))?;\n+        // The offset being in bounds cannot rely on \"wrapping around\" the address space.\n+        // So, first rule out overflows in the pointer arithmetic.\n+        let offset_ptr = ptr.ptr_signed_offset(offset_bytes, self)?;\n+        // ptr and offset_ptr must be in bounds of the same allocated object. This means all of the\n+        // memory between these pointers must be accessible. Note that we do not require the\n+        // pointers to be properly aligned (unlike a read/write operation).\n+        let min_ptr = if offset_bytes >= 0 { ptr } else { offset_ptr };\n+        let size = offset_bytes.checked_abs().unwrap();\n+        // This call handles checking for integer/NULL pointers.\n+        self.memory.check_ptr_access_align(\n+            min_ptr,\n+            Size::from_bytes(size),\n+            None,\n+            CheckInAllocMsg::InboundsTest,\n+        )?;\n+        Ok(offset_ptr)\n+    }\n }"}, {"sha": "9b055beb99dfd8d5581591c140e91f9c06974898", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08df3116e92356311735be2d0c588d461e16fbff/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08df3116e92356311735be2d0c588d461e16fbff/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=08df3116e92356311735be2d0c588d461e16fbff", "patch": "@@ -147,6 +147,7 @@ symbols! {\n         Arc,\n         Arguments,\n         ArgumentV1,\n+        arith_offset,\n         arm_target_feature,\n         asm,\n         assert,\n@@ -516,6 +517,7 @@ symbols! {\n         not,\n         note,\n         object_safe_for_dispatch,\n+        offset,\n         Ok,\n         omit_gdb_pretty_printer_section,\n         on,"}]}