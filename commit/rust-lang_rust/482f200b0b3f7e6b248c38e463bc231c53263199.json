{"sha": "482f200b0b3f7e6b248c38e463bc231c53263199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MmYyMDBiMGIzZjdlNmIyNDhjMzhlNDYzYmMyMzFjNTMyNjMxOTk=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-26T01:29:54Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-06-26T01:43:12Z"}, "message": "Update import list formatting\n\nInclude comments and sort items alphabetically.", "tree": {"sha": "473521b7c36d61d2eff9ec1c0defae5c7471dea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/473521b7c36d61d2eff9ec1c0defae5c7471dea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/482f200b0b3f7e6b248c38e463bc231c53263199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/482f200b0b3f7e6b248c38e463bc231c53263199", "html_url": "https://github.com/rust-lang/rust/commit/482f200b0b3f7e6b248c38e463bc231c53263199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/482f200b0b3f7e6b248c38e463bc231c53263199/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cef6785bf29f98f49dce5fa62e54606e7f5b948", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cef6785bf29f98f49dce5fa62e54606e7f5b948", "html_url": "https://github.com/rust-lang/rust/commit/8cef6785bf29f98f49dce5fa62e54606e7f5b948"}], "stats": {"total": 238, "additions": 176, "deletions": 62}, "files": [{"sha": "1a16d349208a7efebe1107b7d79e648df7171242", "filename": "src/comment.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -46,9 +46,16 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n                 line = &line[..(line.len() - 2)];\n             }\n \n-            line.trim_right_matches(' ')\n+            line.trim_right()\n         })\n         .map(left_trim_comment_line)\n+        .map(|line| {\n+            if line_breaks == 0 {\n+                line.trim_left()\n+            } else {\n+                line\n+            }\n+        })\n         .fold((true, opener.to_owned()), |(first, mut acc), line| {\n             if !first {\n                 acc.push('\\n');\n@@ -98,6 +105,8 @@ fn format_comments() {\n                             * men\\n                                                                      \\\n                             * t */\";\n     assert_eq!(expected_output, rewrite_comment(input, true, 9, 69));\n+\n+    assert_eq!(\"/* trimmed */\", rewrite_comment(\"/*   trimmed    */\", true, 100, 100));\n }\n \n \n@@ -156,6 +165,7 @@ fn test_find_uncommented() {\n     check(\"/*sup yo? \\n sup*/ sup\", \"p\", Some(20));\n     check(\"hel/*lohello*/lo\", \"hello\", None);\n     check(\"acb\", \"ab\", None);\n+    check(\",/*A*/ \", \",\", Some(0));\n }\n \n // Returns the first byte position after the first comment. The given string"}, {"sha": "0ea13768457215004ed5a698153136084b748e20", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -29,6 +29,7 @@ pub struct Config {\n     pub enum_trailing_comma: bool,\n     pub report_todo: ReportTactic,\n     pub report_fixme: ReportTactic,\n+    pub reorder_imports: bool, // Alphabetically, case sensitive.\n }\n \n impl Config {"}, {"sha": "951fde9d6655b71adcc51445f227c9469b7d5832", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -11,3 +11,4 @@ struct_lit_trailing_comma = \"Vertical\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n+reorder_imports = false"}, {"sha": "535e409288b7b9f7cd683c6653f16417219abe03", "filename": "src/imports.rs", "status": "modified", "additions": 49, "deletions": 28, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -9,12 +9,13 @@\n // except according to those terms.\n \n use visitor::FmtVisitor;\n-use lists::{write_list, ListItem, ListFormatting, SeparatorTactic, ListTactic};\n-use utils::format_visibility;\n+use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, ListTactic};\n+use utils::{span_after, format_visibility};\n \n use syntax::ast;\n use syntax::parse::token;\n use syntax::print::pprust;\n+use syntax::codemap::Span;\n \n // TODO (some day) remove unused imports, expand globs, compress many single imports into a list import\n \n@@ -40,13 +41,14 @@ fn rewrite_single_use_list(path_str: String, vpi: ast::PathListItem, vis: &str)\n impl<'a> FmtVisitor<'a> {\n     // Basically just pretty prints a multi-item import.\n     // Returns None when the import can be removed.\n-    pub fn rewrite_use_list(&mut self,\n+    pub fn rewrite_use_list(&self,\n                             block_indent: usize,\n                             one_line_budget: usize, // excluding indentation\n                             multi_line_budget: usize,\n                             path: &ast::Path,\n                             path_list: &[ast::PathListItem],\n-                            visibility: ast::Visibility) -> Option<String> {\n+                            visibility: ast::Visibility,\n+                            span: Span) -> Option<String> {\n         let path_str = pprust::path_to_string(path);\n         let vis = format_visibility(visibility);\n \n@@ -78,34 +80,53 @@ impl<'a> FmtVisitor<'a> {\n             ends_with_newline: true,\n         };\n \n-        // TODO handle any comments inbetween items.\n-        // If `self` is in the list, put it first.\n-        let head = if path_list.iter().any(|vpi|\n-            if let ast::PathListItem_::PathListMod{ .. } = vpi.node {\n-                true\n-            } else {\n-                false\n-            }\n-        ) {\n-            Some(ListItem::from_str(\"self\"))\n-        } else {\n-            None\n-        };\n+        let mut items = itemize_list(self.codemap,\n+                                     vec![ListItem::from_str(\"\")], // Dummy value, explanation below\n+                                     path_list.iter(),\n+                                     \",\",\n+                                     \"}\",\n+                                     |vpi| vpi.span.lo,\n+                                     |vpi| vpi.span.hi,\n+                                     |vpi| match vpi.node {\n+                                         ast::PathListItem_::PathListIdent{ name, .. } => {\n+                                             token::get_ident(name).to_string()\n+                                         }\n+                                         ast::PathListItem_::PathListMod{ .. } => {\n+                                             \"self\".to_owned()\n+                                         }\n+                                     },\n+                                     span_after(span, \"{\", self.codemap),\n+                                     span.hi);\n+\n+        // We prefixed the item list with a dummy value so that we can\n+        // potentially move \"self\" to the front of the vector without touching\n+        // the rest of the items.\n+        // FIXME: Make more efficient by using a linked list? That would\n+        // require changes to the signatures of itemize_list and write_list.\n+        let has_self = move_self_to_front(&mut items);\n+        let first_index = if has_self { 0 } else { 1 };\n+\n+        if self.config.reorder_imports {\n+            items.tail_mut().sort_by(|a, b| a.item.cmp(&b.item));\n+        }\n \n-        let items: Vec<_> = head.into_iter().chain(path_list.iter().filter_map(|vpi| {\n-            match vpi.node {\n-                ast::PathListItem_::PathListIdent{ name, .. } => {\n-                    Some(ListItem::from_str(token::get_ident(name).to_string()))\n-                }\n-                // Skip `self`, because we added it above.\n-                ast::PathListItem_::PathListMod{ .. } => None,\n-            }\n-        })).collect();\n+        let list = write_list(&items[first_index..], &fmt);\n \n         Some(if path_str.len() == 0 {\n-            format!(\"{}use {{{}}};\", vis, write_list(&items, &fmt))\n+            format!(\"{}use {{{}}};\", vis, list)\n         } else {\n-            format!(\"{}use {}::{{{}}};\", vis, path_str, write_list(&items, &fmt))\n+            format!(\"{}use {}::{{{}}};\", vis, path_str, list)\n         })\n     }\n }\n+\n+// Returns true when self item was found.\n+fn move_self_to_front(items: &mut Vec<ListItem>) -> bool {\n+    match items.iter().position(|item| item.item == \"self\") {\n+        Some(pos) => {\n+            items[0] = items.remove(pos);\n+            true\n+        },\n+        None => false\n+    }\n+}"}, {"sha": "e0e72f90e6e69c8fa16eb92e41cd0ba93917b650", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -11,6 +11,7 @@\n #![feature(rustc_private)]\n #![feature(str_escape)]\n #![feature(str_char)]\n+#![feature(slice_extras)]\n \n // TODO we're going to allocate a whole bunch of temp Strings, is it worth\n // keeping some scratch mem for this and running our own StrPool?"}, {"sha": "87a71578e96aa2036677e3ca220b8648d8875422", "filename": "src/lists.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -14,7 +14,6 @@ use syntax::codemap::{self, CodeMap, BytePos};\n \n use utils::{round_up_to_power_of_two, make_indent};\n use comment::{FindUncommented, rewrite_comment, find_comment_end};\n-use string::before;\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n pub enum ListTactic {\n@@ -66,6 +65,10 @@ impl ListItem {\n         self.post_comment.as_ref().map(|s| s.contains('\\n')).unwrap_or(false)\n     }\n \n+    pub fn has_line_pre_comment(&self) -> bool {\n+        self.pre_comment.as_ref().map_or(false, |comment| comment.starts_with(\"//\"))\n+    }\n+\n     pub fn from_str<S: Into<String>>(s: S) -> ListItem {\n         ListItem {\n             pre_comment: None,\n@@ -115,7 +118,7 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n     }\n \n     // Switch to vertical mode if we find non-block comments.\n-    if items.iter().any(has_line_pre_comment) {\n+    if items.iter().any(ListItem::has_line_pre_comment) {\n         tactic = ListTactic::Vertical;\n     }\n \n@@ -223,13 +226,6 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n     result\n }\n \n-fn has_line_pre_comment(item: &ListItem) -> bool {\n-    match item.pre_comment {\n-        Some(ref comment) => comment.starts_with(\"//\"),\n-        None => false\n-    }\n-}\n-\n // Turns a list into a vector of items with associated comments.\n // TODO: we probably do not want to take a terminator any more. Instead, we\n // should demand a proper span end.\n@@ -250,6 +246,8 @@ pub fn itemize_list<T, I, F1, F2, F3>(codemap: &CodeMap,\n           F3: Fn(&T) -> String\n {\n     let mut result = prefix;\n+    result.reserve(it.size_hint().0);\n+\n     let mut new_it = it.peekable();\n     let white_space: &[_] = &[' ', '\\t'];\n \n@@ -276,14 +274,27 @@ pub fn itemize_list<T, I, F1, F2, F3>(codemap: &CodeMap,\n \n         let comment_end = match new_it.peek() {\n             Some(..) => {\n-                if let Some(start) = before(&post_snippet, \"/*\", \"\\n\") {\n+                let block_open_index = post_snippet.find(\"/*\");\n+                let newline_index = post_snippet.find('\\n');\n+                let separator_index = post_snippet.find_uncommented(separator).unwrap();\n+\n+                match (block_open_index, newline_index) {\n+                    // Separator before comment, with the next item on same line.\n+                    // Comment belongs to next item.\n+                    (Some(i), None) if i > separator_index => { separator_index + separator.len() }\n+                    // Block-style post-comment before the separator.\n+                    (Some(i), None) => {\n+                        cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,\n+                                 separator_index + separator.len())\n+                    }\n                     // Block-style post-comment. Either before or after the separator.\n-                    cmp::max(find_comment_end(&post_snippet[start..]).unwrap() + start,\n-                             post_snippet.find_uncommented(separator).unwrap() + separator.len())\n-                } else if let Some(idx) = post_snippet.find('\\n') {\n-                    idx + 1\n-                } else {\n-                    post_snippet.len()\n+                    (Some(i), Some(j)) if i < j => {\n+                        cmp::max(find_comment_end(&post_snippet[i..]).unwrap() + i,\n+                                 separator_index + separator.len())\n+                    }\n+                    // Potential *single* line comment.\n+                    (_, Some(j)) => { j + 1 }\n+                    _ => post_snippet.len()\n                 }\n             },\n             None => {\n@@ -292,6 +303,7 @@ pub fn itemize_list<T, I, F1, F2, F3>(codemap: &CodeMap,\n             }\n         };\n \n+        // Cleanup post-comment: strip separators and whitespace.\n         prev_span_end = get_hi(&item) + BytePos(comment_end as u32);\n         let mut post_snippet = post_snippet[..comment_end].trim();\n "}, {"sha": "413237e182cd4b91f33be88fdca905751ac7d82d", "filename": "src/string.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -88,16 +88,3 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n \n     result\n }\n-\n-#[inline]\n-// Checks if a appears before b in given string and, if so, returns the index of\n-// a.\n-// FIXME: could be more generic\n-pub fn before<'x>(s: &'x str, a: &str, b: &str) -> Option<usize> {\n-    s.find(a).and_then(|i| {\n-        match s.find(b) {\n-            Some(j) if j <= i => None,\n-            _ => Some(i)\n-        }\n-    })\n-}"}, {"sha": "df50f6cda2733a377813e80271e861dd66614c43", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -168,7 +168,8 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                                               multi_line_budget,\n                                                               path,\n                                                               path_list,\n-                                                              item.vis);\n+                                                              item.vis,\n+                                                              item.span);\n \n                         if let Some(new_str) = formatted {\n                             self.format_missing_with_indent(item.span.lo);\n@@ -186,9 +187,12 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                         self.last_pos = item.span.hi;\n                     }\n                     ast::ViewPath_::ViewPathGlob(_) => {\n+                        self.format_missing_with_indent(item.span.lo);\n                         // FIXME convert to list?\n                     }\n-                    ast::ViewPath_::ViewPathSimple(_,_) => {}\n+                    ast::ViewPath_::ViewPathSimple(_,_) => {\n+                        self.format_missing_with_indent(item.span.lo);\n+                    }\n                 }\n                 visit::walk_item(self, item);\n             }"}, {"sha": "31b0e2c6217b26480e08e609da317b7993326894", "filename": "tests/config/reorder_imports.toml", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fconfig%2Freorder_imports.toml", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fconfig%2Freorder_imports.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Freorder_imports.toml?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -0,0 +1,14 @@\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 4\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\"\n+fn_args_paren_newline = true\n+struct_trailing_comma = \"Vertical\"\n+struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true\n+report_todo = \"Always\"\n+report_fixme = \"Never\"\n+reorder_imports = true"}, {"sha": "35477559e43c93ed4b19075bf8b5d2699613e5e5", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -11,3 +11,4 @@ struct_lit_trailing_comma = \"Vertical\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\"\n+reorder_imports = false"}, {"sha": "2a90c2121489ceb5c9f30343f9a7a48dbc714110", "filename": "tests/source/imports-reorder.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fsource%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fsource%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports-reorder.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-config: reorder_imports.toml\n+\n+use path::{C,/*A*/ A, B /* B */, self /* self */};\n+\n+use {ab, ac, aa, Z, b};"}, {"sha": "3590ecae61f2f32fca91724089debe5d8831c887", "filename": "tests/source/imports.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -0,0 +1,41 @@\n+// Imports.\n+\n+// Long import.\n+use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n+use exceedingly::looooooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA,\n+                                                                                                ItemB};\n+\n+use list::{\n+    // Some item\n+    SomeItem /* Comment */, /* Another item */ AnotherItem /* Another Comment */, // Last Item\n+    LastItem\n+};\n+\n+use test::{  Other          /* C   */  , /*   A   */ self  /*    B     */    };\n+\n+use syntax::{self};\n+use {/* Pre-comment! */\n+     Foo, Bar /* comment */};\n+use Foo::{Bar, Baz};\n+pub use syntax::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath};\n+use syntax::some::{};\n+\n+mod Foo {\n+    pub use syntax::ast::{\n+        ItemForeignMod,\n+        ItemImpl, \n+        ItemMac,\n+        ItemMod,\n+        ItemStatic, \n+        ItemDefaultImpl\n+    };\n+\n+    mod Foo2 {\n+        pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, self, ItemDefaultImpl};\n+    }\n+}\n+\n+fn test() {\n+use Baz::*;\n+        use Qux;\n+}"}, {"sha": "27d394238e81097438207154042617f06870c765", "filename": "tests/target/imports-reorder.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Ftarget%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Ftarget%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports-reorder.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-config: reorder_imports.toml\n+\n+use path::{self /* self */, /* A */ A, B /* B */, C};\n+\n+use {Z, aa, ab, ac, b};"}, {"sha": "372b4f2051f4a6ad9da5f32b82bcd0555b0da5ef", "filename": "tests/target/imports.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/482f200b0b3f7e6b248c38e463bc231c53263199/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=482f200b0b3f7e6b248c38e463bc231c53263199", "patch": "@@ -5,19 +5,30 @@ use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDe\n use exceedingly::looooooooooooooooooooooooooooooooooooooooooooooooooooooooooong::import::path::{ItemA,\n                                                                                                 ItemB};\n \n-use {Foo, Bar};\n+use list::{// Some item\n+           SomeItem, // Comment\n+           // Another item\n+           AnotherItem, // Another Comment\n+           // Last Item\n+           LastItem};\n+\n+use test::{/* A */ self /* B */, Other /* C */};\n+\n+use syntax;\n+use {/* Pre-comment! */ Foo, Bar /* comment */};\n use Foo::{Bar, Baz};\n pub use syntax::ast::{Expr_, Expr, ExprAssign, ExprCall, ExprMethodCall, ExprPath};\n \n mod Foo {\n     pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod, ItemStatic, ItemDefaultImpl};\n \n     mod Foo2 {\n-        pub use syntax::ast::{ItemForeignMod, ItemImpl, ItemMac, ItemMod,\n+        pub use syntax::ast::{self, ItemForeignMod, ItemImpl, ItemMac, ItemMod,\n                               ItemStatic, ItemDefaultImpl};\n     }\n }\n \n fn test() {\n     use Baz::*;\n+    use Qux;\n }"}]}