{"sha": "c14a12edd75ea37f357d81ee73585669ad5c3e5e", "node_id": "C_kwDOAAsO6NoAKGMxNGExMmVkZDc1ZWEzN2YzNTdkODFlZTczNTg1NjY5YWQ1YzNlNWU", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-13T18:13:36Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-13T18:13:36Z"}, "message": "create function", "tree": {"sha": "d517488c3af88fa79673ca368386177292f603c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d517488c3af88fa79673ca368386177292f603c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c14a12edd75ea37f357d81ee73585669ad5c3e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c14a12edd75ea37f357d81ee73585669ad5c3e5e", "html_url": "https://github.com/rust-lang/rust/commit/c14a12edd75ea37f357d81ee73585669ad5c3e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c14a12edd75ea37f357d81ee73585669ad5c3e5e/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff89deb6973be35848380be28c4a23063af8768", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff89deb6973be35848380be28c4a23063af8768", "html_url": "https://github.com/rust-lang/rust/commit/0ff89deb6973be35848380be28c4a23063af8768"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "bdc277e5f476d470092a576019481bf78765e04a", "filename": "crates/ide_assists/src/handlers/generate_delegate.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c14a12edd75ea37f357d81ee73585669ad5c3e5e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14a12edd75ea37f357d81ee73585669ad5c3e5e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate.rs?ref=c14a12edd75ea37f357d81ee73585669ad5c3e5e", "patch": "@@ -1,9 +1,9 @@\n use hir::{self, HasCrate, HirDisplay};\n use stdx::format_to;\n-use syntax::ast::{self, AstNode, HasName, HasVisibility};\n+use syntax::ast::{self, make, AstNode, HasName, HasVisibility};\n \n use crate::{\n-    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text, render_snippet, Cursor},\n     AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n };\n \n@@ -78,17 +78,16 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                     }\n                 };\n \n-                format_to!(\n-                    buf,\n-                    \"{}fn {}(&self) {} {{\n-                    self.{}.{}()\n-                }}\",\n-                    vis,\n-                    method.name(ctx.db()),\n-                    return_type,\n-                    field_name,\n-                    method.name(ctx.db())\n-                );\n+                // make function\n+                let vis = strukt.visibility();\n+                let name = make::name(&method.name(ctx.db()).to_string());\n+                let type_params = None;\n+                let params = make::param_list(None, []);\n+                let body = make::block_expr([], None);\n+                let ret_type = &method.ret_type(ctx.db()).display(ctx.db()).to_string();\n+                let ret_type = Some(make::ret_type(make::ty(ret_type)));\n+                let is_async = false;\n+                let f = make::fn_(vis, name, type_params, params, body, ret_type, is_async);\n \n                 let start_offset = impl_def\n                     .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n@@ -97,7 +96,14 @@ pub(crate) fn generate_delegate(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                         strukt.syntax().text_range().end()\n                     });\n \n-                builder.insert(start_offset, buf);\n+                let cap = ctx.config.snippet_cap.unwrap(); // FIXME.\n+                let cursor = Cursor::Before(f.syntax());\n+\n+                builder.insert_snippet(\n+                    cap,\n+                    start_offset,\n+                    format!(\"\\n\\n{}\", render_snippet(cap, f.syntax(), cursor)),\n+                );\n             },\n         )?;\n     }"}]}