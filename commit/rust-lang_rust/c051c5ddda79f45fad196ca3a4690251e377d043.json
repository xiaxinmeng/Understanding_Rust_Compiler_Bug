{"sha": "c051c5ddda79f45fad196ca3a4690251e377d043", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTFjNWRkZGE3OWY0NWZhZDE5NmNhM2E0NjkwMjUxZTM3N2QwNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-06T17:55:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-06T17:55:55Z"}, "message": "Auto merge of #83934 - Dylan-DPC:rollup-nw5dadn, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #82963 (Move `SharedContext` to `context.rs`)\n - #83829 (rustc_target: Rely on defaults more in target specs)\n - #83895 (Add listing of lints (eg via `-W help`) to rustdoc)\n - #83902 (Update LLVM to support more wasm simd ops)\n - #83903 (Fix typo in TokenStream documentation)\n - #83910 (Update cargo)\n - #83920 (Fix HashMap/HashSet LLDB pretty-printer after hashbrown 0.11.0)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e8e39c4a80806ec010d17fd02412fae00a6ef92b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8e39c4a80806ec010d17fd02412fae00a6ef92b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c051c5ddda79f45fad196ca3a4690251e377d043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c051c5ddda79f45fad196ca3a4690251e377d043", "html_url": "https://github.com/rust-lang/rust/commit/c051c5ddda79f45fad196ca3a4690251e377d043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c051c5ddda79f45fad196ca3a4690251e377d043/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16143d10679537d3fde4247e15334e78ad9d55b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/16143d10679537d3fde4247e15334e78ad9d55b9", "html_url": "https://github.com/rust-lang/rust/commit/16143d10679537d3fde4247e15334e78ad9d55b9"}, {"sha": "3d33818a79143d0e82852c8b2ed68abf6b86c095", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d33818a79143d0e82852c8b2ed68abf6b86c095", "html_url": "https://github.com/rust-lang/rust/commit/3d33818a79143d0e82852c8b2ed68abf6b86c095"}], "stats": {"total": 285, "additions": 137, "deletions": 148}, "files": [{"sha": "1c26668779f6f9760e12ee052494056a8bb31e06", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -178,7 +178,7 @@ impl<CTX> HashStable<CTX> for LazyTokenStream {\n /// The goal is for procedural macros to work with `TokenStream`s and `TokenTree`s\n /// instead of a representation of the abstract syntax tree.\n /// Today's `TokenTree`s can still contain AST via `token::Interpolated` for\n-/// backwards compatability.\n+/// backwards compatibility.\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);\n "}, {"sha": "51699403a3705dd0d77321da2d1c309bcad6192b", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -845,7 +845,8 @@ the command line flag directly.\n     );\n }\n \n-fn describe_lints(sess: &Session, lint_store: &LintStore, loaded_plugins: bool) {\n+/// Write to stdout lint command options, together with a list of all available lints\n+pub fn describe_lints(sess: &Session, lint_store: &LintStore, loaded_plugins: bool) {\n     println!(\n         \"\n Available lint options:"}, {"sha": "6fa0b34545097bc7d6e21afc4aa64a0e18afcab4", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,6 +1,6 @@\n use std::env;\n \n-use crate::spec::{LinkArgs, SplitDebuginfo, TargetOptions};\n+use crate::spec::{SplitDebuginfo, TargetOptions};\n \n pub fn opts(os: &str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n@@ -27,10 +27,8 @@ pub fn opts(os: &str) -> TargetOptions {\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         has_rpath: true,\n-        dll_prefix: \"lib\".to_string(),\n         dll_suffix: \".dylib\".to_string(),\n         archive_format: \"darwin\".to_string(),\n-        pre_link_args: LinkArgs::new(),\n         has_elf_tls: version >= (10, 7),\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,"}, {"sha": "f6fe88de37cf6958cf4dc279bd6c9f7f5573f36d", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "5f0f47dd39776517d534e4c2c8187335a2eb87bf", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "c888fc2d4a389f9fe70345ba58d40d771879ff26", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -18,7 +18,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "2432ea519a8ecf8e58cb3ae36bd33aad32599d84", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n         // target.\n         options: TargetOptions {\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "4fae3a8d0bf45b8060554d332734960e36b40bcb", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -11,7 +11,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             env: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"__mcount\".to_string(),"}, {"sha": "9fe7098a85f00c42c37ed3f7808ad7211ad387ce", "filename": "compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -10,7 +10,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base"}, {"sha": "69ccce875ab0c97016db677ba9968f4ffd0999e5", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -15,11 +15,8 @@ pub fn target(target_cpu: String) -> Target {\n             exe_suffix: \".elf\".to_string(),\n \n             linker: Some(\"avr-gcc\".to_owned()),\n-            dynamic_linking: false,\n             executables: true,\n             linker_is_gnu: true,\n-            has_rpath: false,\n-            position_independent_executables: false,\n             eh_frame_header: false,\n             pre_link_args: vec![(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu)])]\n                 .into_iter()"}, {"sha": "2b925f8b946c4a62908e070617c57dcf47fc6131", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -23,13 +23,11 @@ pub fn opts() -> TargetOptions {\n         os: \"fuchsia\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n-        lld_flavor: LldFlavor::Ld,\n         dynamic_linking: true,\n         executables: true,\n         os_family: Some(\"unix\".to_string()),\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n-        has_rpath: false,\n         pre_link_args,\n         pre_link_objects: crt_objects::new(&[\n             (LinkOutputKind::DynamicNoPicExe, &[\"Scrt1.o\"]),"}, {"sha": "956e4ed4bf9c838e792928b2d0e8216635c7fb6d", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -5,7 +5,6 @@ pub fn opts() -> TargetOptions {\n         os: \"haiku\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        has_rpath: false,\n         os_family: Some(\"unix\".to_string()),\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,"}, {"sha": "ad013047e6a13e7b01a28f5bb5060dc59852d1f7", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy};\n-use crate::spec::{RelocModel, TargetOptions, TlsModel};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -19,8 +18,6 @@ pub fn opts() -> TargetOptions {\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n-        relocation_model: RelocModel::Pic,\n-        os_family: None,\n         tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }"}, {"sha": "6d18a14d6aec0ef77a2ed2f1408437ab4a76b641", "filename": "compiler/rustc_target/src/spec/hermit_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,5 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy};\n-use crate::spec::{RelocModel, TargetOptions, TlsModel};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -20,8 +19,6 @@ pub fn opts() -> TargetOptions {\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n-        relocation_model: RelocModel::Pic,\n-        os_family: None,\n         tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }"}, {"sha": "e0097ee220a464c39d189c48c7009db094831519", "filename": "compiler/rustc_target/src/spec/hexagon_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhexagon_unknown_linux_musl.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, Target};\n+use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -8,15 +8,11 @@ pub fn target() -> Target {\n     base.features = \"-small-data,+hvx-length128b\".to_string();\n \n     base.crt_static_default = false;\n-    base.atomic_cas = true;\n     base.has_rpath = true;\n     base.linker_is_gnu = false;\n     base.dynamic_linking = true;\n     base.executables = true;\n \n-    base.pre_link_args = LinkArgs::new();\n-    base.post_link_args = LinkArgs::new();\n-\n     Target {\n         llvm_target: \"hexagon-unknown-linux-musl\".to_string(),\n         pointer_width: 32,"}, {"sha": "db6b74eff6dbd039208b3dd1a883799d93cef670", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n //use std::process::Command;\n \n // Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n@@ -13,18 +13,13 @@ use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n //}\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Gcc, vec![]);\n-\n     TargetOptions {\n         os: \"l4re\".to_string(),\n         env: \"uclibc\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,\n         executables: true,\n-        has_elf_tls: false,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"ld\".to_string()),\n-        pre_link_args: args,\n         os_family: Some(\"unix\".to_string()),\n         ..Default::default()\n     }"}, {"sha": "88a22f25ff47be86adaa69c675d8ca33f80eb337", "filename": "compiler/rustc_target/src/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             cpu: \"generic-rv32\".to_string(),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n-            features: String::new(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,"}, {"sha": "b406eec1e75024d9194bb0743f127a3198849a9b", "filename": "compiler/rustc_target/src/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv32\".to_string(),\n             max_atomic_width: Some(32),\n-            atomic_cas: true,\n             features: \"+m,+a,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "481bce05a08e52208475ffddb4c496441e5acfe3", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> Target {\n             llvm_abiname: \"lp64d\".to_string(),\n             cpu: \"generic-rv64\".to_string(),\n             max_atomic_width: Some(64),\n-            atomic_cas: true,\n             features: \"+m,+a,+f,+d,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "3e4afd446dda9eda19c81e1684a00b1cc38f152a", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -13,7 +13,6 @@ pub fn target() -> Target {\n             linker: Some(\"rust-lld\".to_string()),\n             cpu: \"generic-rv64\".to_string(),\n             max_atomic_width: Some(64),\n-            atomic_cas: true,\n             features: \"+m,+a,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,"}, {"sha": "ef58824f38108d252519ed48f32cd18054c90e85", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -45,9 +45,6 @@ pub fn target() -> Target {\n \n             main_needs_argc_argv: false,\n \n-            // No thread-local storage (just use a static Cell)\n-            has_elf_tls: false,\n-\n             // don't have atomic compare-and-swap\n             atomic_cas: false,\n             has_thumb_interworking: true,"}, {"sha": "1232daa577f233a3a1dfe430c108d6e105dbb3f2", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -29,7 +29,6 @@ pub fn target() -> Target {\n \n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base"}, {"sha": "e6a59f015c9935d8be0b94d209cc05412cdfadea", "filename": "compiler/rustc_target/src/spec/thumbv7a_uwp_windows_msvc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n             features: \"+vfp3,+neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base\n         },"}, {"sha": "12d816d095b689e1ce92db232ec7b85aa30f8d87", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -17,7 +17,6 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             ..base"}, {"sha": "020de87147cb688c62a55d8f958c00516b2e0b57", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -21,7 +21,6 @@ pub fn target() -> Target {\n         // target.\n         options: TargetOptions {\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n-            cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n             mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "41c4d7625af2a854015faf0efead054148f2e19e", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -12,7 +12,6 @@ pub fn opts() -> TargetOptions {\n         os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        position_independent_executables: false,\n         has_elf_tls: true,\n         crt_static_default: true,\n         crt_static_respected: true,"}, {"sha": "b208eb92f8ff96eef6d2bf4b09e2c1b8352d514d", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -75,7 +75,6 @@ pub fn options() -> TargetOptions {\n         exe_suffix: \".wasm\".to_string(),\n         dll_prefix: String::new(),\n         dll_suffix: \".wasm\".to_string(),\n-        linker_is_gnu: false,\n         eh_frame_header: false,\n \n         max_atomic_width: Some(64),"}, {"sha": "478c567a93b2523ce7ab008ddeba1a081cf75996", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -71,8 +71,6 @@ pub fn opts() -> TargetOptions {\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: \"lib\".to_string(),\n-        staticlib_suffix: \".a\".to_string(),\n         os_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,"}, {"sha": "90705c526f4b2add8eb7e09b14886ec5c94141e9", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,6 +1,6 @@\n use std::iter;\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     const PRE_LINK_ARGS: &[&str] = &[\n@@ -56,12 +56,10 @@ pub fn target() -> Target {\n         env: \"sgx\".into(),\n         vendor: \"fortanix\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n-        dynamic_linking: false,\n         executables: true,\n         linker_is_gnu: true,\n         linker: Some(\"rust-lld\".to_owned()),\n         max_atomic_width: Some(64),\n-        panic_strategy: PanicStrategy::Unwind,\n         cpu: \"x86-64\".into(),\n         features: \"+rdrnd,+rdseed,+lvi-cfi,+lvi-load-hardening\".into(),\n         llvm_args: vec![\"--x86-experimental-lvi-inline-asm-hardening\".into()],"}, {"sha": "86dcc335e3cbfdcf2daab64d64fe5810b22f1cbd", "filename": "src/etc/lldb_providers.py", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Fetc%2Flldb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Fetc%2Flldb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_providers.py?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -527,20 +527,22 @@ def get_child_at_index(self, index):\n     def update(self):\n         # type: () -> None\n         table = self.table()\n-        capacity = table.GetChildMemberWithName(\"bucket_mask\").GetValueAsUnsigned() + 1\n-        ctrl = table.GetChildMemberWithName(\"ctrl\").GetChildAtIndex(0)\n+        inner_table = table.GetChildMemberWithName(\"table\")\n \n-        self.size = table.GetChildMemberWithName(\"items\").GetValueAsUnsigned()\n+        capacity = inner_table.GetChildMemberWithName(\"bucket_mask\").GetValueAsUnsigned() + 1\n+        ctrl = inner_table.GetChildMemberWithName(\"ctrl\").GetChildAtIndex(0)\n+\n+        self.size = inner_table.GetChildMemberWithName(\"items\").GetValueAsUnsigned()\n         self.pair_type = table.type.template_args[0]\n         if self.pair_type.IsTypedefType():\n             self.pair_type = self.pair_type.GetTypedefedType()\n         self.pair_type_size = self.pair_type.GetByteSize()\n \n-        self.new_layout = not table.GetChildMemberWithName(\"data\").IsValid()\n+        self.new_layout = not inner_table.GetChildMemberWithName(\"data\").IsValid()\n         if self.new_layout:\n             self.data_ptr = ctrl.Cast(self.pair_type.GetPointerType())\n         else:\n-            self.data_ptr = table.GetChildMemberWithName(\"data\").GetChildAtIndex(0)\n+            self.data_ptr = inner_table.GetChildMemberWithName(\"data\").GetChildAtIndex(0)\n \n         u8_type = self.valobj.GetTarget().GetBasicType(eBasicTypeUnsignedChar)\n         u8_type_size = self.valobj.GetTarget().GetBasicType(eBasicTypeUnsignedChar).GetByteSize()\n@@ -563,7 +565,7 @@ def table(self):\n             # HashSet wraps either std HashMap or hashbrown::HashSet, which both\n             # wrap hashbrown::HashMap, so either way we \"unwrap\" twice.\n             hashbrown_hashmap = self.valobj.GetChildAtIndex(0).GetChildAtIndex(0)\n-        return hashbrown_hashmap.GetChildMemberWithName(\"table\").GetChildMemberWithName(\"table\")\n+        return hashbrown_hashmap.GetChildMemberWithName(\"table\")\n \n     def has_children(self):\n         # type: () -> bool"}, {"sha": "c374e1f8d102cc8473848a8d54085052480c0de1", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -97,8 +97,7 @@ crate struct Options {\n     crate maybe_sysroot: Option<PathBuf>,\n     /// Lint information passed over the command-line.\n     crate lint_opts: Vec<(String, Level)>,\n-    /// Whether to ask rustc to describe the lints it knows. Practically speaking, this will not be\n-    /// used, since we abort if we have no input file, but it's included for completeness.\n+    /// Whether to ask rustc to describe the lints it knows.\n     crate describe_lints: bool,\n     /// What level to cap lints at.\n     crate lint_cap: Option<Level>,"}, {"sha": "df5ff6e106d7c966567d23a051dbe5394b693a59", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1,11 +1,11 @@\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::io;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::rc::Rc;\n-use std::sync::mpsc::channel;\n+use std::sync::mpsc::{channel, Receiver};\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n@@ -16,10 +16,7 @@ use rustc_span::{symbol::sym, Symbol};\n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n-use super::{\n-    print_sidebar, settings, AllTypes, NameDoc, SharedContext, StylePath, BASIC_KEYWORDS,\n-    CURRENT_DEPTH,\n-};\n+use super::{print_sidebar, settings, AllTypes, NameDoc, StylePath, BASIC_KEYWORDS, CURRENT_DEPTH};\n \n use crate::clean::{self, AttributesExt};\n use crate::config::RenderOptions;\n@@ -78,6 +75,74 @@ crate struct Context<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n rustc_data_structures::static_assert_size!(Context<'_>, 152);\n \n+/// Shared mutable state used in [`Context`] and elsewhere.\n+crate struct SharedContext<'tcx> {\n+    crate tcx: TyCtxt<'tcx>,\n+    /// The path to the crate root source minus the file name.\n+    /// Used for simplifying paths to the highlighted source code files.\n+    crate src_root: PathBuf,\n+    /// This describes the layout of each page, and is not modified after\n+    /// creation of the context (contains info like the favicon and added html).\n+    crate layout: layout::Layout,\n+    /// This flag indicates whether `[src]` links should be generated or not. If\n+    /// the source files are present in the html rendering, then this will be\n+    /// `true`.\n+    crate include_sources: bool,\n+    /// The local file sources we've emitted and their respective url-paths.\n+    crate local_sources: FxHashMap<PathBuf, String>,\n+    /// Whether the collapsed pass ran\n+    collapsed: bool,\n+    /// The base-URL of the issue tracker for when an item has been tagged with\n+    /// an issue number.\n+    pub(super) issue_tracker_base_url: Option<String>,\n+    /// The directories that have already been created in this doc run. Used to reduce the number\n+    /// of spurious `create_dir_all` calls.\n+    created_dirs: RefCell<FxHashSet<PathBuf>>,\n+    /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n+    /// should be ordered alphabetically or in order of appearance (in the source code).\n+    pub(super) sort_modules_alphabetically: bool,\n+    /// Additional CSS files to be added to the generated docs.\n+    crate style_files: Vec<StylePath>,\n+    /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n+    /// \"light-v2.css\").\n+    crate resource_suffix: String,\n+    /// Optional path string to be used to load static files on output pages. If not set, uses\n+    /// combinations of `../` to reach the documentation root.\n+    crate static_root_path: Option<String>,\n+    /// The fs handle we are working with.\n+    crate fs: DocFS,\n+    /// The default edition used to parse doctests.\n+    crate edition: Edition,\n+    pub(super) codes: ErrorCodes,\n+    pub(super) playground: Option<markdown::Playground>,\n+    all: RefCell<AllTypes>,\n+    /// Storage for the errors produced while generating documentation so they\n+    /// can be printed together at the end.\n+    errors: Receiver<String>,\n+    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n+    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n+    /// the crate.\n+    redirections: Option<RefCell<FxHashMap<String, String>>>,\n+}\n+\n+impl SharedContext<'_> {\n+    crate fn ensure_dir(&self, dst: &Path) -> Result<(), Error> {\n+        let mut dirs = self.created_dirs.borrow_mut();\n+        if !dirs.contains(dst) {\n+            try_err!(self.fs.create_dir_all(dst), dst);\n+            dirs.insert(dst.to_path_buf());\n+        }\n+\n+        Ok(())\n+    }\n+\n+    /// Based on whether the `collapse-docs` pass was run, return either the `doc_value` or the\n+    /// `collapsed_doc_value` of the given item.\n+    crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n+        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n+    }\n+}\n+\n impl<'tcx> Context<'tcx> {\n     pub(super) fn tcx(&self) -> TyCtxt<'tcx> {\n         self.shared.tcx"}, {"sha": "fbe799e718482e7792a6d1c8cf5306d818709935", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 76, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -35,32 +35,30 @@ mod write_shared;\n crate use context::*;\n crate use write_shared::FILES_UNVERSIONED;\n \n-use std::cell::{Cell, RefCell};\n+use std::cell::Cell;\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n-use std::sync::mpsc::Receiver;\n \n use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{Deprecation, StabilityLevel};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::edition::Edition;\n use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, GetDefId, RenderedLink, SelfTy, TypeKind};\n-use crate::docfs::{DocFS, PathError};\n+use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -70,8 +68,7 @@ use crate::html::format::{\n     href, print_abi_with_space, print_default_space, print_generic_bounds, print_where_clause,\n     Buffer, PrintWithSpace,\n };\n-use crate::html::layout;\n-use crate::html::markdown::{self, ErrorCodes, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -82,74 +79,6 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     })\n }\n \n-/// Shared mutable state used in [`Context`] and elsewhere.\n-crate struct SharedContext<'tcx> {\n-    crate tcx: TyCtxt<'tcx>,\n-    /// The path to the crate root source minus the file name.\n-    /// Used for simplifying paths to the highlighted source code files.\n-    crate src_root: PathBuf,\n-    /// This describes the layout of each page, and is not modified after\n-    /// creation of the context (contains info like the favicon and added html).\n-    crate layout: layout::Layout,\n-    /// This flag indicates whether `[src]` links should be generated or not. If\n-    /// the source files are present in the html rendering, then this will be\n-    /// `true`.\n-    crate include_sources: bool,\n-    /// The local file sources we've emitted and their respective url-paths.\n-    crate local_sources: FxHashMap<PathBuf, String>,\n-    /// Whether the collapsed pass ran\n-    collapsed: bool,\n-    /// The base-URL of the issue tracker for when an item has been tagged with\n-    /// an issue number.\n-    issue_tracker_base_url: Option<String>,\n-    /// The directories that have already been created in this doc run. Used to reduce the number\n-    /// of spurious `create_dir_all` calls.\n-    created_dirs: RefCell<FxHashSet<PathBuf>>,\n-    /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n-    /// should be ordered alphabetically or in order of appearance (in the source code).\n-    sort_modules_alphabetically: bool,\n-    /// Additional CSS files to be added to the generated docs.\n-    crate style_files: Vec<StylePath>,\n-    /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n-    /// \"light-v2.css\").\n-    crate resource_suffix: String,\n-    /// Optional path string to be used to load static files on output pages. If not set, uses\n-    /// combinations of `../` to reach the documentation root.\n-    crate static_root_path: Option<String>,\n-    /// The fs handle we are working with.\n-    crate fs: DocFS,\n-    /// The default edition used to parse doctests.\n-    crate edition: Edition,\n-    codes: ErrorCodes,\n-    playground: Option<markdown::Playground>,\n-    all: RefCell<AllTypes>,\n-    /// Storage for the errors produced while generating documentation so they\n-    /// can be printed together at the end.\n-    errors: Receiver<String>,\n-    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n-    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n-    /// the crate.\n-    redirections: Option<RefCell<FxHashMap<String, String>>>,\n-}\n-\n-impl SharedContext<'_> {\n-    crate fn ensure_dir(&self, dst: &Path) -> Result<(), Error> {\n-        let mut dirs = self.created_dirs.borrow_mut();\n-        if !dirs.contains(dst) {\n-            try_err!(self.fs.create_dir_all(dst), dst);\n-            dirs.insert(dst.to_path_buf());\n-        }\n-\n-        Ok(())\n-    }\n-\n-    /// Based on whether the `collapse-docs` pass was run, return either the `doc_value` or the\n-    /// `collapsed_doc_value` of the given item.\n-    crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n-        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n-    }\n-}\n-\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n "}, {"sha": "241aa1f12df7e5e61d4e29265237915a53b1ae80", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -74,7 +74,7 @@ use std::default::Default;\n use std::env;\n use std::process;\n \n-use rustc_driver::abort_on_err;\n+use rustc_driver::{abort_on_err, describe_lints};\n use rustc_errors::ErrorReported;\n use rustc_interface::interface;\n use rustc_middle::ty::TyCtxt;\n@@ -705,6 +705,12 @@ fn main_options(options: config::Options) -> MainResult {\n         compiler.enter(|queries| {\n             let sess = compiler.session();\n \n+            if sess.opts.describe_lints {\n+                let (_, lint_store) = &*queries.register_plugins()?.peek();\n+                describe_lints(sess, lint_store, true);\n+                return Ok(());\n+            }\n+\n             // We need to hold on to the complete resolver, so we cause everything to be\n             // cloned for the analysis passes to use. Suboptimal, but necessary in the\n             // current architecture."}, {"sha": "171991e30966695fd118c90ebbb2eeec5098ccce", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1 +1 @@\n-Subproject commit 0abbcc04d8375661a0637896b9ae5dc37a99dc70\n+Subproject commit 171991e30966695fd118c90ebbb2eeec5098ccce"}, {"sha": "a261b782d48593aa4e68122f88a07e4c96fed15c", "filename": "src/test/rustdoc-ui/issue-83883-describe-lints.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.rs?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -W help\n+// check-pass\n+//\n+// ignore-tidy-linelength\n+//\n+// normalize-stdout-test: \"( +name  default  meaning\\n +----  -------  -------\\n)?( *[[:word:]:-]+  (allow  |warn   |deny   |forbid )  [^\\n]+\\n)+\" -> \"    $$NAMES  $$LEVELS  $$MEANINGS\"\n+// normalize-stdout-test: \" +name  sub-lints\\n +----  ---------\\n( *[[:word:]:-]+  [^\\n]+\\n)+\" -> \"    $$NAMES  $$SUB_LINTS\"\n+// normalize-stdout-test: \" +rustdoc::all(  (rustdoc::[[:word:]-]+, )*rustdoc::[[:word:]-]+)?\" -> \"    rustdoc::all  $$GROUPS$4\""}, {"sha": "651faf5761f18ff22b94fbc07ecdfb298efcfa9b", "filename": "src/test/rustdoc-ui/issue-83883-describe-lints.stdout", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c051c5ddda79f45fad196ca3a4690251e377d043/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -0,0 +1,25 @@\n+\n+Available lint options:\n+    -W <foo>           Warn about <foo>\n+    -A <foo>           Allow <foo>\n+    -D <foo>           Deny <foo>\n+    -F <foo>           Forbid <foo> (deny <foo> and all attempts to override)\n+\n+\n+Lint checks provided by rustc:\n+\n+    $NAMES  $LEVELS  $MEANINGS\n+\n+Lint groups provided by rustc:\n+\n+    $NAMES  $SUB_LINTS\n+\n+Lint checks provided by plugins loaded by this crate:\n+\n+    $NAMES  $LEVELS  $MEANINGS\n+\n+Lint groups provided by plugins loaded by this crate:\n+\n+    rustdoc::all  $GROUPS\n+\n+"}, {"sha": "65d57e6f384c2317f76626eac116f683e2b63665", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=c051c5ddda79f45fad196ca3a4690251e377d043", "patch": "@@ -1 +1 @@\n-Subproject commit 3c44c3c4b7900b8b13c85ead25ccaa8abb7d8989\n+Subproject commit 65d57e6f384c2317f76626eac116f683e2b63665"}]}