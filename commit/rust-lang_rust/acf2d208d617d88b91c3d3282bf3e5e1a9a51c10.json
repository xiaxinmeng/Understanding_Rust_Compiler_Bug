{"sha": "acf2d208d617d88b91c3d3282bf3e5e1a9a51c10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjJkMjA4ZDYxN2Q4OGI5MWMzZDMyODJiZjNlNWUxYTlhNTFjMTA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-18T19:27:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-18T21:51:20Z"}, "message": "core: add previous-handler save and restore for proper nesting.", "tree": {"sha": "999434051977cee282d4cb6dd84e2e980dfd2b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/999434051977cee282d4cb6dd84e2e980dfd2b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf2d208d617d88b91c3d3282bf3e5e1a9a51c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf2d208d617d88b91c3d3282bf3e5e1a9a51c10", "html_url": "https://github.com/rust-lang/rust/commit/acf2d208d617d88b91c3d3282bf3e5e1a9a51c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf2d208d617d88b91c3d3282bf3e5e1a9a51c10/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "754704ea9442ce92602f8022f6c979824b016842", "url": "https://api.github.com/repos/rust-lang/rust/commits/754704ea9442ce92602f8022f6c979824b016842", "html_url": "https://github.com/rust-lang/rust/commit/754704ea9442ce92602f8022f6c979824b016842"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "b82f60a9c77ef59fd5a29207d80f8d40f608fa79", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 78, "deletions": 16, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/acf2d208d617d88b91c3d3282bf3e5e1a9a51c10/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf2d208d617d88b91c3d3282bf3e5e1a9a51c10/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=acf2d208d617d88b91c3d3282bf3e5e1a9a51c10", "patch": "@@ -6,9 +6,8 @@ struct Condition {\n }\n \n struct Handler {\n-    // Handler should link to previous handler and\n-    // reinstall it when popped.\n-    handle: RustClosure\n+    handle: RustClosure,\n+    prev: Option<@Handler>\n }\n \n \n@@ -21,7 +20,17 @@ struct PopHandler {\n     cond: &Condition,\n     drop {\n         unsafe {\n-            task::local_data::local_data_pop(self.cond.key);\n+            debug!(\"PopHandler: popping handler from TLS\");\n+            match task::local_data::local_data_pop(self.cond.key) {\n+                None => (),\n+                Some(h) => {\n+                    match h.prev {\n+                        None => (),\n+                        Some(p) =>\n+                        task::local_data::local_data_set(self.cond.key, p)\n+                    }\n+                }\n+            }\n         }\n     }\n }\n@@ -31,23 +40,28 @@ struct HandleBlock {\n     handler: @Handler,\n     drop {\n         unsafe {\n+            debug!(\"HandleBlock: pushing handler to TLS\");\n             task::local_data::local_data_set(self.pb.cond.key,\n                                              self.handler);\n             let _pop = PopHandler { cond: self.pb.cond };\n             // transmutation to avoid copying non-copyable, should\n             // be fixable by tracking closure pointees in regionck.\n             let f : &fn() = ::cast::transmute(self.pb.inner);\n+            debug!(\"HandleBlock: invoking protected code\");\n             f();\n+            debug!(\"HandleBlock: returned from protected code\");\n         }\n     }\n }\n \n impl ProtectBlock {\n     fn handle<T, U: Copy>(&self, h: &self/fn(&T) ->U) -> HandleBlock/&self {\n         unsafe {\n+            debug!(\"ProtectBlock.handle: setting up handler block\");\n             let p : *RustClosure = ::cast::transmute(&h);\n+            let prev = task::local_data::local_data_get(self.cond.key);\n             HandleBlock { pb: self,\n-                          handler: @Handler{handle: *p} }\n+                          handler: @Handler{handle: *p, prev: prev} }\n         }\n     }\n }\n@@ -59,17 +73,23 @@ impl Condition {\n         unsafe {\n             // transmutation to avoid copying non-copyable, should\n             // be fixable by tracking closure pointees in regionck.\n+            debug!(\"Condition.protect: setting up protected block\");\n             let p : *RustClosure = ::cast::transmute(&inner);\n             ProtectBlock { cond: self,\n-                           inner: *p } }\n+                           inner: *p }\n+        }\n     }\n \n     fn raise<T, U: Copy>(t:&T) -> U {\n         unsafe {\n             match task::local_data::local_data_get(self.key) {\n-                None => fail,\n+                None => {\n+                    debug!(\"Condition.raise: found no handler\");\n+                    fail\n+                }\n+\n                 Some(handler) => {\n-                    io::println(\"got handler\");\n+                    debug!(\"Condition.raise: found handler\");\n                     let f : &fn(&T) -> U = ::cast::transmute(handler.handle);\n                     f(t)\n                 }\n@@ -79,39 +99,81 @@ impl Condition {\n }\n \n \n-#[test]\n+#[cfg(test)]\n fn happiness_key(_x: @Handler) { }\n \n-#[test]\n+#[cfg(test)]\n fn sadness_key(_x: @Handler) { }\n \n-#[test]\n+#[cfg(test)]\n fn trouble(i: int) {\n     // Condition should work as a const, just limitations in consts.\n     let sadness_condition : Condition = Condition { key: sadness_key };\n-    io::println(\"raising\");\n+    debug!(\"trouble: raising conition\");\n     let j = sadness_condition.raise(&i);\n-    io::println(fmt!(\"handler recovered with %d\", j));\n+    debug!(\"trouble: handler recovered with %d\", j);\n }\n \n #[test]\n-fn test() {\n+fn test1() {\n \n     let sadness_condition : Condition = Condition { key: sadness_key };\n \n     let mut i = 10;\n \n     let b = do sadness_condition.protect {\n-        io::println(\"in protected block\");\n+        debug!(\"test1: in protected block\");\n         trouble(1);\n         trouble(2);\n         trouble(3);\n     };\n \n     do b.handle |j| {\n+        debug!(\"test1: in handler\");\n         i += *j;\n         i\n     };\n \n     assert i == 16;\n-}\n\\ No newline at end of file\n+}\n+#[cfg(test)]\n+fn nested_test_inner() {\n+    let sadness_condition : Condition = Condition { key: sadness_key };\n+\n+    let mut inner_trapped = false;\n+\n+    let b = do sadness_condition.protect {\n+        debug!(\"nested_test_inner: in protected block\");\n+        trouble(1);\n+    };\n+\n+    do b.handle |_j:&int| {\n+        debug!(\"nested_test_inner: in handler\");\n+        inner_trapped = true;\n+        0\n+    };\n+\n+    assert inner_trapped;\n+}\n+\n+#[test]\n+fn nested_test_outer() {\n+\n+    let sadness_condition : Condition = Condition { key: sadness_key };\n+\n+    let mut outer_trapped = false;\n+\n+    let b = do sadness_condition.protect {\n+        debug!(\"nested_test_outer: in protected block\");\n+        nested_test_inner();\n+        trouble(1);\n+    };\n+\n+    do b.handle |_j:&int| {\n+        debug!(\"nested_test_outer: in handler\");\n+        outer_trapped = true;\n+        0\n+    };\n+\n+    assert outer_trapped;\n+}"}]}