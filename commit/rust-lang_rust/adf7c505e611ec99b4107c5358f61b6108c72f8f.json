{"sha": "adf7c505e611ec99b4107c5358f61b6108c72f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjdjNTA1ZTYxMWVjOTliNDEwN2M1MzU4ZjYxYjYxMDhjNzJmOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-16T20:51:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-16T20:51:56Z"}, "message": "Auto merge of #5476 - ThibsG:FixMatchesInExternalMacros, r=flip1995\n\nDo not lint in macros for match lints\n\nDon't lint in macros for match lints, more precisely in `check_pat` and `check_local` where it was not the case.\n\nchangelog: none\n\nfixes: #5362", "tree": {"sha": "975b6961b01967388531b41196a2171b029e840e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975b6961b01967388531b41196a2171b029e840e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf7c505e611ec99b4107c5358f61b6108c72f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf7c505e611ec99b4107c5358f61b6108c72f8f", "html_url": "https://github.com/rust-lang/rust/commit/adf7c505e611ec99b4107c5358f61b6108c72f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf7c505e611ec99b4107c5358f61b6108c72f8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6b6ab8a1c30663f99624e172d3329a54e51991", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6b6ab8a1c30663f99624e172d3329a54e51991", "html_url": "https://github.com/rust-lang/rust/commit/2f6b6ab8a1c30663f99624e172d3329a54e51991"}, {"sha": "7fb94c2ac9d5031f49eb19bbd6f756291068a884", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb94c2ac9d5031f49eb19bbd6f756291068a884", "html_url": "https://github.com/rust-lang/rust/commit/7fb94c2ac9d5031f49eb19bbd6f756291068a884"}], "stats": {"total": 136, "additions": 119, "deletions": 17}, "files": [{"sha": "bfd97689d2dba20179b6b8a68aaec4a5a00a930c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -389,6 +389,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n \n     fn check_local(&mut self, cx: &LateContext<'a, 'tcx>, local: &'tcx Local<'_>) {\n         if_chain! {\n+            if !in_external_macro(cx.sess(), local.span);\n+            if !in_macro(local.span);\n             if let Some(ref expr) = local.init;\n             if let ExprKind::Match(ref target, ref arms, MatchSource::Normal) = expr.kind;\n             if arms.len() == 1 && arms[0].guard.is_none();\n@@ -423,6 +425,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n \n     fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat<'_>) {\n         if_chain! {\n+            if !in_external_macro(cx.sess(), pat.span);\n+            if !in_macro(pat.span);\n             if let PatKind::Struct(ref qpath, fields, true) = pat.kind;\n             if let QPath::Resolved(_, ref path) = qpath;\n             if let Some(def_id) = path.res.opt_def_id();"}, {"sha": "b8e40d995531aeb43c3c021716336450cf3d44d7", "filename": "tests/ui/infallible_destructuring_match.fixed", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Finfallible_destructuring_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Finfallible_destructuring_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.fixed?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -11,12 +11,23 @@ struct TupleStruct(i32);\n \n enum EmptyEnum {}\n \n+macro_rules! match_enum {\n+    ($param:expr) => {\n+        let data = match $param {\n+            SingleVariantEnum::Variant(i) => i,\n+        };\n+    };\n+}\n+\n fn infallible_destructuring_match_enum() {\n     let wrapper = SingleVariantEnum::Variant(0);\n \n     // This should lint!\n     let SingleVariantEnum::Variant(data) = wrapper;\n \n+    // This shouldn't (inside macro)\n+    match_enum!(wrapper);\n+\n     // This shouldn't!\n     let data = match wrapper {\n         SingleVariantEnum::Variant(_) => -1,\n@@ -30,12 +41,23 @@ fn infallible_destructuring_match_enum() {\n     let SingleVariantEnum::Variant(data) = wrapper;\n }\n \n+macro_rules! match_struct {\n+    ($param:expr) => {\n+        let data = match $param {\n+            TupleStruct(i) => i,\n+        };\n+    };\n+}\n+\n fn infallible_destructuring_match_struct() {\n     let wrapper = TupleStruct(0);\n \n     // This should lint!\n     let TupleStruct(data) = wrapper;\n \n+    // This shouldn't (inside macro)\n+    match_struct!(wrapper);\n+\n     // This shouldn't!\n     let data = match wrapper {\n         TupleStruct(_) => -1,\n@@ -49,12 +71,23 @@ fn infallible_destructuring_match_struct() {\n     let TupleStruct(data) = wrapper;\n }\n \n+macro_rules! match_never_enum {\n+    ($param:expr) => {\n+        let data = match $param {\n+            Ok(i) => i,\n+        };\n+    };\n+}\n+\n fn never_enum() {\n     let wrapper: Result<i32, !> = Ok(23);\n \n     // This should lint!\n     let Ok(data) = wrapper;\n \n+    // This shouldn't (inside macro)\n+    match_never_enum!(wrapper);\n+\n     // This shouldn't!\n     let data = match wrapper {\n         Ok(_) => -1,"}, {"sha": "106cd438b90e79e1b0dd28c41c8b0bf3cc1e576d", "filename": "tests/ui/infallible_destructuring_match.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.rs?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -11,6 +11,14 @@ struct TupleStruct(i32);\n \n enum EmptyEnum {}\n \n+macro_rules! match_enum {\n+    ($param:expr) => {\n+        let data = match $param {\n+            SingleVariantEnum::Variant(i) => i,\n+        };\n+    };\n+}\n+\n fn infallible_destructuring_match_enum() {\n     let wrapper = SingleVariantEnum::Variant(0);\n \n@@ -19,6 +27,9 @@ fn infallible_destructuring_match_enum() {\n         SingleVariantEnum::Variant(i) => i,\n     };\n \n+    // This shouldn't (inside macro)\n+    match_enum!(wrapper);\n+\n     // This shouldn't!\n     let data = match wrapper {\n         SingleVariantEnum::Variant(_) => -1,\n@@ -32,6 +43,14 @@ fn infallible_destructuring_match_enum() {\n     let SingleVariantEnum::Variant(data) = wrapper;\n }\n \n+macro_rules! match_struct {\n+    ($param:expr) => {\n+        let data = match $param {\n+            TupleStruct(i) => i,\n+        };\n+    };\n+}\n+\n fn infallible_destructuring_match_struct() {\n     let wrapper = TupleStruct(0);\n \n@@ -40,6 +59,9 @@ fn infallible_destructuring_match_struct() {\n         TupleStruct(i) => i,\n     };\n \n+    // This shouldn't (inside macro)\n+    match_struct!(wrapper);\n+\n     // This shouldn't!\n     let data = match wrapper {\n         TupleStruct(_) => -1,\n@@ -53,6 +75,14 @@ fn infallible_destructuring_match_struct() {\n     let TupleStruct(data) = wrapper;\n }\n \n+macro_rules! match_never_enum {\n+    ($param:expr) => {\n+        let data = match $param {\n+            Ok(i) => i,\n+        };\n+    };\n+}\n+\n fn never_enum() {\n     let wrapper: Result<i32, !> = Ok(23);\n \n@@ -61,6 +91,9 @@ fn never_enum() {\n         Ok(i) => i,\n     };\n \n+    // This shouldn't (inside macro)\n+    match_never_enum!(wrapper);\n+\n     // This shouldn't!\n     let data = match wrapper {\n         Ok(_) => -1,"}, {"sha": "1b78db42014a2c5a3f493955138680a614780b5c", "filename": "tests/ui/infallible_destructuring_match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Finfallible_destructuring_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Finfallible_destructuring_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.stderr?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:18:5\n+  --> $DIR/infallible_destructuring_match.rs:26:5\n    |\n LL | /     let data = match wrapper {\n LL | |         SingleVariantEnum::Variant(i) => i,\n@@ -9,15 +9,15 @@ LL | |     };\n    = note: `-D clippy::infallible-destructuring-match` implied by `-D warnings`\n \n error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:39:5\n+  --> $DIR/infallible_destructuring_match.rs:58:5\n    |\n LL | /     let data = match wrapper {\n LL | |         TupleStruct(i) => i,\n LL | |     };\n    | |______^ help: try this: `let TupleStruct(data) = wrapper;`\n \n error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:60:5\n+  --> $DIR/infallible_destructuring_match.rs:90:5\n    |\n LL | /     let data = match wrapper {\n LL | |         Ok(i) => i,"}, {"sha": "f3627902eec985b15e2e192b0371285fa0848b57", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -12,6 +12,14 @@ fn coords() -> Point {\n     Point { x: 1, y: 2 }\n }\n \n+macro_rules! foo {\n+    ($param:expr) => {\n+        match $param {\n+            _ => println!(\"whatever\"),\n+        }\n+    };\n+}\n+\n fn main() {\n     let a = 1;\n     let b = 2;\n@@ -25,6 +33,8 @@ fn main() {\n     let (x, y, z) = (a, b, c);\n     println!(\"{} {} {}\", x, y, z);\n     // Ok\n+    foo!(a);\n+    // Ok\n     match a {\n         2 => println!(\"2\"),\n         _ => println!(\"Not 2\"),"}, {"sha": "8c182148ae184652c18b413e3f239dde954b6da1", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -12,6 +12,14 @@ fn coords() -> Point {\n     Point { x: 1, y: 2 }\n }\n \n+macro_rules! foo {\n+    ($param:expr) => {\n+        match $param {\n+            _ => println!(\"whatever\"),\n+        }\n+    };\n+}\n+\n fn main() {\n     let a = 1;\n     let b = 2;\n@@ -27,6 +35,8 @@ fn main() {\n         (x, y, z) => println!(\"{} {} {}\", x, y, z),\n     }\n     // Ok\n+    foo!(a);\n+    // Ok\n     match a {\n         2 => println!(\"2\"),\n         _ => println!(\"Not 2\"),"}, {"sha": "795c8c3e24d7e44816419aabc3c3f2256feb2b4f", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -1,5 +1,5 @@\n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:20:5\n+  --> $DIR/match_single_binding.rs:28:5\n    |\n LL | /     match (a, b, c) {\n LL | |         (x, y, z) => {\n@@ -18,7 +18,7 @@ LL |     }\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:26:5\n+  --> $DIR/match_single_binding.rs:34:5\n    |\n LL | /     match (a, b, c) {\n LL | |         (x, y, z) => println!(\"{} {} {}\", x, y, z),\n@@ -32,15 +32,15 @@ LL |     println!(\"{} {} {}\", x, y, z);\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:41:5\n+  --> $DIR/match_single_binding.rs:51:5\n    |\n LL | /     match a {\n LL | |         _ => println!(\"whatever\"),\n LL | |     }\n    | |_____^ help: consider using the match body instead: `println!(\"whatever\");`\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:45:5\n+  --> $DIR/match_single_binding.rs:55:5\n    |\n LL | /     match a {\n LL | |         _ => {\n@@ -59,7 +59,7 @@ LL |     }\n    |\n \n error: this match could be replaced by its body itself\n-  --> $DIR/match_single_binding.rs:52:5\n+  --> $DIR/match_single_binding.rs:62:5\n    |\n LL | /     match a {\n LL | |         _ => {\n@@ -81,7 +81,7 @@ LL |     }\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:62:5\n+  --> $DIR/match_single_binding.rs:72:5\n    |\n LL | /     match p {\n LL | |         Point { x, y } => println!(\"Coords: ({}, {})\", x, y),\n@@ -95,7 +95,7 @@ LL |     println!(\"Coords: ({}, {})\", x, y);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:66:5\n+  --> $DIR/match_single_binding.rs:76:5\n    |\n LL | /     match p {\n LL | |         Point { x: x1, y: y1 } => println!(\"Coords: ({}, {})\", x1, y1),\n@@ -109,7 +109,7 @@ LL |     println!(\"Coords: ({}, {})\", x1, y1);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:71:5\n+  --> $DIR/match_single_binding.rs:81:5\n    |\n LL | /     match x {\n LL | |         ref r => println!(\"Got a reference to {}\", r),\n@@ -123,7 +123,7 @@ LL |     println!(\"Got a reference to {}\", r);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:76:5\n+  --> $DIR/match_single_binding.rs:86:5\n    |\n LL | /     match x {\n LL | |         ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n@@ -137,7 +137,7 @@ LL |     println!(\"Got a mutable reference to {}\", mr);\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:80:5\n+  --> $DIR/match_single_binding.rs:90:5\n    |\n LL | /     let product = match coords() {\n LL | |         Point { x, y } => x * y,\n@@ -151,7 +151,7 @@ LL |     let product = x * y;\n    |\n \n error: this match could be written as a `let` statement\n-  --> $DIR/match_single_binding.rs:88:18\n+  --> $DIR/match_single_binding.rs:98:18\n    |\n LL |           .map(|i| match i.unwrap() {\n    |  __________________^"}, {"sha": "38fc9969804fa593e46df30c22ed61ca3072dce6", "filename": "tests/ui/rest_pat_in_fully_bound_structs.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Frest_pat_in_fully_bound_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Frest_pat_in_fully_bound_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frest_pat_in_fully_bound_structs.rs?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -6,6 +6,15 @@ struct A {\n     c: &'static str,\n }\n \n+macro_rules! foo {\n+    ($param:expr) => {\n+        match $param {\n+            A { a: 0, b: 0, c: \"\", .. } => {},\n+            _ => {},\n+        }\n+    };\n+}\n+\n fn main() {\n     let a_struct = A { a: 5, b: 42, c: \"A\" };\n \n@@ -27,4 +36,7 @@ fn main() {\n         A { a: 0, b: 0, .. } => {},\n         _ => {},\n     }\n+\n+    // No lint\n+    foo!(a_struct);\n }"}, {"sha": "57ebd47f8c7ac4d0808d485d38886d41cc1df316", "filename": "tests/ui/rest_pat_in_fully_bound_structs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Frest_pat_in_fully_bound_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf7c505e611ec99b4107c5358f61b6108c72f8f/tests%2Fui%2Frest_pat_in_fully_bound_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frest_pat_in_fully_bound_structs.stderr?ref=adf7c505e611ec99b4107c5358f61b6108c72f8f", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary use of `..` pattern in struct binding. All fields were already bound\n-  --> $DIR/rest_pat_in_fully_bound_structs.rs:13:9\n+  --> $DIR/rest_pat_in_fully_bound_structs.rs:22:9\n    |\n LL |         A { a: 5, b: 42, c: \"\", .. } => {}, // Lint\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |         A { a: 5, b: 42, c: \"\", .. } => {}, // Lint\n    = help: consider removing `..` from this binding\n \n error: unnecessary use of `..` pattern in struct binding. All fields were already bound\n-  --> $DIR/rest_pat_in_fully_bound_structs.rs:14:9\n+  --> $DIR/rest_pat_in_fully_bound_structs.rs:23:9\n    |\n LL |         A { a: 0, b: 0, c: \"\", .. } => {},  // Lint\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `..` from this binding\n \n error: unnecessary use of `..` pattern in struct binding. All fields were already bound\n-  --> $DIR/rest_pat_in_fully_bound_structs.rs:20:9\n+  --> $DIR/rest_pat_in_fully_bound_structs.rs:29:9\n    |\n LL |         A { a: 0, b: 0, c: \"\", .. } => {}, // Lint\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}