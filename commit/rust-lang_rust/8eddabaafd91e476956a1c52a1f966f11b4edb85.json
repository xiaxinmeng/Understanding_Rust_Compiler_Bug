{"sha": "8eddabaafd91e476956a1c52a1f966f11b4edb85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZGRhYmFhZmQ5MWU0NzY5NTZhMWM1MmExZjk2NmYxMWI0ZWRiODU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-14T16:58:10Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-14T17:00:09Z"}, "message": "Change keep-stage to only affect the passed stage\n\nThe best way to build a stage 2 rustc is now probably\n  ./x.py build --stage 2 src/rustc # once\n  ./x.py build --stage 2 --keep-stage 1 src/rustc", "tree": {"sha": "8a42bfed07514dd908b4934d9c1755f51630f0d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a42bfed07514dd908b4934d9c1755f51630f0d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eddabaafd91e476956a1c52a1f966f11b4edb85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eddabaafd91e476956a1c52a1f966f11b4edb85", "html_url": "https://github.com/rust-lang/rust/commit/8eddabaafd91e476956a1c52a1f966f11b4edb85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eddabaafd91e476956a1c52a1f966f11b4edb85/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a569c249c297a7c3e36ff80aeddf6f42aca5abe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a569c249c297a7c3e36ff80aeddf6f42aca5abe6", "html_url": "https://github.com/rust-lang/rust/commit/a569c249c297a7c3e36ff80aeddf6f42aca5abe6"}], "stats": {"total": 86, "additions": 40, "deletions": 46}, "files": [{"sha": "04e8e133b03a11ffca2991a1eb639524b413cc41", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8eddabaafd91e476956a1c52a1f966f11b4edb85/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eddabaafd91e476956a1c52a1f966f11b4edb85/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8eddabaafd91e476956a1c52a1f966f11b4edb85", "patch": "@@ -67,16 +67,14 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = self.compiler;\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old libstd. This may not behave well.\");\n-                builder.ensure(StdLink {\n-                    compiler: compiler,\n-                    target_compiler: compiler,\n-                    target,\n-                });\n-                return;\n-            }\n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n+            builder.ensure(StdLink {\n+                compiler: compiler,\n+                target_compiler: compiler,\n+                target,\n+            });\n+            return;\n         }\n \n         builder.ensure(StartupObjects { compiler, target });\n@@ -362,20 +360,18 @@ impl Step for Test {\n         let target = self.target;\n         let compiler = self.compiler;\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old libtest. This may not behave well.\");\n-                builder.ensure(TestLink {\n-                    compiler: compiler,\n-                    target_compiler: compiler,\n-                    target,\n-                });\n-                return;\n-            }\n-        }\n-\n         builder.ensure(Std { compiler, target });\n \n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old libtest. This may not behave well.\");\n+            builder.ensure(TestLink {\n+                compiler: compiler,\n+                target_compiler: compiler,\n+                target,\n+            });\n+            return;\n+        }\n+\n         if builder.force_use_stage1(compiler, target) {\n             builder.ensure(Test {\n                 compiler: builder.compiler(1, builder.config.build),\n@@ -490,20 +486,18 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old librustc. This may not behave well.\");\n-                builder.ensure(RustcLink {\n-                    compiler: compiler,\n-                    target_compiler: compiler,\n-                    target,\n-                });\n-                return;\n-            }\n-        }\n-\n         builder.ensure(Test { compiler, target });\n \n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old librustc. This may not behave well.\");\n+            builder.ensure(RustcLink {\n+                compiler: compiler,\n+                target_compiler: compiler,\n+                target,\n+            });\n+            return;\n+        }\n+\n         if builder.force_use_stage1(compiler, target) {\n             builder.ensure(Rustc {\n                 compiler: builder.compiler(1, builder.config.build),\n@@ -660,14 +654,12 @@ impl Step for CodegenBackend {\n \n         builder.ensure(Rustc { compiler, target });\n \n-        if let Some(keep_stage) = builder.config.keep_stage {\n-            if keep_stage <= compiler.stage {\n-                println!(\"Warning: Using a potentially old codegen backend. \\\n-                    This may not behave well.\");\n-                // Codegen backends are linked separately from this step today, so we don't do\n-                // anything here.\n-                return;\n-            }\n+        if builder.config.keep_stage.contains(&compiler.stage) {\n+            builder.info(\"Warning: Using a potentially old codegen backend. \\\n+                This may not behave well.\");\n+            // Codegen backends are linked separately from this step today, so we don't do\n+            // anything here.\n+            return;\n         }\n \n         if builder.force_use_stage1(compiler, target) {"}, {"sha": "0a8a5c87d0da1a4b1a90cbd5aad26b634f02ae34", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eddabaafd91e476956a1c52a1f966f11b4edb85/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eddabaafd91e476956a1c52a1f966f11b4edb85/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8eddabaafd91e476956a1c52a1f966f11b4edb85", "patch": "@@ -63,7 +63,7 @@ pub struct Config {\n \n     pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n-    pub keep_stage: Option<u32>,\n+    pub keep_stage: Vec<u32>,\n     pub src: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,"}, {"sha": "6a013053e580c78f8a26f1b6e105c7960073b65f", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eddabaafd91e476956a1c52a1f966f11b4edb85/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eddabaafd91e476956a1c52a1f966f11b4edb85/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=8eddabaafd91e476956a1c52a1f966f11b4edb85", "patch": "@@ -31,7 +31,7 @@ pub struct Flags {\n     pub verbose: usize, // number of -v args; each extra -v after the first is passed to Cargo\n     pub on_fail: Option<String>,\n     pub stage: Option<u32>,\n-    pub keep_stage: Option<u32>,\n+    pub keep_stage: Vec<u32>,\n \n     pub host: Vec<Interned<String>>,\n     pub target: Vec<Interned<String>>,\n@@ -122,7 +122,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n         opts.optopt(\"\", \"on-fail\", \"command to run on failure\", \"CMD\");\n         opts.optflag(\"\", \"dry-run\", \"dry run; don't build anything\");\n         opts.optopt(\"\", \"stage\", \"stage to build\", \"N\");\n-        opts.optopt(\"\", \"keep-stage\", \"stage to keep without recompiling\", \"N\");\n+        opts.optmulti(\"\", \"keep-stage\", \"stage(s) to keep without recompiling\", \"N\");\n         opts.optopt(\"\", \"src\", \"path to the root of the rust checkout\", \"DIR\");\n         opts.optopt(\"j\", \"jobs\", \"number of jobs to run in parallel\", \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");\n@@ -402,7 +402,9 @@ Arguments:\n             dry_run: matches.opt_present(\"dry-run\"),\n             on_fail: matches.opt_str(\"on-fail\"),\n             rustc_error_format: matches.opt_str(\"error-format\"),\n-            keep_stage: matches.opt_str(\"keep-stage\").map(|j| j.parse().unwrap()),\n+            keep_stage: matches.opt_strs(\"keep-stage\")\n+                .into_iter().map(|j| j.parse().unwrap())\n+                .collect(),\n             host: split(matches.opt_strs(\"host\"))\n                 .into_iter()\n                 .map(|x| INTERNER.intern_string(x))"}]}