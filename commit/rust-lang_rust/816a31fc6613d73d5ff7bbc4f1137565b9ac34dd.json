{"sha": "816a31fc6613d73d5ff7bbc4f1137565b9ac34dd", "node_id": "C_kwDOAAsO6NoAKDgxNmEzMWZjNjYxM2Q3M2Q1ZmY3YmJjNGYxMTM3NTY1YjlhYzM0ZGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-21T23:01:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-21T23:01:12Z"}, "message": "Rollup merge of #104674 - spastorino:negative-impl-tcx, r=lcnr\n\nMake negative_impl and negative_impl_exists take the right types\n\nr? `@lcnr`", "tree": {"sha": "08b90db0f15f1d9d7486ef238a843bccc8c3cc4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b90db0f15f1d9d7486ef238a843bccc8c3cc4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816a31fc6613d73d5ff7bbc4f1137565b9ac34dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfAM4CRBK7hj4Ov3rIwAAfi0IAIkoiG1SIIhE2osKv7o87mfH\n4oF4sLfuHCp+Qp5H+GD+4M48eKMfA6+cFnIlvqC28yUh4nboOilbTl1J+eyBhWAl\nyFjKRbUVBsrXVEIGGAQEEfx92VPO6PZ8xyT363siN+KK1lPFXivSmfNYDkxXITIZ\nuCzwhO4kPLfwlfqDFLhef8Pf7UuVV8pB3y8ElaKJelz27beH5VF2gmidUN7b0nfQ\n2qJUwgyTYKYwV7ckakdJ80k/IJ0DNkJzqN+n5t/ciwN0iVMjahZXD3LSadjVMS/q\nX2Q1oOJO9fBIrfhL6jl+4qFzrQIBXm6X/OhLHGgKbuTAuPvPm3crhBlnzbsX1RM=\n=qtpa\n-----END PGP SIGNATURE-----\n", "payload": "tree 08b90db0f15f1d9d7486ef238a843bccc8c3cc4f\nparent 96d0b7f159504d493e7f1d056bf23279a6379922\nparent 16c9e39021924216005d823b67aa601950bc2184\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669071672 +0100\ncommitter GitHub <noreply@github.com> 1669071672 +0100\n\nRollup merge of #104674 - spastorino:negative-impl-tcx, r=lcnr\n\nMake negative_impl and negative_impl_exists take the right types\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816a31fc6613d73d5ff7bbc4f1137565b9ac34dd", "html_url": "https://github.com/rust-lang/rust/commit/816a31fc6613d73d5ff7bbc4f1137565b9ac34dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816a31fc6613d73d5ff7bbc4f1137565b9ac34dd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96d0b7f159504d493e7f1d056bf23279a6379922", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d0b7f159504d493e7f1d056bf23279a6379922", "html_url": "https://github.com/rust-lang/rust/commit/96d0b7f159504d493e7f1d056bf23279a6379922"}, {"sha": "16c9e39021924216005d823b67aa601950bc2184", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c9e39021924216005d823b67aa601950bc2184", "html_url": "https://github.com/rust-lang/rust/commit/16c9e39021924216005d823b67aa601950bc2184"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "1ef77e06b4874901129299d4a1cc86f130b74c8f", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/816a31fc6613d73d5ff7bbc4f1137565b9ac34dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816a31fc6613d73d5ff7bbc4f1137565b9ac34dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=816a31fc6613d73d5ff7bbc4f1137565b9ac34dd", "patch": "@@ -162,8 +162,8 @@ fn overlap_within_probe<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n \n     if overlap_mode.use_negative_impl() {\n-        if negative_impl(selcx, impl1_def_id, impl2_def_id)\n-            || negative_impl(selcx, impl2_def_id, impl1_def_id)\n+        if negative_impl(infcx.tcx, impl1_def_id, impl2_def_id)\n+            || negative_impl(infcx.tcx, impl2_def_id, impl1_def_id)\n         {\n             return None;\n         }\n@@ -279,13 +279,8 @@ fn implicit_negative<'cx, 'tcx>(\n \n /// Given impl1 and impl2 check if both impls are never satisfied by a common type (including\n /// where-clauses) If so, return true, they are disjoint and false otherwise.\n-fn negative_impl<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n-    impl1_def_id: DefId,\n-    impl2_def_id: DefId,\n-) -> bool {\n+fn negative_impl<'tcx>(tcx: TyCtxt<'tcx>, impl1_def_id: DefId, impl2_def_id: DefId) -> bool {\n     debug!(\"negative_impl(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n-    let tcx = selcx.infcx().tcx;\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     let infcx = tcx.infer_ctxt().build();\n@@ -332,11 +327,10 @@ fn equate<'tcx>(\n         return true;\n     };\n \n-    let selcx = &mut SelectionContext::new(&infcx);\n     let opt_failing_obligation = obligations\n         .into_iter()\n         .chain(more_obligations)\n-        .find(|o| negative_impl_exists(selcx, o, body_def_id));\n+        .find(|o| negative_impl_exists(infcx, o, body_def_id));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -347,19 +341,19 @@ fn equate<'tcx>(\n }\n \n /// Try to prove that a negative impl exist for the given obligation and its super predicates.\n-#[instrument(level = \"debug\", skip(selcx))]\n-fn negative_impl_exists<'cx, 'tcx>(\n-    selcx: &SelectionContext<'cx, 'tcx>,\n+#[instrument(level = \"debug\", skip(infcx))]\n+fn negative_impl_exists<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n     o: &PredicateObligation<'tcx>,\n     body_def_id: DefId,\n ) -> bool {\n-    if resolve_negative_obligation(selcx.infcx().fork(), o, body_def_id) {\n+    if resolve_negative_obligation(infcx.fork(), o, body_def_id) {\n         return true;\n     }\n \n     // Try to prove a negative obligation exists for super predicates\n-    for o in util::elaborate_predicates(selcx.tcx(), iter::once(o.predicate)) {\n-        if resolve_negative_obligation(selcx.infcx().fork(), &o, body_def_id) {\n+    for o in util::elaborate_predicates(infcx.tcx, iter::once(o.predicate)) {\n+        if resolve_negative_obligation(infcx.fork(), &o, body_def_id) {\n             return true;\n         }\n     }"}]}