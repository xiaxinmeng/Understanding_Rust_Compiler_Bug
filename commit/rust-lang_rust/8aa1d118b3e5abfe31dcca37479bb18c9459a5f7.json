{"sha": "8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYTFkMTE4YjNlNWFiZmUzMWRjY2EzNzQ3OWJiMThjOTQ1OWE1Zjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-05T22:09:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-05T22:09:39Z"}, "message": "Merge pull request #2004 from sunfishcode/master\n\nWhen suggesting `from(x)` for lossless casts, strip parens from `x`.", "tree": {"sha": "f50dbdfef76c7f3dbbdcee5ffe6f945e08a2a9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50dbdfef76c7f3dbbdcee5ffe6f945e08a2a9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "html_url": "https://github.com/rust-lang/rust/commit/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ceba6bed6c4265bce7a1fe885dfee869dd90cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ceba6bed6c4265bce7a1fe885dfee869dd90cde", "html_url": "https://github.com/rust-lang/rust/commit/0ceba6bed6c4265bce7a1fe885dfee869dd90cde"}, {"sha": "396cfa70551a80570e3e305ca15ab9589319b49a", "url": "https://api.github.com/repos/rust-lang/rust/commits/396cfa70551a80570e3e305ca15ab9589319b49a", "html_url": "https://github.com/rust-lang/rust/commit/396cfa70551a80570e3e305ca15ab9589319b49a"}], "stats": {"total": 132, "additions": 81, "deletions": 51}, "files": [{"sha": "f166d6c227c345e6e9efc39eff3ceb003fab85d4", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "patch": "@@ -10,7 +10,7 @@ use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr::IntType;\n use syntax::codemap::Span;\n use utils::{comparisons, higher, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n-            opt_def_id, snippet, span_help_and_lint, span_lint, span_lint_and_sugg, type_size};\n+            opt_def_id, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_sugg, type_size};\n use utils::paths;\n \n /// Handles all the linting of funky types\n@@ -580,14 +580,36 @@ fn span_precision_loss_lint(cx: &LateContext, expr: &Expr, cast_from: Ty, cast_t\n     );\n }\n \n+fn should_strip_parens(op: &Expr, snip: &str) -> bool {\n+    if let ExprBinary(_, _, _) = op.node {\n+        if snip.starts_with('(') && snip.ends_with(')') {\n+            return true;\n+        }\n+    }\n+    false\n+}\n+\n fn span_lossless_lint(cx: &LateContext, expr: &Expr, op: &Expr, cast_from: Ty, cast_to: Ty) {\n+    // The suggestion is to use a function call, so if the original expression\n+    // has parens on the outside, they are no longer needed.\n+    let opt = snippet_opt(cx, op.span);\n+    let sugg = if let Some(ref snip) = opt {\n+        if should_strip_parens(op, snip) {\n+            &snip[1..snip.len()-1]\n+        } else {\n+            snip.as_str()\n+        }\n+    } else {\n+        \"..\"\n+    };\n+\n     span_lint_and_sugg(\n         cx,\n         CAST_LOSSLESS,\n         expr.span,\n         &format!(\"casting {} to {} may become silently lossy if types change\", cast_from, cast_to),\n         \"try\",\n-        format!(\"{}::from({})\", cast_to, &snippet(cx, op.span, \"..\")),\n+        format!(\"{}::from({})\", cast_to, sugg),\n     );\n }\n "}, {"sha": "82427c128e4f5683a6f2a5a3523744d9fc7aec16", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "patch": "@@ -57,6 +57,8 @@ fn main() {\n     1u32 as f64;\n     // Test cast_lossless with casts from floating-point types\n     1.0f32 as f64;\n+    // Test cast_lossless with an expression wrapped in parens\n+    (1u8 + 1u8) as u16;\n     // Test cast_sign_loss\n     1i32 as u32;\n     1isize as usize;"}, {"sha": "8787083b4298a2fe93e0d4a57944814cab173cca", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8aa1d118b3e5abfe31dcca37479bb18c9459a5f7/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=8aa1d118b3e5abfe31dcca37479bb18c9459a5f7", "patch": "@@ -308,151 +308,157 @@ error: casting f32 to f64 may become silently lossy if types change\n 59 |     1.0f32 as f64;\n    |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n \n-error: casting i32 to u32 may lose the sign of the value\n+error: casting u8 to u16 may become silently lossy if types change\n   --> $DIR/cast.rs:61:5\n    |\n-61 |     1i32 as u32;\n+61 |     (1u8 + 1u8) as u16;\n+   |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n+\n+error: casting i32 to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:63:5\n+   |\n+63 |     1i32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:62:5\n+  --> $DIR/cast.rs:64:5\n    |\n-62 |     1isize as usize;\n+64 |     1isize as usize;\n    |     ^^^^^^^^^^^^^^^\n \n error: casting isize to i8 may truncate the value\n-  --> $DIR/cast.rs:65:5\n+  --> $DIR/cast.rs:67:5\n    |\n-65 |     1isize as i8;\n+67 |     1isize as i8;\n    |     ^^^^^^^^^^^^\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:66:5\n+  --> $DIR/cast.rs:68:5\n    |\n-66 |     1isize as f64;\n+68 |     1isize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:67:5\n+  --> $DIR/cast.rs:69:5\n    |\n-67 |     1usize as f64;\n+69 |     1usize as f64;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:68:5\n+  --> $DIR/cast.rs:70:5\n    |\n-68 |     1isize as f32;\n+70 |     1isize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:69:5\n+  --> $DIR/cast.rs:71:5\n    |\n-69 |     1usize as f32;\n+71 |     1usize as f32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:70:5\n+  --> $DIR/cast.rs:72:5\n    |\n-70 |     1isize as i32;\n+72 |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:71:5\n+  --> $DIR/cast.rs:73:5\n    |\n-71 |     1isize as u32;\n+73 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:71:5\n+  --> $DIR/cast.rs:73:5\n    |\n-71 |     1isize as u32;\n+73 |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:72:5\n+  --> $DIR/cast.rs:74:5\n    |\n-72 |     1usize as u32;\n+74 |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:73:5\n+  --> $DIR/cast.rs:75:5\n    |\n-73 |     1usize as i32;\n+75 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:73:5\n+  --> $DIR/cast.rs:75:5\n    |\n-73 |     1usize as i32;\n+75 |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:75:5\n+  --> $DIR/cast.rs:77:5\n    |\n-75 |     1i64 as isize;\n+77 |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:76:5\n+  --> $DIR/cast.rs:78:5\n    |\n-76 |     1i64 as usize;\n+78 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:76:5\n+  --> $DIR/cast.rs:78:5\n    |\n-76 |     1i64 as usize;\n+78 |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:77:5\n+  --> $DIR/cast.rs:79:5\n    |\n-77 |     1u64 as isize;\n+79 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast.rs:77:5\n+  --> $DIR/cast.rs:79:5\n    |\n-77 |     1u64 as isize;\n+79 |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:78:5\n+  --> $DIR/cast.rs:80:5\n    |\n-78 |     1u64 as usize;\n+80 |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:79:5\n+  --> $DIR/cast.rs:81:5\n    |\n-79 |     1u32 as isize;\n+81 |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:82:5\n+  --> $DIR/cast.rs:84:5\n    |\n-82 |     1i32 as usize;\n+84 |     1i32 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:84:5\n+  --> $DIR/cast.rs:86:5\n    |\n-84 |     1i32 as i32;\n+86 |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:85:5\n+  --> $DIR/cast.rs:87:5\n    |\n-85 |     1f32 as f32;\n+87 |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:86:5\n+  --> $DIR/cast.rs:88:5\n    |\n-86 |     false as bool;\n+88 |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 74 previous errors\n+error: aborting due to 75 previous errors\n "}]}