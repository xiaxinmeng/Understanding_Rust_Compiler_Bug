{"sha": "5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYjQ0NGRmZWQ2ZGQ4Y2QzYTAwYzYyZDk1YWU3ZWJiNmY2MGUyMmE=", "commit": {"author": {"name": "Andrea Lattuada", "email": "andrea.lattuada@inf.ethz.ch", "date": "2018-05-28T12:50:41Z"}, "committer": {"name": "Andrea Lattuada", "email": "andrea.lattuada@inf.ethz.ch", "date": "2018-05-28T12:50:41Z"}, "message": "author tests: update for_loop.stdout file", "tree": {"sha": "1d537f0bc411b4363efea80c9b035e507868efcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d537f0bc411b4363efea80c9b035e507868efcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "html_url": "https://github.com/rust-lang/rust/commit/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a/comments", "author": {"login": "utaal", "id": 791335, "node_id": "MDQ6VXNlcjc5MTMzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/791335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utaal", "html_url": "https://github.com/utaal", "followers_url": "https://api.github.com/users/utaal/followers", "following_url": "https://api.github.com/users/utaal/following{/other_user}", "gists_url": "https://api.github.com/users/utaal/gists{/gist_id}", "starred_url": "https://api.github.com/users/utaal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utaal/subscriptions", "organizations_url": "https://api.github.com/users/utaal/orgs", "repos_url": "https://api.github.com/users/utaal/repos", "events_url": "https://api.github.com/users/utaal/events{/privacy}", "received_events_url": "https://api.github.com/users/utaal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "utaal", "id": 791335, "node_id": "MDQ6VXNlcjc5MTMzNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/791335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utaal", "html_url": "https://github.com/utaal", "followers_url": "https://api.github.com/users/utaal/followers", "following_url": "https://api.github.com/users/utaal/following{/other_user}", "gists_url": "https://api.github.com/users/utaal/gists{/gist_id}", "starred_url": "https://api.github.com/users/utaal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utaal/subscriptions", "organizations_url": "https://api.github.com/users/utaal/orgs", "repos_url": "https://api.github.com/users/utaal/repos", "events_url": "https://api.github.com/users/utaal/events{/privacy}", "received_events_url": "https://api.github.com/users/utaal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1de58d2652bc85b9f588ef12262ff1bb734e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1de58d2652bc85b9f588ef12262ff1bb734e49", "html_url": "https://github.com/rust-lang/rust/commit/bc1de58d2652bc85b9f588ef12262ff1bb734e49"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "69bc6d7a0252128b49246e5c16efd64ca123afa8", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=5db444dfed6dd8cd3a00c62d95ae7ebb6f60e22a", "patch": "@@ -5,7 +5,13 @@ if_chain! {\n     if let Some(ref init) = local.init\n     if let Expr_::ExprMatch(ref expr, ref arms, MatchSource::ForLoopDesugar) = init.node;\n     if let Expr_::ExprCall(ref func, ref args) = expr.node;\n-    // unimplemented: `ExprCall` is not further destructured at the moment\n+    if let Expr_::ExprPath(ref path) = func.node;\n+    if match_qpath(path, &[\"{{root}}\", \"std\", \"iter\", \"IntoIterator\", \"into_iter\"]);\n+    if args.len() == 1;\n+    if let Expr_::ExprStruct(ref path1, ref fields, None) = args[0].node;\n+    if match_qpath(path1, &[\"{{root}}\", \"std\", \"ops\", \"Range\"]);\n+    if fields.len() == 2;\n+    // unimplemented: field checks\n     if arms.len() == 1;\n     if let Expr_::ExprLoop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.node;\n     if let Stmt_::StmtDecl(ref decl1, _) = body.node\n@@ -14,46 +20,51 @@ if_chain! {\n     if name.node.as_str() == \"__next\";\n     if let Stmt_::StmtExpr(ref e, _) = local1.pat.node\n     if let Expr_::ExprMatch(ref expr1, ref arms1, MatchSource::ForLoopDesugar) = e.node;\n-    if let Expr_::ExprCall(ref func, ref args) = expr1.node;\n-    // unimplemented: `ExprCall` is not further destructured at the moment\n+    if let Expr_::ExprCall(ref func1, ref args1) = expr1.node;\n+    if let Expr_::ExprPath(ref path2) = func1.node;\n+    if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n+    if args1.len() == 1;\n+    if let Expr_::ExprAddrOf(MutMutable, ref inner) = args1[0].node;\n+    if let Expr_::ExprPath(ref path3) = inner.node;\n+    if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;\n     if let Expr_::ExprAssign(ref target, ref value) = arms1[0].body.node;\n-    if let Expr_::ExprPath(ref path) = target.node;\n-    if match_qpath(path, &[\"__next\"]);\n-    if let Expr_::ExprPath(ref path1) = value.node;\n-    if match_qpath(path1, &[\"val\"]);\n+    if let Expr_::ExprPath(ref path4) = target.node;\n+    if match_qpath(path4, &[\"__next\"]);\n+    if let Expr_::ExprPath(ref path5) = value.node;\n+    if match_qpath(path5, &[\"val\"]);\n     if arms1[0].pats.len() == 1;\n-    if let PatKind::TupleStruct(ref path2, ref fields, None) = arms1[0].pats[0].node;\n-    if match_qpath(path2, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"Some\"]);\n-    if fields.len() == 1;\n+    if let PatKind::TupleStruct(ref path6, ref fields1, None) = arms1[0].pats[0].node;\n+    if match_qpath(path6, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"Some\"]);\n+    if fields1.len() == 1;\n     // unimplemented: field checks\n     if let Expr_::ExprBreak(ref destination, None) = arms1[1].body.node;\n     if arms1[1].pats.len() == 1;\n-    if let PatKind::Path(ref path3) = arms1[1].pats[0].node;\n-    if match_qpath(path3, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n-    if let Stmt_::StmtDecl(ref decl2, _) = path3.node\n+    if let PatKind::Path(ref path7) = arms1[1].pats[0].node;\n+    if match_qpath(path7, &[\"{{root}}\", \"std\", \"option\", \"Option\", \"None\"]);\n+    if let Stmt_::StmtDecl(ref decl2, _) = path7.node\n     if let Decl_::DeclLocal(ref local2) = decl2.node;\n     if let Some(ref init1) = local2.init\n-    if let Expr_::ExprPath(ref path4) = init1.node;\n-    if match_qpath(path4, &[\"__next\"]);\n+    if let Expr_::ExprPath(ref path8) = init1.node;\n+    if match_qpath(path8, &[\"__next\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local2.pat.node;\n     if name1.node.as_str() == \"y\";\n     if let Stmt_::StmtExpr(ref e1, _) = local2.pat.node\n     if let Expr_::ExprBlock(ref block1) = e1.node;\n     if let Stmt_::StmtDecl(ref decl3, _) = block1.node\n     if let Decl_::DeclLocal(ref local3) = decl3.node;\n     if let Some(ref init2) = local3.init\n-    if let Expr_::ExprPath(ref path5) = init2.node;\n-    if match_qpath(path5, &[\"y\"]);\n+    if let Expr_::ExprPath(ref path9) = init2.node;\n+    if match_qpath(path9, &[\"y\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name2, None) = local3.pat.node;\n     if name2.node.as_str() == \"z\";\n     if arms[0].pats.len() == 1;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name3, None) = arms[0].pats[0].node;\n     if name3.node.as_str() == \"iter\";\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name4, None) = local.pat.node;\n     if name4.node.as_str() == \"_result\";\n-    if let Expr_::ExprPath(ref path6) = local.pat.node;\n-    if match_qpath(path6, &[\"_result\"]);\n+    if let Expr_::ExprPath(ref path10) = local.pat.node;\n+    if match_qpath(path10, &[\"_result\"]);\n     then {\n         // report your lint here\n     }"}]}