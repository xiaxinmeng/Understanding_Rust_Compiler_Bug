{"sha": "cc02024fda2d8a47c7166f064962ad5a54eb7795", "node_id": "C_kwDOAAsO6NoAKGNjMDIwMjRmZGEyZDhhNDdjNzE2NmYwNjQ5NjJhZDVhNTRlYjc3OTU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T12:29:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-31T12:29:54Z"}, "message": "Rollup merge of #101216 - ehuss:sanitizer-links, r=JohnTitor\n\nUse in-page links for sanitizer docs.\n\nThis updates the sanitizer documentation page so that the links in the summary at the top jump to the relevant sections within the page instead of leading away to a different site. I think this makes it a little easier to navigate this page which has gotten quite long.\n\nThis also fixes the broken link for MemTagSanitizer which was not defined.  It also adds MemTagSanitizer to the external summary list at the bottom of the page.", "tree": {"sha": "b02fbd75364696d776158c923cbd3473fb8eb6d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02fbd75364696d776158c923cbd3473fb8eb6d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc02024fda2d8a47c7166f064962ad5a54eb7795", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjD1RCCRBK7hj4Ov3rIwAAXRUIAJ935PkB+Znl/5G+9MwhzQst\nHohlQjUfOw1vwnfCJarAe99eiXdyrNfQd4qJLGtKD3AvWeff5Yn/iUjFuX1bIYUi\nKcUjYLKtMUAHPzigjCch3Rm/exws9qKe60THIazE08PBYBi2L5UY7EltEh+038mr\nW8crnLnaVgMB+sP2VeLguoMmzsJonufKZaIPdmHXM5o+A+34RQcBcdMk3utrY6RK\n9d1P7/ytEEEK470+g4v5KNeMEl6n/BG/yTTtDi7F81yz33VMSLrbMPTGRr6UoDFQ\nE96sQKD4h6ohhhNdJXGj8/uDODSCydXH/aUj67KqNopMO2t0epnfTA/6Mn7sCPA=\n=W7bB\n-----END PGP SIGNATURE-----\n", "payload": "tree b02fbd75364696d776158c923cbd3473fb8eb6d4\nparent 8ed9ac658afc2a819b82e300b85ba054b44b74e7\nparent 8588374d29c67df66d128b4be9fea4ac2b9eb5f5\nauthor Ralf Jung <post@ralfj.de> 1661948994 +0200\ncommitter GitHub <noreply@github.com> 1661948994 +0200\n\nRollup merge of #101216 - ehuss:sanitizer-links, r=JohnTitor\n\nUse in-page links for sanitizer docs.\n\nThis updates the sanitizer documentation page so that the links in the summary at the top jump to the relevant sections within the page instead of leading away to a different site. I think this makes it a little easier to navigate this page which has gotten quite long.\n\nThis also fixes the broken link for MemTagSanitizer which was not defined.  It also adds MemTagSanitizer to the external summary list at the bottom of the page.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc02024fda2d8a47c7166f064962ad5a54eb7795", "html_url": "https://github.com/rust-lang/rust/commit/cc02024fda2d8a47c7166f064962ad5a54eb7795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc02024fda2d8a47c7166f064962ad5a54eb7795/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed9ac658afc2a819b82e300b85ba054b44b74e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed9ac658afc2a819b82e300b85ba054b44b74e7", "html_url": "https://github.com/rust-lang/rust/commit/8ed9ac658afc2a819b82e300b85ba054b44b74e7"}, {"sha": "8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8588374d29c67df66d128b4be9fea4ac2b9eb5f5", "html_url": "https://github.com/rust-lang/rust/commit/8588374d29c67df66d128b4be9fea4ac2b9eb5f5"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "b33405f18e90bcc2c92672cdaecfdc0df869a78b", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc02024fda2d8a47c7166f064962ad5a54eb7795/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc02024fda2d8a47c7166f064962ad5a54eb7795/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=cc02024fda2d8a47c7166f064962ad5a54eb7795", "patch": "@@ -9,17 +9,17 @@ The tracking issues for this feature are:\n \n This feature allows for use of one of following sanitizers:\n \n-* [AddressSanitizer][clang-asan] a fast memory error detector.\n-* [ControlFlowIntegrity][clang-cfi] LLVM Control Flow Integrity (CFI) provides\n+* [AddressSanitizer](#addresssanitizer) a fast memory error detector.\n+* [ControlFlowIntegrity](#controlflowintegrity) LLVM Control Flow Integrity (CFI) provides\n   forward-edge control flow protection.\n-* [HWAddressSanitizer][clang-hwasan] a memory error detector similar to\n+* [HWAddressSanitizer](#hwaddresssanitizer) a memory error detector similar to\n   AddressSanitizer, but based on partial hardware assistance.\n-* [LeakSanitizer][clang-lsan] a run-time memory leak detector.\n-* [MemorySanitizer][clang-msan] a detector of uninitialized reads.\n-* [MemTagSanitizer][clang-memtag] fast memory error detector based on\n+* [LeakSanitizer](#leaksanitizer) a run-time memory leak detector.\n+* [MemorySanitizer](#memorysanitizer) a detector of uninitialized reads.\n+* [MemTagSanitizer](#memtagsanitizer) fast memory error detector based on\n   Armv8.5-A Memory Tagging Extension.\n-* [ShadowCallStack][clang-scs] provides backward-edge control flow protection.\n-* [ThreadSanitizer][clang-tsan] a fast data race detector.\n+* [ShadowCallStack](#shadowcallstack) provides backward-edge control flow protection.\n+* [ThreadSanitizer](#threadsanitizer) a fast data race detector.\n \n To enable a sanitizer compile with `-Zsanitizer=address`,`-Zsanitizer=cfi`,\n `-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`,\n@@ -58,6 +58,8 @@ AddressSanitizer works with non-instrumented code although it will impede its\n ability to detect some bugs.  It is not expected to produce false positive\n reports.\n \n+See the [Clang AddressSanitizer documentation][clang-asan] for more details.\n+\n ## Examples\n \n Stack buffer overflow:\n@@ -204,6 +206,8 @@ tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n \n LLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).\n \n+See the [Clang ControlFlowIntegrity documentation][clang-cfi] for more details.\n+\n ## Example\n \n ```text\n@@ -430,6 +434,8 @@ HWAddressSanitizer requires `tagged-globals` target feature to instrument\n globals. To enable this target feature compile with `-C\n target-feature=+tagged-globals`\n \n+See the [Clang HWAddressSanitizer documentation][clang-hwasan] for more details.\n+\n ## Example\n \n Heap buffer overflow:\n@@ -507,6 +513,8 @@ LeakSanitizer is supported on the following targets:\n * `x86_64-apple-darwin`\n * `x86_64-unknown-linux-gnu`\n \n+See the [Clang LeakSanitizer documentation][clang-lsan] for more details.\n+\n # MemorySanitizer\n \n MemorySanitizer is detector of uninitialized reads.\n@@ -521,6 +529,8 @@ MemorySanitizer requires all program code to be instrumented. C/C++ dependencies\n need to be recompiled using Clang with `-fsanitize=memory` option. Failing to\n achieve that will result in false positive reports.\n \n+See the [Clang MemorySanitizer documentation][clang-msan] for more details.\n+\n ## Example\n \n Detecting the use of uninitialized memory. The `-Zbuild-std` flag rebuilds and\n@@ -569,7 +579,7 @@ MemTagSanitizer is supported on the following targets:\n MemTagSanitizer requires hardware support and the `mte` target feature.\n To enable this target feature compile with `-C target-feature=\"+mte\"`.\n \n-More information can be found in the associated [LLVM documentation](https://llvm.org/docs/MemTagSanitizer.html).\n+See the [LLVM MemTagSanitizer documentation][llvm-memtag] for more details.\n \n # ShadowCallStack\n \n@@ -581,7 +591,9 @@ ShadowCallStack can be enabled with `-Zsanitizer=shadow-call-stack` option and i\n \n * `aarch64-linux-android`\n \n-A runtime must be provided by the application or operating system. See the [LLVM documentation][clang-scs] for further details.\n+A runtime must be provided by the application or operating system.\n+\n+See the [Clang ShadowCallStack documentation][clang-scs] for more details.\n \n # ThreadSanitizer\n \n@@ -604,6 +616,8 @@ can lead to false positive reports.\n ThreadSanitizer does not support atomic fences `std::sync::atomic::fence`,\n nor synchronization performed using inline assembly code.\n \n+See the [Clang ThreadSanitizer documentation][clang-tsan] for more details.\n+\n ## Example\n \n ```rust\n@@ -673,6 +687,7 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n * [HWAddressSanitizer in Clang][clang-hwasan]\n * [LeakSanitizer in Clang][clang-lsan]\n * [MemorySanitizer in Clang][clang-msan]\n+* [MemTagSanitizer in LLVM][llvm-memtag]\n * [ThreadSanitizer in Clang][clang-tsan]\n \n [clang-asan]: https://clang.llvm.org/docs/AddressSanitizer.html\n@@ -682,3 +697,4 @@ Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PAT\n [clang-msan]: https://clang.llvm.org/docs/MemorySanitizer.html\n [clang-scs]: https://clang.llvm.org/docs/ShadowCallStack.html\n [clang-tsan]: https://clang.llvm.org/docs/ThreadSanitizer.html\n+[llvm-memtag]: https://llvm.org/docs/MemTagSanitizer.html"}]}