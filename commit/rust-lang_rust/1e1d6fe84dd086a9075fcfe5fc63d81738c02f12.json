{"sha": "1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "node_id": "C_kwDOAAsO6NoAKDFlMWQ2ZmU4NGRkMDg2YTkwNzVmY2ZlNWZjNjNkODE3MzhjMDJmMTI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-20T12:07:14Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-26T11:40:04Z"}, "message": "Improve error message for unstable default body", "tree": {"sha": "a15344b31dae4da7c6873af22503fcef8c5db4e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15344b31dae4da7c6873af22503fcef8c5db4e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "html_url": "https://github.com/rust-lang/rust/commit/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198443711501234a5d98b6d621aae2cead73c8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/198443711501234a5d98b6d621aae2cead73c8cb", "html_url": "https://github.com/rust-lang/rust/commit/198443711501234a5d98b6d621aae2cead73c8cb"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "bb7598bbf3e6fc37992e59715ffca57a2ba7a7ac", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "patch": "@@ -4616,6 +4616,7 @@ dependencies = [\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_hir_pretty\","}, {"sha": "cae29c1d3c5f938a2b103d103a962c2b790d77ca", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "patch": "@@ -30,3 +30,4 @@ rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n rustc_lint = { path = \"../rustc_lint\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n+rustc_feature = { path = \"../rustc_feature\" }"}, {"sha": "0293bf7803a660efb8ebba3697625f9477d17a0e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "patch": "@@ -1112,17 +1112,14 @@ fn check_impl_items_against_trait<'tcx>(\n \n             if !is_implemented_here {\n                 match tcx.eval_default_body_stability(trait_item_id, full_impl_span) {\n-                    EvalResult::Deny { feature, reason, issue, is_soft, .. } => {\n-                        default_body_is_unstable(\n-                            tcx,\n-                            full_impl_span,\n-                            trait_item_id,\n-                            feature,\n-                            reason,\n-                            issue,\n-                            is_soft,\n-                        )\n-                    }\n+                    EvalResult::Deny { feature, reason, issue, .. } => default_body_is_unstable(\n+                        tcx,\n+                        full_impl_span,\n+                        trait_item_id,\n+                        feature,\n+                        reason,\n+                        issue,\n+                    ),\n \n                     // Unmarked default bodies are considered stable (at least for now).\n                     EvalResult::Allow | EvalResult::Unmarked => {}"}, {"sha": "b5201c737dfe3a07c50082a3034f2028ee13867c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "patch": "@@ -99,7 +99,6 @@ pub use expectation::Expectation;\n pub use fn_ctxt::*;\n use hir::def::CtorOf;\n pub use inherited::{Inherited, InheritedBuilder};\n-use rustc_middle::middle::stability::report_unstable;\n \n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n@@ -667,19 +666,32 @@ fn missing_items_must_implement_one_of_err(\n fn default_body_is_unstable(\n     tcx: TyCtxt<'_>,\n     impl_span: Span,\n-    _item_did: DefId,\n+    item_did: DefId,\n     feature: Symbol,\n     reason: Option<Symbol>,\n     issue: Option<NonZeroU32>,\n-    is_soft: bool,\n ) {\n-    let soft_handler = |lint, span, msg: &_| {\n-        tcx.struct_span_lint_hir(lint, hir::CRATE_HIR_ID, span, |lint| {\n-            lint.build(msg).emit();\n-        })\n+    let missing_item_name = &tcx.associated_item(item_did).name;\n+    let use_of_unstable_library_feature_note = match reason {\n+        Some(r) => format!(\"use of unstable library feature '{feature}': {r}\"),\n+        None => format!(\"use of unstable library feature '{feature}'\"),\n     };\n \n-    report_unstable(tcx.sess, feature, reason, issue, None, is_soft, impl_span, soft_handler)\n+    let mut err = struct_span_err!(\n+        tcx.sess,\n+        impl_span,\n+        E0046,\n+        \"not all trait items implemented, missing: `{missing_item_name}`\",\n+    );\n+    err.note(format!(\"default implementation of `{missing_item_name}` is unstable\"));\n+    err.note(use_of_unstable_library_feature_note);\n+    rustc_session::parse::add_feature_diagnostics_for_issue(\n+        &mut err,\n+        &tcx.sess.parse_sess,\n+        feature,\n+        rustc_feature::GateIssue::Library(issue),\n+    );\n+    err.emit();\n }\n \n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions."}, {"sha": "ecb281bccf604d1ed3173ee309f47b5fae92c4f9", "filename": "src/test/ui/stability-attribute/default-body-stability-err.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.rs?ref=1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "patch": "@@ -8,11 +8,11 @@ use default_body::{Equal, JustTrait};\n struct Type;\n \n impl JustTrait for Type {}\n-//~^ ERROR use of unstable library feature 'fun_default_body'\n-//~| ERROR use of unstable library feature 'constant_default_body'\n+//~^ ERROR not all trait items implemented, missing: `CONSTANT` [E0046]\n+//~| ERROR not all trait items implemented, missing: `fun` [E0046]\n \n impl Equal for Type {\n-    //~^ ERROR use of unstable library feature 'eq_default_body'\n+    //~^ ERROR not all trait items implemented, missing: `eq` [E0046]\n     fn neq(&self, other: &Self) -> bool {\n         false\n     }"}, {"sha": "ef666f30fc2a294fd5a3a4b6715aada8adee7f17", "filename": "src/test/ui/stability-attribute/default-body-stability-err.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1d6fe84dd086a9075fcfe5fc63d81738c02f12/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fdefault-body-stability-err.stderr?ref=1e1d6fe84dd086a9075fcfe5fc63d81738c02f12", "patch": "@@ -1,20 +1,24 @@\n-error[E0658]: use of unstable library feature 'constant_default_body'\n+error[E0046]: not all trait items implemented, missing: `CONSTANT`\n   --> $DIR/default-body-stability-err.rs:10:1\n    |\n LL | impl JustTrait for Type {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: default implementation of `CONSTANT` is unstable\n+   = note: use of unstable library feature 'constant_default_body'\n    = help: add `#![feature(constant_default_body)]` to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'fun_default_body'\n+error[E0046]: not all trait items implemented, missing: `fun`\n   --> $DIR/default-body-stability-err.rs:10:1\n    |\n LL | impl JustTrait for Type {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: default implementation of `fun` is unstable\n+   = note: use of unstable library feature 'fun_default_body'\n    = help: add `#![feature(fun_default_body)]` to the crate attributes to enable\n \n-error[E0658]: use of unstable library feature 'eq_default_body'\n+error[E0046]: not all trait items implemented, missing: `eq`\n   --> $DIR/default-body-stability-err.rs:14:1\n    |\n LL | / impl Equal for Type {\n@@ -25,8 +29,10 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n+   = note: default implementation of `eq` is unstable\n+   = note: use of unstable library feature 'eq_default_body'\n    = help: add `#![feature(eq_default_body)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0046`."}]}