{"sha": "c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZGQzYzRkNjlhZWUxYzRhZDhjYzIyMGMxOTRiMTc2YmJhMmFiNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-05T23:51:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-05T23:51:00Z"}, "message": "auto merge of #20578 : japaric/rust/no-more-bc, r=nmatsakis\n\nThis PR removes boxed closures from the language, the closure type syntax (`let f: |int| -> bool = /* ... */`) has been obsoleted. Move all your uses of closures to the new unboxed closure system (i.e. `Fn*` traits).\r\n\r\n[breaking-change] patterns\r\n\r\n- `lef f = || {}`\r\n\r\nThis binding used to type check to a boxed closure. Now that boxed closures are gone, you need to annotate the \"kind\" of the unboxed closure, i.e. you need pick one of these: `|&:| {}`, `|&mut:| {}` or `|:| {}`.\r\n\r\nIn the (near) future we'll have closure \"kind\" inference, so the compiler will infer which `Fn*` trait to use based on how the closure is used. Once this inference machinery is in place, we'll be able to remove the kind annotation from most closures.\r\n\r\n- `type Alias<'a> = |int|:'a -> bool`\r\n\r\nUse a trait object: `type Alias<'a> = Box<FnMut(int) -> bool + 'a>`. Use the `Fn*` trait that makes sense for your use case.\r\n\r\n- `fn foo(&self, f: |uint| -> bool)`\r\n\r\nIn this case you can use either a trait object or an unboxed closure:\r\n\r\n``` rust\r\nfn foo(&self, f: F) where F: FnMut(uint) -> bool;\r\n// or\r\nfn foo(&self, f: Box<FnMut(uint) -> bool>);\r\n```\r\n\r\n- `struct Struct<'a> { f: |uint|:'a -> bool }`\r\n\r\nAgain, you can use either a trait object or an unboxed closure:\r\n\r\n``` rust\r\nstruct Struct<F> where F: FnMut(uint) -> bool { f: F }\r\n// or\r\nstruct Struct<'a> { f: Box<FnMut(uint) -> bool + 'a> }\r\n```\r\n\r\n- Using `|x, y| f(x, y)` for closure \"borrows\"\r\n\r\nThis comes up in recursive functions, consider the following (contrived) example:\r\n\r\n``` rust\r\nfn foo(x: uint, f: |uint| -> bool) -> bool {\r\n    //foo(x / 2, f) && f(x)  // can't use this because `f` gets moved away in the `foo` call\r\n    foo(x / 2, |x| f(x)) && f(x)  // instead \"borrow\" `f` in the `foo` call\r\n}\r\n```\r\n\r\nIf you attempt to do the same with unboxed closures you'll hit \"\"error: reached the recursion limit during monomorphization\" (see #19596):\r\n\r\n``` rust\r\nfn foo<F>(x: uint, mut f: F) -> bool where F: FnMut(uint) -> bool {\r\n    foo(x / 2, |x| f(x)) && f(x)\r\n    //~^ error: reached the recursion limit during monomorphization\r\n}\r\n```\r\n\r\nInstead you *should* be able to write this:\r\n\r\n``` rust\r\nfn foo<F>(x: uint, mut f: F) -> bool where F: FnMut(uint) -> bool {\r\n    foo(x / 2, &mut f) && f(x)\r\n    //~^ error: the trait `FnMut` is not implemented for the type `&mut F`\r\n}\r\n```\r\n\r\nBut as you see above `&mut F` doesn't implement the `FnMut` trait. `&mut F` *should* implement the `FnMut` and the above code *should* work, but due to a bug (see #18835) it doesn't (for now).\r\n\r\nYou can work around the issue by rewriting the function to take `&mut F` instead of `F`:\r\n\r\n``` rust\r\nfn foo<F>(x: uint, f: &mut F) -> bool where F: FnMut(uint) -> bool {\r\n    foo(x / 2, f) && (*f)(x)\r\n}\r\n```\r\n\r\nThis finally works! However writing `foo(0, &mut |x| x == 0)` is unergonomic. So you can use a private helper function to avoid this:\r\n\r\n``` rust\r\n// public API function\r\npub fn foo<F>(x: uint, mut f: F) -> bool where F: FnMut(uint) -> bool {\r\n    foo_(x, &mut f)\r\n}\r\n\r\n// private helper function\r\nfn foo_<F>(x: uint, f: &mut F) -> bool where F: FnMut(uint) -> bool {\r\n    foo_(x / 2, f) && (*f)(x)\r\n}\r\n```\r\n\r\nCloses #14798\r\n\r\n---\r\n\r\nThere is more cleanup to do: like renaming functions/types from `unboxed_closure` to just `closure`, removing more dead code, simplify functions which now have unused arguments, update the documentation, etc. But that can be done in another PR.\r\n\r\nr? @nikomatsakis @aturon (You probably want to focus on the deleted/modified tests.)\r\ncc @eddyb", "tree": {"sha": "437b342261834278ef6b45fde186c5944eb4819e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/437b342261834278ef6b45fde186c5944eb4819e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "html_url": "https://github.com/rust-lang/rust/commit/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "html_url": "https://github.com/rust-lang/rust/commit/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e"}, {"sha": "eb2506cc1bcf2011d4e8ce99ff7cf74c2c1d1493", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2506cc1bcf2011d4e8ce99ff7cf74c2c1d1493", "html_url": "https://github.com/rust-lang/rust/commit/eb2506cc1bcf2011d4e8ce99ff7cf74c2c1d1493"}], "stats": {"total": 3475, "additions": 986, "deletions": 2489}, "files": [{"sha": "48610b6b526d22899df5a4061453f673fd761cd5", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -339,8 +339,9 @@ pub fn is_test(config: &Config, testfile: &Path) -> bool {\n     return valid;\n }\n \n-pub fn make_test(config: &Config, testfile: &Path, f: || -> test::TestFn)\n-                 -> test::TestDescAndFn {\n+pub fn make_test<F>(config: &Config, testfile: &Path, f: F) -> test::TestDescAndFn where\n+    F: FnOnce() -> test::TestFn,\n+{\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),"}, {"sha": "2413a001ee8053b5bdbf9d90c8c0836f332c8bb7", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -220,7 +220,9 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n     !val\n }\n \n-fn iter_header(testfile: &Path, it: |&str| -> bool) -> bool {\n+fn iter_header<F>(testfile: &Path, mut it: F) -> bool where\n+    F: FnMut(&str) -> bool,\n+{\n     use std::io::{BufferedReader, File};\n \n     let mut rdr = BufferedReader::new(File::open(testfile).unwrap());"}, {"sha": "875061e69b7a28ce49bfc6c8070dbd5bb6f4c619", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1233,12 +1233,14 @@ enum TargetLocation {\n     ThisDirectory(Path),\n }\n \n-fn make_compile_args(config: &Config,\n-                     props: &TestProps,\n-                     extras: Vec<String> ,\n-                     xform: |&Config, &Path| -> TargetLocation,\n-                     testfile: &Path)\n-                     -> ProcArgs {\n+fn make_compile_args<F>(config: &Config,\n+                        props: &TestProps,\n+                        extras: Vec<String> ,\n+                        xform: F,\n+                        testfile: &Path)\n+                        -> ProcArgs where\n+    F: FnOnce(&Config, &Path) -> TargetLocation,\n+{\n     let xform_file = xform(config, testfile);\n     let target = if props.force_host {\n         config.host.as_slice()"}, {"sha": "4606a1ba846ff82e7a6c1af6bd4b4314849657c1", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -537,7 +537,8 @@ computation entirely. This could be done for the example above by adjusting the\n `b.iter` call to\n \n ```rust\n-# struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let b = X;\n+# struct X;\n+# impl X { fn iter<T, F>(&self, _: F) where F: FnMut() -> T {} } let b = X;\n b.iter(|| {\n     // note lack of `;` (could also use an explicit `return`).\n     range(0u, 1000).fold(0, |old, new| old ^ new)\n@@ -552,7 +553,8 @@ argument as used.\n extern crate test;\n \n # fn main() {\n-# struct X; impl X { fn iter<T>(&self, _: || -> T) {} } let b = X;\n+# struct X;\n+# impl X { fn iter<T, F>(&self, _: F) where F: FnMut() -> T {} } let b = X;\n b.iter(|| {\n     test::black_box(range(0u, 1000).fold(0, |old, new| old ^ new));\n });"}, {"sha": "e60740db353bca191d1fcd7b588af5be5c654407", "filename": "src/doc/guide.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -4232,7 +4232,7 @@ arguments, really powerful things are possible.\n Let's make a closure:\n \n ```{rust}\n-let add_one = |x| { 1 + x };\n+let add_one = |&: x| { 1 + x };\n \n println!(\"The sum of 5 plus 1 is {}.\", add_one(5));\n ```\n@@ -4244,8 +4244,8 @@ binding name and two parentheses, just like we would for a named function.\n Let's compare syntax. The two are pretty close:\n \n ```{rust}\n-let add_one = |x: i32| -> i32 { 1 + x };\n-fn  add_one   (x: i32) -> i32 { 1 + x }\n+let add_one = |&: x: i32| -> i32 { 1 + x };\n+fn  add_one      (x: i32) -> i32 { 1 + x }\n ```\n \n As you may have noticed, closures infer their argument and return types, so you\n@@ -4258,9 +4258,9 @@ this:\n \n ```{rust}\n fn main() {\n-    let x = 5;\n+    let x: i32 = 5;\n \n-    let printer = || { println!(\"x is: {}\", x); };\n+    let printer = |&:| { println!(\"x is: {}\", x); };\n \n     printer(); // prints \"x is: 5\"\n }\n@@ -4276,7 +4276,7 @@ defined. The closure borrows any variables it uses, so this will error:\n fn main() {\n     let mut x = 5;\n \n-    let printer = || { println!(\"x is: {}\", x); };\n+    let printer = |&:| { println!(\"x is: {}\", x); };\n \n     x = 6; // error: cannot assign to `x` because it is borrowed\n }\n@@ -4298,12 +4298,12 @@ now. We'll talk about them more in the \"Threads\" section of the guide.\n Closures are most useful as an argument to another function. Here's an example:\n \n ```{rust}\n-fn twice(x: i32, f: |i32| -> i32) -> i32 {\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n     f(x) + f(x)\n }\n \n fn main() {\n-    let square = |x: i32| { x * x };\n+    let square = |&: x: i32| { x * x };\n \n     twice(5, square); // evaluates to 50\n }\n@@ -4312,15 +4312,15 @@ fn main() {\n Let's break the example down, starting with `main`:\n \n ```{rust}\n-let square = |x: i32| { x * x };\n+let square = |&: x: i32| { x * x };\n ```\n \n We've seen this before. We make a closure that takes an integer, and returns\n its square.\n \n ```{rust}\n-# fn twice(x: i32, f: |i32| -> i32) -> i32 { f(x) + f(x) }\n-# let square = |x: i32| { x * x };\n+# fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 { f(x) + f(x) }\n+# let square = |&: x: i32| { x * x };\n twice(5, square); // evaluates to 50\n ```\n \n@@ -4343,8 +4343,8 @@ how the `|i32| -> i32` syntax looks a lot like our definition of `square`\n above, if we added the return type in:\n \n ```{rust}\n-let square = |x: i32| -> i32 { x * x };\n-//           |i32|    -> i32\n+let square = |&: x: i32| -> i32 { x * x };\n+//           |i32|       -> i32\n ```\n \n This function takes an `i32` and returns an `i32`.\n@@ -4358,7 +4358,7 @@ Finally, `twice` returns an `i32` as well.\n Okay, let's look at the body of `twice`:\n \n ```{rust}\n-fn twice(x: i32, f: |i32| -> i32) -> i32 {\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n   f(x) + f(x)\n }\n ```\n@@ -4376,7 +4376,7 @@ If we didn't want to give `square` a name, we could just define it inline.\n This example is the same as the previous one:\n \n ```{rust}\n-fn twice(x: i32, f: |i32| -> i32) -> i32 {\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n     f(x) + f(x)\n }\n \n@@ -4389,7 +4389,7 @@ A named function's name can be used wherever you'd use a closure. Another\n way of writing the previous example:\n \n ```{rust}\n-fn twice(x: i32, f: |i32| -> i32) -> i32 {\n+fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {\n     f(x) + f(x)\n }\n "}, {"sha": "5c00993d918d72a9a0d0d56997d4ba64c2eccbaf", "filename": "src/doc/reference.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1563,7 +1563,7 @@ functions](#generic-functions).\n trait Seq<T> {\n    fn len(&self) -> uint;\n    fn elt_at(&self, n: uint) -> T;\n-   fn iter(&self, |T|);\n+   fn iter<F>(&self, F) where F: Fn(T);\n }\n ```\n \n@@ -3218,7 +3218,7 @@ In this example, we define a function `ten_times` that takes a higher-order\n function argument, and call it with a lambda expression as an argument.\n \n ```\n-fn ten_times(f: |int|) {\n+fn ten_times<F>(f: F) where F: Fn(int) {\n     let mut i = 0;\n     while i < 10 {\n         f(i);\n@@ -3828,7 +3828,7 @@ fn add(x: int, y: int) -> int {\n \n let mut x = add(5,7);\n \n-type Binop<'a> = |int,int|: 'a -> int;\n+type Binop = fn(int, int) -> int;\n let bo: Binop = add;\n x = bo(5,7);\n ```\n@@ -3852,14 +3852,14 @@ An example of creating and calling a closure:\n ```rust\n let captured_var = 10i;\n \n-let closure_no_args = || println!(\"captured_var={}\", captured_var);\n+let closure_no_args = |&:| println!(\"captured_var={}\", captured_var);\n \n-let closure_args = |arg: int| -> int {\n+let closure_args = |&: arg: int| -> int {\n   println!(\"captured_var={}, arg={}\", captured_var, arg);\n   arg // Note lack of semicolon after 'arg'\n };\n \n-fn call_closure(c1: ||, c2: |int| -> int) {\n+fn call_closure<F: Fn(), G: Fn(int) -> int>(c1: F, c2: G) {\n   c1();\n   c2(2);\n }"}, {"sha": "c092e000215d3ffdc1858c3bbf5762a2abf2b8a2", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -164,21 +164,6 @@ pub struct Bitv {\n     nbits: uint\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-// FIXME(Gankro): NopeNopeNopeNopeNope (wait for IndexGet to be a thing)\n-impl Index<uint,bool> for Bitv {\n-    #[inline]\n-    fn index(&self, i: &uint) -> &bool {\n-        if self.get(*i).expect(\"index out of bounds\") {\n-            &TRUE\n-        } else {\n-            &FALSE\n-        }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n // FIXME(Gankro): NopeNopeNopeNopeNope (wait for IndexGet to be a thing)\n impl Index<uint> for Bitv {\n     type Output = bool;"}, {"sha": "ea504530c4b21309b2660a5f1449c29742b855fe", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -877,18 +877,6 @@ impl<K: Show, V: Show> Show for BTreeMap<K, V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Ord, Sized? Q, V> Index<Q, V> for BTreeMap<K, V>\n-    where Q: BorrowFrom<K> + Ord\n-{\n-    fn index(&self, key: &Q) -> &V {\n-        self.get(key).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Ord, Sized? Q, V> Index<Q> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord\n@@ -900,18 +888,6 @@ impl<K: Ord, Sized? Q, V> Index<Q> for BTreeMap<K, V>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Ord, Sized? Q, V> IndexMut<Q, V> for BTreeMap<K, V>\n-    where Q: BorrowFrom<K> + Ord\n-{\n-    fn index_mut(&mut self, key: &Q) -> &mut V {\n-        self.get_mut(key).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Ord, Sized? Q, V> IndexMut<Q> for BTreeMap<K, V>\n     where Q: BorrowFrom<K> + Ord"}, {"sha": "ce9643b3b439199b30f7866e9d24dec588134677", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1360,17 +1360,6 @@ impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<A> Index<uint, A> for RingBuf<A> {\n-    #[inline]\n-    fn index<'a>(&'a self, i: &uint) -> &'a A {\n-        self.get(*i).expect(\"Out of bounds access\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<A> Index<uint> for RingBuf<A> {\n     type Output = A;\n@@ -1381,17 +1370,6 @@ impl<A> Index<uint> for RingBuf<A> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<A> IndexMut<uint, A> for RingBuf<A> {\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut A {\n-        self.get_mut(*i).expect(\"Out of bounds access\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<A> IndexMut<uint> for RingBuf<A> {\n     type Output = A;"}, {"sha": "4e3fd44072784b7094d6278500a35c44f35cfa82", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1190,17 +1190,6 @@ impl<S: hash::Writer, T: Hash<S>> Hash<S> for Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[experimental = \"waiting on Index stability\"]\n-impl<T> Index<uint,T> for Vec<T> {\n-    #[inline]\n-    fn index<'a>(&'a self, index: &uint) -> &'a T {\n-        &self.as_slice()[*index]\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[experimental = \"waiting on Index stability\"]\n impl<T> Index<uint> for Vec<T> {\n     type Output = T;\n@@ -1211,16 +1200,6 @@ impl<T> Index<uint> for Vec<T> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> IndexMut<uint,T> for Vec<T> {\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, index: &uint) -> &'a mut T {\n-        &mut self.as_mut_slice()[*index]\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<T> IndexMut<uint> for Vec<T> {\n     type Output = T;\n "}, {"sha": "cc757b656238e978512314af45b1ee05bbe2437f", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -517,17 +517,6 @@ impl<V> Extend<(uint, V)> for VecMap<V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<V> Index<uint, V> for VecMap<V> {\n-    #[inline]\n-    fn index<'a>(&'a self, i: &uint) -> &'a V {\n-        self.get(i).expect(\"key not present\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<V> Index<uint> for VecMap<V> {\n     type Output = V;\n \n@@ -537,17 +526,6 @@ impl<V> Index<uint> for VecMap<V> {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<V> IndexMut<uint, V> for VecMap<V> {\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut V {\n-        self.get_mut(i).expect(\"key not present\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<V> IndexMut<uint> for VecMap<V> {\n     type Output = V;"}, {"sha": "17e4c5f8215a8a2314b61aceedc738a6e950ecdb", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -717,15 +717,6 @@ macro_rules! shr_impl {\n \n shr_impl! { uint u8 u16 u32 u64 int i8 i16 i32 i64 }\n \n-// NOTE(stage0) remove trait after a snapshot\n-#[cfg(stage0)]\n-#[allow(missing_docs)]\n-#[lang=\"index\"]\n-pub trait Index<Sized? Index, Sized? Result> for Sized? {\n-    /// The method for the indexing (`Foo[Bar]`) operation\n-    fn index<'a>(&'a self, index: &Index) -> &'a Result;\n-}\n-\n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `arr[idx]` when used in an immutable context.\n ///\n@@ -755,7 +746,6 @@ pub trait Index<Sized? Index, Sized? Result> for Sized? {\n ///     Foo[Foo];\n /// }\n /// ```\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n #[lang=\"index\"]\n pub trait Index<Sized? Index> for Sized? {\n     type Sized? Output;\n@@ -764,15 +754,6 @@ pub trait Index<Sized? Index> for Sized? {\n     fn index<'a>(&'a self, index: &Index) -> &'a Self::Output;\n }\n \n-// NOTE(stage0) remove trait after a snapshot\n-#[cfg(stage0)]\n-#[allow(missing_docs)]\n-#[lang=\"index_mut\"]\n-pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n-    /// The method for the indexing (`Foo[Bar]`) operation\n-    fn index_mut<'a>(&'a mut self, index: &Index) -> &'a mut Result;\n-}\n-\n /// The `IndexMut` trait is used to specify the functionality of indexing\n /// operations like `arr[idx]`, when used in a mutable context.\n ///\n@@ -802,7 +783,6 @@ pub trait IndexMut<Sized? Index, Sized? Result> for Sized? {\n ///     &mut Foo[Foo];\n /// }\n /// ```\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n #[lang=\"index_mut\"]\n pub trait IndexMut<Sized? Index> for Sized? {\n     type Sized? Output;"}, {"sha": "7aed16173e988bbd852cc1fd1566de977f297eb5", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -531,17 +531,6 @@ impl<T> SliceExt for [T] {\n     }\n }\n \n-// NOTE(stage0) remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> ops::Index<uint, T> for [T] {\n-    fn index(&self, &index: &uint) -> &T {\n-        assert!(index < self.len());\n-\n-        unsafe { mem::transmute(self.repr().data.offset(index as int)) }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n impl<T> ops::Index<uint> for [T] {\n     type Output = T;\n \n@@ -552,17 +541,6 @@ impl<T> ops::Index<uint> for [T] {\n     }\n }\n \n-// NOTE(stage0) remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<T> ops::IndexMut<uint, T> for [T] {\n-    fn index_mut(&mut self, &index: &uint) -> &mut T {\n-        assert!(index < self.len());\n-\n-        unsafe { mem::transmute(self.repr().data.offset(index as int)) }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0) remove cfg after a snapshot\n impl<T> ops::IndexMut<uint> for [T] {\n     type Output = T;\n "}, {"sha": "b6fc6457fce4d8f3454c8ef0e90465f5802aa352", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -30,7 +30,6 @@ mod num;\n mod ops;\n mod option;\n mod ptr;\n-mod raw;\n mod result;\n mod slice;\n mod str;"}, {"sha": "4a459992098a08b8a86dff85264e26614e760996", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -220,6 +220,7 @@ fn test_ord() {\n     assert!(big > None);\n }\n \n+/* FIXME(#20575)\n #[test]\n fn test_collect() {\n     let v: Option<Vec<int>> = range(0i, 0).map(|_| Some(0i)).collect();\n@@ -234,12 +235,14 @@ fn test_collect() {\n     assert!(v == None);\n \n     // test that it does not take more elements than it needs\n-    let mut functions = [|| Some(()), || None, || panic!()];\n+    let mut functions: [Box<Fn() -> Option<()>>; 3] =\n+        [box || Some(()), box || None, box || panic!()];\n \n     let v: Option<Vec<()>> = functions.iter_mut().map(|f| (*f)()).collect();\n \n     assert!(v == None);\n }\n+*/\n \n #[test]\n fn test_cloned() {"}, {"sha": "f2c23c7c77327762e47e0fa49fa085bf3bc812fe", "filename": "src/libcoretest/raw.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Flibcoretest%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Flibcoretest%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fraw.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use core::raw::*;\n-use core::mem;\n-\n-#[test]\n-fn synthesize_closure() {\n-    unsafe {\n-        let x = 10;\n-        let f: |int| -> int = |y| x + y;\n-\n-        assert_eq!(f(20), 30);\n-\n-        let original_closure: Closure = mem::transmute(f);\n-\n-        let actual_function_pointer = original_closure.code;\n-        let environment = original_closure.env;\n-\n-        let new_closure = Closure {\n-            code: actual_function_pointer,\n-            env: environment\n-        };\n-\n-        let new_f: |int| -> int = mem::transmute(new_closure);\n-        assert_eq!(new_f(20), 30);\n-    }\n-}"}, {"sha": "52ea14dd05dd922ec87611c3b4d26ca0109dcd3b", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -67,6 +67,7 @@ pub fn test_impl_map_err() {\n     assert!(Err::<int, int>(1).map_err(|x| x + 1) == Err(2));\n }\n \n+/* FIXME(#20575)\n #[test]\n fn test_collect() {\n     let v: Result<Vec<int>, ()> = range(0i, 0).map(|_| Ok::<int, ()>(0)).collect();\n@@ -81,11 +82,13 @@ fn test_collect() {\n     assert!(v == Err(2));\n \n     // test that it does not take more elements than it needs\n-    let mut functions = [|| Ok(()), || Err(1i), || panic!()];\n+    let mut functions: [Box<Fn() -> Result<(), int>>; 3] =\n+        [box || Ok(()), box || Err(1i), box || panic!()];\n \n     let v: Result<Vec<()>, int> = functions.iter_mut().map(|f| (*f)()).collect();\n     assert!(v == Err(1));\n }\n+*/\n \n #[test]\n pub fn test_fmt_default() {"}, {"sha": "6666a21c31feebb5e874e4ec3d5d84651ce97aa5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -494,11 +494,7 @@ impl BoxPointers {\n         let mut n_uniq = 0i;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match t.sty {\n-                ty::ty_uniq(_) |\n-                ty::ty_closure(box ty::ClosureTy {\n-                    store: ty::UniqTraitStore,\n-                    ..\n-                }) => {\n+                ty::ty_uniq(_) => {\n                     n_uniq += 1;\n                 }\n "}, {"sha": "ac8dfc1675942c37055147762cb438bb94a20568", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -662,27 +662,27 @@ pub fn get_item_path(cdata: Cmd, id: ast::NodeId) -> Vec<ast_map::PathElem> {\n     item_path(lookup_item(id, cdata.data()))\n }\n \n-pub type DecodeInlinedItem<'a> = for<'tcx> |cdata: Cmd,\n-                                            tcx: &ty::ctxt<'tcx>,\n-                                            path: Vec<ast_map::PathElem>,\n-                                            par_doc: rbml::Doc|: 'a\n-                                            -> Result<&'tcx ast::InlinedItem,\n-                                                      Vec<ast_map::PathElem>>;\n+pub type DecodeInlinedItem<'a> =\n+    Box<for<'tcx> FnMut(Cmd,\n+                        &ty::ctxt<'tcx>,\n+                        Vec<ast_map::PathElem>,\n+                        rbml::Doc)\n+                        -> Result<&'tcx ast::InlinedItem, Vec<ast_map::PathElem>> + 'a>;\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeId,\n-                                decode_inlined_item: DecodeInlinedItem)\n+                                mut decode_inlined_item: DecodeInlinedItem)\n                                 -> csearch::found_ast<'tcx> {\n     debug!(\"Looking up item: {}\", id);\n     let item_doc = lookup_item(id, cdata.data());\n     let path = item_path(item_doc).init().to_vec();\n-    match decode_inlined_item(cdata, tcx, path, item_doc) {\n+    match decode_inlined_item.call_mut((cdata, tcx, path, item_doc)) {\n         Ok(ii) => csearch::found(ii),\n         Err(path) => {\n             match item_parent_item(item_doc) {\n                 Some(did) => {\n                     let did = translate_def_id(cdata, did);\n                     let parent_item = lookup_item(did.node, cdata.data());\n-                    match decode_inlined_item(cdata, tcx, path, parent_item) {\n+                    match decode_inlined_item.call_mut((cdata, tcx, path, parent_item)) {\n                         Ok(ii) => csearch::found_parent(did, ii),\n                         Err(_) => csearch::not_found\n                     }"}, {"sha": "14ab471a4b8314c77fd4c626f9dfbca4c44ed939", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -59,9 +59,8 @@ pub enum InlinedItemRef<'a> {\n \n pub type Encoder<'a> = writer::Encoder<'a, SeekableMemWriter>;\n \n-pub type EncodeInlinedItem<'a> = |ecx: &EncodeContext,\n-                                  rbml_w: &mut Encoder,\n-                                  ii: InlinedItemRef|: 'a;\n+pub type EncodeInlinedItem<'a> =\n+    Box<FnMut(&EncodeContext, &mut Encoder, InlinedItemRef) + 'a>;\n \n pub struct EncodeParams<'a, 'tcx: 'a> {\n     pub diag: &'a SpanHandler,\n@@ -953,7 +952,7 @@ fn encode_inlined_item(ecx: &EncodeContext,\n                        ii: InlinedItemRef) {\n     let mut eii = ecx.encode_inlined_item.borrow_mut();\n     let eii: &mut EncodeInlinedItem = &mut *eii;\n-    (*eii)(ecx, rbml_w, ii)\n+    eii.call_mut((ecx, rbml_w, ii))\n }\n \n const FN_FAMILY: char = 'f';"}, {"sha": "07dc13ff0d48f6e3b782bb1bbf858b57f935359c", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 253, "deletions": 129, "changes": 382, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -61,8 +61,7 @@ pub enum DefIdSource {\n     UnboxedClosureSource\n }\n \n-pub type conv_did<'a> =\n-    |source: DefIdSource, ast::DefId|: 'a -> ast::DefId;\n+// type conv_did = impl FnMut(DefIdSource, ast::DefId) -> ast::DefId;\n \n pub struct PState<'a, 'tcx: 'a> {\n     data: &'a [u8],\n@@ -145,70 +144,88 @@ fn data_log_string(data: &[u8], pos: uint) -> String {\n     buf\n }\n \n-pub fn parse_ty_closure_data<'tcx>(data: &[u8],\n-                                   crate_num: ast::CrateNum,\n-                                   pos: uint,\n-                                   tcx: &ty::ctxt<'tcx>,\n-                                   conv: conv_did)\n-                                   -> ty::ClosureTy<'tcx> {\n+pub fn parse_ty_closure_data<'tcx, F>(data: &[u8],\n+                                      crate_num: ast::CrateNum,\n+                                      pos: uint,\n+                                      tcx: &ty::ctxt<'tcx>,\n+                                      conv: F)\n+                                      -> ty::ClosureTy<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_closure_ty(&mut st, conv)\n }\n \n-pub fn parse_ty_data<'tcx>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n-                           tcx: &ty::ctxt<'tcx>, conv: conv_did) -> Ty<'tcx> {\n+pub fn parse_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n+                              tcx: &ty::ctxt<'tcx>, conv: F) -> Ty<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     debug!(\"parse_ty_data {}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_ty(&mut st, conv)\n }\n \n-pub fn parse_region_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,\n-                         conv: conv_did) -> ty::Region {\n+pub fn parse_region_data<F>(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,\n+                            conv: F) -> ty::Region where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     debug!(\"parse_region_data {}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_region(&mut st, conv)\n }\n \n-pub fn parse_bare_fn_ty_data<'tcx>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n-                                   tcx: &ty::ctxt<'tcx>, conv: conv_did)\n-                                   -> ty::BareFnTy<'tcx> {\n+pub fn parse_bare_fn_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n+                                      tcx: &ty::ctxt<'tcx>, conv: F)\n+                                      -> ty::BareFnTy<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     debug!(\"parse_bare_fn_ty_data {}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_bare_fn_ty(&mut st, conv)\n }\n \n-pub fn parse_trait_ref_data<'tcx>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n-                                  tcx: &ty::ctxt<'tcx>, conv: conv_did)\n-                                  -> Rc<ty::TraitRef<'tcx>> {\n+pub fn parse_trait_ref_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n+                                     tcx: &ty::ctxt<'tcx>, conv: F)\n+                                     -> Rc<ty::TraitRef<'tcx>> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     debug!(\"parse_trait_ref_data {}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_trait_ref(&mut st, conv)\n }\n \n-pub fn parse_substs_data<'tcx>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n-                               tcx: &ty::ctxt<'tcx>, conv: conv_did) -> subst::Substs<'tcx> {\n+pub fn parse_substs_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n+                                  tcx: &ty::ctxt<'tcx>, conv: F) -> subst::Substs<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     debug!(\"parse_substs_data {}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_substs(&mut st, conv)\n }\n \n-pub fn parse_bounds_data<'tcx>(data: &[u8], crate_num: ast::CrateNum,\n-                               pos: uint, tcx: &ty::ctxt<'tcx>, conv: conv_did)\n-                               -> ty::ParamBounds<'tcx> {\n+pub fn parse_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum,\n+                                  pos: uint, tcx: &ty::ctxt<'tcx>, conv: F)\n+                                  -> ty::ParamBounds<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_bounds(&mut st, conv)\n }\n \n-pub fn parse_existential_bounds_data<'tcx>(data: &[u8], crate_num: ast::CrateNum,\n-                                           pos: uint, tcx: &ty::ctxt<'tcx>, conv: conv_did)\n-                                           -> ty::ExistentialBounds<'tcx> {\n+pub fn parse_existential_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum,\n+                                              pos: uint, tcx: &ty::ctxt<'tcx>, conv: F)\n+                                              -> ty::ExistentialBounds<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_existential_bounds(&mut st, conv)\n }\n \n-pub fn parse_builtin_bounds_data(data: &[u8], crate_num: ast::CrateNum,\n-                                 pos: uint, tcx: &ty::ctxt, conv: conv_did)\n-                                 -> ty::BuiltinBounds {\n+pub fn parse_builtin_bounds_data<F>(data: &[u8], crate_num: ast::CrateNum,\n+                                    pos: uint, tcx: &ty::ctxt, conv: F)\n+                                    -> ty::BuiltinBounds where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_builtin_bounds(&mut st, conv)\n }\n@@ -226,10 +243,12 @@ fn parse_size(st: &mut PState) -> Option<uint> {\n     }\n }\n \n-fn parse_trait_store(st: &mut PState, conv: conv_did) -> ty::TraitStore {\n+fn parse_trait_store_<F>(st: &mut PState, conv: &mut F) -> ty::TraitStore where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     match next(st) {\n         '~' => ty::UniqTraitStore,\n-        '&' => ty::RegionTraitStore(parse_region(st, conv), parse_mutability(st)),\n+        '&' => ty::RegionTraitStore(parse_region_(st, conv), parse_mutability(st)),\n         c => {\n             st.tcx.sess.bug(format!(\"parse_trait_store(): bad input '{}'\",\n                                     c)[])\n@@ -253,39 +272,52 @@ fn parse_vec_per_param_space<'a, 'tcx, T, F>(st: &mut PState<'a, 'tcx>,\n     r\n }\n \n-fn parse_substs<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n-                          conv: conv_did) -> subst::Substs<'tcx> {\n+fn parse_substs<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                             mut conv: F) -> subst::Substs<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_substs_(st, &mut conv)\n+}\n+\n+fn parse_substs_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                              conv: &mut F) -> subst::Substs<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let regions =\n-        parse_region_substs(st, |x,y| conv(x,y));\n+        parse_region_substs_(st, conv);\n \n     let types =\n-        parse_vec_per_param_space(st, |st| parse_ty(st, |x,y| conv(x,y)));\n+        parse_vec_per_param_space(st, |st| parse_ty_(st, conv));\n \n     subst::Substs { types: types,\n                     regions: regions }\n }\n \n-fn parse_region_substs(st: &mut PState, conv: conv_did) -> subst::RegionSubsts {\n+fn parse_region_substs_<F>(st: &mut PState, conv: &mut F) -> subst::RegionSubsts where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     match next(st) {\n         'e' => subst::ErasedRegions,\n         'n' => {\n             subst::NonerasedRegions(\n                 parse_vec_per_param_space(\n-                    st, |st| parse_region(st, |x,y| conv(x,y))))\n+                    st, |st| parse_region_(st, conv)))\n         }\n         _ => panic!(\"parse_bound_region: bad input\")\n     }\n }\n \n-fn parse_bound_region(st: &mut PState, conv: conv_did) -> ty::BoundRegion {\n+fn parse_bound_region_<F>(st: &mut PState, conv: &mut F) -> ty::BoundRegion where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     match next(st) {\n         'a' => {\n             let id = parse_u32(st);\n             assert_eq!(next(st), '|');\n             ty::BrAnon(id)\n         }\n         '[' => {\n-            let def = parse_def(st, RegionParameter, |x,y| conv(x,y));\n+            let def = parse_def_(st, RegionParameter, conv);\n             let ident = token::str_to_ident(parse_str(st, ']')[]);\n             ty::BrNamed(def, ident.name)\n         }\n@@ -299,13 +331,21 @@ fn parse_bound_region(st: &mut PState, conv: conv_did) -> ty::BoundRegion {\n     }\n }\n \n-fn parse_region(st: &mut PState, conv: conv_did) -> ty::Region {\n+fn parse_region<F>(st: &mut PState, mut conv: F) -> ty::Region where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_region_(st, &mut conv)\n+}\n+\n+fn parse_region_<F>(st: &mut PState, conv: &mut F) -> ty::Region where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     match next(st) {\n       'b' => {\n         assert_eq!(next(st), '[');\n         let id = ty::DebruijnIndex::new(parse_u32(st));\n         assert_eq!(next(st), '|');\n-        let br = parse_bound_region(st, |x,y| conv(x,y));\n+        let br = parse_bound_region_(st, conv);\n         assert_eq!(next(st), ']');\n         ty::ReLateBound(id, br)\n       }\n@@ -324,7 +364,7 @@ fn parse_region(st: &mut PState, conv: conv_did) -> ty::Region {\n         assert_eq!(next(st), '[');\n         let scope = parse_scope(st);\n         assert_eq!(next(st), '|');\n-        let br = parse_bound_region(st, |x,y| conv(x,y));\n+        let br = parse_bound_region_(st, conv);\n         assert_eq!(next(st), ']');\n         ty::ReFree(ty::FreeRegion { scope: scope,\n                                     bound_region: br})\n@@ -375,14 +415,31 @@ fn parse_str(st: &mut PState, term: char) -> String {\n     result\n }\n \n-fn parse_trait_ref<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n-                             -> Rc<ty::TraitRef<'tcx>> {\n-    let def = parse_def(st, NominalType, |x,y| conv(x,y));\n-    let substs = st.tcx.mk_substs(parse_substs(st, |x,y| conv(x,y)));\n+fn parse_trait_ref<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F)\n+                                -> Rc<ty::TraitRef<'tcx>> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_trait_ref_(st, &mut conv)\n+}\n+\n+fn parse_trait_ref_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n+                              -> Rc<ty::TraitRef<'tcx>> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    let def = parse_def_(st, NominalType, conv);\n+    let substs = st.tcx.mk_substs(parse_substs_(st, conv));\n     Rc::new(ty::TraitRef {def_id: def, substs: substs})\n }\n \n-fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n+fn parse_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F) -> Ty<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_ty_(st, &mut conv)\n+}\n+\n+fn parse_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> Ty<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let tcx = st.tcx;\n     match next(st) {\n       'b' => return tcx.types.bool,\n@@ -406,15 +463,15 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n       'c' => return tcx.types.char,\n       't' => {\n         assert_eq!(next(st), '[');\n-        let def = parse_def(st, NominalType, |x,y| conv(x,y));\n-        let substs = parse_substs(st, |x,y| conv(x,y));\n+        let def = parse_def_(st, NominalType, conv);\n+        let substs = parse_substs_(st, conv);\n         assert_eq!(next(st), ']');\n         return ty::mk_enum(tcx, def, st.tcx.mk_substs(substs));\n       }\n       'x' => {\n         assert_eq!(next(st), '[');\n-        let trait_ref = ty::Binder(parse_trait_ref(st, |x,y| conv(x,y)));\n-        let bounds = parse_existential_bounds(st, |x,y| conv(x,y));\n+        let trait_ref = ty::Binder(parse_trait_ref_(st, conv));\n+        let bounds = parse_existential_bounds_(st, conv);\n         assert_eq!(next(st), ']');\n         return ty::mk_trait(tcx, trait_ref, bounds);\n       }\n@@ -427,15 +484,15 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n         let name = token::intern(parse_str(st, ']')[]);\n         return ty::mk_param(tcx, space, index, name);\n       }\n-      '~' => return ty::mk_uniq(tcx, parse_ty(st, |x,y| conv(x,y))),\n-      '*' => return ty::mk_ptr(tcx, parse_mt(st, |x,y| conv(x,y))),\n+      '~' => return ty::mk_uniq(tcx, parse_ty_(st, conv)),\n+      '*' => return ty::mk_ptr(tcx, parse_mt_(st, conv)),\n       '&' => {\n-        let r = parse_region(st, |x,y| conv(x,y));\n-        let mt = parse_mt(st, |x,y| conv(x,y));\n+        let r = parse_region_(st, conv);\n+        let mt = parse_mt_(st, conv);\n         return ty::mk_rptr(tcx, tcx.mk_region(r), mt);\n       }\n       'V' => {\n-        let t = parse_ty(st, |x,y| conv(x,y));\n+        let t = parse_ty_(st, conv);\n         let sz = parse_size(st);\n         return ty::mk_vec(tcx, t, sz);\n       }\n@@ -445,21 +502,18 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n       'T' => {\n         assert_eq!(next(st), '[');\n         let mut params = Vec::new();\n-        while peek(st) != ']' { params.push(parse_ty(st, |x,y| conv(x,y))); }\n+        while peek(st) != ']' { params.push(parse_ty_(st, conv)); }\n         st.pos = st.pos + 1u;\n         return ty::mk_tup(tcx, params);\n       }\n-      'f' => {\n-        return ty::mk_closure(tcx, parse_closure_ty(st, |x,y| conv(x,y)));\n-      }\n       'F' => {\n-          let def_id = parse_def(st, NominalType, |x,y| conv(x,y));\n+          let def_id = parse_def_(st, NominalType, conv);\n           return ty::mk_bare_fn(tcx, Some(def_id),\n-                                tcx.mk_bare_fn(parse_bare_fn_ty(st, |x,y| conv(x,y))));\n+                                tcx.mk_bare_fn(parse_bare_fn_ty_(st, conv)));\n       }\n       'G' => {\n           return ty::mk_bare_fn(tcx, None,\n-                                tcx.mk_bare_fn(parse_bare_fn_ty(st, |x,y| conv(x,y))));\n+                                tcx.mk_bare_fn(parse_bare_fn_ty_(st, conv)));\n       }\n       '#' => {\n         let pos = parse_hex(st);\n@@ -478,34 +532,34 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n             pos: pos,\n             .. *st\n         };\n-        let tt = parse_ty(&mut ps, |x,y| conv(x,y));\n+        let tt = parse_ty_(&mut ps, conv);\n         tcx.rcache.borrow_mut().insert(key, tt);\n         return tt;\n       }\n       '\\\"' => {\n-        let _ = parse_def(st, TypeWithId, |x,y| conv(x,y));\n-        let inner = parse_ty(st, |x,y| conv(x,y));\n+        let _ = parse_def_(st, TypeWithId, conv);\n+        let inner = parse_ty_(st, conv);\n         inner\n       }\n       'a' => {\n           assert_eq!(next(st), '[');\n-          let did = parse_def(st, NominalType, |x,y| conv(x,y));\n-          let substs = parse_substs(st, |x,y| conv(x,y));\n+          let did = parse_def_(st, NominalType, conv);\n+          let substs = parse_substs_(st, conv);\n           assert_eq!(next(st), ']');\n           return ty::mk_struct(st.tcx, did, st.tcx.mk_substs(substs));\n       }\n       'k' => {\n           assert_eq!(next(st), '[');\n-          let did = parse_def(st, UnboxedClosureSource, |x,y| conv(x,y));\n-          let region = parse_region(st, |x,y| conv(x,y));\n-          let substs = parse_substs(st, |x,y| conv(x,y));\n+          let did = parse_def_(st, UnboxedClosureSource, conv);\n+          let region = parse_region_(st, conv);\n+          let substs = parse_substs_(st, conv);\n           assert_eq!(next(st), ']');\n           return ty::mk_unboxed_closure(st.tcx, did,\n                   st.tcx.mk_region(region), st.tcx.mk_substs(substs));\n       }\n       'P' => {\n           assert_eq!(next(st), '[');\n-          let trait_ref = parse_trait_ref(st, |x,y| conv(x,y));\n+          let trait_ref = parse_trait_ref_(st, conv);\n           let name = token::intern(parse_str(st, ']').as_slice());\n           return ty::mk_projection(tcx, trait_ref, name);\n       }\n@@ -523,14 +577,17 @@ fn parse_mutability(st: &mut PState) -> ast::Mutability {\n     }\n }\n \n-fn parse_mt<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> ty::mt<'tcx> {\n+fn parse_mt_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> ty::mt<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let m = parse_mutability(st);\n-    ty::mt { ty: parse_ty(st, |x,y| conv(x,y)), mutbl: m }\n+    ty::mt { ty: parse_ty_(st, conv), mutbl: m }\n }\n \n-fn parse_def(st: &mut PState, source: DefIdSource,\n-             conv: conv_did) -> ast::DefId {\n-    return conv(source, scan(st, |c| { c == '|' }, parse_def_id));\n+fn parse_def_<F>(st: &mut PState, source: DefIdSource, conv: &mut F) -> ast::DefId where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    return (*conv)(source, scan(st, |c| { c == '|' }, parse_def_id));\n }\n \n fn parse_uint(st: &mut PState) -> uint {\n@@ -592,13 +649,22 @@ fn parse_onceness(c: char) -> ast::Onceness {\n     }\n }\n \n-fn parse_closure_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n-                              conv: conv_did) -> ty::ClosureTy<'tcx> {\n+fn parse_closure_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                                 mut conv: F) -> ty::ClosureTy<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_closure_ty_(st, &mut conv)\n+}\n+\n+fn parse_closure_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                                 conv: &mut F) -> ty::ClosureTy<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let unsafety = parse_unsafety(next(st));\n     let onceness = parse_onceness(next(st));\n-    let store = parse_trait_store(st, |x,y| conv(x,y));\n-    let bounds = parse_existential_bounds(st, |x,y| conv(x,y));\n-    let sig = parse_sig(st, |x,y| conv(x,y));\n+    let store = parse_trait_store_(st, conv);\n+    let bounds = parse_existential_bounds_(st, conv);\n+    let sig = parse_sig_(st, conv);\n     let abi = parse_abi_set(st);\n     ty::ClosureTy {\n         unsafety: unsafety,\n@@ -610,23 +676,34 @@ fn parse_closure_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n     }\n }\n \n-fn parse_bare_fn_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n-                              conv: conv_did) -> ty::BareFnTy<'tcx> {\n+fn parse_bare_fn_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                                 mut conv: F) -> ty::BareFnTy<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_bare_fn_ty_(st, &mut conv)\n+}\n+\n+fn parse_bare_fn_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                                 conv: &mut F) -> ty::BareFnTy<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let unsafety = parse_unsafety(next(st));\n     let abi = parse_abi_set(st);\n-    let sig = parse_sig(st, |x,y| conv(x,y));\n+    let sig = parse_sig_(st, conv);\n     ty::BareFnTy {\n         unsafety: unsafety,\n         abi: abi,\n         sig: sig\n     }\n }\n \n-fn parse_sig<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> ty::PolyFnSig<'tcx> {\n+fn parse_sig_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> ty::PolyFnSig<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     assert_eq!(next(st), '[');\n     let mut inputs = Vec::new();\n     while peek(st) != ']' {\n-        inputs.push(parse_ty(st, |x,y| conv(x,y)));\n+        inputs.push(parse_ty_(st, conv));\n     }\n     st.pos += 1u; // eat the ']'\n     let variadic = match next(st) {\n@@ -639,7 +716,7 @@ fn parse_sig<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> ty::PolyFnS\n           st.pos += 1u;\n           ty::FnDiverging\n         }\n-        _ => ty::FnConverging(parse_ty(st, |x,y| conv(x,y)))\n+        _ => ty::FnConverging(parse_ty_(st, conv))\n     };\n     ty::Binder(ty::FnSig {inputs: inputs,\n                         output: output,\n@@ -672,66 +749,87 @@ pub fn parse_def_id(buf: &[u8]) -> ast::DefId {\n     ast::DefId { krate: crate_num, node: def_num }\n }\n \n-pub fn parse_predicate_data<'tcx>(data: &[u8],\n-                                  start: uint,\n-                                  crate_num: ast::CrateNum,\n-                                  tcx: &ty::ctxt<'tcx>,\n-                                  conv: conv_did)\n-                                  -> ty::Predicate<'tcx>\n+pub fn parse_predicate_data<'tcx, F>(data: &[u8],\n+                                     start: uint,\n+                                     crate_num: ast::CrateNum,\n+                                     tcx: &ty::ctxt<'tcx>,\n+                                     conv: F)\n+                                     -> ty::Predicate<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     let mut st = parse_state_from_data(data, crate_num, start, tcx);\n     parse_predicate(&mut st, conv)\n }\n \n-pub fn parse_predicate<'a,'tcx>(st: &mut PState<'a, 'tcx>,\n-                                conv: conv_did)\n-                                -> ty::Predicate<'tcx>\n+pub fn parse_predicate<'a,'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                                   mut conv: F)\n+                                   -> ty::Predicate<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_predicate_(st, &mut conv)\n+}\n+\n+fn parse_predicate_<'a,'tcx, F>(st: &mut PState<'a, 'tcx>,\n+                                conv: &mut F)\n+                                -> ty::Predicate<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     match next(st) {\n-        't' => ty::Binder(parse_trait_ref(st, conv)).as_predicate(),\n-        'e' => ty::Binder(ty::EquatePredicate(parse_ty(st, |x,y| conv(x,y)),\n-                                              parse_ty(st, |x,y| conv(x,y)))).as_predicate(),\n-        'r' => ty::Binder(ty::OutlivesPredicate(parse_region(st, |x,y| conv(x,y)),\n-                                                parse_region(st, |x,y| conv(x,y)))).as_predicate(),\n-        'o' => ty::Binder(ty::OutlivesPredicate(parse_ty(st, |x,y| conv(x,y)),\n-                                                parse_region(st, |x,y| conv(x,y)))).as_predicate(),\n-        'p' => ty::Binder(parse_projection_predicate(st, conv)).as_predicate(),\n+        't' => ty::Binder(parse_trait_ref_(st, conv)).as_predicate(),\n+        'e' => ty::Binder(ty::EquatePredicate(parse_ty_(st, conv),\n+                                              parse_ty_(st, conv))).as_predicate(),\n+        'r' => ty::Binder(ty::OutlivesPredicate(parse_region_(st, conv),\n+                                                parse_region_(st, conv))).as_predicate(),\n+        'o' => ty::Binder(ty::OutlivesPredicate(parse_ty_(st, conv),\n+                                                parse_region_(st, conv))).as_predicate(),\n+        'p' => ty::Binder(parse_projection_predicate_(st, conv)).as_predicate(),\n         c => panic!(\"Encountered invalid character in metadata: {}\", c)\n     }\n }\n \n-fn parse_projection_predicate<'a,'tcx>(\n+fn parse_projection_predicate_<'a,'tcx, F>(\n     st: &mut PState<'a, 'tcx>,\n-    conv: conv_did)\n-     -> ty::ProjectionPredicate<'tcx>\n+    conv: &mut F,\n+) -> ty::ProjectionPredicate<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy {\n-            trait_ref: parse_trait_ref(st, |x,y| conv(x,y)),\n+            trait_ref: parse_trait_ref_(st, conv),\n             item_name: token::str_to_ident(parse_str(st, '|').as_slice()).name,\n         },\n-        ty: parse_ty(st, |x,y| conv(x,y)),\n+        ty: parse_ty_(st, conv),\n     }\n }\n \n-pub fn parse_type_param_def_data<'tcx>(data: &[u8], start: uint,\n-                                       crate_num: ast::CrateNum, tcx: &ty::ctxt<'tcx>,\n-                                       conv: conv_did) -> ty::TypeParameterDef<'tcx>\n+pub fn parse_type_param_def_data<'tcx, F>(data: &[u8], start: uint,\n+                                          crate_num: ast::CrateNum, tcx: &ty::ctxt<'tcx>,\n+                                          conv: F) -> ty::TypeParameterDef<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     let mut st = parse_state_from_data(data, crate_num, start, tcx);\n     parse_type_param_def(&mut st, conv)\n }\n \n-fn parse_type_param_def<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n-                                  -> ty::TypeParameterDef<'tcx> {\n+fn parse_type_param_def<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F)\n+                                     -> ty::TypeParameterDef<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_type_param_def_(st, &mut conv)\n+}\n+\n+fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n+                                      -> ty::TypeParameterDef<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let name = parse_name(st, ':');\n-    let def_id = parse_def(st, NominalType, |x,y| conv(x,y));\n+    let def_id = parse_def_(st, NominalType, conv);\n     let space = parse_param_space(st);\n     assert_eq!(next(st), '|');\n     let index = parse_u32(st);\n     assert_eq!(next(st), '|');\n-    let bounds = parse_bounds(st, |x,y| conv(x,y));\n-    let default = parse_opt(st, |st| parse_ty(st, |x,y| conv(x,y)));\n+    let bounds = parse_bounds_(st, conv);\n+    let default = parse_opt(st, |st| parse_ty_(st, conv));\n \n     ty::TypeParameterDef {\n         name: name,\n@@ -743,12 +841,21 @@ fn parse_type_param_def<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n     }\n }\n \n-fn parse_existential_bounds<'a,'tcx>(st: &mut PState<'a,'tcx>,\n-                                     conv: conv_did)\n-                                     -> ty::ExistentialBounds<'tcx>\n+fn parse_existential_bounds<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n+                                        mut conv: F)\n+                                        -> ty::ExistentialBounds<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_existential_bounds_(st, &mut conv)\n+}\n+\n+fn parse_existential_bounds_<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n+                                        conv: &mut F)\n+                                        -> ty::ExistentialBounds<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     let ty::ParamBounds { trait_bounds, mut region_bounds, builtin_bounds, projection_bounds } =\n-         parse_bounds(st, conv);\n+         parse_bounds_(st, conv);\n     assert_eq!(region_bounds.len(), 1);\n     assert_eq!(trait_bounds.len(), 0);\n     let region_bound = region_bounds.pop().unwrap();\n@@ -757,7 +864,15 @@ fn parse_existential_bounds<'a,'tcx>(st: &mut PState<'a,'tcx>,\n                                    projection_bounds: projection_bounds };\n }\n \n-fn parse_builtin_bounds(st: &mut PState, _conv: conv_did) -> ty::BuiltinBounds {\n+fn parse_builtin_bounds<F>(st: &mut PState, mut _conv: F) -> ty::BuiltinBounds where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_builtin_bounds_(st, &mut _conv)\n+}\n+\n+fn parse_builtin_bounds_<F>(st: &mut PState, _conv: &mut F) -> ty::BuiltinBounds where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n     let mut builtin_bounds = ty::empty_builtin_bounds();\n \n     loop {\n@@ -784,9 +899,18 @@ fn parse_builtin_bounds(st: &mut PState, _conv: conv_did) -> ty::BuiltinBounds {\n     }\n }\n \n-fn parse_bounds<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n-                          -> ty::ParamBounds<'tcx> {\n-    let builtin_bounds = parse_builtin_bounds(st, |x,y| conv(x,y));\n+fn parse_bounds<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F)\n+                             -> ty::ParamBounds<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    parse_bounds_(st, &mut conv)\n+}\n+\n+fn parse_bounds_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n+                              -> ty::ParamBounds<'tcx> where\n+    F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n+{\n+    let builtin_bounds = parse_builtin_bounds_(st, conv);\n \n     let mut param_bounds = ty::ParamBounds {\n         region_bounds: Vec::new(),\n@@ -798,15 +922,15 @@ fn parse_bounds<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n         match next(st) {\n             'R' => {\n                 param_bounds.region_bounds.push(\n-                    parse_region(st, |x, y| conv (x, y)));\n+                    parse_region_(st, conv));\n             }\n             'I' => {\n                 param_bounds.trait_bounds.push(\n-                    ty::Binder(parse_trait_ref(st, |x,y| conv(x,y))));\n+                    ty::Binder(parse_trait_ref_(st, conv)));\n             }\n             'P' => {\n                 param_bounds.projection_bounds.push(\n-                    ty::Binder(parse_projection_predicate(st, |x,y| conv(x,y))));\n+                    ty::Binder(parse_projection_predicate_(st, conv)));\n             }\n             '.' => {\n                 return param_bounds;"}, {"sha": "0042209aced6ad4e17d1392c72e374e9d35f8f34", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -119,10 +119,6 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_str => {\n             mywrite!(w, \"v\");\n         }\n-        ty::ty_closure(ref f) => {\n-            mywrite!(w, \"f\");\n-            enc_closure_ty(w, cx, &**f);\n-        }\n         ty::ty_bare_fn(Some(def_id), f) => {\n             mywrite!(w, \"F\");\n             mywrite!(w, \"{}|\", (cx.ds)(def_id));"}, {"sha": "93a19a01f668fb26d65d2b8b07ba29c40dfed7fd", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1031,13 +1031,6 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n         self.emit_enum(\"AutoAdjustment\", |this| {\n             match *adj {\n-                ty::AdjustAddEnv(def_id, store) => {\n-                    this.emit_enum_variant(\"AdjustAddEnv\", 0, 2, |this| {\n-                        this.emit_enum_variant_arg(0, |this| def_id.encode(this));\n-                        this.emit_enum_variant_arg(1, |this| store.encode(this))\n-                    })\n-                }\n-\n                 ty::AdjustReifyFnPointer(def_id) => {\n                     this.emit_enum_variant(\"AdjustReifyFnPointer\", 1, 2, |this| {\n                         this.emit_enum_variant_arg(0, |this| def_id.encode(this))\n@@ -1678,14 +1671,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n             let variants = [\"AutoAddEnv\", \"AutoDerefRef\"];\n             this.read_enum_variant(&variants, |this, i| {\n                 Ok(match i {\n-                    0 => {\n-                        let def_id: ast::DefId =\n-                            this.read_def_id(dcx);\n-                        let store: ty::TraitStore =\n-                            this.read_enum_variant_arg(0, |this| Decodable::decode(this)).unwrap();\n-\n-                        ty::AdjustAddEnv(def_id, store.tr(dcx))\n-                    }\n                     1 => {\n                         let def_id: ast::DefId =\n                             this.read_def_id(dcx);"}, {"sha": "a95523f2e06005f3f72af857d4a8bd0dc1e6e788", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -132,7 +132,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n-            |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n             csearch::found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n@@ -172,7 +172,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n             None => {}\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n-            |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n+            box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n             csearch::found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None"}, {"sha": "f7eea6e5cb7c9cc45da7be1b13ae6c291afd87a2", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -33,7 +33,6 @@ enum UnsafeContext {\n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n         ty::ty_bare_fn(_, ref f) => f.unsafety == ast::Unsafety::Unsafe,\n-        ty::ty_closure(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n         _ => false,\n     }\n }"}, {"sha": "df2a4e4c2532a988616508c89bab76516f8a1c73", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -656,19 +656,6 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             ty::ty_bare_fn(..) => {\n                 self.consume_expr(callee);\n             }\n-            ty::ty_closure(ref f) => {\n-                match f.onceness {\n-                    ast::Many => {\n-                        self.borrow_expr(callee,\n-                                         ty::ReScope(call_scope),\n-                                         ty::UniqueImmBorrow,\n-                                         ClosureInvocation);\n-                    }\n-                    ast::Once => {\n-                        self.consume_expr(callee);\n-                    }\n-                }\n-            }\n             ty::ty_err => { }\n             _ => {\n                 let overloaded_call_type =\n@@ -836,7 +823,6 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             None => { }\n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustAddEnv(..) |\n                     ty::AdjustReifyFnPointer(..) => {\n                         // Creating a closure/fn-pointer consumes the\n                         // input and stores it into the resulting"}, {"sha": "42bc70b5b561fd12b57db8ffd50ea559f078fd16", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -80,9 +80,6 @@ pub fn simplify_type(tcx: &ty::ctxt,\n         ty::ty_tup(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n-        ty::ty_closure(ref f) => {\n-            Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n-        }\n         ty::ty_bare_fn(_, ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }"}, {"sha": "65de3a083d2d9154cb3268df618a033c4e4a283c", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -71,7 +71,6 @@ use middle::ty::{self, Ty};\n use util::ppaux;\n use util::ppaux::Repr;\n \n-use syntax::abi;\n use syntax::ast;\n \n // Note: Coerce is not actually a combiner, in that it does not\n@@ -160,15 +159,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 };\n             }\n \n-            ty::ty_closure(box ty::ClosureTy {\n-                    store: ty::RegionTraitStore(..),\n-                    ..\n-                }) => {\n-                return self.unpack_actual_value(a, |a| {\n-                    self.coerce_borrowed_fn(a, b)\n-                });\n-            }\n-\n             _ => {}\n         }\n \n@@ -511,21 +501,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                    a.repr(self.tcx()), b.repr(self.tcx()));\n \n             match b.sty {\n-                ty::ty_closure(ref f) => {\n-                    if fn_ty_a.abi != abi::Rust || fn_ty_a.unsafety != ast::Unsafety::Normal {\n-                        return self.subtype(a, b);\n-                    }\n-\n-                    let fn_ty_b = (*f).clone();\n-                    let adj = ty::AdjustAddEnv(fn_def_id_a, fn_ty_b.store);\n-                    let a_closure = ty::mk_closure(self.tcx(),\n-                                                   ty::ClosureTy {\n-                                                       sig: fn_ty_a.sig.clone(),\n-                                                       .. *fn_ty_b\n-                                                   });\n-                    try!(self.subtype(a_closure, b));\n-                    Ok(Some(adj))\n-                }\n                 ty::ty_bare_fn(None, _) => {\n                     let a_fn_pointer = ty::mk_bare_fn(self.tcx(), None, fn_ty_a);\n                     try!(self.subtype(a_fn_pointer, b));"}, {"sha": "dd711fcbf022eed6d76a7d49e45db83b026d6795", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -644,12 +644,6 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n             Ok(ty::mk_bare_fn(tcx, a_opt_def_id, tcx.mk_bare_fn(fty)))\n         }\n \n-      (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {\n-        this.closure_tys(&**a_fty, &**b_fty).and_then(|fty| {\n-            Ok(ty::mk_closure(tcx, fty))\n-        })\n-      }\n-\n       (&ty::ty_projection(ref a_data), &ty::ty_projection(ref b_data)) => {\n           let projection_ty = try!(this.projection_tys(a_data, b_data));\n           Ok(ty::mk_projection(tcx, projection_ty.trait_ref, projection_ty.item_name))"}, {"sha": "608ae31475327e4b3430336fef69183f1e1b1583", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -152,7 +152,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::ty_ptr(..) |\n             ty::ty_rptr(..) |\n             ty::ty_bare_fn(..) |\n-            ty::ty_closure(..) |\n             ty::ty_trait(..) |\n             ty::ty_struct(..) |\n             ty::ty_unboxed_closure(..) |"}, {"sha": "dd61db4270ce3499bf2642edd8779d37a38578fa", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -197,8 +197,7 @@ pub enum deref_kind {\n // pointer adjustment).\n pub fn deref_kind(t: Ty) -> McResult<deref_kind> {\n     match t.sty {\n-        ty::ty_uniq(_) |\n-        ty::ty_closure(box ty::ClosureTy {store: ty::UniqTraitStore, ..}) => {\n+        ty::ty_uniq(_) => {\n             Ok(deref_ptr(Unique))\n         }\n \n@@ -207,13 +206,6 @@ pub fn deref_kind(t: Ty) -> McResult<deref_kind> {\n             Ok(deref_ptr(BorrowedPtr(kind, *r)))\n         }\n \n-        ty::ty_closure(box ty::ClosureTy {\n-                store: ty::RegionTraitStore(r, _),\n-                ..\n-            }) => {\n-            Ok(deref_ptr(BorrowedPtr(ty::ImmBorrow, r)))\n-        }\n-\n         ty::ty_ptr(ref mt) => {\n             Ok(deref_ptr(UnsafePtr(mt.mutbl)))\n         }\n@@ -421,8 +413,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustAddEnv(..) | ty::AdjustReifyFnPointer(..) => {\n-                        debug!(\"cat_expr(AdjustAddEnv|AdjustReifyFnPointer): {}\",\n+                    ty::AdjustReifyFnPointer(..) => {\n+                        debug!(\"cat_expr(AdjustReifyFnPointer): {}\",\n                                expr.repr(self.tcx()));\n                         // Convert a bare fn to a closure by adding NULL env.\n                         // Result is an rvalue.\n@@ -592,25 +584,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           def::DefUpvar(var_id, fn_node_id, _) => {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n-                  ty::ty_closure(ref closure_ty) => {\n-                      // Translate old closure type info into unboxed\n-                      // closure kind/capture mode\n-                      let (mode, kind) = match (closure_ty.store, closure_ty.onceness) {\n-                          // stack closure\n-                          (ty::RegionTraitStore(..), ast::Many) => {\n-                              (ast::CaptureByRef, ty::FnMutUnboxedClosureKind)\n-                          }\n-                          // proc or once closure\n-                          (_, ast::Once) => {\n-                              (ast::CaptureByValue, ty::FnOnceUnboxedClosureKind)\n-                          }\n-                          // There should be no such old closure type\n-                          (ty::UniqTraitStore, ast::Many) => {\n-                              self.tcx().sess.span_bug(span, \"Impossible closure type\");\n-                          }\n-                      };\n-                      self.cat_upvar(id, span, var_id, fn_node_id, kind, mode, false)\n-                  }\n                   ty::ty_unboxed_closure(closure_id, _, _) => {\n                       let kind = self.typer.unboxed_closure_kind(closure_id);\n                       let mode = self.typer.capture_mode(fn_node_id);"}, {"sha": "50e328ef0e3c35b9f4be4ec026fcc9c841ce25c1", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -750,7 +750,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n         debug!(\"privacy - path {}\", self.nodestr(path_id));\n         let orig_def = self.tcx.def_map.borrow()[path_id].clone();\n         let ck = |&: tyname: &str| {\n-            let ck_public = |def: ast::DefId| {\n+            let ck_public = |&: def: ast::DefId| {\n                 let name = token::get_ident(path.segments.last().unwrap().identifier);\n                 let origdid = orig_def.def_id();\n                 self.ensure_public(span,"}, {"sha": "68cb8ca39b492c323c833f5a1069daaa05cf05c0", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -136,18 +136,6 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n \n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         match ty.node {\n-            ast::TyClosure(ref c)  => {\n-                // Careful, the bounds on a closure/proc are *not* within its binder.\n-                visit::walk_ty_param_bounds_helper(self, &c.bounds);\n-                visit::walk_lifetime_decls_helper(self, &c.lifetimes);\n-                self.with(LateScope(&c.lifetimes, self.scope), |old_scope, this| {\n-                    this.check_lifetime_defs(old_scope, &c.lifetimes);\n-                    for argument in c.decl.inputs.iter() {\n-                        this.visit_ty(&*argument.ty)\n-                    }\n-                    visit::walk_fn_ret_ty(this, &c.decl.output);\n-                });\n-            }\n             ast::TyBareFn(ref c) => {\n                 visit::walk_lifetime_decls_helper(self, &c.lifetimes);\n                 self.with(LateScope(&c.lifetimes, self.scope), |old_scope, this| {"}, {"sha": "55abe895183f1ba69b195846fca35bea20f51850", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -118,7 +118,6 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::ty_float(..) |\n         ty::ty_str(..) |\n         ty::ty_bare_fn(..) |\n-        ty::ty_closure(..) |\n         ty::ty_vec(..) |\n         ty::ty_ptr(..) |\n         ty::ty_rptr(..) |"}, {"sha": "2393b7d733d0000ae9c1e001a801eaf0fc67f1fb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1273,62 +1273,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ty_closure(ref c) => {\n-                match c.store {\n-                    ty::UniqTraitStore => {\n-                        // proc: Equivalent to `Box<FnOnce>`\n-                        match bound {\n-                            ty::BoundCopy => {\n-                                Err(Unimplemented)\n-                            }\n-\n-                            ty::BoundSized => {\n-                                Ok(If(Vec::new()))\n-                            }\n-\n-                            ty::BoundSync |\n-                            ty::BoundSend => {\n-                                if c.bounds.builtin_bounds.contains(&bound) {\n-                                    Ok(If(Vec::new()))\n-                                } else {\n-                                    Err(Unimplemented)\n-                                }\n-                            }\n-                        }\n-                    }\n-                    ty::RegionTraitStore(_, mutbl) => {\n-                        // ||: Equivalent to `&FnMut` or `&mut FnMut` or something like that.\n-                        match bound {\n-                            ty::BoundCopy => {\n-                                match mutbl {\n-                                    ast::MutMutable => {\n-                                        // &mut T is affine\n-                                        Err(Unimplemented)\n-                                    }\n-                                    ast::MutImmutable => {\n-                                        // &T is copyable, no matter what T is\n-                                        Ok(If(Vec::new()))\n-                                    }\n-                                }\n-                            }\n-\n-                            ty::BoundSized => {\n-                                Ok(If(Vec::new()))\n-                            }\n-\n-                            ty::BoundSync |\n-                            ty::BoundSend => {\n-                                if c.bounds.builtin_bounds.contains(&bound) {\n-                                    Ok(If(Vec::new()))\n-                                } else {\n-                                    Err(Unimplemented)\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n             ty::ty_trait(ref data) => {\n                 match bound {\n                     ty::BoundSized => {"}, {"sha": "7cda6c21853a3116b1d83d23e82c94afe3e9a833", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 101, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -293,7 +293,6 @@ pub enum Variance {\n \n #[derive(Clone, Show)]\n pub enum AutoAdjustment<'tcx> {\n-    AdjustAddEnv(ast::DefId, ty::TraitStore),\n     AdjustReifyFnPointer(ast::DefId), // go from a fn-item type to a fn-pointer type\n     AdjustDerefRef(AutoDerefRef<'tcx>)\n }\n@@ -916,7 +915,7 @@ impl<'tcx> ctxt<'tcx> {\n     pub fn print_debug_stats(&self) {\n         sty_debug_print!(\n             self,\n-            ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_closure, ty_trait,\n+            ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_trait,\n             ty_struct, ty_unboxed_closure, ty_tup, ty_param, ty_open, ty_infer, ty_projection);\n \n         println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n@@ -1353,7 +1352,6 @@ pub enum sty<'tcx> {\n     // fn item. Otherwise, if None(_), it a fn pointer type.\n     ty_bare_fn(Option<DefId>, &'tcx BareFnTy<'tcx>),\n \n-    ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n     ty_struct(DefId, &'tcx Substs<'tcx>),\n \n@@ -2594,14 +2592,6 @@ impl FlagComputation {\n             &ty_bare_fn(_, ref f) => {\n                 self.add_fn_sig(&f.sig);\n             }\n-\n-            &ty_closure(ref f) => {\n-                if let RegionTraitStore(r, _) = f.store {\n-                    self.add_region(r);\n-                }\n-                self.add_fn_sig(&f.sig);\n-                self.add_bounds(&f.bounds);\n-            }\n         }\n     }\n \n@@ -2748,10 +2738,6 @@ pub fn mk_nil<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> {\n     mk_tup(cx, Vec::new())\n }\n \n-pub fn mk_closure<'tcx>(cx: &ctxt<'tcx>, fty: ClosureTy<'tcx>) -> Ty<'tcx> {\n-    mk_t(cx, ty_closure(box fty))\n-}\n-\n pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>,\n                         opt_def_id: Option<ast::DefId>,\n                         fty: &'tcx BareFnTy<'tcx>) -> Ty<'tcx> {\n@@ -3028,7 +3014,7 @@ pub fn type_is_vec(ty: Ty) -> bool {\n \n pub fn type_is_structural(ty: Ty) -> bool {\n     match ty.sty {\n-      ty_struct(..) | ty_tup(_) | ty_enum(..) | ty_closure(_) |\n+      ty_struct(..) | ty_tup(_) | ty_enum(..) |\n       ty_vec(_, Some(_)) | ty_unboxed_closure(..) => true,\n       _ => type_is_slice(ty) | type_is_trait(ty)\n     }\n@@ -3345,10 +3331,6 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n                 TC::None\n             }\n \n-            ty_closure(ref c) => {\n-                closure_contents(&**c) | TC::ReachesFfiUnsafe\n-            }\n-\n             ty_uniq(typ) => {\n                 TC::ReachesFfiUnsafe | match typ.sty {\n                     ty_str => TC::OwnsOwned,\n@@ -3519,23 +3501,6 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n         b | (TC::ReachesBorrowed).when(region != ty::ReStatic)\n     }\n \n-    fn closure_contents(cty: &ClosureTy) -> TypeContents {\n-        // Closure contents are just like trait contents, but with potentially\n-        // even more stuff.\n-        let st = object_contents(&cty.bounds);\n-\n-        let st = match cty.store {\n-            UniqTraitStore => {\n-                st.owned_pointer()\n-            }\n-            RegionTraitStore(r, mutbl) => {\n-                st.reference(borrowed_contents(r, mutbl))\n-            }\n-        };\n-\n-        st\n-    }\n-\n     fn object_contents(bounds: &ExistentialBounds) -> TypeContents {\n         // These are the type contents of the (opaque) interior. We\n         // make no assumptions (other than that it cannot have an\n@@ -3649,7 +3614,6 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             ty_float(_) |\n             ty_str |\n             ty_bare_fn(..) |\n-            ty_closure(_) |\n             ty_param(_) |\n             ty_projection(_) |\n             ty_vec(_, None) => {\n@@ -4153,7 +4117,6 @@ pub fn node_id_item_substs<'tcx>(cx: &ctxt<'tcx>, id: ast::NodeId) -> ItemSubsts\n pub fn fn_is_variadic(fty: Ty) -> bool {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => f.sig.0.variadic,\n-        ty_closure(ref f) => f.sig.0.variadic,\n         ref s => {\n             panic!(\"fn_is_variadic() called on non-fn type: {}\", s)\n         }\n@@ -4163,7 +4126,6 @@ pub fn fn_is_variadic(fty: Ty) -> bool {\n pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => &f.sig,\n-        ty_closure(ref f) => &f.sig,\n         ref s => {\n             panic!(\"ty_fn_sig() called on non-fn type: {}\", s)\n         }\n@@ -4174,7 +4136,6 @@ pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> {\n pub fn ty_fn_abi(fty: Ty) -> abi::Abi {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => f.abi,\n-        ty_closure(ref f) => f.abi,\n         _ => panic!(\"ty_fn_abi() called on non-fn type\"),\n     }\n }\n@@ -4186,7 +4147,6 @@ pub fn ty_fn_args<'tcx>(fty: Ty<'tcx>) -> &'tcx [Ty<'tcx>] {\n \n pub fn ty_closure_store(fty: Ty) -> TraitStore {\n     match fty.sty {\n-        ty_closure(ref f) => f.store,\n         ty_unboxed_closure(..) => {\n             // Close enough for the purposes of all the callers of this\n             // function (which is soon to be deprecated anyhow).\n@@ -4201,7 +4161,6 @@ pub fn ty_closure_store(fty: Ty) -> TraitStore {\n pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> FnOutput<'tcx> {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => f.sig.0.output,\n-        ty_closure(ref f) => f.sig.0.output,\n         ref s => {\n             panic!(\"ty_fn_ret() called on non-fn type: {}\", s)\n         }\n@@ -4211,7 +4170,6 @@ pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> FnOutput<'tcx> {\n pub fn is_fn_ty(fty: Ty) -> bool {\n     match fty.sty {\n         ty_bare_fn(..) => true,\n-        ty_closure(_) => true,\n         _ => false\n     }\n }\n@@ -4335,33 +4293,6 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n     return match adjustment {\n         Some(adjustment) => {\n             match *adjustment {\n-                AdjustAddEnv(_, store) => {\n-                    match unadjusted_ty.sty {\n-                        ty::ty_bare_fn(Some(_), ref b) => {\n-                            let bounds = ty::ExistentialBounds {\n-                                region_bound: ReStatic,\n-                                builtin_bounds: all_builtin_bounds(),\n-                                projection_bounds: vec!(),\n-                            };\n-\n-                            ty::mk_closure(\n-                                cx,\n-                                ty::ClosureTy {unsafety: b.unsafety,\n-                                               onceness: ast::Many,\n-                                               store: store,\n-                                               bounds: bounds,\n-                                               sig: b.sig.clone(),\n-                                               abi: b.abi})\n-                        }\n-                        ref b => {\n-                            cx.sess.bug(\n-                                format!(\"add_env adjustment on non-fn-item: \\\n-                                         {}\",\n-                                        b).as_slice());\n-                        }\n-                    }\n-                }\n-\n                 AdjustReifyFnPointer(_) => {\n                     match unadjusted_ty.sty {\n                         ty::ty_bare_fn(Some(_), b) => {\n@@ -4731,7 +4662,6 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n         ty_rptr(_, _) => \"&-ptr\".to_string(),\n         ty_bare_fn(Some(_), _) => format!(\"fn item\"),\n         ty_bare_fn(None, _) => \"fn pointer\".to_string(),\n-        ty_closure(_) => \"fn\".to_string(),\n         ty_trait(ref inner) => {\n             format!(\"trait {}\", item_path_str(cx, inner.principal_def_id()))\n         }\n@@ -6326,24 +6256,6 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                     fn_sig(state, &b.sig);\n                     return false;\n                 }\n-                ty_closure(ref c) => {\n-                    byte!(15);\n-                    hash!(c.unsafety);\n-                    hash!(c.onceness);\n-                    hash!(c.bounds);\n-                    match c.store {\n-                        UniqTraitStore => byte!(0),\n-                        RegionTraitStore(r, m) => {\n-                            byte!(1);\n-                            region(state, r);\n-                            assert_eq!(m, ast::MutMutable);\n-                        }\n-                    }\n-\n-                    fn_sig(state, &c.sig);\n-\n-                    return false;\n-                }\n                 ty_trait(ref data) => {\n                     byte!(17);\n                     did(state, data.principal_def_id());\n@@ -6666,12 +6578,6 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_struct(_, substs) => {\n                 accum_substs(accumulator, substs);\n             }\n-            ty_closure(ref closure_ty) => {\n-                match closure_ty.store {\n-                    RegionTraitStore(region, _) => accumulator.push(region),\n-                    UniqTraitStore => {}\n-                }\n-            }\n             ty_unboxed_closure(_, region, substs) => {\n                 accumulator.push(*region);\n                 accum_substs(accumulator, substs);\n@@ -6741,7 +6647,6 @@ pub fn with_freevars<T, F>(tcx: &ty::ctxt, fid: ast::NodeId, f: F) -> T where\n impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n-            AdjustAddEnv(..) => false,\n             AdjustReifyFnPointer(..) => false,\n             AdjustDerefRef(ref r) => r.is_identity(),\n         }\n@@ -6865,11 +6770,8 @@ impl DebruijnIndex {\n impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match *self {\n-            AdjustAddEnv(def_id, ref trait_store) => {\n-                format!(\"AdjustAddEnv({},{})\", def_id.repr(tcx), trait_store)\n-            }\n             AdjustReifyFnPointer(def_id) => {\n-                format!(\"AdjustAddEnv({})\", def_id.repr(tcx))\n+                format!(\"AdjustReifyFnPointer({})\", def_id.repr(tcx))\n             }\n             AdjustDerefRef(ref data) => {\n                 data.repr(tcx)"}, {"sha": "1bc0d70945899eacea45d77c05ff91fc5103546c", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -604,9 +604,6 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n             let bfn = f.fold_with(this);\n             ty::ty_bare_fn(opt_def_id, this.tcx().mk_bare_fn(bfn))\n         }\n-        ty::ty_closure(ref f) => {\n-            ty::ty_closure(f.fold_with(this))\n-        }\n         ty::ty_rptr(r, ref tm) => {\n             let r = r.fold_with(this);\n             ty::ty_rptr(this.tcx().mk_region(r), tm.fold_with(this))"}, {"sha": "4953e9a2ce1d16eee8b4003fdd388945c84078fa", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -51,9 +51,6 @@ impl<'tcx> TypeWalker<'tcx> {\n             ty::ty_bare_fn(_, ref ft) => {\n                 self.push_sig_subtypes(&ft.sig);\n             }\n-            ty::ty_closure(ref ft) => {\n-                self.push_sig_subtypes(&ft.sig);\n-            }\n         }\n     }\n "}, {"sha": "e6ee16d1789c00fbd401f20ab5fd472b52e34e5c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -18,7 +18,7 @@ use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n use middle::ty::{ReSkolemized, ReVar, BrEnv};\n use middle::ty::{mt, Ty, ParamTy};\n use middle::ty::{ty_bool, ty_char, ty_struct, ty_enum};\n-use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn, ty_closure};\n+use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn};\n use middle::ty::{ty_param, ty_ptr, ty_rptr, ty_tup, ty_open};\n use middle::ty::{ty_unboxed_closure};\n use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_infer};\n@@ -417,9 +417,6 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n                 strs => format!(\"({})\", strs.connect(\", \"))\n             }\n         }\n-        ty_closure(ref f) => {\n-            closure_to_string(cx, &**f)\n-        }\n         ty_bare_fn(opt_def_id, ref f) => {\n             bare_fn_to_string(cx, opt_def_id, f.unsafety, f.abi, None, &f.sig)\n         }"}, {"sha": "e1f0c9ec26677abef3eb817672c78b396bfc8686", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -662,13 +662,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                     default_msgs: (&'static str, &'static str))\n                                     -> (&'static str, &'static str) {\n             match ty.sty {\n-                ty::ty_closure(box ty::ClosureTy {\n-                    store: ty::RegionTraitStore(..),\n-                    ..\n-                }) => {\n-                    (\"a non-copyable stack closure\",\n-                     \"capture it in a new closure, e.g. `|x| f(x)`, to override\")\n-                }\n                 _ => {\n                     if ty::type_moves_by_default(param_env, span, ty) {\n                         (\"non-copyable\","}, {"sha": "9540c3fa3d7e817ff692ba791c255b916b1ca0c2", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -638,7 +638,7 @@ fn write_out_deps(sess: &Session,\n         _ => return,\n     };\n \n-    let result = (|| -> io::IoResult<()> {\n+    let result = (|&:| -> io::IoResult<()> {\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n         let files: Vec<String> = sess.codemap().files.borrow()"}, {"sha": "b1e65dce6045a592200f44e9d29cd5f760e09447", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -277,26 +277,6 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         ty::mk_tup(self.infcx.tcx, vec![ty1, ty2])\n     }\n \n-    pub fn t_closure(&self,\n-                     input_tys: &[Ty<'tcx>],\n-                     output_ty: Ty<'tcx>,\n-                     region_bound: ty::Region)\n-                     -> Ty<'tcx>\n-    {\n-        ty::mk_closure(self.infcx.tcx, ty::ClosureTy {\n-            unsafety: ast::Unsafety::Normal,\n-            onceness: ast::Many,\n-            store: ty::RegionTraitStore(region_bound, ast::MutMutable),\n-            bounds: ty::region_existential_bound(region_bound),\n-            sig: ty::Binder(ty::FnSig {\n-                inputs: input_tys.to_vec(),\n-                output: ty::FnConverging(output_ty),\n-                variadic: false,\n-            }),\n-            abi: abi::Rust,\n-        })\n-    }\n-\n     pub fn t_param(&self, space: subst::ParamSpace, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n         ty::mk_param(self.infcx.tcx, space, index, token::intern(name[]))\n@@ -780,19 +760,6 @@ fn escaping() {\n         assert!(!ty::type_has_escaping_regions(t_param));\n         let t_fn = env.t_fn(&[t_param], env.t_nil());\n         assert!(!ty::type_has_escaping_regions(t_fn));\n-\n-        // t_fn = |&int|+'a\n-        let t_fn = env.t_closure(&[t_rptr_bound1], env.t_nil(), env.re_free(0, 1));\n-        assert!(!ty::type_has_escaping_regions(t_fn));\n-\n-        // t_fn = |&int|+'a (where &int has depth 2)\n-        let t_fn = env.t_closure(&[t_rptr_bound2], env.t_nil(), env.re_free(0, 1));\n-        assert!(ty::type_has_escaping_regions(t_fn));\n-\n-        // t_fn = |&int|+&int\n-        let t_fn = env.t_closure(&[t_rptr_bound1], env.t_nil(),\n-                                 env.re_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1)));\n-        assert!(ty::type_has_escaping_regions(t_fn));\n     })\n }\n "}, {"sha": "a2c86c3cdb7563a71a0e0905cd469c141ef67596", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -71,7 +71,7 @@ use syntax::ast::{PatRange, PatStruct, Path};\n use syntax::ast::{PolyTraitRef, PrimTy, SelfExplicit};\n use syntax::ast::{RegionTyParamBound, StructField};\n use syntax::ast::{TraitRef, TraitTyParamBound};\n-use syntax::ast::{Ty, TyBool, TyChar, TyClosure, TyF32};\n+use syntax::ast::{Ty, TyBool, TyChar, TyF32};\n use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt, TyObjectSum};\n use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyPolyTraitRef, TyQPath};\n use syntax::ast::{TyRptr, TyStr, TyU, TyU8, TyU16, TyU32, TyU64, TyUint};\n@@ -3606,14 +3606,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 self.resolve_trait_reference(ty.id, &*qpath.trait_ref, TraitQPath);\n             }\n \n-            TyClosure(ref c) => {\n-                self.resolve_type_parameter_bounds(\n-                    ty.id,\n-                    &c.bounds,\n-                    TraitBoundingTypeParameter);\n-                visit::walk_ty(self, ty);\n-            }\n-\n             TyPolyTraitRef(ref bounds) => {\n                 self.resolve_type_parameter_bounds(\n                     ty.id,"}, {"sha": "01b47b728b6ba7410f71e9723ae463c3024579d6", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -355,12 +355,6 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n         // Functions are just pointers\n         ty::ty_bare_fn(..) => Some(path),\n \n-        // Closures are a pair of pointers: the code and environment\n-        ty::ty_closure(..) => {\n-            path.push(FAT_PTR_ADDR);\n-            Some(path)\n-        },\n-\n         // Is this the NonZero lang item wrapping a pointer or integer type?\n         ty::ty_struct(did, substs) if Some(did) == tcx.lang_items.non_zero() => {\n             let nonzero_fields = ty::lookup_struct_fields(tcx, did);"}, {"sha": "56c1e2ddba0b58f2b9350c411ac15aabab22ae40", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -287,9 +287,6 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ty::ty_bare_fn(_, ref f) => {\n             (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, None)\n         }\n-        ty::ty_closure(ref f) => {\n-            (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, Some(Type::i8p(ccx)))\n-        }\n         ty::ty_unboxed_closure(closure_did, _, substs) => {\n             let typer = common::NormalizingUnboxedClosureTyper::new(ccx.tcx());\n             let function_type = typer.unboxed_closure_type(closure_did, substs);\n@@ -669,30 +666,31 @@ pub fn compare_simd_types<'blk, 'tcx>(\n     }\n }\n \n-pub type val_and_ty_fn<'a, 'blk, 'tcx> =\n-    |Block<'blk, 'tcx>, ValueRef, Ty<'tcx>|: 'a -> Block<'blk, 'tcx>;\n-\n // Iterates through the elements of a structural type.\n-pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n-                                          av: ValueRef,\n-                                          t: Ty<'tcx>,\n-                                          f: val_and_ty_fn<'a, 'blk, 'tcx>)\n-                                          -> Block<'blk, 'tcx> {\n+pub fn iter_structural_ty<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n+                                         av: ValueRef,\n+                                         t: Ty<'tcx>,\n+                                         mut f: F)\n+                                         -> Block<'blk, 'tcx> where\n+    F: FnMut(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"iter_structural_ty\");\n \n-    fn iter_variant<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n-                                    repr: &adt::Repr<'tcx>,\n-                                    av: ValueRef,\n-                                    variant: &ty::VariantInfo<'tcx>,\n-                                    substs: &subst::Substs<'tcx>,\n-                                    f: val_and_ty_fn<'a, 'blk, 'tcx>)\n-                                    -> Block<'blk, 'tcx> {\n+    fn iter_variant<'blk, 'tcx, F>(cx: Block<'blk, 'tcx>,\n+                                   repr: &adt::Repr<'tcx>,\n+                                   av: ValueRef,\n+                                   variant: &ty::VariantInfo<'tcx>,\n+                                   substs: &subst::Substs<'tcx>,\n+                                   f: &mut F)\n+                                   -> Block<'blk, 'tcx> where\n+        F: FnMut(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+    {\n         let _icx = push_ctxt(\"iter_variant\");\n         let tcx = cx.tcx();\n         let mut cx = cx;\n \n         for (i, &arg) in variant.args.iter().enumerate() {\n-            cx = f(cx,\n+            cx = (*f)(cx,\n                    adt::trans_field_ptr(cx, repr, av, variant.disr_val, i),\n                    arg.subst(tcx, substs));\n         }\n@@ -764,7 +762,7 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n           match adt::trans_switch(cx, &*repr, av) {\n               (_match::Single, None) => {\n                   cx = iter_variant(cx, &*repr, av, &*(*variants)[0],\n-                                    substs, f);\n+                                    substs, &mut f);\n               }\n               (_match::Switch, Some(lldiscrim_a)) => {\n                   cx = f(cx, lldiscrim_a, cx.tcx().types.int);\n@@ -793,7 +791,7 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                        data_ptr,\n                                        &**variant,\n                                        substs,\n-                                       |x,y,z| f(x,y,z));\n+                                       &mut f);\n                       Br(variant_cx, next_cx.llbb);\n                   }\n                   cx = next_cx;\n@@ -951,9 +949,6 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::ty_closure(_) => {\n-            get_extern_rust_fn(ccx, t, name[], did)\n-        }\n         _ => {\n             get_extern_const(ccx, did, t)\n         }\n@@ -2437,7 +2432,6 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n     use middle::ty::{BrAnon, ReLateBound};\n \n     let (fn_sig, abi, has_env) = match fn_ty.sty {\n-        ty::ty_closure(ref f) => (f.sig.clone(), f.abi, true),\n         ty::ty_bare_fn(_, ref f) => (f.sig.clone(), f.abi, false),\n         ty::ty_unboxed_closure(closure_did, _, substs) => {\n             let typer = common::NormalizingUnboxedClosureTyper::new(ccx.tcx());\n@@ -2978,7 +2972,7 @@ pub fn write_metadata(cx: &SharedCrateContext, krate: &ast::Crate) -> Vec<u8> {\n     }\n \n     let encode_inlined_item: encoder::EncodeInlinedItem =\n-        |ecx, rbml_w, ii| astencode::encode_inlined_item(ecx, rbml_w, ii);\n+        box |ecx, rbml_w, ii| astencode::encode_inlined_item(ecx, rbml_w, ii);\n \n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let metadata = encoder::encode_metadata(encode_parms, krate);"}, {"sha": "65e6d7e1924b6050f8625c466203fb433a523c5e", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -19,7 +19,7 @@ pub use self::CalleeData::*;\n pub use self::CallArgs::*;\n \n use arena::TypedArena;\n-use back::{abi,link};\n+use back::link;\n use session;\n use llvm::{ValueRef};\n use llvm::get_param;\n@@ -66,8 +66,6 @@ pub struct MethodData {\n }\n \n pub enum CalleeData<'tcx> {\n-    Closure(Datum<'tcx, Lvalue>),\n-\n     // Constructor for enum variant/tuple-like-struct\n     // i.e. Some, Ok\n     NamedTupleConstructor(subst::Substs<'tcx>, ty::Disr),\n@@ -102,7 +100,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n \n     fn datum_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                                 -> Callee<'blk, 'tcx> {\n-        let DatumBlock {mut bcx, datum} = expr::trans(bcx, expr);\n+        let DatumBlock { bcx, datum, .. } = expr::trans(bcx, expr);\n         match datum.ty.sty {\n             ty::ty_bare_fn(..) => {\n                 let llval = datum.to_llscalarish(bcx);\n@@ -111,14 +109,6 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                     data: Fn(llval),\n                 };\n             }\n-            ty::ty_closure(..) => {\n-                let datum = unpack_datum!(\n-                    bcx, datum.to_lvalue_datum(bcx, \"callee\", expr.id));\n-                return Callee {\n-                    bcx: bcx,\n-                    data: Closure(datum),\n-                };\n-            }\n             _ => {\n                 bcx.tcx().sess.span_bug(\n                     expr.span,\n@@ -679,7 +669,6 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n \n     let (abi, ret_ty) = match callee_ty.sty {\n         ty::ty_bare_fn(_, ref f) => (f.abi, f.sig.0.output),\n-        ty::ty_closure(ref f) => (f.abi, f.sig.0.output),\n         _ => panic!(\"expected bare rust fn or closure in trans_call_inner\")\n     };\n \n@@ -690,16 +679,6 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n         TraitItem(d) => {\n             (d.llfn, None, Some(d.llself))\n         }\n-        Closure(d) => {\n-            // Closures are represented as (llfn, llclosure) pair:\n-            // load the requisite values out.\n-            let pair = d.to_llref();\n-            let llfn = GEPi(bcx, pair, &[0u, abi::FAT_PTR_ADDR]);\n-            let llfn = Load(bcx, llfn);\n-            let llenv = GEPi(bcx, pair, &[0u, abi::FAT_PTR_EXTRA]);\n-            let llenv = Load(bcx, llenv);\n-            (llfn, Some(llenv), None)\n-        }\n         Intrinsic(node, substs) => {\n             assert!(abi == synabi::RustIntrinsic);\n             assert!(dest.is_some());"}, {"sha": "6f2def16e7674f867c14e673cc2cb0fdc40269cf", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 101, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -19,7 +19,7 @@ use trans::base::*;\n use trans::build::*;\n use trans::cleanup::{CleanupMethods, ScopeId};\n use trans::common::*;\n-use trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n+use trans::datum::{Datum, Lvalue, rvalue_scratch_datum};\n use trans::datum::{Rvalue, ByValue};\n use trans::debuginfo;\n use trans::expr;\n@@ -29,10 +29,8 @@ use trans::type_::Type;\n use middle::ty::{self, Ty, UnboxedClosureTyper};\n use middle::subst::{Substs};\n use session::config::FullDebugInfo;\n-use util::ppaux::Repr;\n use util::ppaux::ty_to_string;\n \n-use arena::TypedArena;\n use syntax::ast;\n use syntax::ast_util;\n \n@@ -530,7 +528,6 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n     // of the closure expression.\n     let typer = NormalizingUnboxedClosureTyper::new(bcx.tcx());\n     let function_type = typer.unboxed_closure_type(closure_id, bcx.fcx.param_substs);\n-    let function_type = ty::mk_closure(bcx.tcx(), function_type);\n \n     let freevars: Vec<ty::Freevar> =\n         ty::with_freevars(bcx.tcx(), id, |fv| fv.iter().map(|&fv| fv).collect());\n@@ -543,8 +540,8 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n                   bcx.fcx.param_substs,\n                   id,\n                   &[],\n-                  ty::ty_fn_ret(function_type),\n-                  ty::ty_fn_abi(function_type),\n+                  function_type.sig.0.output,\n+                  function_type.abi,\n                   ClosureEnv::new(freevars[],\n                                   UnboxedClosure(freevar_mode)));\n \n@@ -582,98 +579,3 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n \n     bcx\n }\n-\n-pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                         closure_ty: Ty<'tcx>,\n-                                         def_id: ast::DefId,\n-                                         fn_ptr: ValueRef,\n-                                         is_local: bool) -> ValueRef {\n-\n-    match ccx.closure_bare_wrapper_cache().borrow().get(&fn_ptr) {\n-        Some(&llval) => return llval,\n-        None => {}\n-    }\n-\n-    let tcx = ccx.tcx();\n-\n-    debug!(\"get_wrapper_for_bare_fn(closure_ty={})\", closure_ty.repr(tcx));\n-\n-    let f = match closure_ty.sty {\n-        ty::ty_closure(ref f) => f,\n-        _ => {\n-            ccx.sess().bug(format!(\"get_wrapper_for_bare_fn: \\\n-                                    expected a closure ty, got {}\",\n-                                    closure_ty.repr(tcx))[]);\n-        }\n-    };\n-\n-    let name = ty::with_path(tcx, def_id, |path| {\n-        mangle_internal_name_by_path_and_seq(path, \"as_closure\")\n-    });\n-    let llfn = if is_local {\n-        decl_internal_rust_fn(ccx, closure_ty, name[])\n-    } else {\n-        decl_rust_fn(ccx, closure_ty, name[])\n-    };\n-\n-    ccx.closure_bare_wrapper_cache().borrow_mut().insert(fn_ptr, llfn);\n-\n-    // This is only used by statics inlined from a different crate.\n-    if !is_local {\n-        // Don't regenerate the wrapper, just reuse the original one.\n-        return llfn;\n-    }\n-\n-    let _icx = push_ctxt(\"closure::get_wrapper_for_bare_fn\");\n-\n-    let arena = TypedArena::new();\n-    let empty_param_substs = Substs::trans_empty();\n-    let fcx = new_fn_ctxt(ccx, llfn, ast::DUMMY_NODE_ID, true, f.sig.0.output,\n-                          &empty_param_substs, None, &arena);\n-    let bcx = init_function(&fcx, true, f.sig.0.output);\n-\n-    let args = create_datums_for_fn_args(&fcx,\n-                                         ty::ty_fn_args(closure_ty)\n-                                            []);\n-    let mut llargs = Vec::new();\n-    match fcx.llretslotptr.get() {\n-        Some(llretptr) => {\n-            assert!(!fcx.needs_ret_allocas);\n-            llargs.push(llretptr);\n-        }\n-        None => {}\n-    }\n-    llargs.extend(args.iter().map(|arg| arg.val));\n-\n-    let retval = Call(bcx, fn_ptr, llargs.as_slice(), None);\n-    match f.sig.0.output {\n-        ty::FnConverging(output_type) => {\n-            if return_type_is_void(ccx, output_type) || fcx.llretslotptr.get().is_some() {\n-                RetVoid(bcx);\n-            } else {\n-                Ret(bcx, retval);\n-            }\n-        }\n-        ty::FnDiverging => {\n-            RetVoid(bcx);\n-        }\n-    }\n-\n-    // HACK(eddyb) finish_fn cannot be used here, we returned directly.\n-    debuginfo::clear_source_location(&fcx);\n-    fcx.cleanup();\n-\n-    llfn\n-}\n-\n-pub fn make_closure_from_bare_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                             closure_ty: Ty<'tcx>,\n-                                             def_id: ast::DefId,\n-                                             fn_ptr: ValueRef)\n-                                             -> DatumBlock<'blk, 'tcx, Expr>  {\n-    let scratch = rvalue_scratch_datum(bcx, closure_ty, \"__adjust\");\n-    let wrapper = get_wrapper_for_bare_fn(bcx.ccx(), closure_ty, def_id, fn_ptr, true);\n-    fill_fn_pair(bcx, scratch.val, wrapper, C_null(Type::i8p(bcx.ccx())));\n-\n-    DatumBlock::new(bcx, scratch.to_expr_datum())\n-}"}, {"sha": "7e47c8f3b959a277c5ef21856a0f2a7cf429201c", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,7 +15,7 @@ use llvm::{ConstFCmp, ConstICmp, SetLinkage, PrivateLinkage, ValueRef, Bool, Tru\n use llvm::{IntEQ, IntNE, IntUGT, IntUGE, IntULT, IntULE, IntSGT, IntSGE, IntSLT, IntSLE,\n            RealOEQ, RealOGT, RealOGE, RealOLT, RealOLE, RealONE};\n use middle::{const_eval, def};\n-use trans::{adt, closure, consts, debuginfo, expr, inline, machine};\n+use trans::{adt, consts, debuginfo, expr, inline, machine};\n use trans::base::{self, push_ctxt};\n use trans::common::*;\n use trans::type_::Type;\n@@ -189,20 +189,6 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n         None => { }\n         Some(adj) => {\n             match adj {\n-                ty::AdjustAddEnv(def_id, ty::RegionTraitStore(ty::ReStatic, _)) => {\n-                    let wrapper = closure::get_wrapper_for_bare_fn(cx,\n-                                                                   ety_adjusted,\n-                                                                   def_id,\n-                                                                   llconst,\n-                                                                   true);\n-                    llconst = C_struct(cx, &[wrapper, C_null(Type::i8p(cx))], false)\n-                }\n-                ty::AdjustAddEnv(_, store) => {\n-                    cx.sess()\n-                      .span_bug(e.span,\n-                                format!(\"unexpected static function: {}\",\n-                                        store)[])\n-                }\n                 ty::AdjustReifyFnPointer(_def_id) => {\n                     // FIXME(#19925) once fn item types are\n                     // zero-sized, we'll need to do something here"}, {"sha": "84ae088f5beae449280971476cf4ec4225dd2ab2", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -465,11 +465,6 @@ impl<'tcx> TypeMap<'tcx> {\n                     }\n                 }\n             },\n-            ty::ty_closure(box ref closure_ty) => {\n-                self.get_unique_type_id_of_closure_type(cx,\n-                                                        closure_ty.clone(),\n-                                                        &mut unique_type_id);\n-            },\n             ty::ty_unboxed_closure(def_id, _, substs) => {\n                 let typer = NormalizingUnboxedClosureTyper::new(cx.tcx());\n                 let closure_ty = typer.unboxed_closure_type(def_id, substs);\n@@ -3017,9 +3012,6 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bare_fn(_, ref barefnty) => {\n             subroutine_type_metadata(cx, unique_type_id, &barefnty.sig, usage_site_span)\n         }\n-        ty::ty_closure(ref closurety) => {\n-            subroutine_type_metadata(cx, unique_type_id, &closurety.sig, usage_site_span)\n-        }\n         ty::ty_unboxed_closure(def_id, _, substs) => {\n             let typer = NormalizingUnboxedClosureTyper::new(cx.tcx());\n             let sig = typer.unboxed_closure_type(def_id, substs).sig;\n@@ -3870,66 +3862,6 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         },\n-        ty::ty_closure(box ty::ClosureTy { unsafety,\n-                                           onceness,\n-                                           store,\n-                                           ref sig,\n-                                           .. // omitting bounds ...\n-                                           }) => {\n-            if unsafety == ast::Unsafety::Unsafe {\n-                output.push_str(\"unsafe \");\n-            }\n-\n-            if onceness == ast::Once {\n-                output.push_str(\"once \");\n-            }\n-\n-            let param_list_closing_char;\n-            match store {\n-                ty::UniqTraitStore => {\n-                    output.push_str(\"proc(\");\n-                    param_list_closing_char = ')';\n-                }\n-                ty::RegionTraitStore(_, ast::MutMutable) => {\n-                    output.push_str(\"&mut|\");\n-                    param_list_closing_char = '|';\n-                }\n-                ty::RegionTraitStore(_, ast::MutImmutable) => {\n-                    output.push_str(\"&|\");\n-                    param_list_closing_char = '|';\n-                }\n-            };\n-\n-            if sig.0.inputs.len() > 0 {\n-                for &parameter_type in sig.0.inputs.iter() {\n-                    push_debuginfo_type_name(cx, parameter_type, true, output);\n-                    output.push_str(\", \");\n-                }\n-                output.pop();\n-                output.pop();\n-            }\n-\n-            if sig.0.variadic {\n-                if sig.0.inputs.len() > 0 {\n-                    output.push_str(\", ...\");\n-                } else {\n-                    output.push_str(\"...\");\n-                }\n-            }\n-\n-            output.push(param_list_closing_char);\n-\n-            match sig.0.output {\n-                ty::FnConverging(result_type) if ty::type_is_nil(result_type) => {}\n-                ty::FnConverging(result_type) => {\n-                    output.push_str(\" -> \");\n-                    push_debuginfo_type_name(cx, result_type, true, output);\n-                }\n-                ty::FnDiverging => {\n-                    output.push_str(\" -> !\");\n-                }\n-            }\n-        },\n         ty::ty_unboxed_closure(..) => {\n             output.push_str(\"closure\");\n         }"}, {"sha": "9221ae09df98aa7ad3f5ec174cc86ae605911785", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -54,7 +54,7 @@ use trans::inline;\n use trans::tvec;\n use trans::type_of;\n use middle::ty::{struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AdjustAddEnv, AutoUnsafe};\n+use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AutoUnsafe};\n use middle::ty::{AutoPtr};\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n@@ -179,9 +179,6 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            datum.to_string(bcx.ccx()),\n            adjustment.repr(bcx.tcx()));\n     match adjustment {\n-        AdjustAddEnv(def_id, _) => {\n-            datum = unpack_datum!(bcx, add_env(bcx, def_id, expr, datum));\n-        }\n         AdjustReifyFnPointer(_def_id) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n@@ -476,22 +473,6 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n         DatumBlock::new(bcx, scratch.to_expr_datum())\n     }\n-\n-    fn add_env<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                           def_id: ast::DefId,\n-                           expr: &ast::Expr,\n-                           datum: Datum<'tcx, Expr>)\n-                           -> DatumBlock<'blk, 'tcx, Expr> {\n-        // This is not the most efficient thing possible; since closures\n-        // are two words it'd be better if this were compiled in\n-        // 'dest' mode, but I can't find a nice way to structure the\n-        // code and keep it DRY that accommodates that use case at the\n-        // moment.\n-\n-        let closure_ty = expr_ty_adjusted(bcx, expr);\n-        let fn_ptr = datum.to_llscalarish(bcx);\n-        closure::make_closure_from_bare_fn(bcx, closure_ty, def_id, fn_ptr)\n-    }\n }\n \n /// Translates an expression in \"lvalue\" mode -- meaning that it returns a reference to the memory"}, {"sha": "491c6a83ca9bf39fb4296f907fdb4838fac8ead0", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -441,18 +441,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                                                          v0,\n                                                          t,\n                                                          |bb, vv, tt| drop_ty(bb, vv, tt, None)),\n-        ty::ty_closure(ref f) if f.store == ty::UniqTraitStore => {\n-            let box_cell_v = GEPi(bcx, v0, &[0u, abi::FAT_PTR_EXTRA]);\n-            let env = Load(bcx, box_cell_v);\n-            let env_ptr_ty = Type::at_box(bcx.ccx(), Type::i8(bcx.ccx())).ptr_to();\n-            let env = PointerCast(bcx, env, env_ptr_ty);\n-            with_cond(bcx, IsNotNull(bcx, env), |bcx| {\n-                let dtor_ptr = GEPi(bcx, env, &[0u, abi::BOX_FIELD_DROP_GLUE]);\n-                let dtor = Load(bcx, dtor_ptr);\n-                Call(bcx, dtor, &[PointerCast(bcx, box_cell_v, Type::i8p(bcx.ccx()))], None);\n-                bcx\n-            })\n-        }\n         ty::ty_trait(..) => {\n             // No need to do a null check here (as opposed to the Box<trait case\n             // above), because this happens for a trait field in an unsized\n@@ -531,13 +519,14 @@ fn declare_generic_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>,\n     return (fn_nm, llfn);\n }\n \n-fn make_generic_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                               t: Ty<'tcx>,\n-                               llfn: ValueRef,\n-                               helper: for<'blk> |Block<'blk, 'tcx>, ValueRef, Ty<'tcx>|\n-                                                  -> Block<'blk, 'tcx>,\n-                               name: &str)\n-                               -> ValueRef {\n+fn make_generic_glue<'a, 'tcx, F>(ccx: &CrateContext<'a, 'tcx>,\n+                                  t: Ty<'tcx>,\n+                                  llfn: ValueRef,\n+                                  helper: F,\n+                                  name: &str)\n+                                  -> ValueRef where\n+    F: for<'blk> FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"make_generic_glue\");\n     let glue_name = format!(\"glue {} {}\", name, ty_to_short_str(ccx.tcx(), t));\n     let _s = StatRecorder::new(ccx, glue_name);"}, {"sha": "dd1cfc5ad6d823db5c4643adefed5e512d990712", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -40,7 +40,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n     let csearch_result =\n         csearch::maybe_get_item_ast(\n             ccx.tcx(), fn_id,\n-            |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n+            box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n \n     let inline_def = match csearch_result {\n         csearch::not_found => {"}, {"sha": "e219b45d3d9f499ee07eb36d97fc97b0a27e565a", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -599,8 +599,27 @@ pub fn trans_object_shim<'a, 'tcx>(\n            bcx.val_to_string(llobject));\n \n     // the remaining arguments will be, well, whatever they are\n+    let input_tys =\n+        match fty.abi {\n+            RustCall => {\n+                // unpack the tuple to extract the input type arguments:\n+                match fty.sig.0.inputs[1].sty {\n+                    ty::ty_tup(ref tys) => tys.as_slice(),\n+                    _ => {\n+                        bcx.sess().bug(\n+                            format!(\"rust-call expects a tuple not {}\",\n+                                    fty.sig.0.inputs[1].repr(tcx)).as_slice());\n+                    }\n+                }\n+            }\n+            _ => {\n+                // skip the self parameter:\n+                fty.sig.0.inputs.slice_from(1)\n+            }\n+        };\n+\n     let llargs: Vec<_> =\n-        fty.sig.0.inputs[1..].iter()\n+        input_tys.iter()\n         .enumerate()\n         .map(|(i, _)| {\n             let llarg = get_param(fcx.llfn, fcx.arg_pos(i+1) as u32);\n@@ -609,6 +628,7 @@ pub fn trans_object_shim<'a, 'tcx>(\n             llarg\n         })\n         .collect();\n+\n     assert!(!fcx.needs_ret_allocas);\n \n     let dest ="}, {"sha": "e3288466aa79c6c617890e58d86360dc15303dc3", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -416,15 +416,14 @@ pub fn get_base_and_len(bcx: Block,\n     }\n }\n \n-pub type iter_vec_block<'a, 'blk, 'tcx> =\n-    |Block<'blk, 'tcx>, ValueRef, Ty<'tcx>|: 'a -> Block<'blk, 'tcx>;\n-\n-pub fn iter_vec_loop<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n                                      data_ptr: ValueRef,\n                                      vt: &VecTypes<'tcx>,\n                                      count: ValueRef,\n-                                     f: iter_vec_block<'a, 'blk, 'tcx>)\n-                                     -> Block<'blk, 'tcx> {\n+                                     f: F)\n+                                     -> Block<'blk, 'tcx> where\n+    F: FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"tvec::iter_vec_loop\");\n     let fcx = bcx.fcx;\n \n@@ -475,12 +474,14 @@ pub fn iter_vec_loop<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     next_bcx\n }\n \n-pub fn iter_vec_raw<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                    data_ptr: ValueRef,\n-                                    unit_ty: Ty<'tcx>,\n-                                    len: ValueRef,\n-                                    f: iter_vec_block<'a, 'blk, 'tcx>)\n-                                    -> Block<'blk, 'tcx> {\n+pub fn iter_vec_raw<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n+                                   data_ptr: ValueRef,\n+                                   unit_ty: Ty<'tcx>,\n+                                   len: ValueRef,\n+                                   f: F)\n+                                   -> Block<'blk, 'tcx> where\n+    F: FnOnce(Block<'blk, 'tcx>, ValueRef, Ty<'tcx>) -> Block<'blk, 'tcx>,\n+{\n     let _icx = push_ctxt(\"tvec::iter_vec_raw\");\n     let fcx = bcx.fcx;\n "}, {"sha": "3e499ea8498fbad9355e18cf6204370fb9db8573", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -143,13 +143,6 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n // Given a function type and a count of ty params, construct an llvm type\n pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>) -> Type {\n     match fty.sty {\n-        ty::ty_closure(ref f) => {\n-            type_of_rust_fn(cx,\n-                            Some(Type::i8p(cx)),\n-                            f.sig.0.inputs.as_slice(),\n-                            f.sig.0.output,\n-                            f.abi)\n-        }\n         ty::ty_bare_fn(_, ref f) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n@@ -207,7 +200,6 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         }\n \n         ty::ty_bare_fn(..) => Type::i8p(cx),\n-        ty::ty_closure(..) => Type::struct_(cx, &[Type::i8p(cx), Type::i8p(cx)], false),\n \n         ty::ty_vec(ty, Some(size)) => {\n             let llty = sizing_type_of(cx, ty);\n@@ -369,10 +361,6 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n       ty::ty_bare_fn(..) => {\n           type_of_fn_from_ty(cx, t).ptr_to()\n       }\n-      ty::ty_closure(_) => {\n-          let fn_ty = type_of_fn_from_ty(cx, t).ptr_to();\n-          Type::struct_(cx, &[fn_ty, Type::i8p(cx)], false)\n-      }\n       ty::ty_tup(ref tys) if tys.is_empty() => Type::nil(cx),\n       ty::ty_tup(..) => {\n           let repr = adt::represent_type(cx, t);"}, {"sha": "bde834c2ff899d4c4cf15f2f473049e11fc4faac", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1112,28 +1112,6 @@ pub fn ast_ty_to_ty<'tcx>(\n                 let bare_fn = ty_of_bare_fn(this, bf.unsafety, bf.abi, &*bf.decl);\n                 ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(bare_fn))\n             }\n-            ast::TyClosure(ref f) => {\n-                // Use corresponding trait store to figure out default bounds\n-                // if none were specified.\n-                let bounds = conv_existential_bounds(this,\n-                                                     rscope,\n-                                                     ast_ty.span,\n-                                                     None,\n-                                                     Vec::new(),\n-                                                     f.bounds.as_slice());\n-                let region_bound = bounds.region_bound;\n-                let fn_decl = ty_of_closure(this,\n-                                            f.unsafety,\n-                                            f.onceness,\n-                                            bounds,\n-                                            ty::RegionTraitStore(\n-                                                region_bound,\n-                                                ast::MutMutable),\n-                                            &*f.decl,\n-                                            abi::Rust,\n-                                            None);\n-                ty::mk_closure(tcx, fn_decl)\n-            }\n             ast::TyPolyTraitRef(ref bounds) => {\n                 conv_ty_poly_trait_ref(this, rscope, ast_ty.span, bounds[])\n             }"}, {"sha": "98a826355a73ac8e78719c637f9853b7e9674703", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -111,7 +111,7 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n {\n     // If the callee is a bare function or a closure, then we're all set.\n     match structurally_resolved_type(fcx, callee_expr.span, adjusted_ty).sty {\n-        ty::ty_bare_fn(..) | ty::ty_closure(_) => {\n+        ty::ty_bare_fn(..) => {\n             fcx.write_adjustment(callee_expr.id,\n                                  callee_expr.span,\n                                  ty::AdjustDerefRef(autoderefref));\n@@ -158,8 +158,7 @@ fn confirm_builtin_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let error_fn_sig;\n \n     let fn_sig = match callee_ty.sty {\n-        ty::ty_bare_fn(_, &ty::BareFnTy {ref sig, ..}) |\n-        ty::ty_closure(box ty::ClosureTy {ref sig, ..}) => {\n+        ty::ty_bare_fn(_, &ty::BareFnTy {ref sig, ..}) => {\n             sig\n         }\n         _ => {"}, {"sha": "9945e264bfc2a4ae3493f4acb1d14f53c8f4d4b0", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 12, "deletions": 116, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,20 +13,18 @@\n use super::{check_fn, Expectation, FnCtxt};\n \n use astconv;\n-use middle::infer;\n use middle::region::CodeExtent;\n use middle::subst;\n use middle::ty::{self, ToPolyTraitRef, Ty};\n use rscope::RegionScope;\n use syntax::abi;\n use syntax::ast;\n-use syntax::ast::CaptureClause::*;\n use syntax::ast_util;\n use util::ppaux::Repr;\n \n pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                    expr: &ast::Expr,\n-                                   capture: ast::CaptureClause,\n+                                   _capture: ast::CaptureClause,\n                                    opt_kind: Option<ast::UnboxedClosureKind>,\n                                    decl: &ast::FnDecl,\n                                    body: &ast::Block,\n@@ -46,30 +44,17 @@ pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n             // evidence than an unboxed closure is desired, we'll use\n             // that, otherwise we'll fall back to boxed closures.\n             match expected_sig_and_kind {\n-                None => { // doesn't look like an unboxed closure\n-                    let region = astconv::opt_ast_region_to_region(fcx,\n-                                                                   fcx,\n-                                                                   expr.span,\n-                                                                   &None);\n-\n-                    check_boxed_closure(fcx,\n-                                        expr,\n-                                        ty::RegionTraitStore(region, ast::MutMutable),\n-                                        decl,\n-                                        body,\n-                                        expected);\n-\n-                    match capture {\n-                        CaptureByValue => {\n-                            fcx.ccx.tcx.sess.span_err(\n-                                expr.span,\n-                                \"boxed closures can't capture by value, \\\n-                                if you want to use an unboxed closure, \\\n-                                explicitly annotate its kind: e.g. `move |:|`\");\n-                        },\n-                        CaptureByRef => {}\n-                    }\n-                }\n+                None => { // don't have information about the kind, request explicit annotation\n+                    // NB We still need to typeck the body, so assume `FnMut` kind just for that\n+                    let kind = ty::FnMutUnboxedClosureKind;\n+\n+                    check_unboxed_closure(fcx, expr, kind, decl, body, None);\n+\n+                    fcx.ccx.tcx.sess.span_err(\n+                        expr.span,\n+                        \"can't infer the \\\"kind\\\" of the closure, explicitly annotate it. e.g. \\\n+                        `|&:| {}`\");\n+                },\n                 Some((sig, kind)) => {\n                     check_unboxed_closure(fcx, expr, kind, decl, body, Some(sig));\n                 }\n@@ -254,92 +239,3 @@ fn deduce_unboxed_closure_expectations_from_obligations<'a,'tcx>(\n \n     None\n }\n-\n-\n-fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                                expr: &ast::Expr,\n-                                store: ty::TraitStore,\n-                                decl: &ast::FnDecl,\n-                                body: &ast::Block,\n-                                expected: Expectation<'tcx>) {\n-    let tcx = fcx.ccx.tcx;\n-\n-    // Find the expected input/output types (if any). Substitute\n-    // fresh bound regions for any bound regions we find in the\n-    // expected types so as to avoid capture.\n-    let expected_cenv = expected.map_to_option(fcx, |ty| match ty.sty {\n-        ty::ty_closure(ref cenv) => Some(cenv),\n-        _ => None\n-    });\n-    let (expected_sig, expected_onceness, expected_bounds) = match expected_cenv {\n-        Some(cenv) => {\n-            let (sig, _) =\n-                ty::replace_late_bound_regions(\n-                    tcx,\n-                    &cenv.sig,\n-                    |_, debruijn| fcx.inh.infcx.fresh_bound_region(debruijn));\n-            let onceness = match (&store, &cenv.store) {\n-                // As the closure type and onceness go, only three\n-                // combinations are legit:\n-                //      once closure\n-                //      many closure\n-                //      once proc\n-                // If the actual and expected closure type disagree with\n-                // each other, set expected onceness to be always Once or\n-                // Many according to the actual type. Otherwise, it will\n-                // yield either an illegal \"many proc\" or a less known\n-                // \"once closure\" in the error message.\n-                (&ty::UniqTraitStore, &ty::UniqTraitStore) |\n-                (&ty::RegionTraitStore(..), &ty::RegionTraitStore(..)) =>\n-                    cenv.onceness,\n-                (&ty::UniqTraitStore, _) => ast::Once,\n-                (&ty::RegionTraitStore(..), _) => ast::Many,\n-            };\n-            (Some(sig), onceness, cenv.bounds.clone())\n-        }\n-        _ => {\n-            // Not an error! Means we're inferring the closure type\n-            let region = fcx.infcx().next_region_var(\n-                infer::AddrOfRegion(expr.span));\n-            let bounds = ty::region_existential_bound(region);\n-            let onceness = ast::Many;\n-            (None, onceness, bounds)\n-        }\n-    };\n-\n-    // construct the function type\n-    let fn_ty = astconv::ty_of_closure(fcx,\n-                                       ast::Unsafety::Normal,\n-                                       expected_onceness,\n-                                       expected_bounds,\n-                                       store,\n-                                       decl,\n-                                       abi::Rust,\n-                                       expected_sig);\n-    let fn_sig = fn_ty.sig.clone();\n-    let fty = ty::mk_closure(tcx, fn_ty);\n-    debug!(\"check_expr_fn fty={}\", fcx.infcx().ty_to_string(fty));\n-\n-    fcx.write_ty(expr.id, fty);\n-\n-    // If the closure is a stack closure and hasn't had some non-standard\n-    // style inferred for it, then check it under its parent's style.\n-    // Otherwise, use its own\n-    let (inherited_style, inherited_style_id) = match store {\n-        ty::RegionTraitStore(..) => (fcx.ps.borrow().unsafety,\n-                                     fcx.ps.borrow().def),\n-        ty::UniqTraitStore => (ast::Unsafety::Normal, expr.id)\n-    };\n-\n-    let fn_sig =\n-        ty::liberate_late_bound_regions(tcx, CodeExtent::from_node_id(body.id), &fn_sig);\n-\n-    check_fn(fcx.ccx,\n-             inherited_style,\n-             inherited_style_id,\n-             &fn_sig,\n-             &*decl,\n-             expr.id,\n-             &*body,\n-             fcx.inh);\n-}"}, {"sha": "adea5084aab2b54383b13b08b62248110f3e46ab", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -462,7 +462,6 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                                                     method_callee: &MethodCallee) {\n         let sig = match method_callee.ty.sty {\n             ty::ty_bare_fn(_, ref f) => f.sig.clone(),\n-            ty::ty_closure(ref f) => f.sig.clone(),\n             _ => return,\n         };\n "}, {"sha": "beb51590b4159249338029abcf52a678e6149b2f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -387,14 +387,18 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n     // Do a search through a list of bounds, using a callback to actually\n     // create the candidates.\n-    fn elaborate_bounds(\n+    fn elaborate_bounds<F>(\n         &mut self,\n         bounds: &[ty::PolyTraitRef<'tcx>],\n         num_includes_types: bool,\n-        mk_cand: for<'b> |this: &mut ProbeContext<'b, 'tcx>,\n-                          tr: ty::PolyTraitRef<'tcx>,\n-                          m: Rc<ty::Method<'tcx>>,\n-                          method_num: uint|)\n+        mut mk_cand: F,\n+    ) where\n+        F: for<'b> FnMut(\n+            &mut ProbeContext<'b, 'tcx>,\n+            ty::PolyTraitRef<'tcx>,\n+            Rc<ty::Method<'tcx>>,\n+            uint,\n+        ),\n     {\n         debug!(\"elaborate_bounds(bounds={})\", bounds.repr(self.tcx()));\n "}, {"sha": "2940d556169686ddde78225def60113568f3fd54", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1850,7 +1850,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        span: Span,\n                                        adj: &ty::AutoAdjustment<'tcx>) {\n         match *adj {\n-            ty::AdjustAddEnv(..) |\n             ty::AdjustReifyFnPointer(..) => {\n             }\n             ty::AdjustDerefRef(ref d_r) => {"}, {"sha": "5a8263263808ee1eab07c18217294bfbac925867", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -735,29 +735,6 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     let function_type = rcx.resolve_node_type(expr.id);\n \n     match function_type.sty {\n-        ty::ty_closure(box ty::ClosureTy{store: ty::RegionTraitStore(..),\n-                                         ref bounds,\n-                                         ..}) => {\n-            // For closure, ensure that the variables outlive region\n-            // bound, since they are captured by reference.\n-            ty::with_freevars(tcx, expr.id, |freevars| {\n-                if freevars.is_empty() {\n-                    // No free variables means that the environment\n-                    // will be NULL at runtime and hence the closure\n-                    // has static lifetime.\n-                } else {\n-                    // Variables being referenced must outlive closure.\n-                    constrain_free_variables_in_by_ref_closure(\n-                        rcx, bounds.region_bound, expr, freevars);\n-\n-                    // Closure is stack allocated and hence cannot\n-                    // outlive the appropriate temporary scope.\n-                    let s = rcx.repeating_scope;\n-                    rcx.fcx.mk_subr(infer::InfStackClosure(expr.span),\n-                                    bounds.region_bound, ty::ReScope(CodeExtent::from_node_id(s)));\n-                }\n-            });\n-        }\n         ty::ty_unboxed_closure(_, region, _) => {\n             if tcx.capture_modes.borrow()[expr.id].clone() == ast::CaptureByRef {\n                 ty::with_freevars(tcx, expr.id, |freevars| {\n@@ -778,11 +755,6 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     rcx.set_repeating_scope(repeating_scope);\n \n     match function_type.sty {\n-        ty::ty_closure(box ty::ClosureTy {ref bounds, ..}) => {\n-            ty::with_freevars(tcx, expr.id, |freevars| {\n-                ensure_free_variable_types_outlive_closure_bound(rcx, bounds, expr, freevars);\n-            })\n-        }\n         ty::ty_unboxed_closure(_, region, _) => {\n             ty::with_freevars(tcx, expr.id, |freevars| {\n                 let bounds = ty::region_existential_bound(*region);\n@@ -884,33 +856,11 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n \n fn constrain_callee(rcx: &mut Rcx,\n                     callee_id: ast::NodeId,\n-                    call_expr: &ast::Expr,\n-                    callee_expr: &ast::Expr) {\n-    let call_region = ty::ReScope(CodeExtent::from_node_id(call_expr.id));\n-\n+                    _call_expr: &ast::Expr,\n+                    _callee_expr: &ast::Expr) {\n     let callee_ty = rcx.resolve_node_type(callee_id);\n     match callee_ty.sty {\n         ty::ty_bare_fn(..) => { }\n-        ty::ty_closure(ref closure_ty) => {\n-            let region = match closure_ty.store {\n-                ty::RegionTraitStore(r, _) => {\n-                    // While we're here, link the closure's region with a unique\n-                    // immutable borrow (gathered later in borrowck)\n-                    let mc = mc::MemCategorizationContext::new(rcx.fcx);\n-                    let expr_cmt = ignore_err!(mc.cat_expr(callee_expr));\n-                    link_region(rcx, callee_expr.span, call_region,\n-                                ty::UniqueImmBorrow, expr_cmt);\n-                    r\n-                }\n-                ty::UniqTraitStore => ty::ReStatic\n-            };\n-            rcx.fcx.mk_subr(infer::InvokeClosure(callee_expr.span),\n-                            call_region, region);\n-\n-            let region = closure_ty.bounds.region_bound;\n-            rcx.fcx.mk_subr(infer::InvokeClosure(callee_expr.span),\n-                            call_region, region);\n-        }\n         _ => {\n             // this should not happen, but it does if the program is\n             // erroneous"}, {"sha": "7a9961e750c217fb30deed5c03beea4257fa5263", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -67,10 +67,6 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n                 // No borrowed content reachable here.\n             }\n \n-            ty::ty_closure(box ref c) => {\n-                self.accumulate_from_closure_ty(ty, c);\n-            }\n-\n             ty::ty_unboxed_closure(_, region, _) => {\n                 // An \"unboxed closure type\" is basically\n                 // modeled here as equivalent to a struct like\n@@ -323,22 +319,6 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n         }\n     }\n \n-    fn accumulate_from_closure_ty(&mut self,\n-                                  ty: Ty<'tcx>,\n-                                  c: &ty::ClosureTy<'tcx>)\n-    {\n-        match c.store {\n-            ty::RegionTraitStore(r_b, _) => {\n-                self.push_region_constraint_from_top(r_b);\n-            }\n-            ty::UniqTraitStore => { }\n-        }\n-\n-        let required_region_bounds =\n-            ty::object_region_bounds(self.tcx, None, c.bounds.builtin_bounds);\n-        self.accumulate_from_object_ty(ty, c.bounds.region_bound, required_region_bounds);\n-    }\n-\n     fn accumulate_from_object_ty(&mut self,\n                                  ty: Ty<'tcx>,\n                                  region_bound: ty::Region,"}, {"sha": "92fda96595c7bab805f73eee53d20fe823e70cad", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -122,7 +122,6 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n                      _body: &ast::Block)\n     {\n         let is_old_skool_closure = match self.fcx.expr_ty(expr).sty {\n-            ty::ty_closure(..) => true,\n             _ => false,\n         };\n "}, {"sha": "d4a5bda5f97f9e930f5c8f5055e45d08c9408070", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -81,10 +81,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         }\n     }\n \n-    fn with_fcx(&mut self,\n-                item: &ast::Item,\n-                f: for<'fcx> |&mut CheckTypeWellFormedVisitor<'ccx, 'tcx>,\n-                              &FnCtxt<'fcx, 'tcx>|) {\n+    fn with_fcx<F>(&mut self, item: &ast::Item, mut f: F) where\n+        F: for<'fcx> FnMut(&mut CheckTypeWellFormedVisitor<'ccx, 'tcx>, &FnCtxt<'fcx, 'tcx>),\n+    {\n         let ccx = self.ccx;\n         let item_def_id = local_def(item.id);\n         let polytype = ty::lookup_item_type(ccx.tcx, item_def_id);\n@@ -100,10 +99,8 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     }\n \n     /// In a type definition, we check that to ensure that the types of the fields are well-formed.\n-    fn check_type_defn(&mut self,\n-                       item: &ast::Item,\n-                       lookup_fields: for<'fcx> |&FnCtxt<'fcx, 'tcx>|\n-                                                 -> Vec<AdtVariant<'tcx>>)\n+    fn check_type_defn<F>(&mut self, item: &ast::Item, mut lookup_fields: F) where\n+        F: for<'fcx> FnMut(&FnCtxt<'fcx, 'tcx>) -> Vec<AdtVariant<'tcx>>,\n     {\n         self.with_fcx(item, |this, fcx| {\n             let variants = lookup_fields(fcx);"}, {"sha": "70644b6e7de5d5386b9822c655205263188547aa", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -266,10 +266,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             Some(adjustment) => {\n                 let adj_object = ty::adjust_is_object(&adjustment);\n                 let resolved_adjustment = match adjustment {\n-                    ty::AdjustAddEnv(def_id, store) => {\n-                        ty::AdjustAddEnv(def_id, self.resolve(&store, reason))\n-                    }\n-\n                     ty::AdjustReifyFnPointer(def_id) => {\n                         ty::AdjustReifyFnPointer(def_id)\n                     }"}, {"sha": "09ab98745bd6a59a1d1573ca603a6a1508badabd", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -22,7 +22,7 @@ use middle::subst::{self, Subst};\n use middle::ty::RegionEscape;\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{ParameterEnvironment, TypeTraitItemId, lookup_item_type};\n-use middle::ty::{Ty, ty_bool, ty_char, ty_closure, ty_enum, ty_err};\n+use middle::ty::{Ty, ty_bool, ty_char, ty_enum, ty_err};\n use middle::ty::{ty_param, TypeScheme, ty_ptr};\n use middle::ty::{ty_rptr, ty_struct, ty_trait, ty_tup};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_open};\n@@ -69,7 +69,7 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n         }\n \n         ty_bool | ty_char | ty_int(..) | ty_uint(..) | ty_float(..) |\n-        ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_closure(..) | ty_tup(..) |\n+        ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_tup(..) |\n         ty_param(..) | ty_err | ty_open(..) | ty_uniq(_) |\n         ty_ptr(_) | ty_rptr(_, _) | ty_projection(..) => {\n             None"}, {"sha": "e58c2275fcd96448c9836330cfe2bad49df4120f", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -831,20 +831,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::ty_bare_fn(_, &ty::BareFnTy { ref sig, .. }) |\n-            ty::ty_closure(box ty::ClosureTy {\n-                    ref sig,\n-                    store: ty::UniqTraitStore,\n-                    ..\n-                }) =>\n-            {\n-                self.add_constraints_from_sig(generics, sig, variance);\n-            }\n-\n-            ty::ty_closure(box ty::ClosureTy { ref sig,\n-                    store: ty::RegionTraitStore(region, _), .. }) => {\n-                let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(generics, region, contra);\n+            ty::ty_bare_fn(_, &ty::BareFnTy { ref sig, .. }) => {\n                 self.add_constraints_from_sig(generics, sig, variance);\n             }\n "}, {"sha": "e01dbac68ee8d8ff6ae82a84c995519914a9fee9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1366,7 +1366,6 @@ impl Clean<Type> for ast::Ty {\n                     }\n                 }\n             }\n-            TyClosure(ref c) => Closure(box c.clean(cx)),\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyParen(ref ty) => ty.clean(cx),\n             TyQPath(ref qp) => qp.clean(cx),\n@@ -1426,19 +1425,6 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n                 abi: fty.abi.to_string(),\n             }),\n-            ty::ty_closure(ref fty) => {\n-                let decl = box ClosureDecl {\n-                    lifetimes: Vec::new(), // FIXME: this looks wrong...\n-                    decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n-                    onceness: fty.onceness,\n-                    unsafety: fty.unsafety,\n-                    bounds: fty.bounds.clean(cx),\n-                };\n-                match fty.store {\n-                    ty::UniqTraitStore => Proc(decl),\n-                    ty::RegionTraitStore(..) => Closure(decl),\n-                }\n-            }\n             ty::ty_struct(did, substs) |\n             ty::ty_enum(did, substs) => {\n                 let fqn = csearch::get_item_path(cx.tcx(), did);"}, {"sha": "bd4cb1884a69a5b6708de57a5c575ff371877c8b", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1125,15 +1125,6 @@ impl Json {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a> ops::Index<&'a str, Json>  for Json {\n-    fn index(&self, idx: & &str) -> &Json {\n-        self.find(*idx).unwrap()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a> ops::Index<&'a str>  for Json {\n     type Output = Json;\n \n@@ -1142,18 +1133,6 @@ impl<'a> ops::Index<&'a str>  for Json {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl ops::Index<uint, Json> for Json {\n-    fn index<'a>(&'a self, idx: &uint) -> &'a Json {\n-        match self {\n-            &Json::Array(ref v) => v.index(idx),\n-            _ => panic!(\"can only index Json with uint if it is an array\")\n-        }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl ops::Index<uint> for Json {\n     type Output = Json;\n "}, {"sha": "9932f8d0306b3a81de144241f66df5dd6eff4366", "filename": "src/libserialize/json_stage0.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibserialize%2Fjson_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibserialize%2Fjson_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson_stage0.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1123,15 +1123,6 @@ impl Json {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl<'a> ops::Index<&'a str, Json>  for Json {\n-    fn index(&self, idx: & &str) -> &Json {\n-        self.find(*idx).unwrap()\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl<'a> ops::Index<&'a str>  for Json {\n     type Output = Json;\n \n@@ -1140,18 +1131,6 @@ impl<'a> ops::Index<&'a str>  for Json {\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-impl ops::Index<uint, Json> for Json {\n-    fn index<'a>(&'a self, idx: &uint) -> &'a Json {\n-        match self {\n-            &Json::Array(ref v) => v.index(idx),\n-            _ => panic!(\"can only index Json with uint if it is an array\")\n-        }\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n impl ops::Index<uint> for Json {\n     type Output = Json;\n "}, {"sha": "c35be86420de87e1ca2849e1309195904190346f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1226,19 +1226,6 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H>\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> Index<Q, V> for HashMap<K, V, H>\n-    where Q: BorrowFrom<K> + Hash<S> + Eq\n-{\n-    #[inline]\n-    fn index<'a>(&'a self, index: &Q) -> &'a V {\n-        self.get(index).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq\n@@ -1251,19 +1238,6 @@ impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V, H\n     }\n }\n \n-// NOTE(stage0): remove impl after a snapshot\n-#[cfg(stage0)]\n-#[stable]\n-impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> IndexMut<Q, V> for HashMap<K, V, H>\n-    where Q: BorrowFrom<K> + Hash<S> + Eq\n-{\n-    #[inline]\n-    fn index_mut<'a>(&'a mut self, index: &Q) -> &'a mut V {\n-        self.get_mut(index).expect(\"no entry found for key\")\n-    }\n-}\n-\n-#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n #[stable]\n impl<K: Hash<S> + Eq, Sized? Q, V, S, H: Hasher<S>> IndexMut<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq"}, {"sha": "4691c06c1de16abfa62f6da9b9e815cd43c9aafc", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -518,14 +518,16 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// use std::io;\n ///\n /// // one possible implementation of fs::walk_dir only visiting files\n-/// fn visit_dirs(dir: &Path, cb: |&Path|) -> io::IoResult<()> {\n+/// fn visit_dirs<F>(dir: &Path, cb: &mut F) -> io::IoResult<()> where\n+///     F: FnMut(&Path),\n+/// {\n ///     if dir.is_dir() {\n ///         let contents = try!(fs::readdir(dir));\n ///         for entry in contents.iter() {\n ///             if entry.is_dir() {\n-///                 try!(visit_dirs(entry, |p| cb(p)));\n+///                 try!(visit_dirs(entry, cb));\n ///             } else {\n-///                 cb(entry);\n+///                 (*cb)(entry);\n ///             }\n ///         }\n ///         Ok(())"}, {"sha": "d398b61fe64cf8596d7926626ffd1eca5c03ac22", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -17,11 +17,12 @@\n \n pub use self::IpAddr::*;\n \n+use boxed::Box;\n use fmt;\n use io::{self, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n-use ops::FnOnce;\n+use ops::{FnOnce, FnMut};\n use option::Option;\n use option::Option::{None, Some};\n use result::Result::{Ok, Err};\n@@ -120,10 +121,10 @@ impl<'a> Parser<'a> {\n     }\n \n     // Return result of first successful parser\n-    fn read_or<T>(&mut self, parsers: &mut [|&mut Parser| -> Option<T>])\n+    fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T>>])\n                -> Option<T> {\n         for pf in parsers.iter_mut() {\n-            match self.read_atomically(|p: &mut Parser| (*pf)(p)) {\n+            match self.read_atomically(|p: &mut Parser| pf.call_mut((p,))) {\n                 Some(r) => return Some(r),\n                 None => {}\n             }\n@@ -320,22 +321,22 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ip_addr(&mut self) -> Option<IpAddr> {\n-        let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr();\n-        let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr();\n-        self.read_or(&mut [ipv4_addr, ipv6_addr])\n+        let ipv4_addr = |&mut: p: &mut Parser| p.read_ipv4_addr();\n+        let ipv6_addr = |&mut: p: &mut Parser| p.read_ipv6_addr();\n+        self.read_or(&mut [box ipv4_addr, box ipv6_addr])\n     }\n \n     fn read_socket_addr(&mut self) -> Option<SocketAddr> {\n         let ip_addr = |&: p: &mut Parser| {\n-            let ipv4_p = |p: &mut Parser| p.read_ip_addr();\n-            let ipv6_p = |p: &mut Parser| {\n+            let ipv4_p = |&mut: p: &mut Parser| p.read_ip_addr();\n+            let ipv6_p = |&mut: p: &mut Parser| {\n                 let open_br = |&: p: &mut Parser| p.read_given_char('[');\n                 let ip_addr = |&: p: &mut Parser| p.read_ipv6_addr();\n                 let clos_br = |&: p: &mut Parser| p.read_given_char(']');\n                 p.read_seq_3::<char, IpAddr, char, _, _, _>(open_br, ip_addr, clos_br)\n                         .map(|t| match t { (_, ip, _) => ip })\n             };\n-            p.read_or(&mut [ipv4_p, ipv6_p])\n+            p.read_or(&mut [box ipv4_p, box ipv6_p])\n         };\n         let colon = |&: p: &mut Parser| p.read_given_char(':');\n         let port  = |&: p: &mut Parser| p.read_number(10, 5, 0x10000).map(|n| n as u16);"}, {"sha": "e779821342a17dc76650d62d1794ba0da6762a82", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1220,8 +1220,6 @@ pub enum Ty_ {\n     TyPtr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`)\n     TyRptr(Option<Lifetime>, MutTy),\n-    /// A closure (e.g. `|uint| -> bool`)\n-    TyClosure(P<ClosureTy>),\n     /// A bare function (e.g. `fn(uint) -> bool`)\n     TyBareFn(P<BareFnTy>),\n     /// A tuple (`(A, B, C, D,...)`)"}, {"sha": "cf09e2777f7c69a0410d7e33275e42e1c37e5d11", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -859,9 +859,6 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n     fn visit_ty(&mut self, ty: &'ast Ty) {\n         match ty.node {\n-            TyClosure(ref fd) => {\n-                self.visit_fn_decl(&*fd.decl);\n-            }\n             TyBareFn(ref fd) => {\n                 self.visit_fn_decl(&*fd.decl);\n             }"}, {"sha": "3c74a9f4431df52d94844d2c656c5d9d0efbdd75", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|c, s, sub| {\n+                combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_clone(\"Clone\", c, s, sub)\n                 }),\n             }"}, {"sha": "84d30a99004a46f9f9a10fbfb041fd08989d1320", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiAnd, subexpr, eq)\n             },\n             cx.expr_bool(span, true),\n-            |cx, span, _, _| cx.expr_bool(span, false),\n+            box |cx, span, _, _| cx.expr_bool(span, false),\n             cx, span, substr)\n     }\n     fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n@@ -57,7 +57,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiOr, subexpr, eq)\n             },\n             cx.expr_bool(span, false),\n-            |cx, span, _, _| cx.expr_bool(span, true),\n+            box |cx, span, _, _| cx.expr_bool(span, true),\n             cx, span, substr)\n     }\n \n@@ -72,7 +72,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     $f(a, b, c)\n                 })\n             }"}, {"sha": "f9c8d95b3084840bcafced9e9594fc059e89f9f6", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -38,7 +38,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|cx, span, substr| {\n+                combine_substructure: combine_substructure(box |cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n                 })\n             }\n@@ -61,7 +61,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         args: vec![borrowed_self()],\n         ret_ty: ret_ty,\n         attributes: attrs,\n-        combine_substructure: combine_substructure(|cx, span, substr| {\n+        combine_substructure: combine_substructure(box |cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n         })\n     };\n@@ -174,7 +174,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         equals_expr.clone(),\n-        |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             } else {\n@@ -222,7 +222,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             cx.expr_binary(span, ast::BiOr, cmp, and)\n         },\n         cx.expr_bool(span, equal),\n-        |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             } else {"}, {"sha": "cdb36ede65da9e8a9dda5d858c0a6e5855d14151", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n+                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n                        cx,\n                        span,\n                        substr)\n@@ -57,7 +57,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n                 args: vec!(),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_total_eq_assert(a, b, c)\n                 })\n             }"}, {"sha": "10ecc86bda530838016a9950ba01065e1cb10681", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -41,7 +41,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"cmp\", \"Ordering\"))),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_cmp(a, b, c)\n                 }),\n             }\n@@ -130,7 +130,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         cx.expr_path(equals_path.clone()),\n-        |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n             } else {"}, {"sha": "8094f0d3de8ccedeb30c92967b1761c69c808be7", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -76,7 +76,7 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     decodable_substructure(a, b, c, krate)\n                 }),\n             })"}, {"sha": "047c4fef3c4f185e95973b7535c25ca0ff13c786", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     default_substructure(a, b, c)\n                 })\n             })"}, {"sha": "0fceb0fbfdac4774dc0e6d489b9b4f877bd63eeb", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -152,7 +152,7 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     encodable_substructure(a, b, c)\n                 }),\n             })"}, {"sha": "1fb8189c63c818769a7a0b9c2df02e264f10b86d", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -312,19 +312,15 @@ pub enum SubstructureFields<'a> {\n /// Combine the values of all the fields together. The last argument is\n /// all the fields of all the structures.\n pub type CombineSubstructureFunc<'a> =\n-    |&mut ExtCtxt, Span, &Substructure|: 'a -> P<Expr>;\n+    Box<FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n \n /// Deal with non-matching enum variants.  The tuple is a list of\n /// identifiers (one for each `Self` argument, which could be any of the\n /// variants since they have been collapsed together) and the identifiers\n /// holding the variant index value for each of the `Self` arguments.  The\n /// last argument is all the non-`Self` args of the method being derived.\n pub type EnumNonMatchCollapsedFunc<'a> =\n-    |&mut ExtCtxt,\n-     Span,\n-     (&[Ident], &[Ident]),\n-     &[P<Expr>]|: 'a\n-     -> P<Expr>;\n+    Box<FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n     -> RefCell<CombineSubstructureFunc<'a>> {\n@@ -606,7 +602,7 @@ impl<'a> MethodDef<'a> {\n         };\n         let mut f = self.combine_substructure.borrow_mut();\n         let f: &mut CombineSubstructureFunc = &mut *f;\n-        (*f)(cx, trait_.span, &substructure)\n+        f.call_mut((cx, trait_.span, &substructure))\n     }\n \n     fn get_ret_ty(&self,\n@@ -1341,7 +1337,7 @@ impl<'a> TraitDef<'a> {\n pub fn cs_fold<F>(use_foldl: bool,\n                   mut f: F,\n                   base: P<Expr>,\n-                  enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n+                  mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n                   cx: &mut ExtCtxt,\n                   trait_span: Span,\n                   substructure: &Substructure)\n@@ -1369,8 +1365,8 @@ pub fn cs_fold<F>(use_foldl: bool,\n             }\n         },\n         EnumNonMatchingCollapsed(ref all_args, _, tuple) =>\n-            enum_nonmatch_f(cx, trait_span, (all_args[], tuple),\n-                            substructure.nonself_args),\n+            enum_nonmatch_f.call_mut((cx, trait_span, (all_args[], tuple),\n+                                      substructure.nonself_args)),\n         StaticEnum(..) | StaticStruct(..) => {\n             cx.span_bug(trait_span, \"static function in `derive`\")\n         }\n@@ -1387,7 +1383,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n /// ```\n #[inline]\n pub fn cs_same_method<F>(f: F,\n-                         enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n+                         mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n                          cx: &mut ExtCtxt,\n                          trait_span: Span,\n                          substructure: &Substructure)\n@@ -1409,8 +1405,8 @@ pub fn cs_same_method<F>(f: F,\n             f(cx, trait_span, called)\n         },\n         EnumNonMatchingCollapsed(ref all_self_args, _, tuple) =>\n-            enum_nonmatch_f(cx, trait_span, (all_self_args[], tuple),\n-                            substructure.nonself_args),\n+            enum_nonmatch_f.call_mut((cx, trait_span, (all_self_args[], tuple),\n+                                     substructure.nonself_args)),\n         StaticEnum(..) | StaticStruct(..) => {\n             cx.span_bug(trait_span, \"static function in `derive`\")\n         }"}, {"sha": "b9acde4bf6be9ac21195a30d6b3ce454fe9fdc7f", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -55,7 +55,7 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(args), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     hash_substructure(a, b, c)\n                 })\n             }"}, {"sha": "d36bb2cd1c2aaab29866a3798ce96fb3101bcbbb", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs.clone(),\n-                combine_substructure: combine_substructure(|c, s, sub| {\n+                combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_from(\"i64\", c, s, sub)\n                 }),\n             },\n@@ -62,7 +62,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|c, s, sub| {\n+                combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_from(\"u64\", c, s, sub)\n                 }),\n             })"}, {"sha": "5517019f804cebde728cb77cfd2b5f17f98b8219", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -45,7 +45,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 ),\n                 ret_ty: Self,\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     rand_substructure(a, b, c)\n                 })\n             }"}, {"sha": "eceac4e9a8368ff38af02b125baaa07a05b5bb92", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 args: vec!(fmtr),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"fmt\", \"Result\"))),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     show_substructure(a, b, c)\n                 })\n             }"}, {"sha": "cb6277069e1a2b4ccbf3078c7ee23c04eed185df", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -364,12 +364,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     }\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n-        if let ast::TyClosure(ref closure) =  t.node {\n-            // this used to be blocked by a feature gate, but it should just\n-            // be plain impossible right now\n-            assert!(closure.onceness != ast::Once);\n-        }\n-\n         visit::walk_ty(self, t);\n     }\n "}, {"sha": "396b0033b815fcc58dc9c837bf6e5415d302d8c7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -414,17 +414,6 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyRptr(region, mt) => {\n                 TyRptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n             }\n-            TyClosure(f) => {\n-                TyClosure(f.map(|ClosureTy {unsafety, onceness, bounds, decl, lifetimes}| {\n-                    ClosureTy {\n-                        unsafety: unsafety,\n-                        onceness: onceness,\n-                        bounds: fld.fold_bounds(bounds),\n-                        decl: fld.fold_fn_decl(decl),\n-                        lifetimes: fld.fold_lifetime_defs(lifetimes)\n-                    }\n-                }))\n-            }\n             TyBareFn(f) => {\n                 TyBareFn(f.map(|BareFnTy {lifetimes, unsafety, abi, decl}| BareFnTy {\n                     lifetimes: fld.fold_lifetime_defs(lifetimes),"}, {"sha": "75b2c17b81bd487512fc8013d7380d2c86e15f66", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -34,6 +34,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteExternCrateRenaming,\n     ObsoleteProcType,\n     ObsoleteProcExpr,\n+    ObsoleteClosureType,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -94,6 +95,10 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n             ObsoleteExternCrateRenaming => (\n                 \"`extern crate foo = bar` syntax\",\n                 \"write `extern crate bar as foo` instead\"\n+            ),\n+            ObsoleteClosureType => (\n+                \"`|uint| -> bool` closure type syntax\",\n+                \"use unboxed closures instead, no type annotation needed\"\n             )\n         };\n "}, {"sha": "28c7293fc26a33b4d8ab59ee355680cada72841e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,7 +14,7 @@ pub use self::PathParsingMode::*;\n use self::ItemOrViewItem::*;\n \n use abi;\n-use ast::{AssociatedType, BareFnTy, ClosureTy};\n+use ast::{AssociatedType, BareFnTy};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{ProvidedMethod, Public, Unsafety};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n@@ -30,7 +30,6 @@ use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n-use ast::{Many};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n@@ -55,7 +54,7 @@ use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{TtDelimited, TtSequence, TtToken};\n use ast::{TupleVariantKind, Ty, Ty_, TypeBinding};\n-use ast::{TypeField, TyFixedLengthVec, TyClosure, TyBareFn};\n+use ast::{TypeField, TyFixedLengthVec, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr, TyQPath};\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n@@ -1227,38 +1226,29 @@ impl<'a> Parser<'a> {\n \n         */\n \n-        let unsafety = self.parse_unsafety();\n+        let ty_closure_span = self.last_span;\n \n-        let lifetime_defs = self.parse_legacy_lifetime_defs(lifetime_defs);\n+        // To be helpful, parse the closure type as ever\n+        let _ = self.parse_unsafety();\n \n-        let inputs = if self.eat(&token::OrOr) {\n-            Vec::new()\n-        } else {\n+        let _ = self.parse_legacy_lifetime_defs(lifetime_defs);\n+\n+        if !self.eat(&token::OrOr) {\n             self.expect_or();\n \n-            let inputs = self.parse_seq_to_before_or(\n+            let _ = self.parse_seq_to_before_or(\n                 &token::Comma,\n                 |p| p.parse_arg_general(false));\n             self.expect_or();\n-            inputs\n-        };\n+        }\n \n-        let bounds = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n+        let _ = self.parse_colon_then_ty_param_bounds(BoundParsingMode::Bare);\n \n-        let output = self.parse_ret_ty();\n-        let decl = P(FnDecl {\n-            inputs: inputs,\n-            output: output,\n-            variadic: false\n-        });\n+        let _ = self.parse_ret_ty();\n \n-        TyClosure(P(ClosureTy {\n-            unsafety: unsafety,\n-            onceness: Many,\n-            bounds: bounds,\n-            decl: decl,\n-            lifetimes: lifetime_defs,\n-        }))\n+        self.obsolete(ty_closure_span, ObsoleteClosureType);\n+\n+        TyInfer\n     }\n \n     pub fn parse_unsafety(&mut self) -> Unsafety {"}, {"sha": "e44cc2257c24c990a1915baf26d08d5dd29c7f4b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -714,25 +714,6 @@ impl<'a> State<'a> {\n                                       Some(&generics),\n                                       None));\n             }\n-            ast::TyClosure(ref f) => {\n-                let generics = ast::Generics {\n-                    lifetimes: f.lifetimes.clone(),\n-                    ty_params: OwnedSlice::empty(),\n-                    where_clause: ast::WhereClause {\n-                        id: ast::DUMMY_NODE_ID,\n-                        predicates: Vec::new(),\n-                    },\n-                };\n-                try!(self.print_ty_fn(None,\n-                                      Some('&'),\n-                                      f.unsafety,\n-                                      f.onceness,\n-                                      &*f.decl,\n-                                      None,\n-                                      &f.bounds,\n-                                      Some(&generics),\n-                                      None));\n-            }\n             ast::TyPath(ref path, _) => {\n                 try!(self.print_path(path, false));\n             }"}, {"sha": "737f1b73b32907eba034eb585e9ae33e6c278288", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -404,14 +404,6 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n                 visitor.visit_ty(&**tuple_element_type)\n             }\n         }\n-        TyClosure(ref function_declaration) => {\n-            for argument in function_declaration.decl.inputs.iter() {\n-                visitor.visit_ty(&*argument.ty)\n-            }\n-            walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n-            walk_ty_param_bounds_helper(visitor, &function_declaration.bounds);\n-            walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n-        }\n         TyBareFn(ref function_declaration) => {\n             for argument in function_declaration.decl.inputs.iter() {\n                 visitor.visit_ty(&*argument.ty)"}, {"sha": "5c21a8a8abfb0c3615031b8bc01b7f7044abfdc9", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-04 b2085d9\n+  freebsd-x86_64 50ccb6bf9c0645d0746a5167493a39b2be40c2d4\n+  linux-i386 b880b98d832c9a049b8ef6a50df50061e363de5a\n+  linux-x86_64 82a09c162474b69d2d1e4e8399086f3f0f4e31c3\n+  macos-i386 569055bb10d96ab25f78ecf2c80ffbccd5e69b8d\n+  macos-x86_64 cff1f9ebd63dae6890359b7d353bd9486d8ecdfc\n+  winnt-i386 553790fe493413287a19d17a42bf7225d3e2272d\n+  winnt-x86_64 bab0d13960afb7ccdd6bf11452de1b9c457cc3e9\n+\n S 2015-01-02 c894171\n   freebsd-x86_64 ea8bcf75eada3539f5cbab51708eecf40d436b77\n   linux-i386 646ae265721e3cbe19404aae4fea4ffa1f1d90cf"}, {"sha": "3b1857f9ccb698efb9c5a925cf979d488d596aff", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,12 +11,12 @@\n #![crate_name=\"cci_impl_lib\"]\n \n pub trait uint_helpers {\n-    fn to(&self, v: uint, f: |uint|);\n+    fn to<F>(&self, v: uint, f: F) where F: FnMut(uint);\n }\n \n impl uint_helpers for uint {\n     #[inline]\n-    fn to(&self, v: uint, f: |uint|) {\n+    fn to<F>(&self, v: uint, mut f: F) where F: FnMut(uint) {\n         let mut i = *self;\n         while i < v {\n             f(i);"}, {"sha": "3ba068df058b3d79003108ea03b9a60230675f56", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,7 +11,7 @@\n #![crate_name=\"cci_iter_lib\"]\n \n #[inline]\n-pub fn iter<T>(v: &[T], f: |&T|) {\n+pub fn iter<T, F>(v: &[T], mut f: F) where F: FnMut(&T) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "474925d8838b5214ea45ae3e2ab38709b2e18f6a", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@\n \n \n // same as cci_iter_lib, more-or-less, but not marked inline\n-pub fn iter(v: Vec<uint> , f: |uint|) {\n+pub fn iter<F>(v: Vec<uint> , mut f: F) where F: FnMut(uint) {\n     let mut i = 0u;\n     let n = v.len();\n     while i < n {"}, {"sha": "690d5783c4bc2b6b7ca7a0ffab26696eb1a18fbd", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,12 +12,12 @@\n \n // part of issue-6919.rs\n \n-pub struct C<'a> {\n-    pub k: ||: 'a,\n+pub struct C<K> where K: FnOnce() {\n+    pub k: K,\n }\n \n fn no_op() { }\n-pub const D : C<'static> = C {\n-    k: no_op\n+pub const D : C<fn()> = C {\n+    k: no_op as fn()\n };\n "}, {"sha": "c2820a8d4ae5de075ec0896941cfdcec7229ffef", "filename": "src/test/auxiliary/issue13507.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Fissue13507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13507.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -21,7 +21,6 @@ pub mod testtypes {\n         ids.push(TypeId::of::<FooEnum>());\n         ids.push(TypeId::of::<FooUniq>());\n         ids.push(TypeId::of::<FooPtr>());\n-        ids.push(TypeId::of::<FooClosure>());\n         ids.push(TypeId::of::<&'static FooTrait>());\n         ids.push(TypeId::of::<FooStruct>());\n         ids.push(TypeId::of::<FooTuple>());\n@@ -68,9 +67,6 @@ pub mod testtypes {\n \n     // Skipping ty_bare_fn (how do you get a bare function type, rather than proc or closure?)\n \n-    // Tests ty_closure (does not test all types of closures)\n-    pub type FooClosure = |arg: u8|: 'static -> u8;\n-\n     // Tests ty_trait\n     pub trait FooTrait {\n         fn foo_method(&self) -> uint;"}, {"sha": "399dfb9fa9a5bbc40bf6c955abfd089ea41ee421", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,5 +13,5 @@\n \n pub fn foo<T>() {\n     fn death() -> int { panic!() }\n-    debug!(\"{}\", (||{ death() })());\n+    debug!(\"{}\", (|&:|{ death() })());\n }"}, {"sha": "1dcac9fe0742d5f6961a2c861eab1aeb92e54036", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -61,12 +61,14 @@ impl MutableSet<uint> for BitvSet {\n \n impl Results {\n     pub fn bench_int<T:MutableSet<uint>,\n-                     R: rand::Rng>(\n+                     R:rand::Rng,\n+                     F:FnMut() -> T>(\n                      &mut self,\n                      rng: &mut R,\n                      num_keys: uint,\n                      rand_cap: uint,\n-                     f: || -> T) { {\n+                     mut f: F) {\n+        {\n             let mut set = f();\n             timed(&mut self.sequential_ints, || {\n                 for i in range(0u, num_keys) {\n@@ -103,11 +105,12 @@ impl Results {\n     }\n \n     pub fn bench_str<T:MutableSet<String>,\n-                     R:rand::Rng>(\n+                     R:rand::Rng,\n+                     F:FnMut() -> T>(\n                      &mut self,\n                      rng: &mut R,\n                      num_keys: uint,\n-                     f: || -> T) {\n+                     mut f: F) {\n         {\n             let mut set = f();\n             timed(&mut self.sequential_strings, || {"}, {"sha": "e6ef6a8c8c9ec4da7841ca5e263852b94cb25933", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -94,7 +94,9 @@ fn update_freq(mm: &mut HashMap<Vec<u8> , uint>, key: &[u8]) {\n // given a Vec<u8>, for each window call a function\n // i.e., for \"hello\" and windows of size four,\n // run it(\"hell\") and it(\"ello\"), then return \"llo\"\n-fn windows_with_carry(bb: &[u8], nn: uint, it: |window: &[u8]|) -> Vec<u8> {\n+fn windows_with_carry<F>(bb: &[u8], nn: uint, mut it: F) -> Vec<u8> where\n+    F: FnMut(&[u8]),\n+{\n    let mut ii = 0u;\n \n    let len = bb.len();"}, {"sha": "cdc7617fec8b074f294cd4117988b1a19e9b6557", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -53,14 +53,14 @@ use std::thread::Thread;\n \n // returns an infinite iterator of repeated applications of f to x,\n // i.e. [x, f(x), f(f(x)), ...], as haskell iterate function.\n-fn iterate<'a, T>(x: T, f: |&T|: 'a -> T) -> Iterate<'a, T> {\n+fn iterate<T, F>(x: T, f: F) -> Iterate<T, F> where F: FnMut(&T) -> T {\n     Iterate {f: f, next: x}\n }\n-struct Iterate<'a, T> {\n-    f: |&T|: 'a -> T,\n+struct Iterate<T, F> where F: FnMut(&T) -> T {\n+    f: F,\n     next: T\n }\n-impl<'a, T> Iterator for Iterate<'a, T> {\n+impl<T, F> Iterator for Iterate<T, F> where F: FnMut(&T) -> T {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> {"}, {"sha": "f15157d126ed76ee64c85f474f66a9c42efcdeb6", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,7 +11,7 @@\n \n struct sty(Vec<int> );\n \n-fn unpack(_unpack: |v: &sty| -> Vec<int> ) {}\n+fn unpack<F>(_unpack: F) where F: FnOnce(&sty) -> Vec<int> {}\n \n fn main() {\n     let _foo = unpack(|s| {"}, {"sha": "f14668192f8503cfd0d4485b900ef5d2b1247303", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n fn main() {\n   let nyan : cat = cat(52u, 99);\n-  nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+  nyan.speak = |&:| println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "e268b0e93fdad4e9aac45a114c0adeb738d51b28", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that fn-to-block coercion isn't incorrectly lifted over\n-// other tycons.\n-\n-fn main() {\n-    fn f(f: fn(fn(fn()))) {\n-    }\n-\n-    fn g(f: fn(||)) {\n-    }\n-\n-    f(g);\n-    //~^ ERROR mismatched types: expected `fn(fn(fn()))`\n-}"}, {"sha": "76af956a26fff7a9a908163d5c578fa49b8fc908", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that fn-to-block coercion isn't incorrectly lifted over\n-// other tycons.\n-\n-fn coerce(b: ||) -> extern fn() {\n-    fn lol(f: extern fn(v: ||) -> extern fn(),\n-           g: ||) -> extern fn() { return f(g); }\n-    fn fn_id(f: extern fn()) -> extern fn() { return f }\n-    return lol(fn_id, b);\n-    //~^ ERROR mismatched types\n-}\n-\n-fn main() {\n-    let i = 8i;\n-    let f = coerce(|| println!(\"{}\", i) );\n-    f();\n-}"}, {"sha": "a6801a6a51a52d10ae228bed6b16caa563570240", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -24,7 +24,7 @@ fn a() {\n     println!(\"{}\", *q);\n }\n \n-fn borrow(_x: &[int], _f: ||) {}\n+fn borrow<F>(_x: &[int], _f: F) where F: FnOnce() {}\n \n fn b() {\n     // here we alias the mutable vector into an imm slice and try to"}, {"sha": "2804b8c48a703f4f4be64c71d3ac5effd36452af", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,7 +13,7 @@ enum Either<T, U> { Left(T), Right(U) }\n struct X(Either<(uint,uint), fn()>);\n \n impl X {\n-    pub fn with(&self, blk: |x: &Either<(uint,uint), fn()>|) {\n+    pub fn with<F>(&self, blk: F) where F: FnOnce(&Either<(uint, uint), fn()>) {\n         let X(ref e) = *self;\n         blk(e)\n     }\n@@ -25,7 +25,7 @@ fn main() {\n         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n             match opt {\n                 &Either::Right(ref f) => {\n-                    x = X(Either::Left((0,0)));\n+                    x = X(Either::Left((0, 0)));\n                     (*f)()\n                 },\n                 _ => panic!()"}, {"sha": "e519e57d178c85b10dc9fd68ec308aecdcc660e7", "filename": "src/test/compile-fail/borrowck-block-unint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-block-unint.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: ||) { f(); }\n+fn force<F>(f: F) where F: FnOnce() { f(); }\n fn main() {\n     let x: int;\n     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`"}, {"sha": "6dbdff9441d55a8b0283bedfc3598c5b88e206a4", "filename": "src/test/compile-fail/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-call-is-borrow-issue-12224.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,53 +10,54 @@\n \n // Ensure that invoking a closure counts as a unique immutable borrow\n \n+#![feature(unboxed_closures)]\n \n-type Fn<'a> = ||:'a;\n+type Fn<'a> = Box<FnMut() + 'a>;\n \n struct Test<'a> {\n-    f: ||: 'a\n+    f: Box<FnMut() + 'a>\n }\n \n-fn call(f: |Fn|) {\n-    f(|| {\n-    //~^ ERROR: closure requires unique access to `f` but it is already borrowed\n-        f(|| {})\n+fn call<F>(mut f: F) where F: FnMut(Fn) {\n+    f(box || {\n+    //~^ ERROR: cannot borrow `f` as mutable more than once\n+        f(box || {})\n     });\n }\n \n fn test1() {\n-    call(|a| {\n-        a();\n+    call(|mut a| {\n+        a.call_mut(());\n     });\n }\n \n-fn test2(f: &||) {\n-    (*f)(); //~ ERROR: closure invocation in a `&` reference\n+fn test2<F>(f: &F) where F: FnMut() {\n+    (*f)(); //~ ERROR: cannot borrow immutable dereference of `&`-pointer `*f` as mutable\n }\n \n-fn test3(f: &mut ||) {\n+fn test3<F>(f: &mut F) where F: FnMut() {\n     (*f)();\n }\n \n fn test4(f: &Test) {\n-    (f.f)() //~ ERROR: closure invocation in a `&` reference\n+    f.f.call_mut(()) //~ ERROR: cannot borrow immutable dereference of `Box` `*f.f` as mutable\n }\n \n fn test5(f: &mut Test) {\n-    (f.f)()\n+    f.f.call_mut(())\n }\n \n fn test6() {\n-    let f = || {};\n-    (|| {\n+    let mut f = |&mut:| {};\n+    (|&mut:| {\n         f();\n     })();\n }\n \n fn test7() {\n-    fn foo(_: |g: |int|, b: int|) {}\n-    let f = |g: |int|, b: int| {};\n-    f(|a| { //~ ERROR: cannot borrow `f` as immutable because previous closure\n+    fn foo<F>(_: F) where F: FnMut(Box<FnMut(int)>, int) {}\n+    let mut f = |&mut: g: Box<FnMut(int)>, b: int| {};\n+    f(box |a| { //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n         foo(f); //~ ERROR: cannot move out of captured outer variable\n     }, 3);\n }"}, {"sha": "47a47d0443255aab3e06d4d13f3970637a47593b", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -22,37 +22,37 @@ fn set(x: &mut int) {\n \n fn a() {\n     let mut x = 3i;\n-    let c1 = || x = 4;\n-    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+    let c1 = |&mut:| x = 4;\n+    let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n     let mut x = 3i;\n-    let c1 = || set(&mut x);\n-    let c2 = || get(&x); //~ ERROR cannot borrow `x`\n+    let c1 = |&mut:| set(&mut x);\n+    let c2 = |&mut:| get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n     let mut x = 3i;\n-    let c1 = || set(&mut x);\n-    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+    let c1 = |&mut:| set(&mut x);\n+    let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n     let mut x = 3i;\n-    let c2 = || x * 5;\n+    let c2 = |&mut:| x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n     let mut x = 3i;\n-    let c1 = || get(&x);\n+    let c1 = |&mut:| get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n     let mut x = box 3i;\n-    let c1 = || get(&*x);\n+    let c1 = |&mut:| get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }\n \n@@ -62,7 +62,7 @@ fn g() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = || get(&*x.f);\n+    let c1 = |&mut:| get(&*x.f);\n     *x.f = 5; //~ ERROR cannot assign to `*x.f`\n }\n \n@@ -72,8 +72,8 @@ fn h() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = || get(&*x.f);\n-    let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n+    let c1 = |&mut:| get(&*x.f);\n+    let c2 = |&mut:| *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n }\n \n fn main() {"}, {"sha": "30e1421ba2660fb873bba3bc85488f9ab9abe519", "filename": "src/test/compile-fail/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,9 +20,9 @@ fn set(x: &mut int) {\n }\n \n fn a(x: &int) {\n-    let c1 = || set(&mut *x);\n+    let c1 = |&mut:| set(&mut *x);\n     //~^ ERROR cannot borrow\n-    let c2 = || set(&mut *x);\n+    let c2 = |&mut:| set(&mut *x);\n     //~^ ERROR cannot borrow\n     //~| ERROR closure requires unique access\n }"}, {"sha": "0f284b5384913f41dce038cdd46da80b67894333", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,8 +15,8 @@\n \n fn a() {\n     let mut x = 3i;\n-    let c1 = || x = 4;\n-    let c2 = || x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = |&mut:| x = 4;\n+    let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn set(x: &mut int) {\n@@ -25,20 +25,20 @@ fn set(x: &mut int) {\n \n fn b() {\n     let mut x = 3i;\n-    let c1 = || set(&mut x);\n-    let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = |&mut:| set(&mut x);\n+    let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n     let mut x = 3i;\n-    let c1 = || x = 5;\n-    let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+    let c1 = |&mut:| x = 5;\n+    let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n     let mut x = 3i;\n-    let c1 = || x = 5;\n-    let c2 = || { let _y = || set(&mut x); }; // (nested closure)\n+    let c1 = |&mut:| x = 5;\n+    let c2 = |&mut:| { let _y = |&mut:| set(&mut x); }; // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n \n@@ -48,8 +48,8 @@ fn g() {\n     }\n \n     let mut x = box Foo { f: box 3 };\n-    let c1 = || set(&mut *x.f);\n-    let c2 = || set(&mut *x.f);\n+    let c1 = |&mut:| set(&mut *x.f);\n+    let c2 = |&mut:| set(&mut *x.f);\n     //~^ ERROR cannot borrow `x` as mutable more than once\n }\n "}, {"sha": "a9cc9e967f6ff70ecdabda9052ef7f118864f3d6", "filename": "src/test/compile-fail/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique-imm.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n     let mut this = &mut Foo {\n         x: 1,\n     };\n-    let r = || {\n+    let mut r = |&mut:| {\n         let p = &this.x;\n         &mut this.x; //~ ERROR cannot borrow\n     };"}, {"sha": "9a772cc49b87b62ac8b6e84caa81bbf0b7b0467f", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -23,27 +23,27 @@ fn set(x: &mut int) -> int {\n }\n \n fn a(x: &mut int) {\n-    let c1 = || get(x);\n-    let c2 = || get(x);\n+    let c1 = |&mut:| get(x);\n+    let c2 = |&mut:| get(x);\n }\n \n fn b(x: &mut int) {\n-    let c1 = || get(x);\n-    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    let c1 = |&mut:| get(x);\n+    let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n fn c(x: &mut int) {\n-    let c1 = || get(x);\n-    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+    let c1 = |&mut:| get(x);\n+    let c2 = |&mut:| { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n }\n \n fn d(x: &mut int) {\n-    let c1 = || set(x);\n-    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    let c1 = |&mut:| set(x);\n+    let c2 = |&mut:| set(x); //~ ERROR closure requires unique access to `x`\n }\n \n fn e(x: &mut int) {\n-    let c1: || = || x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n+    let c1 = |&mut:| x = panic!(); //~ ERROR closure cannot assign to immutable local variable\n }\n \n fn main() {"}, {"sha": "23c90fcf574d5bb45b920cb6ba60a6b84475f31b", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -25,7 +25,7 @@ impl Drop for Foo {\n \n fn main() {\n   let mut ptr = box Foo { x: 0 };\n-  let test = |foo: &Foo| {\n+  let mut test = |&mut: foo: &Foo| {\n     ptr = box Foo { x: ptr.x + 1 };\n   };\n   test(&*ptr); //~ ERROR cannot borrow `*ptr`"}, {"sha": "5496a9dd4b3611c78b2a0fc70f7f4845ea5f6d08", "filename": "src/test/compile-fail/borrowck-init-in-called-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-called-fn-expr.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let j: || -> int = || {\n+    let j = |&:| -> int {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "33c284c71b341df0558956f2e861747d3d5fa37f", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f: || -> int = || {\n+    let f  = |&:| -> int {\n         let i: int;\n         i //~ ERROR use of possibly uninitialized variable: `i`\n     };"}, {"sha": "0428ee83065173a99156ebf4a7bfa7e78d8cbdd5", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n impl Foo {\n-    pub fn foo(&mut self, fun: |&int|) {\n+    pub fn foo<F>(&mut self, mut fun: F) where F: FnMut(&int) {\n         for f in self.n.iter() {\n             fun(f);\n         }"}, {"sha": "f798d170f963b35dd8a2f255c96f5c6df4694596", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -18,7 +18,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { panic!() }\n-fn for_func(_f: || -> bool) { panic!() }\n+fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<int>) {"}, {"sha": "ff038b545d5fec4013c51b85f3e2692956b2f276", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -112,7 +112,9 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     }\n }\n \n-fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n+fn loop_break_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where\n+    F: FnMut(&'r mut uint) -> bool,\n+{\n     // Here we check that when you break out of an inner loop, the\n     // borrows that go out of scope as you exit the inner loop are\n     // removed from the bitset.\n@@ -128,7 +130,7 @@ fn loop_break_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n     }\n }\n \n-fn loop_loop_pops_scopes<'r>(_v: &'r mut [uint], f: |&'r mut uint| -> bool) {\n+fn loop_loop_pops_scopes<'r, F>(_v: &'r mut [uint], mut f: F) where F: FnMut(&'r mut uint) -> bool {\n     // Similar to `loop_break_pops_scopes` but for the `loop` keyword\n \n     while cond() {"}, {"sha": "85fc7fb87b34034b9a6c4379b7a4191799713b1f", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -18,7 +18,7 @@\n fn borrow(_v: &int) {}\n fn borrow_mut(_v: &mut int) {}\n fn cond() -> bool { panic!() }\n-fn for_func(_f: || -> bool) { panic!() }\n+fn for_func<F>(_f: F) where F: FnOnce() -> bool { panic!() }\n fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<int>) {"}, {"sha": "5c282495cc239419705136bcbb19aaf62fb720f4", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n use std::thread::Thread;\n \n-fn borrow(v: &int, f: |x: &int|) {\n+fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n     f(v);\n }\n "}, {"sha": "b6a71fcd446abe72bb6fbdf3067a47ab2e0750e6", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn borrow(v: &int, f: |x: &int|) {\n+fn borrow<F>(v: &int, f: F) where F: FnOnce(&int) {\n     f(v);\n }\n "}, {"sha": "0ada3db47a4b6ec1884fa2bae169fb9bcae24d3c", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,14 +13,14 @@ struct point { x: int, y: int }\n \n trait methods {\n     fn impurem(&self);\n-    fn blockm(&self, f: ||);\n+    fn blockm<F>(&self, f: F) where F: FnOnce();\n }\n \n impl methods for point {\n     fn impurem(&self) {\n     }\n \n-    fn blockm(&self, f: ||) { f() }\n+    fn blockm<F>(&self, f: F) where F: FnOnce() { f() }\n }\n \n fn a() {"}, {"sha": "7849475ec67991cb519cf33dff826920764bfc84", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@\n // (locally rooted) mutable, unique vector, and that we then prevent\n // modifications to the contents.\n \n-fn takes_imm_elt(_v: &int, f: ||) {\n+fn takes_imm_elt<F>(_v: &int, f: F) where F: FnOnce() {\n     f();\n }\n "}, {"sha": "35f0751aa7895a941f1adecaf1a7d581114ec7da", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let bar = box 3;\n-    let _g = || {\n+    let _g = |&mut:| {\n         let _h = move |:| -> int { *bar }; //~ ERROR cannot move out of captured outer variable\n     };\n }"}, {"sha": "c5d23925a89b1f2d25c5470e2b43ea00a318457c", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with(f: |&String|) {}\n+fn with<F>(f: F) where F: FnOnce(&String) {}\n \n fn arg_item(&_x: &String) {}\n     //~^ ERROR cannot move out of dereference of `&`-pointer"}, {"sha": "0a47353683cfb7cfa82483a199c9767260e81183", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -32,7 +32,7 @@ fn foo() {\n \n fn bar() {\n     // Original borrow ends at end of closure\n-    || {\n+    |&:| {\n         let mut x = 1u;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow"}, {"sha": "1f257b8a5cba847d2b0d281a1ac0c78bea9cbbf4", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n fn cond() -> bool { true }\n \n-fn foo(_: ||) {}\n+fn foo<F>(_: F) where F: FnOnce() {}\n \n fn main() {\n     let pth = break; //~ ERROR: `break` outside of loop"}, {"sha": "a02d6b7f5173acc3ea6b4f4f36b03baf020f4c02", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct X {\n-    field: ||:'static + Send,\n+struct X<F> where F: FnOnce() + 'static + Send {\n+    field: F,\n }\n \n-fn foo(blk: ||:'static) -> X {\n-    return X { field: blk }; //~ ERROR expected bounds `Send`\n+fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type\n+    return X { field: blk };\n }\n \n fn main() {"}, {"sha": "6b25e4be2d9a3f033e9e51d53ebcc379a74ef3e4", "filename": "src/test/compile-fail/closure-bounds-not-builtin.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-trait Foo {}\n-\n-fn take(f: ||:Foo) {\n-    //~^ ERROR only the builtin traits can be used as closure or object bounds\n-}\n-\n-fn main() {}"}, {"sha": "d27529bad43052b776fc8702005e62cd1c01425d", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn bar(blk: ||:'static) {\n+fn bar<F>(blk: F) where F: FnOnce() + 'static {\n }\n \n fn foo(x: &()) {\n     bar(|| { //~ ERROR cannot infer an appropriate lifetime\n         let _ = x;\n-        //~^ ERROR captured variable `x` does not outlive\n     })\n }\n "}, {"sha": "509fffc5c9a882e2806b64b587fbf15d1c73e7e5", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n \n \n-fn take_any(_: ||) {\n+fn take_any<F>(_: F) where F: FnOnce() {\n }\n \n-fn take_const_owned(_: ||:Sync+Send) {\n+fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n }\n \n-fn give_any(f: ||) {\n+fn give_any<F>(f: F) where F: FnOnce() {\n     take_any(f);\n }\n \n-fn give_owned(f: ||:Send) {\n+fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Sync`, found bounds `Send`\n+    take_const_owned(f); //~ ERROR the trait `core::kinds::Sync` is not implemented for the type\n }\n \n fn main() {}"}, {"sha": "ef01c96addeb8f555f4ba26919e7f3b65b73c961", "filename": "src/test/compile-fail/closure-reform-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-reform-bad.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -17,7 +17,7 @@ fn call_bare(f: fn(&str)) {\n \n fn main() {\n     let string = \"world!\";\n-    let f: |&str| = |s| println!(\"{}{}\", s, string);\n+    let f = |&: s: &str| println!(\"{}{}\", s, string);\n     call_bare(f)    //~ ERROR mismatched types\n }\n "}, {"sha": "7a1ebed0a82acb433a9d128ae54485fce6fe090b", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foo(f: || -> !) {}\n-\n-fn main() {\n-    // Type inference didn't use to be able to handle this:\n-    foo(|| panic!());\n-    foo(|| -> ! panic!());\n-    foo(|| 22i); //~ ERROR computation may converge in a function marked as diverging\n-    foo(|| -> ! 22i); //~ ERROR computation may converge in a function marked as diverging\n-    let x = || -> ! 1i; //~ ERROR computation may converge in a function marked as diverging\n-}"}, {"sha": "52f4c4749e224f90e1455befddc899c5cf7557a6", "filename": "src/test/compile-fail/coerce-bare-fn-to-closure-and-proc.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that coercions from fn item types are ok, but not fn pointer\n-// types to closures/procs are not allowed.\n-\n-fn foo() {}\n-\n-fn fn_item_type() {\n-    let f = foo;\n-\n-    let f_closure: || = f;\n-}\n-\n-fn fn_pointer_type() {\n-    let f = foo as fn();\n-    let f_closure: || = f;\n-    //~^ ERROR: mismatched types\n-}\n-\n-fn main() { }"}, {"sha": "46f5f41d7282f89254c2c022629204c0aefe2f39", "filename": "src/test/compile-fail/dead-code-closure-bang.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test FIXME(#20574)\n+\n #![deny(unreachable_code)]\n \n fn main() {\n-    let x: || -> ! = || panic!();\n+    let x = |:| panic!();\n     x();\n     std::io::println(\"Foo bar\"); //~ ERROR: unreachable statement\n }"}, {"sha": "d7586af291e8638d77de1aa3344366c5c7272220", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,8 +11,10 @@\n extern fn f() {\n }\n \n+fn is_fn<F>(_: F) where F: Fn() {}\n+\n fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n-    let _x: || = f; //~ ERROR mismatched types\n+    is_fn(f); //~ ERROR the trait `core::ops::Fn()` is not implemented for the type `extern \"C\" fn()\n }"}, {"sha": "039628b67528289e2780b50d4f3441ea3199d748", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@ fn takes_imm(x: &int) { }\n \n fn takes_mut(x: &mut int) { }\n \n-fn apply<T>(t: T, f: |T|) {\n+fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n     f(t)\n }\n "}, {"sha": "827e648cca86d0a32113bf2a6ca38cecbea4cd2f", "filename": "src/test/compile-fail/immut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimmut-function-arguments.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,7 +14,7 @@ fn f(y: Box<int>) {\n }\n \n fn g() {\n-    let _frob: |Box<int>| = |q| { *q = 2; }; //~ ERROR cannot assign\n+    let _frob = |&: q: Box<int>| { *q = 2; }; //~ ERROR cannot assign\n \n }\n "}, {"sha": "dec4fc3b8f5b274649bb7f06a280f1cd50a64210", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn test<'x>(x: &'x int) {\n-    drop::< for<'z>|&'z int| -> &'z int >(|z| {\n+    drop::<Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n         x\n         //~^ ERROR cannot infer an appropriate lifetime\n     });"}, {"sha": "f496c1e1227dbcc3b9be173558453f298a2c5e2c", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,7 +20,7 @@ impl Drop for Foo {\n \n fn main() {\n     let mut ptr = box Foo { x: 0 };\n-    let test = |foo: &Foo| {\n+    let mut test = |&mut: foo: &Foo| {\n         println!(\"access {}\", foo.x);\n         ptr = box Foo { x: ptr.x + 1 };\n         println!(\"access {}\", foo.x);"}, {"sha": "89667937531536fe306c3eb881b6a1e0dc772d02", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut v = vec!(1i);\n-    let f = || v.push(2i);\n+    let mut f = |&mut:| v.push(2i);\n     let _w = v; //~ ERROR: cannot move out of `v`\n \n     f();"}, {"sha": "5033576a23482e2847b8bac03c1ccc99fb6e8300", "filename": "src/test/compile-fail/issue-14182.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14182.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test FIXME(japari) remove test\n+\n struct Foo {\n     f: for <'b> |&'b int|:\n       'b -> &'b int //~ ERROR use of undeclared lifetime name `'b`"}, {"sha": "9d2212b69cee116de1d270b87f1010416b4ab45a", "filename": "src/test/compile-fail/issue-16939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,7 +14,7 @@\n // wrong arity.\n \n fn _foo<F: Fn()> (f: F) {\n-    |t| f(t); //~ ERROR E0057\n+    |&: t| f(t); //~ ERROR E0057\n }\n \n fn main() {}"}, {"sha": "ad2ebff59bc51ad226ac51c9c04267772539bf75", "filename": "src/test/compile-fail/issue-17636.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-17636.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-17636.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17636.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait MyItem<T> {}\n-impl<T> MyItem<T> for T {}\n-\n-pub fn build_archive<'a, I: MyItem<&'a (|&uint|:'a)>>(files: I) {}\n-\n-fn main() {\n-    build_archive(&(|_| { }));\n-//~^ ERROR not implemented\n-}"}, {"sha": "970b14c7eb7cc612224a3e12d1bbf226bbd78c5d", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@\n // and rejected.\n \n fn main() {\n-    (|| box *[0u].as_slice())();\n+    (|&:| box *[0u].as_slice())();\n     //~^ ERROR cannot move out of dereference\n     //~^^ ERROR cannot move a value of type [uint]\n }"}, {"sha": "f87a0d774fa7c7c9745b833654d097c658aa5d29", "filename": "src/test/compile-fail/issue-18343.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18343.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Obj<'a> {\n-    closure: ||: 'a -> u32\n+struct Obj<F> where F: FnMut() -> u32 {\n+    closure: F,\n }\n \n fn main() {\n     let o = Obj { closure: || 42 };\n-    o.closure(); //~ ERROR type `Obj<'_>` does not implement any method in scope named `closure`\n+    o.closure(); //~ ERROR does not implement any method in scope named `closure`\n     //~^ NOTE use `(s.closure)(...)` if you meant to call the function stored in the `closure` field\n }"}, {"sha": "e93acb3f064af5c38b441e4d8d33e4e4fee808d7", "filename": "src/test/compile-fail/issue-18345.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-18345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-18345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18345.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-type Step<'s, R, T> = |R, T|: 's -> R;\n-type Transducer<'t, R, T, U> = |Step<'t, R, U>|: 't -> Step<'t, R, T>;\n-\n-fn mapping<'f, R, T, U>(f: |T|: 'f -> U) -> &'f Transducer<'f, R, T, U> {\n-    |step| |r, x|\n-        step(r, f(x))\n-        //~^ ERROR the type of this value must be known in this context\n-}\n-\n-fn main() {}"}, {"sha": "3a0fbddf8185fa3d9fdb5345023d79b131d150f4", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,25 +13,25 @@ use std::cell::RefCell;\n fn main() {\n     let c = RefCell::new(vec![]);\n     let mut y = 1u;\n-    c.push(|| y = 0);\n-    c.push(|| y = 0);\n+    c.push(box || y = 0);\n+    c.push(box || y = 0);\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n     let c = RefCell::new(vec![]);\n     let mut y = 1u;\n \n-    Push::push(&c, || y = 0);\n-    Push::push(&c, || y = 0);\n+    Push::push(&c, box || y = 0);\n+    Push::push(&c, box || y = 0);\n }\n \n trait Push<'c> {\n-    fn push<'f: 'c>(&self, push: ||:'f -> ());\n+    fn push<'f: 'c>(&self, push: Box<FnMut() + 'f>);\n }\n \n-impl<'c> Push<'c> for RefCell<Vec<||:'c>> {\n-    fn push<'f: 'c>(&self, fun: ||:'f -> ()) {\n+impl<'c> Push<'c> for RefCell<Vec<Box<FnMut() + 'c>>> {\n+    fn push<'f: 'c>(&self, fun: Box<FnMut() + 'f>) {\n         self.borrow_mut().push(fun)\n     }\n }"}, {"sha": "aa7c4c3060bdb93ebd4a7a04df865dad2ae4ff60", "filename": "src/test/compile-fail/issue-19009.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-19009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-19009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19009.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(lang_items)]\n-#![no_std]\n-#![crate_type=\"rlib\"]\n-#[lang=\"sized\"] pub trait Sized for Sized? {}\n-\n-fn ice(f: for <'s> ||\n-    :'s //~ ERROR use of undeclared lifetime name `'s`\n-) {}\n-fn main() { ice(||{}) }"}, {"sha": "545e3f8acb139caf7eecd36d2df47779ae4d0bed", "filename": "src/test/compile-fail/issue-19141.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let n = 0u;\n-\n-    let f = move || n += 1;  //~error boxed closures can't capture by value\n-}"}, {"sha": "3ff4557ae80ed3155449e1864ec15be361fb8a24", "filename": "src/test/compile-fail/issue-20228-1.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct S;\n-\n-impl S {\n-    fn foo(&self) {\n-        let _ = move || { self };  //~error boxed closures can't capture by value\n-    }\n-}\n-\n-fn main() {\n-}"}, {"sha": "691660f897157f309dfcb52a2e3420b4db1dd729", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: |A| -> Vec<B> );\n+    fn bind<B, F>(&self, f: F) where F: FnMut(A) -> Vec<B>;\n }\n \n impl<A> vec_monad<A> for Vec<A> {\n-    fn bind<B>(&self, f: |A| -> Vec<B> ) {\n+    fn bind<B, F>(&self, mut f: F) where F: FnMut(A) -> Vec<B> {\n         let mut r = panic!();\n         for elt in self.iter() { r = r + f(*elt); }\n         //~^ ERROR the type of this value must be known\n    }\n }\n fn main() {\n-    [\"hi\"].bind(|x| [x] );\n+    [\"hi\"].bind(|&mut: x| [x] );\n     //~^ ERROR type `[&str; 1]` does not implement any method in scope named `bind`\n }"}, {"sha": "c67d6b1ce8f7ce17e063dcc42ab31835527ca254", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let needlesArr: Vec<char> = vec!('a', 'f');\n-    needlesArr.iter().fold(|x, y| {\n+    needlesArr.iter().fold(|&: x, y| {\n     });\n     //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n     //"}, {"sha": "86ab9be77fc6808389e948f913e33d1ac10ff23e", "filename": "src/test/compile-fail/issue-3563.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3563.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n trait A {\n-  fn a(&self) {\n-      || self.b() //~ ERROR type `&Self` does not implement any method in scope named `b`\n-  }\n+    fn a(&self) {\n+        |&:| self.b() //~ ERROR type `&Self` does not implement any method in scope named `b`\n+        //~^ ERROR expected (), found closure\n+    }\n }\n fn main() {}"}, {"sha": "d4f9ea5b276f9fc4ed4165528e021999db1e37c5", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n fn id<T>(t: T) -> T { t }\n \n-fn f<'r, T>(v: &'r T) -> ||: 'r -> T {\n-    id(|| *v) //~ ERROR cannot infer\n+fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+    id(box |&mut:| *v) //~ ERROR cannot infer\n }\n \n fn main() {\n     let v = &5i;\n-    println!(\"{}\", f(v)());\n+    println!(\"{}\", f(v).call_mut(()));\n }"}, {"sha": "5063a78e38348d6eb0e4e8fcbdaf4ebfe70f7e30", "filename": "src/test/compile-fail/issue-4523.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4523.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn foopy() {}\n-\n-static f: ||: 'static = foopy;\n-\n-fn main () {\n-    f(); //~ ERROR closure invocation in a static location\n-}"}, {"sha": "fef414ce978a8756e263cc821d6035950611033d", "filename": "src/test/compile-fail/issue-5216.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn f() { }\n-struct S(||); //~ ERROR explicit lifetime bound required\n+struct S(Box<FnMut()>); //~ ERROR explicit lifetime bound required\n pub static C: S = S(f);\n \n \n fn g() { }\n-type T = ||;  //~ ERROR explicit lifetime bound required\n+type T = Box<FnMut()>;  //~ ERROR explicit lifetime bound required\n pub static D: T = g;\n \n fn main() {}"}, {"sha": "1691688fd84645f65d31446cae23cdd48d3e2f44", "filename": "src/test/compile-fail/issue-5239-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5239-1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,6 +11,6 @@\n // Regression test for issue #5239\n \n fn main() {\n-    let x: |int| -> int = |ref x| { x += 1; };\n+    let x = |&: ref x: int| -> int { x += 1; };\n     //~^ ERROR binary assignment operation `+=` cannot be applied to type `&int`\n }"}, {"sha": "433ae3bf89e03a540c9965ef21f327556d044c52", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -17,13 +17,13 @@ fn twice(x: Box<uint>) -> uint {\n      *x * 2\n }\n \n-fn invoke(f: || -> uint) {\n+fn invoke<F>(f: F) where F: FnOnce() -> uint {\n      f();\n }\n \n fn main() {\n       let x  : Box<uint>  = box 9;\n-      let sq : || -> uint =  || { *x * *x };\n+      let sq =  |:| { *x * *x };\n \n       twice(x); //~ ERROR: cannot move out of\n       invoke(sq);"}, {"sha": "897afb1c10245a256ddeb449afe47292b8b44b6b", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -25,7 +25,7 @@ impl CrateId {\n \n pub fn remove_package_from_database() {\n     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-    let push_id = |installed_id: &CrateId| {\n+    let push_id = |&mut: installed_id: &CrateId| {\n         lines_to_use.push(installed_id);\n         //~^ ERROR cannot infer an appropriate lifetime for automatic coercion due to\n         // conflicting requirements\n@@ -38,7 +38,7 @@ pub fn remove_package_from_database() {\n \n }\n \n-pub fn list_database(f: |&CrateId|) {\n+pub fn list_database<F>(mut f: F) where F: FnMut(&CrateId) {\n     let stuff = [\"foo\", \"bar\"];\n \n     for l in stuff.iter() {"}, {"sha": "b5725249812f6ccd2edfb018b5d3fddbe9d62ded", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -57,9 +57,6 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     // mutable object types are not ok\n     assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `core::kinds::Copy` is not implemented\n \n-    // closures are like an `&mut` object\n-    assert_copy::<||>(); //~ ERROR `core::kinds::Copy` is not implemented\n-\n     // unsafe ptrs are ok\n     assert_copy::<*const int>();\n     assert_copy::<*const &'a mut int>();"}, {"sha": "c300096caf1e09c87bcb4f8e6c99d8e9cecbe837", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -27,14 +27,9 @@ fn box_object_with_no_bound_not_ok<'a>() {\n     assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n-fn closure_with_no_bound_not_ok<'a>() {\n-    assert_send::<||:'static>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n-}\n-\n fn object_with_send_bound_ok() {\n     assert_send::<&'static (Dummy+Send)>();\n     assert_send::<Box<Dummy+Send>>();\n-    assert_send::<||:Send>;\n }\n \n fn main() { }"}, {"sha": "7513e1bc21a4a7e1a953beb1dcbde9af804cb43d", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -35,7 +35,7 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |mut y: int| 10i; //~ ERROR: variable does not need to be mutable\n+    let x = |&: mut y: int| 10i; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: int) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n@@ -65,15 +65,15 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |mut y: int| y = 32i;\n+    let x = |&mut: mut y: int| y = 32i;\n     fn nothing(mut foo: int) { foo = 37i; }\n \n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n     let mut _allowed = 1i;\n }\n \n-fn callback(f: ||) {}\n+fn callback<F>(f: F) where F: FnOnce() {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]"}, {"sha": "5c8e73e674751d109db04ffec9e4d657e0abae90", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,7 +20,7 @@ mod foo {\n     }\n }\n \n-fn callback<T>(_f: || -> T) -> T { panic!() }\n+fn callback<T, F>(_f: F) -> T where F: FnOnce() -> T { panic!() }\n unsafe fn unsf() {}\n \n fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block"}, {"sha": "82de02f09813ce9a7ca0acd663f32048cd1007a9", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: || -> int) -> int { f() }\n+fn force<F>(f: F) -> int where F: FnOnce() -> int { f() }\n fn main() { println!(\"{}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "14af49dfc49c5d379c9907fb9b49e66041d659a9", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,7 +20,7 @@ enum E {\n     Baz\n }\n \n-fn f(s: &S, g: |&S|) {\n+fn f<G>(s: &S, g: G) where G: FnOnce(&S) {\n     g(s)\n }\n "}, {"sha": "ab762332ee43da3ba48d32eeca32b4ca3cfd4b25", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,5 +14,5 @@ fn test(_x: Box<uint>) {}\n \n fn main() {\n     let i = box 3;\n-    let _f = || test(i); //~ ERROR cannot move out\n+    let _f = |&:| test(i); //~ ERROR cannot move out\n }"}, {"sha": "9053f97e8a7dd9368c3395160701510edf8b72e3", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,11 +12,13 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n+#![feature(unboxed_closures)]\n+\n struct R<'a> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that\n     // accepts itself as argument:\n-    c: |&mut R, bool|: 'a\n+    c: Box<FnMut(&mut R, bool) + 'a>\n }\n \n fn innocent_looking_victim() {\n@@ -28,7 +30,7 @@ fn innocent_looking_victim() {\n             match x {\n                 Some(ref msg) => {\n                     (f.c)(f, true);\n-                    //~^ ERROR: cannot borrow `*f` as mutable because\n+                    //~^ ERROR: cannot borrow `*f` as mutable more than once at a time\n                     println!(\"{}\", msg);\n                 },\n                 None => panic!(\"oops\"),\n@@ -37,8 +39,8 @@ fn innocent_looking_victim() {\n     })\n }\n \n-fn conspirator(f: |&mut R, bool|) {\n-    let mut r = R {c: f};\n+fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n+    let mut r = R {c: box f};\n     f(&mut r, false) //~ ERROR use of moved value\n }\n "}, {"sha": "ebda4e9103d604669547d28dd73e1d4e2a2aef8f", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn let_in<T>(x: T, f: |T|) {}\n+fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n \n fn main() {\n     let_in(3u, |i| { assert!(i == 3i); });"}, {"sha": "575e9864a92d3bd633febe9e08cdfb73c86acf9f", "filename": "src/test/compile-fail/refutable-pattern-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let f = |3: int| println!(\"hello\");\n+    let f = |&: 3: int| println!(\"hello\");\n     //~^ ERROR refutable pattern in function argument: `_` not covered\n     f(4);\n }"}, {"sha": "9e8281faf2f567c4f4bf4561182420c0771a1885", "filename": "src/test/compile-fail/region-bound-on-closure-outlives-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bound-on-closure-outlives-call.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn call_rec(f: |uint| -> uint) -> uint {\n-    (|x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n+fn call_rec<F>(mut f: F) -> uint where F: FnMut(uint) -> uint {\n+    (|&mut: x| f(x))(call_rec(f)) //~ ERROR cannot move out of `f`\n }\n \n fn main() {}"}, {"sha": "bb895a318ff17d272128783425d352b16278e6a0", "filename": "src/test/compile-fail/regionck-closure-lifetimes.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-closure-lifetimes.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn env<'a>(blk: |p: ||: 'a|) {\n-    // Test that the closure here cannot be assigned\n-    // the lifetime `'a`, which outlives the current\n-    // block.\n-\n-    let mut state = 0i;\n-    let statep = &mut state;\n-    blk(|| *statep = 1i); //~ ERROR captured variable `statep` does not outlive\n-}\n-\n-fn no_env_no_for<'a>(blk: |p: |||: 'a) {\n-    // Test that a closure with no free variables CAN\n-    // outlive the block in which it is created.\n-\n-    blk(|| ())\n-}\n-\n-fn repeating_loop() {\n-    // Test that the closure cannot be created within `loop` loop and\n-    // called without, even though the state that it closes over is\n-    // external to the loop.\n-\n-    let closure;\n-    let state = 0i;\n-\n-    loop {\n-        closure = || state; //~ ERROR cannot infer\n-        break;\n-    }\n-\n-    closure();\n-}\n-\n-fn repeating_while() {\n-    // Test that the closure cannot be created within `while` loop and\n-    // called without, even though the state that it closes over is\n-    // external to the loop.\n-\n-    let closure;\n-    let state = 0i;\n-\n-    while true {\n-        closure = || state; //~ ERROR cannot infer\n-        break;\n-    }\n-\n-    closure();\n-}\n-\n-fn main() {}"}, {"sha": "fb60d8f7b27a4acb442fe0fcc7b3fafc3b5911d3", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -16,7 +16,7 @@ struct dog {\n \n impl dog {\n     pub fn chase_cat(&mut self) {\n-        let _f = || {\n+        let _f = |&:| {\n             let p: &'static mut uint = &mut self.food; //~ ERROR cannot infer\n             *p = 3u;\n         };"}, {"sha": "0628bbb8bb08eb70a85813bb450bd8c8ee155da3", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -69,11 +69,6 @@ fn object_with_send_bound_not_ok<'a>() {\n     //~^ ERROR declared lifetime bound not satisfied\n }\n \n-fn closure_with_lifetime_not_ok<'a>() {\n-    assert_send::<||:'a>();\n-    //~^ ERROR not implemented\n-}\n-\n // unsafe pointers are ok unless they point at unsendable things\n \n struct UniqueUnsafePtr(Unique<*const int>);"}, {"sha": "1774c9fada946fc6a3806735a0052ace3f3d6a48", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -27,14 +27,14 @@ fn compute(x: &ast) -> uint {\n     }\n }\n \n-fn map_nums<'a,'b>(x: &ast, f: |uint| -> uint) -> &'a ast<'b> {\n+fn map_nums<'a,'b, F>(x: &ast, f: &mut F) -> &'a ast<'b> where F: FnMut(uint) -> uint {\n     match *x {\n       ast::num(x) => {\n-        return &ast::num(f(x)); //~ ERROR borrowed value does not live long enough\n+        return &ast::num((*f)(x)); //~ ERROR borrowed value does not live long enough\n       }\n       ast::add(x, y) => {\n-        let m_x = map_nums(x, |z| f(z));\n-        let m_y = map_nums(y, |z| f(z));\n+        let m_x = map_nums(x, f);\n+        let m_y = map_nums(y, f);\n         return &ast::add(m_x, m_y);  //~ ERROR borrowed value does not live long enough\n       }\n     }"}, {"sha": "547accbf0860d27ce85d7b65aedc27f0c709123d", "filename": "src/test/compile-fail/regions-escape-bound-fn-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn-2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with_int(f: |x: &int|) {\n+fn with_int<F>(f: F) where F: FnOnce(&int) {\n     let x = 3;\n     f(&x);\n }"}, {"sha": "6d67bd80650fad0afa66f5e2a9e46087345eaa59", "filename": "src/test/compile-fail/regions-escape-bound-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-bound-fn.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn with_int(f: |x: &int|) {\n+fn with_int<F>(f: F) where F: FnOnce(&int) {\n     let x = 3;\n     f(&x);\n }"}, {"sha": "e3771cfebba255cf7f656f3e4153486b0c6c6829", "filename": "src/test/compile-fail/regions-escape-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -16,7 +16,7 @@\n struct S;\n \n impl S {\n-    fn f<B>(&self, _: |&i32| -> B) {\n+    fn f<B, F>(&self, _: F) where F: FnOnce(&i32) -> B {\n     }\n }\n "}, {"sha": "873d4cea0395e627f2dcbfcecdef8b4c59e19c81", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,7 +20,7 @@ impl<'a> Deref for &'a int {\n     }\n }\n \n-fn with<R:Deref>(f: |x: &int| -> R) -> int {\n+fn with<R:Deref, F>(f: F) -> int where F: FnOnce(&int) -> R {\n     f(&3).get()\n }\n "}, {"sha": "91a6ff789ea39fb9ca31fba3b84b238711b82b7f", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn of<'a,T>() -> |T|:'a { panic!(); }\n-fn subtype<T>(x: |T|) { panic!(); }\n-\n-fn test_fn<'x,'y,'z,T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n-    // Here, x, y, and z are free.  Other letters\n-    // are bound.  Note that the arrangement\n-    // subtype::<T1>(of::<T2>()) will typecheck\n-    // iff T1 <: T2.\n-\n-    subtype::< for<'a>|&'a T|>(\n-        of::< for<'a>|&'a T|>());\n-\n-    subtype::< for<'a>|&'a T|>(\n-        of::< for<'b>|&'b T|>());\n-\n-    subtype::< for<'b>|&'b T|>(\n-        of::<|&'x T|>());\n-\n-    subtype::<|&'x T|>(\n-        of::< for<'b>|&'b T|>());  //~ ERROR mismatched types\n-\n-    subtype::< for<'a,'b>|&'a T, &'b T|>(\n-        of::< for<'a>|&'a T, &'a T|>());\n-\n-    subtype::< for<'a>|&'a T, &'a T|>(\n-        of::< for<'a,'b>|&'a T, &'b T|>()); //~ ERROR mismatched types\n-\n-    subtype::< for<'a,'b>|&'a T, &'b T|>(\n-        of::<|&'x T, &'y T|>());\n-\n-    subtype::<|&'x T, &'y T|>(\n-        of::< for<'a,'b>|&'a T, &'b T|>()); //~ ERROR mismatched types\n-}\n-\n-fn main() {}"}, {"sha": "854584ec535e66ddb57ae48002b9c1a82e8bd3af", "filename": "src/test/compile-fail/regions-fns.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fns.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Before fn subtyping was properly implemented,\n-// we reported errors in this case:\n-\n-fn not_ok<'b>(a: &uint, b: &'b uint) {\n-    let mut g: |x: &uint| = |x: &'b uint| {};\n-    //~^ ERROR mismatched types\n-    g(a);\n-}\n-\n-fn main() {\n-}"}, {"sha": "6e59a29b8cf2236f8e57110c0f4d00171b5eb47a", "filename": "src/test/compile-fail/regions-free-region-ordering-callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-free-region-ordering-callee.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -30,7 +30,7 @@ fn ordering3<'a, 'b>(x: &'a uint, y: &'b uint) -> &'a &'b uint {\n     panic!();\n }\n \n-fn ordering4<'a, 'b>(a: &'a uint, b: &'b uint, x: |&'a &'b uint|) {\n+fn ordering4<'a, 'b, F>(a: &'a uint, b: &'b uint, x: F) where F: FnOnce(&'a &'b uint) {\n     // Do not infer ordering from closure argument types.\n     let z: Option<&'a &'b uint> = None;\n     //~^ ERROR reference has a longer lifetime than the data it references"}, {"sha": "76bbe71cf75b5ba067ded39edfc32b3d20ef2ccb", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn wants_static_fn(_x: ||: 'static) {}\n-\n-fn main() {\n-    let i = 3i;\n-    wants_static_fn(|| {\n-        println!(\"i={}\", i); //~ ERROR captured variable `i` does not outlive\n-    })\n-}"}, {"sha": "0c250e38258cec518bddb3a48a81e14c965be69b", "filename": "src/test/compile-fail/regions-infer-at-fn-not-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-at-fn-not-param.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n struct parameterized1<'a> {\n-    g: ||: 'a\n+    g: Box<FnMut() + 'a>\n }\n \n struct not_parameterized1 {\n-    g: ||: 'static\n+    g: Box<FnMut() + 'static>\n }\n \n struct not_parameterized2 {\n-    g: ||: 'static\n+    g: Box<FnMut() + 'static>\n }\n \n fn take1<'a>(p: parameterized1) -> parameterized1<'a> { p }"}, {"sha": "c8edd936bf28b232a16e7fa50e33aded71fef4ef", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,7 +11,10 @@\n \n fn borrow<T>(x: &T) -> &T {x}\n \n-fn foo(cond: || -> bool, make_box: || -> Box<int>) {\n+fn foo<C, M>(mut cond: C, mut make_box: M) where\n+    C: FnMut() -> bool,\n+    M: FnMut() -> Box<int>,\n+{\n     let mut y: &int;\n     loop {\n         let x = make_box();"}, {"sha": "ac41f2a5b3e47be208a6c53d257990538ab6dc51", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n fn select<'r>(x: &'r int, y: &'r int) -> &'r int { x }\n \n-fn with<T>(f: |x: &int| -> T) -> T {\n+fn with<T, F>(f: F) -> T where F: FnOnce(&int) -> T {\n     f(&20)\n }\n "}, {"sha": "190e444fe7e830bc92879e0e8792547767f753bb", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n \n struct invariant<'a> {\n-    f: |x: &mut &'a int|: 'static\n+    f: Box<FnOnce(&mut &'a int) + 'static>,\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "71d0c988c5e274e0849c8c6b8b24c4169d0f14d6", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n \n struct invariant<'a> {\n-    f: ||: 'static -> &mut &'a int\n+    f: Box<for<'b> FnOnce() -> &'b mut &'a int + 'static>,\n }\n \n fn to_same_lifetime<'r>(bi: invariant<'r>) {"}, {"sha": "323ebc3c20b37c3aad95cc84735b4de70bdc0483", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,12 +14,12 @@ struct direct<'a> {\n \n struct indirect1 {\n     // Here the lifetime parameter of direct is bound by the fn()\n-    g: |direct|: 'static\n+    g: Box<FnOnce(direct) + 'static>\n }\n \n struct indirect2<'a> {\n     // But here it is set to 'a\n-    g: |direct<'a>|: 'static\n+    g: Box<FnOnce(direct<'a>) + 'static>\n }\n \n fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types"}, {"sha": "b9c721159f2b44c125117afe7e7523f6b047a821", "filename": "src/test/compile-fail/regions-name-undeclared.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-name-undeclared.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -43,19 +43,16 @@ fn bar<'a>(x: &'a int) {\n \n     // &'a CAN be declared on functions and used then:\n     fn g<'a>(a: &'a int) { } // OK\n-    fn h(a: for<'a>|&'a int|) { } // OK\n-\n-    // But not in the bound of a closure, it's not in scope *there*\n-    fn i(a: for<'a>|&int|:'a) { } //~ ERROR undeclared lifetime\n+    fn h(a: Box<for<'a> FnOnce(&'a int)>) { } // OK\n }\n \n // Test nesting of lifetimes in fn type declarations\n fn fn_types(a: &'a int, //~ ERROR undeclared lifetime\n-            b: for<'a>|a: &'a int,\n-                       b: &'b int, //~ ERROR undeclared lifetime\n-                       c: for<'b>|a: &'a int,\n-                                  b: &'b int|,\n-                       d: &'b int|, //~ ERROR undeclared lifetime\n+            b: Box<for<'a> FnOnce(&'a int,\n+                                  &'b int, //~ ERROR undeclared lifetime\n+                                  Box<for<'b> FnOnce(&'a int,\n+                                                     &'b int)>,\n+                                  &'b int)>, //~ ERROR undeclared lifetime\n             c: &'a int) //~ ERROR undeclared lifetime\n {\n }"}, {"sha": "b7fe893a1f5bbca1a2857c8b9212e0238b02bdcc", "filename": "src/test/compile-fail/regions-nested-fns-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns-2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ignore(_f: for<'z>|&'z int| -> &'z int) {}\n+fn ignore<F>(_f: F) where F: for<'z> FnOnce(&'z int) -> &'z int {}\n \n fn nested() {\n     let y = 3;"}, {"sha": "5d8ef718ef0d354b7bfe93720256f002b8f55c2a", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,13 +14,13 @@ fn nested<'x>(x: &'x int) {\n     let y = 3;\n     let mut ay = &y;\n \n-    ignore::< for<'z>|&'z int|>(|z| {\n+    ignore::<Box<for<'z> FnMut(&'z int)>>(box |z| {\n         ay = x; //~ ERROR cannot infer\n         ay = &y;\n         ay = z;\n     });\n \n-    ignore::< for<'z>|&'z int| -> &'z int>(|z| {\n+    ignore::< Box<for<'z> FnMut(&'z int) -> &'z int>>(box |z| {\n         if false { return x; }  //~ ERROR cannot infer an appropriate lifetime for automatic\n         if false { return ay; }\n         return z;"}, {"sha": "f9eecb60c6af118a72680ad92e3ef5fb1f7bc9b6", "filename": "src/test/compile-fail/regions-ref-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,7 +13,7 @@ fn arg_item(box ref x: Box<int>) -> &'static int {\n     x //~^ ERROR borrowed value does not live long enough\n }\n \n-fn with<R>(f: |Box<int>| -> R) -> R { f(box 3) }\n+fn with<R, F>(f: F) -> R where F: FnOnce(Box<int>) -> R { f(box 3) }\n \n fn arg_closure() -> &'static int {\n     with(|box ref x| x) //~ ERROR borrowed value does not live long enough"}, {"sha": "bd14d31217e88269ee580d55bdb45ed2fa255b03", "filename": "src/test/compile-fail/regions-ret-borrowed-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed-1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@\n // some point regions-ret-borrowed reported an error but this file did\n // not, due to special hardcoding around the anonymous region.\n \n-fn with<R>(f: for<'a>|x: &'a int| -> R) -> R {\n+fn with<R, F>(f: F) -> R where F: for<'a> FnOnce(&'a int) -> R {\n     f(&3)\n }\n "}, {"sha": "4dfd4f1709a6f2894da09c0d2a7deac419595b32", "filename": "src/test/compile-fail/regions-ret-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ret-borrowed.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,7 +15,7 @@\n // used to successfully compile because we failed to account for the\n // fact that fn(x: &int) rebound the region &.\n \n-fn with<R>(f: |x: &int| -> R) -> R {\n+fn with<R, F>(f: F) -> R where F: FnOnce(&int) -> R {\n     f(&3)\n }\n "}, {"sha": "d7b2a45cc63bb6f10457472e5ba11db80dbc0604", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,11 +20,4 @@ fn main() {\n         let x = f();\n         let y = f();\n     }\n-    // Boxed closure case\n-    {\n-        let mut x = 0u;\n-        let f = || &mut x; //~ ERROR cannot infer\n-        let x = f();\n-        let y = f();\n-    }\n }"}, {"sha": "991040bc62fea1ef8f4151002c6187db889e9283", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,18 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n struct closure_box<'a> {\n-    cl: ||: 'a\n+    cl: Box<FnMut() + 'a>,\n }\n \n-fn box_it<'r>(x: ||: 'r) -> closure_box<'r> {\n+fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n     closure_box {cl: x}\n }\n \n fn main() {\n     let cl_box = {\n-        let mut i = 3;\n-        box_it(|| i += 1) //~ ERROR cannot infer\n+        let mut i = 3i;\n+        box_it(box || i += 1) //~ ERROR cannot infer\n     };\n-    (cl_box.cl)();\n+    cl_box.cl.call_mut(());\n }"}, {"sha": "3249794e5c822a879e0b83e6f5356cb1b93510bc", "filename": "src/test/compile-fail/type-arg-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:can't use type parameters from outer function; try using\n fn foo<T>(x: T) {\n-    fn bar(f: |T| -> T) { }\n+    fn bar(f: Box<FnMut(T) -> T>) { }\n }\n fn main() { foo(1); }"}, {"sha": "61f1317283272b8737c17bc76b572bc771d2e48a", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,6 +14,6 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut f = |&mut: x: int, y: int| -> int { x + y };\n-    let z = f.call_mut((1u, 2));    //~ ERROR type mismatch\n+    let z = f(1u, 2);    //~ ERROR mismatched types\n     println!(\"{}\", z);\n }"}, {"sha": "85b33f73bbcb7cdefbbc419691ba8738458206f8", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,7 +13,7 @@\n use std::ops::FnMut;\n \n fn call_it<F:FnMut<(int,int),int>>(y: int, mut f: F) -> int {\n-    f.call_mut((2, y))\n+    f(2, y)\n }\n \n pub fn main() {"}, {"sha": "e3cb190c3f2c46162ab1a7bb85a848f6c65ae9c7", "filename": "src/test/debuginfo/closure-in-generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fclosure-in-generic-function.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -50,7 +50,7 @@\n \n fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n \n-    let closure = |x, y| {\n+    let closure = |&: x, y| {\n         zzz(); // #break\n         (y, x)\n     };"}, {"sha": "b2617c57742522c6788e0e32c0e80df6b86f62cc", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -18,7 +18,7 @@\n \n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n-    let _ = ||();\n+    let _ = |&:|();\n     let _ = range(1u,3).map(|_| 5i);\n }\n "}, {"sha": "f2d092216697ff25c543c4f380daff04703f4a23", "filename": "src/test/debuginfo/lexical-scope-in-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-stack-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -79,7 +79,7 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    let stack_closure: |int| = |x| {\n+    let closure = |&: x: int| {\n         zzz(); // #break\n         sentinel();\n \n@@ -97,7 +97,7 @@ fn main() {\n     zzz(); // #break\n     sentinel();\n \n-    stack_closure(1000);\n+    closure(1000);\n \n     zzz(); // #break\n     sentinel();"}, {"sha": "cb7e26327c3def2f52406095226ad97a03475a21", "filename": "src/test/debuginfo/multi-byte-chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-byte-chars.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -24,5 +24,5 @@ struct C { \u03b8: u8 }\n \n fn main() {\n     let x =  C { \u03b8: 0 };\n-    (|c: C| c.\u03b8 )(x);\n+    (|&: c: C| c.\u03b8 )(x);\n }"}, {"sha": "73a68893e933cac81089fa72a0b11d63a88cd2bd", "filename": "src/test/debuginfo/recursive-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-enum.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -25,11 +25,9 @@ pub struct Window<'a> {\n }\n \n struct WindowCallbacks<'a> {\n-    pos_callback: Option<WindowPosCallback<'a>>,\n+    pos_callback: Option<Box<FnMut(&Window, i32, i32) + 'a>>,\n }\n \n-pub type WindowPosCallback<'a> = |&Window, i32, i32|: 'a;\n-\n fn main() {\n     let x = WindowCallbacks { pos_callback: None };\n }"}, {"sha": "aac5824af00507e6731cc860e5b2762f7e47c7f8", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -167,11 +167,11 @@\n \n \n // CLOSURES\n-// gdb-command:whatis stack_closure1\n-// gdb-check:type = struct (&mut|int|, uint)\n+// gdb-command:whatis closure1\n+// gdb-check:type = struct (closure, uint)\n \n-// gdb-command:whatis stack_closure2\n-// gdb-check:type = struct (&mut|i8, f32| -> f32, uint)\n+// gdb-command:whatis closure2\n+// gdb-check:type = struct (closure, uint)\n \n #![omit_gdb_pretty_printer_section]\n \n@@ -321,8 +321,8 @@ fn main() {\n     // how that maps to rustc's internal representation of these forms.\n     // Once closures have reached their 1.0 form, the tests below should\n     // probably be expanded.\n-    let stack_closure1 = (|x:int| {}, 0u);\n-    let stack_closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0u);\n+    let closure1 = (|&: x:int| {}, 0u);\n+    let closure2 = (|&: x:i8, y: f32| { (x as f32) + y }, 0u);\n \n     zzz(); // #break\n }"}, {"sha": "3a7fbb9a3a1324ad02b515c53c257f2c401e4f9e", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -100,10 +100,10 @@ fn main() {\n     let struct_ref = &a_struct;\n     let owned = box 6;\n \n-    let closure = || {\n+    let mut closure = |&mut:| {\n         let closure_local = 8;\n \n-        let nested_closure = || {\n+        let mut nested_closure = |&mut:| {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned + closure_local;\n         };"}, {"sha": "a743adae51e9c54e01989351a4fa4ead3e7d09ad", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -94,20 +94,20 @@ fn main() {\n     let owned = box 6;\n \n     {\n-        let closure = || {\n+        let mut first_closure = |&mut:| {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };\n \n-        closure();\n+        first_closure();\n     }\n \n     {\n-        let mut unboxed_closure = |&mut:| {\n+        let mut second_closure = |&mut:| {\n             zzz(); // #break\n             variable = constant + a_struct.a + struct_ref.a + *owned;\n         };\n-        unboxed_closure();\n+        second_closure();\n     }\n }\n "}, {"sha": "094e3ce91568623094d272c85a5c10366498be88", "filename": "src/test/pretty/closure-reform-pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,9 +15,9 @@\n \n fn call_it(f: Box<FnMut(String) -> String>) { }\n \n-fn call_this(f: |&str|: Send) { }\n+fn call_this<F>(f: F) where F: Fn(&str) + Send { }\n \n-fn call_that(f: <'a>|&'a int, &'a int| -> int) { }\n+fn call_that<F>(f: F) where F: for<'a>Fn(&'a int, &'a int) -> int { }\n \n fn call_extern(f: fn() -> int) { }\n "}, {"sha": "0c4cd103b82ef73547ebf7c1e32da23d101d18ef", "filename": "src/test/pretty/disamb-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,7 +14,7 @@\n // preserved.  They are needed to disambiguate `{return n+1}; - 0` from\n // `({return n+1}-0)`.\n \n-fn id(f: || -> int) -> int { f() }\n+fn id<F>(f: F) -> int where F: Fn() -> int { f() }\n \n fn wsucc(_n: int) -> int { id(|| { 1 }) - 0 }\n fn main() { }"}, {"sha": "e0066053f3c5baf5b9d2f0ad2c347055a7b5db10", "filename": "src/test/pretty/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdo1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,6 +10,6 @@\n \n // pp-exact\n \n-fn f(f: |int|) { f(10) }\n+fn f<F>(f: F) where F: Fn(int) { f(10) }\n \n fn main() { f(|i| { assert!(i == 10) }) }"}, {"sha": "31efb0c9ab1ebd84f9a87f6126194232faaf846f", "filename": "src/test/pretty/fn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,5 +11,5 @@\n // pp-exact\n \n fn from_foreign_fn(_x: fn()) { }\n-fn from_stack_closure(_x: ||) { }\n+fn from_stack_closure<F>(_x: F) where F: Fn() { }\n fn main() { }"}, {"sha": "c3fa1a68e164c4e491909effa259f37813083f82", "filename": "src/test/run-make/static-unwinding/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Flib.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -19,7 +19,7 @@ impl Drop for A {\n     }\n }\n \n-pub fn callback(f: ||) {\n+pub fn callback<F>(f: F) where F: FnOnce() {\n     let _a = A;\n     f();\n }"}, {"sha": "dfce311529028c49d02e0ff9a62afe770e50e9ea", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,7 +20,7 @@ fn f1(a: &mut X, b: &mut int, c: int) -> int {\n     return r;\n }\n \n-fn f2(a: int, f: |int|) -> int { f(1); return a; }\n+fn f2<F>(a: int, f: F) -> int where F: FnOnce(int) { f(1); return a; }\n \n pub fn main() {\n     let mut a = X {x: 1};"}, {"sha": "ed471ed0079e3c5cd21166e7fbd7e47c397ffb9a", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,11 +11,11 @@\n \n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n \n-fn g(act: |Vec<int> | -> int) -> int { return act(vec!(1, 2, 3)); }\n+fn g<F>(act: F) -> int where F: FnOnce(Vec<int>) -> int { return act(vec!(1, 2, 3)); }\n \n pub fn main() {\n     assert_eq!(g(f), 1);\n-    let f1: |Vec<String>| -> String = f;\n+    let f1 = f;\n     assert_eq!(f1(vec![\"x\".to_string(), \"y\".to_string(), \"z\".to_string()]),\n                \"x\".to_string());\n }"}, {"sha": "6c54f33fbe6c927e26a25d0a846748351ca34723", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn asBlock(f: || -> uint) -> uint {\n+fn asBlock<F>(f: F) -> uint where F: FnOnce() -> uint {\n    return f();\n }\n "}, {"sha": "54b650d762bf46b2af5c0fa7c9004057c1d92e87", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn main() {\n-    fn as_buf<T>(s: String, f: |String| -> T) -> T { f(s) }\n+    fn as_buf<T, F>(s: String, f: F) -> T where F: FnOnce(String) -> T { f(s) }\n     as_buf(\"foo\".to_string(), |foo: String| -> () println!(\"{}\", foo) );\n }"}, {"sha": "fe52b1a693cdcb9f76f71ac95c94fcb7450f5f05", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn force(f: || -> int) -> int { return f(); }\n+fn force<F>(f: F) -> int where F: FnOnce() -> int { return f(); }\n+\n pub fn main() {\n     fn f() -> int { return 7; }\n     assert_eq!(force(f), 7);\n-    let g = {||force(f)};\n+    let g = {|&:|force(f)};\n     assert_eq!(g(), 7);\n }"}, {"sha": "972bde5f29a0d0f78ceff1cdf35940606d16b57c", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n+fn iter_vec<T, F>(v: Vec<T> , mut f: F) where F: FnMut(&T) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n     let v = vec!(1i, 2, 3, 4, 5, 6, 7);"}, {"sha": "1032fb486a1ed08f94f217a634e50c561024458c", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n+fn iter_vec<T, F>(v: Vec<T>, mut f: F) where F: FnMut(&T) { for x in v.iter() { f(x); } }\n \n pub fn main() {\n     let v = vec!(1i, 2, 3, 4, 5);"}, {"sha": "038f9e5c9ab43b7c94e781e08e63296c4f7d6e7d", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn borrow(x: &int, f: |x: &int|) {\n+fn borrow<F>(x: &int, f: F) where F: FnOnce(&int) {\n     f(x)\n }\n "}, {"sha": "33e4294366f075f93ccc05fb6a60f57e6dd38bca", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,10 +15,10 @@\n // the closures are in scope. Issue #6801.\n \n fn a() -> int {\n-    let mut x = 3;\n+    let mut x = 3i;\n     x += 1;\n-    let c1 = || x * 4;\n-    let c2 = || x * 5;\n+    let c1 = |&:| x * 4;\n+    let c2 = |&:| x * 5;\n     c1() * c2() * x\n }\n \n@@ -29,16 +29,16 @@ fn get(x: &int) -> int {\n fn b() -> int {\n     let mut x = 3;\n     x += 1;\n-    let c1 = || get(&x);\n-    let c2 = || get(&x);\n+    let c1 = |&:| get(&x);\n+    let c2 = |&:| get(&x);\n     c1() * c2() * x\n }\n \n fn c() -> int {\n     let mut x = 3;\n     x += 1;\n-    let c1 = || x * 5;\n-    let c2 = || get(&x);\n+    let c1 = |&:| x * 5;\n+    let c2 = |&:| get(&x);\n     c1() * c2() * x\n }\n "}, {"sha": "dac8945b6e828f850352afb4f5eda3c00f9f266e", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -21,7 +21,7 @@ fn add_int(x: &mut Ints, v: int) {\n     swap(&mut values, &mut x.values);\n }\n \n-fn iter_ints(x: &Ints, f: |x: &int| -> bool) -> bool {\n+fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n     let l = x.values.len();\n     range(0u, l).all(|i| f(&x.values[i]))\n }"}, {"sha": "29fcdf504de6e53ca6ef5219b3f1ed51e59b244b", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n fn foo() -> int { 22 }\n \n pub fn main() {"}, {"sha": "6e8ed4fd5a15a3bca26550b7d8f61e321487a9f7", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn each<T>(x: &[T], f: |&T|) {\n+fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n     for val in x.iter() {\n         f(val)\n     }"}, {"sha": "893003dd997226171d8ce39966524097eb9bae40", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,9 +11,9 @@\n \n fn foo(i: int) -> int { i + 1 }\n \n-fn apply<A>(f: |A| -> A, v: A) -> A { f(v) }\n+fn apply<A, F>(f: F, v: A) -> A where F: FnOnce(A) -> A { f(v) }\n \n pub fn main() {\n-    let f = {|i| foo(i)};\n+    let f = {|: i| foo(i)};\n     assert_eq!(apply(f, 2), 3);\n }"}, {"sha": "03b10b881f7ae95004971490d64d7d8070a30141", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,7 +11,7 @@\n // Test a rather underspecified example:\n \n pub fn main() {\n-    let f = {|i| i};\n+    let f = {|&: i| i};\n     assert_eq!(f(2i), 2i);\n     assert_eq!(f(5i), 5i);\n }"}, {"sha": "a2e7d7bd7e3e3137ec7ba288be539c742ac0953f", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -22,25 +22,14 @@ fn call_it<F>(f: F)\n     println!(\"{}\", f(\"Fred\".to_string()))\n }\n \n-fn call_a_thunk(f: ||) {\n+fn call_a_thunk<F>(f: F) where F: FnOnce() {\n     f();\n }\n \n-fn call_this(f: |&str|:Send) {\n+fn call_this<F>(f: F) where F: FnOnce(&str) + Send {\n     f(\"Hello!\");\n }\n \n-fn call_that(f: <'a>|&'a int, &'a int| -> int) {\n-    let (ten, forty_two) = (10, 42);\n-    println!(\"Your lucky number is {}\", f(&ten, &forty_two));\n-}\n-\n-fn call_cramped(f:||->uint,g:<'a>||->&'a uint) {\n-    let number = f();\n-    let other_number = *g();\n-    println!(\"Ticket {} wins an all-expenses-paid trip to Mountain View\", number + other_number);\n-}\n-\n fn call_bare(f: fn(&str)) {\n     f(\"Hello world!\")\n }\n@@ -71,16 +60,6 @@ pub fn main() {\n \n     call_this(|s| println!(\"{}\", s));\n \n-    call_that(|x, y| *x + *y);\n-\n-    let z = 100;\n-    call_that(|x, y| *x + *y - z);\n-\n-    call_cramped(|| 1, || unsafe {\n-        static a: uint = 100;\n-        mem::transmute(&a)\n-    });\n-\n     // External functions\n \n     call_bare(println);"}, {"sha": "4caa234ac7ae325688aba6005c35beaa612b7101", "filename": "src/test/run-pass/closure-syntax.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-syntax.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,79 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-#![feature(unboxed_closures)]\n-\n-// compile-flags:-g\n-\n-fn foo<T>() {}\n-\n-trait Bar3 {}\n-impl<'b> Bar3 for <'a>|&'a int|: 'b + Send -> &'a int {}\n-\n-struct Foo<'a> {\n-    a: ||: 'a,\n-    b: ||: 'static,\n-    c: <'b>||: 'a,\n-    d: ||: 'a + Sync,\n-    e: <'b>|int|: 'a + Sync -> &'b f32,\n-}\n-\n-fn f<'a>(a: &'a int, f: <'b>|&'b int| -> &'b int) -> &'a int {\n-    f(a)\n-}\n-\n-fn g<'a>(a: &'a int) -> &'a int {\n-    a\n-}\n-\n-struct A;\n-\n-impl A {\n-    fn foo<T>(&self) {}\n-}\n-\n-fn bar<'b>() {\n-    foo::<||>();\n-    foo::<|| -> ()>();\n-    foo::<||:>();\n-    foo::<||:'b>();\n-    foo::<||:'b + Sync>();\n-    foo::<||:Sync>();\n-    foo::< <'a>|int, f32, &'a int|:'b + Sync -> &'a int>();\n-\n-    foo::<<'a>||>();\n-\n-    // issue #11209\n-    let _: ||: 'b; // for comparison\n-    let _: <'a> ||;\n-\n-    let _: Option<||:'b>;\n-    let _: Option<<'a>||>;\n-    let _: Option< <'a>||>;\n-\n-    // issue #11210\n-    let _: ||: 'static;\n-\n-    let a = A;\n-    a.foo::<<'a>||>();\n-\n-    // issue #13490\n-    let _ = || -> ! loop {};\n-\n-    // issue #17021\n-    let c = box |&:| {};\n-}\n-\n-struct B<T>;\n-impl<'b> B<<'a>||: 'b> {}\n-\n-pub fn main() {\n-}"}, {"sha": "413717d9226ba535ec1ad1518fad8f248bee1cd5", "filename": "src/test/run-pass/coerce-to-closure-and-proc.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(unboxed_closures)]\n-\n-fn id<T>(x: T) -> T {\n-    x\n-}\n-\n-#[derive(PartialEq, Show)]\n-struct Foo<T>(T);\n-\n-#[derive(PartialEq, Show)]\n-enum Bar<T> {\n-    Baz(T)\n-}\n-\n-pub fn main() {\n-    let f: |int| -> int = id;\n-    assert_eq!(f(5), 5);\n-\n-    let f: |int| -> Foo<int> = Foo;\n-    assert_eq!(f(5), Foo(5));\n-\n-    let f: |int| -> Bar<int> = Bar::Baz;\n-    assert_eq!(f(5), Bar::Baz(5));\n-\n-    let f: |int| -> Option<int> = Some;\n-    assert_eq!(f(5), Some(5));\n-}"}, {"sha": "8394c53cba5cb44c19da054f3a99ce9dc51075d2", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,9 +12,9 @@ fn foo() -> int {\n     return 0xca7f000d;\n }\n \n-struct Bar<'a> { f: ||: 'a -> int }\n+struct Bar<F> where F: FnMut() -> int { f: F }\n \n-static mut b : Bar<'static> = Bar { f: foo };\n+static mut b : Bar<fn() -> int> = Bar { f: foo as fn() -> int};\n \n pub fn main() {\n     unsafe { assert_eq!((b.f)(), 0xca7f000d); }"}, {"sha": "f21f7d1903cf3fd3a847ab38d2876ddaaf6be72f", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -17,8 +17,8 @@\n \n fn f() { }\n static bare_fns: &'static [fn()] = &[f, f];\n-struct S<'a>(||:'a);\n-static mut closures: &'static mut [S<'static>] = &mut [S(f), S(f)];\n+struct S<F: FnOnce()>(F);\n+static mut closures: &'static mut [S<fn()>] = &mut [S(f as fn()), S(f as fn())];\n \n pub fn main() {\n     unsafe {"}, {"sha": "d9201746440854f124d23df14fe344a699f87527", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -25,6 +25,6 @@ fn wrapper3(i: chan) {\n }\n \n pub fn main() {\n-    let wrapped = {||wrapper3(chan::chan_t)};\n+    let wrapped = {|&:|wrapper3(chan::chan_t)};\n     wrapped();\n }"}, {"sha": "797c26556aaa1aa3de97fa7521ad350764e1d73f", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -19,9 +19,6 @@ use std::sync::Arc;\n trait Trait {}\n \n fn main() {\n-    // Closures - ||\n-    assert_eq!(size_of::<||>(), size_of::<Option<||>>());\n-\n     // Functions\n     assert_eq!(size_of::<fn(int)>(), size_of::<Option<fn(int)>>());\n     assert_eq!(size_of::<extern \"C\" fn(int)>(), size_of::<Option<extern \"C\" fn(int)>>());"}, {"sha": "ed246e2cb7d7bd6008b8f2345bf2a0a00bf25239", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,9 +11,8 @@\n \n \n fn test_fn() {\n-    type t = ||: 'static -> int;\n     fn ten() -> int { return 10; }\n-    let rs: t = ten;\n+    let rs = ten;\n     assert!((rs() == 10));\n }\n "}, {"sha": "5c1039fe4336883b64c59291f0f1a7923b741ad4", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<'a, T> = |Box<T>, Box<T>|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: Box<T>, eq: compare<T>) {\n+fn test_generic<T, F>(expected: Box<T>, eq: F) where T: Clone, F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = { expected.clone() };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_box() {\n@@ -22,7 +19,7 @@ fn test_box() {\n         println!(\"{}\", *b2);\n         return *b1 == *b2;\n     }\n-    test_generic::<bool>(box true, compare_box);\n+    test_generic::<bool, _>(box true, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "3d736cca6d524464085e48bea819edef5ba97ef4", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T, F>(expected: T, eq: F) where T: Clone, F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_vec() {\n     fn compare_vec(v1: Box<int>, v2: Box<int>) -> bool { return v1 == v2; }\n-    test_generic::<Box<int>>(box 1, compare_vec);\n+    test_generic::<Box<int>, _>(box 1, compare_vec);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "91b847d47cbcc679d6b9efda3c59594a2a674524", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,19 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-// Tests for standalone blocks as expressions with dynamic type sizes\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_bool() {\n     fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n-    test_generic::<bool>(true, compare_bool);\n+    test_generic::<bool, _>(true, compare_bool);\n }\n \n #[derive(Clone)]\n@@ -33,7 +28,7 @@ fn test_rec() {\n     fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<Pair>(Pair {a: 1, b: 2}, compare_rec);\n+    test_generic::<Pair, _>(Pair {a: 1, b: 2}, compare_rec);\n }\n \n pub fn main() { test_bool(); test_rec(); }"}, {"sha": "fb2a120e6f4a17d839b2cccc2ca2736437deb667", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,18 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-// Tests for if as expressions with dynamic type sizes\n-type compare<T> = |T, T|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, not_expected: T, eq: compare<T>) {\n+fn test_generic<T, F>(expected: T, not_expected: T, eq: F) where\n+    T: Clone,\n+    F: FnOnce(T, T) -> bool,\n+{\n     let actual: T = if true { expected.clone() } else { not_expected };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_bool() {\n     fn compare_bool(b1: bool, b2: bool) -> bool { return b1 == b2; }\n-    test_generic::<bool>(true, false, compare_bool);\n+    test_generic::<bool, _>(true, false, compare_bool);\n }\n \n #[derive(Clone)]\n@@ -32,7 +31,7 @@ fn test_rec() {\n     fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<Pair>(Pair{a: 1, b: 2}, Pair{a: 2, b: 3}, compare_rec);\n+    test_generic::<Pair, _>(Pair{a: 1, b: 2}, Pair{a: 2, b: 3}, compare_rec);\n }\n \n pub fn main() { test_bool(); test_rec(); }"}, {"sha": "5fc9a502ca8a0e54f0c488e0958bb1f375189659", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,22 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<T> = |Box<T>, Box<T>|: 'static -> bool;\n-\n-fn test_generic<T:Clone>(expected: Box<T>, eq: compare<T>) {\n+fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {\n     let actual: Box<T> = match true {\n         true => { expected.clone() },\n         _ => panic!(\"wat\")\n     };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_box() {\n     fn compare_box(b1: Box<bool>, b2: Box<bool>) -> bool {\n         return *b1 == *b2;\n     }\n-    test_generic::<bool>(box true, compare_box);\n+    test_generic::<bool, _>(box true, compare_box);\n }\n \n pub fn main() { test_box(); }"}, {"sha": "e608f9c46c79c1fff1f2920f8c82a80e25e1e5fc", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,20 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-type compare<'a, T> = |T, T|: 'a -> bool;\n-\n-fn test_generic<T:Clone>(expected: T, eq: compare<T>) {\n+fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = match true {\n         true => expected.clone(),\n         _ => panic!(\"wat\")\n     };\n-    assert!((eq(expected, actual)));\n+    assert!(eq(expected, actual));\n }\n \n fn test_vec() {\n     fn compare_box(v1: Box<int>, v2: Box<int>) -> bool { return v1 == v2; }\n-    test_generic::<Box<int>>(box 1, compare_box);\n+    test_generic::<Box<int>, _>(box 1, compare_box);\n }\n \n pub fn main() { test_vec(); }"}, {"sha": "09508b9b136296423ce4e78f4bdbcf0173b79b0c", "filename": "src/test/run-pass/fn-bare-coerce-to-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-coerce-to-block.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n fn bare() {}\n \n-fn likes_block(f: ||) { f() }\n+fn likes_block<F>(f: F) where F: FnOnce() { f() }\n \n pub fn main() {\n     likes_block(bare);"}, {"sha": "bf6926050ba96b2f780a885a1b96de8dfb06e8ed", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct r<'a> {\n-    field: ||: 'a,\n+struct r<F> where F: FnOnce() {\n+    field: F,\n }\n \n pub fn main() {\n     fn f() {}\n-    let _i: r = r {field: f};\n+    let _i: r<fn()> = r {field: f as fn()};\n }"}, {"sha": "24bf1f94d887b49fe156fe0bbb8e0e85d2ab97c8", "filename": "src/test/run-pass/fn-pattern-expected-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let f: |(int,int)| = |(x, y)| {\n+    let f = |&: (x, y): (int, int)| {\n         assert_eq!(x, 1);\n         assert_eq!(y, 2);\n     };"}, {"sha": "ae22ff5cce03526d28e5a499c1c7c2991b71b81d", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     // We should be able to type infer inside of ||s.\n-    let _f = || {\n+    let _f = |&:| {\n         let i = 10i;\n     };\n }"}, {"sha": "f6466994955e79e537a65dd8779a46f2e079781b", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn two(it: |int|) { it(0); it(1); }\n+fn two<F>(mut it: F) where F: FnMut(int) { it(0); it(1); }\n \n pub fn main() {\n     let mut a: Vec<int> = vec!(-1, -1, -1, -1);"}, {"sha": "029dddb7a21109734d92a3f14d05dc7f6cb0da24", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn pairs(it: |(int, int)|) {\n+fn pairs<F>(mut it: F) where F: FnMut((int, int)) {\n     let mut i: int = 0;\n     let mut j: int = 0;\n     while i < 10 { it((i, j)); i += 1; j += i; }"}, {"sha": "9ccb2dd56cfdcd20ecc7b2df910c038d60e956c7", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     assert_eq!(sum, 45);\n }\n \n-fn first_ten(it: |int|) {\n+fn first_ten<F>(mut it: F) where F: FnMut(int) {\n     let mut i: int = 0;\n     while i < 10 { println!(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "3955bedb168aeb373fad6b1ce6fae029b18a0e37", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn ho(f: |int| -> int) -> int { let n: int = f(3); return n; }\n+fn ho<F>(f: F) -> int where F: FnOnce(int) -> int { let n: int = f(3); return n; }\n \n fn direct(x: int) -> int { return x + 1; }\n "}, {"sha": "f992847e4e9f6b093b92614cd17022f96ebf825c", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,11 +10,11 @@\n \n \n trait vec_utils<T> {\n-    fn map_<U>(x: &Self, f: |&T| -> U) -> Vec<U> ;\n+    fn map_<U, F>(x: &Self, f: F) -> Vec<U> where F: FnMut(&T) -> U;\n }\n \n impl<T> vec_utils<T> for Vec<T> {\n-    fn map_<U>(x: &Vec<T> , f: |&T| -> U) -> Vec<U> {\n+    fn map_<U, F>(x: &Vec<T> , mut f: F) -> Vec<U> where F: FnMut(&T) -> U {\n         let mut r = Vec::new();\n         for elt in x.iter() {\n             r.push(f(elt));"}, {"sha": "3bcce5388715d6e34df5117549980565e4d765ef", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,13 +9,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n \n    This originally came from the word-count benchmark.\n */\n \n-pub fn map(filename: String, emit: map_reduce::putter) {\n+pub fn map(filename: String, mut emit: map_reduce::putter) {\n     emit(filename, \"1\".to_string());\n }\n \n@@ -25,7 +27,7 @@ mod map_reduce {\n     use std::str;\n     use std::thread::Thread;\n \n-    pub type putter<'a> = |String, String|: 'a;\n+    pub type putter<'a> = Box<FnMut(String, String) + 'a>;\n \n     pub type mapper = extern fn(String, putter);\n \n@@ -58,7 +60,7 @@ mod map_reduce {\n         }\n \n         let ctrl_clone = ctrl.clone();\n-        ::map(input, |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n+        ::map(input, box |a,b| emit(&mut intermediates, ctrl.clone(), a, b) );\n         ctrl_clone.send(ctrl_proto::mapper_done).unwrap();\n     }\n "}, {"sha": "9e857a33245d16be5b060469a0d0a548e8a3ddc0", "filename": "src/test/run-pass/hrtb-debruijn-object-types-in-closures.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-debruijn-object-types-in-closures.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,8 +13,7 @@ trait Typer<'tcx> {\n     fn dummy(&self) { }\n }\n \n-fn g(_: |&Typer|) {\n-}\n+fn g<F>(_: F) where F: FnOnce(&Typer) {}\n \n fn h() {\n     g(|typer| typer.dummy())"}, {"sha": "41b7c0fae0746d165e80c29e4e759ba1c23d979a", "filename": "src/test/run-pass/hrtb-parse.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -40,8 +40,5 @@ fn foo21(t: for<'a> unsafe fn(int) -> int) { }\n fn foo22(t: for<'a> extern \"C\" fn(int) -> int) { }\n fn foo23(t: for<'a> unsafe extern \"C\" fn(int) -> int) { }\n \n-fn foo30(t: for<'a> |int| -> int) { }\n-fn foo31(t: for<'a> unsafe |int| -> int) { }\n-\n fn main() {\n }"}, {"sha": "c90c3643d4e54f8dd5d301ad635b662260f903c0", "filename": "src/test/run-pass/hrtb-trait-object-passed-to-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-passed-to-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -23,7 +23,7 @@ struct NoAnn<'ast> {\n impl<'ast> PrinterSupport<'ast> for NoAnn<'ast> {\n }\n \n-fn foo<'ast> (f: Option<&'ast uint>, g: |&PrinterSupport|) {\n+fn foo<'ast, G>(f: Option<&'ast uint>, g: G) where G: FnOnce(&PrinterSupport) {\n     let annotation = NoAnn { f: f };\n     g(&annotation)\n }"}, {"sha": "e5fd17e2dfed0017791c9b0c81276c79fbd2c4c1", "filename": "src/test/run-pass/issue-13434.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,7 +15,7 @@ trait Repro {\n   fn repro(self, s: MyStruct) -> String;\n }\n \n-impl Repro for |MyStruct|:'static -> String {\n+impl<F> Repro for F where F: FnOnce(MyStruct) -> String {\n   fn repro(self, s: MyStruct) -> String {\n     self(s)\n   }\n@@ -26,5 +26,5 @@ fn do_stuff<R: Repro>(r: R) -> String {\n }\n \n pub fn main() {\n-  assert_eq!(\"MyStruct\".to_string(), do_stuff(|s: MyStruct| format!(\"{}\", s)));\n+  assert_eq!(\"MyStruct\".to_string(), do_stuff(|: s: MyStruct| format!(\"{}\", s)));\n }"}, {"sha": "4d150e7a68e7cf5dc21dd1f31a1f4ef947a771b1", "filename": "src/test/run-pass/issue-13507-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13507-2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -24,7 +24,6 @@ pub fn type_ids() -> Vec<TypeId> {\n     ids.push(TypeId::of::<testtypes::FooEnum>());\n     ids.push(TypeId::of::<testtypes::FooUniq>());\n     ids.push(TypeId::of::<testtypes::FooPtr>());\n-    ids.push(TypeId::of::<testtypes::FooClosure>());\n     ids.push(TypeId::of::<&'static testtypes::FooTrait>());\n     ids.push(TypeId::of::<testtypes::FooStruct>());\n     ids.push(TypeId::of::<testtypes::FooTuple>());"}, {"sha": "c0652b946dbe580b5a1711738b46dc39c23aa187", "filename": "src/test/run-pass/issue-13808.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n struct Foo<'a> {\n-    listener: ||: 'a\n+    listener: Box<FnMut() + 'a>,\n }\n \n impl<'a> Foo<'a> {\n-    fn new(listener: ||: 'a) -> Foo<'a> {\n-        Foo { listener: listener }\n+    fn new<F>(listener: F) -> Foo<'a> where F: FnMut() + 'a {\n+        Foo { listener: box listener }\n     }\n }\n "}, {"sha": "2091a5437c2dcbcedb31a10c25428b8deb553773", "filename": "src/test/run-pass/issue-1460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-1460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1460.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,5 +10,5 @@\n \n \n pub fn main() {\n-    {|i| if 1i == i { }};\n+    {|&: i| if 1i == i { }};\n }"}, {"sha": "d5590e99f2cb994ac6f9f8c814062dc630d4d55b", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -16,7 +16,7 @@ trait Matcher {\n \n struct CharPredMatcher<'a, 'b> {\n     str: &'a str,\n-    pred: |char|:'b -> bool\n+    pred: Box<FnMut(char) -> bool + 'b>,\n }\n \n impl<'a, 'b> Matcher for CharPredMatcher<'a, 'b> {\n@@ -29,11 +29,11 @@ trait IntoMatcher<'a, T> {\n     fn into_matcher(self, &'a str) -> T;\n }\n \n-impl<'a, 'b> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for |char|:'b -> bool {\n+impl<'a, 'b, F> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for F where F: FnMut(char) -> bool + 'b {\n     fn into_matcher(self, s: &'a str) -> CharPredMatcher<'a, 'b> {\n         CharPredMatcher {\n             str: s,\n-            pred: self\n+            pred: box self,\n         }\n     }\n }\n@@ -57,6 +57,6 @@ fn match_indices<'a, M, T: IntoMatcher<'a, M>>(s: &'a str, from: T) -> MatchIndi\n \n fn main() {\n     let s = \"abcbdef\";\n-    match_indices(s, |c: char| c == 'b')\n+    match_indices(s, |&mut: c: char| c == 'b')\n         .collect::<Vec<(uint, uint)>>();\n }"}, {"sha": "3c5af9ca032c100df1112e981c02075ff253f3f7", "filename": "src/test/run-pass/issue-1516.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=f11f3e7baeba3f5acf08cc6fbfee559c00e9f96e", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    let early_error: |&str|: 'static -> ! = |_msg| { panic!() };\n-}"}, {"sha": "e7422e233a62903385b1a0b8823eb7c6de44b47d", "filename": "src/test/run-pass/issue-16256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-16256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-16256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16256.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let mut buf = Vec::new();\n-    |c: u8| buf.push(c);\n+    |&mut: c: u8| buf.push(c);\n }"}, {"sha": "1febf33742974ba2e49616219c3367b2504648ff", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -20,8 +20,8 @@ impl<'a, I, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n         Parser {\n             parse: box move |&mut: x: I| {\n-                match (*self.parse).call_mut((x,)) {\n-                    Ok(r) => (*rhs.parse).call_mut((r,)),\n+                match (self.parse)(x) {\n+                    Ok(r) => (rhs.parse)(r),\n                     Err(e) => Err(e)\n                 }\n             }"}, {"sha": "120ada96c15b731c932c0f5e74f680ddb94556c2", "filename": "src/test/run-pass/issue-2074.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2074.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,11 +11,11 @@\n #![allow(non_camel_case_types)]\n \n pub fn main() {\n-    let one: || -> uint = || {\n+    let one = |&:| {\n         enum r { a };\n         r::a as uint\n     };\n-    let two: || -> uint = || {\n+    let two = |&:| {\n         enum r { a };\n         r::a as uint\n     };"}, {"sha": "aa61d52b2a32d4b1648d3eca2c897ffaac72962a", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -29,7 +29,7 @@ fn socket() -> socket {\n     }\n }\n \n-fn closure(f: ||) { f() }\n+fn closure<F>(f: F) where F: FnOnce() { f() }\n \n fn setsockopt_bytes(_sock: int) { }\n "}, {"sha": "72cf2219bb6f090963d453bcf8771f80a1750e4c", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n \n-type Connection = |Vec<u8>|: 'static;\n+type Connection = Box<FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n-    let mock_connection: Connection = |_| {};\n+    let mock_connection: Connection = box |&mut: _| {};\n     Some(mock_connection)\n }\n "}, {"sha": "528870d033476e70fcc0c1abb95af0489b0aaabc", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -27,7 +27,7 @@ fn tester()\n     };\n \n     let path = path::Path::new(\"blah\");\n-    assert!(loader.call_mut((&path,)).is_ok());\n+    assert!(loader(&path).is_ok());\n }\n \n pub fn main() {}"}, {"sha": "60c53450004363917843728b96dda31d397ed800", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let x = 1;\n-  let y: || -> int = || x;\n+  let x = 1u;\n+  let y = |&:| x;\n   let _z = y();\n }"}, {"sha": "9226bebd2dcea424a93b4d919480c729d39bad59", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n enum PureCounter { PureCounterVariant(uint) }\n \n-fn each(thing: PureCounter, blk: |v: &uint|) {\n+fn each<F>(thing: PureCounter, blk: F) where F: FnOnce(&uint) {\n     let PureCounter::PureCounterVariant(ref x) = thing;\n     blk(x);\n }"}, {"sha": "e917ecc745f0ba3f6d47ccdf8588e62bc50fe2c3", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,21 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type ErrPrinter<'a> = |&str, &str|: 'a;\n-\n fn example_err(prog: &str, arg: &str) {\n     println!(\"{}: {}\", prog, arg)\n }\n \n-fn exit(print: ErrPrinter, prog: &str, arg: &str) {\n+fn exit<F>(print: F, prog: &str, arg: &str) where F: FnOnce(&str, &str) {\n     print(prog, arg);\n }\n \n-struct X<'a> {\n-    err: ErrPrinter<'a>\n+struct X<F> where F: FnOnce(&str, &str) {\n+    err: F,\n }\n \n-impl<'a> X<'a> {\n+impl<F> X<F> where F: FnOnce(&str, &str) {\n     pub fn boom(self) {\n         exit(self.err, \"prog\", \"arg\");\n     }"}, {"sha": "69255c576811fd075b8c5b039e276f92a75e950f", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #5239\n \n pub fn main() {\n-    let _f: |int| -> int = |ref x: int| { *x };\n+    let _f = |&: ref x: int| { *x };\n     let foo = 10;\n     assert!(_f(foo) == 10);\n }"}, {"sha": "b2b64e62c39a4d645043b54ceb800ac56d185ffc", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn swap(f: |Vec<int> | -> Vec<int> ) -> Vec<int> {\n+fn swap<F>(f: F) -> Vec<int> where F: FnOnce(Vec<int>) -> Vec<int> {\n     let x = vec!(1, 2, 3);\n     f(x)\n }"}, {"sha": "07c7c6888e1ebdb4780246c8c35c016d86179722", "filename": "src/test/run-pass/issue-6157.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6157.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait OpInt<'a> { fn call(&mut self, int, int) -> int; }\n+pub trait OpInt { fn call(&mut self, int, int) -> int; }\n \n-impl<'a> OpInt<'a> for |int, int|: 'a -> int {\n+impl<F> OpInt for F where F: FnMut(int, int) -> int {\n     fn call(&mut self, a:int, b:int) -> int {\n         (*self)(a, b)\n     }\n@@ -21,7 +21,7 @@ fn squarei<'a>(x: int, op: &'a mut OpInt) -> int { op.call(x, x) }\n fn muli(x:int, y:int) -> int { x * y }\n \n pub fn main() {\n-    let mut f = |x,y| muli(x,y);\n+    let mut f = |&mut: x, y| muli(x, y);\n     {\n         let g = &mut f;\n         let h = g as &mut OpInt;"}, {"sha": "72bdd1af746c17c1bf03f40fd5f9d3e612a36b68", "filename": "src/test/run-pass/issue-868.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-868.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T>(g: || -> T) -> T { g() }\n+fn f<T, F>(g: F) -> T where F: FnOnce() -> T { g() }\n \n pub fn main() {\n   let _x = f( | | { 10i });\n@@ -20,5 +20,5 @@ pub fn main() {\n     let _: () = f(| | { });\n     // empty block with no type info should compile too\n     let _ = f(||{});\n-    let _ = (||{});\n+    let _ = (|&:|{});\n }"}, {"sha": "3ca060f45a5f50f031d9bedfa194b4644c2909e1", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -29,7 +29,7 @@ fn Ident_new() -> Ident {\n \n pub fn light_fuse(fld: Box<bomb>) {\n     int3!();\n-    let f = || {\n+    let f = |&:| {\n         int3!();\n         fld.boom(Ident_new()); // *** 1\n     };"}, {"sha": "29ac563878bc4ce7aec13a54c703a3681afb181c", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn range_(a: int, b: int, it: |int|) {\n+fn range_<F>(a: int, b: int, mut it: F) where F: FnMut(int) {\n     assert!((a < b));\n     let mut i: int = a;\n     while i < b { it(i); i += 1; }"}, {"sha": "b33e6512b18bdafab6c280bc5755150237ab6ec9", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -16,7 +16,7 @@ struct Refs { refs: Vec<int> , n: int }\n \n pub fn main() {\n     let mut e = Refs{refs: vec!(), n: 0};\n-    let _f: || = || println!(\"{}\", e.n);\n+    let _f = |&:| println!(\"{}\", e.n);\n     let x: &[int] = e.refs.as_slice();\n     assert_eq!(x.len(), 0);\n }"}, {"sha": "8ef5df5d6969729f2365ee0f8f99ad8bfb61c107", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,16 +10,16 @@\n \n // Issue #1818\n \n-fn lp<T>(s: String, f: |String| -> T) -> T {\n+fn lp<T, F>(s: String, mut f: F) -> T where F: FnMut(String) -> T {\n     while false {\n         let r = f(s);\n         return (r);\n     }\n     panic!();\n }\n \n-fn apply<T>(s: String, f: |String| -> T) -> T {\n-    fn g<T>(s: String, f: |String| -> T) -> T {f(s)}\n+fn apply<T, F>(s: String, mut f: F) -> T where F: FnMut(String) -> T {\n+    fn g<T, F>(s: String, mut f: F) -> T where F: FnMut(String) -> T {f(s)}\n     g(s, |v| { let r = f(v); r })\n }\n "}, {"sha": "6615bb6368fd75df46b1fd3a7911ee8c2aeee153", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,16 +10,17 @@\n \n // Make sure #1399 stays fixed\n \n+#![feature(unboxed_closures)]\n \n struct A { a: Box<int> }\n \n-fn foo() -> ||: 'static -> int {\n+fn foo() -> Box<FnMut() -> int + 'static> {\n     let k = box 22i;\n     let _u = A {a: k.clone()};\n-    let result: ||: 'static -> int = || 22;\n-    result\n+    let result  = |&mut:| 22;\n+    box result\n }\n \n pub fn main() {\n-    assert_eq!(foo()(), 22);\n+    assert_eq!(foo().call_mut(()), 22);\n }"}, {"sha": "206d4db3db4f841eaf10ce617caa13aec6f9d623", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,7 +13,7 @@\n struct A { a: Box<int> }\n \n pub fn main() {\n-    fn invoke(f: ||) { f(); }\n+    fn invoke<F>(f: F) where F: FnOnce() { f(); }\n     let k = box 22i;\n     let _u = A {a: k.clone()};\n     invoke(|| println!(\"{}\", k.clone()) )"}, {"sha": "2a0a2b208875fa97005f21eea6f733bdae28846c", "filename": "src/test/run-pass/match-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-phi.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -13,7 +13,7 @@\n \n enum thing { a, b, c, }\n \n-fn foo(it: |int|) { it(10); }\n+fn foo<F>(it: F) where F: FnOnce(int) { it(10); }\n \n pub fn main() {\n     let mut x = true;"}, {"sha": "acd8078b1f4d3a183fbf8f387e94dd8ed47d64c3", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,11 +11,11 @@\n \n \n trait vec_monad<A> {\n-    fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> ;\n+    fn bind<B, F>(&self, f: F ) -> Vec<B> where F: FnMut(&A) -> Vec<B> ;\n }\n \n impl<A> vec_monad<A> for Vec<A> {\n-    fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> {\n+    fn bind<B, F>(&self, mut f: F) -> Vec<B> where F: FnMut(&A) -> Vec<B> {\n         let mut r = Vec::new();\n         for elt in self.iter() {\n             r.extend(f(elt).into_iter());\n@@ -25,11 +25,11 @@ impl<A> vec_monad<A> for Vec<A> {\n }\n \n trait option_monad<A> {\n-    fn bind<B>(&self, f: |&A| -> Option<B>) -> Option<B>;\n+    fn bind<B, F>(&self, f: F) -> Option<B> where F: FnOnce(&A) -> Option<B>;\n }\n \n impl<A> option_monad<A> for Option<A> {\n-    fn bind<B>(&self, f: |&A| -> Option<B>) -> Option<B> {\n+    fn bind<B, F>(&self, f: F) -> Option<B> where F: FnOnce(&A) -> Option<B> {\n         match *self {\n             Some(ref a) => { f(a) }\n             None => { None }"}, {"sha": "b7cd3003e750c4204394ce865daf9209bd80654f", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(_thing: ||) { }\n+fn f2<F>(_thing: F) where F: FnOnce() { }\n \n-fn f(thing: ||) {\n+fn f<F>(thing: F) where F: FnOnce() {\n     f2(thing);\n }\n "}, {"sha": "f80728519136ed684a244aeca3b713066b5d032d", "filename": "src/test/run-pass/mut-function-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-function-arguments.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -15,7 +15,7 @@ fn f(mut y: Box<int>) {\n }\n \n fn g() {\n-    let frob: |Box<int>| = |mut q| { *q = 2; assert!(*q == 2); };\n+    let frob = |&: mut q: Box<int>| { *q = 2; assert!(*q == 2); };\n     let w = box 37;\n     frob(w);\n "}, {"sha": "ad9161f9bd48736fa5911391859c739d80855000", "filename": "src/test/run-pass/mut-in-ident-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-in-ident-patterns.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -75,6 +75,6 @@ pub fn main() {\n     x = 30;\n     assert_eq!(x, 30);\n \n-    (|A { x: mut t }: A| { t = t+1; t })(A { x: 34 });\n+    (|&: A { x: mut t }: A| { t = t+1; t })(A { x: 34 });\n \n }"}, {"sha": "01875288aef0e97cdbc73e40769567af7a6f2826", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -10,9 +10,9 @@\n \n // Tests for the new |args| expr lambda syntax\n \n-fn f(i: int, f: |int| -> int) -> int { f(i) }\n+fn f<F>(i: int, f: F) -> int where F: FnOnce(int) -> int { f(i) }\n \n-fn g(_g: ||) { }\n+fn g<G>(_g: G) where G: FnOnce() { }\n \n pub fn main() {\n     assert_eq!(f(10, |a| a), 10);"}, {"sha": "e422cb803215bb591be773f40c4413a555290a0b", "filename": "src/test/run-pass/non-legacy-modes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -12,7 +12,7 @@ struct X {\n     repr: int\n }\n \n-fn apply<T>(x: T, f: |T|) {\n+fn apply<T, F>(x: T, f: F) where F: FnOnce(T) {\n     f(x);\n }\n "}, {"sha": "25b63cd14c4357f2a70bca5c8116a391d4255875", "filename": "src/test/run-pass/overloaded-calls-object-one-arg.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-one-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-one-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-one-arg.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct S;\n+// Tests calls to closure arguments where the closure takes 1 argument.\n+// This is a bit tricky due to rust-call ABI.\n \n-impl S {\n-    fn foo(&self) {\n-        let _ = move || { self.foo() };  //~error boxed closures can't capture by value\n-    }\n+fn foo(f: &mut FnMut(int) -> int) -> int {\n+    f(22)\n }\n \n fn main() {\n+    let z = foo(&mut |x| x *100);\n+    assert_eq!(z, 2200);\n }", "previous_filename": "src/test/compile-fail/issue-20228-2.rs"}, {"sha": "026ebc308408fcac54583dc2f2892e94c90aef84", "filename": "src/test/run-pass/overloaded-calls-object-two-args.rs", "status": "renamed", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-two-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-two-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-two-args.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(t: &mut int){\n-    println!(\"{}\", t);\n+// Tests calls to closure arguments where the closure takes 2 arguments.\n+// This is a bit tricky due to rust-call ABI.\n+\n+fn foo(f: &mut FnMut(int, int) -> int) -> int {\n+    f(1, 2)\n }\n \n fn main() {\n-    let test = 10;\n-\n-    let h = move || {  //~error boxed closures can't capture by value\n-        let mut r = &mut test.clone();\n-        foo(r);\n-    };\n-\n-    h();\n+    let z = foo(&mut |x, y| x * 10 + y);\n+    assert_eq!(z, 12);\n }", "previous_filename": "src/test/compile-fail/issue-20193.rs"}, {"sha": "b38f8213b4ab83480908be73aa047f05466734a5", "filename": "src/test/run-pass/overloaded-calls-object-zero-args.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-object-zero-args.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n+// Tests calls to closure arguments where the closure takes 0 arguments.\n+// This is a bit tricky due to rust-call ABI.\n \n-fn f(x: || -> !) -> ! {\n-    x();\n+fn foo(f: &mut FnMut() -> int) -> int {\n+    f()\n }\n \n fn main() {\n-    let x: || -> ! = || panic!();\n-    let _y: || -> ! = || x();\n+    let z = foo(&mut || 22);\n+    assert_eq!(z, 22);\n }", "previous_filename": "src/test/run-pass/closure-return-bang.rs"}, {"sha": "bb5b88d3674a1b8d1d42be64c75ebfd5db397bc4", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -50,7 +50,7 @@ fn main() {\n         x: 3,\n         y: 3,\n     };\n-    let ans = s.call_mut((3,));\n+    let ans = s(3);\n \n     assert_eq!(ans, 27);\n     let s = S2 {\n@@ -64,7 +64,7 @@ fn main() {\n         x: 3,\n         y: 3,\n     };\n-    let ans = s.call_once((3, 1));\n+    let ans = s(3, 1);\n     assert_eq!(ans, 27);\n }\n "}, {"sha": "c718b948f8dc07723f4dfe49a69f351af11775dd", "filename": "src/test/run-pass/pattern-in-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-in-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -14,8 +14,8 @@ struct Foo {\n }\n \n pub fn main() {\n-    let f = |(x, _): (int, int)| println!(\"{}\", x + 1);\n-    let g = |Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n+    let f = |&: (x, _): (int, int)| println!(\"{}\", x + 1);\n+    let g = |&: Foo { x: x, y: _y }: Foo| println!(\"{}\", x + 1);\n     f((2, 3));\n     g(Foo { x: 1, y: 2 });\n }"}, {"sha": "c5588a29cb526cccdd622b01f6f8d5e1d8ac4c1e", "filename": "src/test/run-pass/purity-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fpurity-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpurity-infer.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn something(f: ||) { f(); }\n+fn something<F>(f: F) where F: FnOnce() { f(); }\n pub fn main() {\n     something(|| println!(\"hi!\") );\n }"}, {"sha": "a7724e68310a7603e9c0b93a7c41e5b52deddf46", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -8,21 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n struct closure_box<'a> {\n-    cl: ||: 'a,\n+    cl: Box<FnMut() + 'a>,\n }\n \n-fn box_it(x: ||) -> closure_box {\n+fn box_it<'a>(x: Box<FnMut() + 'a>) -> closure_box<'a> {\n     closure_box {cl: x}\n }\n \n pub fn main() {\n     let mut i = 3i;\n     assert_eq!(i, 3);\n     {\n-        let cl = || i += 1;\n-        let cl_box = box_it(cl);\n-        (cl_box.cl)();\n+        let cl = |&mut:| i += 1;\n+        let mut cl_box = box_it(box cl);\n+        cl_box.cl.call_mut(());\n     }\n     assert_eq!(i, 4);\n }"}, {"sha": "e7dc5e99c2bb97e05b6d981ff62e64f2a0560df9", "filename": "src/test/run-pass/regions-dependent-autofn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autofn.rs?ref=c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "patch": "@@ -11,9 +11,9 @@\n // Test lifetimes are linked properly when we autoslice a vector.\n // Issue #3148.\n \n-fn subslice(v: ||) -> || { v }\n+fn subslice<F>(v: F) -> F where F: FnOnce() { v }\n \n-fn both(v: ||) -> || {\n+fn both<F>(v: F) -> F where F: FnOnce() {\n     subslice(subslice(v))\n }\n "}]}