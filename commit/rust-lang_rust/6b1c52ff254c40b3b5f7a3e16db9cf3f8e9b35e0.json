{"sha": "6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWM1MmZmMjU0YzQwYjNiNWY3YTNlMTZkYjljZjNmOGU5YjM1ZTA=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-08-18T04:45:18Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-08-18T05:00:27Z"}, "message": "Fold `vtable_trait_upcasting_coercion_new_vptr_slot` logic into obligation processing.", "tree": {"sha": "f54e6891a038bf071fde7fa2e145e111cb4cb560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54e6891a038bf071fde7fa2e145e111cb4cb560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "html_url": "https://github.com/rust-lang/rust/commit/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e605023ec3bf85fc9997741de5c6dae031c791d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e605023ec3bf85fc9997741de5c6dae031c791d", "html_url": "https://github.com/rust-lang/rust/commit/1e605023ec3bf85fc9997741de5c6dae031c791d"}], "stats": {"total": 224, "additions": 137, "deletions": 87}, "files": [{"sha": "fd96858010ea96c228f0ca76471743014e1580a1", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -31,21 +31,10 @@ pub(crate) fn unsized_info<'tcx>(\n             if data_a.principal_def_id() == data_b.principal_def_id() {\n                 return old_info;\n             }\n-            // trait upcasting coercion\n \n-            // if both of the two `principal`s are `None`, this function would have returned early above.\n-            // and if one of the two `principal`s is `None`, typechecking would have rejected this case.\n-            let principal_a = data_a\n-                .principal()\n-                .expect(\"unsized_info: missing principal trait for trait upcasting coercion\");\n-            let principal_b = data_b\n-                .principal()\n-                .expect(\"unsized_info: missing principal trait for trait upcasting coercion\");\n-\n-            let vptr_entry_idx = fx.tcx.vtable_trait_upcasting_coercion_new_vptr_slot((\n-                principal_a.with_self_ty(fx.tcx, source),\n-                principal_b.with_self_ty(fx.tcx, source),\n-            ));\n+            // trait upcasting coercion\n+            let vptr_entry_idx =\n+                fx.tcx.vtable_trait_upcasting_coercion_new_vptr_slot((source, target));\n \n             if let Some(entry_idx) = vptr_entry_idx {\n                 let entry_idx = u32::try_from(entry_idx).unwrap();"}, {"sha": "a5143a755fe69a237030c4d1a9c3b35f90fafd43", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -150,19 +150,8 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n             // trait upcasting coercion\n \n-            // if both of the two `principal`s are `None`, this function would have returned early above.\n-            // and if one of the two `principal`s is `None`, typechecking would have rejected this case.\n-            let principal_a = data_a\n-                .principal()\n-                .expect(\"unsized_info: missing principal trait for trait upcasting coercion\");\n-            let principal_b = data_b\n-                .principal()\n-                .expect(\"unsized_info: missing principal trait for trait upcasting coercion\");\n-\n-            let vptr_entry_idx = cx.tcx().vtable_trait_upcasting_coercion_new_vptr_slot((\n-                principal_a.with_self_ty(cx.tcx(), source),\n-                principal_b.with_self_ty(cx.tcx(), source),\n-            ));\n+            let vptr_entry_idx =\n+                cx.tcx().vtable_trait_upcasting_coercion_new_vptr_slot((source, target));\n \n             if let Some(entry_idx) = vptr_entry_idx {\n                 let ptr_ty = cx.type_i8p();"}, {"sha": "85b1274da10ed2ce3a536e4696c3bba8f32cb7db", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -987,9 +987,9 @@ rustc_queries! {\n         desc { |tcx| \"finding all vtable entries for trait {}\", tcx.def_path_str(key.def_id()) }\n     }\n \n-    query vtable_trait_upcasting_coercion_new_vptr_slot(key: (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>)) -> Option<usize> {\n-        desc { |tcx| \"finding the slot within vtable for trait {} vtable ptr during trait upcasting coercion from {} vtable\",\n-            tcx.def_path_str(key.1.def_id()), tcx.def_path_str(key.0.def_id()) }\n+    query vtable_trait_upcasting_coercion_new_vptr_slot(key: (ty::Ty<'tcx>, ty::Ty<'tcx>)) -> Option<usize> {\n+        desc { |tcx| \"finding the slot within vtable for trait object {} vtable ptr during trait upcasting coercion from {} vtable\",\n+            key.1, key.0 }\n     }\n \n     query codegen_fulfill_obligation("}, {"sha": "5d2244a59617a5e7f855be660408b0dc548cebfb", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -503,6 +503,9 @@ pub enum ImplSource<'tcx, N> {\n     /// Successful resolution for a builtin trait.\n     Builtin(ImplSourceBuiltinData<N>),\n \n+    /// ImplSource for trait upcasting coercion\n+    TraitUpcasting(ImplSourceTraitUpcastingData<'tcx, N>),\n+\n     /// ImplSource automatically generated for a closure. The `DefId` is the ID\n     /// of the closure expression. This is a `ImplSource::UserDefined` in spirit, but the\n     /// impl is generated by the compiler and does not appear in the source.\n@@ -538,6 +541,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n             | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n+            ImplSource::TraitUpcasting(d) => d.nested,\n         }\n     }\n \n@@ -554,6 +558,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n             | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n             ImplSource::TraitAlias(d) => &d.nested[..],\n+            ImplSource::TraitUpcasting(d) => &d.nested[..],\n         }\n     }\n \n@@ -605,6 +610,13 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                 substs: d.substs,\n                 nested: d.nested.into_iter().map(f).collect(),\n             }),\n+            ImplSource::TraitUpcasting(d) => {\n+                ImplSource::TraitUpcasting(ImplSourceTraitUpcastingData {\n+                    upcast_trait_ref: d.upcast_trait_ref,\n+                    vtable_vptr_slot: d.vtable_vptr_slot,\n+                    nested: d.nested.into_iter().map(f).collect(),\n+                })\n+            }\n         }\n     }\n }\n@@ -650,6 +662,20 @@ pub struct ImplSourceAutoImplData<N> {\n     pub nested: Vec<N>,\n }\n \n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n+    /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n+    pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n+\n+    /// The vtable is formed by concatenating together the method lists of\n+    /// the base object trait and all supertraits, pointers to supertrait vtable will\n+    /// be provided when necessary; this is the position of `upcast_trait_ref`'s vtable\n+    /// within that vtable.\n+    pub vtable_vptr_slot: Option<usize>,\n+\n+    pub nested: Vec<N>,\n+}\n+\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n pub struct ImplSourceBuiltinData<N> {\n     pub nested: Vec<N>,\n@@ -661,8 +687,9 @@ pub struct ImplSourceObjectData<'tcx, N> {\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n \n     /// The vtable is formed by concatenating together the method lists of\n-    /// the base object trait and all supertraits; this is the start of\n-    /// `upcast_trait_ref`'s methods in that vtable.\n+    /// the base object trait and all supertraits, pointers to supertrait vtable will\n+    /// be provided when necessary; this is the start of `upcast_trait_ref`'s methods\n+    /// in that vtable.\n     pub vtable_base: usize,\n \n     pub nested: Vec<N>,"}, {"sha": "aa16e14fedcde9318c9a43bb29a75310b7de5da3", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -30,6 +30,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::Builtin(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::TraitAlias(ref d) => write!(f, \"{:?}\", d),\n+\n+            super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -70,6 +72,16 @@ impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceBuiltinData<N> {\n     }\n }\n \n+impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<'tcx, N> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"ImplSourceTraitUpcastingData(upcast={:?}, vtable_vptr_slot={:?}, nested={:?})\",\n+            self.upcast_trait_ref, self.vtable_vptr_slot, self.nested\n+        )\n+    }\n+}\n+\n impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceAutoImplData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!("}, {"sha": "697e98311e2d37fa6d227bb1a018f52dbd521389", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -275,16 +275,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     return self.write_immediate(*val, dest);\n                 }\n                 // trait upcasting coercion\n-                let principal_a = data_a.principal().expect(\n-                    \"unsize_into_ptr: missing principal trait for trait upcasting coercion\",\n-                );\n-                let principal_b = data_b.principal().expect(\n-                    \"unsize_into_ptr: missing principal trait for trait upcasting coercion\",\n-                );\n-\n                 let vptr_entry_idx = self.tcx.vtable_trait_upcasting_coercion_new_vptr_slot((\n-                    principal_a.with_self_ty(*self.tcx, src_pointee_ty),\n-                    principal_b.with_self_ty(*self.tcx, src_pointee_ty),\n+                    src_pointee_ty,\n+                    dest_pointee_ty,\n                 ));\n \n                 if let Some(entry_idx) = vptr_entry_idx {"}, {"sha": "38ab26d66ac6aefe4625f7a8954df9524714a42a", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -332,6 +332,16 @@ impl<'tcx> Key for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {"}, {"sha": "3acac504cff9a41a0588459c44b85cbe100b2bd8", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -28,6 +28,7 @@ use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{\n@@ -759,48 +760,38 @@ fn vtable_trait_first_method_offset<'tcx>(\n pub fn vtable_trait_upcasting_coercion_new_vptr_slot(\n     tcx: TyCtxt<'tcx>,\n     key: (\n-        ty::PolyTraitRef<'tcx>, // trait owning vtable\n-        ty::PolyTraitRef<'tcx>, // super trait ref\n+        Ty<'tcx>, // trait object type whose trait owning vtable\n+        Ty<'tcx>, // trait object for supertrait\n     ),\n ) -> Option<usize> {\n-    let (trait_owning_vtable, super_trait_ref) = key;\n-    let super_trait_did = super_trait_ref.def_id();\n-    // FIXME: take substsref part into account here after upcasting coercion allows the same def_id occur\n-    // multiple times.\n+    let (source, target) = key;\n+    debug_assert!(matches!(&source.kind(), &ty::Dynamic(..)));\n+    debug_assert!(matches!(&target.kind(), &ty::Dynamic(..)));\n \n-    let vtable_segment_callback = {\n-        let mut vptr_offset = 0;\n-        move |segment| {\n-            match segment {\n-                VtblSegment::MetadataDSA => {\n-                    vptr_offset += COMMON_VTABLE_ENTRIES.len();\n-                }\n-                VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n-                    vptr_offset += util::count_own_vtable_entries(tcx, trait_ref);\n-                    if trait_ref.def_id() == super_trait_did {\n-                        if emit_vptr {\n-                            return ControlFlow::Break(Some(vptr_offset));\n-                        } else {\n-                            return ControlFlow::Break(None);\n-                        }\n-                    }\n+    // this has been typecked-before, so diagnostics is not really needed.\n+    let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-                    if emit_vptr {\n-                        vptr_offset += 1;\n-                    }\n-                }\n-            }\n-            ControlFlow::Continue(())\n-        }\n+    let trait_ref = ty::TraitRef {\n+        def_id: unsize_trait_did,\n+        substs: tcx.mk_substs_trait(source, &[target.into()]),\n     };\n+    let obligation = Obligation::new(\n+        ObligationCause::dummy(),\n+        ty::ParamEnv::reveal_all(),\n+        ty::Binder::dummy(ty::TraitPredicate { trait_ref, constness: hir::Constness::NotConst }),\n+    );\n \n-    if let Some(vptr_offset) =\n-        prepare_vtable_segments(tcx, trait_owning_vtable, vtable_segment_callback)\n-    {\n-        vptr_offset\n-    } else {\n-        bug!(\"Failed to find info for expected trait in vtable\");\n-    }\n+    let implsrc = tcx.infer_ctxt().enter(|infcx| {\n+        let mut selcx = SelectionContext::new(&infcx);\n+        selcx.select(&obligation).unwrap()\n+    });\n+\n+    let implsrc_traitcasting = match implsrc {\n+        Some(ImplSource::TraitUpcasting(data)) => data,\n+        _ => bug!(),\n+    };\n+\n+    implsrc_traitcasting.vtable_vptr_slot\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "f75f7b887a532a10a5e70b1d80f804f3e04b7f47", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -1483,7 +1483,9 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // why we special case object types.\n                 false\n             }\n-            super::ImplSource::AutoImpl(..) | super::ImplSource::Builtin(..) => {\n+            super::ImplSource::AutoImpl(..)\n+            | super::ImplSource::Builtin(..)\n+            | super::ImplSource::TraitUpcasting(_) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1554,6 +1556,7 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::AutoImpl(..)\n         | super::ImplSource::Param(..)\n         | super::ImplSource::Builtin(..)\n+        | super::ImplSource::TraitUpcasting(_)\n         | super::ImplSource::TraitAlias(..) => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!("}, {"sha": "0f2f5357eb7bbb440871db2afb2bc914364830ac", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -26,12 +26,13 @@ use crate::traits::Normalized;\n use crate::traits::OutputTypeParameterMismatch;\n use crate::traits::Selection;\n use crate::traits::TraitNotObjectSafe;\n+use crate::traits::VtblSegment;\n use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n     ImplSourceObjectData, ImplSourcePointeeData, ImplSourceTraitAliasData,\n-    ImplSourceUserDefinedData,\n+    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData,\n };\n use crate::traits::{ObjectCastObligation, PredicateObligation, TraitObligation};\n use crate::traits::{Obligation, ObligationCause};\n@@ -42,6 +43,7 @@ use super::SelectionCandidate::{self, *};\n use super::SelectionContext;\n \n use std::iter;\n+use std::ops::ControlFlow;\n \n impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n@@ -121,7 +123,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             TraitUpcastingUnsizeCandidate(idx) => {\n                 let data = self.confirm_trait_upcasting_unsize_candidate(obligation, idx)?;\n-                Ok(ImplSource::Builtin(data))\n+                Ok(ImplSource::TraitUpcasting(data))\n             }\n         }\n     }\n@@ -694,7 +696,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         idx: usize,\n-    ) -> Result<ImplSourceBuiltinData<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n+    ) -> Result<ImplSourceTraitUpcastingData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>>\n+    {\n         let tcx = self.tcx();\n \n         // `assemble_candidates_for_unsizing` should ensure there are no late-bound\n@@ -706,16 +709,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?source, ?target, \"confirm_trait_upcasting_unsize_candidate\");\n \n         let mut nested = vec![];\n+        let source_trait_ref;\n+        let upcast_trait_ref;\n         match (source.kind(), target.kind()) {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatiblity of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n-                let source_trait_ref = principal_a.with_self_ty(tcx, source);\n-                let target_trait_ref = util::supertraits(tcx, source_trait_ref).nth(idx).unwrap();\n-                assert_eq!(data_b.principal_def_id(), Some(target_trait_ref.def_id()));\n-                let existential_predicate = target_trait_ref.map_bound(|trait_ref| {\n+                source_trait_ref = principal_a.with_self_ty(tcx, source);\n+                upcast_trait_ref = util::supertraits(tcx, source_trait_ref).nth(idx).unwrap();\n+                assert_eq!(data_b.principal_def_id(), Some(upcast_trait_ref.def_id()));\n+                let existential_predicate = upcast_trait_ref.map_bound(|trait_ref| {\n                     ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(\n                         tcx, trait_ref,\n                     ))\n@@ -762,7 +767,37 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(),\n         };\n \n-        Ok(ImplSourceBuiltinData { nested })\n+        let vtable_segment_callback = {\n+            let mut vptr_offset = 0;\n+            move |segment| {\n+                match segment {\n+                    VtblSegment::MetadataDSA => {\n+                        vptr_offset += ty::COMMON_VTABLE_ENTRIES.len();\n+                    }\n+                    VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n+                        vptr_offset += util::count_own_vtable_entries(tcx, trait_ref);\n+                        if trait_ref == upcast_trait_ref {\n+                            if emit_vptr {\n+                                return ControlFlow::Break(Some(vptr_offset));\n+                            } else {\n+                                return ControlFlow::Break(None);\n+                            }\n+                        }\n+\n+                        if emit_vptr {\n+                            vptr_offset += 1;\n+                        }\n+                    }\n+                }\n+                ControlFlow::Continue(())\n+            }\n+        };\n+\n+        let vtable_vptr_slot =\n+            super::super::prepare_vtable_segments(tcx, source_trait_ref, vtable_segment_callback)\n+                .unwrap();\n+\n+        Ok(ImplSourceTraitUpcastingData { upcast_trait_ref, vtable_vptr_slot, nested })\n     }\n \n     fn confirm_builtin_unsize_candidate("}, {"sha": "4c03abb38ca551f466516976ca432c3a0f21e28b", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=6b1c52ff254c40b3b5f7a3e16db9cf3f8e9b35e0", "patch": "@@ -381,7 +381,8 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::Param(..)\n         | traits::ImplSource::TraitAlias(..)\n         | traits::ImplSource::DiscriminantKind(..)\n-        | traits::ImplSource::Pointee(..) => None,\n+        | traits::ImplSource::Pointee(..)\n+        | traits::ImplSource::TraitUpcasting(_) => None,\n     })\n }\n "}]}