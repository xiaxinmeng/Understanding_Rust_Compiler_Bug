{"sha": "71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "node_id": "C_kwDOAAsO6NoAKDcxYTk4ZTFhNGVjOThkMjYzOTg0ZTc4ZjBlNTRlYTBkZmEwYzc4NDY", "commit": {"author": {"name": "EdwinRy", "email": "edwinkry@gmail.com", "date": "2022-06-15T01:50:34Z"}, "committer": {"name": "EdwinRy", "email": "edwinkry@gmail.com", "date": "2022-06-15T01:50:34Z"}, "message": "Refactor path segment parameter error", "tree": {"sha": "7a65641f0a618f9313e5aebf9a46982699f28ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a65641f0a618f9313e5aebf9a46982699f28ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "html_url": "https://github.com/rust-lang/rust/commit/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/comments", "author": {"login": "EdwinRy", "id": 20026256, "node_id": "MDQ6VXNlcjIwMDI2MjU2", "avatar_url": "https://avatars.githubusercontent.com/u/20026256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwinRy", "html_url": "https://github.com/EdwinRy", "followers_url": "https://api.github.com/users/EdwinRy/followers", "following_url": "https://api.github.com/users/EdwinRy/following{/other_user}", "gists_url": "https://api.github.com/users/EdwinRy/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwinRy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwinRy/subscriptions", "organizations_url": "https://api.github.com/users/EdwinRy/orgs", "repos_url": "https://api.github.com/users/EdwinRy/repos", "events_url": "https://api.github.com/users/EdwinRy/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwinRy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "EdwinRy", "id": 20026256, "node_id": "MDQ6VXNlcjIwMDI2MjU2", "avatar_url": "https://avatars.githubusercontent.com/u/20026256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwinRy", "html_url": "https://github.com/EdwinRy", "followers_url": "https://api.github.com/users/EdwinRy/followers", "following_url": "https://api.github.com/users/EdwinRy/following{/other_user}", "gists_url": "https://api.github.com/users/EdwinRy/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwinRy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwinRy/subscriptions", "organizations_url": "https://api.github.com/users/EdwinRy/orgs", "repos_url": "https://api.github.com/users/EdwinRy/repos", "events_url": "https://api.github.com/users/EdwinRy/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwinRy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966", "html_url": "https://github.com/rust-lang/rust/commit/1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "5d56b0ffe8de9e63e86f70d29203dc60e7277284", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -196,25 +196,32 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ParenthesizedGenericArgs::Err => {\n                         let mut err = struct_span_err!(self.sess, data.span, E0214, \"{}\", msg);\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");\n-                        if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n-                            // Do not suggest going from `Trait()` to `Trait<>`\n-                            if !data.inputs.is_empty() {\n-                                // Suggest replacing `(` and `)` with `<` and `>`\n-                                // The snippet may be missing the closing `)`, skip that case\n-                                if snippet.ends_with(')') {\n-                                    if let Some(split) = snippet.find('(') {\n-                                        let trait_name = &snippet[0..split];\n-                                        let args = &snippet[split + 1..snippet.len() - 1];\n-                                        err.span_suggestion(\n-                                            data.span,\n-                                            \"use angle brackets instead\",\n-                                            format!(\"{}<{}>\", trait_name, args),\n-                                            Applicability::MaybeIncorrect,\n-                                        );\n-                                    }\n-                                }\n-                            }\n-                        };\n+                        // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n+                        if !data.inputs.is_empty() {\n+                            // Start of the span to the 1st character of 1st argument\n+                            let open_param = data.inputs_span.shrink_to_lo().to(data\n+                                .inputs\n+                                .first()\n+                                .unwrap()\n+                                .span\n+                                .shrink_to_lo());\n+                            // Last character position of last argument to the end of the span\n+                            let close_param = data\n+                                .inputs\n+                                .last()\n+                                .unwrap()\n+                                .span\n+                                .shrink_to_hi()\n+                                .to(data.inputs_span.shrink_to_hi());\n+                            err.multipart_suggestion(\n+                                &format!(\"use angle brackets instead\",),\n+                                vec![\n+                                    (open_param, String::from(\"<\")),\n+                                    (close_param, String::from(\">\")),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n                         err.emit();\n                         (\n                             self.lower_angle_bracketed_parameter_data("}, {"sha": "e0179aac27fb39f6482f5126387a9524b5fc2359", "filename": "src/test/ui/error-codes/E0214.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0214.stderr?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/E0214.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec![\"foo\"];\n-   |            ^^^^^^^^^\n-   |            |\n-   |            only `Fn` traits may use parentheses\n-   |            help: use angle brackets instead: `Vec<&str>`\n+   |            ^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let v: Vec<&str> = vec![\"foo\"];\n+   |               ~    ~\n \n error: aborting due to previous error\n "}, {"sha": "1a91f5e04dbceb46e3831dbff8dbf5fa0bfb0d8c", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-23589.rs:2:12\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |            ^^^^^^^^^\n-   |            |\n-   |            only `Fn` traits may use parentheses\n-   |            help: use angle brackets instead: `Vec<&str>`\n+   |            ^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let v: Vec<&str> = vec!['1', '2'];\n+   |               ~    ~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29"}, {"sha": "fe2464b3b8115e65a851fd4e53cd3fb43cf38b30", "filename": "src/test/ui/proc-macro/issue-66286.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-66286.stderr?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-66286.rs:8:22\n    |\n LL | pub extern fn foo(_: Vec(u32)) -> u32 {\n-   |                      ^^^^^^^^\n-   |                      |\n-   |                      only `Fn` traits may use parentheses\n-   |                      help: use angle brackets instead: `Vec<u32>`\n+   |                      ^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL | pub extern fn foo(_: Vec<u32>) -> u32 {\n+   |                         ~   ~\n \n error: aborting due to previous error\n "}, {"sha": "2bf072ef52175eb46a2b95de658956ccbe54ee52", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -10,10 +10,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:19\n    |\n LL |     let foo: i32::from_be(num);\n-   |                   ^^^^^^^^^^^^\n-   |                   |\n-   |                   only `Fn` traits may use parentheses\n-   |                   help: use angle brackets instead: `from_be<num>`\n+   |                   ^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let foo: i32::from_be<num>;\n+   |                          ~   ~\n \n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14"}, {"sha": "71c357865fed92e25dc235b2e74566723339a805", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -29,6 +29,11 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n    |\n LL |     0: u8(\u0163\n    |        ^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     0: u8<\u0163>\n+   |          ~ +\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/issue-91268.rs:9:11"}, {"sha": "4df404e8198fa32c07a38a1656a1a562c9038f09", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-used-on-struct-3.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a98e1a4ec98d263984e78f0e54ea0dfa0c7846/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-used-on-struct-3.stderr?ref=71a98e1a4ec98d263984e78f0e54ea0dfa0c7846", "patch": "@@ -2,10 +2,12 @@ error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unboxed-closure-sugar-used-on-struct-3.rs:14:13\n    |\n LL |     let b = Bar::(isize, usize)::new(); // OK too (for the parser)\n-   |             ^^^^^^^^^^^^^^^^^^^\n-   |             |\n-   |             only `Fn` traits may use parentheses\n-   |             help: use angle brackets instead: `Bar::<isize, usize>`\n+   |             ^^^^^^^^^^^^^^^^^^^ only `Fn` traits may use parentheses\n+   |\n+help: use angle brackets instead\n+   |\n+LL |     let b = Bar::<isize, usize>::new(); // OK too (for the parser)\n+   |                  ~            ~\n \n error: aborting due to previous error\n "}]}