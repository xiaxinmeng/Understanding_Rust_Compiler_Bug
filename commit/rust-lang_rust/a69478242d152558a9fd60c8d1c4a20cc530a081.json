{"sha": "a69478242d152558a9fd60c8d1c4a20cc530a081", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OTQ3ODI0MmQxNTI1NThhOWZkNjBjOGQxYzRhMjBjYzUzMGEwODE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-08T13:57:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-08T13:57:32Z"}, "message": "lifetime elision: add non-conforming-to-fn tests.", "tree": {"sha": "834fca5204ca37726ac7546e5ed901249b031b0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/834fca5204ca37726ac7546e5ed901249b031b0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69478242d152558a9fd60c8d1c4a20cc530a081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69478242d152558a9fd60c8d1c4a20cc530a081", "html_url": "https://github.com/rust-lang/rust/commit/a69478242d152558a9fd60c8d1c4a20cc530a081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69478242d152558a9fd60c8d1c4a20cc530a081/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a2cbdfd33b02be90ab1616e1b706142fa5d498", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a2cbdfd33b02be90ab1616e1b706142fa5d498", "html_url": "https://github.com/rust-lang/rust/commit/43a2cbdfd33b02be90ab1616e1b706142fa5d498"}], "stats": {"total": 2195, "additions": 2195, "deletions": 0}, "files": [{"sha": "d3aeb73b9b7c23d70707fa94137ccb9047584486", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:15:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:23:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:29:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:35:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:41:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:47:62\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "84b91ba08b75dec55284cdeed5d27895410e00b8", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,54 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct<'a> { data: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    // Test using `&self` sugar:\n+\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+\n+    async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR cannot infer an appropriate lifetime\n+        //~| ERROR missing lifetime specifier\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "56595d008a6bf6389743041f04149f59d7e8ee63", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,159 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:15:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:23:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:29:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:35:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:41:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lt-ref-self-async.rs:47:62\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:15:30\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                              |\n+   |                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:23\n+  --> $DIR/lt-ref-self-async.rs:15:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 + '_ {\n+   |                                          ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:23:36\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                    ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                    |\n+   |                                    ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 23:29\n+  --> $DIR/lt-ref-self-async.rs:23:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 + '_ {\n+   |                                                ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:29:45\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 29:37\n+  --> $DIR/lt-ref-self-async.rs:29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:35:45\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 35:37\n+  --> $DIR/lt-ref-self-async.rs:35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:41:54\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 41:45\n+  --> $DIR/lt-ref-self-async.rs:41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/lt-ref-self-async.rs:47:50\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                  ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                  |\n+   |                                                  ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 47:41\n+  --> $DIR/lt-ref-self-async.rs:47:41\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                         ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 47:41\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                              ^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "00e16cd7f99fbdb40b0d15b9924401e438479c8d", "filename": "src/test/ui/self/elision/multiple-ref-self-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:24:74\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:30:84\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:36:84\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:42:93\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:48:93\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3cc146c5dc7b2c1e4c7795bde2aef3ab7ce7fce2", "filename": "src/test/ui/self/elision/multiple-ref-self-async.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,55 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using multiple `&Self`:\n+\n+    async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "2a89ed3feba62fd17c274d82657897acbaa11e60", "filename": "src/test/ui/self/elision/multiple-ref-self-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:24:74\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:30:84\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:36:84\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:42:93\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/multiple-ref-self-async.rs:48:93\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:24:63\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                               ^          --- this return type evaluates to the `'static` lifetime...\n+   |                                                               |\n+   |                                                               ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 24:48\n+  --> $DIR/multiple-ref-self-async.rs:24:48\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+   |                                                ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 24:48\n+   |\n+LL |     async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 + '_ {\n+   |                                                                          ^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:30:72\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                        |\n+   |                                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 30:56\n+  --> $DIR/multiple-ref-self-async.rs:30:56\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                        ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 30:56\n+   |\n+LL |     async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:36:72\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                        |\n+   |                                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 36:56\n+  --> $DIR/multiple-ref-self-async.rs:36:56\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+   |                                                        ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 36:56\n+   |\n+LL |     async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:42:81\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                 |\n+   |                                                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 42:64\n+  --> $DIR/multiple-ref-self-async.rs:42:64\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 42:64\n+   |\n+LL |     async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/multiple-ref-self-async.rs:48:81\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                 |\n+   |                                                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 48:64\n+  --> $DIR/multiple-ref-self-async.rs:48:64\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+   |                                                                ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 48:64\n+   |\n+LL |     async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                             ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "7e47b3794035f49bfbac43a02efd581361905f54", "filename": "src/test/ui/self/elision/ref-alias-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:20:50\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:26:59\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:32:59\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:38:68\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:44:68\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "224151b9b0c55281037b083edae0e01b636aa547", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,51 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+    //\n+    // FIXME. We currently fail to recognize this as the self type, which\n+    // feels like a bug.\n+\n+    async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "a3250562c6ffffc9edfd8d29f6792af7529522ab", "filename": "src/test/ui/self/elision/ref-alias-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:20:50\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:26:59\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:32:59\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                                           ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:38:68\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-alias-async.rs:44:68\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:20:38\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                      |\n+   |                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 20:30\n+  --> $DIR/ref-alias-async.rs:20:30\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+   |                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 20:30\n+   |\n+LL |     async fn ref_Alias(self: &Alias, f: &u32) -> &u32 + '_ {\n+   |                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:26:47\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                               ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                               |\n+   |                                               ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 26:38\n+  --> $DIR/ref-alias-async.rs:26:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 26:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                           ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:32:47\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                               ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                               |\n+   |                                               ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 32:38\n+  --> $DIR/ref-alias-async.rs:32:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                           ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:38:56\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                        |\n+   |                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 38:46\n+  --> $DIR/ref-alias-async.rs:38:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-alias-async.rs:44:56\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                        |\n+   |                                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 44:46\n+  --> $DIR/ref-alias-async.rs:44:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                    ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "25c8bf652d84b35867fd1daa457920f5918b07fd", "filename": "src/test/ui/self/elision/ref-assoc-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:21:77\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:27:86\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:33:86\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:39:95\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:45:95\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "380937e61ca3f8c4ae7a8ac9578afcbea38916ef", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,52 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "c2e893a3f58bff6e1a2338f1d2c4e17f54701276", "filename": "src/test/ui/self/elision/ref-assoc-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:21:77\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:27:86\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:33:86\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:39:95\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-assoc-async.rs:45:95\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:21:65\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                 |\n+   |                                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 21:34\n+  --> $DIR/ref-assoc-async.rs:21:34\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+   |                                  ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:34\n+   |\n+LL |     async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 + '_ {\n+   |                                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:27:74\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                          |\n+   |                                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 27:42\n+  --> $DIR/ref-assoc-async.rs:27:42\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:42\n+   |\n+LL |     async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 + '_ {\n+   |                                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:33:74\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                          |\n+   |                                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 33:42\n+  --> $DIR/ref-assoc-async.rs:33:42\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+   |                                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:42\n+   |\n+LL |     async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 + '_ {\n+   |                                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:39:83\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                   |\n+   |                                                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 39:50\n+  --> $DIR/ref-assoc-async.rs:39:50\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                  ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:50\n+   |\n+LL |     async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                               ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-assoc-async.rs:45:83\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                                                   |\n+   |                                                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 45:50\n+  --> $DIR/ref-assoc-async.rs:45:50\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+   |                                                  ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 45:50\n+   |\n+LL |     async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 + '_ {\n+   |                                                                                               ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "1026a0b492f34b2b76f1054086c4440fb4946b6f", "filename": "src/test/ui/self/elision/ref-mut-alias-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:17:54\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:23:63\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:29:63\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:35:72\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:41:72\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ce66313bddd125228f0bed99864e1383666d36bb", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,48 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "678bf7451860682918d5215e70af352a439748ad", "filename": "src/test/ui/self/elision/ref-mut-alias-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:17:54\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:23:63\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:29:63\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                               ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:35:72\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-alias-async.rs:41:72\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:17:42\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                          |\n+   |                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 17:30\n+  --> $DIR/ref-mut-alias-async.rs:17:30\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+   |                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 17:30\n+   |\n+LL |     async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 + '_ {\n+   |                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:23:51\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                   |\n+   |                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 23:38\n+  --> $DIR/ref-mut-alias-async.rs:23:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:38\n+   |\n+LL |     async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                               ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:29:51\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                                   ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                   |\n+   |                                                   ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 29:38\n+  --> $DIR/ref-mut-alias-async.rs:29:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+   |                                      ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:38\n+   |\n+LL |     async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 + '_ {\n+   |                                                               ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:35:60\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                            ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                            |\n+   |                                                            ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 35:46\n+  --> $DIR/ref-mut-alias-async.rs:35:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:46\n+   |\n+LL |     async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                        ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-alias-async.rs:41:60\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                                            ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                            |\n+   |                                                            ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 41:46\n+  --> $DIR/ref-mut-alias-async.rs:41:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+   |                                              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:46\n+   |\n+LL |     async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 + '_ {\n+   |                                                                        ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "35969659b19d173e41976ff53ba5bdd4163fd4d5", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,51 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:15:46\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:23:52\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:29:61\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:35:61\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:41:70\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:47:70\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "7d143e1b35e459192b2731cbd1224555af6a2b8b", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,54 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut self` sugar:\n+\n+    async fn ref_self(&mut self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    // Test using `&mut Self` explicitly:\n+\n+    async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "15f5f8dd0dd48e4e9ee15d356fa401276214afca", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,159 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:15:46\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                              ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:23:52\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:29:61\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:35:61\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:41:70\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-self-async.rs:47:70\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:15:34\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                  ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                  |\n+   |                                  ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:23\n+  --> $DIR/ref-mut-self-async.rs:15:23\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:23\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 + '_ {\n+   |                                              ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:23:40\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                        |\n+   |                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 23:29\n+  --> $DIR/ref-mut-self-async.rs:23:29\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 23:29\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 + '_ {\n+   |                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:29:49\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 29:37\n+  --> $DIR/ref-mut-self-async.rs:29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 29:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:35:49\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 35:37\n+  --> $DIR/ref-mut-self-async.rs:35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 35:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:41:58\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 41:45\n+  --> $DIR/ref-mut-self-async.rs:41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 41:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-self-async.rs:47:58\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 47:45\n+  --> $DIR/ref-mut-self-async.rs:47:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 47:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                      ^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "a70dcf5b0ad19a93ad8e0e9c55181e0805ab7efd", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:15:56\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:27:65\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:33:74\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:39:74\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "3ba9c95d35ff4c9aba8cf5eae91ee59b2e88fd2b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,46 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut Struct` explicitly:\n+\n+    async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "fd2581eba9434b956684a441955fec380a077d9f", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:15:56\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                                        ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:27:65\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:33:74\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-mut-struct-async.rs:39:74\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:15:44\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                            ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                            |\n+   |                                            ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:31\n+  --> $DIR/ref-mut-struct-async.rs:15:31\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:31\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 + '_ {\n+   |                                                        ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:21:53\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                     ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                     |\n+   |                                                     ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 21:39\n+  --> $DIR/ref-mut-struct-async.rs:21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                                 ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:27:53\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                     ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                     |\n+   |                                                     ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 27:39\n+  --> $DIR/ref-mut-struct-async.rs:27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                                 ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:33:62\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                              |\n+   |                                                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 33:47\n+  --> $DIR/ref-mut-struct-async.rs:33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                          ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-mut-struct-async.rs:39:62\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                              |\n+   |                                                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 39:47\n+  --> $DIR/ref-mut-struct-async.rs:39:47\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:47\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                          ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ae17ba9839d224c63467498628df2fa78fe9b4c0", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,59 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:24:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:32:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:38:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:44:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:50:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:56:66\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:62:69\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                                     ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "6cca5494ff784a69cfbb2c622074b0215f652067", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,69 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using `&self` sugar:\n+\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "eab77cfacd956f5da31c58c75d436add9349dbb0", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,185 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:24:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:32:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:38:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:44:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:50:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:56:66\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-self-async.rs:62:69\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                                     ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:24:30\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                              ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                              |\n+   |                              ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 24:23\n+  --> $DIR/ref-self-async.rs:24:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 24:23\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 + '_ {\n+   |                                          ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:32:36\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                    ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                    |\n+   |                                    ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 32:29\n+  --> $DIR/ref-self-async.rs:32:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 32:29\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 + '_ {\n+   |                                                ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:38:45\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 38:37\n+  --> $DIR/ref-self-async.rs:38:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 38:37\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:44:45\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                             ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                             |\n+   |                                             ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 44:37\n+  --> $DIR/ref-self-async.rs:44:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 44:37\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 + '_ {\n+   |                                                         ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:50:54\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 50:45\n+  --> $DIR/ref-self-async.rs:50:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 50:45\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:56:54\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 56:45\n+  --> $DIR/ref-self-async.rs:56:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                             ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 56:45\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-self-async.rs:62:58\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                          ^          --- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 62:44\n+  --> $DIR/ref-self-async.rs:62:44\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                            ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 62:44\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 + '_ {\n+   |                                                                     ^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "b4f12d7057db425f510613f3d906edfe69811424", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:15:52\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:21:61\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:27:61\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:33:70\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:39:66\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "cd0f5a2a6058d6714a72daf286f2a9bd48811324", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,46 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&Struct` explicitly:\n+\n+    async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+\n+    async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+        //~^ ERROR missing lifetime specifier\n+        //~| ERROR cannot infer an appropriate lifetime\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "966e102fa5f2764372e9e4561795adbb9defe3ec", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69478242d152558a9fd60c8d1c4a20cc530a081/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=a69478242d152558a9fd60c8d1c4a20cc530a081", "patch": "@@ -0,0 +1,133 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:15:52\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                                    ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:21:61\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:27:61\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:33:70\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                      ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/ref-struct-async.rs:39:66\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                  ^\n+   |\n+   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:15:40\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                        ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                        |\n+   |                                        ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 15:31\n+  --> $DIR/ref-struct-async.rs:15:31\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:31\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 + '_ {\n+   |                                                    ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:21:49\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 21:39\n+  --> $DIR/ref-struct-async.rs:21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 21:39\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:27:49\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                 ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                 |\n+   |                                                 ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 27:39\n+  --> $DIR/ref-struct-async.rs:27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                       ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 27:39\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 + '_ {\n+   |                                                             ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:33:58\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                          ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                          |\n+   |                                                          ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 33:47\n+  --> $DIR/ref-struct-async.rs:33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                               ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 33:47\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                      ^^^^^^^^^\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/ref-struct-async.rs:39:54\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                      ^           ---- this return type evaluates to the `'static` lifetime...\n+   |                                                      |\n+   |                                                      ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 39:43\n+  --> $DIR/ref-struct-async.rs:39:43\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                           ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 39:43\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 + '_ {\n+   |                                                                  ^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}]}