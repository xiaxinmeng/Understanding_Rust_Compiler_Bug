{"sha": "4745cec7f3a016d48c86c67bb6b41b3d434cd28e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDVjZWM3ZjNhMDE2ZDQ4Yzg2YzY3YmI2YjQxYjNkNDM0Y2QyOGU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-17T14:07:49Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-17T14:07:49Z"}, "message": "Re-use nightly channel macro", "tree": {"sha": "feff414f913551092f5fd8e807b0e248d606d5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feff414f913551092f5fd8e807b0e248d606d5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4745cec7f3a016d48c86c67bb6b41b3d434cd28e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzewDwACgkQKTh7Wnqv\nhj8sPwgAqeGUEkXcHHgVdSPYXbPmKZDN4GWlWkwYWaQM/c2uAYCdHfqFtB3RLLWA\npZkDH/7XCfb4imBakQMPS00+B2vuPa3l6MYnbGFgnARparGM/+yaqrkhugiFFXb+\nl8w/2lX0TZhjCM1XYupzGarCr7qIrVX7HNfCZUUIWoMOyQ/VoU49787Sj+FElO8v\nMM2j37YZrqG0FIJI9attHqrD7noRp4xidIlFUWAttp2T5hGAOXlKJEi/J7OIxZ13\nSCgyxmjNCYDIbhE8Vy+Zt4Elz3guTbBqb8nW7NvQfz8yUYbUpcM78XoPR/Z7P5EZ\nE7J5zJat59E6h9aRKanBzRQEuKovUg==\n=TqE2\n-----END PGP SIGNATURE-----", "payload": "tree feff414f913551092f5fd8e807b0e248d606d5d4\nparent fd22c27c47a71cff2f92e61b11b3344ed9e50d25\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558102069 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558102069 +0200\n\nRe-use nightly channel macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4745cec7f3a016d48c86c67bb6b41b3d434cd28e", "html_url": "https://github.com/rust-lang/rust/commit/4745cec7f3a016d48c86c67bb6b41b3d434cd28e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4745cec7f3a016d48c86c67bb6b41b3d434cd28e/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "html_url": "https://github.com/rust-lang/rust/commit/fd22c27c47a71cff2f92e61b11b3344ed9e50d25"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "26cd672f83ab64b2c18af9b4b924c842469586ca", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4745cec7f3a016d48c86c67bb6b41b3d434cd28e/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4745cec7f3a016d48c86c67bb6b41b3d434cd28e/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=4745cec7f3a016d48c86c67bb6b41b3d434cd28e", "patch": "@@ -60,6 +60,7 @@ impl ConfigType for IgnoreList {\n /// If we're being built by cargo (e.g., `cargo +nightly install rustfmt-nightly`),\n /// `CFG_RELEASE_CHANNEL` is not set. As we only support being built against the\n /// nightly compiler when installed from crates.io, default to nightly mode.\n+#[macro_export]\n macro_rules! is_nightly_channel {\n     () => {\n         option_env!(\"CFG_RELEASE_CHANNEL\").map_or(true, |c| c == \"nightly\" || c == \"dev\")"}, {"sha": "d3e1813097775e03f87fe14f12eb15bf68ff29e7", "filename": "src/test/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4745cec7f3a016d48c86c67bb6b41b3d434cd28e/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4745cec7f3a016d48c86c67bb6b41b3d434cd28e/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=4745cec7f3a016d48c86c67bb6b41b3d434cd28e", "patch": "@@ -14,6 +14,7 @@ use crate::formatting::{ReportedErrors, SourceFile};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n use crate::{FormatReport, FormatReportFormatterBuilder, Input, Session};\n+use crate::is_nightly_channel;\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n const CONFIGURATIONS_FILE_NAME: &str = \"Configurations.md\";\n@@ -260,7 +261,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n fn idempotence_tests() {\n     run_test_with(&TestSetting::default(), || {\n         // these tests require nightly\n-        if !is_nightly() {\n+        if !is_nightly_channel!() {\n             return;\n         }\n         // Get all files in the tests/target directory.\n@@ -278,7 +279,7 @@ fn idempotence_tests() {\n #[test]\n fn self_tests() {\n     // Issue-3443: these tests require nightly\n-    if !is_nightly() {\n+    if !is_nightly_channel!() {\n         return;\n     }\n     let mut files = get_test_files(Path::new(\"tests\"), false);\n@@ -313,11 +314,6 @@ fn self_tests() {\n     );\n }\n \n-fn is_nightly() -> bool {\n-    let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\");\n-    release_channel.is_none() || release_channel == Some(\"nightly\")\n-}\n-\n #[test]\n fn stdin_formatting_smoke_test() {\n     let input = Input::Text(\"fn main () {}\".to_owned());\n@@ -432,7 +428,7 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n \n     for file_name in files {\n         let sig_comments = read_significant_comments(&file_name);\n-        if sig_comments.contains_key(\"unstable\") && !is_nightly() {\n+        if sig_comments.contains_key(\"unstable\") && !is_nightly_channel!() {\n             debug!(\n                 \"Skipping '{}' because it requires unstable \\\n                  features which are only available on nightly...\","}]}