{"sha": "d02543a453f0381c92339301fc86bcc08c70abcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMjU0M2E0NTNmMDM4MWM5MjMzOTMwMWZjODZiY2MwOGM3MGFiY2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-08T18:44:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T18:44:23Z"}, "message": "fmt, tweak messages and bless", "tree": {"sha": "586abf252cb5096afc9b81d1c7bd82b2fc4f91c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586abf252cb5096afc9b81d1c7bd82b2fc4f91c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d02543a453f0381c92339301fc86bcc08c70abcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d02543a453f0381c92339301fc86bcc08c70abcd", "html_url": "https://github.com/rust-lang/rust/commit/d02543a453f0381c92339301fc86bcc08c70abcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d02543a453f0381c92339301fc86bcc08c70abcd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5efb68a24b66a21b7eca055b9e8867eeaf61366", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5efb68a24b66a21b7eca055b9e8867eeaf61366", "html_url": "https://github.com/rust-lang/rust/commit/f5efb68a24b66a21b7eca055b9e8867eeaf61366"}], "stats": {"total": 158, "additions": 88, "deletions": 70}, "files": [{"sha": "f4fe0bc3d3f0f6f88fcde59ce0942f1c2ff8fc06", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::{Pos, Span, def_id::DefId};\n-use std::{any::Any, env, fmt};\n+use std::{any::Any, fmt};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n@@ -326,7 +326,10 @@ pub enum UndefinedBehaviorInfo {\n     /// An enum discriminant was set to a value which was outside the range of valid values.\n     InvalidDiscriminant(ScalarMaybeUndef),\n     /// A slice/array index projection went out-of-bounds.\n-    BoundsCheckFailed { len: u64, index: u64 },\n+    BoundsCheckFailed {\n+        len: u64,\n+        index: u64,\n+    },\n     /// Something was divided by 0 (x / 0).\n     DivisionByZero,\n     /// Something was \"remainded\" by 0 (x % 0).\n@@ -395,16 +398,14 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 \"reading a null-terminated string starting at {:?} with no null found before end of allocation\",\n                 p,\n             ),\n-            PointerUseAfterFree(a) => write!(\n-                f,\n-                \"pointer to allocation {:?} was dereferenced after allocation got freed\",\n-                a\n-            ),\n+            PointerUseAfterFree(a) => {\n+                write!(f, \"pointer to {:?} was dereferenced after this allocation got freed\", a)\n+            }\n             InvalidNullPointerUsage => write!(f, \"invalid use of NULL pointer\"),\n             PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n                 f,\n                 \"{} failed: pointer must be in-bounds at offset {}, \\\n-                           but is outside bounds of allocation {} which has size {}\",\n+                           but is outside bounds of {} which has size {}\",\n                 msg,\n                 ptr.offset.bytes(),\n                 ptr.alloc_id,\n@@ -416,16 +417,23 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 has.bytes(),\n                 required.bytes()\n             ),\n-            WriteToReadOnly(a) => write!(f, \"writing to read-only allocation {:?}\", a),\n+            WriteToReadOnly(a) => write!(f, \"writing to {:?} which is read-only\", a),\n             InvalidFunctionPointer(p) => {\n                 write!(f, \"using {:?} as function pointer but it does not point to a function\", p)\n             }\n-            DerefFunctionPointer(a) => write!(f, \"accessing data behind function pointer allocation {:?}\", a),\n+            DerefFunctionPointer(a) => write!(f, \"accessing {:?} which contains a function\", a),\n             ValidationFailure(ref err) => write!(f, \"type validation failed: {}\", err),\n             InvalidBool(b) => write!(f, \"interpreting an invalid 8-bit value as a bool: {}\", b),\n             InvalidChar(c) => write!(f, \"interpreting an invalid 32-bit value as a char: {}\", c),\n-            InvalidUndefBytes(Some(p)) => write!(f, \"reading uninitialized memory at {:?}, but this operation requires initialized memory\", p),\n-            InvalidUndefBytes(None) => write!(f, \"using uninitialized data, but this operation requires initialized memory\"),\n+            InvalidUndefBytes(Some(p)) => write!(\n+                f,\n+                \"reading uninitialized memory at {:?}, but this operation requires initialized memory\",\n+                p\n+            ),\n+            InvalidUndefBytes(None) => write!(\n+                f,\n+                \"using uninitialized data, but this operation requires initialized memory\"\n+            ),\n             DeadLocal => write!(f, \"accessing a dead local variable\"),\n             ReadFromReturnPlace => write!(f, \"tried to read from the return place\"),\n         }\n@@ -472,21 +480,18 @@ impl fmt::Debug for UnsupportedOpInfo {\n             ConstPropUnsupported(ref msg) => {\n                 write!(f, \"Constant propagation encountered an unsupported situation: {}\", msg)\n             }\n-            ReadForeignStatic(did) => write!(f, \"tried to read from foreign (extern) static {:?}\", did),\n+            ReadForeignStatic(did) => {\n+                write!(f, \"tried to read from foreign (extern) static {:?}\", did)\n+            }\n             NoMirFor(did) => write!(f, \"could not load MIR for {:?}\", did),\n             ModifiedStatic => write!(\n                 f,\n                 \"tried to modify a static's initial value from another static's \\\n                     initializer\"\n             ),\n \n-            ReadPointerAsBytes => write!(\n-                f,\n-                \"unable to turn this pointer into raw bytes\",\n-            ),\n-            ReadBytesAsPointer => {\n-                write!(f, \"unable to turn these bytes into a pointer\")\n-            }\n+            ReadPointerAsBytes => write!(f, \"unable to turn this pointer into raw bytes\",),\n+            ReadBytesAsPointer => write!(f, \"unable to turn these bytes into a pointer\"),\n         }\n     }\n }"}, {"sha": "0244a75e8d956dff8d169d81c1efe3ea1ac50777", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -215,7 +215,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         if ptr.offset.bytes() != 0 {\n-            throw_ub_format!(\"reallocating {:?} which does not point to the beginning of an object\", ptr);\n+            throw_ub_format!(\n+                \"reallocating {:?} which does not point to the beginning of an object\",\n+                ptr\n+            );\n         }\n \n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n@@ -251,7 +254,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         trace!(\"deallocating: {}\", ptr.alloc_id);\n \n         if ptr.offset.bytes() != 0 {\n-            throw_ub_format!(\"deallocating {:?} which does not point to the beginning of an object\", ptr);\n+            throw_ub_format!(\n+                \"deallocating {:?} which does not point to the beginning of an object\",\n+                ptr\n+            );\n         }\n \n         let (alloc_kind, mut alloc) = match self.alloc_map.remove(&ptr.alloc_id) {\n@@ -260,22 +266,30 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Deallocating static memory -- always an error\n                 return Err(match self.tcx.alloc_map.lock().get(ptr.alloc_id) {\n                     Some(GlobalAlloc::Function(..)) => err_ub_format!(\"deallocating a function\"),\n-                    Some(GlobalAlloc::Static(..)) | Some(GlobalAlloc::Memory(..)) =>\n-                        err_ub_format!(\"deallocating static memory\"),\n+                    Some(GlobalAlloc::Static(..)) | Some(GlobalAlloc::Memory(..)) => {\n+                        err_ub_format!(\"deallocating static memory\")\n+                    }\n                     None => err_ub!(PointerUseAfterFree(ptr.alloc_id)),\n                 }\n                 .into());\n             }\n         };\n \n         if alloc_kind != kind {\n-            throw_ub_format!(\"deallocating `{:?}` memory using `{:?}` deallocation operation\", alloc_kind, kind);\n+            throw_ub_format!(\n+                \"deallocating `{:?}` memory using `{:?}` deallocation operation\",\n+                alloc_kind,\n+                kind\n+            );\n         }\n         if let Some((size, align)) = old_size_and_align {\n             if size != alloc.size || align != alloc.align {\n                 throw_ub_format!(\n                     \"incorrect layout on deallocation: allocation has size {} and alignment {}, but gave size {} and alignment {}\",\n-                    alloc.size.bytes(), alloc.align.bytes(), size.bytes(), align.bytes(),\n+                    alloc.size.bytes(),\n+                    alloc.align.bytes(),\n+                    size.bytes(),\n+                    align.bytes(),\n                 )\n             }\n         }\n@@ -370,7 +384,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // It is sufficient to check this for the end pointer. The addition\n                 // checks for overflow.\n                 let end_ptr = ptr.offset(size, self)?;\n-                if end_ptr.offset > allocation_size { // equal is okay!\n+                if end_ptr.offset > allocation_size {\n+                    // equal is okay!\n                     throw_ub!(PointerOutOfBounds { ptr: end_ptr.erase_tag(), msg, allocation_size })\n                 }\n                 // Test align. Check this last; if both bounds and alignment are violated"}, {"sha": "96f44256ff96d871249cdfd13a59b5be8f49ef36", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -356,18 +356,16 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     err_ub!(InvalidNullPointerUsage) => {\n                         throw_validation_failure!(format_args!(\"a NULL {}\", kind), self.path)\n                     }\n-                    err_ub!(AlignmentCheckFailed { required, has }) => {\n-                        throw_validation_failure!(\n-                            format_args!(\n-                                \"an unaligned {} \\\n+                    err_ub!(AlignmentCheckFailed { required, has }) => throw_validation_failure!(\n+                        format_args!(\n+                            \"an unaligned {} \\\n                                     (required {} byte alignment but found {})\",\n-                                kind,\n-                                required.bytes(),\n-                                has.bytes()\n-                            ),\n-                            self.path\n-                        )\n-                    }\n+                            kind,\n+                            required.bytes(),\n+                            has.bytes()\n+                        ),\n+                        self.path\n+                    ),\n                     err_unsup!(ReadBytesAsPointer) => throw_validation_failure!(\n                         format_args!(\"a dangling {} (created from integer)\", kind),\n                         self.path"}, {"sha": "c37298679e1e11c2d6a3d7ae8f0a11873bb82a85", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -12,7 +12,7 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn this pointer into raw bytes\n    |\n    = note: `#[deny(const_err)]` on by default\n \n@@ -22,15 +22,15 @@ error: any use of this value will cause an error\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:34:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn this pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:37:5\n@@ -54,23 +54,23 @@ error: any use of this value will cause an error\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:46:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:49:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn this pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:52:5\n@@ -94,7 +94,7 @@ error: any use of this value will cause an error\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                             |\n-   |                                             a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                             unable to turn this pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:61:5\n@@ -110,39 +110,39 @@ error: any use of this value will cause an error\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n-   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                               unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:67:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                               |\n-   |                                               a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                               unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:70:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n-   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                       unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:73:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:76:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn this pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:79:5\n@@ -158,31 +158,31 @@ error: any use of this value will cause an error\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:85:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                       |\n-   |                                       a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                       unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:91:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn this pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:94:5\n@@ -198,15 +198,15 @@ error: any use of this value will cause an error\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:100:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                         |\n-   |                                         a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                         unable to turn this pointer into raw bytes\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:103:5\n@@ -222,15 +222,15 @@ error: any use of this value will cause an error\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn this pointer into raw bytes\n \n error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:109:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                                           |\n-   |                                           a raw memory access tried to access part of a pointer value as raw bytes\n+   |                                           unable to turn this pointer into raw bytes\n \n error: aborting due to 29 previous errors\n "}, {"sha": "3b24ef3dbe2ea78e1656dd4d5873fc2dfddfe7e6", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -30,15 +30,15 @@ error: any use of this value will cause an error\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n-   |                          a memory access tried to interpret some bytes as a pointer\n+   |                          unable to turn these bytes into a pointer\n \n error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:17:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n    | -------------------------^^^^^^^^^^^^^^^^^^^---\n    |                          |\n-   |                          a memory access tried to interpret some bytes as a pointer\n+   |                          unable to turn these bytes into a pointer\n \n error: aborting due to 5 previous errors\n "}, {"sha": "798f130a4baf6fb1bfa2c39afd888d2da3afcad3", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const X: u64 = *wat(42);\n    | ---------------^^^^^^^^-\n    |                |\n-   |                dangling pointer was dereferenced\n+   |                pointer to alloc2 was dereferenced after this allocation got freed\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "adad1b4f7fafe3006be2b5a38a7c446f0d20983d", "filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -13,7 +13,7 @@ LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n LL | |     // Use address-of-element for pointer arithmetic. This could wrap around to NULL!\n LL | |     let out_of_bounds_ptr = &ptr[255];\n-   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of allocation 8 which has size 1\n+   | |                             ^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset 256, but is outside bounds of alloc8 which has size 1\n LL | |     mem::transmute(out_of_bounds_ptr)\n LL | | } };\n    | |____-"}, {"sha": "0200bfe9f08f870f1fbdf43431ec9d25b8f16408", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -6,7 +6,7 @@\n use std::mem;\n \n // normalize-stderr-test \"offset \\d+\" -> \"offset N\"\n-// normalize-stderr-test \"allocation \\d+\" -> \"allocation N\"\n+// normalize-stderr-test \"alloc\\d+\" -> \"allocN\"\n // normalize-stderr-test \"size \\d+\" -> \"size N\"\n \n #[repr(C)]"}, {"sha": "cf51b8765fc6945d8fdcee7230a806178f0035ab", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -192,7 +192,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:125:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocation N which has size N\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N\n \n error: aborting due to 24 previous errors\n "}, {"sha": "0e213555052c85f683416846a706c2754b3185f3", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -5,7 +5,7 @@ LL | / const FOO: &() = {\n LL | |     let y = ();\n LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n LL | | };\n-   | |__^ type validation failed: encountered dangling pointer in final constant\n+   | |__^ encountered dangling pointer in final constant\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "4d4c2876c4598afad2d7ddd75fa4853c1ca724c1", "filename": "src/test/ui/consts/dangling_raw_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling_raw_ptr.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -5,7 +5,7 @@ LL | / const FOO: *const u32 = {\n LL | |     let x = 42;\n LL | |     &x\n LL | | };\n-   | |__^ type validation failed: encountered dangling pointer in final constant\n+   | |__^ encountered dangling pointer in final constant\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "c7e902132e91ad5a3d29d4c3f7378ab194383b2d", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -16,7 +16,7 @@ error: any use of this value will cause an error\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n-   |     tried to call a function with ABI C using caller ABI Rust\n+   |     calling a function with ABI C using caller ABI Rust\n    |     inside call to `call_rust_fn` at $DIR/abi-mismatch.rs:13:17\n ...\n LL | const VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });"}, {"sha": "8456e8ec6870dcd4c0d2204b8e8ac737bfb662d7", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -11,7 +11,7 @@ LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n-   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ tried to modify constant memory\n+   | |         ^^^^^^^^^^^^^^^^^^^^^^^^ writing to alloc1 which is read-only\n LL | |     }\n LL | | };\n    | |__-"}, {"sha": "63f57ea19928a57d2a873d07a7287a8edd34c24d", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d02543a453f0381c92339301fc86bcc08c70abcd/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=d02543a453f0381c92339301fc86bcc08c70abcd", "patch": "@@ -26,7 +26,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           a memory access tried to interpret some bytes as a pointer\n+   |           unable to turn these bytes into a pointer\n    |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:28:14\n    | \n   ::: $DIR/offset_from_ub.rs:26:1\n@@ -81,7 +81,7 @@ error: any use of this value will cause an error\n LL |           intrinsics::ptr_offset_from(self, origin)\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |           |\n-   |           a memory access tried to interpret some bytes as a pointer\n+   |           unable to turn these bytes into a pointer\n    |           inside call to `std::ptr::const_ptr::<impl *const u8>::offset_from` at $DIR/offset_from_ub.rs:49:14\n    | \n   ::: $DIR/offset_from_ub.rs:45:1"}]}