{"sha": "4afa3a80926f52aa361fe4e89643dac2e2e57f34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZmEzYTgwOTI2ZjUyYWEzNjFmZTRlODk2NDNkYWMyZTJlNTdmMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T04:50:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-04T04:50:36Z"}, "message": "Auto merge of #85984 - JohnTitor:rollup-rq0g9ph, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85717 (Document `From` impls for cow.rs)\n - #85850 (Remove unused feature gates)\n - #85888 (Fix typo in internal documentation for `TrustedRandomAccess`)\n - #85889 (Restoring the `num_def_ids` function in the CStore API )\n - #85899 (jsondocck small cleanup)\n - #85937 (Fix bad suggestions for code from proc_macro)\n - #85963 (Show `::{{constructor}}` in std::any::type_name().)\n - #85977 (Fix linkcheck script from getting out of sync.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c0693324bfe3de1c7c5465330e084cd7ccffd85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0693324bfe3de1c7c5465330e084cd7ccffd85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4afa3a80926f52aa361fe4e89643dac2e2e57f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4afa3a80926f52aa361fe4e89643dac2e2e57f34", "html_url": "https://github.com/rust-lang/rust/commit/4afa3a80926f52aa361fe4e89643dac2e2e57f34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4afa3a80926f52aa361fe4e89643dac2e2e57f34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c82bb293c83877b52380d0d7a181a011fb70603", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c82bb293c83877b52380d0d7a181a011fb70603", "html_url": "https://github.com/rust-lang/rust/commit/1c82bb293c83877b52380d0d7a181a011fb70603"}, {"sha": "edb8f653e768361eb6191b5bbe2f31087394d79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb8f653e768361eb6191b5bbe2f31087394d79d", "html_url": "https://github.com/rust-lang/rust/commit/edb8f653e768361eb6191b5bbe2f31087394d79d"}], "stats": {"total": 281, "additions": 161, "deletions": 120}, "files": [{"sha": "4150285b4619f0638df5e5c5899257485da9316d", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1749,11 +1749,10 @@ dependencies = [\n  \"fs-err\",\n  \"getopts\",\n  \"jsonpath_lib\",\n- \"lazy_static\",\n+ \"once_cell\",\n  \"regex\",\n- \"serde\",\n  \"serde_json\",\n- \"shlex 0.1.1\",\n+ \"shlex\",\n ]\n \n [[package]]\n@@ -2134,7 +2133,7 @@ dependencies = [\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n- \"shlex 1.0.0\",\n+ \"shlex\",\n  \"tempfile\",\n  \"toml\",\n ]\n@@ -4809,12 +4808,6 @@ version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f\"\n \n-[[package]]\n-name = \"shlex\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n-\n [[package]]\n name = \"shlex\"\n version = \"1.0.0\""}, {"sha": "7c79b4aab3cce78596397f1e56ed3f09c9d33966", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -12,13 +12,11 @@\n #![feature(box_patterns)]\n #![cfg_attr(bootstrap, feature(const_fn_unsize))]\n #![feature(const_fn_transmute)]\n-#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_zip)]\n #![feature(label_break_value)]\n #![feature(nll)]\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "26da18b571cc0d205fec2f4f592d0cee31b9b4d1", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -6,7 +6,6 @@\n \n #![feature(bindings_after_at)]\n #![feature(iter_is_partitioned)]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "12da3d9e155e32ab3c93e9a355d7595a148a685a", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,15 +1,11 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(assert_matches)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(drain_filter)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n-#![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n-#![feature(box_syntax)]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "a8b9f479f1e9e482d8ca4a0263f471421a2537e0", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -10,15 +10,12 @@\n #![feature(array_windows)]\n #![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n-#![feature(unboxed_closures)]\n #![feature(generator_trait)]\n-#![feature(fn_traits)]\n #![feature(min_specialization)]\n #![feature(auto_traits)]\n #![feature(nll)]\n #![feature(allow_internal_unstable)]\n #![feature(hash_raw_entry)]\n-#![feature(stmt_expr_attributes)]\n #![feature(core_intrinsics)]\n #![feature(test)]\n #![feature(associated_type_bounds)]"}, {"sha": "3aabe94bfc641eeeb76ae4d41db5473b01d06d98", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -597,7 +597,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 Some(rpos) => {\n                     // Cycle detected.\n                     processor.process_backedge(\n-                        stack[rpos..].iter().map(GetObligation(&self.nodes)),\n+                        stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),\n                         PhantomData,\n                     );\n                 }\n@@ -705,20 +705,3 @@ impl<O: ForestObligation> ObligationForest<O> {\n         });\n     }\n }\n-\n-// I need a Clone closure.\n-#[derive(Clone)]\n-struct GetObligation<'a, O>(&'a [Node<O>]);\n-\n-impl<'a, 'b, O> FnOnce<(&'b usize,)> for GetObligation<'a, O> {\n-    type Output = &'a O;\n-    extern \"rust-call\" fn call_once(self, args: (&'b usize,)) -> &'a O {\n-        &self.0[*args.0].obligation\n-    }\n-}\n-\n-impl<'a, 'b, O> FnMut<(&'b usize,)> for GetObligation<'a, O> {\n-    extern \"rust-call\" fn call_mut(&mut self, args: (&'b usize,)) -> &'a O {\n-        &self.0[*args.0].obligation\n-    }\n-}"}, {"sha": "f77eac2b068c2ffc989923506927bc0f7562904b", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,4 +1,3 @@\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]"}, {"sha": "ad2ecae9233bcd9ea30e51e3719aadc5d33abc7d", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -3,12 +3,10 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n-#![feature(const_panic)]\n #![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "0093fa5e562af979a4024fb6cf00c6c17d6800ba", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,12 +1,10 @@\n #![feature(allow_internal_unstable)]\n #![feature(bench_black_box)]\n-#![feature(const_panic)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n #![feature(unboxed_closures)]\n #![feature(test)]\n #![feature(fn_traits)]\n-#![feature(trusted_step)]\n \n pub mod bit_set;\n pub mod vec;"}, {"sha": "246fa28d986e5b59c52a613a5d1ef14235cfd595", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -65,7 +65,7 @@ impl Idx for u32 {\n /// `u32::MAX`. You can also customize things like the `Debug` impl,\n /// what traits are derived, and so forth via the macro.\n #[macro_export]\n-#[allow_internal_unstable(step_trait, rustc_attrs)]\n+#[allow_internal_unstable(step_trait, rustc_attrs, trusted_step)]\n macro_rules! newtype_index {\n     // ---- public rules ----\n "}, {"sha": "ee358c52c2f57f129dac51da0dd3de69c957699c", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -16,14 +16,12 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_panic)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(in_band_lifetimes)]\n #![feature(control_flow_enum)]\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"512\"] // For rustdoc\n \n #[macro_use]"}, {"sha": "b5af2bfca352105d22005fcdeba025b86b10e57f", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,6 +1,5 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(internal_output_capture)]\n #![feature(nll)]\n #![feature(generator_trait)]"}, {"sha": "4f59460aa82a4e89f0aec06da78738716715c753", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -36,8 +36,6 @@\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(half_open_range_patterns)]\n-#![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "27842ac77960b5dcc6b5e7bdb22dff486a1e7c07", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,13 +1,11 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(core_intrinsics)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]\n #![feature(min_specialization)]\n-#![feature(stmt_expr_attributes)]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "59fec58f0a1b3037a65f22b28697825be7c8a0ef", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1931,6 +1931,10 @@ impl CrateMetadata {\n         self.root.hash\n     }\n \n+    fn num_def_ids(&self) -> usize {\n+        self.root.tables.def_keys.size()\n+    }\n+\n     fn local_def_id(&self, index: DefIndex) -> DefId {\n         DefId { krate: self.cnum, index }\n     }"}, {"sha": "9e615e48a3cd0964a1f3300ee696caf13bcda993", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -458,6 +458,13 @@ impl CStore {\n         self.get_crate_data(def_id.krate).module_expansion(def_id.index, sess)\n     }\n \n+    /// Only public-facing way to traverse all the definitions in a non-local crate.\n+    /// Critically useful for this third-party project: <https://github.com/hacspec/hacspec>.\n+    /// See <https://github.com/rust-lang/rust/pull/85889> for context.\n+    pub fn num_def_ids_untracked(&self, cnum: CrateNum) -> usize {\n+        self.get_crate_data(cnum).num_def_ids()\n+    }\n+\n     pub fn item_attrs(&self, def_id: DefId, sess: &Session) -> Vec<ast::Attribute> {\n         self.get_crate_data(def_id.krate).get_item_attrs(def_id.index, sess).collect()\n     }"}, {"sha": "e1d7bc4be533c467fa07a833296441957abbfd49", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -29,7 +29,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_panic)]\n #![feature(core_intrinsics)]\n #![feature(discriminant_kind)]\n #![feature(never_type)]\n@@ -50,7 +49,6 @@\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]\n #![feature(thread_local_const_init)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "a7012cd63f313059b270808ebea4cc8fe6d16c8d", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir::def_id::CrateNum;\n-use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_hir::definitions::DisambiguatedDefPathData;\n use rustc_middle::mir::interpret::Allocation;\n use rustc_middle::ty::{\n     self,\n@@ -127,11 +127,6 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // Skip `::{{constructor}}` on tuple/unit structs.\n-        if disambiguated_data.data == DefPathData::Ctor {\n-            return Ok(self);\n-        }\n-\n         write!(self.path, \"::{}\", disambiguated_data.data).unwrap();\n \n         Ok(self)"}, {"sha": "12a36976f1d4b2f93ba1ffb0b1428d60e492a5fc", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -12,16 +12,13 @@ Rust MIR: a lowered representation of Rust.\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n-#![feature(exhaustive_patterns)]\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n-#![feature(slice_ptr_len)]\n #![feature(slice_ptr_get)]\n #![feature(trusted_len)]\n #![feature(try_blocks)]\n@@ -31,7 +28,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(option_get_or_insert_default)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "d2992f0bf186e79aa172c0025d0164151b5f8171", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,17 +1,14 @@\n //! Construction of MIR from HIR.\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n-#![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(const_panic)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(iter_zip)]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "51df06bd989455d82bb4baf4d0ff2e8d1697f786", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n #![feature(bindings_after_at)]\n-#![feature(iter_order_by)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "28633faa205d053a056f9922f295cf0dd60e66bc", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -5,13 +5,11 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(nll)]\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "4175fb6925ac4bab1238fdcf3b743bd2a41d1b49", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -2,13 +2,9 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n-#![feature(exhaustive_patterns)]\n #![feature(nll)]\n #![feature(min_specialization)]\n-#![feature(crate_visibility_modifier)]\n-#![feature(once_cell)]\n #![feature(rustc_attrs)]\n-#![feature(never_type)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "0d4fb34265c55a33df6395be42919be61d8f7c73", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,12 +1,8 @@\n #![feature(bool_to_option)]\n-#![feature(const_panic)]\n #![feature(core_intrinsics)]\n-#![feature(drain_filter)]\n #![feature(hash_raw_entry)]\n #![feature(iter_zip)]\n #![feature(min_specialization)]\n-#![feature(stmt_expr_attributes)]\n-#![feature(trusted_step)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c79786a839fc46feecc9b793129ee257519dee64", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -14,10 +14,7 @@ Core encoding and decoding interfaces.\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![feature(min_specialization)]\n-#![feature(vec_spare_capacity)]\n #![feature(core_intrinsics)]\n-#![feature(maybe_uninit_array_assume_init)]\n-#![feature(maybe_uninit_uninit_array)]\n #![feature(maybe_uninit_slice)]\n #![feature(new_uninit)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "51a53918f079267a593de38ce134fc3fb74df677", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -16,12 +16,10 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n-#![feature(const_panic)]\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n-#![feature(trusted_step)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "cb8f6b9656c6834fd620a2bb02c1bbb035bdb3eb", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -9,13 +9,11 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n-#![feature(const_panic)]\n #![feature(nll)]\n #![feature(never_type)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n \n use std::path::{Path, PathBuf};\n "}, {"sha": "2d102127dd9d65dd7c2585590dbe8647e0a60782", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,5 +1,4 @@\n #![feature(min_specialization)]\n-#![feature(trusted_step)]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "9cc435a0dec2ec01a45e2a32cd562e5b4d25d71a", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n@@ -412,25 +413,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n-        let sm = self.sess().source_map();\n+        let sess = self.sess();\n         let sp = expr.span;\n-        if sm.is_imported(sp) {\n-            // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n-            // call span, but that breaks down when the type error comes from multiple calls down.\n+\n+        // If the span is from an external macro, there's no suggestion we can make.\n+        if in_external_macro(sess, sp) {\n             return None;\n         }\n \n+        let sm = sess.source_map();\n+\n         let replace_prefix = |s: &str, old: &str, new: &str| {\n             s.strip_prefix(old).map(|stripped| new.to_string() + stripped)\n         };\n \n         let is_struct_pat_shorthand_field =\n             self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, sp);\n \n-        // If the span is from a macro, then it's hard to extract the text\n-        // and make a good suggestion, so don't bother.\n-        let is_macro = sp.from_expansion() && sp.desugaring_kind().is_none();\n-\n         // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n         let expr = expr.peel_drop_temps();\n \n@@ -570,10 +569,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, _, ref expr),\n                 _,\n                 &ty::Ref(_, checked, _),\n-            ) if {\n-                self.infcx.can_sub(self.param_env, checked, &expected).is_ok() && !is_macro\n-            } =>\n-            {\n+            ) if self.infcx.can_sub(self.param_env, checked, &expected).is_ok() => {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n@@ -589,13 +585,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     return None;\n                 }\n-                if let Ok(code) = sm.span_to_snippet(expr.span) {\n-                    return Some((\n-                        sp,\n-                        \"consider removing the borrow\",\n-                        code,\n-                        Applicability::MachineApplicable,\n-                    ));\n+                if sp.contains(expr.span) {\n+                    if let Ok(code) = sm.span_to_snippet(expr.span) {\n+                        return Some((\n+                            sp,\n+                            \"consider removing the borrow\",\n+                            code,\n+                            Applicability::MachineApplicable,\n+                        ));\n+                    }\n                 }\n             }\n             (\n@@ -643,7 +641,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            _ if sp == expr.span && !is_macro => {\n+            _ if sp == expr.span => {\n                 if let Some(steps) = self.deref_steps(checked_ty, expected) {\n                     let expr = expr.peel_blocks();\n "}, {"sha": "64943a273c9a591b9c1fb84da7de15a81c478c3d", "filename": "library/alloc/src/vec/cow.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -5,20 +5,38 @@ use super::Vec;\n \n #[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<&'a [T]> for Cow<'a, [T]> {\n+    /// Creates a [`Borrowed`] variant of [`Cow`]\n+    /// from a slice.\n+    ///\n+    /// This conversion does not allocate or clone the data.\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     fn from(s: &'a [T]) -> Cow<'a, [T]> {\n         Cow::Borrowed(s)\n     }\n }\n \n #[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<Vec<T>> for Cow<'a, [T]> {\n+    /// Creates an [`Owned`] variant of [`Cow`]\n+    /// from an owned instance of [`Vec`].\n+    ///\n+    /// This conversion does not allocate or clone the data.\n+    ///\n+    /// [`Owned`]: crate::borrow::Cow::Owned\n     fn from(v: Vec<T>) -> Cow<'a, [T]> {\n         Cow::Owned(v)\n     }\n }\n \n #[stable(feature = \"cow_from_vec_ref\", since = \"1.28.0\")]\n impl<'a, T: Clone> From<&'a Vec<T>> for Cow<'a, [T]> {\n+    /// Creates a [`Borrowed`] variant of [`Cow`]\n+    /// from a reference to [`Vec`].\n+    ///\n+    /// This conversion does not allocate or clone the data.\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     fn from(v: &'a Vec<T>) -> Cow<'a, [T]> {\n         Cow::Borrowed(v.as_slice())\n     }"}, {"sha": "c95324c80ba61e14243b3fc59e8ed6c5fc2ca605", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -434,7 +434,7 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///    called on `self`:\n ///     * `std::clone::Clone::clone()`\n ///     * `std::iter::Iterator::size_hint()`\n-///     * `std::iter::Iterator::next_back()`\n+///     * `std::iter::DoubleEndedIterator::next_back()`\n ///     * `std::iter::Iterator::__iterator_get_unchecked()`\n ///     * `std::iter::TrustedRandomAccess::size()`\n ///"}, {"sha": "b36d6f0d4040598b0ea86718d0489681d8c19781", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -114,3 +114,16 @@ fn any_unsized() {\n     fn is_any<T: Any + ?Sized>() {}\n     is_any::<[i32]>();\n }\n+\n+#[test]\n+fn distinct_type_names() {\n+    // https://github.com/rust-lang/rust/issues/84666\n+\n+    struct Velocity(f32, f32);\n+\n+    fn type_name_of_val<T>(_: T) -> &'static str {\n+        type_name::<T>()\n+    }\n+\n+    assert_ne!(type_name_of_val(Velocity), type_name_of_val(Velocity(0.0, -9.8)),);\n+}"}, {"sha": "d71747f9687ef2da7843146ba2592e4d29ea379c", "filename": "src/test/ui/suggestions/auxiliary/proc-macro-type-error.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fproc-macro-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fproc-macro-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fproc-macro-type-error.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -0,0 +1,18 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_quote)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{quote, TokenStream};\n+\n+#[proc_macro_attribute]\n+pub fn hello(_: TokenStream, _: TokenStream) -> TokenStream {\n+    quote!(\n+        fn f(_: &mut i32) {}\n+        fn g() {\n+            f(123);\n+        }\n+    )\n+}"}, {"sha": "6f780f32a147b69968f70529dcc9eb1e22a699bd", "filename": "src/test/ui/suggestions/suggest-ref-macro.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -0,0 +1,29 @@\n+// run-check\n+// aux-build:proc-macro-type-error.rs\n+\n+extern crate proc_macro_type_error;\n+\n+use proc_macro_type_error::hello;\n+\n+#[hello] //~ERROR mismatched types\n+fn abc() {}\n+\n+fn x(_: &mut i32) {}\n+\n+macro_rules! bla {\n+    () => {\n+        x(123);\n+        //~^ ERROR mismatched types\n+        //~| SUGGESTION &mut 123\n+    };\n+    ($v:expr) => {\n+        x($v)\n+    }\n+}\n+\n+fn main() {\n+    bla!();\n+    bla!(456);\n+    //~^ ERROR mismatched types\n+    //~| SUGGESTION &mut 456\n+}"}, {"sha": "147001f0c948b93e3d64a511174968b10cbfbdbe", "filename": "src/test/ui/suggestions/suggest-ref-macro.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:8:1\n+   |\n+LL | #[hello]\n+   | ^^^^^^^^ expected `&mut i32`, found integer\n+   |\n+   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:15:11\n+   |\n+LL |         x(123);\n+   |           ^^^\n+   |           |\n+   |           expected `&mut i32`, found integer\n+   |           help: consider mutably borrowing here: `&mut 123`\n+...\n+LL |     bla!();\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `bla` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:26:10\n+   |\n+LL |     bla!(456);\n+   |          ^^^\n+   |          |\n+   |          expected `&mut i32`, found integer\n+   |          help: consider mutably borrowing here: `&mut 456`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b5f1554dbe4df7959a6524ef972f91eb97cf3be8", "filename": "src/tools/jsondocck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftools%2Fjsondocck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftools%2Fjsondocck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2FCargo.toml?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -8,8 +8,7 @@ edition = \"2018\"\n jsonpath_lib = \"0.2\"\n getopts = \"0.2\"\n regex = \"1.4\"\n-lazy_static = \"1.4\"\n-shlex = \"0.1\"\n-serde = \"1.0\"\n+shlex = \"1.0\"\n serde_json = \"1.0\"\n fs-err = \"2.5.0\"\n+once_cell = \"1.0\""}, {"sha": "b8ea10f3d22778e6a96032bdecc729f8ba1b2376", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -1,5 +1,5 @@\n use jsonpath_lib::select;\n-use lazy_static::lazy_static;\n+use once_cell::sync::Lazy;\n use regex::{Regex, RegexBuilder};\n use serde_json::Value;\n use std::borrow::Cow;\n@@ -94,19 +94,19 @@ impl fmt::Display for CommandKind {\n     }\n }\n \n-lazy_static! {\n-    static ref LINE_PATTERN: Regex = RegexBuilder::new(\n+static LINE_PATTERN: Lazy<Regex> = Lazy::new(|| {\n+    RegexBuilder::new(\n         r#\"\n         \\s(?P<invalid>!?)@(?P<negated>!?)\n         (?P<cmd>[A-Za-z]+(?:-[A-Za-z]+)*)\n         (?P<args>.*)$\n-    \"#\n+    \"#,\n     )\n     .ignore_whitespace(true)\n     .unicode(true)\n     .build()\n-    .unwrap();\n-}\n+    .unwrap()\n+});\n \n fn print_err(msg: &str, lineno: usize) {\n     eprintln!(\"Invalid command: {} on line {}\", msg, lineno)"}, {"sha": "9eeebf444a49929cc714f69dab679a6f41060607", "filename": "src/tools/linkchecker/linkcheck.sh", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftools%2Flinkchecker%2Flinkcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4afa3a80926f52aa361fe4e89643dac2e2e57f34/src%2Ftools%2Flinkchecker%2Flinkcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Flinkcheck.sh?ref=4afa3a80926f52aa361fe4e89643dac2e2e57f34", "patch": "@@ -85,11 +85,11 @@ fi\n if [ ! -e \"linkchecker/main.rs\" ] || [ \"$iterative\" = \"0\" ]\n then\n     echo \"Downloading linkchecker source...\"\n+    nightly_hash=$(rustc +nightly -Vv | grep commit-hash | cut -f2 -d\" \")\n+    url=\"https://raw.githubusercontent.com/rust-lang/rust\"\n     mkdir linkchecker\n-    curl -o linkchecker/Cargo.toml \\\n-        https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/Cargo.toml\n-    curl -o linkchecker/main.rs \\\n-        https://raw.githubusercontent.com/rust-lang/rust/master/src/tools/linkchecker/main.rs\n+    curl -o linkchecker/Cargo.toml ${url}/${nightly_hash}/src/tools/linkchecker/Cargo.toml\n+    curl -o linkchecker/main.rs ${url}/${nightly_hash}/src/tools/linkchecker/main.rs\n fi\n \n echo \"Building book \\\"$book_name\\\"...\"\n@@ -106,7 +106,7 @@ else\n     check_path=\"linkcheck/$book_name\"\n fi\n echo \"Running linkchecker on \\\"$check_path\\\"...\"\n-cargo run --manifest-path=linkchecker/Cargo.toml -- \"$check_path\"\n+cargo run --release --manifest-path=linkchecker/Cargo.toml -- \"$check_path\"\n \n if [ \"$iterative\" = \"0\" ]\n then"}]}