{"sha": "4b0f29a4669491348e963f86de7f6ccc9d666e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMGYyOWE0NjY5NDkxMzQ4ZTk2M2Y4NmRlN2Y2Y2NjOWQ2NjZlNjA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-15T07:32:11Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-20T14:53:23Z"}, "message": "core: add char_at_reverse", "tree": {"sha": "80e5f94d993be402cb0ae6fb5ac743ce80dfde4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e5f94d993be402cb0ae6fb5ac743ce80dfde4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b0f29a4669491348e963f86de7f6ccc9d666e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f29a4669491348e963f86de7f6ccc9d666e60", "html_url": "https://github.com/rust-lang/rust/commit/4b0f29a4669491348e963f86de7f6ccc9d666e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f29a4669491348e963f86de7f6ccc9d666e60/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "html_url": "https://github.com/rust-lang/rust/commit/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "b2b373915e732bb0b69fc27a8af1fa5e17dd0634", "filename": "src/libcore/str.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4b0f29a4669491348e963f86de7f6ccc9d666e60/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b0f29a4669491348e963f86de7f6ccc9d666e60/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4b0f29a4669491348e963f86de7f6ccc9d666e60", "patch": "@@ -1769,7 +1769,7 @@ pub pure fn char_range_at(s: &str, i: uint) -> CharRange {\n     return CharRange {ch: val as char, next: i};\n }\n \n-/// Pluck a character out of a string\n+/// Plucks the `n`th character from the beginning of a string\n pub pure fn char_at(s: &str, i: uint) -> char {\n     return char_range_at(s, i).ch;\n }\n@@ -1799,6 +1799,11 @@ pure fn char_range_at_reverse(ss: &str, start: uint) -> CharRange {\n     return CharRange {ch:ch, next:prev};\n }\n \n+/// Plucks the `n`th character from the end of a string\n+pub pure fn char_at_reverse(s: &str, i: uint) -> char {\n+    char_range_at_reverse(s, i).ch\n+}\n+\n /**\n  * Loop through a substring, char by char\n  *\n@@ -2274,6 +2279,7 @@ pub trait StrSlice {\n     pure fn to_owned(&self) -> ~str;\n     pure fn to_managed(&self) -> @str;\n     pure fn char_at(&self, i: uint) -> char;\n+    pure fn char_at_reverse(&self, i: uint) -> char;\n     fn to_bytes(&self) -> ~[u8];\n }\n \n@@ -2419,6 +2425,11 @@ impl StrSlice for &'self str {\n     #[inline]\n     pure fn char_at(&self, i: uint) -> char { char_at(*self, i) }\n \n+    #[inline]\n+    pure fn char_at_reverse(&self, i: uint) -> char {\n+        char_at_reverse(*self, i)\n+    }\n+\n     fn to_bytes(&self) -> ~[u8] { to_bytes(*self) }\n }\n \n@@ -3426,6 +3437,28 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_char_at() {\n+        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n+        let mut pos = 0;\n+        for v.each |ch| {\n+            fail_unless!(s.char_at(pos) == *ch);\n+            pos += from_char(*ch).len();\n+        }\n+    }\n+\n+    #[test]\n+    fn test_char_at_reverse() {\n+        let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n+        let mut pos = s.len();\n+        for v.each_reverse |ch| {\n+            fail_unless!(s.char_at_reverse(pos) == *ch);\n+            pos -= from_char(*ch).len();\n+        }\n+    }\n+\n     #[test]\n     fn test_each_char() {\n         let s = ~\"abc\";"}]}