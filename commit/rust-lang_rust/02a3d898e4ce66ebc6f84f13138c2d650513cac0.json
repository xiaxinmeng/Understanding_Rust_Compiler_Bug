{"sha": "02a3d898e4ce66ebc6f84f13138c2d650513cac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYTNkODk4ZTRjZTY2ZWJjNmY4NGYxMzEzOGMyZDY1MDUxM2NhYzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-30T18:55:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-30T18:55:18Z"}, "message": "Merge #10076\n\n10076: Use struct init shorthand when applicable in fill struct fields assist r=matklad a=nathanwhit\n\nThis PR tweaks the fill struct fields assist to use the struct init shorthand when a local variable with a matching name and type is in scope.\r\n\r\nFor example:\r\n```rust\r\nstruct Foo {\r\n    a: usize,\r\n    b: i32,\r\n    c: char,\r\n}\r\n\r\nfn main() {\r\n    let a = 1;\r\n    let b = 2;\r\n    let c = 3;\r\n    let foo = Foo { <|> };\r\n}\r\n```\r\nBefore we would insert\r\n```rust\r\nFoo {\r\n    a: (),\r\n    b: (),\r\n    c: (),\r\n}\r\n```\r\nnow we would insert\r\n```rust\r\nFoo {\r\n    a,\r\n    b,\r\n    c: ()\r\n}\r\n```\n\nCo-authored-by: nathan.whitaker <nathan.whitaker01@gmail.com>", "tree": {"sha": "791093e615a50a34b7516d0ca6b1e2c7b8d46456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791093e615a50a34b7516d0ca6b1e2c7b8d46456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a3d898e4ce66ebc6f84f13138c2d650513cac0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLSmWCRBK7hj4Ov3rIwAA6KQIAKhFjwNKMptFMrhw8N/ceh60\nBqzPmx47Lp0hLIP/pO0se9zuM0vKTbelNzm6DtgoUGZxPeiXRV7SWXp3GRc+MZdb\nZRmxa9Jp4I4w1+OG24lzH13lgsKdl7/j8XJF5YimUKkkk/ieUYNMgKPfcdpei3pc\nWiZ6ZhWbv2L7FCQX7EoUsoAabso4jY/OYzWDF99PQHfbR5Y2tdyGNThFgeR17CJv\nR3xbPBP2jFA7h3xk7p8lUlD0G3WXMATTRMY61fq60yU0boixMbr3IM8aaFTbqyoO\n7568wlLDEvHAGCKXVbSTBjEmqA2xGPY1zKv1gWDzBaAjb2fMoq9uetxX4aNKRNU=\n=Q9qJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 791093e615a50a34b7516d0ca6b1e2c7b8d46456\nparent 5c704f11d2ef82d7517680bba6dd0015d750fca2\nparent e1d86a42fee92f261956b12cb2310f1e5904dacf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630349718 +0000\ncommitter GitHub <noreply@github.com> 1630349718 +0000\n\nMerge #10076\n\n10076: Use struct init shorthand when applicable in fill struct fields assist r=matklad a=nathanwhit\n\nThis PR tweaks the fill struct fields assist to use the struct init shorthand when a local variable with a matching name and type is in scope.\r\n\r\nFor example:\r\n```rust\r\nstruct Foo {\r\n    a: usize,\r\n    b: i32,\r\n    c: char,\r\n}\r\n\r\nfn main() {\r\n    let a = 1;\r\n    let b = 2;\r\n    let c = 3;\r\n    let foo = Foo { <|> };\r\n}\r\n```\r\nBefore we would insert\r\n```rust\r\nFoo {\r\n    a: (),\r\n    b: (),\r\n    c: (),\r\n}\r\n```\r\nnow we would insert\r\n```rust\r\nFoo {\r\n    a,\r\n    b,\r\n    c: ()\r\n}\r\n```\n\nCo-authored-by: nathan.whitaker <nathan.whitaker01@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a3d898e4ce66ebc6f84f13138c2d650513cac0", "html_url": "https://github.com/rust-lang/rust/commit/02a3d898e4ce66ebc6f84f13138c2d650513cac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a3d898e4ce66ebc6f84f13138c2d650513cac0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c704f11d2ef82d7517680bba6dd0015d750fca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c704f11d2ef82d7517680bba6dd0015d750fca2", "html_url": "https://github.com/rust-lang/rust/commit/5c704f11d2ef82d7517680bba6dd0015d750fca2"}, {"sha": "e1d86a42fee92f261956b12cb2310f1e5904dacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d86a42fee92f261956b12cb2310f1e5904dacf", "html_url": "https://github.com/rust-lang/rust/commit/e1d86a42fee92f261956b12cb2310f1e5904dacf"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "f61ab1f410976df716792182f330c7686e843939", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 110, "deletions": 3, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/02a3d898e4ce66ebc6f84f13138c2d650513cac0/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a3d898e4ce66ebc6f84f13138c2d650513cac0/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=02a3d898e4ce66ebc6f84f13138c2d650513cac0", "patch": "@@ -1,6 +1,7 @@\n use either::Either;\n use hir::{db::AstDatabase, InFile};\n use ide_db::{assists::Assist, source_change::SourceChange};\n+use rustc_hash::FxHashMap;\n use stdx::format_to;\n use syntax::{algo, ast::make, AstNode, SyntaxNodePtr};\n use text_edit::TextEdit;\n@@ -54,9 +55,27 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     };\n     let old_field_list = field_list_parent.record_expr_field_list()?;\n     let new_field_list = old_field_list.clone_for_update();\n-    for f in d.missed_fields.iter() {\n+    let mut locals = FxHashMap::default();\n+    ctx.sema.scope(field_list_parent.syntax()).process_all_names(&mut |name, def| {\n+        if let hir::ScopeDef::Local(local) = def {\n+            locals.insert(name.clone(), local);\n+        }\n+    });\n+    let missing_fields = ctx.sema.record_literal_missing_fields(&field_list_parent);\n+    for (f, ty) in missing_fields.iter() {\n+        let field_expr = if let Some(local_candidate) = locals.get(&f.name(ctx.sema.db)) {\n+            cov_mark::hit!(field_shorthand);\n+            let candidate_ty = local_candidate.ty(ctx.sema.db);\n+            if ty.could_unify_with(ctx.sema.db, &candidate_ty) {\n+                None\n+            } else {\n+                Some(make::expr_unit())\n+            }\n+        } else {\n+            Some(make::expr_unit())\n+        };\n         let field =\n-            make::record_expr_field(make::name_ref(&f.to_string()), Some(make::expr_unit()))\n+            make::record_expr_field(make::name_ref(&f.name(ctx.sema.db).to_string()), field_expr)\n                 .clone_for_update();\n         new_field_list.add_field(field);\n     }\n@@ -224,7 +243,7 @@ enum Expr {\n \n impl Expr {\n     fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-        Expr::Bin { lhs: (), rhs: () }\n+        Expr::Bin { lhs, rhs }\n     }\n }\n \"#,\n@@ -324,6 +343,94 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn test_fill_struct_fields_shorthand() {\n+        cov_mark::check!(field_shorthand);\n+        check_fix(\n+            r#\"\n+struct S { a: &'static str, b: i32 }\n+\n+fn f() {\n+    let a = \"hello\";\n+    let b = 1i32;\n+    S {\n+        $0\n+    };\n+}\n+\"#,\n+            r#\"\n+struct S { a: &'static str, b: i32 }\n+\n+fn f() {\n+    let a = \"hello\";\n+    let b = 1i32;\n+    S {\n+        a,\n+        b,\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_fill_struct_fields_shorthand_ty_mismatch() {\n+        check_fix(\n+            r#\"\n+struct S { a: &'static str, b: i32 }\n+\n+fn f() {\n+    let a = \"hello\";\n+    let b = 1usize;\n+    S {\n+        $0\n+    };\n+}\n+\"#,\n+            r#\"\n+struct S { a: &'static str, b: i32 }\n+\n+fn f() {\n+    let a = \"hello\";\n+    let b = 1usize;\n+    S {\n+        a,\n+        b: (),\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_fill_struct_fields_shorthand_unifies() {\n+        check_fix(\n+            r#\"\n+struct S<T> { a: &'static str, b: T }\n+\n+fn f() {\n+    let a = \"hello\";\n+    let b = 1i32;\n+    S {\n+        $0\n+    };\n+}\n+\"#,\n+            r#\"\n+struct S<T> { a: &'static str, b: T }\n+\n+fn f() {\n+    let a = \"hello\";\n+    let b = 1i32;\n+    S {\n+        a,\n+        b,\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn import_extern_crate_clash_with_inner_item() {\n         // This is more of a resolver test, but doesn't really work with the hir_def testsuite."}]}