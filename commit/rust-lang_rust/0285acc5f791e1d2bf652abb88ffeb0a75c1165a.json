{"sha": "0285acc5f791e1d2bf652abb88ffeb0a75c1165a", "node_id": "C_kwDOAAsO6NoAKDAyODVhY2M1Zjc5MWUxZDJiZjY1MmFiYjg4ZmZlYjBhNzVjMTE2NWE", "commit": {"author": {"name": "Duong Quoc Khanh", "email": "dqkqdlot@gmail.com", "date": "2023-02-13T11:11:04Z"}, "committer": {"name": "Duong Quoc Khanh", "email": "dqkqdlot@gmail.com", "date": "2023-02-13T11:11:04Z"}, "message": "Find `next_non_trivia_token` of `name_ref`.", "tree": {"sha": "715f1a061c1b01767845e3e4ac3161ce4c221c25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/715f1a061c1b01767845e3e4ac3161ce4c221c25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0285acc5f791e1d2bf652abb88ffeb0a75c1165a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEwZYQ1XvHmidXWoT/2lKnToBKAOcFAmPqGxMACgkQ2lKnToBK\nAOfv3hAAgzvCoU2cD0oRtgqvyxp1d4Von5UGcw2jKd2S+kQDpZ1npbHsN9JvqaHR\ndY6F3Tv4SxWnBaLkZ4zT1CgMfDbJpkp2J6KJukZOmfPM6IfKpGscXL9vB3kz4Hku\nYtgDc9v2giExdAV//7FwnWjLY5PHLK9WiwYVuQSm0YT6YkJZvzlRdvs/GJHVrxj0\nqPQA1RXu2MJb8ND3dWT2wudtGCduvNEhSncjy3sKtgp1LdCUfuIgSjWejPp0DB7z\nJYehxK8WG+H+yRsZwaIQdOG0fJal6Bkl1RtB5ib9Gd/LhLRdB0fvDPTOk3gOjS/C\nm/qughmfEYVXgf7Vs83DOcbXP8JxAQ5a07HU8fjWUNMwOfstS47WClUQVRGjtMZ8\n8ujo/Cv5MZ7ox/0ykldE4GTnS9D8kpSkR82IhbmmO8p7XWL/HVqOzBaQYoeTF8RO\n68GAUW7XMQ74+otHn/Us8bO+ym+TmMlE4V+G6T4K4QlE6YzBIjLCHwLdhV940Fel\nLYajv3Iu0sBPcrla9nhwHEfFQ8khvkjqzxIhI1wS2w4NWErqR9q5XRMC7IRSGvss\nNjn5nnjFEk+DSrQzl1EPwH+nPhwhPZt2KthTmOz4T+ecVwLpbk2ZyfzofFXv87x9\niBTIWvOAiuvLq8sklGrru/LzM9o1tmU9vn2KbMw6GKYfcotfANM=\n=wxHq\n-----END PGP SIGNATURE-----", "payload": "tree 715f1a061c1b01767845e3e4ac3161ce4c221c25\nparent e1396bde73900c638112c34bbf1b9b7e31a20a0d\nauthor Duong Quoc Khanh <dqkqdlot@gmail.com> 1676286664 +0900\ncommitter Duong Quoc Khanh <dqkqdlot@gmail.com> 1676286664 +0900\n\nFind `next_non_trivia_token` of `name_ref`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0285acc5f791e1d2bf652abb88ffeb0a75c1165a", "html_url": "https://github.com/rust-lang/rust/commit/0285acc5f791e1d2bf652abb88ffeb0a75c1165a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0285acc5f791e1d2bf652abb88ffeb0a75c1165a/comments", "author": {"login": "dqkqd", "id": 24296517, "node_id": "MDQ6VXNlcjI0Mjk2NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/24296517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dqkqd", "html_url": "https://github.com/dqkqd", "followers_url": "https://api.github.com/users/dqkqd/followers", "following_url": "https://api.github.com/users/dqkqd/following{/other_user}", "gists_url": "https://api.github.com/users/dqkqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dqkqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dqkqd/subscriptions", "organizations_url": "https://api.github.com/users/dqkqd/orgs", "repos_url": "https://api.github.com/users/dqkqd/repos", "events_url": "https://api.github.com/users/dqkqd/events{/privacy}", "received_events_url": "https://api.github.com/users/dqkqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dqkqd", "id": 24296517, "node_id": "MDQ6VXNlcjI0Mjk2NTE3", "avatar_url": "https://avatars.githubusercontent.com/u/24296517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dqkqd", "html_url": "https://github.com/dqkqd", "followers_url": "https://api.github.com/users/dqkqd/followers", "following_url": "https://api.github.com/users/dqkqd/following{/other_user}", "gists_url": "https://api.github.com/users/dqkqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dqkqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dqkqd/subscriptions", "organizations_url": "https://api.github.com/users/dqkqd/orgs", "repos_url": "https://api.github.com/users/dqkqd/repos", "events_url": "https://api.github.com/users/dqkqd/events{/privacy}", "received_events_url": "https://api.github.com/users/dqkqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1396bde73900c638112c34bbf1b9b7e31a20a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1396bde73900c638112c34bbf1b9b7e31a20a0d", "html_url": "https://github.com/rust-lang/rust/commit/e1396bde73900c638112c34bbf1b9b7e31a20a0d"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "4c66f95903a932bfbde26c2834da7fb19413b9ad", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0285acc5f791e1d2bf652abb88ffeb0a75c1165a/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0285acc5f791e1d2bf652abb88ffeb0a75c1165a/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=0285acc5f791e1d2bf652abb88ffeb0a75c1165a", "patch": "@@ -608,16 +608,8 @@ fn classify_name_ref(\n \n                 let reciever_is_part_of_indivisible_expression = match &receiver {\n                     Some(ast::Expr::IfExpr(_)) => {\n-                        let next_sibling = field.dot_token().and_then(|token| {\n-                            let dot_token = original_file.covering_element(token.text_range());\n-                            let next_sibling = dot_token.as_token().and_then(|t| t.next_token()).and_then(|t| next_non_trivia_sibling(t.into()));\n-                            next_sibling\n-                        });\n-                        match next_sibling {\n-                            Some(syntax::NodeOrToken::Node(n)) => n.first_child_or_token().map(|t| t.kind()) == Some(SyntaxKind::ELSE_KW),\n-                            Some(syntax::NodeOrToken::Token(t)) => t.kind()  == SyntaxKind::ELSE_KW,\n-                            None => false\n-                        }\n+                        let next_token_kind = next_non_trivia_token(name_ref.syntax().clone()).map(|t| t.kind());\n+                        next_token_kind == Some(SyntaxKind::ELSE_KW)\n                     },\n                     _ => false\n                 };\n@@ -1337,6 +1329,22 @@ fn previous_non_trivia_token(e: impl Into<SyntaxElement>) -> Option<SyntaxToken>\n     None\n }\n \n+fn next_non_trivia_token(e: impl Into<SyntaxElement>) -> Option<SyntaxToken> {\n+    let mut token = match e.into() {\n+        SyntaxElement::Node(n) => n.last_token()?,\n+        SyntaxElement::Token(t) => t,\n+    }\n+    .next_token();\n+    while let Some(inner) = token {\n+        if !inner.kind().is_trivia() {\n+            return Some(inner);\n+        } else {\n+            token = inner.next_token();\n+        }\n+    }\n+    None\n+}\n+\n fn next_non_trivia_sibling(ele: SyntaxElement) -> Option<SyntaxElement> {\n     let mut e = ele.next_sibling_or_token();\n     while let Some(inner) = e {"}]}