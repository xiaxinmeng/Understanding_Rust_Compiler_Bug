{"sha": "5abedd81e04dc1b76db423ca351ef5d3056a6f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYmVkZDgxZTA0ZGMxYjc2ZGI0MjNjYTM1MWVmNWQzMDU2YTZmOTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T17:42:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "visit: unify extern & assoc item visiting", "tree": {"sha": "cb50bf1e3aa4d1e4b53942606fdc6e2dbac98c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb50bf1e3aa4d1e4b53942606fdc6e2dbac98c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5abedd81e04dc1b76db423ca351ef5d3056a6f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5abedd81e04dc1b76db423ca351ef5d3056a6f97", "html_url": "https://github.com/rust-lang/rust/commit/5abedd81e04dc1b76db423ca351ef5d3056a6f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5abedd81e04dc1b76db423ca351ef5d3056a6f97/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb", "html_url": "https://github.com/rust-lang/rust/commit/cf87edfdc5f2b44c7e379270a2b8b92464cb7cdb"}], "stats": {"total": 98, "additions": 40, "deletions": 58}, "files": [{"sha": "1fa6cce2c6284d2df7daf3fca9a416b50aa9dcc3", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=5abedd81e04dc1b76db423ca351ef5d3056a6f97", "patch": "@@ -949,6 +949,19 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n ) -> SmallVec<[P<AssocItem>; 1]> {\n     let AssocItem { id, ident, vis, defaultness: _, attrs, kind, span, tokens: _ } =\n         item.deref_mut();\n+    walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n+    smallvec![item]\n+}\n+\n+pub fn walk_nested_item(\n+    visitor: &mut impl MutVisitor,\n+    id: &mut NodeId,\n+    span: &mut Span,\n+    ident: &mut Ident,\n+    vis: &mut Visibility,\n+    attrs: &mut Vec<Attribute>,\n+    kind: &mut AssocItemKind,\n+) {\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n@@ -971,8 +984,6 @@ pub fn noop_flat_map_assoc_item<T: MutVisitor>(\n         AssocItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);\n-\n-    smallvec![item]\n }\n \n pub fn noop_visit_fn_header<T: MutVisitor>(header: &mut FnHeader, vis: &mut T) {\n@@ -1038,29 +1049,7 @@ pub fn noop_flat_map_foreign_item<T: MutVisitor>(\n     visitor: &mut T,\n ) -> SmallVec<[P<ForeignItem>; 1]> {\n     let ForeignItem { ident, attrs, id, kind, vis, span, tokens: _ } = item.deref_mut();\n-    visitor.visit_ident(ident);\n-    visit_attrs(attrs, visitor);\n-    match kind {\n-        ForeignItemKind::Fn(sig, generics, body) => {\n-            visit_fn_sig(sig, visitor);\n-            visitor.visit_generics(generics);\n-            visit_opt(body, |body| visitor.visit_block(body));\n-        }\n-        ForeignItemKind::Const(ty, body) | ForeignItemKind::Static(ty, _, body) => {\n-            visitor.visit_ty(ty);\n-            visit_opt(body, |body| visitor.visit_expr(body));\n-        }\n-        ForeignItemKind::TyAlias(generics, bounds, ty) => {\n-            visitor.visit_generics(generics);\n-            visit_bounds(bounds, visitor);\n-            visit_opt(ty, |ty| visitor.visit_ty(ty));\n-        }\n-        ForeignItemKind::Macro(mac) => visitor.visit_mac(mac),\n-    }\n-    visitor.visit_id(id);\n-    visitor.visit_span(span);\n-    visitor.visit_vis(vis);\n-\n+    walk_nested_item(visitor, id, span, ident, vis, attrs, kind);\n     smallvec![item]\n }\n "}, {"sha": "448ed0ba3de573d63fb4ce3cbe71ee450fbd30ec", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5abedd81e04dc1b76db423ca351ef5d3056a6f97", "patch": "@@ -525,29 +525,8 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n }\n \n pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignItem) {\n-    visitor.visit_vis(&item.vis);\n-    visitor.visit_ident(item.ident);\n-\n-    match item.kind {\n-        ForeignItemKind::Fn(ref sig, ref generics, ref body) => {\n-            visitor.visit_generics(generics);\n-            let kind = FnKind::Fn(FnCtxt::Foreign, item.ident, sig, &item.vis, body.as_deref());\n-            visitor.visit_fn(kind, item.span, item.id);\n-        }\n-        ForeignItemKind::Const(ref typ, ref body)\n-        | ForeignItemKind::Static(ref typ, _, ref body) => {\n-            visitor.visit_ty(typ);\n-            walk_list!(visitor, visit_expr, body);\n-        }\n-        ForeignItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n-            visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds);\n-            walk_list!(visitor, visit_ty, ty);\n-        }\n-        ForeignItemKind::Macro(ref mac) => visitor.visit_mac(mac),\n-    }\n-\n-    walk_list!(visitor, visit_attribute, &item.attrs);\n+    let ForeignItem { id, span, ident, vis, attrs, kind, tokens: _ } = item;\n+    walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Foreign);\n }\n \n pub fn walk_global_asm<'a, V: Visitor<'a>>(_: &mut V, _: &'a GlobalAsm) {\n@@ -630,25 +609,39 @@ pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Spa\n }\n \n pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem, ctxt: AssocCtxt) {\n-    visitor.visit_vis(&item.vis);\n-    visitor.visit_ident(item.ident);\n-    walk_list!(visitor, visit_attribute, &item.attrs);\n-    match item.kind {\n-        AssocItemKind::Const(ref ty, ref expr) | AssocItemKind::Static(ref ty, _, ref expr) => {\n+    let AssocItem { id, span, ident, vis, attrs, kind, tokens: _, defaultness: _ } = item;\n+    walk_nested_item(visitor, *id, *span, *ident, vis, attrs, kind, FnCtxt::Assoc(ctxt));\n+}\n+\n+fn walk_nested_item<'a, V: Visitor<'a>>(\n+    visitor: &mut V,\n+    id: NodeId,\n+    span: Span,\n+    ident: Ident,\n+    vis: &'a Visibility,\n+    attrs: &'a [Attribute],\n+    kind: &'a AssocItemKind,\n+    ctxt: FnCtxt,\n+) {\n+    visitor.visit_vis(vis);\n+    visitor.visit_ident(ident);\n+    walk_list!(visitor, visit_attribute, attrs);\n+    match kind {\n+        AssocItemKind::Const(ty, expr) | AssocItemKind::Static(ty, _, expr) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        AssocItemKind::Fn(ref sig, ref generics, ref body) => {\n+        AssocItemKind::Fn(sig, generics, body) => {\n             visitor.visit_generics(generics);\n-            let kind = FnKind::Fn(FnCtxt::Assoc(ctxt), item.ident, sig, &item.vis, body.as_deref());\n-            visitor.visit_fn(kind, item.span, item.id);\n+            let kind = FnKind::Fn(ctxt, ident, sig, vis, body.as_deref());\n+            visitor.visit_fn(kind, span, id);\n         }\n-        AssocItemKind::TyAlias(ref generics, ref bounds, ref ty) => {\n+        AssocItemKind::TyAlias(generics, bounds, ty) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n             walk_list!(visitor, visit_ty, ty);\n         }\n-        AssocItemKind::Macro(ref mac) => {\n+        AssocItemKind::Macro(mac) => {\n             visitor.visit_mac(mac);\n         }\n     }"}]}