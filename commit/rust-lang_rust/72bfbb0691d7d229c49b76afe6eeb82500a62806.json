{"sha": "72bfbb0691d7d229c49b76afe6eeb82500a62806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmZiYjA2OTFkN2QyMjljNDliNzZhZmU2ZWViODI1MDBhNjI4MDY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-28T22:36:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-28T22:49:57Z"}, "message": "Return all usages inside macros in usage searches", "tree": {"sha": "51ff293687cae514481c81a541b77cf648aaf016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ff293687cae514481c81a541b77cf648aaf016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bfbb0691d7d229c49b76afe6eeb82500a62806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bfbb0691d7d229c49b76afe6eeb82500a62806", "html_url": "https://github.com/rust-lang/rust/commit/72bfbb0691d7d229c49b76afe6eeb82500a62806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bfbb0691d7d229c49b76afe6eeb82500a62806/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "512135920d6f904b316cfa5d508cf830db0d6461", "url": "https://api.github.com/repos/rust-lang/rust/commits/512135920d6f904b316cfa5d508cf830db0d6461", "html_url": "https://github.com/rust-lang/rust/commit/512135920d6f904b316cfa5d508cf830db0d6461"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "cb1efb90ab97d145d04004119012ead38341d486", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72bfbb0691d7d229c49b76afe6eeb82500a62806/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfbb0691d7d229c49b76afe6eeb82500a62806/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=72bfbb0691d7d229c49b76afe6eeb82500a62806", "patch": "@@ -181,7 +181,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         node: &SyntaxNode,\n         offset: TextSize,\n     ) -> Option<N> {\n-        self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n+        self.imp.descend_node_at_offset(node, offset).flatten().find_map(N::cast)\n     }\n \n     pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n@@ -235,7 +235,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n             return Some(it);\n         }\n \n-        self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n+        self.imp.descend_node_at_offset(node, offset).flatten().find_map(N::cast)\n     }\n \n     /// Find an AstNode by offset inside SyntaxNode, if it is inside *MacroCall*,\n@@ -245,7 +245,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         node: &SyntaxNode,\n         offset: TextSize,\n     ) -> impl Iterator<Item = N> + 'slf {\n-        self.imp.descend_node_at_offset(node, offset).flat_map(N::cast)\n+        self.imp.descend_node_at_offset(node, offset).filter_map(|mut it| it.find_map(N::cast))\n     }\n \n     pub fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n@@ -542,11 +542,11 @@ impl<'db> SemanticsImpl<'db> {\n         &self,\n         node: &SyntaxNode,\n         offset: TextSize,\n-    ) -> impl Iterator<Item = SyntaxNode> + '_ {\n+    ) -> impl Iterator<Item = impl Iterator<Item = SyntaxNode> + '_> + '_ {\n         // Handle macro token cases\n         node.token_at_offset(offset)\n-            .flat_map(move |token| self.descend_into_macros(token))\n-            .map(move |it| self.token_ancestors_with_macros(it))\n+            .map(move |token| self.descend_into_macros(token))\n+            .map(|it| it.into_iter().map(move |it| self.token_ancestors_with_macros(it)))\n             .flatten()\n     }\n "}, {"sha": "e442cf7c4fae8ca4723e8cfc0aa4836af4d828aa", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72bfbb0691d7d229c49b76afe6eeb82500a62806/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfbb0691d7d229c49b76afe6eeb82500a62806/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=72bfbb0691d7d229c49b76afe6eeb82500a62806", "patch": "@@ -424,6 +424,7 @@ macro_rules! foo {\n foo!(bar$0);\n   // ^^^\n   // ^^^\n+  // ^^^\n fn foo() {\n     let bar: bar = bar();\n           // ^^^\n@@ -442,6 +443,7 @@ macro_rules! foo {\n \n foo!(bar);\n   // ^^^\n+  // ^^^\n fn foo() {\n     let bar: bar$0 = bar();\n           // ^^^"}, {"sha": "b125d1666f07c9ca1a8b75354ea4d7fcf3d5b4a0", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bfbb0691d7d229c49b76afe6eeb82500a62806/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bfbb0691d7d229c49b76afe6eeb82500a62806/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=72bfbb0691d7d229c49b76afe6eeb82500a62806", "patch": "@@ -393,7 +393,7 @@ impl<'a> FindUsages<'a> {\n                     continue;\n                 }\n \n-                if let Some(name) = sema.find_node_at_offset_with_descend(&tree, offset) {\n+                for name in sema.find_nodes_at_offset_with_descend(&tree, offset) {\n                     if match name {\n                         ast::NameLike::NameRef(name_ref) => self.found_name_ref(&name_ref, sink),\n                         ast::NameLike::Name(name) => self.found_name(&name, sink),\n@@ -410,9 +410,7 @@ impl<'a> FindUsages<'a> {\n                         continue;\n                     }\n \n-                    if let Some(ast::NameLike::NameRef(name_ref)) =\n-                        sema.find_node_at_offset_with_descend(&tree, offset)\n-                    {\n+                    for name_ref in sema.find_nodes_at_offset_with_descend(&tree, offset) {\n                         if self.found_self_ty_name_ref(self_ty, &name_ref, sink) {\n                             return;\n                         }"}]}