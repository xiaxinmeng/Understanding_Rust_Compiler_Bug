{"sha": "0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNGQyZmQ0NDc2MDJmOGNjOWNmMmViOTg1MWNkZmRkZmJjZDZmM2Q=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-03-31T18:43:33Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-04-23T13:40:32Z"}, "message": "Revert \"Rollup merge of #82296 - spastorino:pubrules, r=nikomatsakis\"\n\nThis reverts commit e2561c58a41023a14e0e583113dcf55e1ecb236a, reversing\nchanges made to 2982ba50fc4bb629b8fe4108a81cb2f9b053510b.", "tree": {"sha": "6e5549a1d04acb5a99655b1e6076d7e60c45379e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5549a1d04acb5a99655b1e6076d7e60c45379e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmCCzlAACgkQgTGiTgx5\n76+7rA/+LBZby5OrOnt+Jxy1fkH1Q+2l/2VJBKVoAod/UXRmE0x3jvVZWsvNuxvm\nrfkDgeIBK/5ja1z1pt/ppoyRf658EQweeuEK92Rhlp+71CaLvBIOAvIW858R9JtX\nQ9PAFwMcfs2gS3mlbaXcm4R2fN6TMMt5BsBD13sG3LNbBw3GipIcPrAhzAynhfO1\nrqwb2fOArkFSSXlCcwYac12BgKEVYO417W7bhFLx6u0kgFG/Tx3S9XDzEtP/kWIN\n8BbGf9NAB8lm47oJCpChFNz4kQbtOwM9bPkEsldaxltH4Qgr49QJP4JrFnJUw56E\ndGfEhGfjnylOAfaKdtIyF72y36qnc4dBcGnvE8In2+PxQkJUy5iSYa80R3TZ+pjh\nw75ExqeqIbcJsDTWP3fFceEerCjrjWXZEJXBaxVejQp83EtFPbcdvzMcTuO8nmfO\n5MKD1DbOr2lYkrlkrvTQLC5qYNojGxuBOkMLZfdES0xFDvXJIJ0TspGAb3bxBST7\n/IV/q/7s6ZX841G/mbQp4pkE5HrfVcWLPv2WCxpd6IV78rACB5D6IF8zyOmHjHx+\n5j4dvqJHv8IsmcpxNP7gkqG2a1jrTYt1rAUy6eJ4kSd4I2K6aieJOv04kH3oMdhF\n29GlS9XGn0gFRZI8uYlQMmEFWsShBmjCQkM9pwSWgJhWkXwWydQ=\n=Kxl6\n-----END PGP SIGNATURE-----", "payload": "tree 6e5549a1d04acb5a99655b1e6076d7e60c45379e\nparent 5f1aeb52c22e3784928765e34be6dc0d17a350b4\nauthor Santiago Pastorino <spastorino@gmail.com> 1617216213 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1619185232 -0300\n\nRevert \"Rollup merge of #82296 - spastorino:pubrules, r=nikomatsakis\"\n\nThis reverts commit e2561c58a41023a14e0e583113dcf55e1ecb236a, reversing\nchanges made to 2982ba50fc4bb629b8fe4108a81cb2f9b053510b.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "html_url": "https://github.com/rust-lang/rust/commit/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1aeb52c22e3784928765e34be6dc0d17a350b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1aeb52c22e3784928765e34be6dc0d17a350b4", "html_url": "https://github.com/rust-lang/rust/commit/5f1aeb52c22e3784928765e34be6dc0d17a350b4"}], "stats": {"total": 218, "additions": 35, "deletions": 183}, "files": [{"sha": "c73c6a807987d5fb7efaa5aceaa60f827d7b7e26", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -691,7 +691,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         // involved, so we only emit errors where there are no other parsing errors.\n         gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n     }\n-    gate_all!(pub_macro_rules, \"`pub` on `macro_rules` items is unstable\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "f9bc2e86618dc2fd231cff8120db858841a6c192", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -624,9 +624,6 @@ declare_features! (\n     /// Allows macro attributes to observe output of `#[derive]`.\n     (active, macro_attributes_in_derive_output, \"1.51.0\", Some(81119), None),\n \n-    /// Allows `pub` on `macro_rules` items.\n-    (active, pub_macro_rules, \"1.52.0\", Some(78855), None),\n-\n     /// Allows the use of type alias impl trait in function return positions\n     (active, min_type_alias_impl_trait, \"1.52.0\", Some(63063), None),\n "}, {"sha": "acf3867cf8920608c2ad4b40858c0de037656210", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -1478,7 +1478,15 @@ impl<'a> Parser<'a> {\n         let vstr = pprust::vis_to_string(vis);\n         let vstr = vstr.trim_end();\n         if macro_rules {\n-            self.sess.gated_spans.gate(sym::pub_macro_rules, vis.span);\n+            let msg = format!(\"can't qualify macro_rules invocation with `{}`\", vstr);\n+            self.struct_span_err(vis.span, &msg)\n+                .span_suggestion(\n+                    vis.span,\n+                    \"try exporting the macro\",\n+                    \"#[macro_export]\".to_owned(),\n+                    Applicability::MaybeIncorrect, // speculative\n+                )\n+                .emit();\n         } else {\n             self.struct_span_err(vis.span, \"can't qualify macro invocation with `pub`\")\n                 .span_suggestion("}, {"sha": "b5c95cfcb29cbe46e57f414ecef95e53bed03674", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -1230,13 +1230,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n-        let is_macro_export = self.r.session.contains_name(&item.attrs, sym::macro_export);\n         self.r.macro_map.insert(def_id.to_def_id(), ext);\n         self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n-        if macro_rules && matches!(item.vis.kind, ast::VisibilityKind::Inherited) {\n+        if macro_rules {\n             let ident = ident.normalize_to_macros_2_0();\n             self.r.macro_names.insert(ident);\n+            let is_macro_export = self.r.session.contains_name(&item.attrs, sym::macro_export);\n             let vis = if is_macro_export {\n                 ty::Visibility::Public\n             } else {\n@@ -1261,11 +1261,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 }),\n             ))\n         } else {\n-            if is_macro_export {\n-                let what = if macro_rules { \"`macro_rules` with `pub`\" } else { \"`macro` items\" };\n-                let msg = format!(\"`#[macro_export]` cannot be used on {what}\");\n-                self.r.session.span_err(item.span, &msg);\n-            }\n             let module = parent_scope.module;\n             let vis = match item.kind {\n                 // Visibilities must not be resolved non-speculatively twice"}, {"sha": "681206dfb6ab3ea72b9a90cfbc97d34322fc6d65", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -903,7 +903,6 @@ symbols! {\n         ptr_null,\n         ptr_null_mut,\n         ptr_offset_from,\n-        pub_macro_rules,\n         pub_restricted,\n         pure,\n         pushpop_unsafe,"}, {"sha": "c5393703f70919687a92b223d99b6bb6f244453c", "filename": "src/test/ui/did_you_mean/pub-macro-rules.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.rs?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -0,0 +1,16 @@\n+#[macro_use] mod bleh {\n+    pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation\n+        ($n:ident) => (\n+            fn $n () -> i32 {\n+                1\n+            }\n+        )\n+    }\n+\n+}\n+\n+foo!(meh);\n+\n+fn main() {\n+    println!(\"{}\", meh());\n+}"}, {"sha": "0bde5783b8cc615e1784c6f31e491dbbeb1882b5", "filename": "src/test/ui/did_you_mean/pub-macro-rules.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fpub-macro-rules.stderr?ref=0e4d2fd447602f8cc9cf2eb9851cdfddfbcd6f3d", "patch": "@@ -0,0 +1,8 @@\n+error: can't qualify macro_rules invocation with `pub`\n+  --> $DIR/pub-macro-rules.rs:2:5\n+   |\n+LL |     pub macro_rules! foo {\n+   |     ^^^ help: try exporting the macro: `#[macro_export]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5504ec317ae59d597ff40b03308b645a6ce0b492", "filename": "src/test/ui/feature-gates/feature-gate-pub_macro_rules.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.rs?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,10 +0,0 @@\n-pub macro_rules! m1 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n-\n-#[cfg(FALSE)]\n-pub macro_rules! m2 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n-\n-pub(crate) macro_rules! m3 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n-\n-pub(in self) macro_rules! m4 { () => {} } //~ ERROR `pub` on `macro_rules` items is unstable\n-\n-fn main() {}"}, {"sha": "bfaec398d9a976fc58587b6aec8d4350a392abc2", "filename": "src/test/ui/feature-gates/feature-gate-pub_macro_rules.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-pub_macro_rules.stderr?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,39 +0,0 @@\n-error[E0658]: `pub` on `macro_rules` items is unstable\n-  --> $DIR/feature-gate-pub_macro_rules.rs:1:1\n-   |\n-LL | pub macro_rules! m1 { () => {} }\n-   | ^^^\n-   |\n-   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n-   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n-\n-error[E0658]: `pub` on `macro_rules` items is unstable\n-  --> $DIR/feature-gate-pub_macro_rules.rs:4:1\n-   |\n-LL | pub macro_rules! m2 { () => {} }\n-   | ^^^\n-   |\n-   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n-   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n-\n-error[E0658]: `pub` on `macro_rules` items is unstable\n-  --> $DIR/feature-gate-pub_macro_rules.rs:6:1\n-   |\n-LL | pub(crate) macro_rules! m3 { () => {} }\n-   | ^^^^^^^^^^\n-   |\n-   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n-   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n-\n-error[E0658]: `pub` on `macro_rules` items is unstable\n-  --> $DIR/feature-gate-pub_macro_rules.rs:8:1\n-   |\n-LL | pub(in self) macro_rules! m4 { () => {} }\n-   | ^^^^^^^^^^^^\n-   |\n-   = note: see issue #78855 <https://github.com/rust-lang/rust/issues/78855> for more information\n-   = help: add `#![feature(pub_macro_rules)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "467c6ba7b78e4caa60eaf32ea917dc6f0b00cf91", "filename": "src/test/ui/macros/macro-export-on-modularized-macros.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.rs?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,11 +0,0 @@\n-#![feature(decl_macro)]\n-#![feature(pub_macro_rules)]\n-\n-#[macro_export]\n-macro m1() {} //~ ERROR `#[macro_export]` cannot be used on `macro` items\n-\n-#[macro_export]\n-pub macro_rules! m2 { () => {} }\n-//~^ ERROR `#[macro_export]` cannot be used on `macro_rules` with `pub`\n-\n-fn main() {}"}, {"sha": "8bb031e12cba2c54e54a490328bfb2750b797fc0", "filename": "src/test/ui/macros/macro-export-on-modularized-macros.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-export-on-modularized-macros.stderr?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,14 +0,0 @@\n-error: `#[macro_export]` cannot be used on `macro` items\n-  --> $DIR/macro-export-on-modularized-macros.rs:5:1\n-   |\n-LL | macro m1() {}\n-   | ^^^^^^^^^^^^^\n-\n-error: `#[macro_export]` cannot be used on `macro_rules` with `pub`\n-  --> $DIR/macro-export-on-modularized-macros.rs:8:1\n-   |\n-LL | pub macro_rules! m2 { () => {} }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "bdb4c73f18b1878ff4d0a94eeccf9db4fbad8651", "filename": "src/test/ui/macros/pub-macro-rules-fail.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.rs?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,28 +0,0 @@\n-#![feature(pub_macro_rules)]\n-\n-#[macro_use]\n-mod m {\n-    pub macro_rules! mac { () => {} }\n-\n-    // `pub` `macro_rules` cannot be redefined in the same module.\n-    pub macro_rules! mac { () => {} } //~ ERROR the name `mac` is defined multiple times\n-\n-    pub(self) macro_rules! private_mac { () => {} }\n-}\n-\n-const _: () = {\n-    pub macro_rules! block_mac { () => {} }\n-};\n-\n-mod n {\n-    // Scope of `pub` `macro_rules` is not extended by `#[macro_use]`.\n-    mac!(); //~ ERROR cannot find macro `mac` in this scope\n-\n-    // `pub` `macro_rules` doesn't put the macro into the root module, unlike `#[macro_export]`.\n-    crate::mac!(); //~ ERROR failed to resolve: maybe a missing crate `mac`\n-    crate::block_mac!(); //~ ERROR failed to resolve: maybe a missing crate `block_mac`\n-\n-    crate::m::private_mac!(); //~ ERROR macro `private_mac` is private\n-}\n-\n-fn main() {}"}, {"sha": "588d79dd76a4b9c76b1a1176304df7001c1244c5", "filename": "src/test/ui/macros/pub-macro-rules-fail.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules-fail.stderr?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,48 +0,0 @@\n-error[E0428]: the name `mac` is defined multiple times\n-  --> $DIR/pub-macro-rules-fail.rs:8:5\n-   |\n-LL |     pub macro_rules! mac { () => {} }\n-   |     -------------------- previous definition of the macro `mac` here\n-...\n-LL |     pub macro_rules! mac { () => {} }\n-   |     ^^^^^^^^^^^^^^^^^^^^ `mac` redefined here\n-   |\n-   = note: `mac` must be defined only once in the macro namespace of this module\n-\n-error[E0433]: failed to resolve: maybe a missing crate `mac`?\n-  --> $DIR/pub-macro-rules-fail.rs:22:12\n-   |\n-LL |     crate::mac!();\n-   |            ^^^ maybe a missing crate `mac`?\n-\n-error[E0433]: failed to resolve: maybe a missing crate `block_mac`?\n-  --> $DIR/pub-macro-rules-fail.rs:23:12\n-   |\n-LL |     crate::block_mac!();\n-   |            ^^^^^^^^^ maybe a missing crate `block_mac`?\n-\n-error: cannot find macro `mac` in this scope\n-  --> $DIR/pub-macro-rules-fail.rs:19:5\n-   |\n-LL |     mac!();\n-   |     ^^^\n-   |\n-   = note: consider importing this macro:\n-           m::mac\n-\n-error[E0603]: macro `private_mac` is private\n-  --> $DIR/pub-macro-rules-fail.rs:25:15\n-   |\n-LL |     crate::m::private_mac!();\n-   |               ^^^^^^^^^^^ private macro\n-   |\n-note: the macro `private_mac` is defined here\n-  --> $DIR/pub-macro-rules-fail.rs:10:5\n-   |\n-LL |     pub(self) macro_rules! private_mac { () => {} }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0428, E0433, E0603.\n-For more information about an error, try `rustc --explain E0428`."}, {"sha": "cd4a845f7c07dd3cc8bd6a834612b36772980566", "filename": "src/test/ui/macros/pub-macro-rules.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1aeb52c22e3784928765e34be6dc0d17a350b4/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fpub-macro-rules.rs?ref=5f1aeb52c22e3784928765e34be6dc0d17a350b4", "patch": "@@ -1,20 +0,0 @@\n-// check-pass\n-\n-#![feature(pub_macro_rules)]\n-\n-mod m {\n-    // `pub` `macro_rules` can be used earlier in item order than they are defined.\n-    foo!();\n-\n-    pub macro_rules! foo { () => {} }\n-\n-    // `pub(...)` works too.\n-    pub(super) macro_rules! bar { () => {} }\n-}\n-\n-// `pub` `macro_rules` are available by module path.\n-m::foo!();\n-\n-m::bar!();\n-\n-fn main() {}"}]}