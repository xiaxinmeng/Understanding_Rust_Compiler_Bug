{"sha": "0a20eed2db233dad2eb9594cf28790842970c1d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjBlZWQyZGIyMzNkYWQyZWI5NTk0Y2YyODc5MDg0Mjk3MGMxZDY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T10:42:51Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T11:20:12Z"}, "message": "Make ptr::addr_of return an immutable vec, add mut_addr_of", "tree": {"sha": "7388d493e37656a119d81cec71bd65a8cae11abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7388d493e37656a119d81cec71bd65a8cae11abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a20eed2db233dad2eb9594cf28790842970c1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a20eed2db233dad2eb9594cf28790842970c1d6", "html_url": "https://github.com/rust-lang/rust/commit/0a20eed2db233dad2eb9594cf28790842970c1d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a20eed2db233dad2eb9594cf28790842970c1d6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf9e05611e966344c250353b8e220469885c93c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf9e05611e966344c250353b8e220469885c93c", "html_url": "https://github.com/rust-lang/rust/commit/eaf9e05611e966344c250353b8e220469885c93c"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "4c4ad0eba7bd2733887d2de2eff5466808d75362", "filename": "doc/tutorial/ffi.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/doc%2Ftutorial%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/doc%2Ftutorial%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fffi.md?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -162,9 +162,10 @@ This program uses the Posix function `gettimeofday` to get a\n microsecond-resolution timer.\n \n     use std;\n-    type timeval = {tv_sec: u32, tv_usec: u32};\n+    type timeval = {mutable tv_sec: u32,\n+                    mutable tv_usec: u32};\n     native \"cdecl\" mod libc = \"\" {\n-        fn gettimeofday(tv: *mutable timeval, tz: *()) -> i32;\n+        fn gettimeofday(tv: *timeval, tz: *()) -> i32;\n     }\n     fn unix_time_in_microseconds() -> u64 unsafe {\n         let x = {tv_sec: 0u32, tv_usec: 0u32};"}, {"sha": "b2c93beb643c60977944b2b0f6ca7335909d6eb2", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -64,7 +64,7 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }\n \n fn pipe() -> {in: int, out: int} {\n     let fds = {mutable in: 0, mutable out: 0};\n-    assert (os::libc::pipe(ptr::addr_of(fds.in)) == 0);\n+    assert (os::libc::pipe(ptr::mut_addr_of(fds.in)) == 0);\n     ret {in: fds.in, out: fds.out};\n }\n "}, {"sha": "9de76a170d5f5ee242faeddfd7edc5a05dc6f13c", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -57,7 +57,7 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".dylib\"; }\n \n fn pipe() -> {in: int, out: int} {\n     let fds = {mutable in: 0, mutable out: 0};\n-    assert (os::libc::pipe(ptr::addr_of(fds.in)) == 0);\n+    assert (os::libc::pipe(ptr::mut_addr_of(fds.in)) == 0);\n     ret {in: fds.in, out: fds.out};\n }\n \n@@ -82,7 +82,8 @@ fn get_exe_path() -> option::t<fs::path> {\n     let bufsize = 1023u32;\n     let path = str::unsafe_from_bytes(vec::init_elt(0u8, bufsize as uint));\n     ret str::as_buf(path, { |path_buf|\n-        if libc::_NSGetExecutablePath(path_buf, ptr::addr_of(bufsize)) == 0 {\n+        if libc::_NSGetExecutablePath(path_buf,\n+                                      ptr::mut_addr_of(bufsize)) == 0 {\n             option::some(fs::dirname(path) + fs::path_sep())\n         } else {\n             option::none"}, {"sha": "df30105b11d5b4a8a2021d2a46faccc68c7cd24e", "filename": "src/lib/ptr.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -4,7 +4,7 @@ Module: ptr\n Unsafe pointer utility functions\n */\n native \"rust-intrinsic\" mod rusti {\n-    fn addr_of<T>(val: T) -> *mutable T;\n+    fn addr_of<T>(val: T) -> *T;\n     fn ptr_offset<T>(ptr: *T, count: uint) -> *T;\n }\n \n@@ -13,7 +13,16 @@ Function: addr_of\n \n Get an unsafe pointer to a value\n */\n-fn addr_of<T>(val: T) -> *mutable T { ret rusti::addr_of(val); }\n+fn addr_of<T>(val: T) -> *T { ret rusti::addr_of(val); }\n+\n+/*\n+Function: mut_addr_of\n+\n+Get an unsafe mutable pointer to a value\n+*/\n+fn mut_addr_of<T>(val: T) -> *mutable T unsafe {\n+    ret unsafe::reinterpret_cast(rusti::addr_of(val));\n+}\n \n /*\n Function: offset"}, {"sha": "9cbb8adb5b6df988496156eecc786bf8c1446b42", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -66,7 +66,7 @@ fn pipe() -> {in: int, out: int} {\n     // first, as in rust_run_program.\n     let fds = {mutable in: 0, mutable out: 0};\n     let res =\n-        os::libc::_pipe(ptr::addr_of(fds.in), 1024u,\n+        os::libc::_pipe(ptr::mut_addr_of(fds.in), 1024u,\n                         libc_constants::O_BINARY() |\n                             libc_constants::O_NOINHERIT());\n     assert (res == 0);"}, {"sha": "fdd2cbb970556d025925411bbbf50419ad912699", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -10,7 +10,7 @@ fn main() {\n \n     unsafe {\n         let a = 0;\n-        let v = std::ptr::addr_of(a);\n+        let v = std::ptr::mut_addr_of(a);\n         f(v);\n     }\n }"}, {"sha": "8f19ebd1dff5933d8dd54725d584538e8593ab8e", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -4,7 +4,7 @@ use std;\n \n fn main() {\n     let a = [0];\n-    let v: *mutable [int] = std::ptr::addr_of(a);\n+    let v: *mutable [int] = std::ptr::mut_addr_of(a);\n \n     fn f(&&v: *mutable [mutable? int]) {\n         unsafe {"}, {"sha": "6a353bcdeeaa6422c9f4ae3d26e4a3ac7f550bd3", "filename": "src/test/stdtest/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Ftest%2Fstdtest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a20eed2db233dad2eb9594cf28790842970c1d6/src%2Ftest%2Fstdtest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fptr.rs?ref=0a20eed2db233dad2eb9594cf28790842970c1d6", "patch": "@@ -7,7 +7,7 @@ type pair = {mutable fst: int, mutable snd: int};\n #[test]\n fn test() unsafe {\n     let p = {mutable fst: 10, mutable snd: 20};\n-    let pptr: *mutable pair = ptr::addr_of(p);\n+    let pptr: *mutable pair = ptr::mut_addr_of(p);\n     let iptr: *mutable int = unsafe::reinterpret_cast(pptr);\n     assert (*iptr == 10);;\n     *iptr = 30;"}]}