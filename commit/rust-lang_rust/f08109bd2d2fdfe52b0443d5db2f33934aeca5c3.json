{"sha": "f08109bd2d2fdfe52b0443d5db2f33934aeca5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwODEwOWJkMmQyZmRmZTUyYjA0NDNkNWRiMmYzMzkzNGFlY2E1YzM=", "commit": {"author": {"name": "Daniel Frampton", "email": "Daniel.Frampton@microsoft.com", "date": "2021-01-04T20:56:21Z"}, "committer": {"name": "Daniel Frampton", "email": "Daniel.Frampton@microsoft.com", "date": "2021-01-05T04:37:50Z"}, "message": "Introduce new queries to compute\n  1) the set of attributes for all variants of an enum, and\n  2) the set of attributes for all fields of a variant.\n\nThis avoids the current n^2 behavior when rendering completion for variants, which\nprevents completion for enums with large numbers of variants.", "tree": {"sha": "c7a136c0052ea33eae0524f160221f19775c6f29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7a136c0052ea33eae0524f160221f19775c6f29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3", "html_url": "https://github.com/rust-lang/rust/commit/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3/comments", "author": {"login": "danielframpton", "id": 15899604, "node_id": "MDQ6VXNlcjE1ODk5NjA0", "avatar_url": "https://avatars.githubusercontent.com/u/15899604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielframpton", "html_url": "https://github.com/danielframpton", "followers_url": "https://api.github.com/users/danielframpton/followers", "following_url": "https://api.github.com/users/danielframpton/following{/other_user}", "gists_url": "https://api.github.com/users/danielframpton/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielframpton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielframpton/subscriptions", "organizations_url": "https://api.github.com/users/danielframpton/orgs", "repos_url": "https://api.github.com/users/danielframpton/repos", "events_url": "https://api.github.com/users/danielframpton/events{/privacy}", "received_events_url": "https://api.github.com/users/danielframpton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielframpton", "id": 15899604, "node_id": "MDQ6VXNlcjE1ODk5NjA0", "avatar_url": "https://avatars.githubusercontent.com/u/15899604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielframpton", "html_url": "https://github.com/danielframpton", "followers_url": "https://api.github.com/users/danielframpton/followers", "following_url": "https://api.github.com/users/danielframpton/following{/other_user}", "gists_url": "https://api.github.com/users/danielframpton/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielframpton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielframpton/subscriptions", "organizations_url": "https://api.github.com/users/danielframpton/orgs", "repos_url": "https://api.github.com/users/danielframpton/repos", "events_url": "https://api.github.com/users/danielframpton/events{/privacy}", "received_events_url": "https://api.github.com/users/danielframpton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b86ff3e91838e58397ec39502d85056e46fcfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b86ff3e91838e58397ec39502d85056e46fcfcb", "html_url": "https://github.com/rust-lang/rust/commit/5b86ff3e91838e58397ec39502d85056e46fcfcb"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "9e6426b3148a3b97ba9a60e7fc59f1dfd9b229ad", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=f08109bd2d2fdfe52b0443d5db2f33934aeca5c3", "patch": "@@ -2,6 +2,7 @@\n \n use std::{ops, sync::Arc};\n \n+use arena::map::ArenaMap;\n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n@@ -21,7 +22,8 @@ use crate::{\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},\n     src::HasChildSource,\n-    AdtId, AttrDefId, GenericParamId, Lookup,\n+    AdtId, AttrDefId, EnumId, GenericParamId, HasModule, LocalEnumVariantId, LocalFieldId, Lookup,\n+    VariantId,\n };\n \n /// Holds documentation\n@@ -210,16 +212,10 @@ impl Attrs {\n                 }\n             }\n             AttrDefId::FieldId(it) => {\n-                let src = it.parent.child_source(db);\n-                match &src.value[it.local_id] {\n-                    Either::Left(_tuple) => RawAttrs::default(),\n-                    Either::Right(record) => RawAttrs::from_attrs_owner(db, src.with_value(record)),\n-                }\n+                return db.fields_attrs(it.parent)[it.local_id].clone();\n             }\n-            AttrDefId::EnumVariantId(var_id) => {\n-                let src = var_id.parent.child_source(db);\n-                let src = src.as_ref().map(|it| &it[var_id.local_id]);\n-                RawAttrs::from_attrs_owner(db, src.map(|it| it as &dyn AttrsOwner))\n+            AttrDefId::EnumVariantId(it) => {\n+                return db.variants_attrs(it.parent)[it.local_id].clone();\n             }\n             AttrDefId::AdtId(it) => match it {\n                 AdtId::StructId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n@@ -259,6 +255,46 @@ impl Attrs {\n         raw_attrs.filter(db, def.krate(db))\n     }\n \n+    pub(crate) fn variants_attrs_query(\n+        db: &dyn DefDatabase,\n+        e: EnumId,\n+    ) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>> {\n+        let krate = e.lookup(db).container.module(db).krate;\n+        let src = e.child_source(db);\n+        let mut res = ArenaMap::default();\n+\n+        for (id, var) in src.value.iter() {\n+            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(var as &dyn AttrsOwner))\n+                .filter(db, krate);\n+\n+            res.insert(id, attrs)\n+        }\n+\n+        Arc::new(res)\n+    }\n+\n+    pub(crate) fn fields_attrs_query(\n+        db: &dyn DefDatabase,\n+        v: VariantId,\n+    ) -> Arc<ArenaMap<LocalFieldId, Attrs>> {\n+        let krate = v.module(db).krate;\n+        let src = v.child_source(db);\n+        let mut res = ArenaMap::default();\n+\n+        for (id, fld) in src.value.iter() {\n+            let attrs = match fld {\n+                Either::Left(_tuple) => Attrs::default(),\n+                Either::Right(record) => {\n+                    RawAttrs::from_attrs_owner(db, src.with_value(record)).filter(db, krate)\n+                }\n+            };\n+\n+            res.insert(id, attrs);\n+        }\n+\n+        Arc::new(res)\n+    }\n+\n     pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n         AttrQuery { attrs: self, key }\n     }"}, {"sha": "d3bf5b34cf5e9130ddd4610ac276a2272a95b9f2", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08109bd2d2fdfe52b0443d5db2f33934aeca5c3/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=f08109bd2d2fdfe52b0443d5db2f33934aeca5c3", "patch": "@@ -1,6 +1,7 @@\n //! Defines database & queries for name resolution.\n use std::sync::Arc;\n \n+use arena::map::ArenaMap;\n use base_db::{salsa, CrateId, SourceDatabase, Upcast};\n use hir_expand::{db::AstDatabase, HirFileId};\n use syntax::SmolStr;\n@@ -16,8 +17,8 @@ use crate::{\n     lang_item::{LangItemTarget, LangItems},\n     nameres::CrateDefMap,\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n-    GenericDefId, ImplId, ImplLoc, StaticId, StaticLoc, StructId, StructLoc, TraitId, TraitLoc,\n-    TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n+    GenericDefId, ImplId, ImplLoc, LocalEnumVariantId, LocalFieldId, StaticId, StaticLoc, StructId,\n+    StructLoc, TraitId, TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc, VariantId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -92,6 +93,12 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(GenericParams::generic_params_query)]\n     fn generic_params(&self, def: GenericDefId) -> Arc<GenericParams>;\n \n+    #[salsa::invoke(Attrs::variants_attrs_query)]\n+    fn variants_attrs(&self, def: EnumId) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>>;\n+\n+    #[salsa::invoke(Attrs::fields_attrs_query)]\n+    fn fields_attrs(&self, def: VariantId) -> Arc<ArenaMap<LocalFieldId, Attrs>>;\n+\n     #[salsa::invoke(Attrs::attrs_query)]\n     fn attrs(&self, def: AttrDefId) -> Attrs;\n "}]}