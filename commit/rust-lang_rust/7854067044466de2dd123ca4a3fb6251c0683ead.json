{"sha": "7854067044466de2dd123ca4a3fb6251c0683ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NTQwNjcwNDQ0NjZkZTJkZDEyM2NhNGEzZmI2MjUxYzA2ODNlYWQ=", "commit": {"author": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-08T18:04:11Z"}, "committer": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-08T18:04:11Z"}, "message": "Saturating add/sub intrinsic emulation refactor/comments #58030", "tree": {"sha": "e15096e1587448b17e3a74df48540940805fbc3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15096e1587448b17e3a74df48540940805fbc3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7854067044466de2dd123ca4a3fb6251c0683ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7854067044466de2dd123ca4a3fb6251c0683ead", "html_url": "https://github.com/rust-lang/rust/commit/7854067044466de2dd123ca4a3fb6251c0683ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7854067044466de2dd123ca4a3fb6251c0683ead/comments", "author": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da13fbda5e28482d01205d791f38a645a396ea65", "url": "https://api.github.com/repos/rust-lang/rust/commits/da13fbda5e28482d01205d791f38a645a396ea65", "html_url": "https://github.com/rust-lang/rust/commit/da13fbda5e28482d01205d791f38a645a396ea65"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "48fa8568396024449be11709f94c2c98a7651bee", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7854067044466de2dd123ca4a3fb6251c0683ead/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7854067044466de2dd123ca4a3fb6251c0683ead/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=7854067044466de2dd123ca4a3fb6251c0683ead", "patch": "@@ -132,15 +132,22 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     BinOp::Sub\n                 }, l, r)?;\n                 let val = if overflowed {\n-                    // For signed ints the saturated value depends on the\n-                    // sign of the first term\n-                    let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n                     let num_bits = l.layout.size.bits();\n                     if l.layout.abi.is_signed() {\n-                        if first_term & (1 << (num_bits-1)) == 0 {  // first term is positive\n+                        // For signed ints the saturated value depends on the sign of the first\n+                        // term since the sign of the second term can be inferred from this and\n+                        // the fact that the operation has overflowed (if either is 0 no\n+                        // overflow can occur)\n+                        let first_term: u128 = l.to_scalar()?.to_bits(l.layout.size)?;\n+                        let first_term_pos = first_term & (1 << (num_bits-1)) == 0;\n+                        if first_term_pos {\n+                            // Negative overflow not possible since the positive first term\n+                            // can only increase an (in range) negative term for addition\n+                            // or corresponding negated positive term for subtraction\n                             Scalar::from_uint((1u128 << (num_bits - 1)) - 1,  // max positive\n                                 Size::from_bits(num_bits))\n-                        } else {  // first term is negative\n+                        } else {\n+                            // Positive overflow not possible for similar reason\n                             // max negative\n                             Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n                         }"}]}