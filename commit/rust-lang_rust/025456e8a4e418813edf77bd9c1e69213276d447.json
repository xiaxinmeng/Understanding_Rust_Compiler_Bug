{"sha": "025456e8a4e418813edf77bd9c1e69213276d447", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNTQ1NmU4YTRlNDE4ODEzZWRmNzdiZDljMWU2OTIxMzI3NmQ0NDc=", "commit": {"author": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-11-23T22:43:36Z"}, "committer": {"name": "Austin Hicks", "email": "camlorn@camlorn.net", "date": "2016-12-14T17:28:25Z"}, "message": "Incorporate review comments", "tree": {"sha": "be98a919fcee9eb275b5426a591c1b4c59ade7e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be98a919fcee9eb275b5426a591c1b4c59ade7e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/025456e8a4e418813edf77bd9c1e69213276d447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/025456e8a4e418813edf77bd9c1e69213276d447", "html_url": "https://github.com/rust-lang/rust/commit/025456e8a4e418813edf77bd9c1e69213276d447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/025456e8a4e418813edf77bd9c1e69213276d447/comments", "author": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahicks92", "id": 6968705, "node_id": "MDQ6VXNlcjY5Njg3MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6968705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahicks92", "html_url": "https://github.com/ahicks92", "followers_url": "https://api.github.com/users/ahicks92/followers", "following_url": "https://api.github.com/users/ahicks92/following{/other_user}", "gists_url": "https://api.github.com/users/ahicks92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahicks92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahicks92/subscriptions", "organizations_url": "https://api.github.com/users/ahicks92/orgs", "repos_url": "https://api.github.com/users/ahicks92/repos", "events_url": "https://api.github.com/users/ahicks92/events{/privacy}", "received_events_url": "https://api.github.com/users/ahicks92/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9580e262bee0f8a5487f1a549feea561396eb20", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9580e262bee0f8a5487f1a549feea561396eb20", "html_url": "https://github.com/rust-lang/rust/commit/e9580e262bee0f8a5487f1a549feea561396eb20"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "96d66153d777e126eb0c3b5f3aa68eeb7195b2ee", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/025456e8a4e418813edf77bd9c1e69213276d447/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025456e8a4e418813edf77bd9c1e69213276d447/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=025456e8a4e418813edf77bd9c1e69213276d447", "patch": "@@ -459,11 +459,7 @@ impl Integer {\n             }\n         }\n \n-        let at_least = if let Some(i) = min_from_extern {\n-            i\n-        } else {\n-            min_default\n-        };\n+        let at_least = min_from_extern.unwrap_or(min_default);\n \n         // If there are no negative values, we can use the unsigned fit.\n         if min >= 0 {\n@@ -571,13 +567,11 @@ impl<'a, 'gcx, 'tcx> Struct {\n         if can_optimize {\n             // This exhaustive match makes new reprs force the adder to modify this function.\n             // Otherwise, things can silently break.\n-            // Note the inversion, return true to stop matching.\n+            // Note the inversion, return true to stop optimizing.\n             can_optimize = !reprs.iter().any(|r| {\n                 match *r {\n-                    attr::ReprAny => false,\n-                    attr::ReprInt(_) => false,\n-                    attr::ReprExtern => true,\n-                    attr::ReprPacked => true,\n+                    attr::ReprAny | attr::ReprInt(_) => false,\n+                    attr::ReprExtern | attr::ReprPacked => true,\n                     attr::ReprSimd => bug!(\"Simd  vectors should be represented as layout::Vector\")\n                 }\n             });\n@@ -588,7 +582,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n             StructKind::MaybeUnsizedUnivariant => (can_optimize, false),\n             StructKind::EnumVariant => {\n                 assert!(fields.len() >= 1, \"Enum variants must have discriminants.\");\n-                (can_optimize || fields[0].size(dl).bytes() == 1, true)\n+                (can_optimize && fields[0].size(dl).bytes() == 1, true)\n             }\n         };\n \n@@ -1189,7 +1183,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     });\n                 }\n \n-                if !def.is_enum() || def.variants.len() == 1 && hints.len() == 0 {\n+                if !def.is_enum() || def.variants.len() == 1 && hints.is_empty() {\n                     // Struct, or union, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n \n@@ -1239,7 +1233,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     v.fields.iter().map(|field| field.ty(tcx, substs)).collect::<Vec<_>>()\n                 }).collect::<Vec<_>>();\n \n-                if variants.len() == 2 && hints.len() == 0 {\n+                if variants.len() == 2 && hints.is_empty() {\n                     // Nullable pointer optimization\n                     for discr in 0..2 {\n                         let other_fields = variants[1 - discr].iter().map(|ty| {"}, {"sha": "e566c10583597520efbe53d8dae22a67ffb26402", "filename": "src/test/run-pass/closure-immediate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/025456e8a4e418813edf77bd9c1e69213276d447/src%2Ftest%2Frun-pass%2Fclosure-immediate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025456e8a4e418813edf77bd9c1e69213276d447/src%2Ftest%2Frun-pass%2Fclosure-immediate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-immediate.rs?ref=025456e8a4e418813edf77bd9c1e69213276d447", "patch": "@@ -19,4 +19,4 @@ fn main() {\n         assert_eq!(c, 3);\n     };\n     c(1, 2, 3);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c2fe943eed85ad65f617bf88194f9fb266f42630", "filename": "src/test/run-pass/multiple-reprs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/025456e8a4e418813edf77bd9c1e69213276d447/src%2Ftest%2Frun-pass%2Fmultiple-reprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/025456e8a4e418813edf77bd9c1e69213276d447/src%2Ftest%2Frun-pass%2Fmultiple-reprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultiple-reprs.rs?ref=025456e8a4e418813edf77bd9c1e69213276d447", "patch": "@@ -28,7 +28,6 @@ enum E2 {\n }\n \n // From pr 37429\n-pub const SIZEOF_QUERY:      usize = 21;\n \n #[repr(C,packed)]\n pub struct p0f_api_query {"}]}