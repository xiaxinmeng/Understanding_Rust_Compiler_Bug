{"sha": "08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "node_id": "C_kwDOAAsO6NoAKDA4Y2U0NGU3ZDVlYjY0OThjOTk5ZGVhNTA0MmNmYWMwZThmNWVlZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T16:04:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T16:04:00Z"}, "message": "Auto merge of #14561 - jonas-schievink:goto-included-file, r=Veykril\n\nfeat: Map tokens from `include!` expansion to the included file\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/3767", "tree": {"sha": "ffe167a4f6c73732f0f6d6f3916c25e58b67904c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffe167a4f6c73732f0f6d6f3916c25e58b67904c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "html_url": "https://github.com/rust-lang/rust/commit/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16059112c4779f4a85246d78543967cc90852dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16059112c4779f4a85246d78543967cc90852dc1", "html_url": "https://github.com/rust-lang/rust/commit/16059112c4779f4a85246d78543967cc90852dc1"}, {"sha": "901c8a4259ad5499a14e8779edea3fe1cbb98b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/901c8a4259ad5499a14e8779edea3fe1cbb98b13", "html_url": "https://github.com/rust-lang/rust/commit/901c8a4259ad5499a14e8779edea3fe1cbb98b13"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "08c924d0e9c5e8d184de4b5d61dab0832aed02c8", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "patch": "@@ -3,7 +3,7 @@\n use base_db::{AnchoredPath, Edition, FileId};\n use cfg::CfgExpr;\n use either::Either;\n-use mbe::{parse_exprs_with_sep, parse_to_token_tree};\n+use mbe::{parse_exprs_with_sep, parse_to_token_tree, TokenMap};\n use syntax::{\n     ast::{self, AstToken},\n     SmolStr,\n@@ -67,7 +67,7 @@ macro_rules! register_builtin {\n pub struct ExpandedEager {\n     pub(crate) subtree: tt::Subtree,\n     /// The included file ID of the include macro.\n-    pub(crate) included_file: Option<FileId>,\n+    pub(crate) included_file: Option<(FileId, TokenMap)>,\n }\n \n impl ExpandedEager {\n@@ -566,14 +566,14 @@ fn include_expand(\n         let path = parse_string(tt)?;\n         let file_id = relative_file(db, arg_id, &path, false)?;\n \n-        let subtree =\n-            parse_to_token_tree(&db.file_text(file_id)).ok_or(mbe::ExpandError::ConversionError)?.0;\n-        Ok((subtree, file_id))\n+        let (subtree, map) =\n+            parse_to_token_tree(&db.file_text(file_id)).ok_or(mbe::ExpandError::ConversionError)?;\n+        Ok((subtree, map, file_id))\n     })();\n \n     match res {\n-        Ok((subtree, file_id)) => {\n-            ExpandResult::ok(ExpandedEager { subtree, included_file: Some(file_id) })\n+        Ok((subtree, map, file_id)) => {\n+            ExpandResult::ok(ExpandedEager { subtree, included_file: Some((file_id, map)) })\n         }\n         Err(e) => ExpandResult::with_err(\n             ExpandedEager { subtree: tt::Subtree::empty(), included_file: None },"}, {"sha": "37c36615401efb9f836525dfb19f346682fe4d3b", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "patch": "@@ -13,10 +13,11 @@ use syntax::{\n };\n \n use crate::{\n-    ast_id_map::AstIdMap, builtin_attr_macro::pseudo_derive_attr_expansion, fixup,\n-    hygiene::HygieneFrame, tt, BuiltinAttrExpander, BuiltinDeriveExpander, BuiltinFnLikeExpander,\n-    ExpandError, ExpandResult, ExpandTo, HirFileId, HirFileIdRepr, MacroCallId, MacroCallKind,\n-    MacroCallLoc, MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n+    ast_id_map::AstIdMap, builtin_attr_macro::pseudo_derive_attr_expansion,\n+    builtin_fn_macro::EagerExpander, fixup, hygiene::HygieneFrame, tt, BuiltinAttrExpander,\n+    BuiltinDeriveExpander, BuiltinFnLikeExpander, ExpandError, ExpandResult, ExpandTo, HirFileId,\n+    HirFileIdRepr, MacroCallId, MacroCallKind, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile,\n+    ProcMacroExpander,\n };\n \n /// Total limit on the number of tokens produced by any macro invocation.\n@@ -33,6 +34,8 @@ pub enum TokenExpander {\n     DeclarativeMacro { mac: mbe::DeclarativeMacro, def_site_token_map: mbe::TokenMap },\n     /// Stuff like `line!` and `file!`.\n     Builtin(BuiltinFnLikeExpander),\n+    /// Built-in eagerly expanded fn-like macros (`include!`, `concat!`, etc.)\n+    BuiltinEager(EagerExpander),\n     /// `global_allocator` and such.\n     BuiltinAttr(BuiltinAttrExpander),\n     /// `derive(Copy)` and such.\n@@ -51,6 +54,9 @@ impl TokenExpander {\n         match self {\n             TokenExpander::DeclarativeMacro { mac, .. } => mac.expand(tt).map_err(Into::into),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt).map_err(Into::into),\n+            TokenExpander::BuiltinEager(it) => {\n+                it.expand(db, id, tt).map_err(Into::into).map(|res| res.subtree)\n+            }\n             TokenExpander::BuiltinAttr(it) => it.expand(db, id, tt),\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt),\n             TokenExpander::ProcMacro(_) => {\n@@ -66,6 +72,7 @@ impl TokenExpander {\n         match self {\n             TokenExpander::DeclarativeMacro { mac, .. } => mac.map_id_down(id),\n             TokenExpander::Builtin(..)\n+            | TokenExpander::BuiltinEager(..)\n             | TokenExpander::BuiltinAttr(..)\n             | TokenExpander::BuiltinDerive(..)\n             | TokenExpander::ProcMacro(..) => id,\n@@ -76,6 +83,7 @@ impl TokenExpander {\n         match self {\n             TokenExpander::DeclarativeMacro { mac, .. } => mac.map_id_up(id),\n             TokenExpander::Builtin(..)\n+            | TokenExpander::BuiltinEager(..)\n             | TokenExpander::BuiltinAttr(..)\n             | TokenExpander::BuiltinDerive(..)\n             | TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n@@ -412,10 +420,8 @@ fn macro_def(\n         MacroDefKind::BuiltInDerive(expander, _) => {\n             Ok(Arc::new(TokenExpander::BuiltinDerive(expander)))\n         }\n-        MacroDefKind::BuiltInEager(..) => {\n-            // FIXME: Return a random error here just to make the types align.\n-            // This obviously should do something real instead.\n-            Err(mbe::ParseError::UnexpectedToken(\"unexpected eager macro\".into()))\n+        MacroDefKind::BuiltInEager(expander, ..) => {\n+            Ok(Arc::new(TokenExpander::BuiltinEager(expander)))\n         }\n         MacroDefKind::ProcMacro(expander, ..) => Ok(Arc::new(TokenExpander::ProcMacro(expander))),\n     }"}, {"sha": "d26fdbf7d619e80905af4023fbbafac63ba5e7dc", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "patch": "@@ -20,6 +20,7 @@ pub mod mod_path;\n pub mod attrs;\n mod fixup;\n \n+use mbe::TokenMap;\n pub use mbe::{Origin, ValueResult};\n \n use ::tt::token_id as tt;\n@@ -139,7 +140,7 @@ pub enum MacroDefKind {\n struct EagerCallInfo {\n     /// NOTE: This can be *either* the expansion result, *or* the argument to the eager macro!\n     arg_or_expansion: Arc<tt::Subtree>,\n-    included_file: Option<FileId>,\n+    included_file: Option<(FileId, TokenMap)>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -206,7 +207,7 @@ impl HirFileId {\n                 HirFileIdRepr::MacroFile(MacroFile { macro_call_id }) => {\n                     let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_call_id);\n                     file_id = match loc.eager {\n-                        Some(EagerCallInfo { included_file: Some(file), .. }) => file.into(),\n+                        Some(EagerCallInfo { included_file: Some((file, _)), .. }) => file.into(),\n                         _ => loc.kind.file_id(),\n                     };\n                 }\n@@ -319,7 +320,7 @@ impl HirFileId {\n         match self.macro_file() {\n             Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n-                matches!(loc.eager, Some(EagerCallInfo { included_file: Some(_), .. }))\n+                matches!(loc.eager, Some(EagerCallInfo { included_file: Some(..), .. }))\n             }\n             _ => false,\n         }\n@@ -677,6 +678,16 @@ impl ExpansionInfo {\n         let call_id = self.expanded.file_id.macro_file()?.macro_call_id;\n         let loc = db.lookup_intern_macro_call(call_id);\n \n+        if let Some((file, map)) = loc.eager.and_then(|e| e.included_file) {\n+            // Special case: map tokens from `include!` expansions to the included file\n+            let range = map.first_range_by_token(token_id, token.value.kind())?;\n+            let source = db.parse(file);\n+\n+            let token = source.syntax_node().covering_element(range).into_token()?;\n+\n+            return Some((InFile::new(file.into(), token), Origin::Call));\n+        }\n+\n         // Attributes are a bit special for us, they have two inputs, the input tokentree and the annotated item.\n         let (token_map, tt) = match &loc.kind {\n             MacroCallKind::Attr { attr_args, is_derive: true, .. } => {"}, {"sha": "004c33a8a760bcf750a2dfa18490b068d76c3c04", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ce44e7d5eb6498c999dea5042cfac0e8f5eeda/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=08ce44e7d5eb6498c999dea5042cfac0e8f5eeda", "patch": "@@ -833,8 +833,7 @@ fn test() {\n #[rustc_builtin_macro]\n macro_rules! include {}\n \n-  include!(\"foo.rs\");\n-//^^^^^^^^^^^^^^^^^^^\n+include!(\"foo.rs\");\n \n fn f() {\n     foo$0();\n@@ -846,6 +845,7 @@ mod confuse_index {\n \n //- /foo.rs\n fn foo() {}\n+ //^^^\n         \"#,\n         );\n     }"}]}