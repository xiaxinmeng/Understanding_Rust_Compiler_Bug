{"sha": "38853459e3d964cc7f635829cdc66f5faee33d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ODUzNDU5ZTNkOTY0Y2M3ZjYzNTgyOWNkYzY2ZjVmYWVlMzNkODU=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-03T20:24:02Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-04T23:30:42Z"}, "message": "Add `ModuleSource::Block`", "tree": {"sha": "c4e60a8f5fa9c18915e8aed7857424d454cd130e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e60a8f5fa9c18915e8aed7857424d454cd130e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38853459e3d964cc7f635829cdc66f5faee33d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38853459e3d964cc7f635829cdc66f5faee33d85", "html_url": "https://github.com/rust-lang/rust/commit/38853459e3d964cc7f635829cdc66f5faee33d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38853459e3d964cc7f635829cdc66f5faee33d85/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cbedc50bcf048c87f141a85418581076d67fc7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbedc50bcf048c87f141a85418581076d67fc7a", "html_url": "https://github.com/rust-lang/rust/commit/7cbedc50bcf048c87f141a85418581076d67fc7a"}], "stats": {"total": 202, "additions": 102, "deletions": 100}, "files": [{"sha": "7706399ae5bd62ee2b8bf5e531810cd9ed3f758a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -11,6 +11,7 @@ use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n     expr::{BindingAnnotation, Pat, PatId},\n+    nameres::ModuleSource,\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n@@ -21,11 +22,11 @@ use hir_def::{\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n     name::{self, AsName},\n-    AstId, MacroDefId,\n+    MacroDefId,\n };\n use hir_ty::expr::ExprValidator;\n-use ra_db::{CrateId, Edition, FileId, FilePosition};\n-use ra_syntax::{ast, AstNode, SyntaxNode};\n+use ra_db::{CrateId, Edition};\n+use ra_syntax::ast;\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n@@ -79,64 +80,6 @@ impl Crate {\n     }\n }\n \n-pub enum ModuleSource {\n-    SourceFile(ast::SourceFile),\n-    Module(ast::Module),\n-}\n-\n-impl ModuleSource {\n-    pub fn new(\n-        db: &impl DefDatabase,\n-        file_id: Option<FileId>,\n-        decl_id: Option<AstId<ast::Module>>,\n-    ) -> ModuleSource {\n-        match (file_id, decl_id) {\n-            (Some(file_id), _) => {\n-                let source_file = db.parse(file_id).tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-            (None, Some(item_id)) => {\n-                let module = item_id.to_node(db);\n-                assert!(module.item_list().is_some(), \"expected inline module\");\n-                ModuleSource::Module(module)\n-            }\n-            (None, None) => panic!(),\n-        }\n-    }\n-\n-    // FIXME: this methods do not belong here\n-    pub fn from_position(db: &impl DefDatabase, position: FilePosition) -> ModuleSource {\n-        let parse = db.parse(position.file_id);\n-        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n-            parse.tree().syntax(),\n-            position.offset,\n-        ) {\n-            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n-            _ => {\n-                let source_file = parse.tree();\n-                ModuleSource::SourceFile(source_file)\n-            }\n-        }\n-    }\n-\n-    pub fn from_child_node(db: &impl DefDatabase, child: InFile<&SyntaxNode>) -> ModuleSource {\n-        if let Some(m) =\n-            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n-        {\n-            ModuleSource::Module(m)\n-        } else {\n-            let file_id = child.file_id.original_file(db);\n-            let source_file = db.parse(file_id).tree();\n-            ModuleSource::SourceFile(source_file)\n-        }\n-    }\n-\n-    pub fn from_file_id(db: &impl DefDatabase, file_id: FileId) -> ModuleSource {\n-        let source_file = db.parse(file_id).tree();\n-        ModuleSource::SourceFile(source_file)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) id: ModuleId,"}, {"sha": "083946729f7778ee5ecd6f1d6929b69b5aca7e01", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -2,14 +2,15 @@\n \n use either::Either;\n use hir_def::{\n+    nameres::ModuleSource,\n     src::{HasChildSource, HasSource as _},\n     AstItemDef, Lookup, VariantId,\n };\n use ra_syntax::ast;\n \n use crate::{\n     db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n-    Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Module, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::InFile;"}, {"sha": "94a5e0b0d5d8a6c239198e2bcb51f19b1d814d00", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{AstItemDef, LocationCtx, ModuleId};\n+use hir_def::{nameres::ModuleSource, AstItemDef, LocationCtx, ModuleId};\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -10,8 +10,8 @@ use ra_syntax::{\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock,\n-    InFile, Local, MacroDef, Module, ModuleDef, ModuleSource, Static, Struct, StructField, Trait,\n-    TypeAlias, Union, VariantDef,\n+    InFile, Local, MacroDef, Module, ModuleDef, Static, Struct, StructField, Trait, TypeAlias,\n+    Union, VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -257,7 +257,7 @@ impl Module {\n                     InFile { file_id: src.file_id, value: module.clone() },\n                 );\n             }\n-            ModuleSource::SourceFile(_) => (),\n+            ModuleSource::SourceFile(_) | ModuleSource::Block(_) => (),\n         };\n \n         let original_file = src.file_id.original_file(db);"}, {"sha": "f12e4ca3f2cc40ae2031f3e836a180b3e6a537ad", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -43,8 +43,8 @@ pub use crate::{\n     code_model::{\n         src::HasSource, Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency,\n         DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, GenericParam,\n-        HasAttrs, ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef,\n-        Static, Struct, StructField, Trait, Type, TypeAlias, Union, VariantDef,\n+        HasAttrs, ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n+        StructField, Trait, Type, TypeAlias, Union, VariantDef,\n     },\n     from_source::FromSource,\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n@@ -59,6 +59,7 @@ pub use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n+    nameres::ModuleSource,\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "db0451059e82b9e4ada0dffe8710d95ace9e52e2", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -14,6 +14,7 @@ use hir_def::{\n         BodySourceMap,\n     },\n     expr::{ExprId, PatId},\n+    nameres::ModuleSource,\n     path::known,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n     AssocItemId, DefWithBodyId,\n@@ -46,7 +47,7 @@ fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -\n                 Some(crate::Module::from_declaration(db, src)?.id.resolver(db))\n             },\n              ast::SourceFile(it) => {\n-                let src = node.with_value(crate::ModuleSource::SourceFile(it));\n+                let src = node.with_value(ModuleSource::SourceFile(it));\n                 Some(crate::Module::from_definition(db, src)?.id.resolver(db))\n             },\n             ast::StructDef(it) => {"}, {"sha": "feb2a4d32baae3d72947f0d8414bce822eb683d0", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -63,9 +63,12 @@ use hir_expand::{\n };\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n-use ra_db::{CrateId, Edition, FileId};\n+use ra_db::{CrateId, Edition, FileId, FilePosition};\n use ra_prof::profile;\n-use ra_syntax::ast;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    SyntaxNode,\n+};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -361,6 +364,67 @@ impl ModuleData {\n     }\n }\n \n+pub enum ModuleSource {\n+    SourceFile(ast::SourceFile),\n+    Module(ast::Module),\n+    Block(ast::Block),\n+}\n+\n+impl ModuleSource {\n+    pub fn new(\n+        db: &impl DefDatabase,\n+        file_id: Option<FileId>,\n+        decl_id: Option<AstId<ast::Module>>,\n+    ) -> ModuleSource {\n+        match (file_id, decl_id) {\n+            (Some(file_id), _) => {\n+                let source_file = db.parse(file_id).tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+            (None, Some(item_id)) => {\n+                let module = item_id.to_node(db);\n+                assert!(module.item_list().is_some(), \"expected inline module\");\n+                ModuleSource::Module(module)\n+            }\n+            (None, None) => panic!(),\n+        }\n+    }\n+\n+    // FIXME: this methods do not belong here\n+    pub fn from_position(db: &impl DefDatabase, position: FilePosition) -> ModuleSource {\n+        let parse = db.parse(position.file_id);\n+        match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n+            parse.tree().syntax(),\n+            position.offset,\n+        ) {\n+            Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n+            _ => {\n+                let source_file = parse.tree();\n+                ModuleSource::SourceFile(source_file)\n+            }\n+        }\n+    }\n+\n+    pub fn from_child_node(db: &impl DefDatabase, child: InFile<&SyntaxNode>) -> ModuleSource {\n+        if let Some(m) =\n+            child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n+        {\n+            ModuleSource::Module(m)\n+        } else if let Some(b) = child.value.ancestors().filter_map(ast::Block::cast).next() {\n+            ModuleSource::Block(b)\n+        } else {\n+            let file_id = child.file_id.original_file(db);\n+            let source_file = db.parse(file_id).tree();\n+            ModuleSource::SourceFile(source_file)\n+        }\n+    }\n+\n+    pub fn from_file_id(db: &impl DefDatabase, file_id: FileId) -> ModuleSource {\n+        let source_file = db.parse(file_id).tree();\n+        ModuleSource::SourceFile(source_file)\n+    }\n+}\n+\n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use ra_db::RelativePathBuf;"}, {"sha": "b376fcdaef92bc6982327e2dd31ba54e82f0af69", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -231,34 +231,21 @@ impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.definition_source(db);\n         let name = self.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n-        match &src.value {\n-            ModuleSource::SourceFile(node) => {\n-                let frange = original_range(db, src.with_value(node.syntax()));\n-\n-                NavigationTarget::from_syntax(\n-                    frange.file_id,\n-                    name,\n-                    None,\n-                    frange.range,\n-                    node.syntax().kind(),\n-                    None,\n-                    None,\n-                )\n-            }\n-            ModuleSource::Module(node) => {\n-                let frange = original_range(db, src.with_value(node.syntax()));\n-\n-                NavigationTarget::from_syntax(\n-                    frange.file_id,\n-                    name,\n-                    None,\n-                    frange.range,\n-                    node.syntax().kind(),\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n-        }\n+        let syntax = match &src.value {\n+            ModuleSource::SourceFile(node) => node.syntax(),\n+            ModuleSource::Module(node) => node.syntax(),\n+            ModuleSource::Block(node) => node.syntax(),\n+        };\n+        let frange = original_range(db, src.with_value(syntax));\n+        NavigationTarget::from_syntax(\n+            frange.file_id,\n+            name,\n+            None,\n+            frange.range,\n+            syntax.kind(),\n+            None,\n+            None,\n+        )\n     }\n }\n "}, {"sha": "1abf202151912365af2328c9f97c8775fb25bffa", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -88,7 +88,7 @@ fn rename_mod(\n                     file_system_edits.push(move_file);\n                 }\n             }\n-            ModuleSource::Module(..) => {}\n+            ModuleSource::Module(..) | ModuleSource::Block(..) => {}\n         }\n     }\n "}, {"sha": "92eb2015b6378f8dc2280c6877ff8376b52bd3a9", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38853459e3d964cc7f635829cdc66f5faee33d85/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=38853459e3d964cc7f635829cdc66f5faee33d85", "patch": "@@ -96,6 +96,10 @@ impl NameDefinition {\n                         let range = Some(m.syntax().text_range());\n                         res.insert(file_id, range);\n                     }\n+                    ModuleSource::Block(b) => {\n+                        let range = Some(b.syntax().text_range());\n+                        res.insert(file_id, range);\n+                    }\n                     ModuleSource::SourceFile(_) => {\n                         res.insert(file_id, None);\n                         res.extend(parent_module.children(db).map(|m| {\n@@ -137,6 +141,7 @@ impl NameDefinition {\n         let mut res = FxHashMap::default();\n         let range = match module_src.value {\n             ModuleSource::Module(m) => Some(m.syntax().text_range()),\n+            ModuleSource::Block(b) => Some(b.syntax().text_range()),\n             ModuleSource::SourceFile(_) => None,\n         };\n         res.insert(file_id, range);"}]}