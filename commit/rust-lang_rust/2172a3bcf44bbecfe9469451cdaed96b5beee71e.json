{"sha": "2172a3bcf44bbecfe9469451cdaed96b5beee71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNzJhM2JjZjQ0YmJlY2ZlOTQ2OTQ1MWNkYWVkOTZiNWJlZWU3MWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-09-08T22:38:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-09-08T22:38:39Z"}, "message": "First lame stab at solving the diamond import problem", "tree": {"sha": "58e7d09ae2b352733e56d0244d8aa0851e5737c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58e7d09ae2b352733e56d0244d8aa0851e5737c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2172a3bcf44bbecfe9469451cdaed96b5beee71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2172a3bcf44bbecfe9469451cdaed96b5beee71e", "html_url": "https://github.com/rust-lang/rust/commit/2172a3bcf44bbecfe9469451cdaed96b5beee71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2172a3bcf44bbecfe9469451cdaed96b5beee71e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388f8ce520b16d73bf682cf6bf3f714bcc35b49d", "url": "https://api.github.com/repos/rust-lang/rust/commits/388f8ce520b16d73bf682cf6bf3f714bcc35b49d", "html_url": "https://github.com/rust-lang/rust/commit/388f8ce520b16d73bf682cf6bf3f714bcc35b49d"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "3b3ee72d700e04e660e28a5ce341b61f5878155a", "filename": "src/boot/driver/lib.ml", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Fdriver%2Flib.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Fdriver%2Flib.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Flib.ml?ref=2172a3bcf44bbecfe9469451cdaed96b5beee71e", "patch": "@@ -125,6 +125,7 @@ let get_mod\n     (use_id:node_id)\n     (nref:node_id ref)\n     (oref:opaque_id ref)\n+    (crate_item_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     : (filename * Ast.mod_items) =\n   let found = Queue.create () in\n   let suffix =\n@@ -183,22 +184,24 @@ let get_mod\n                   (file_matches file)\n                 then\n                   begin\n-                    iflog sess\n-                      begin\n-                        fun _ ->\n-                          log sess \"matched against library %s\" file;\n-                          match get_meta sess file with\n-                              None -> ()\n-                            | Some meta ->\n-                                if not (Hashtbl.mem\n-                                    sess.Session.sess_crate_meta meta) then\n-                                  Hashtbl.add sess.Session.sess_crate_meta\n-                                    meta (Session.make_crate_id sess);\n-                                Array.iter\n-                                  (fun (k,v) -> log sess \"%s = %S\" k v)\n-                                  meta;\n-                      end;\n-                    Queue.add file found;\n+                    log sess \"matched against library %s\" file;\n+\n+                    let meta = get_meta sess file in\n+                    let crate_id =\n+                      match meta with\n+                          None -> Session.make_crate_id sess\n+                        | Some meta ->\n+                            iflog sess begin fun _ ->\n+                              Array.iter\n+                                (fun (k, v) -> log sess \"%s = %S\" k v)\n+                                meta\n+                            end;\n+                            htab_search_or_default\n+                              sess.Session.sess_crate_meta\n+                              meta\n+                              (fun () -> Session.make_crate_id sess)\n+                    in\n+                    Queue.add (file, crate_id) found;\n                   end;\n                 scan()\n             with\n@@ -210,8 +213,11 @@ let get_mod\n     match Queue.length found with\n         0 -> Common.err (Some use_id) \"unsatisfied 'use' clause\"\n       | 1 ->\n-          let filename = Queue.pop found in\n-          let items = get_file_mod sess abi filename nref oref in\n+          let (filename, crate_id) = Queue.pop found in\n+          let items =\n+            htab_search_or_default crate_item_cache crate_id\n+              (fun () -> get_file_mod sess abi filename nref oref)\n+          in\n             (filename, items)\n       | _ -> Common.err (Some use_id) \"multiple crates match 'use' clause\"\n ;;"}, {"sha": "1e4c28e834e6b67c648d70f864fe7c226ad8f0a1", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=2172a3bcf44bbecfe9469451cdaed96b5beee71e", "patch": "@@ -239,7 +239,9 @@ let _ =\n ;;\n \n \n-let parse_input_crate _ : Ast.crate =\n+let parse_input_crate\n+    (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n+    : Ast.crate =\n   Session.time_inner \"parse\" sess\n     begin\n       fun _ ->\n@@ -250,12 +252,14 @@ let parse_input_crate _ : Ast.crate =\n             Cexp.parse_crate_file sess\n               (Lib.get_mod sess abi)\n               (Lib.infer_lib_name sess)\n+              crate_cache\n           else\n             if Filename.check_suffix infile \".rs\"\n             then\n               Cexp.parse_src_file sess\n                 (Lib.get_mod sess abi)\n                 (Lib.infer_lib_name sess)\n+                crate_cache\n             else\n               begin\n                 Printf.fprintf stderr\n@@ -295,7 +299,8 @@ let parse_input_crate _ : Ast.crate =\n \n let (crate:Ast.crate) =\n   try\n-    parse_input_crate()\n+    let crate_cache = Hashtbl.create 1 in\n+    parse_input_crate crate_cache\n   with\n       Not_implemented (ido, str) ->\n         Session.report_err sess ido str;"}, {"sha": "e14bda5129595106c8f8bdd86b902a334e45ec91", "filename": "src/boot/fe/cexp.ml", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Ffe%2Fcexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Ffe%2Fcexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fcexp.ml?ref=2172a3bcf44bbecfe9469451cdaed96b5beee71e", "patch": "@@ -380,6 +380,7 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n             ps.pstate_temp_id\n             ps.pstate_node_id\n             ps.pstate_opaque_id\n+            ps.pstate_crate_cache\n             ps.pstate_sess\n             ps.pstate_get_mod\n             ps.pstate_get_cenv_tok\n@@ -427,7 +428,12 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n               end\n               u.use_meta\n           in\n-          ps.pstate_get_mod meta_pat id ps.pstate_node_id ps.pstate_opaque_id\n+          ps.pstate_get_mod\n+            meta_pat\n+            id\n+            ps.pstate_node_id\n+            ps.pstate_opaque_id\n+            ps.pstate_crate_cache\n         in\n           iflog ps\n             begin\n@@ -618,6 +624,7 @@ let parse_crate_file\n     (sess:Session.sess)\n     (get_mod:get_mod_fn)\n     (infer_lib_name:(Ast.ident -> filename))\n+    (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     : Ast.crate =\n   let fname = Session.filename_of sess.Session.sess_in in\n   let tref = ref (Temp 0) in\n@@ -659,7 +666,7 @@ let parse_crate_file\n         | Some (PVAL_num n) -> LIT_INT n\n   in\n   let ps =\n-    make_parser tref nref oref sess get_mod get_cenv_tok\n+    make_parser tref nref oref crate_cache sess get_mod get_cenv_tok\n       infer_lib_name required required_syms fname\n   in\n   let env = { env_bindings = bindings;\n@@ -723,6 +730,7 @@ let parse_src_file\n     (sess:Session.sess)\n     (get_mod:get_mod_fn)\n     (infer_lib_name:(Ast.ident -> filename))\n+    (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     : Ast.crate =\n   let fname = Session.filename_of sess.Session.sess_in in\n   let tref = ref (Temp 0) in\n@@ -735,7 +743,7 @@ let parse_src_file\n                   ident) ps)\n   in\n   let ps =\n-    make_parser tref nref oref sess get_mod get_cenv_tok\n+    make_parser tref nref oref crate_cache sess get_mod get_cenv_tok\n       infer_lib_name required required_syms fname\n   in\n     with_err_handling sess"}, {"sha": "a0275be1e75c731552910dbca37ef82e57c7fae9", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=2172a3bcf44bbecfe9469451cdaed96b5beee71e", "patch": "@@ -1159,7 +1159,12 @@ and parse_use\n   let bpos = lexpos ps in\n   let id = (span ps apos bpos ()).id in\n   let (path, items) =\n-    ps.pstate_get_mod meta id ps.pstate_node_id ps.pstate_opaque_id\n+    ps.pstate_get_mod\n+      meta\n+      id\n+      ps.pstate_node_id\n+      ps.pstate_opaque_id\n+      ps.pstate_crate_cache\n   in\n   let bpos = lexpos ps in\n     expect ps SEMI;"}, {"sha": "0c7a2f6f543fbbc7eb464ace3be558ee9c7f5cae", "filename": "src/boot/fe/parser.ml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Ffe%2Fparser.ml", "raw_url": "https://github.com/rust-lang/rust/raw/2172a3bcf44bbecfe9469451cdaed96b5beee71e/src%2Fboot%2Ffe%2Fparser.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fparser.ml?ref=2172a3bcf44bbecfe9469451cdaed96b5beee71e", "patch": "@@ -8,7 +8,8 @@ type get_mod_fn = (Ast.meta_pat\n                    -> node_id\n                      -> (node_id ref)\n                        -> (opaque_id ref)\n-                         -> (filename * Ast.mod_items))\n+                         -> (crate_id, Ast.mod_items) Hashtbl.t\n+                           -> (filename * Ast.mod_items))\n ;;\n \n type pstate =\n@@ -22,6 +23,7 @@ type pstate =\n       pstate_temp_id      : temp_id ref;\n       pstate_node_id      : node_id ref;\n       pstate_opaque_id    : opaque_id ref;\n+      pstate_crate_cache  : (crate_id, Ast.mod_items) Hashtbl.t;\n       pstate_get_mod      : get_mod_fn;\n       pstate_get_cenv_tok : pstate -> Ast.ident -> token;\n       pstate_infer_lib_name : (Ast.ident -> filename);\n@@ -44,6 +46,7 @@ let make_parser\n     (tref:temp_id ref)\n     (nref:node_id ref)\n     (oref:opaque_id ref)\n+    (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     (sess:Session.sess)\n     (get_mod:get_mod_fn)\n     (get_cenv_tok:pstate -> Ast.ident -> token)\n@@ -69,6 +72,7 @@ let make_parser\n         pstate_temp_id = tref;\n         pstate_node_id = nref;\n         pstate_opaque_id = oref;\n+        pstate_crate_cache = crate_cache;\n         pstate_get_mod = get_mod;\n         pstate_get_cenv_tok = get_cenv_tok;\n         pstate_infer_lib_name = infer_lib_name;"}]}