{"sha": "fd4979ad0427aca01e500d0d26350525e9e17f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNDk3OWFkMDQyN2FjYTAxZTUwMGQwZDI2MzUwNTI1ZTllMTdmMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-11T11:26:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-11T11:26:42Z"}, "message": "auto merge of #12154 : pnkfelix/rust/fsk-factor-bigint-and-rat-out-of-libextra, r=alexcrichton\n\nRemoved use of globs present in earlier versions of modules.\r\n\r\nFix tutorial.md to reflect `extra::rational` ==> `num::rational`.", "tree": {"sha": "7c8d261f46ef2ca4bddd2482fb0d41eb19950b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8d261f46ef2ca4bddd2482fb0d41eb19950b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd4979ad0427aca01e500d0d26350525e9e17f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4979ad0427aca01e500d0d26350525e9e17f2d", "html_url": "https://github.com/rust-lang/rust/commit/fd4979ad0427aca01e500d0d26350525e9e17f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd4979ad0427aca01e500d0d26350525e9e17f2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc6359a0abd414ed2414da2cfd3751f364a59bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc6359a0abd414ed2414da2cfd3751f364a59bf", "html_url": "https://github.com/rust-lang/rust/commit/1dc6359a0abd414ed2414da2cfd3751f364a59bf"}, {"sha": "d2d1129ad071653e32709706bb16606506ca227a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d1129ad071653e32709706bb16606506ca227a", "html_url": "https://github.com/rust-lang/rust/commit/d2d1129ad071653e32709706bb16606506ca227a"}], "stats": {"total": 80, "additions": 47, "deletions": 33}, "files": [{"sha": "d137e5e7775ba34fdd0c6dac0442c53a52ce979f", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -50,7 +50,7 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections\n+                 uuid serialize sync getopts collections num\n HOST_CRATES := syntax rustc rustdoc fourcc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n@@ -75,6 +75,7 @@ DEPS_sync := std\n DEPS_getopts := std\n DEPS_collections := std serialize\n DEPS_fourcc := syntax std\n+DEPS_num := std extra\n \n TOOL_DEPS_compiletest := extra green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc green rustuv"}, {"sha": "ebc5a1a3c468dd2530240749d26b4fec0a274782", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -38,6 +38,7 @@ li {list-style-type: none; }\n * [The Rust compiler, `librustc`](rustc/index.html)\n \n * [The `arena` allocation library](arena/index.html)\n+* [The `num` arbitrary precision numerics library](num/index.html)\n * [The `collections` library](collections/index.html)\n * [The `flate` compression library](flate/index.html)\n * [The `fourcc` four-character code library](fourcc/index.html)"}, {"sha": "f94aa5b9104f34bb07816489f7fdc2fc6024f92d", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -3026,12 +3026,12 @@ In Rust terminology, we need a way to refer to other crates.\n For that, Rust offers you the `extern mod` declaration:\n \n ~~~\n-extern mod extra;\n-// extra ships with Rust, you'll find more details further down.\n+extern mod num;\n+// `num` ships with Rust (much like `extra`; more details further down).\n \n fn main() {\n     // The rational number '1/2':\n-    let one_half = ::extra::rational::Ratio::new(1, 2);\n+    let one_half = ::num::rational::Ratio::new(1, 2);\n }\n ~~~\n \n@@ -3056,10 +3056,10 @@ of both `use` and local declarations.\n Which can result in something like this:\n \n ~~~\n-extern mod extra;\n+extern mod num;\n \n use farm::dog;\n-use extra::rational::Ratio;\n+use num::rational::Ratio;\n \n mod farm {\n     pub fn dog() { println!(\"woof\"); }\n@@ -3224,9 +3224,9 @@ See the [API documentation][stddoc] for details.\n \n ## The extra library\n \n-Rust also ships with the [extra library], an accumulation of useful things,\n+Rust ships with crates such as the [extra library], an accumulation of useful things,\n that are however not important enough to deserve a place in the standard\n-library.  You can use them by linking to `extra` with an `extern mod extra;`.\n+library.  You can link to a library such as `extra` with an `extern mod extra;`.\n \n [extra library]: extra/index.html\n "}, {"sha": "70a21da6816d8a21aa8cbaf4c9fac884789f6848", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -62,12 +62,6 @@ pub mod time;\n pub mod base64;\n pub mod workcache;\n pub mod enum_set;\n-#[path=\"num/bigint.rs\"]\n-pub mod bigint;\n-#[path=\"num/rational.rs\"]\n-pub mod rational;\n-#[path=\"num/complex.rs\"]\n-pub mod complex;\n pub mod stats;\n pub mod hex;\n "}, {"sha": "56385c6f43b4dc6b7a8adce2449ce99927463b8f", "filename": "src/libnum/bigint.rs", "status": "renamed", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -16,9 +16,6 @@ A `BigUint` is represented as an array of `BigDigit`s.\n A `BigInt` is a combination of `BigUint` and `Sign`.\n */\n \n-#[allow(missing_doc)];\n-#[allow(non_uppercase_statics)];\n-\n use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use std::num;\n use std::num::{Zero, One, ToStrRadix, FromStrRadix, Orderable};\n@@ -48,7 +45,7 @@ pub type BigDigit = u32;\n pub static ZERO_BIG_DIGIT: BigDigit = 0;\n \n pub mod BigDigit {\n-    use bigint::BigDigit;\n+    use super::BigDigit;\n \n     #[cfg(target_word_size = \"32\")]\n     pub static bits: uint = 16;\n@@ -1433,8 +1430,8 @@ impl BigInt {\n \n #[cfg(test)]\n mod biguint_tests {\n-    use super::*;\n-    use super::RandBigInt;\n+    use super::{BigDigit, BigUint, ToBigUint};\n+    use super::{Plus, BigInt, RandBigInt, ToBigInt};\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;\n@@ -2090,8 +2087,8 @@ mod biguint_tests {\n \n #[cfg(test)]\n mod bigint_tests {\n-    use super::*;\n-    use super::RandBigInt;\n+    use super::{BigDigit, BigUint, ToBigUint};\n+    use super::{Sign, Minus, Zero, Plus, BigInt, RandBigInt, ToBigInt};\n \n     use std::cmp::{Less, Equal, Greater};\n     use std::i64;\n@@ -2591,7 +2588,7 @@ mod bigint_tests {\n \n #[cfg(test)]\n mod bench {\n-    use super::*;\n+    use super::{BigInt, BigUint};\n     use std::iter;\n     use std::mem::replace;\n     use std::num::{FromPrimitive, Zero, One};", "previous_filename": "src/libextra/num/bigint.rs"}, {"sha": "a832834b8e4d613971149b9e0c1ee3e90bfa98e6", "filename": "src/libnum/complex.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -191,7 +191,7 @@ impl<T: ToStrRadix + Num + Ord> ToStrRadix for Cmplx<T> {\n mod test {\n     #[allow(non_uppercase_statics)];\n \n-    use super::*;\n+    use super::{Complex64, Cmplx};\n     use std::num::{Zero,One,Real};\n \n     pub static _0_0i : Complex64 = Cmplx { re: 0.0, im: 0.0 };\n@@ -285,7 +285,7 @@ mod test {\n     }\n \n     mod arith {\n-        use super::*;\n+        use super::{_0_0i, _1_0i, _1_1i, _0_1i, _neg1_1i, _05_05i, all_consts};\n         use std::num::Zero;\n \n         #[test]", "previous_filename": "src/libextra/num/complex.rs"}, {"sha": "5a5e717363a61a18427cdc6df9a141b0438361cb", "filename": "src/libnum/lib.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(macro_rules)];\n+\n+#[crate_id = \"num#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+\n+extern mod extra;\n+\n+pub mod bigint;\n+pub mod rational;\n+pub mod complex;"}, {"sha": "698a109a756164184130c839dd50ab4aac15be9e", "filename": "src/libnum/rational.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,11 +10,10 @@\n \n //! Rational numbers\n \n-\n use std::cmp;\n use std::from_str::FromStr;\n use std::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n-use super::bigint::{BigInt, BigUint, Sign, Plus, Minus};\n+use bigint::{BigInt, BigUint, Sign, Plus, Minus};\n \n /// Represents the ratio between 2 numbers.\n #[deriving(Clone)]\n@@ -349,7 +348,7 @@ impl<T: FromStrRadix + Clone + Integer + Ord>\n #[cfg(test)]\n mod test {\n \n-    use super::*;\n+    use super::{Ratio, Rational, BigRational};\n     use std::num::{Zero,One,FromStrRadix,FromPrimitive};\n     use std::from_str::FromStr;\n \n@@ -449,8 +448,8 @@ mod test {\n \n \n     mod arith {\n-        use super::*;\n-        use super::super::*;\n+        use super::{_0, _1, _2, _1_2, _3_2, _neg1_2, to_big};\n+        use super::super::{Ratio, Rational, BigRational};\n \n \n         #[test]", "previous_filename": "src/libextra/num/rational.rs"}, {"sha": "33f20cf0d1f9bb8b216809acd792da558665929b", "filename": "src/test/bench/shootout-pidigits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd4979ad0427aca01e500d0d26350525e9e17f2d/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pidigits.rs?ref=fd4979ad0427aca01e500d0d26350525e9e17f2d", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern mod num;\n \n use std::from_str::FromStr;\n use std::num::One;\n use std::num::Zero;\n use std::num::FromPrimitive;\n-use extra::bigint::BigInt;\n+use num::bigint::BigInt;\n \n struct Context {\n     numer: BigInt,"}]}