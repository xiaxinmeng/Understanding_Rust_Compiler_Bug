{"sha": "e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2QyOWJhNWVjYWU3MWNmZGUyNGQyZTY1MmI1MGFjZjYzZWExNTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-09T19:33:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-09T19:33:18Z"}, "message": "Apply comments from tjc", "tree": {"sha": "dcdc29d4515a482605fb4bbbb9f1102dec87456a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcdc29d4515a482605fb4bbbb9f1102dec87456a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "html_url": "https://github.com/rust-lang/rust/commit/e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9963bd24138999e745584a138f8381f91e3a308c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9963bd24138999e745584a138f8381f91e3a308c", "html_url": "https://github.com/rust-lang/rust/commit/9963bd24138999e745584a138f8381f91e3a308c"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "a754f93f010381b60b2fe32a3a662f7737bdfb0b", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "patch": "@@ -28,33 +28,37 @@ pub trait Subst {\n // Substitution over types\n //\n // Because this is so common, we make a special optimization to avoid\n-// doing anything is `substs` is a no-op.  I tried to generalize these\n+// doing anything if `substs` is a no-op.  I tried to generalize these\n // to all subst methods but ran into trouble due to the limitations of\n // our current method/trait matching algorithm. - Niko\n \n-trait Subst1 {\n-    fn subst1(&self, tcx: ty::ctxt, substs: &ty::substs) -> Self;\n+trait EffectfulSubst {\n+    fn effectfulSubst(&self, tcx: ty::ctxt, substs: &ty::substs) -> Self;\n }\n \n impl Subst for ty::t {\n     fn subst(&self, tcx: ty::ctxt, substs: &ty::substs) -> ty::t {\n         if ty::substs_is_noop(substs) {\n             return *self;\n         } else {\n-            return self.subst1(tcx, substs);\n+            return self.effectfulSubst(tcx, substs);\n         }\n     }\n }\n \n-impl Subst1 for ty::t {\n-    fn subst1(&self, tcx: ty::ctxt, substs: &ty::substs) -> ty::t {\n+impl EffectfulSubst for ty::t {\n+    fn effectfulSubst(&self, tcx: ty::ctxt, substs: &ty::substs) -> ty::t {\n         if !ty::type_needs_subst(*self) {\n             return *self;\n         }\n \n         match ty::get(*self).sty {\n-            ty::ty_param(p) => substs.tps[p.idx],\n-            ty::ty_self(_) => substs.self_ty.get(),\n+            ty::ty_param(p) => {\n+                substs.tps[p.idx]\n+            }\n+            ty::ty_self(_) => {\n+                substs.self_ty.expect(\"ty_self not found in substs\")\n+            }\n             _ => {\n                 ty::fold_regions_and_ty(\n                     tcx, *self,\n@@ -74,8 +78,8 @@ impl Subst1 for ty::t {\n                         }\n                         _ => r\n                     },\n-                    |t| t.subst1(tcx, substs),\n-                    |t| t.subst1(tcx, substs))\n+                    |t| t.effectfulSubst(tcx, substs),\n+                    |t| t.effectfulSubst(tcx, substs))\n             }\n         }\n     }"}, {"sha": "6a274e7f9eb07ea98cae6d950e02382a6593567d", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "patch": "@@ -376,7 +376,14 @@ pub impl<'self> LookupContext<'self> {\n \n         let tcx = self.tcx();\n         let mut next_bound_idx = 0; // count only trait bounds\n-        let type_param_def = tcx.ty_param_defs.get(&param_ty.def_id.node);\n+        let type_param_def = match tcx.ty_param_defs.find(&param_ty.def_id.node) {\n+            Some(t) => t,\n+            None => {\n+                tcx.sess.span_bug(\n+                    self.expr.span,\n+                    fmt!(\"No param def for %?\", param_ty));\n+            }\n+        };\n \n         for ty::each_bound_trait_and_supertraits(tcx, type_param_def.bounds)\n             |bound_trait_ref|"}, {"sha": "a3296f6c20985f10420eb7e241999dc2136c63e5", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cd29ba5ecae71cfde24d2e652b50acf63ea155/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=e8cd29ba5ecae71cfde24d2e652b50acf63ea155", "patch": "@@ -335,7 +335,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                            ty::mk_bare_fn(tcx, copy m.fty));\n \n         // create the type parameter definitions for `foo`, applying\n-        // the substutition to any traits that appear in their bounds.\n+        // the substitution to any traits that appear in their bounds.\n \n         // add in the type parameters from the trait\n         let mut new_type_param_defs = ~[];"}]}