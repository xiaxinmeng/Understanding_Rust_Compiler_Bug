{"sha": "3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "node_id": "C_kwDOAAsO6NoAKDNjMWUxNjYxZTdkYmI1YjBlYjk4ZjRmMzg5ODc4YjNlZDE2ZjUxNzE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-04-17T12:18:08Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-04-18T21:28:06Z"}, "message": "Remove unused macro rules", "tree": {"sha": "1da8639cc1a8a4e87941edbfc0c1723e25ede15f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1da8639cc1a8a4e87941edbfc0c1723e25ede15f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "html_url": "https://github.com/rust-lang/rust/commit/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8305398d7ae6128811ec2b3223939bcd067530c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8305398d7ae6128811ec2b3223939bcd067530c2", "html_url": "https://github.com/rust-lang/rust/commit/8305398d7ae6128811ec2b3223939bcd067530c2"}], "stats": {"total": 58, "additions": 0, "deletions": 58}, "files": [{"sha": "d2180408477044b1e7e795874d2ab212ab415a13", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -255,19 +255,6 @@ impl EmissionGuarantee for ! {\n /// instead of a `&DiagnosticBuilder<'a>`. This `forward!` macro makes\n /// it easy to declare such methods on the builder.\n macro_rules! forward {\n-    // Forward pattern for &self -> &Self\n-    (\n-        $(#[$attrs:meta])*\n-        pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)?) -> &Self\n-    ) => {\n-        $(#[$attrs])*\n-        #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n-        pub fn $n(&self, $($name: $ty),*) -> &Self {\n-            self.diagnostic.$n($($name),*);\n-            self\n-        }\n-    };\n-\n     // Forward pattern for &mut self -> &mut Self\n     (\n         $(#[$attrs:meta])*"}, {"sha": "23c377651cc6c8f1595e4f329052e8411eeb60a1", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -453,9 +453,6 @@ macro_rules! impl_arena_allocatable_decoder {\n             }\n         }\n     };\n-    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n-        impl_arena_allocatable_decoder!([$($attrs),*]$args);\n-    };\n }\n \n macro_rules! impl_arena_allocatable_decoders {"}, {"sha": "7d6b8c760ff6a4e3fde8b1c60691e0322388bc3d", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -498,7 +498,6 @@ macro_rules! peel {\n /// Therefore, the recursion depth is the binary logarithm of the number of\n /// tokens to count, and the expanded tree is likewise very small.\n macro_rules! count {\n-    ()                     => (0usize);\n     ($one:tt)              => (1usize);\n     ($($pairs:tt $_p:tt)*) => (count!($($pairs)*) << 1usize);\n     ($odd:tt $($rest:tt)*) => (count!($($rest)*) | 1usize);"}, {"sha": "965a3c109832ba2cfa79b7a1075955f03a04bc7d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -2249,10 +2249,6 @@ impl ToJson for Target {\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n                 d.insert(name, self.$attr.to_json());\n             }};\n-            ($attr:ident, $key_name:expr) => {{\n-                let name = $key_name;\n-                d.insert(name.into(), self.$attr.to_json());\n-            }};\n         }\n \n         macro_rules! target_option_val {"}, {"sha": "7ef78e0b48af161015ef27375dee5755afcdc9df", "filename": "library/core/src/internal_macros.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/library%2Fcore%2Fsrc%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/library%2Fcore%2Fsrc%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Finternal_macros.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -1,10 +1,6 @@\n // implements the unary operator \"op &T\"\n // based on \"op T\" where T is expected to be `Copy`able\n macro_rules! forward_ref_unop {\n-    (impl $imp:ident, $method:ident for $t:ty) => {\n-        forward_ref_unop!(impl $imp, $method for $t,\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n-    };\n     (impl const $imp:ident, $method:ident for $t:ty) => {\n         forward_ref_unop!(impl const $imp, $method for $t,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n@@ -38,10 +34,6 @@ macro_rules! forward_ref_unop {\n // implements binary operators \"&T op U\", \"T op &U\", \"&T op &U\"\n // based on \"T op U\" where T and U are expected to be `Copy`able\n macro_rules! forward_ref_binop {\n-    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n-        forward_ref_binop!(impl $imp, $method for $t, $u,\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n-    };\n     (impl const $imp:ident, $method:ident for $t:ty, $u:ty) => {\n         forward_ref_binop!(impl const $imp, $method for $t, $u,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n@@ -230,22 +222,6 @@ macro_rules! cfg_if {\n         }\n     };\n \n-    // match if/else chains lacking a final `else`\n-    (\n-        if #[cfg( $i_meta:meta )] { $( $i_tokens:tt )* }\n-        $(\n-            else if #[cfg( $e_meta:meta )] { $( $e_tokens:tt )* }\n-        )*\n-    ) => {\n-        cfg_if! {\n-            @__items () ;\n-            (( $i_meta ) ( $( $i_tokens )* )) ,\n-            $(\n-                (( $e_meta ) ( $( $e_tokens )* )) ,\n-            )*\n-        }\n-    };\n-\n     // Internal and recursive macro to emit all the items\n     //\n     // Collects all the previous cfgs in a list at the beginning, so they can be"}, {"sha": "ae8b938250ec9177f680902e7de4ff0ee7876dad", "filename": "library/core/tests/num/ops.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/library%2Fcore%2Ftests%2Fnum%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/library%2Fcore%2Ftests%2Fnum%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fops.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -43,18 +43,6 @@ macro_rules! impls_defined {\n }\n \n macro_rules! test_op {\n-    ($fn_name:ident, $op:ident::$method:ident($lhs:literal, $rhs:literal), $result:literal, $($t:ty),+) => {\n-        #[test]\n-        fn $fn_name() {\n-            impls_defined!($op, $method($lhs, $rhs), $result, $($t),+);\n-        }\n-    };\n-    ($fn_name:ident, $op:ident::$method:ident(&mut $lhs:literal, $rhs:literal), $result:literal, $($t:ty),+) => {\n-        #[test]\n-        fn $fn_name() {\n-            impls_defined!($op, $method(&mut $lhs, $rhs), $result, $($t),+);\n-        }\n-    };\n     ($fn_name:ident, $op:ident::$method:ident($lhs:literal), $result:literal, $($t:ty),+) => {\n         #[test]\n         fn $fn_name() {"}, {"sha": "04fa696d5e6be936a97f505aef6e14b7869587ca", "filename": "library/proc_macro/src/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/library%2Fproc_macro%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171/library%2Fproc_macro%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fquote.rs?ref=3c1e1661e7dbb5b0eb98f4f389878b3ed16f5171", "patch": "@@ -12,7 +12,6 @@ macro_rules! quote_tt {\n     ({$($t:tt)*}) => { Group::new(Delimiter::Brace, quote!($($t)*)) };\n     (,) => { Punct::new(',', Spacing::Alone) };\n     (.) => { Punct::new('.', Spacing::Alone) };\n-    (:) => { Punct::new(':', Spacing::Alone) };\n     (;) => { Punct::new(';', Spacing::Alone) };\n     (!) => { Punct::new('!', Spacing::Alone) };\n     (<) => { Punct::new('<', Spacing::Alone) };"}]}