{"sha": "3694e40ffa55d65cb72148570f0fcab311741586", "node_id": "C_kwDOAAsO6NoAKDM2OTRlNDBmZmE1NWQ2NWNiNzIxNDg1NzBmMGZjYWIzMTE3NDE1ODY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-27T06:06:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-27T06:06:45Z"}, "message": "Rollup merge of #97389 - m-ou-se:memory-ordering-diagnostics, r=estebank\n\nImprove memory ordering diagnostics\n\nBefore:\n\n![image](https://user-images.githubusercontent.com/783247/170234545-891cac30-eaa2-4186-847b-35cd51e00f2b.png)\n\nAfter:\n\n![image](https://user-images.githubusercontent.com/783247/170239684-645f186f-5a02-4eb9-8651-2e5fe9591352.png)\n\n---\n\nBefore this change, the compiler suggests the failure ordering is too strong and suggests choosing a weaker ordering. After this change, it instead suggests the success ordering is not strong enough, and suggests chosing a stronger one. This is more likely to be correct.\n\nAlso, before this change, the compiler suggested downgrading an invalid AcqRel failure ordering to Relaxed, without mentioning Acquire as an option.", "tree": {"sha": "4d79b3550d7283259e107bfabb26b1a6c8e6a3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d79b3550d7283259e107bfabb26b1a6c8e6a3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3694e40ffa55d65cb72148570f0fcab311741586", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiuUj2CRBK7hj4Ov3rIwAAECsIAB14Caqtcu4cmjeHXMx8ue14\nSv3bnRDTE2/IOHce5NSLf3QZNbxJN6yjOtpaVtI5UoEclQn/kkJmyUGzlAqhht/9\n3SKjKMfxafEvFkKM4cbegT2mcIoYY5/SdQ+qcZYeIj3nmP/DW6sBOcqUNQZ0+Pa+\nqucLPyvvQwdufJUZFhnFeP9z44SqGoRT7rIu0w85TWiDZ5vpAG48OxP/WdwB/gGq\nrJMCH6XzuxU90OqRJhVHaNYLvNzxWmrDP7q53ueYGJ7fqL9zTwyMOIbCQI4nm/CF\npMtzD5/iOqHFMzqhobedxln9oJiEXctWCzrtgjvI3giBr5YqlYaTdYEdr+zUdtc=\n=OA2E\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d79b3550d7283259e107bfabb26b1a6c8e6a3e4\nparent 7702ae16a23407cdd909ff9174294563ae1f4ba3\nparent f107923cc05fdb6a85be30d0495692b47ec174b2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656310005 +0200\ncommitter GitHub <noreply@github.com> 1656310005 +0200\n\nRollup merge of #97389 - m-ou-se:memory-ordering-diagnostics, r=estebank\n\nImprove memory ordering diagnostics\n\nBefore:\n\n![image](https://user-images.githubusercontent.com/783247/170234545-891cac30-eaa2-4186-847b-35cd51e00f2b.png)\n\nAfter:\n\n![image](https://user-images.githubusercontent.com/783247/170239684-645f186f-5a02-4eb9-8651-2e5fe9591352.png)\n\n---\n\nBefore this change, the compiler suggests the failure ordering is too strong and suggests choosing a weaker ordering. After this change, it instead suggests the success ordering is not strong enough, and suggests chosing a stronger one. This is more likely to be correct.\n\nAlso, before this change, the compiler suggested downgrading an invalid AcqRel failure ordering to Relaxed, without mentioning Acquire as an option.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3694e40ffa55d65cb72148570f0fcab311741586", "html_url": "https://github.com/rust-lang/rust/commit/3694e40ffa55d65cb72148570f0fcab311741586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3694e40ffa55d65cb72148570f0fcab311741586/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7702ae16a23407cdd909ff9174294563ae1f4ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7702ae16a23407cdd909ff9174294563ae1f4ba3", "html_url": "https://github.com/rust-lang/rust/commit/7702ae16a23407cdd909ff9174294563ae1f4ba3"}, {"sha": "f107923cc05fdb6a85be30d0495692b47ec174b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f107923cc05fdb6a85be30d0495692b47ec174b2", "html_url": "https://github.com/rust-lang/rust/commit/f107923cc05fdb6a85be30d0495692b47ec174b2"}], "stats": {"total": 622, "additions": 312, "deletions": 310}, "files": [{"sha": "5579e4d19cf1fe5f30a25067b5a97f3e12ea3e12", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 66, "deletions": 82, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -4,7 +4,6 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n@@ -1483,39 +1482,32 @@ impl InvalidAtomicOrdering {\n         None\n     }\n \n-    fn matches_ordering(cx: &LateContext<'_>, did: DefId, orderings: &[Symbol]) -> bool {\n+    fn match_ordering(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<Symbol> {\n+        let ExprKind::Path(ref ord_qpath) = ord_arg.kind else { return None };\n+        let did = cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()?;\n         let tcx = cx.tcx;\n         let atomic_ordering = tcx.get_diagnostic_item(sym::Ordering);\n-        orderings.iter().any(|ordering| {\n-            tcx.item_name(did) == *ordering && {\n-                let parent = tcx.parent(did);\n-                Some(parent) == atomic_ordering\n-                    // needed in case this is a ctor, not a variant\n-                    || tcx.opt_parent(parent) == atomic_ordering\n-            }\n-        })\n-    }\n-\n-    fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n-        if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n-            cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n-        } else {\n-            None\n-        }\n+        let name = tcx.item_name(did);\n+        let parent = tcx.parent(did);\n+        [sym::Relaxed, sym::Release, sym::Acquire, sym::AcqRel, sym::SeqCst].into_iter().find(\n+            |&ordering| {\n+                name == ordering\n+                    && (Some(parent) == atomic_ordering\n+                            // needed in case this is a ctor, not a variant\n+                            || tcx.opt_parent(parent) == atomic_ordering)\n+            },\n+        )\n     }\n \n     fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        use rustc_hir::def::{DefKind, Res};\n-        use rustc_hir::QPath;\n         if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::load, sym::store])\n             && let Some((ordering_arg, invalid_ordering)) = match method {\n                 sym::load => Some((&args[1], sym::Release)),\n                 sym::store => Some((&args[2], sym::Acquire)),\n                 _ => None,\n             }\n-            && let ExprKind::Path(QPath::Resolved(_, path)) = ordering_arg.kind\n-            && let Res::Def(DefKind::Ctor(..), ctor_id) = path.res\n-            && Self::matches_ordering(cx, ctor_id, &[invalid_ordering, sym::AcqRel])\n+            && let Some(ordering) = Self::match_ordering(cx, ordering_arg)\n+            && (ordering == invalid_ordering || ordering == sym::AcqRel)\n         {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, ordering_arg.span, |diag| {\n                 if method == sym::load {\n@@ -1537,9 +1529,7 @@ impl InvalidAtomicOrdering {\n             && let ExprKind::Path(ref func_qpath) = func.kind\n             && let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id()\n             && matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::fence | sym::compiler_fence))\n-            && let ExprKind::Path(ref ordering_qpath) = &args[0].kind\n-            && let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id()\n-            && Self::matches_ordering(cx, ordering_def_id, &[sym::Relaxed])\n+            && Self::match_ordering(cx, &args[0]) == Some(sym::Relaxed)\n         {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, |diag| {\n                 diag.build(\"memory fences cannot have `Relaxed` ordering\")\n@@ -1550,62 +1540,56 @@ impl InvalidAtomicOrdering {\n     }\n \n     fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::fetch_update, sym::compare_exchange, sym::compare_exchange_weak])\n-            && let Some((success_order_arg, failure_order_arg)) = match method {\n-                sym::fetch_update => Some((&args[1], &args[2])),\n-                sym::compare_exchange | sym::compare_exchange_weak => Some((&args[3], &args[4])),\n-                _ => None,\n-            }\n-            && let Some(fail_ordering_def_id) = Self::opt_ordering_defid(cx, failure_order_arg)\n-        {\n-            // Helper type holding on to some checking and error reporting data. Has\n-            // - (success ordering,\n-            // - list of failure orderings forbidden by the success order,\n-            // - suggestion message)\n-            type OrdLintInfo = (Symbol, &'static [Symbol], &'static str);\n-            const RELAXED: OrdLintInfo = (sym::Relaxed, &[sym::SeqCst, sym::Acquire], \"ordering mode `Relaxed`\");\n-            const ACQUIRE: OrdLintInfo = (sym::Acquire, &[sym::SeqCst], \"ordering modes `Acquire` or `Relaxed`\");\n-            const SEQ_CST: OrdLintInfo = (sym::SeqCst, &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n-            const RELEASE: OrdLintInfo = (sym::Release, RELAXED.1, RELAXED.2);\n-            const ACQREL: OrdLintInfo = (sym::AcqRel, ACQUIRE.1, ACQUIRE.2);\n-            const SEARCH: [OrdLintInfo; 5] = [RELAXED, ACQUIRE, SEQ_CST, RELEASE, ACQREL];\n-\n-            let success_lint_info = Self::opt_ordering_defid(cx, success_order_arg)\n-                .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n-                    SEARCH\n-                        .iter()\n-                        .copied()\n-                        .find(|(ordering, ..)| {\n-                            Self::matches_ordering(cx, success_ord_def_id, &[*ordering])\n-                        })\n-                });\n-            if Self::matches_ordering(cx, fail_ordering_def_id, &[sym::Release, sym::AcqRel]) {\n-                // If we don't know the success order is, use what we'd suggest\n-                // if it were maximally permissive.\n-                let suggested = success_lint_info.unwrap_or(SEQ_CST).2;\n-                cx.struct_span_lint(INVALID_ATOMIC_ORDERING, failure_order_arg.span, |diag| {\n-                    let msg = format!(\n-                        \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n-                        method,\n-                    );\n-                    diag.build(&msg)\n-                        .help(&format!(\"consider using {} instead\", suggested))\n-                        .emit();\n-                });\n-            } else if let Some((success_ord, bad_ords_given_success, suggested)) = success_lint_info {\n-                if Self::matches_ordering(cx, fail_ordering_def_id, bad_ords_given_success) {\n-                    cx.struct_span_lint(INVALID_ATOMIC_ORDERING, failure_order_arg.span, |diag| {\n-                        let msg = format!(\n-                            \"{}'s failure ordering may not be stronger than the success ordering of `{}`\",\n-                            method,\n-                            success_ord,\n-                        );\n-                        diag.build(&msg)\n-                            .help(&format!(\"consider using {} instead\", suggested))\n-                            .emit();\n-                    });\n-                }\n-            }\n+        let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::fetch_update, sym::compare_exchange, sym::compare_exchange_weak])\n+            else {return };\n+\n+        let (success_order_arg, fail_order_arg) = match method {\n+            sym::fetch_update => (&args[1], &args[2]),\n+            sym::compare_exchange | sym::compare_exchange_weak => (&args[3], &args[4]),\n+            _ => return,\n+        };\n+\n+        let Some(fail_ordering) = Self::match_ordering(cx, fail_order_arg) else { return };\n+\n+        if matches!(fail_ordering, sym::Release | sym::AcqRel) {\n+            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, fail_order_arg.span, |diag| {\n+                diag.build(&format!(\n+                    \"`{method}`'s failure ordering may not be `Release` or `AcqRel`, \\\n+                    since a failed `{method}` does not result in a write\",\n+                ))\n+                .span_label(fail_order_arg.span, \"invalid failure ordering\")\n+                .help(\"consider using `Acquire` or `Relaxed` failure ordering instead\")\n+                .emit();\n+            });\n+        }\n+\n+        let Some(success_ordering) = Self::match_ordering(cx, success_order_arg) else { return };\n+\n+        if matches!(\n+            (success_ordering, fail_ordering),\n+            (sym::Relaxed | sym::Release, sym::Acquire)\n+                | (sym::Relaxed | sym::Release | sym::Acquire | sym::AcqRel, sym::SeqCst)\n+        ) {\n+            let success_suggestion =\n+                if success_ordering == sym::Release && fail_ordering == sym::Acquire {\n+                    sym::AcqRel\n+                } else {\n+                    fail_ordering\n+                };\n+            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, success_order_arg.span, |diag| {\n+                diag.build(&format!(\n+                    \"`{method}`'s success ordering must be at least as strong as its failure ordering\"\n+                ))\n+                .span_label(fail_order_arg.span, format!(\"`{fail_ordering}` failure ordering\"))\n+                .span_label(success_order_arg.span, format!(\"`{success_ordering}` success ordering\"))\n+                .span_suggestion_short(\n+                    success_order_arg.span,\n+                    format!(\"consider using `{success_suggestion}` success ordering instead\"),\n+                    format!(\"std::sync::atomic::Ordering::{success_suggestion}\"),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+            });\n         }\n     }\n }"}, {"sha": "0e0d604ae046d0307dd7ba7973639af53761b56f", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -20,43 +20,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n }"}, {"sha": "d5e53418b6fb880766d13492c53fded3d45b3a6b", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.stderr", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -1,131 +1,137 @@\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:22:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:24:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:26:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:28:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:34:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:36:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:38:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:40:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-   |                                                                  ^^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:42:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-   |                                                                  ^^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                                |\n+   |                                                `Release` success ordering\n+   |                                                help: consider using `AcqRel` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `Release` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `Relaxed` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                                |\n+   |                                                `Relaxed` success ordering\n+   |                                                help: consider using `Acquire` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `Acquire` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:66\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `AcqRel` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "da98d854262a5a9e791e40932866d18a241c1f83", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -18,43 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n }"}, {"sha": "41121a20dee99dabe6e6e7d2f5c0459876c31868", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.stderr", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -1,131 +1,137 @@\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:20:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:22:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:24:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:26:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-   |                                                        ^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-   |                                                        ^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:32:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:34:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:36:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:38:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-   |                                                        ^^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:40:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-   |                                                        ^^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                      |\n+   |                                      `Release` success ordering\n+   |                                      help: consider using `AcqRel` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `Release` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `Relaxed` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                      |\n+   |                                      `Relaxed` success ordering\n+   |                                      help: consider using `Acquire` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `Acquire` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:56\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `AcqRel` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "73eda182aa8793b0e3db9a9f54ba69d1dd2932a5", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -18,43 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n }"}, {"sha": "7bea56d57fbab646f175d39f2d7c8f6a14abe22d", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.stderr", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3694e40ffa55d65cb72148570f0fcab311741586/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr?ref=3694e40ffa55d65cb72148570f0fcab311741586", "patch": "@@ -1,131 +1,137 @@\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:20:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:22:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:24:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:26:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:32:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:34:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:36:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:38:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:40:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                            |\n+   |                            `Release` success ordering\n+   |                            help: consider using `AcqRel` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `Release` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `Relaxed` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                            |\n+   |                            `Relaxed` success ordering\n+   |                            help: consider using `Acquire` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `Acquire` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:46\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:28\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `AcqRel` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}]}