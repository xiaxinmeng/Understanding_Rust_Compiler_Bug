{"sha": "491483358d076a0bce7689f113898f1ba9f9bf68", "node_id": "C_kwDOAAsO6NoAKDQ5MTQ4MzM1OGQwNzZhMGJjZTc2ODlmMTEzODk4ZjFiYTlmOWJmNjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T10:33:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T10:33:19Z"}, "message": "Auto merge of #9279 - tabokie:weight-loss, r=flip1995\n\nchore: a few small improvements to code quality\n\nSome improvements:\n- Simplify implementation of `is_unit_type`\n- Use slice matching to destruct `Call` or `MethodCall` whenever possible\n\nchangelog: none\n\nr? `@flip1995`", "tree": {"sha": "df87093454b79e8bcaf85e651fb4f3f4ec1d1465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df87093454b79e8bcaf85e651fb4f3f4ec1d1465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/491483358d076a0bce7689f113898f1ba9f9bf68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/491483358d076a0bce7689f113898f1ba9f9bf68", "html_url": "https://github.com/rust-lang/rust/commit/491483358d076a0bce7689f113898f1ba9f9bf68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/491483358d076a0bce7689f113898f1ba9f9bf68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367d09fc4ec16bd6097f1d9a24a7d6a590bf9a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/367d09fc4ec16bd6097f1d9a24a7d6a590bf9a89", "html_url": "https://github.com/rust-lang/rust/commit/367d09fc4ec16bd6097f1d9a24a7d6a590bf9a89"}, {"sha": "ac7a91ea161d2fec96f8eda01c3925e161bf9f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac7a91ea161d2fec96f8eda01c3925e161bf9f38", "html_url": "https://github.com/rust-lang/rust/commit/ac7a91ea161d2fec96f8eda01c3925e161bf9f38"}], "stats": {"total": 151, "additions": 60, "deletions": 91}, "files": [{"sha": "37b2fdcff09ff5467a6ace2c657f7fb78c98d13d", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -270,10 +270,7 @@ fn get_types_from_cast<'a>(\n     let limit_from: Option<(&Expr<'_>, &str)> = call_from_cast.or_else(|| {\n         if_chain! {\n             // `from_type::from, to_type::max_value()`\n-            if let ExprKind::Call(from_func, args) = &expr.kind;\n-            // `to_type::max_value()`\n-            if args.len() == 1;\n-            if let limit = &args[0];\n+            if let ExprKind::Call(from_func, [limit]) = &expr.kind;\n             // `from_type::from`\n             if let ExprKind::Path(ref path) = &from_func.kind;\n             if let Some(from_sym) = get_implementing_type(path, INTS, \"from\");"}, {"sha": "878248a6bdc8c899fec7050fd6f4c41b58817063", "filename": "clippy_lints/src/create_dir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcreate_dir.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -34,7 +34,7 @@ declare_lint_pass!(CreateDir => [CREATE_DIR]);\n impl LateLintPass<'_> for CreateDir {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Call(func, args) = expr.kind;\n+            if let ExprKind::Call(func, [arg, ..]) = expr.kind;\n             if let ExprKind::Path(ref path) = func.kind;\n             if let Some(def_id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::STD_FS_CREATE_DIR);\n@@ -45,7 +45,7 @@ impl LateLintPass<'_> for CreateDir {\n                     expr.span,\n                     \"calling `std::fs::create_dir` where there may be a better way\",\n                     \"consider calling `std::fs::create_dir_all` instead\",\n-                    format!(\"create_dir_all({})\", snippet(cx, args[0].span, \"..\")),\n+                    format!(\"create_dir_all({})\", snippet(cx, arg.span, \"..\")),\n                     Applicability::MaybeIncorrect,\n                 )\n             }"}, {"sha": "74941d817be360bec835d08f4747b9e0078651fd", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -46,7 +46,7 @@ declare_lint_pass!(FromStrRadix10 => [FROM_STR_RADIX_10]);\n impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, exp: &Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::Call(maybe_path, arguments) = &exp.kind;\n+            if let ExprKind::Call(maybe_path, [src, radix]) = &exp.kind;\n             if let ExprKind::Path(QPath::TypeRelative(ty, pathseg)) = &maybe_path.kind;\n \n             // check if the first part of the path is some integer primitive\n@@ -60,20 +60,19 @@ impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n             if pathseg.ident.name.as_str() == \"from_str_radix\";\n \n             // check if the second argument is a primitive `10`\n-            if arguments.len() == 2;\n-            if let ExprKind::Lit(lit) = &arguments[1].kind;\n+            if let ExprKind::Lit(lit) = &radix.kind;\n             if let rustc_ast::ast::LitKind::Int(10, _) = lit.node;\n \n             then {\n-                let expr = if let ExprKind::AddrOf(_, _, expr) = &arguments[0].kind {\n+                let expr = if let ExprKind::AddrOf(_, _, expr) = &src.kind {\n                     let ty = cx.typeck_results().expr_ty(expr);\n                     if is_ty_stringish(cx, ty) {\n                         expr\n                     } else {\n-                        &arguments[0]\n+                        &src\n                     }\n                 } else {\n-                    &arguments[0]\n+                    &src\n                 };\n \n                 let sugg = Sugg::hir_with_applicability("}, {"sha": "a65df48e413e842115fc8154ab7787944d4c2851", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -119,11 +119,9 @@ fn build_manual_memcpy_suggestion<'tcx>(\n \n     let print_limit = |end: &Expr<'_>, end_str: &str, base: &Expr<'_>, sugg: MinifyingSugg<'static>| {\n         if_chain! {\n-            if let ExprKind::MethodCall(method, len_args, _) = end.kind;\n+            if let ExprKind::MethodCall(method, [recv], _) = end.kind;\n             if method.ident.name == sym::len;\n-            if len_args.len() == 1;\n-            if let Some(arg) = len_args.get(0);\n-            if path_to_local(arg) == path_to_local(base);\n+            if path_to_local(recv) == path_to_local(base);\n             then {\n                 if sugg.to_string() == end_str {\n                     sugg::EMPTY.into()\n@@ -343,10 +341,8 @@ fn get_slice_like_element_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Opti\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, args, _) = expr.kind;\n+        if let ExprKind::MethodCall(method, [arg], _) = expr.kind;\n         if method.ident.name == sym::clone;\n-        if args.len() == 1;\n-        if let Some(arg) = args.get(0);\n         then { arg } else { expr }\n     }\n }"}, {"sha": "7ca4a7c4ebfc276a60a692f1491056942a621810", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -188,10 +188,9 @@ pub(super) fn check<'tcx>(\n \n fn is_len_call(expr: &Expr<'_>, var: Symbol) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method, len_args, _) = expr.kind;\n-        if len_args.len() == 1;\n+        if let ExprKind::MethodCall(method, [recv], _) = expr.kind;\n         if method.ident.name == sym::len;\n-        if let ExprKind::Path(QPath::Resolved(_, path)) = len_args[0].kind;\n+        if let ExprKind::Path(QPath::Resolved(_, path)) = recv.kind;\n         if path.segments.len() == 1;\n         if path.segments[0].ident.name == var;\n         then {"}, {"sha": "cf5004399b884cb67e8e1553e4d7aaa9ab9eba5f", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -47,17 +47,14 @@ impl<'tcx> LateLintPass<'tcx> for ManualOkOr {\n         }\n \n         if_chain! {\n-            if let ExprKind::MethodCall(method_segment, args, _) = scrutinee.kind;\n+            if let ExprKind::MethodCall(method_segment, [receiver, or_expr, map_expr], _) = scrutinee.kind;\n             if method_segment.ident.name == sym!(map_or);\n-            if args.len() == 3;\n-            let method_receiver = &args[0];\n-            let ty = cx.typeck_results().expr_ty(method_receiver);\n+            let ty = cx.typeck_results().expr_ty(receiver);\n             if is_type_diagnostic_item(cx, ty, sym::Option);\n-            let or_expr = &args[1];\n-            if is_ok_wrapping(cx, &args[2]);\n+            if is_ok_wrapping(cx, map_expr);\n             if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;\n             if is_lang_ctor(cx, err_path, ResultErr);\n-            if let Some(method_receiver_snippet) = snippet_opt(cx, method_receiver.span);\n+            if let Some(method_receiver_snippet) = snippet_opt(cx, receiver.span);\n             if let Some(err_arg_snippet) = snippet_opt(cx, err_arg.span);\n             if let Some(indent) = indent_of(cx, scrutinee.span);\n             then {"}, {"sha": "1e542447c96eca92b3668e723c5bef92393abb68", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -113,18 +113,18 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n         }\n \n         // check if this is a method call (e.g. x.foo())\n-        if let ExprKind::MethodCall(method, args, _) = e.kind {\n+        if let ExprKind::MethodCall(method, [_, arg], _) = e.kind {\n             // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n             // Enum::Variant[2]))\n-            if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n+            if method.ident.name == sym!(map_err) {\n                 // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n                 // fields\n                 if let ExprKind::Closure(&Closure {\n                     capture_clause,\n                     body,\n                     fn_decl_span,\n                     ..\n-                }) = args[1].kind\n+                }) = arg.kind\n                 {\n                     // check if this is by Reference (meaning there's no move statement)\n                     if capture_clause == CaptureBy::Ref {"}, {"sha": "6db852c3ffe79a1c6f9234f7f3b3a35cd6af7848", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -97,11 +97,7 @@ declare_clippy_lint! {\n declare_lint_pass!(MapUnit => [OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN]);\n \n fn is_unit_type(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Tuple(slice) => slice.is_empty(),\n-        ty::Never => true,\n-        _ => false,\n-    }\n+    ty.is_unit() || ty.is_never()\n }\n \n fn is_unit_function(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {"}, {"sha": "a0efdecec67f49aac5d6af449d4156c6059729e1", "filename": "clippy_lints/src/matches/match_as_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -72,10 +72,10 @@ fn is_ref_some_arm(cx: &LateContext<'_>, arm: &Arm<'_>) -> Option<BindingAnnotat\n         if is_lang_ctor(cx, qpath, LangItem::OptionSome);\n         if let PatKind::Binding(rb, .., ident, _) = first_pat.kind;\n         if rb == BindingAnnotation::Ref || rb == BindingAnnotation::RefMut;\n-        if let ExprKind::Call(e, args) = peel_blocks(arm.body).kind;\n+        if let ExprKind::Call(e, [arg]) = peel_blocks(arm.body).kind;\n         if let ExprKind::Path(ref some_path) = e.kind;\n-        if is_lang_ctor(cx, some_path, LangItem::OptionSome) && args.len() == 1;\n-        if let ExprKind::Path(QPath::Resolved(_, path2)) = args[0].kind;\n+        if is_lang_ctor(cx, some_path, LangItem::OptionSome);\n+        if let ExprKind::Path(QPath::Resolved(_, path2)) = arg.kind;\n         if path2.segments.len() == 1 && ident.name == path2.segments[0].ident.name;\n         then {\n             return Some(rb)"}, {"sha": "663277d11365fa53e11f8f886d631d2dbcb33bdb", "filename": "clippy_lints/src/matches/try_err.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -23,12 +23,10 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, scrutine\n     //         val,\n     // };\n     if_chain! {\n-        if let ExprKind::Call(match_fun, try_args) = scrutinee.kind;\n+        if let ExprKind::Call(match_fun, [try_arg, ..]) = scrutinee.kind;\n         if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n         if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, ..));\n-        if let Some(try_arg) = try_args.get(0);\n-        if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n-        if let Some(err_arg) = err_args.get(0);\n+        if let ExprKind::Call(err_fun, [err_arg, ..]) = try_arg.kind;\n         if let ExprKind::Path(ref err_fun_path) = err_fun.kind;\n         if is_lang_ctor(cx, err_fun_path, ResultErr);\n         if let Some(return_ty) = find_return_type(cx, &expr.kind);"}, {"sha": "cad3ea2a176cd0c25b5dc80fc2097cfbce45a2c0", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -163,8 +163,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'\n     }\n \n     if_chain! {\n-        if let ExprKind::Call(repl_func, repl_args) = src.kind;\n-        if repl_args.is_empty();\n+        if let ExprKind::Call(repl_func, []) = src.kind;\n         if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n         if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n         then {\n@@ -246,11 +245,10 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // Check that `expr` is a call to `mem::replace()`\n-            if let ExprKind::Call(func, func_args) = expr.kind;\n+            if let ExprKind::Call(func, [dest, src]) = expr.kind;\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n             if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::mem_replace, def_id);\n-            if let [dest, src] = func_args;\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);"}, {"sha": "bc6a918f7035544ace250e7516c78731b1edd98e", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -46,11 +46,9 @@ declare_lint_pass!(PathBufPushOverwrite => [PATH_BUF_PUSH_OVERWRITE]);\n impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, args, _) = expr.kind;\n+            if let ExprKind::MethodCall(path, [recv, get_index_arg], _) = expr.kind;\n             if path.ident.name == sym!(push);\n-            if args.len() == 2;\n-            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), sym::PathBuf);\n-            if let Some(get_index_arg) = args.get(1);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv).peel_refs(), sym::PathBuf);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n             if let pushed_path = Path::new(path_lit.as_str());"}, {"sha": "964a057f00d32e5c1da41c7a4d1b7a3525710f0c", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -86,8 +86,7 @@ fn check_is_none_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr: &Ex\n     if_chain! {\n         if let Some(higher::If { cond, then, r#else }) = higher::If::hir(expr);\n         if !is_else_clause(cx.tcx, expr);\n-        if let ExprKind::MethodCall(segment, args, _) = &cond.kind;\n-        if let Some(caller) = args.get(0);\n+        if let ExprKind::MethodCall(segment, [caller, ..], _) = &cond.kind;\n         let caller_ty = cx.typeck_results().expr_ty(caller);\n         let if_block = IfBlockType::IfIs(caller, caller_ty, segment.ident.name, then, r#else);\n         if is_early_return(sym::Option, cx, &if_block) || is_early_return(sym::Result, cx, &if_block);"}, {"sha": "fbf842c339e4906b3fff22a5e3a2d608bc40e047", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -385,24 +385,24 @@ fn check_range_zip_with_len(cx: &LateContext<'_>, path: &PathSegment<'_>, args:\n         if path.ident.as_str() == \"zip\";\n         if let [iter, zip_arg] = args;\n         // `.iter()` call\n-        if let ExprKind::MethodCall(iter_path, iter_args, _) = iter.kind;\n+        if let ExprKind::MethodCall(iter_path, [iter_caller, ..], _) = iter.kind;\n         if iter_path.ident.name == sym::iter;\n         // range expression in `.zip()` call: `0..x.len()`\n         if let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::Range::hir(zip_arg);\n         if is_integer_const(cx, start, 0);\n         // `.len()` call\n-        if let ExprKind::MethodCall(len_path, len_args, _) = end.kind;\n-        if len_path.ident.name == sym::len && len_args.len() == 1;\n+        if let ExprKind::MethodCall(len_path, [len_caller], _) = end.kind;\n+        if len_path.ident.name == sym::len;\n         // `.iter()` and `.len()` called on same `Path`\n-        if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_args[0].kind;\n-        if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_args[0].kind;\n+        if let ExprKind::Path(QPath::Resolved(_, iter_path)) = iter_caller.kind;\n+        if let ExprKind::Path(QPath::Resolved(_, len_path)) = len_caller.kind;\n         if SpanlessEq::new(cx).eq_path_segments(iter_path.segments, len_path.segments);\n         then {\n             span_lint(cx,\n                 RANGE_ZIP_WITH_LEN,\n                 span,\n                 &format!(\"it is more idiomatic to use `{}.iter().enumerate()`\",\n-                    snippet(cx, iter_args[0].span, \"_\"))\n+                    snippet(cx, iter_caller.span, \"_\"))\n             );\n         }\n     }"}, {"sha": "6bcae0da8f48f1bb0333841620147ec445a56ca7", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -57,21 +57,20 @@ declare_lint_pass!(Regex => [INVALID_REGEX, TRIVIAL_REGEX]);\n impl<'tcx> LateLintPass<'tcx> for Regex {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Call(fun, args) = expr.kind;\n+            if let ExprKind::Call(fun, [arg]) = expr.kind;\n             if let ExprKind::Path(ref qpath) = fun.kind;\n-            if args.len() == 1;\n             if let Some(def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n             then {\n                 if match_def_path(cx, def_id, &paths::REGEX_NEW) ||\n                    match_def_path(cx, def_id, &paths::REGEX_BUILDER_NEW) {\n-                    check_regex(cx, &args[0], true);\n+                    check_regex(cx, arg, true);\n                 } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_NEW) ||\n                    match_def_path(cx, def_id, &paths::REGEX_BYTES_BUILDER_NEW) {\n-                    check_regex(cx, &args[0], false);\n+                    check_regex(cx, arg, false);\n                 } else if match_def_path(cx, def_id, &paths::REGEX_SET_NEW) {\n-                    check_set(cx, &args[0], true);\n+                    check_set(cx, arg, true);\n                 } else if match_def_path(cx, def_id, &paths::REGEX_BYTES_SET_NEW) {\n-                    check_set(cx, &args[0], false);\n+                    check_set(cx, arg, false);\n                 }\n             }\n         }"}, {"sha": "b59a25e3a40047eb024a24547ba458488d910ce0", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -233,15 +233,10 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n     /// Returns `true` if give expression is `repeat(0).take(...)`\n     fn is_repeat_take(&self, expr: &Expr<'_>) -> bool {\n         if_chain! {\n-            if let ExprKind::MethodCall(take_path, take_args, _) = expr.kind;\n+            if let ExprKind::MethodCall(take_path, [recv, len_arg, ..], _) = expr.kind;\n             if take_path.ident.name == sym!(take);\n-\n             // Check that take is applied to `repeat(0)`\n-            if let Some(repeat_expr) = take_args.get(0);\n-            if self.is_repeat_zero(repeat_expr);\n-\n-            if let Some(len_arg) = take_args.get(1);\n-\n+            if self.is_repeat_zero(recv);\n             then {\n                 // Check that len expression is equals to `with_capacity` expression\n                 if SpanlessEq::new(self.cx).eq_expr(len_arg, self.vec_alloc.len_expr) {"}, {"sha": "6d54935f81ab26e29d03b3eac6e1fc33e2c88ea9", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -97,12 +97,11 @@ struct LintDetection {\n \n fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintDetection> {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, args, _) = &expr.kind;\n-        if let Some(slice) = &args.get(0);\n+        if let ExprKind::MethodCall(method_name, [slice, args @ ..], _) = &expr.kind;\n         if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n-            let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");\n+            let args_str = args.iter().map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");\n             Some(LintDetection { slice_name: Sugg::hir(cx, slice, \"..\").to_string(), method, method_args: args_str, slice_type })\n         } else {\n             None"}, {"sha": "b6738e2891d3e914b2a31f655b5d2402c6a49efb", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -59,17 +59,17 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                     ExprKind::Ret(Some(e)) | ExprKind::Break(_, Some(e)) => e,\n                     _ => return,\n                 };\n-                if let ExprKind::Call(_, args) = e.kind {\n-                    self.try_desugar_arm.push(args[0].hir_id);\n+                if let ExprKind::Call(_, [arg, ..]) = e.kind {\n+                    self.try_desugar_arm.push(arg.hir_id);\n                 }\n             },\n \n-            ExprKind::MethodCall(name, .., args, _) => {\n+            ExprKind::MethodCall(name, .., [recv, ..], _) => {\n                 if is_trait_method(cx, e, sym::Into) && name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n-                    let b = cx.typeck_results().expr_ty(&args[0]);\n+                    let b = cx.typeck_results().expr_ty(recv);\n                     if same_type_and_consts(a, b) {\n-                        let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n+                        let sugg = snippet_with_macro_callsite(cx, recv.span, \"<expr>\").to_string();\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n@@ -90,9 +90,9 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         }\n                     }\n                     let a = cx.typeck_results().expr_ty(e);\n-                    let b = cx.typeck_results().expr_ty(&args[0]);\n+                    let b = cx.typeck_results().expr_ty(recv);\n                     if same_type_and_consts(a, b) {\n-                        let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                        let sugg = snippet(cx, recv.span, \"<expr>\").into_owned();\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n@@ -107,7 +107,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 if_chain! {\n                     if is_trait_method(cx, e, sym::TryInto) && name.ident.name == sym::try_into;\n                     let a = cx.typeck_results().expr_ty(e);\n-                    let b = cx.typeck_results().expr_ty(&args[0]);\n+                    let b = cx.typeck_results().expr_ty(recv);\n                     if is_type_diagnostic_item(cx, a, sym::Result);\n                     if let ty::Adt(_, substs) = a.kind();\n                     if let Some(a_type) = substs.types().next();\n@@ -126,14 +126,13 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                 }\n             },\n \n-            ExprKind::Call(path, args) => {\n+            ExprKind::Call(path, [arg]) => {\n                 if_chain! {\n-                    if args.len() == 1;\n                     if let ExprKind::Path(ref qpath) = path.kind;\n                     if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n                     then {\n                         let a = cx.typeck_results().expr_ty(e);\n-                        let b = cx.typeck_results().expr_ty(&args[0]);\n+                        let b = cx.typeck_results().expr_ty(arg);\n                         if_chain! {\n                             if match_def_path(cx, def_id, &paths::TRY_FROM);\n                             if is_type_diagnostic_item(cx, a, sym::Result);\n@@ -159,7 +158,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             if same_type_and_consts(a, b);\n \n                             then {\n-                                let sugg = Sugg::hir_with_macro_callsite(cx, &args[0], \"<expr>\").maybe_par();\n+                                let sugg = Sugg::hir_with_macro_callsite(cx, arg, \"<expr>\").maybe_par();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n                                 span_lint_and_sugg("}, {"sha": "afd0077a658049160feb972d23c7a0391769602c", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491483358d076a0bce7689f113898f1ba9f9bf68/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=491483358d076a0bce7689f113898f1ba9f9bf68", "patch": "@@ -61,10 +61,10 @@ impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n \n fn is_file_read_to_end<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n     if_chain! {\n-        if let ExprKind::MethodCall(method_name, exprs, _) = expr.kind;\n+        if let ExprKind::MethodCall(method_name, [recv, ..], _) = expr.kind;\n         if method_name.ident.as_str() == \"read_to_end\";\n-        if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n-        let ty = cx.typeck_results().expr_ty(&exprs[0]);\n+        if let ExprKind::Path(QPath::Resolved(None, _)) = &recv.kind;\n+        let ty = cx.typeck_results().expr_ty(recv);\n         if match_type(cx, ty, &paths::FILE);\n         then {\n             return true"}]}