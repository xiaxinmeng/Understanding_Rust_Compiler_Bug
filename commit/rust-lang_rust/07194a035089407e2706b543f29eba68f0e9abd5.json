{"sha": "07194a035089407e2706b543f29eba68f0e9abd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTk0YTAzNTA4OTQwN2UyNzA2YjU0M2YyOWViYTY4ZjBlOWFiZDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-18T08:37:46Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-18T08:37:46Z"}, "message": "Rollup merge of #33695 - nikomatsakis:spezializes-cache, r=aturon\n\nintroduce a specializes cache\n\nThis query is frequently used during trait selection and caching the\nresult can be a reasonable performance win.\n\nThe one case I examined thus far was the mrusty package (v0.5.1), where I saw an improvement in \"typeck item bodies\" from ~8.3s to ~1.9s.\n\nr? @aturon", "tree": {"sha": "5e4af3dc1092ab6a24a9157590672dde4d60b8ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4af3dc1092ab6a24a9157590672dde4d60b8ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07194a035089407e2706b543f29eba68f0e9abd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07194a035089407e2706b543f29eba68f0e9abd5", "html_url": "https://github.com/rust-lang/rust/commit/07194a035089407e2706b543f29eba68f0e9abd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07194a035089407e2706b543f29eba68f0e9abd5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9246cc41a69ee0c5c3713cf5e4b262d01e15598c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9246cc41a69ee0c5c3713cf5e4b262d01e15598c", "html_url": "https://github.com/rust-lang/rust/commit/9246cc41a69ee0c5c3713cf5e4b262d01e15598c"}, {"sha": "29dad1a280f0f346bcbd013239ffb45b2866c2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/29dad1a280f0f346bcbd013239ffb45b2866c2aa", "html_url": "https://github.com/rust-lang/rust/commit/29dad1a280f0f346bcbd013239ffb45b2866c2aa"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "c5db2a8a7807b99c6729d9ae51a67ee9a423e10a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07194a035089407e2706b543f29eba68f0e9abd5/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07194a035089407e2706b543f29eba68f0e9abd5/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=07194a035089407e2706b543f29eba68f0e9abd5", "patch": "@@ -38,6 +38,7 @@ pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n pub use self::select::{MethodMatchResult, MethodMatched, MethodAmbiguous, MethodDidNotMatch};\n pub use self::select::{MethodMatchedData}; // intentionally don't export variants\n pub use self::specialize::{OverlapError, specialization_graph, specializes, translate_substs};\n+pub use self::specialize::{SpecializesCache};\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;\n pub use self::util::Supertraits;"}, {"sha": "b2d14dab9a0b0463ce6f623e8bec3cb150e389f4", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/07194a035089407e2706b543f29eba68f0e9abd5/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07194a035089407e2706b543f29eba68f0e9abd5/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=07194a035089407e2706b543f29eba68f0e9abd5", "patch": "@@ -20,6 +20,7 @@\n use super::{SelectionContext, FulfillmentContext};\n use super::util::{fresh_type_vars_for_impl, impl_trait_ref_and_oblig};\n \n+use rustc_data_structures::fnv::FnvHashMap;\n use hir::def_id::DefId;\n use infer::{InferCtxt, TypeOrigin};\n use middle::region;\n@@ -111,6 +112,10 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              impl1_def_id: DefId,\n                              impl2_def_id: DefId) -> bool {\n+    if let Some(r) = tcx.specializes_cache.borrow().check(impl1_def_id, impl2_def_id) {\n+        return r;\n+    }\n+\n     // The feature gate should prevent introducing new specializations, but not\n     // taking advantage of upstream ones.\n     if !tcx.sess.features.borrow().specialization &&\n@@ -146,7 +151,7 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              .unwrap()\n                              .subst(tcx, &penv.free_substs);\n \n-    tcx.normalizing_infer_ctxt(ProjectionMode::Topmost).enter(|mut infcx| {\n+    let result = tcx.normalizing_infer_ctxt(ProjectionMode::Topmost).enter(|mut infcx| {\n         // Normalize the trait reference, adding any obligations\n         // that arise into the impl1 assumptions.\n         let Normalized { value: impl1_trait_ref, obligations: normalization_obligations } = {\n@@ -167,7 +172,10 @@ pub fn specializes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Attempt to prove that impl2 applies, given all of the above.\n         fulfill_implication(&infcx, impl1_trait_ref, impl2_def_id).is_ok()\n-    })\n+    });\n+\n+    tcx.specializes_cache.borrow_mut().insert(impl1_def_id, impl2_def_id, result);\n+    result\n }\n \n /// Attempt to fulfill all obligations of `target_impl` after unification with\n@@ -225,3 +233,23 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n         }\n     })\n }\n+\n+pub struct SpecializesCache {\n+    map: FnvHashMap<(DefId, DefId), bool>\n+}\n+\n+impl SpecializesCache {\n+    pub fn new() -> Self {\n+        SpecializesCache {\n+            map: FnvHashMap()\n+        }\n+    }\n+\n+    pub fn check(&self, a: DefId, b: DefId) -> Option<bool> {\n+        self.map.get(&(a, b)).cloned()\n+    }\n+\n+    pub fn insert(&mut self, a: DefId, b: DefId, result: bool) {\n+        self.map.insert((a, b), result);\n+    }\n+}"}, {"sha": "aa50266977795ad642460b3db58293337b4c29c6", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07194a035089407e2706b543f29eba68f0e9abd5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07194a035089407e2706b543f29eba68f0e9abd5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=07194a035089407e2706b543f29eba68f0e9abd5", "patch": "@@ -291,6 +291,8 @@ impl<'a, 'gcx, 'tcx> Deref for TyCtxt<'a, 'gcx, 'tcx> {\n pub struct GlobalCtxt<'tcx> {\n     global_interners: CtxtInterners<'tcx>,\n \n+    pub specializes_cache: RefCell<traits::SpecializesCache>,\n+\n     pub dep_graph: DepGraph,\n \n     /// Common types, pre-interned for your convenience.\n@@ -637,6 +639,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let dep_graph = map.dep_graph.clone();\n         let fulfilled_predicates = traits::GlobalFulfilledPredicates::new(dep_graph.clone());\n         tls::enter_global(GlobalCtxt {\n+            specializes_cache: RefCell::new(traits::SpecializesCache::new()),\n             global_interners: interners,\n             dep_graph: dep_graph.clone(),\n             types: common_types,"}]}