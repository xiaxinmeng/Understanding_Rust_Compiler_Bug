{"sha": "6ace43cf77803ccb854fdcd31bde70860cb84613", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2U0M2NmNzc4MDNjY2I4NTRmZGNkMzFiZGU3MDg2MGNiODQ2MTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T19:49:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T15:42:07Z"}, "message": "hide `SmallCanonicalVarValues` in `OriginalQueryValues` struct", "tree": {"sha": "f70e61c481d9c20e09df66ff8ddb4dec80bef5c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f70e61c481d9c20e09df66ff8ddb4dec80bef5c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ace43cf77803ccb854fdcd31bde70860cb84613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ace43cf77803ccb854fdcd31bde70860cb84613", "html_url": "https://github.com/rust-lang/rust/commit/6ace43cf77803ccb854fdcd31bde70860cb84613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ace43cf77803ccb854fdcd31bde70860cb84613/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da76b4d4e112bb9b81072a027d84ca57b5173129", "url": "https://api.github.com/repos/rust-lang/rust/commits/da76b4d4e112bb9b81072a027d84ca57b5173129", "html_url": "https://github.com/rust-lang/rust/commit/da76b4d4e112bb9b81072a027d84ca57b5173129"}], "stats": {"total": 112, "additions": 66, "deletions": 46}, "files": [{"sha": "8c87c2a01c04fff99a3fe16ccc06ac3a71dfc5e9", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -17,7 +17,7 @@\n \n use infer::canonical::{\n     Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, Canonicalized,\n-    SmallCanonicalVarValues,\n+    OriginalQueryValues,\n };\n use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n@@ -48,7 +48,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn canonicalize_query<V>(\n         &self,\n         value: &V,\n-        var_values: &mut SmallCanonicalVarValues<'tcx>,\n+        query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n@@ -64,7 +64,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             Some(self),\n             self.tcx,\n             &CanonicalizeAllFreeRegions,\n-            var_values,\n+            query_state,\n         )\n     }\n \n@@ -97,13 +97,13 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n-        let mut var_values = SmallVec::new();\n+        let mut query_state = OriginalQueryValues::default();\n         Canonicalizer::canonicalize(\n             value,\n             Some(self),\n             self.tcx,\n             &CanonicalizeQueryResponse,\n-            &mut var_values,\n+            &mut query_state,\n         )\n     }\n \n@@ -119,7 +119,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn canonicalize_hr_query_hack<V>(\n         &self,\n         value: &V,\n-        var_values: &mut SmallCanonicalVarValues<'tcx>,\n+        query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n@@ -135,7 +135,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             Some(self),\n             self.tcx,\n             &CanonicalizeFreeRegionsOtherThanStatic,\n-            var_values,\n+            query_state,\n         )\n     }\n }\n@@ -222,7 +222,7 @@ struct Canonicalizer<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: Option<&'cx InferCtxt<'cx, 'gcx, 'tcx>>,\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     variables: SmallVec<[CanonicalVarInfo; 8]>,\n-    var_values: &'cx mut SmallCanonicalVarValues<'tcx>,\n+    query_state: &'cx mut OriginalQueryValues<'tcx>,\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n     indices: FxHashMap<Kind<'tcx>, CanonicalVar>,\n@@ -330,7 +330,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         infcx: Option<&InferCtxt<'_, 'gcx, 'tcx>>,\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n-        var_values: &mut SmallCanonicalVarValues<'tcx>,\n+        query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n@@ -365,7 +365,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             canonicalize_region_mode,\n             needs_canonical_flags,\n             variables: SmallVec::new(),\n-            var_values,\n+            query_state,\n             indices: FxHashMap::default(),\n         };\n         let out_value = value.fold_with(&mut canonicalizer);\n@@ -396,11 +396,13 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> CanonicalVar {\n         let Canonicalizer {\n             variables,\n-            var_values,\n+            query_state,\n             indices,\n             ..\n         } = self;\n \n+        let var_values = &mut query_state.var_values;\n+\n         // This code is hot. `variables` and `var_values` are usually small\n         // (fewer than 8 elements ~95% of the time). They are SmallVec's to\n         // avoid allocations in those cases. We also don't use `indices` to"}, {"sha": "a78b5b7d072644f91a10189cc20dbd246d39cf05", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -75,9 +75,16 @@ pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<CanonicalVar, Kind<'tcx>>,\n }\n \n-/// Like CanonicalVarValues, but for use in places where a SmallVec is\n-/// appropriate.\n-pub type SmallCanonicalVarValues<'tcx> = SmallVec<[Kind<'tcx>; 8]>;\n+/// When we canonicalize a value to form a query, we wind up replacing\n+/// various parts of it with canonical variables. This struct stores\n+/// those replaced bits to remember for when we process the query\n+/// result.\n+#[derive(Clone, Debug, Default, PartialEq, Eq, Hash, RustcDecodable, RustcEncodable)]\n+pub struct OriginalQueryValues<'tcx> {\n+    /// This is equivalent to `CanonicalVarValues`, but using a\n+    /// `SmallVec` yields a significant performance win.\n+    pub var_values: SmallVec<[Kind<'tcx>; 8]>,\n+}\n \n /// Information about a canonical variable that is included with the\n /// canonical value. This is sufficient information for code to create"}, {"sha": "c29a75c34cf9df0018afaa8a39b89f1583e20285", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -20,7 +20,7 @@\n use infer::canonical::substitute::substitute_value;\n use infer::canonical::{\n     Canonical, CanonicalVarKind, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n-    QueryRegionConstraint, QueryResponse, SmallCanonicalVarValues,\n+    OriginalQueryValues, QueryRegionConstraint, QueryResponse,\n };\n use infer::region_constraints::{Constraint, RegionConstraintData};\n use infer::InferCtxtBuilder;\n@@ -64,11 +64,15 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n         K: TypeFoldable<'tcx>,\n         R: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n     {\n-        self.enter_with_canonical(DUMMY_SP, canonical_key, |ref infcx, key, canonical_inference_vars| {\n-            let fulfill_cx = &mut FulfillmentContext::new();\n-            let value = operation(infcx, fulfill_cx, key)?;\n-            infcx.make_canonicalized_query_response(canonical_inference_vars, value, fulfill_cx)\n-        })\n+        self.enter_with_canonical(\n+            DUMMY_SP,\n+            canonical_key,\n+            |ref infcx, key, canonical_inference_vars| {\n+                let fulfill_cx = &mut FulfillmentContext::new();\n+                let value = operation(infcx, fulfill_cx, key)?;\n+                infcx.make_canonicalized_query_response(canonical_inference_vars, value, fulfill_cx)\n+            },\n+        )\n     }\n }\n \n@@ -153,7 +157,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 region_obligations\n                     .iter()\n                     .map(|(_, r_o)| (r_o.sup_type, r_o.sub_region)),\n-                region_constraints)\n+                region_constraints,\n+            )\n         });\n \n         let certainty = if ambig_errors.is_empty() {\n@@ -184,7 +189,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        original_values: &SmallCanonicalVarValues<'tcx>,\n+        original_values: &OriginalQueryValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, R>\n     where\n@@ -250,7 +255,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        original_values: &SmallCanonicalVarValues<'tcx>,\n+        original_values: &OriginalQueryValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n         output_query_region_constraints: &mut Vec<QueryRegionConstraint<'tcx>>,\n     ) -> InferResult<'tcx, R>\n@@ -272,7 +277,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // variable...\n         let mut obligations = vec![];\n \n-        for (index, original_value) in original_values.iter().enumerate() {\n+        for (index, original_value) in original_values.var_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n             let result_value = query_response.substitute_projected(self.tcx, &result_subst, |v| {\n                 &v.var_values[CanonicalVar::new(index)]\n@@ -344,7 +349,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        original_values: &SmallCanonicalVarValues<'tcx>,\n+        original_values: &OriginalQueryValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, CanonicalVarValues<'tcx>>\n     where\n@@ -385,7 +390,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     fn query_response_substitution_guess<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n-        original_values: &SmallCanonicalVarValues<'tcx>,\n+        original_values: &OriginalQueryValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> CanonicalVarValues<'tcx>\n     where\n@@ -401,7 +406,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // these values with the original inputs that were\n         // canonicalized.\n         let result_values = &query_response.value.var_values;\n-        assert_eq!(original_values.len(), result_values.len());\n+        assert_eq!(original_values.var_values.len(), result_values.len());\n \n         // Quickly try to find initial values for the canonical\n         // variables in the result in terms of the query. We do this\n@@ -415,7 +420,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         // In terms of our example above, we are iterating over pairs like:\n         // [(?A, Vec<?0>), ('static, '?1), (?B, ?0)]\n-        for (original_value, result_value) in original_values.iter().zip(result_values) {\n+        for (original_value, result_value) in original_values.var_values.iter().zip(result_values) {\n             match result_value.unpack() {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n@@ -461,7 +466,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        original_values: &SmallCanonicalVarValues<'tcx>,\n+        original_values: &OriginalQueryValues<'tcx>,\n         result_subst: &CanonicalVarValues<'tcx>,\n         query_response: &Canonical<'tcx, QueryResponse<'tcx, R>>,\n     ) -> InferResult<'tcx, ()>\n@@ -478,7 +483,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n         // Unify the original value for each variable with the value\n         // taken from `query_response` (after applying `result_subst`).\n-        Ok(self.unify_canonical_vars(cause, param_env, original_values, substituted_query_response)?)\n+        Ok(self.unify_canonical_vars(\n+            cause,\n+            param_env,\n+            original_values,\n+            substituted_query_response,\n+        )?)\n     }\n \n     /// Converts the region constraints resulting from a query into an\n@@ -522,12 +532,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        variables1: &SmallCanonicalVarValues<'tcx>,\n+        variables1: &OriginalQueryValues<'tcx>,\n         variables2: impl Fn(CanonicalVar) -> Kind<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         self.commit_if_ok(|_| {\n             let mut obligations = vec![];\n-            for (index, value1) in variables1.iter().enumerate() {\n+            for (index, value1) in variables1.var_values.iter().enumerate() {\n                 let value2 = variables2(CanonicalVar::new(index));\n \n                 match (value1.unpack(), value2.unpack()) {"}, {"sha": "8f7b0df8b95aa74f157d7cab5b1e42da2bb915d9", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -10,7 +10,7 @@\n \n use infer::at::At;\n use infer::InferOk;\n-use smallvec::SmallVec;\n+use infer::canonical::OriginalQueryValues;\n use std::iter::FromIterator;\n use syntax::source_map::Span;\n use ty::subst::Kind;\n@@ -51,7 +51,7 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         }\n \n         let gcx = tcx.global_tcx();\n-        let mut orig_values = SmallVec::new();\n+        let mut orig_values = OriginalQueryValues::default();\n         let c_ty = self.infcx.canonicalize_query(&self.param_env.and(ty), &mut orig_values);\n         let span = self.cause.span;\n         debug!(\"c_ty = {:?}\", c_ty);"}, {"sha": "ca11c5f5a08746929b85e7dcf4861d9b2da4ec87", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use infer::InferCtxt;\n-use smallvec::SmallVec;\n+use infer::canonical::OriginalQueryValues;\n use traits::{EvaluationResult, PredicateObligation, SelectionContext,\n              TraitQueryMode, OverflowError};\n \n@@ -38,7 +38,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n-        let mut _orig_values = SmallVec::new();\n+        let mut _orig_values = OriginalQueryValues::default();\n         let c_pred = self.canonicalize_query(&obligation.param_env.and(obligation.predicate),\n                                              &mut _orig_values);\n         // Run canonical query. If overflow occurs, rerun from scratch but this time"}, {"sha": "4adb65dc58d917de255d7779c109a241ad676b12", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -13,9 +13,9 @@\n //! `normalize_projection_ty` query when it encounters projections.\n \n use infer::at::At;\n+use infer::canonical::OriginalQueryValues;\n use infer::{InferCtxt, InferOk};\n use mir::interpret::{ConstValue, GlobalId};\n-use smallvec::SmallVec;\n use traits::project::Normalized;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -154,7 +154,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n \n                 let gcx = self.infcx.tcx.global_tcx();\n \n-                let mut orig_values = SmallVec::new();\n+                let mut orig_values = OriginalQueryValues::default();\n                 let c_data = self.infcx.canonicalize_query(\n                     &self.param_env.and(*data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);"}, {"sha": "99f557d44d9aa4e085cad074ed573aa4db34ad72", "filename": "src/librustc/traits/query/outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use infer::InferCtxt;\n+use infer::canonical::OriginalQueryValues;\n use syntax::ast;\n use syntax::source_map::Span;\n-use smallvec::SmallVec;\n use traits::{FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt};\n use traits::query::NoSolution;\n use ty::{self, Ty, TyCtxt};\n@@ -105,7 +105,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ) -> Vec<OutlivesBound<'tcx>> {\n         debug!(\"implied_outlives_bounds(ty = {:?})\", ty);\n \n-        let mut orig_values = SmallVec::new();\n+        let mut orig_values = OriginalQueryValues::default();\n         let key = self.canonicalize_query(&param_env.and(ty), &mut orig_values);\n         let result = match self.tcx.global_tcx().implied_outlives_bounds(key) {\n             Ok(r) => r,"}, {"sha": "b292df758eeb5636ff83dd50b8dc6493403c9208", "filename": "src/librustc/traits/query/type_op/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use infer::canonical::{\n-    Canonical, Canonicalized, CanonicalizedQueryResponse, QueryRegionConstraint, QueryResponse,\n+    Canonical, Canonicalized, CanonicalizedQueryResponse, OriginalQueryValues,\n+    QueryRegionConstraint, QueryResponse,\n };\n use infer::{InferCtxt, InferOk};\n-use smallvec::SmallVec;\n use std::fmt;\n use std::rc::Rc;\n use traits::query::Fallible;\n@@ -106,7 +106,7 @@ pub trait QueryTypeOp<'gcx: 'tcx, 'tcx>:\n         // `canonicalize_hr_query_hack` here because of things\n         // like the subtype query, which go awry around\n         // `'static` otherwise.\n-        let mut canonical_var_values = SmallVec::new();\n+        let mut canonical_var_values = OriginalQueryValues::default();\n         let canonical_self =\n             infcx.canonicalize_hr_query_hack(&query_key, &mut canonical_var_values);\n         let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;"}, {"sha": "536c15234064faf86089d9e0de6445a130cc0ff6", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ace43cf77803ccb854fdcd31bde70860cb84613/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=6ace43cf77803ccb854fdcd31bde70860cb84613", "patch": "@@ -10,7 +10,9 @@\n \n use chalk_engine::fallible::Fallible as ChalkEngineFallible;\n use chalk_engine::{context, hh::HhGoal, DelayedLiteral, ExClause};\n-use rustc::infer::canonical::{Canonical, CanonicalVarValues, QueryRegionConstraint, QueryResponse};\n+use rustc::infer::canonical::{\n+    Canonical, CanonicalVarValues, OriginalQueryValues, QueryRegionConstraint, QueryResponse,\n+};\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc::traits::{\n     WellFormed,\n@@ -26,7 +28,6 @@ use rustc::traits::{\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::subst::Kind;\n use rustc::ty::{self, TyCtxt};\n-use smallvec::SmallVec;\n \n use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n@@ -390,7 +391,7 @@ impl context::UnificationOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n         &mut self,\n         value: &ty::ParamEnvAnd<'tcx, Goal<'tcx>>,\n     ) -> Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>> {\n-        let mut _orig_values = SmallVec::new();\n+        let mut _orig_values = OriginalQueryValues::default();\n         self.infcx.canonicalize_query(value, &mut _orig_values)\n     }\n "}]}