{"sha": "8494882773392b461e9609e4f4a60818b26e964c", "node_id": "C_kwDOAAsO6NoAKDg0OTQ4ODI3NzMzOTJiNDYxZTk2MDllNGY0YTYwODE4YjI2ZTk2NGM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-06T17:32:25Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-06T17:32:25Z"}, "message": "Rustup to rustc 1.69.0-nightly (75a0be98f 2023-02-05)", "tree": {"sha": "132809adab967bb162e1c76f61a04fbd4b7ea213", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132809adab967bb162e1c76f61a04fbd4b7ea213"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8494882773392b461e9609e4f4a60818b26e964c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8494882773392b461e9609e4f4a60818b26e964c", "html_url": "https://github.com/rust-lang/rust/commit/8494882773392b461e9609e4f4a60818b26e964c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8494882773392b461e9609e4f4a60818b26e964c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dfa3c9513b718d30c014423ab91b040a073dcd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dfa3c9513b718d30c014423ab91b040a073dcd2", "html_url": "https://github.com/rust-lang/rust/commit/6dfa3c9513b718d30c014423ab91b040a073dcd2"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "b7e0b68a2a27a2cdb9ad71da9d885f7e4d8dc8db", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8494882773392b461e9609e4f4a60818b26e964c/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8494882773392b461e9609e4f4a60818b26e964c/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=8494882773392b461e9609e4f4a60818b26e964c", "patch": "@@ -34,9 +34,9 @@ dependencies = [\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.78\"\n+version = \"1.0.79\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a20104e2335ce8a659d6dd92a51a767a0c062599c73b343fd152cb401e828c3d\"\n+checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n \n [[package]]\n name = \"cfg-if\""}, {"sha": "40fb54b915992b11257b306c543d6b82bf446872", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8494882773392b461e9609e4f4a60818b26e964c/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/8494882773392b461e9609e4f4a60818b26e964c/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=8494882773392b461e9609e4f4a60818b26e964c", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-01-27\"\n+channel = \"nightly-2023-02-06\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "189d952a92f177a0101645b448526c97ef1dc6eb", "filename": "src/base.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8494882773392b461e9609e4f4a60818b26e964c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8494882773392b461e9609e4f4a60818b26e964c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8494882773392b461e9609e4f4a60818b26e964c", "patch": "@@ -790,17 +790,30 @@ fn codegen_stmt<'tcx>(\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::Aggregate(ref kind, ref operands) => match kind.as_ref() {\n-                    AggregateKind::Array(_ty) => {\n-                        for (i, operand) in operands.iter().enumerate() {\n-                            let operand = codegen_operand(fx, operand);\n-                            let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n-                            let to = lval.place_index(fx, index);\n-                            to.write_cvalue(fx, operand);\n+                Rvalue::Aggregate(ref kind, ref operands) => {\n+                    let (variant_index, variant_dest, active_field_index) = match **kind {\n+                        mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                            let variant_dest = lval.downcast_variant(fx, variant_index);\n+                            (variant_index, variant_dest, active_field_index)\n                         }\n+                        _ => (VariantIdx::from_u32(0), lval, None),\n+                    };\n+                    if active_field_index.is_some() {\n+                        assert_eq!(operands.len(), 1);\n                     }\n-                    _ => unreachable!(\"shouldn't exist at codegen {:?}\", to_place_and_rval.1),\n-                },\n+                    for (i, operand) in operands.iter().enumerate() {\n+                        let operand = codegen_operand(fx, operand);\n+                        let field_index = active_field_index.unwrap_or(i);\n+                        let to = if let mir::AggregateKind::Array(_) = **kind {\n+                            let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n+                            variant_dest.place_index(fx, index)\n+                        } else {\n+                            variant_dest.place_field(fx, mir::Field::new(field_index))\n+                        };\n+                        to.write_cvalue(fx, operand);\n+                    }\n+                    crate::discriminant::codegen_set_discriminant(fx, lval, variant_index);\n+                }\n             }\n         }\n         StatementKind::StorageLive(_)"}]}