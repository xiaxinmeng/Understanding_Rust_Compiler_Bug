{"sha": "aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNWZjNzQzYjVlMGQ2N2M3ZGIyOTBhZThmNTYwZGZiMGJiYzg2ZWE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-01-05T15:56:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-05T15:56:48Z"}, "message": "Rollup merge of #57249 - frewsxcv:frewsxcv-second-edition, r=KodrAus\n\nFix broken links to second edition TRPL.\n\nFixes https://github.com/rust-lang/rust/issues/57104.\n\nRemove `second-edition/` from TRPL hyperlinks.", "tree": {"sha": "97555c2a650423136aa3ef98465010d93855da5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97555c2a650423136aa3ef98465010d93855da5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMNPACRBK7hj4Ov3rIwAAdHIIAEr4wXWjPpJMQ38ScHetyQu4\ndCjnzKB3+LjZTKkkpftDx+iP+OwSSETg1RF1l+R3JysOgbkna0uFi839cjcBK7mU\n8EuM6xLOTkyJ9SbChFtf5AvwZhk+DbEeJ+UKsUZMgYDfNb5TJ0cp36wzzBY3oD5R\nu+0Sf49j/YHYKsSlk79mNfNNCH8KpGJa2RjF88vUfwGdC0TjruEIybRwqILFBYE5\nULDh22GE8Ljz5Ygyq8FEP/Sam8KJQZcNzc7VDrQoR+2KS95WbabuYo+xgoVcJkmG\nWyevP7Iq8QiM3bSEjl5EajZfiT1Ku5VAW+oz8pQsCskQAf5kT/KzVEjvA/GyvmE=\n=2ziC\n-----END PGP SIGNATURE-----\n", "payload": "tree 97555c2a650423136aa3ef98465010d93855da5d\nparent dd3e27357d47c4a983d40e19539e3abee22c532d\nparent d2c91a1a6d00949929eb9e913f199eb520f792c4\nauthor kennytm <kennytm@gmail.com> 1546703808 +0800\ncommitter GitHub <noreply@github.com> 1546703808 +0800\n\nRollup merge of #57249 - frewsxcv:frewsxcv-second-edition, r=KodrAus\n\nFix broken links to second edition TRPL.\n\nFixes https://github.com/rust-lang/rust/issues/57104.\n\nRemove `second-edition/` from TRPL hyperlinks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "html_url": "https://github.com/rust-lang/rust/commit/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3e27357d47c4a983d40e19539e3abee22c532d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3e27357d47c4a983d40e19539e3abee22c532d", "html_url": "https://github.com/rust-lang/rust/commit/dd3e27357d47c4a983d40e19539e3abee22c532d"}, {"sha": "d2c91a1a6d00949929eb9e913f199eb520f792c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c91a1a6d00949929eb9e913f199eb520f792c4", "html_url": "https://github.com/rust-lang/rust/commit/d2c91a1a6d00949929eb9e913f199eb520f792c4"}], "stats": {"total": 298, "additions": 149, "deletions": 149}, "files": [{"sha": "65752ba032104133d17b6d251dbb730b375ac876", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -85,7 +85,7 @@ impl<T: ?Sized> !Send for *mut T { }\n     on(parent_trait=\"std::path::Path\", label=\"borrow the `Path` instead\"),\n     message=\"the size for values of type `{Self}` cannot be known at compilation time\",\n     label=\"doesn't have a size known at compile-time\",\n-    note=\"to learn more, visit <https://doc.rust-lang.org/book/second-edition/\\\n+    note=\"to learn more, visit <https://doc.rust-lang.org/book/\\\n           ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\",\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable"}, {"sha": "075c3a084f41dab1e7d02bfc878a729fff7febcc", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -27,7 +27,7 @@\n /// [book] as well as the reference sections on [the dereference operator]\n /// [ref-deref-op], [method resolution] and [type coercions].\n ///\n-/// [book]: ../../book/second-edition/ch15-02-deref.html\n+/// [book]: ../../book/ch15-02-deref.html\n /// [`DerefMut`]: trait.DerefMut.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator\n@@ -117,7 +117,7 @@ impl<T: ?Sized> Deref for &mut T {\n /// [book] as well as the reference sections on [the dereference operator]\n /// [ref-deref-op], [method resolution] and [type coercions].\n ///\n-/// [book]: ../../book/second-edition/ch15-02-deref.html\n+/// [book]: ../../book/ch15-02-deref.html\n /// [`Deref`]: trait.Deref.html\n /// [more]: #more-on-deref-coercion\n /// [ref-deref-op]: ../../reference/expressions/operator-expr.html#the-dereference-operator"}, {"sha": "eae63ea2390a8fca59fb9ef4dba0bc9bd2154384", "filename": "src/libcore/ops/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fdrop.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -11,7 +11,7 @@\n /// Refer to [the chapter on `Drop` in *The Rust Programming Language*][book]\n /// for some more elaboration.\n ///\n-/// [book]: ../../book/second-edition/ch15-03-drop.html\n+/// [book]: ../../book/ch15-03-drop.html\n ///\n /// # Examples\n ///"}, {"sha": "3a1d765f7b8164e530262f9db92a867114a53b84", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -27,7 +27,7 @@\n /// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n-/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [book]: ../../book/ch13-01-closures.html\n /// [`FnMut`]: trait.FnMut.html\n /// [`FnOnce`]: trait.FnOnce.html\n /// [function pointers]: ../../std/primitive.fn.html\n@@ -95,7 +95,7 @@ pub trait Fn<Args> : FnMut<Args> {\n /// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n-/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [book]: ../../book/ch13-01-closures.html\n /// [`Fn`]: trait.Fn.html\n /// [`FnOnce`]: trait.FnOnce.html\n /// [function pointers]: ../../std/primitive.fn.html\n@@ -173,7 +173,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n /// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n /// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n ///\n-/// [book]: ../../book/second-edition/ch13-01-closures.html\n+/// [book]: ../../book/ch13-01-closures.html\n /// [`Fn`]: trait.Fn.html\n /// [`FnMut`]: trait.FnMut.html\n /// [function pointers]: ../../std/primitive.fn.html"}, {"sha": "7f7d168ac0321265bca12cbb2d27fb1e3800ba00", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -723,7 +723,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                      functions can only return borrows to data passed as arguments\",\n                 );\n                 err.note(\n-                    \"to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-\\\n+                    \"to learn more, visit <https://doc.rust-lang.org/book/ch04-02-\\\n                      references-and-borrowing.html#dangling-references>\",\n                 );\n             } else {\n@@ -2139,7 +2139,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n                     \"argument and return type have the same lifetime due to lifetime elision rules\",\n                 );\n                 diag.note(\n-                    \"to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch10-03-\\\n+                    \"to learn more, visit <https://doc.rust-lang.org/book/ch10-03-\\\n                      lifetime-syntax.html#lifetime-elision>\",\n                 );\n "}, {"sha": "262930e08c00421ad85c41df498bb2d1dc9404fd", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -169,7 +169,7 @@ mod crate_keyword { }\n ///\n /// [Algebraic Data Types]: https://en.wikipedia.org/wiki/Algebraic_data_type\n /// [`Option`]: option/enum.Option.html\n-/// [Rust Book]: https://doc.rust-lang.org/book/second-edition/ch06-01-defining-an-enum.html\n+/// [Rust Book]: https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html\n /// [Reference]: https://doc.rust-lang.org/reference/items/enumerations.html\n mod enum_keyword { }\n \n@@ -211,7 +211,7 @@ mod enum_keyword { }\n /// For more information on FFI, check the [Rust book] or the [Reference].\n ///\n /// [Rust book]:\n-/// https://doc.rust-lang.org/book/second-edition/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n+/// https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n /// [Reference]: https://doc.rust-lang.org/reference/items/external-blocks.html\n mod extern_keyword { }\n \n@@ -278,7 +278,7 @@ mod extern_keyword { }\n ///\n /// [`impl`]: keyword.impl.html\n /// [`extern`]: keyword.extern.html\n-/// [Rust book]: https://doc.rust-lang.org/book/second-edition/ch03-03-how-functions-work.html\n+/// [Rust book]: https://doc.rust-lang.org/book/ch03-03-how-functions-work.html\n /// [Reference]: https://doc.rust-lang.org/reference/items/functions.html\n mod fn_keyword { }\n \n@@ -705,6 +705,6 @@ mod loop_keyword { }\n /// [Reference][reference].\n ///\n /// [`PhantomData`]: marker/struct.PhantomData.html\n-/// [book]: https://doc.rust-lang.org/book/second-edition/ch05-01-defining-structs.html\n+/// [book]: https://doc.rust-lang.org/book/ch05-01-defining-structs.html\n /// [reference]: https://doc.rust-lang.org/reference/items/structs.html\n mod struct_keyword { }"}, {"sha": "475c9b4aeaa4efaf29482afc4f4e2b1ac6e55441", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -923,7 +923,7 @@ mod prim_usize { }\n /// For more information on how to use references, see [the book's section on \"References and\n /// Borrowing\"][book-refs].\n ///\n-/// [book-refs]: ../book/second-edition/ch04-02-references-and-borrowing.html\n+/// [book-refs]: ../book/ch04-02-references-and-borrowing.html\n ///\n /// # Trait implementations\n ///"}, {"sha": "c83b14374f7120cd48ffc985f5d906487d5edeaf", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     let x = t.get(); //~ ERROR the size for values of type\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <T as Get>::Value: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "9565888dcc022a0a11a046b73474dffbcf6c0561", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -11,7 +11,7 @@ LL |     let x: Vec<Trait + Sized> = Vec::new();\n    |            ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n@@ -21,7 +21,7 @@ LL |     let x: Vec<Trait + Sized> = Vec::new();\n    |                                 ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn Trait`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `<std::vec::Vec<T>>::new`\n \n error: aborting due to 3 previous errors"}, {"sha": "0f996fcd9434090fca87e8876717f1595ce7ccf9", "filename": "src/test/ui/consts/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unsized.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    |                ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:6:18\n@@ -14,7 +14,7 @@ LL | const CONST_FOO: str = *\"foo\";\n    |                  ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:9:18\n@@ -23,7 +23,7 @@ LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:12:20\n@@ -32,7 +32,7 @@ LL | static STATIC_BAR: str = *\"bar\";\n    |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4e1e67c7f4809eedd117de9123730ecc6bf06db4", "filename": "src/test/ui/dst/dst-bad-assign-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-2.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     f5.ptr = *z;\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "0c4f86613196de961dfefc2ecaabc4b086e0e909", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -14,7 +14,7 @@ LL |     f5.2 = Bar1 {f: 36};\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "a60d9d66f39e629c7fde63aa81969f695ae23c78", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -14,7 +14,7 @@ LL |     f5.ptr = Bar1 {f: 36};\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn ToBar`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error: aborting due to 2 previous errors"}, {"sha": "cb2735147a35b9cd1be8063c370256f308add7ba", "filename": "src/test/ui/dst/dst-bad-deep-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep-2.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     let h: &(([isize],),) = &(*g,);\n    |                              ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `(([isize],),)`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `([isize],)`\n    = note: required because it appears within the type `(([isize],),)`\n    = note: tuples must have a statically known size to be initialized"}, {"sha": "521adf601cc701ed69556ccee978dd54b8f16a52", "filename": "src/test/ui/dst/dst-bad-deep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-deep.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n    |                                  ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Fat<Fat<[isize]>>`, the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Fat<[isize]>`\n    = note: required because it appears within the type `Fat<Fat<[isize]>>`\n    = note: structs must have a statically known size to be initialized"}, {"sha": "4851ca108285fa686cc8a10427d89299eba722d2", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     let u: &Foo = t;\n    |                   ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n@@ -16,7 +16,7 @@ LL |     let v: &Foo = t as &Foo;\n    |                   ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required for the cast to the object type `dyn Foo`\n \n@@ -27,7 +27,7 @@ LL |     let _: &[&Foo] = &[\"hi\"];\n    |                        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -37,7 +37,7 @@ LL |     let _: &Foo = x as &Foo;\n    |                   ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error: aborting due to 4 previous errors"}, {"sha": "40dc9978f367bc9742ba75da443b8aad130baddd", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[isize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6\n@@ -14,7 +14,7 @@ LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5e416da883dedb3f82696f721571137a5d20e90", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn f(p: Path) { }\n    |      ^ borrow the `Path` instead\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "4e4f5550fe833d028f615c6334038dd416e167d9", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     assert_sized::<A>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n note: required by `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:1\n    |\n@@ -19,7 +19,7 @@ LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n note: required by `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:1\n@@ -34,7 +34,7 @@ LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n note: required by `assert_sized`\n   --> $DIR/extern-types-unsized.rs:19:1\n@@ -49,7 +49,7 @@ LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n    = note: required because it appears within the type `Bar<Bar<A>>`\n note: required by `assert_sized`"}, {"sha": "1f35efa59b690c1a46d02008fb299c7fc6368265", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -95,7 +95,7 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n@@ -108,7 +108,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n@@ -122,7 +122,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "bde39cbeaeb285643a62fe0e630b4d0498645614", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn f(f: FnOnce()) {}\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::FnOnce() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "4f59f2c1c6ab32f32e0058b0328d6ec4ceccb79d", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -9,7 +9,7 @@ LL | |    };\n    | |____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the yield type of a generator must have a statically known size\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -19,7 +19,7 @@ LL |    unsafe { gen.resume(); }\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a3588bb8ebe124e3dba59035600ba0a1aff01ba7", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     let _x = \"test\" as &::std::any::Any;\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn std::any::Any`\n \n error: aborting due to previous error"}, {"sha": "987bc512163d67c8d4d6ac4c7649df2de1907e6c", "filename": "src/test/ui/issues/issue-15756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15756.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     &mut something\n    |          ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "72c40ff4b3a0c3f6c5ea6598a9d94afb4c4a56f7", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     (|| Box::new(*(&[0][..])))();\n    |         ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `<std::boxed::Box<T>>::new`\n \n error: aborting due to previous error"}, {"sha": "23b58c3f6df3d88fb072c93f8c00ddb46d68cb54", "filename": "src/test/ui/issues/issue-18107.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18107.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     AbstractRenderer\n    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn AbstractRenderer + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error"}, {"sha": "ca717a3c49b8158c6e5117688e7737d26c3667c5", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -7,7 +7,7 @@ LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn for<'r> std::ops::Fn(&'r isize) -> isize`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::option::Option`\n \n error: aborting due to previous error"}, {"sha": "672d78f65e9f7c1eb833f0c0a400fd9a3f0a3be8", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -9,7 +9,7 @@ LL | |     }\n    | |_____^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n note: required by `From`\n   --> $DIR/issue-20005.rs:1:1"}, {"sha": "f7cb28edd621686017bba6f158ddad06246af84b", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     fn iceman(c: Vec<[i32]>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error: aborting due to previous error"}, {"sha": "f779fe51bf2d165deefc6d4a7931d3f0424fde65", "filename": "src/test/ui/issues/issue-20605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20605.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     for item in *things { *item = 0 }\n    |                 ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `dyn std::iter::Iterator<Item=&mut u8>`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::iter::IntoIterator::into_iter`\n \n error: aborting due to previous error"}, {"sha": "229f99f90640ba01d8f1c25a88abe732affd77bb", "filename": "src/test/ui/issues/issue-22874.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22874.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     rows: [[String]],\n    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::string::String]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "1e57774afe55aa2d402efaffb114628a37bd1370", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     pub fn function(funs: Vec<Fn() -> ()>) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error: aborting due to previous error"}, {"sha": "ffec73b1ab4a818fea10bc84198e0027a1597607", "filename": "src/test/ui/issues/issue-24446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24446.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     static foo: Fn() -> u32 = || -> u32 {\n    |                 ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::ops::Fn() -> u32 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "b95c298b6e679382c72e594243d4bb4646e45769", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     data: T, //~ ERROR the size for values of type\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n "}, {"sha": "76cc3e7b0a36e156427f65b96ef3e0b561341776", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self) -> &'static i32 {\n    |            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "48b151c73c9565b147a975a9f8f0e39e3297243b", "filename": "src/test/ui/issues/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     &X(*Y)\n    |      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "825c0de5e53ea945971674066b764463d26ae691", "filename": "src/test/ui/issues/issue-35988.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35988.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     V([Box<E>]),\n    |       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[std::boxed::Box<E>]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error: aborting due to previous error"}, {"sha": "a74d6353c31f498e241b26d0bdecd37aba54b01c", "filename": "src/test/ui/issues/issue-38954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38954.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn _test(ref _p: str) {}\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "bcca911c5a5c8d1798447361c9287b0e9b58fa7f", "filename": "src/test/ui/issues/issue-41229-ref-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41229-ref-str.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | pub fn example(ref s: str) {}\n    |                            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "20c8d085cbc62f375edf8848316bb7c53ca5a928", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     fn baz(_: Self::Target) where Self: Deref {}\n    |                             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where <Self as std::ops::Deref>::Target: std::marker::Sized` bound\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -17,7 +17,7 @@ LL | pub fn f(_: ToString) {}\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::string::ToString + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "992c691bf21ef2cba62f36c07ce9e2e820777163", "filename": "src/test/ui/issues/issue-54410.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54410.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     pub static mut symbol: [i8];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error: aborting due to previous error\n "}, {"sha": "ad463d4c478ca8e1b4634ba97b68d2d4f0699199", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn new_struct(r: A+'static)\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n@@ -16,7 +16,7 @@ LL |     -> Struct { //~^ ERROR the size for values of type\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Struct`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Struct`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "158d114616979c907a59eaed5a6b629f19ecc6ef", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -223,7 +223,7 @@ LL |     let _ = fat_v as *const Foo; //~ ERROR the size for values of type\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -233,7 +233,7 @@ LL |     let _ = a as *const Foo; //~ ERROR the size for values of type\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid"}, {"sha": "e83374af3b0662f039376088d83c84dcf061e854", "filename": "src/test/ui/nll/issue-52534.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -10,7 +10,7 @@ LL | }\n    | - ...but `x` will be dropped here, when the function `bar` returns\n    |\n    = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/issue-52534.rs:18:26\n@@ -24,7 +24,7 @@ LL | }\n    | - ...but `y` will be dropped here, when the function `foobar` returns\n    |\n    = note: functions cannot return a borrow to data owned within the function's scope, functions can only return borrows to data passed as arguments\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#dangling-references>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#dangling-references>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "00c0c80515557944043224e5b3a18d8914ad904e", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -19,7 +19,7 @@ LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[{integer}]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::ops::RangeFrom`\n \n error: aborting due to 3 previous errors"}, {"sha": "89eb3d97ce0a54eacec2b968e3a906648b8051a8", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "24d8db481b46833ef9e096a5c3fd5d387397199e", "filename": "src/test/ui/str/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-array-assignment.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -28,7 +28,7 @@ LL |   let v = s[..2];\n    |       doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "a0c7c2c574e4efff59b226243b8273972e7f0f04", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n note: required by `bot`\n   --> $DIR/str-mut-idx.rs:1:1\n    |\n@@ -19,7 +19,7 @@ LL |     s[1..2] = bot();\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the left-hand-side of an assignment must have a statically known size\n \n error[E0277]: the type `str` cannot be mutably indexed by `usize`"}, {"sha": "567b4d9f4403edeeb3323a4ac1b3c433b6143a01", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -41,7 +41,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n note: required by `Foo::bar`\n   --> $DIR/substs-ppaux.rs:7:5"}, {"sha": "9d8a555dffe16fb4658e29ea1723f0f62da5597b", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -41,7 +41,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n note: required by `Foo::bar`\n   --> $DIR/substs-ppaux.rs:7:5"}, {"sha": "b073e10749cc1334e1c19fda8322aa5125c95e57", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn f(p: Path) { }\n    |      ^ borrow the `Path` instead\n    |\n    = help: within `std::path::Path`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `std::path::Path`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "5aee1e7e982a8968b34531015f182c3e7e636176", "filename": "src/test/ui/traits/trait-bounds-not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-not-on-bare-trait.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: Foo + Send) {\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + std::marker::Send + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "f88dae37e48e597b1830e2008e3457e7372760d4", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     mem::size_of::<U>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required by `std::mem::size_of`\n \n@@ -16,7 +16,7 @@ LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Misc<U>`, the trait `std::marker::Sized` is not implemented for `U`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required because it appears within the type `Misc<U>`\n    = note: required by `std::mem::size_of`\n@@ -54,7 +54,7 @@ LL |     mem::size_of::<[T]>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[T]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n@@ -64,7 +64,7 @@ LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[&U]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::mem::size_of`\n \n error: aborting due to 7 previous errors"}, {"sha": "aa055d3dc03f56dc651d816ccf6eea91fa15dbe1", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn cant_return_str() -> str { //~ ERROR\n    |                         ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: the return type of a function must have a statically known size\n \n error[E0599]: no method named `test` found for type `i32` in the current scope"}, {"sha": "89140030683858aa4217271b860c5dea39bace8e", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     value: T,\n    |     ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "e702f2c61bee3ff543755b0f549ad5158210a30a", "filename": "src/test/ui/union/union-unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsized.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     a: str,\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -15,7 +15,7 @@ LL |     b: str,\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of a union may have a dynamically sized type\n \n error: aborting due to 2 previous errors"}, {"sha": "7b6c2d11ea169786581385b24106a818380f03c7", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: within `main::A<str>`, the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `main::A<str>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "be006c09d6f5c6cd177827509358902cd6d7b7fa", "filename": "src/test/ui/unsized-locals/issue-50940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     A as fn(str) -> A<str>;\n    |     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "43c35cdd7b5b09b461042a8243dffd42c787b1fe", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     udrop::<(i32, [u8])>((42, *foo()));\n    |                          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, [u8])`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `({integer}, [u8])`\n    = note: tuples must have a statically known size to be initialized\n \n@@ -16,7 +16,7 @@ LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n    |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: structs must have a statically known size to be initialized\n \n@@ -27,7 +27,7 @@ LL |     udrop::<A<[u8]>>(A(*foo()));\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `A<[u8]>`\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "f9a7452a5ebf228206b0d2cb44cb76fdb75e5bc9", "filename": "src/test/ui/unsized-locals/unsized-exprs3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs3.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     udrop as fn([u8]);\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n "}, {"sha": "cee1459c7915d7aa2e1caf7cd766e0d608907ee5", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n note: required by `bar`\n   --> $DIR/unsized-bare-typaram.rs:1:1"}, {"sha": "20857a1d65e753be959912883833f12b4d993837", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |                                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n note: required by `Foo`\n   --> $DIR/unsized-enum.rs:4:1"}, {"sha": "9109366e4fcfdde30eb2e3e82f25711715672ce8", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     VB{x: X},\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -38,7 +38,7 @@ LL |     VD{u: isize, x: Z},\n    |                  ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -49,7 +49,7 @@ LL |     VE([u8]),\n    |        ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n@@ -59,7 +59,7 @@ LL |     VF{x: str},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n@@ -69,7 +69,7 @@ LL |     VG(isize, [f32]),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n@@ -79,7 +79,7 @@ LL |     VH{u: isize, x: [u32]},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n@@ -89,7 +89,7 @@ LL |     VM(Foo),\n    |        ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn Bar + 'static)` cannot be known at compilation time\n@@ -99,7 +99,7 @@ LL |     VN{x: Bar},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n@@ -109,7 +109,7 @@ LL |     VO(isize, FooBar),\n    |               ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n@@ -119,7 +119,7 @@ LL |     VP{u: isize, x: BarFoo},\n    |                  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n@@ -129,7 +129,7 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[char]` cannot be known at compilation time\n@@ -139,7 +139,7 @@ LL |     VR{x: <&'static [char] as Deref>::Target},\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[char]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[f64]` cannot be known at compilation time\n@@ -149,7 +149,7 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n@@ -159,7 +159,7 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: no field of an enum variant may have a dynamically sized type\n \n error[E0277]: the size for values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n@@ -169,7 +169,7 @@ LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -180,7 +180,7 @@ LL |     VJ{x: Path2},\n    |        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -191,7 +191,7 @@ LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -202,7 +202,7 @@ LL |     VL{u: isize, x: Path4},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "98eecabc84cb8b973bc24cde734c2f618adc1b85", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized> S5<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `S5`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:1"}, {"sha": "7add65c07866b22a4162f920fd301b640605fc82", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |                                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n note: required by `Foo`\n   --> $DIR/unsized-struct.rs:4:1\n@@ -20,7 +20,7 @@ LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |                        ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required because it appears within the type `Bar<T>`\n note: required by `is_sized`"}, {"sha": "c39f3652b647c6ce8cf605de984b40d3e56b4c7e", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `S5`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:1"}, {"sha": "ee0d5ccccfe11b296204457ddd5c6868b94f82e4", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error"}, {"sha": "2c7b86c5d828438eb120fb95808cb2c8d5de1fb1", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     f2::<X>(x);\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `f2`\n   --> $DIR/unsized3.rs:10:1\n@@ -20,7 +20,7 @@ LL |     f4::<X>(x);\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n note: required by `f4`\n   --> $DIR/unsized3.rs:21:1\n@@ -35,7 +35,7 @@ LL |     f5(x1);\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n note: required by `f5`\n@@ -51,7 +51,7 @@ LL |     f5(&(*x1, 34));\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: only the last element of a tuple may have a dynamically sized type\n@@ -63,7 +63,7 @@ LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n@@ -76,7 +76,7 @@ LL |     f5(&(32, *x1));\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `({integer}, S<X>)`, the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`"}, {"sha": "6dce9a046066fbdea9edbca9347d81b20b9a9bfa", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     f1: X,\n    |     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -16,7 +16,7 @@ LL |     g: X,\n    |     ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n@@ -27,7 +27,7 @@ LL |     f: str,\n    |     ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n@@ -37,7 +37,7 @@ LL |     f: [u8],\n    |     ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: only the last field of a struct may have a dynamically sized type\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n@@ -47,7 +47,7 @@ LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -58,7 +58,7 @@ LL |     V2{f1: X, f: isize},\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n "}, {"sha": "a6a26573e7c596789835162adc531316988d0276", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -17,7 +17,7 @@ LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -28,7 +28,7 @@ LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Z`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -39,7 +39,7 @@ LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -51,7 +51,7 @@ LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: only the last element of a tuple may have a dynamically sized type\n \n@@ -62,7 +62,7 @@ LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -74,7 +74,7 @@ LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -86,7 +86,7 @@ LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -98,7 +98,7 @@ LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -110,7 +110,7 @@ LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -122,7 +122,7 @@ LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -134,7 +134,7 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    |                  ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n@@ -146,7 +146,7 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    |                      ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature"}, {"sha": "bb83b1811844aa4f1fdde87f53acef5a098f095b", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |                     ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n \n error: aborting due to previous error"}, {"sha": "69df9ea7857d555e591f7cb524875511f4be84d1", "filename": "src/test/ui/wf/wf-array-elem-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-array-elem-sized.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -5,7 +5,7 @@ LL |     foo: [[u8]], //~ ERROR E0277\n    |     ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: slice and array elements must have `Sized` type\n \n error: aborting due to previous error"}, {"sha": "594ce7d2f49caef8a1af60537c7aae06afcfc346", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=aa5fc743b5e0d67c7db290ae8f560dfb0bbc86ea", "patch": "@@ -20,7 +20,7 @@ LL | fn bar() where Vec<dyn Copy>:, {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required by `std::vec::Vec`\n \n error[E0038]: the trait `std::marker::Copy` cannot be made into an object"}]}