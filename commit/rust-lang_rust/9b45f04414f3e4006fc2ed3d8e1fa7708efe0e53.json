{"sha": "9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "node_id": "C_kwDOAAsO6NoAKDliNDVmMDQ0MTRmM2U0MDA2ZmMyZWQzZDhlMWZhNzcwOGVmZTBlNTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-17T02:03:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-17T02:03:10Z"}, "message": "Auto merge of #91672 - b-naber:merge-normalize-erasing-regions-queries, r=jackh726\n\nImplement normalize_erasing_regions queries in terms of 'try' version\n\nAttempt to lessen performance regression caused by https://github.com/rust-lang/rust/pull/91255\n\nr? `@jackh726`", "tree": {"sha": "945190fa4eb8676110afba7b809a2d14a96b2a76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/945190fa4eb8676110afba7b809a2d14a96b2a76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "html_url": "https://github.com/rust-lang/rust/commit/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c2723269e14c3b037feb2c4865a82053403649", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c2723269e14c3b037feb2c4865a82053403649", "html_url": "https://github.com/rust-lang/rust/commit/23c2723269e14c3b037feb2c4865a82053403649"}, {"sha": "399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "url": "https://api.github.com/repos/rust-lang/rust/commits/399ab40dbd9f3bca72f589feefbf5bf1bcacf778", "html_url": "https://github.com/rust-lang/rust/commit/399ab40dbd9f3bca72f589feefbf5bf1bcacf778"}], "stats": {"total": 73, "additions": 9, "deletions": 64}, "files": [{"sha": "78e33544655f0312ade64fc5598f83364437fff1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "patch": "@@ -1658,27 +1658,6 @@ rustc_queries! {\n         remap_env_constness\n     }\n \n-    // FIXME: Implement `normalize_generic_arg_after_erasing_regions` and\n-    // `normalize_mir_const_after_erasing_regions` in terms of\n-    // `try_normalize_generic_arg_after_erasing_regions` and\n-    // `try_normalize_mir_const_after_erasing_regions`, respectively.\n-\n-    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n-    query normalize_generic_arg_after_erasing_regions(\n-        goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n-    ) -> GenericArg<'tcx> {\n-        desc { \"normalizing `{}`\", goal.value }\n-        remap_env_constness\n-    }\n-\n-    /// Do not call this query directly: invoke `normalize_erasing_regions` instead.\n-    query normalize_mir_const_after_erasing_regions(\n-        goal: ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n-    ) -> mir::ConstantKind<'tcx> {\n-        desc { \"normalizing `{}`\", goal.value }\n-        remap_env_constness\n-    }\n-\n     /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n     query try_normalize_generic_arg_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>"}, {"sha": "312093b4f885985f21e882ca70ea041a3ce23ce7", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "patch": "@@ -176,7 +176,10 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(arg);\n         debug!(?arg);\n \n-        self.tcx.normalize_generic_arg_after_erasing_regions(arg)\n+        self.tcx.try_normalize_generic_arg_after_erasing_regions(arg).unwrap_or_else(|_| bug!(\n+                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n+                arg.value\n+            ))\n     }\n }\n \n@@ -197,7 +200,9 @@ impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n         // FIXME: This *probably* needs canonicalization too!\n         let arg = self.param_env.and(c);\n-        self.tcx.normalize_mir_const_after_erasing_regions(arg)\n+        self.tcx\n+            .try_normalize_mir_const_after_erasing_regions(arg)\n+            .unwrap_or_else(|_| bug!(\"failed to normalize {:?}\", c))\n     }\n }\n "}, {"sha": "87530cf9961b10a3406a0a3a75cee23955b30634", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=9b45f04414f3e4006fc2ed3d8e1fa7708efe0e53", "patch": "@@ -8,20 +8,13 @@ use std::sync::atomic::Ordering;\n \n crate fn provide(p: &mut Providers) {\n     *p = Providers {\n-        normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n-            debug!(\"normalize_generic_arg_after_erasing_regions(goal={:#?})\", goal);\n+        try_normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n+            debug!(\"try_normalize_generic_arg_after_erasing_regions(goal={:#?}\", goal);\n \n             tcx.sess\n                 .perf_stats\n                 .normalize_generic_arg_after_erasing_regions\n                 .fetch_add(1, Ordering::Relaxed);\n-            normalize_after_erasing_regions(tcx, goal)\n-        },\n-        normalize_mir_const_after_erasing_regions: |tcx, goal| {\n-            normalize_after_erasing_regions(tcx, goal)\n-        },\n-        try_normalize_generic_arg_after_erasing_regions: |tcx, goal| {\n-            debug!(\"try_normalize_generic_arg_after_erasing_regions(goal={:#?}\", goal);\n \n             try_normalize_after_erasing_regions(tcx, goal)\n         },\n@@ -32,38 +25,6 @@ crate fn provide(p: &mut Providers) {\n     };\n }\n \n-#[instrument(level = \"debug\", skip(tcx))]\n-fn normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n-    tcx: TyCtxt<'tcx>,\n-    goal: ParamEnvAnd<'tcx, T>,\n-) -> T {\n-    let ParamEnvAnd { param_env, value } = goal;\n-    tcx.infer_ctxt().enter(|infcx| {\n-        let cause = ObligationCause::dummy();\n-        match infcx.at(&cause, param_env).normalize(value) {\n-            Ok(Normalized { value: normalized_value, obligations: normalized_obligations }) => {\n-                // We don't care about the `obligations`; they are\n-                // always only region relations, and we are about to\n-                // erase those anyway:\n-                debug_assert_eq!(\n-                    normalized_obligations.iter().find(|p| not_outlives_predicate(&p.predicate)),\n-                    None,\n-                );\n-\n-                let resolved_value = infcx.resolve_vars_if_possible(normalized_value);\n-                // It's unclear when `resolve_vars` would have an effect in a\n-                // fresh `InferCtxt`. If this assert does trigger, it will give\n-                // us a test case.\n-                debug_assert_eq!(normalized_value, resolved_value);\n-                let erased = infcx.tcx.erase_regions(resolved_value);\n-                debug_assert!(!erased.needs_infer(), \"{:?}\", erased);\n-                erased\n-            }\n-            Err(NoSolution) => bug!(\"could not fully normalize `{:?}`\", value),\n-        }\n-    })\n-}\n-\n #[instrument(level = \"debug\", skip(tcx))]\n fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq + Copy>(\n     tcx: TyCtxt<'tcx>,"}]}