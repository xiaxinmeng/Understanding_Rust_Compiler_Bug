{"sha": "fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNTE4YWM0YjBmZTMwYjEzZDJmZGYwZjFiNGI5ZmExMjlkNzVkZmY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-07T15:17:03Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-07T16:52:07Z"}, "message": "Add File::read_contents and File::write_contents convenience functions.\n\nBefore:\n\n```rust\nuse std::fs::File;\nuse std::io::Read;\n\nlet mut bytes = Vec::new();\nFile::open(filename)?.read_to_end(&mut bytes)?;\ndo_something_with(bytes)\n```\n\nAfter:\n\n```rust\nuse std::fs::File;\n\ndo_something_with(File::read_contents(filename)?)\n```", "tree": {"sha": "a95f09bcd8812dd94a7cf8d180d8847eb295e441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95f09bcd8812dd94a7cf8d180d8847eb295e441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff", "html_url": "https://github.com/rust-lang/rust/commit/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7f501991df2f7fc87f6c340945112c128735d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7f501991df2f7fc87f6c340945112c128735d2", "html_url": "https://github.com/rust-lang/rust/commit/3e7f501991df2f7fc87f6c340945112c128735d2"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "9b41cde30fb71b5b33d341aa8bac1e0a84ca5ddb", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff", "patch": "@@ -262,6 +262,73 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n     }\n \n+    /// Read the entire contents of a file into a bytes vector.\n+    ///\n+    /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n+    /// with fewer imports and without an intermediate variable.\n+    ///\n+    /// [`File::open`]: struct.File.html#method.open\n+    /// [`read_to_end`]: ../io/trait.Read.html#method.read_to_end\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if `path` does not already exist.\n+    /// Other errors may also be returned according to [`OpenOptions::open`].\n+    ///\n+    /// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n+    ///\n+    /// It will also return an error if it encounters while reading an error\n+    /// of a kind other than [`ErrorKind::Interrupted`].\n+    ///\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(file_read_write_contents)]\n+    ///\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> Result<(), Box<std::error::Error + 'static>> {\n+    /// let foo = String::from_utf8(File::read_contents(\"foo.txt\")?)?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"file_read_write_contents\", issue = /* FIXME */ \"0\")]\n+    pub fn read_contents<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n+        let mut bytes = Vec::new();\n+        File::open(path)?.read_to_end(&mut bytes)?;\n+        Ok(bytes)\n+    }\n+\n+    /// Write the give contents to a file.\n+    ///\n+    /// This function will create a file if it does not exist,\n+    /// and will entirely replace its contents if it does.\n+    ///\n+    /// This is a convenience function for using [`File::create`] and [`write_all`]\n+    /// with fewer imports.\n+    ///\n+    /// [`File::create`]: struct.File.html#method.create\n+    /// [`write_all`]: ../io/trait.Write.html#method.write_all\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(file_read_write_contents)]\n+    ///\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// File::write_contents(\"foo.txt\", b\"Lorem ipsum\")?;\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"file_read_write_contents\", issue = /* FIXME */ \"0\")]\n+    pub fn write_contents<P: AsRef<Path>>(path: P, contents: &[u8]) -> io::Result<()> {\n+        File::create(path)?.write_all(contents)\n+    }\n+\n     /// Attempts to sync all OS-internal metadata to disk.\n     ///\n     /// This function will attempt to ensure that all in-core data reaches the\n@@ -2921,6 +2988,18 @@ mod tests {\n         assert!(v == &bytes[..]);\n     }\n \n+    #[test]\n+    fn write_contents_then_read_contents() {\n+        let mut bytes = [0; 1024];\n+        StdRng::new().unwrap().fill_bytes(&mut bytes);\n+\n+        let tmpdir = tmpdir();\n+\n+        check!(File::write_contents(&tmpdir.join(\"test\"), &bytes));\n+        let v = check!(File::read_contents(&tmpdir.join(\"test\")));\n+        assert!(v == &bytes[..]);\n+    }\n+\n     #[test]\n     fn file_try_clone() {\n         let tmpdir = tmpdir();"}, {"sha": "698830cc45b3de53f37ea64d41294824542d3b49", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fd518ac4b0fe30b13d2fdf0f1b4b9fa129d75dff", "patch": "@@ -269,6 +269,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(file_read_write_contents)]\n #![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]"}]}