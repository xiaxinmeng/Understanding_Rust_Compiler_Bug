{"sha": "3c17c84a386e7badf6b2c6018d172496b3a28a04", "node_id": "C_kwDOAAsO6NoAKDNjMTdjODRhMzg2ZTdiYWRmNmIyYzYwMThkMTcyNDk2YjNhMjhhMDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T19:23:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T19:23:00Z"}, "message": "Auto merge of #95180 - matthiaskrgr:rollup-ai1ch2s, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #95074 (Refactor: use `format-args-capture` and remove unnecessary nested if blocks in some parts of `rust_passes`)\n - #95085 (Return err instead of ICE)\n - #95116 (Add needs-* directives to many tests)\n - #95129 (Remove animation on source sidebar)\n - #95166 (Update the unstable book with the new `values()` form of check-cfg)\n - #95175 (move `adt_const_params`  to its own tracking issue)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fdaa982e9d0dbb977c5bb7aa9c3caa43a9f5ca73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdaa982e9d0dbb977c5bb7aa9c3caa43a9f5ca73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c17c84a386e7badf6b2c6018d172496b3a28a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c17c84a386e7badf6b2c6018d172496b3a28a04", "html_url": "https://github.com/rust-lang/rust/commit/3c17c84a386e7badf6b2c6018d172496b3a28a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c17c84a386e7badf6b2c6018d172496b3a28a04/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44628f7273052d0bb8e8218518dacab210e1fe0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44628f7273052d0bb8e8218518dacab210e1fe0d", "html_url": "https://github.com/rust-lang/rust/commit/44628f7273052d0bb8e8218518dacab210e1fe0d"}, {"sha": "44200a91ba03e4f629db618f4e4e36f32cd9a3a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/44200a91ba03e4f629db618f4e4e36f32cd9a3a6", "html_url": "https://github.com/rust-lang/rust/commit/44200a91ba03e4f629db618f4e4e36f32cd9a3a6"}], "stats": {"total": 472, "additions": 250, "deletions": 222}, "files": [{"sha": "feef7295254a9eaed070d799d3dfa715da0d054f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -287,7 +287,7 @@ declare_features! (\n     /// Allows `extern \"x86-interrupt\" fn()`.\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n     /// Allows additional const parameter types, such as `&'static str` or user defined types\n-    (incomplete, adt_const_params, \"1.56.0\", Some(44580), None),\n+    (incomplete, adt_const_params, \"1.56.0\", Some(95174), None),\n     /// Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n     /// Allows explicit discriminants on non-unit enum variants."}, {"sha": "4f9e1d3fa3bcaf1a4e8375bdef0478130f267dc6", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -196,8 +196,7 @@ impl CheckAttrVisitor<'_> {\n     fn inline_attr_str_error_with_macro_def(&self, hir_id: HirId, attr: &Attribute, sym: &str) {\n         self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n             lint.build(&format!(\n-                \"`#[{}]` is ignored on struct fields, match arms and macro defs\",\n-                sym,\n+                \"`#[{sym}]` is ignored on struct fields, match arms and macro defs\",\n             ))\n             .warn(\n                 \"this was previously accepted by the compiler but is \\\n@@ -214,7 +213,7 @@ impl CheckAttrVisitor<'_> {\n \n     fn inline_attr_str_error_without_macro_def(&self, hir_id: HirId, attr: &Attribute, sym: &str) {\n         self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-            lint.build(&format!(\"`#[{}]` is ignored on struct fields and match arms\", sym))\n+            lint.build(&format!(\"`#[{sym}]` is ignored on struct fields and match arms\"))\n                 .warn(\n                     \"this was previously accepted by the compiler but is \\\n                  being phased out; it will become a hard error in \\\n@@ -721,7 +720,7 @@ impl CheckAttrVisitor<'_> {\n                 .sess\n                 .struct_span_err(\n                     meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    &format!(\"`{}` is not a valid identifier\", doc_keyword),\n+                    &format!(\"`{doc_keyword}` is not a valid identifier\"),\n                 )\n                 .emit();\n             return false;\n@@ -805,8 +804,7 @@ impl CheckAttrVisitor<'_> {\n                 .struct_span_err(\n                     meta.span(),\n                     &format!(\n-                        \"`#![doc({} = \\\"...\\\")]` isn't allowed as a crate-level attribute\",\n-                        attr_name,\n+                        \"`#![doc({attr_name} = \\\"...\\\")]` isn't allowed as a crate-level attribute\",\n                     ),\n                 )\n                 .emit();\n@@ -1035,8 +1033,7 @@ impl CheckAttrVisitor<'_> {\n                                                 attr.meta().unwrap().span,\n                                                 \"use `doc = include_str!` instead\",\n                                                 format!(\n-                                                    \"#{}[doc = include_str!(\\\"{}\\\")]\",\n-                                                    inner, value\n+                                                    \"#{inner}[doc = include_str!(\\\"{value}\\\")]\",\n                                                 ),\n                                                 applicability,\n                                             );\n@@ -1230,7 +1227,7 @@ impl CheckAttrVisitor<'_> {\n                         if let Some(value) = attr.value_str() {\n                             diag.span_help(\n                                 attr.span,\n-                                &format!(r#\"try `#[link(name = \"{}\")]` instead\"#, value),\n+                                &format!(r#\"try `#[link(name = \"{value}\")]` instead\"#),\n                             );\n                         } else {\n                             diag.span_help(attr.span, r#\"try `#[link(name = \"...\")]` instead\"#);\n@@ -1518,15 +1515,14 @@ impl CheckAttrVisitor<'_> {\n                 };\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n                     lint.build(&format!(\n-                        \"`#[no_mangle]` has no effect on a foreign {}\",\n-                        foreign_item_kind\n+                        \"`#[no_mangle]` has no effect on a foreign {foreign_item_kind}\"\n                     ))\n                     .warn(\n                         \"this was previously accepted by the compiler but is \\\n                             being phased out; it will become a hard error in \\\n                             a future release!\",\n                     )\n-                    .span_label(span, format!(\"foreign {}\", foreign_item_kind))\n+                    .span_label(span, format!(\"foreign {foreign_item_kind}\"))\n                     .note(\"symbol names in extern blocks are not mangled\")\n                     .span_suggestion(\n                         attr.span,\n@@ -1692,9 +1688,9 @@ impl CheckAttrVisitor<'_> {\n                 hint.span(),\n                 E0517,\n                 \"{}\",\n-                &format!(\"attribute should be applied to {} {}\", article, allowed_targets)\n+                &format!(\"attribute should be applied to {article} {allowed_targets}\")\n             )\n-            .span_label(span, &format!(\"not {} {}\", article, allowed_targets))\n+            .span_label(span, &format!(\"not {article} {allowed_targets}\"))\n             .emit();\n         }\n "}, {"sha": "0e04a2cfb11adf68ba2217ab1a52cf3317362df5", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -80,8 +80,7 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n     /// of the trait being implemented; as those provided functions can be non-const.\n     fn visit_item<'hir>(&mut self, item: &'hir hir::Item<'hir>) {\n         let _: Option<_> = try {\n-            if let hir::ItemKind::Impl(ref imp) = item.kind {\n-                if let hir::Constness::Const = imp.constness {\n+            if let hir::ItemKind::Impl(ref imp) = item.kind && let hir::Constness::Const = imp.constness {\n                     let trait_def_id = imp.of_trait.as_ref()?.trait_def_id()?;\n                     let ancestors = self\n                         .tcx\n@@ -132,7 +131,6 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n                             .note(&format!(\"`{}` not implemented\", to_implement.join(\"`, `\")))\n                             .emit();\n                     }\n-                }\n             }\n         };\n     }"}, {"sha": "9cbb7917e9a32de6a84ddda1d55c548480f27d57", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -61,10 +61,9 @@ fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n             let mut err = match tcx.hir().span_if_local(item_def_id) {\n-                Some(span) => tcx.sess.struct_span_err(\n-                    span,\n-                    &format!(\"duplicate diagnostic item found: `{}`.\", name),\n-                ),\n+                Some(span) => tcx\n+                    .sess\n+                    .struct_span_err(span, &format!(\"duplicate diagnostic item found: `{name}`.\")),\n                 None => tcx.sess.struct_err(&format!(\n                     \"duplicate diagnostic item in crate `{}`: `{}`.\",\n                     tcx.crate_name(item_def_id.krate),"}, {"sha": "5a1373ad1a218dc94c0987cc3a6b2023ca0e4811", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -148,33 +148,29 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n     } else if let Some((def_id, _)) = visitor.attr_main_fn {\n         Some((def_id.to_def_id(), EntryFnType::Main))\n     } else {\n-        if let Some(main_def) = tcx.resolutions(()).main_def {\n-            if let Some(def_id) = main_def.opt_fn_def_id() {\n-                // non-local main imports are handled below\n-                if let Some(def_id) = def_id.as_local() {\n-                    if matches!(tcx.hir().find_by_def_id(def_id), Some(Node::ForeignItem(_))) {\n-                        tcx.sess\n-                            .struct_span_err(\n-                                tcx.def_span(def_id),\n-                                \"the `main` function cannot be declared in an `extern` block\",\n-                            )\n-                            .emit();\n-                        return None;\n-                    }\n-                }\n-\n-                if main_def.is_import && !tcx.features().imported_main {\n-                    let span = main_def.span;\n-                    feature_err(\n-                        &tcx.sess.parse_sess,\n-                        sym::imported_main,\n-                        span,\n-                        \"using an imported function as entry point `main` is experimental\",\n+        if let Some(main_def) = tcx.resolutions(()).main_def && let Some(def_id) = main_def.opt_fn_def_id() {\n+            // non-local main imports are handled below\n+            if let Some(def_id) = def_id.as_local() && matches!(tcx.hir().find_by_def_id(def_id), Some(Node::ForeignItem(_))) {\n+                tcx.sess\n+                    .struct_span_err(\n+                        tcx.def_span(def_id),\n+                        \"the `main` function cannot be declared in an `extern` block\",\n                     )\n                     .emit();\n-                }\n-                return Some((def_id, EntryFnType::Main));\n+                return None;\n             }\n+\n+            if main_def.is_import && !tcx.features().imported_main {\n+                let span = main_def.span;\n+                feature_err(\n+                    &tcx.sess.parse_sess,\n+                    sym::imported_main,\n+                    span,\n+                    \"using an imported function as entry point `main` is experimental\",\n+                )\n+                .emit();\n+            }\n+            return Some((def_id, EntryFnType::Main));\n         }\n         no_main_err(tcx, visitor);\n         None\n@@ -225,11 +221,9 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n         err.note(&note);\n     }\n \n-    if let Some(main_def) = tcx.resolutions(()).main_def {\n-        if main_def.opt_fn_def_id().is_none() {\n-            // There is something at `crate::main`, but it is not a function definition.\n-            err.span_label(main_def.span, \"non-function item at `crate::main` is found\");\n-        }\n+    if let Some(main_def) = tcx.resolutions(()).main_def && main_def.opt_fn_def_id().is_none(){\n+        // There is something at `crate::main`, but it is not a function definition.\n+        err.span_label(main_def.span, \"non-function item at `crate::main` is found\");\n     }\n \n     if tcx.sess.teach(&err.get_code().unwrap()) {"}, {"sha": "027eac16bad305d5629bf6a1ce6ce6ee2c96603d", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -79,27 +79,25 @@ impl<'tcx> ExprVisitor<'tcx> {\n             // Special-case transmuting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n             let from = unpack_option_like(self.tcx, from);\n-            if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) {\n-                if size_to == Pointer.size(&self.tcx) {\n-                    struct_span_err!(self.tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n-                        .note(&format!(\"source type: {}\", from))\n-                        .note(&format!(\"target type: {}\", to))\n-                        .help(\"cast with `as` to a pointer instead\")\n-                        .emit();\n-                    return;\n-                }\n+            if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) && size_to == Pointer.size(&self.tcx) {\n+                struct_span_err!(self.tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n+                    .note(&format!(\"source type: {from}\"))\n+                    .note(&format!(\"target type: {to}\"))\n+                    .help(\"cast with `as` to a pointer instead\")\n+                    .emit();\n+                return;\n             }\n         }\n \n         // Try to display a sensible error with as much information as possible.\n         let skeleton_string = |ty: Ty<'tcx>, sk| match sk {\n             Ok(SizeSkeleton::Known(size)) => format!(\"{} bits\", size.bits()),\n-            Ok(SizeSkeleton::Pointer { tail, .. }) => format!(\"pointer to `{}`\", tail),\n+            Ok(SizeSkeleton::Pointer { tail, .. }) => format!(\"pointer to `{tail}`\"),\n             Err(LayoutError::Unknown(bad)) => {\n                 if bad == ty {\n                     \"this type does not have a fixed size\".to_owned()\n                 } else {\n-                    format!(\"size can vary because of {}\", bad)\n+                    format!(\"size can vary because of {bad}\")\n                 }\n             }\n             Err(err) => err.to_string(),\n@@ -113,7 +111,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n                                         or dependently-sized types\"\n         );\n         if from == to {\n-            err.note(&format!(\"`{}` does not have a fixed size\", from));\n+            err.note(&format!(\"`{from}` does not have a fixed size\"));\n         } else {\n             err.note(&format!(\"source type: `{}` ({})\", from, skeleton_string(from, sk_from)))\n                 .note(&format!(\"target type: `{}` ({})\", to, skeleton_string(to, sk_to)));\n@@ -201,7 +199,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n             _ => None,\n         };\n         let Some(asm_ty) = asm_ty else {\n-            let msg = &format!(\"cannot use value of type `{}` for inline assembly\", ty);\n+            let msg = &format!(\"cannot use value of type `{ty}` for inline assembly\");\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             err.note(\n                 \"only integers, floats, SIMD vectors, pointers and function pointers \\\n@@ -216,7 +214,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n         if !ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), self.param_env) {\n             let msg = \"arguments for inline assembly must be copyable\";\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n-            err.note(&format!(\"`{}` does not implement the Copy trait\", ty));\n+            err.note(&format!(\"`{ty}` does not implement the Copy trait\"));\n             err.emit();\n         }\n \n@@ -237,7 +235,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n                     in_expr.span,\n                     &format!(\"type `{}`\", self.typeck_results.expr_ty_adjusted(in_expr)),\n                 );\n-                err.span_label(expr.span, &format!(\"type `{}`\", ty));\n+                err.span_label(expr.span, &format!(\"type `{ty}`\"));\n                 err.note(\n                     \"asm inout arguments must have the same type, \\\n                     unless they are both pointers or integers of the same size\",\n@@ -256,7 +254,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n         let reg_class = reg.reg_class();\n         let supported_tys = reg_class.supported_types(asm_arch);\n         let Some((_, feature)) = supported_tys.iter().find(|&&(t, _)| t == asm_ty) else {\n-            let msg = &format!(\"type `{}` cannot be used with this register class\", ty);\n+            let msg = &format!(\"type `{ty}` cannot be used with this register class\");\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             let supported_tys: Vec<_> =\n                 supported_tys.iter().map(|(t, _)| t.to_string()).collect();\n@@ -326,12 +324,10 @@ impl<'tcx> ExprVisitor<'tcx> {\n                         let mut err = lint.build(msg);\n                         err.span_label(expr.span, \"for this argument\");\n                         err.help(&format!(\n-                            \"use the `{}` modifier to have the register formatted as `{}`\",\n-                            suggested_modifier, suggested_result,\n+                            \"use the `{suggested_modifier}` modifier to have the register formatted as `{suggested_result}`\",\n                         ));\n                         err.help(&format!(\n-                            \"or use the `{}` modifier to keep the default formatting of `{}`\",\n-                            default_modifier, default_result,\n+                            \"or use the `{default_modifier}` modifier to keep the default formatting of `{default_result}`\",\n                         ));\n                         err.emit();\n                     },\n@@ -509,14 +505,14 @@ impl<'tcx> Visitor<'tcx> for ExprVisitor<'tcx> {\n         match expr.kind {\n             hir::ExprKind::Path(ref qpath) => {\n                 let res = self.typeck_results.qpath_res(qpath, expr.hir_id);\n-                if let Res::Def(DefKind::Fn, did) = res {\n-                    if self.def_id_is_transmute(did) {\n-                        let typ = self.typeck_results.node_type(expr.hir_id);\n-                        let sig = typ.fn_sig(self.tcx);\n-                        let from = sig.inputs().skip_binder()[0];\n-                        let to = sig.output().skip_binder();\n-                        self.check_transmute(expr.span, from, to);\n-                    }\n+                if let Res::Def(DefKind::Fn, did) = res\n+                    && self.def_id_is_transmute(did)\n+                {\n+                    let typ = self.typeck_results.node_type(expr.hir_id);\n+                    let sig = typ.fn_sig(self.tcx);\n+                    let from = sig.inputs().skip_binder()[0];\n+                    let to = sig.output().skip_binder();\n+                    self.check_transmute(expr.span, from, to);\n                 }\n             }\n "}, {"sha": "bcae735bb7e5aa7c133b9cbae3c0668fbb241db9", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n //! Name resolution for lifetimes.\n //!\n //! Name resolution for lifetimes follows *much* simpler rules than the\n@@ -230,6 +231,10 @@ enum Scope<'a> {\n         hir_id: hir::HirId,\n \n         s: ScopeRef<'a>,\n+\n+        /// In some cases not allowing late bounds allows us to avoid ICEs.\n+        /// This is almost ways set to true.\n+        allow_late_bound: bool,\n     },\n \n     /// Lifetimes introduced by a fn are scoped to the call-site for that fn,\n@@ -302,6 +307,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 scope_type,\n                 hir_id,\n                 s: _,\n+                allow_late_bound,\n             } => f\n                 .debug_struct(\"Binder\")\n                 .field(\"lifetimes\", lifetimes)\n@@ -311,6 +317,7 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 .field(\"scope_type\", scope_type)\n                 .field(\"hir_id\", hir_id)\n                 .field(\"s\", &\"..\")\n+                .field(\"allow_late_bound\", allow_late_bound)\n                 .finish(),\n             Scope::Body { id, s: _ } => {\n                 f.debug_struct(\"Body\").field(\"id\", id).field(\"s\", &\"..\").finish()\n@@ -703,6 +710,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, move |_old_scope, this| {\n                     intravisit::walk_fn(this, fk, fd, b, s, hir_id)\n@@ -828,6 +836,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses,\n                     scope_type: BinderScopeType::Normal,\n                     s: ROOT_SCOPE,\n+                    allow_late_bound: false,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -896,6 +905,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     // a bare fn has no bounds, so everything\n@@ -1077,6 +1087,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n+                            allow_late_bound: false,\n                         };\n                         this.with(scope, |_old_scope, this| {\n                             this.visit_generics(generics);\n@@ -1097,6 +1108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         track_lifetime_uses: true,\n                         opaque_type_parent: false,\n                         scope_type: BinderScopeType::Normal,\n+                        allow_late_bound: false,\n                     };\n                     self.with(scope, |_old_scope, this| {\n                         let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1156,6 +1168,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: false,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1225,6 +1238,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, |old_scope, this| {\n                     this.check_lifetime_params(old_scope, &generics.params);\n@@ -1378,6 +1392,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             track_lifetime_uses: true,\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n+                            allow_late_bound: true,\n                         };\n                         this.with(scope, |old_scope, this| {\n                             this.check_lifetime_params(old_scope, &bound_generic_params);\n@@ -1425,6 +1440,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     track_lifetime_uses: true,\n                     opaque_type_parent: false,\n                     scope_type,\n+                    allow_late_bound: true,\n                 };\n                 self.with(scope, |_, this| {\n                     intravisit::walk_param_bound(this, bound);\n@@ -1477,6 +1493,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             track_lifetime_uses: true,\n             opaque_type_parent: false,\n             scope_type,\n+            allow_late_bound: true,\n         };\n         self.with(scope, |old_scope, this| {\n             this.check_lifetime_params(old_scope, &trait_ref.bound_generic_params);\n@@ -2180,6 +2197,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             opaque_type_parent: true,\n             track_lifetime_uses: false,\n             scope_type: BinderScopeType::Normal,\n+            allow_late_bound: true,\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n@@ -2602,7 +2620,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let mut scope = &*self.scope;\n         let hir_id = loop {\n             match scope {\n-                Scope::Binder { hir_id, .. } => {\n+                Scope::Binder { hir_id, allow_late_bound: true, .. } => {\n                     break *hir_id;\n                 }\n                 Scope::ObjectLifetimeDefault { ref s, .. }\n@@ -2611,8 +2629,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 | Scope::TraitRefBoundary { ref s, .. } => {\n                     scope = *s;\n                 }\n-                Scope::Root | Scope::Body { .. } => {\n+                Scope::Root\n+                | Scope::Body { .. }\n+                | Scope::Binder { allow_late_bound: false, .. } => {\n                     // See issues #83907 and #83693. Just bail out from looking inside.\n+                    // See the issue #95023 for not allowing late bound\n                     self.tcx.sess.delay_span_bug(\n                         rustc_span::DUMMY_SP,\n                         \"In fn_like_elision without appropriate scope above\","}, {"sha": "486b3d4414f3a3c872f2ae9a871e429e673956c9", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -92,8 +92,6 @@ and `cfg!(name = \"value\")` call. It will check that the `\"value\"` specified is p\n list of expected values. If `\"value\"` is not in it, then `rustc` will report an `unexpected_cfgs`\n lint diagnostic. The default diagnostic level for this lint is `Warn`.\n \n-The form `values()` is an error, because it does not specify a condition name.\n-\n To enable checking of values, but to provide an empty set of valid values, use this form:\n \n ```bash\n@@ -104,13 +102,17 @@ The `--check-cfg values(...)` option can be repeated, both for the same conditio\n different names. If it is repeated for the same condition name, then the sets of values for that\n condition are merged together.\n \n+If `values()` is specified, then `rustc` will enable the checking of well-known values defined\n+by itself. Note that it's necessary to specify the `values()` form to enable the checking of\n+well known values, specifying the other forms doesn't implicitly enable it.\n+\n ## Examples\n \n Consider this command line:\n \n ```bash\n rustc --check-cfg 'names(feature)' \\\n-      --check-cfg 'values(feature,\"lion\",\"zebra\")' \\\n+      --check-cfg 'values(feature, \"lion\", \"zebra\")' \\\n       --cfg 'feature=\"lion\"' -Z unstable-options \\\n       example.rs\n ```"}, {"sha": "ee265b8c4b5438fd836bc2f221c677701841d73e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -400,7 +400,6 @@ nav.sub {\n .source .sidebar > *:not(#sidebar-toggle) {\n \topacity: 0;\n \tvisibility: hidden;\n-\ttransition: opacity 0.5s;\n }\n \n .source .sidebar.expanded {\n@@ -1677,12 +1676,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tdisplay: none;\n \t}\n \n-\t/* It doesn't render well on mobile because of the layout, so better only have the transition\n-\ton desktop. */\n-\t.rustdoc.source .sidebar {\n-\t\ttransition: width .5s;\n-\t}\n-\n \t.source .sidebar.expanded {\n \t\twidth: 300px;\n \t}"}, {"sha": "867db056948b65a327087939c8ac2739dbf0b3a9", "filename": "src/test/rustdoc-gui/code-sidebar-toggle.goml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -3,6 +3,5 @@ goto: file://|DOC_PATH|/test_docs/index.html\n click: \".srclink\"\n wait-for: \"#sidebar-toggle\"\n click: \"#sidebar-toggle\"\n-wait-for: 500\n fail: true\n assert-css: (\"#source-sidebar\", { \"left\": \"-300px\" })"}, {"sha": "9404e71d0fe242549df19d79d2400b49f6808b06", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -5,6 +5,7 @@\n // ignore-android\n // ignore-arm\n // ignore-aarch64\n+// needs-asm-support\n #![feature(asm_sym)]\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "de299bfdbdfc922e1030c715d116ca9b4558e6d0", "filename": "src/test/ui/asm/aarch64/const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,6 @@\n // only-aarch64\n // run-pass\n+// needs-asm-support\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n "}, {"sha": "fa1dd4aef5d1c0bc57ca8f7980325734286b4b27", "filename": "src/test/ui/asm/aarch64/duplicate-options.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,4 +1,5 @@\n // only-aarch64\n+// needs-asm-support\n // run-rustfix\n \n use std::arch::asm;"}, {"sha": "b2d3fe7d9a7373cc8d9b310dbf72ba367bc1e4f2", "filename": "src/test/ui/asm/aarch64/duplicate-options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,4 +1,5 @@\n // only-aarch64\n+// needs-asm-support\n // run-rustfix\n \n use std::arch::asm;"}, {"sha": "feb3838f4f796539263f09bd5bfb4e0e7e9cb433", "filename": "src/test/ui/asm/aarch64/duplicate-options.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,53 +1,53 @@\n error: the `nomem` option was already provided\n-  --> $DIR/duplicate-options.rs:8:33\n+  --> $DIR/duplicate-options.rs:9:33\n    |\n LL |         asm!(\"\", options(nomem, nomem));\n    |                                 ^^^^^ this option was already provided\n \n error: the `preserves_flags` option was already provided\n-  --> $DIR/duplicate-options.rs:10:43\n+  --> $DIR/duplicate-options.rs:11:43\n    |\n LL |         asm!(\"\", options(preserves_flags, preserves_flags));\n    |                                           ^^^^^^^^^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:12:61\n+  --> $DIR/duplicate-options.rs:13:61\n    |\n LL |         asm!(\"\", options(nostack, preserves_flags), options(nostack));\n    |                                                             ^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:14:35\n+  --> $DIR/duplicate-options.rs:15:35\n    |\n LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n    |                                   ^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:14:53\n+  --> $DIR/duplicate-options.rs:15:53\n    |\n LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n    |                                                     ^^^^^^^ this option was already provided\n \n error: the `nostack` option was already provided\n-  --> $DIR/duplicate-options.rs:14:71\n+  --> $DIR/duplicate-options.rs:15:71\n    |\n LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n    |                                                                       ^^^^^^^ this option was already provided\n \n error: the `noreturn` option was already provided\n-  --> $DIR/duplicate-options.rs:21:38\n+  --> $DIR/duplicate-options.rs:22:38\n    |\n LL |             options(preserves_flags, noreturn),\n    |                                      ^^^^^^^^ this option was already provided\n \n error: the `nomem` option was already provided\n-  --> $DIR/duplicate-options.rs:22:21\n+  --> $DIR/duplicate-options.rs:23:21\n    |\n LL |             options(nomem, nostack),\n    |                     ^^^^^ this option was already provided\n \n error: the `noreturn` option was already provided\n-  --> $DIR/duplicate-options.rs:23:21\n+  --> $DIR/duplicate-options.rs:24:21\n    |\n LL |             options(noreturn),\n    |                     ^^^^^^^^ this option was already provided"}, {"sha": "e87a88434991bce2a0ae505e8c4f21a2dd4b6e86", "filename": "src/test/ui/asm/aarch64/interpolated-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,5 @@\n // only-aarch64\n-\n+// needs-asm-support\n use std::arch::asm;\n \n macro_rules! m {"}, {"sha": "040d4df546fb512d30fabba5c55a151efe698423", "filename": "src/test/ui/asm/aarch64/srcloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,6 @@\n // only-aarch64\n // build-fail\n+// needs-asm-support\n // compile-flags: -Ccodegen-units=1\n \n use std::arch::asm;"}, {"sha": "f8b645c23f5a08678c80599ed06911077e4d551a", "filename": "src/test/ui/asm/aarch64/srcloc.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,5 @@\n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:11:15\n+  --> $DIR/srcloc.rs:12:15\n    |\n LL |         asm!(\"invalid_instruction\");\n    |               ^\n@@ -11,7 +11,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:15:13\n+  --> $DIR/srcloc.rs:16:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -23,7 +23,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:20:13\n+  --> $DIR/srcloc.rs:21:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -35,7 +35,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:26:13\n+  --> $DIR/srcloc.rs:27:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -47,7 +47,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:33:13\n+  --> $DIR/srcloc.rs:34:13\n    |\n LL |             invalid_instruction\n    |             ^\n@@ -59,7 +59,7 @@ LL |             invalid_instruction\n    |             ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:38:14\n+  --> $DIR/srcloc.rs:39:14\n    |\n LL |         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n    |              ^\n@@ -71,7 +71,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:42:14\n+  --> $DIR/srcloc.rs:43:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -83,7 +83,7 @@ LL |     invalid_instruction\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:48:14\n+  --> $DIR/srcloc.rs:49:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -95,7 +95,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:55:14\n+  --> $DIR/srcloc.rs:56:14\n    |\n LL |             \"invalid_instruction\",\n    |              ^\n@@ -107,7 +107,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:62:13\n+  --> $DIR/srcloc.rs:63:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -119,7 +119,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:69:13\n+  --> $DIR/srcloc.rs:70:13\n    |\n LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n    |             ^\n@@ -131,7 +131,7 @@ LL | invalid_instruction\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:76:14\n+  --> $DIR/srcloc.rs:77:14\n    |\n LL |             \"invalid_instruction1\",\n    |              ^\n@@ -143,7 +143,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:77:14\n+  --> $DIR/srcloc.rs:78:14\n    |\n LL |             \"invalid_instruction2\",\n    |              ^\n@@ -155,7 +155,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:83:13\n+  --> $DIR/srcloc.rs:84:13\n    |\n LL |             concat!(\n    |             ^\n@@ -167,7 +167,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:83:13\n+  --> $DIR/srcloc.rs:84:13\n    |\n LL |             concat!(\n    |             ^\n@@ -179,7 +179,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:92:13\n+  --> $DIR/srcloc.rs:93:13\n    |\n LL |             concat!(\n    |             ^\n@@ -191,7 +191,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:92:13\n+  --> $DIR/srcloc.rs:93:13\n    |\n LL |             concat!(\n    |             ^\n@@ -203,7 +203,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:96:13\n+  --> $DIR/srcloc.rs:97:13\n    |\n LL |             concat!(\n    |             ^\n@@ -215,7 +215,7 @@ LL | invalid_instruction3\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:96:13\n+  --> $DIR/srcloc.rs:97:13\n    |\n LL |             concat!(\n    |             ^\n@@ -227,7 +227,7 @@ LL | invalid_instruction4\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:107:13\n+  --> $DIR/srcloc.rs:108:13\n    |\n LL |             concat!(\n    |             ^\n@@ -239,7 +239,7 @@ LL |     invalid_instruction1\n    |     ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:107:13\n+  --> $DIR/srcloc.rs:108:13\n    |\n LL |             concat!(\n    |             ^\n@@ -251,7 +251,7 @@ LL | invalid_instruction2\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:111:13\n+  --> $DIR/srcloc.rs:112:13\n    |\n LL |             concat!(\n    |             ^\n@@ -263,7 +263,7 @@ LL | invalid_instruction3\n    | ^\n \n error: unrecognized instruction mnemonic\n-  --> $DIR/srcloc.rs:111:13\n+  --> $DIR/srcloc.rs:112:13\n    |\n LL |             concat!(\n    |             ^"}, {"sha": "3f659363cc848b18f8eb0f40d333ae547ad5560d", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,6 @@\n // only-aarch64\n // only-linux\n+// needs-asm-support\n // run-pass\n \n #![feature(thread_local, asm_sym)]"}, {"sha": "1352fb3771be3761a636c463f98374fa245a7159", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -13,7 +13,7 @@ LL | .intel_syntax noprefix\n    | ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:31:15\n+  --> $DIR/inline-syntax.rs:32:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^\n@@ -25,7 +25,7 @@ LL |     .intel_syntax noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:34:15\n+  --> $DIR/inline-syntax.rs:35:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^\n@@ -37,7 +37,7 @@ LL |     .intel_syntax aaa noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:37:15\n+  --> $DIR/inline-syntax.rs:38:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^\n@@ -49,7 +49,7 @@ LL |     .att_syntax noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:40:15\n+  --> $DIR/inline-syntax.rs:41:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^\n@@ -61,7 +61,7 @@ LL |     .att_syntax bbb noprefix\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:43:15\n+  --> $DIR/inline-syntax.rs:44:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^\n@@ -73,7 +73,7 @@ LL |     .intel_syntax noprefix; nop\n    |     ^\n \n error: unknown directive\n-  --> $DIR/inline-syntax.rs:49:13\n+  --> $DIR/inline-syntax.rs:50:13\n    |\n LL |             .intel_syntax noprefix\n    |             ^"}, {"sha": "d06796e33d51681c36930b16ac1b363d22acde0d", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -8,6 +8,7 @@\n //[arm] compile-flags: --target armv7-unknown-linux-gnueabihf\n //[arm] build-fail\n //[arm] needs-llvm-components: arm\n+// needs-asm-support\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "840b250f87d7299dfb1ed8749e135848e06bc055", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,43 +1,43 @@\n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:57:14\n+  --> $DIR/inline-syntax.rs:58:14\n    |\n LL | global_asm!(\".intel_syntax noprefix\", \"nop\");\n    |              ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(bad_asm_style)]` on by default\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:31:15\n+  --> $DIR/inline-syntax.rs:32:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:34:15\n+  --> $DIR/inline-syntax.rs:35:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n-  --> $DIR/inline-syntax.rs:37:15\n+  --> $DIR/inline-syntax.rs:38:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n-  --> $DIR/inline-syntax.rs:40:15\n+  --> $DIR/inline-syntax.rs:41:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:43:15\n+  --> $DIR/inline-syntax.rs:44:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: avoid using `.intel_syntax`, Intel syntax is the default\n-  --> $DIR/inline-syntax.rs:49:13\n+  --> $DIR/inline-syntax.rs:50:13\n    |\n LL |             .intel_syntax noprefix\n    |             ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6e3c26e98c3f60a4c4d23b44a7541347f11896e5", "filename": "src/test/ui/asm/issue-92378.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fissue-92378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fissue-92378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-92378.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: --target armv5te-unknown-linux-gnueabi\n // needs-llvm-components: arm\n+// needs-asm-support\n // build-pass\n \n #![feature(no_core, lang_items, rustc_attrs, isa_attribute)]"}, {"sha": "8d3c300e0586c4dfdd731a0fe0957434abd3f8fd", "filename": "src/test/ui/asm/naked-functions-unused.aarch64.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.aarch64.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,66 +1,66 @@\n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:16:32\n+  --> $DIR/naked-functions-unused.rs:17:32\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n-  --> $DIR/naked-functions-unused.rs:4:9\n+  --> $DIR/naked-functions-unused.rs:5:9\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:16:42\n+  --> $DIR/naked-functions-unused.rs:17:42\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:25:38\n+  --> $DIR/naked-functions-unused.rs:26:38\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:25:48\n+  --> $DIR/naked-functions-unused.rs:26:48\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:31:41\n+  --> $DIR/naked-functions-unused.rs:32:41\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:31:51\n+  --> $DIR/naked-functions-unused.rs:32:51\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:39:40\n+  --> $DIR/naked-functions-unused.rs:40:40\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:39:50\n+  --> $DIR/naked-functions-unused.rs:40:50\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:45:43\n+  --> $DIR/naked-functions-unused.rs:46:43\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:45:53\n+  --> $DIR/naked-functions-unused.rs:46:53\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`"}, {"sha": "044a0e5b9408989c3df795c31155fbfd0aa47382", "filename": "src/test/ui/asm/naked-functions-unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,4 +1,5 @@\n // revisions: x86_64 aarch64\n+// needs-asm-support\n //[x86_64] only-x86_64\n //[aarch64] only-aarch64\n #![deny(unused)]"}, {"sha": "8d3c300e0586c4dfdd731a0fe0957434abd3f8fd", "filename": "src/test/ui/asm/naked-functions-unused.x86_64.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.x86_64.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,66 +1,66 @@\n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:16:32\n+  --> $DIR/naked-functions-unused.rs:17:32\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n-  --> $DIR/naked-functions-unused.rs:4:9\n+  --> $DIR/naked-functions-unused.rs:5:9\n    |\n LL | #![deny(unused)]\n    |         ^^^^^^\n    = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:16:42\n+  --> $DIR/naked-functions-unused.rs:17:42\n    |\n LL |     pub extern \"C\" fn function(a: usize, b: usize) -> usize {\n    |                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:25:38\n+  --> $DIR/naked-functions-unused.rs:26:38\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                      ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:25:48\n+  --> $DIR/naked-functions-unused.rs:26:48\n    |\n LL |         pub extern \"C\" fn associated(a: usize, b: usize) -> usize {\n    |                                                ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:31:41\n+  --> $DIR/naked-functions-unused.rs:32:41\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:31:51\n+  --> $DIR/naked-functions-unused.rs:32:51\n    |\n LL |         pub extern \"C\" fn method(&self, a: usize, b: usize) -> usize {\n    |                                                   ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:39:40\n+  --> $DIR/naked-functions-unused.rs:40:40\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:39:50\n+  --> $DIR/naked-functions-unused.rs:40:50\n    |\n LL |         extern \"C\" fn trait_associated(a: usize, b: usize) -> usize {\n    |                                                  ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/naked-functions-unused.rs:45:43\n+  --> $DIR/naked-functions-unused.rs:46:43\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/naked-functions-unused.rs:45:53\n+  --> $DIR/naked-functions-unused.rs:46:53\n    |\n LL |         extern \"C\" fn trait_method(&self, a: usize, b: usize) -> usize {\n    |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`"}, {"sha": "d523ae021a5d4dccce013ea1599dfb36c5c074bd", "filename": "src/test/ui/asm/x86_64/const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,6 @@\n // only-x86_64\n // run-pass\n+// needs-asm-support\n // revisions: mirunsafeck thirunsafeck\n // [thirunsafeck]compile-flags: -Z thir-unsafeck\n "}, {"sha": "669fd7e7e46e527441ef9998c111f89cc388132f", "filename": "src/test/ui/asm/x86_64/issue-89875.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-89875.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// needs-asm-support\n // only-x86_64\n \n #![feature(target_feature_11)]"}, {"sha": "622365bc712af15d22d86fdd823783ba547309e6", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,6 +1,7 @@\n // min-llvm-version: 12.0.1\n // only-x86_64\n // only-linux\n+// needs-asm-support\n // run-pass\n \n #![feature(thread_local, asm_sym)]"}, {"sha": "c2d9e222b84a44e6788f92f5d10be80464e8343d", "filename": "src/test/ui/backtrace.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbacktrace.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -88,28 +88,31 @@ fn runtest(me: &str) {\n     assert!(!s.contains(\"stack backtrace\") && !s.contains(\" - foo\"),\n             \"bad output3: {}\", s);\n \n-    // Make sure a stack trace is printed\n-    let p = template(me).arg(\"double-fail\").spawn().unwrap();\n-    let out = p.wait_with_output().unwrap();\n-    assert!(!out.status.success());\n-    let s = str::from_utf8(&out.stderr).unwrap();\n-    // loosened the following from double::h to double:: due to\n-    // spurious failures on mac, 32bit, optimized\n-    assert!(s.contains(\"stack backtrace\") && contains_verbose_expected(s, \"double\"),\n-            \"bad output3: {}\", s);\n+    #[cfg(not(panic = \"abort\"))]\n+    {\n+        // Make sure a stack trace is printed\n+        let p = template(me).arg(\"double-fail\").spawn().unwrap();\n+        let out = p.wait_with_output().unwrap();\n+        assert!(!out.status.success());\n+        let s = str::from_utf8(&out.stderr).unwrap();\n+        // loosened the following from double::h to double:: due to\n+        // spurious failures on mac, 32bit, optimized\n+        assert!(s.contains(\"stack backtrace\") && contains_verbose_expected(s, \"double\"),\n+                \"bad output3: {}\", s);\n \n-    // Make sure a stack trace isn't printed too many times\n-    let p = template(me).arg(\"double-fail\")\n-                                .env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n-    let out = p.wait_with_output().unwrap();\n-    assert!(!out.status.success());\n-    let s = str::from_utf8(&out.stderr).unwrap();\n-    let mut i = 0;\n-    for _ in 0..2 {\n-        i += s[i + 10..].find(\"stack backtrace\").unwrap() + 10;\n+        // Make sure a stack trace isn't printed too many times\n+        let p = template(me).arg(\"double-fail\")\n+                                    .env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n+        let out = p.wait_with_output().unwrap();\n+        assert!(!out.status.success());\n+        let s = str::from_utf8(&out.stderr).unwrap();\n+        let mut i = 0;\n+        for _ in 0..2 {\n+            i += s[i + 10..].find(\"stack backtrace\").unwrap() + 10;\n+        }\n+        assert!(s[i + 10..].find(\"stack backtrace\").is_none(),\n+                \"bad output4: {}\", s);\n     }\n-    assert!(s[i + 10..].find(\"stack backtrace\").is_none(),\n-            \"bad output4: {}\", s);\n }\n \n fn main() {"}, {"sha": "f2bad2f552759aa09d381dc757b3cc2c3fa61d2f", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -5,7 +5,7 @@ LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n \n warning: 1 warning emitted\n "}, {"sha": "5a16d5845a60e57561c49d7bbf106b98dee43dfd", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -5,7 +5,7 @@ LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+   = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n \n error[E0771]: use of non-static lifetime `'a` in const generic\n   --> $DIR/E0771.rs:4:41"}, {"sha": "beb12c36dcafa3bed2e0f5f733f517dae7458fd4", "filename": "src/test/ui/issues/issue-28561.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28561.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n+#[derive(Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd, Clone, Copy)]\n struct Array<T> {\n     f00: [T; 00],\n     f01: [T; 01],\n@@ -36,44 +36,6 @@ struct Array<T> {\n     f32: [T; 32],\n }\n \n-// FIXME(#44580): merge with `Array` once `[T; N]: Clone` where `T: Clone`\n-#[derive(Clone, Copy)]\n-struct CopyArray<T: Copy> {\n-    f00: [T; 00],\n-    f01: [T; 01],\n-    f02: [T; 02],\n-    f03: [T; 03],\n-    f04: [T; 04],\n-    f05: [T; 05],\n-    f06: [T; 06],\n-    f07: [T; 07],\n-    f08: [T; 08],\n-    f09: [T; 09],\n-    f10: [T; 10],\n-    f11: [T; 11],\n-    f12: [T; 12],\n-    f13: [T; 13],\n-    f14: [T; 14],\n-    f15: [T; 15],\n-    f16: [T; 16],\n-    f17: [T; 17],\n-    f18: [T; 18],\n-    f19: [T; 19],\n-    f20: [T; 20],\n-    f21: [T; 21],\n-    f22: [T; 22],\n-    f23: [T; 23],\n-    f24: [T; 24],\n-    f25: [T; 25],\n-    f26: [T; 26],\n-    f27: [T; 27],\n-    f28: [T; 28],\n-    f29: [T; 29],\n-    f30: [T; 30],\n-    f31: [T; 31],\n-    f32: [T; 32],\n-}\n-\n #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n struct Fn<A, B, C, D, E, F, G, H, I, J, K, L> {\n     f00: fn(),"}, {"sha": "3fba8c00c572f8d35434eb914aea58d6ec5b5dcc", "filename": "src/test/ui/lifetimes/issue-95023.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -0,0 +1,11 @@\n+struct ErrorKind;\n+struct Error(ErrorKind);\n+impl Fn(&isize) for Error {\n+    //~^ ERROR manual implementations of `Fn` are experimental [E0183]\n+    //~^^ ERROR associated type bindings are not allowed here [E0229]\n+    fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+    //~^ ERROR associated function in `impl` without body\n+    //~^^ ERROR method `foo` is not a member of trait `Fn` [E0407]\n+    //~^^^ ERROR associated type `B` not found for `Self` [E0220]\n+}\n+fn main() {}"}, {"sha": "35c3797c77a85988977c742dc122e9e722ba6c3f", "filename": "src/test/ui/lifetimes/issue-95023.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-95023.stderr?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -0,0 +1,38 @@\n+error: associated function in `impl` without body\n+  --> $DIR/issue-95023.rs:6:5\n+   |\n+LL |     fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                                  |\n+   |                                                  help: provide a definition for the function: `{ <body> }`\n+\n+error[E0407]: method `foo` is not a member of trait `Fn`\n+  --> $DIR/issue-95023.rs:6:5\n+   |\n+LL |     fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `Fn`\n+\n+error[E0183]: manual implementations of `Fn` are experimental\n+  --> $DIR/issue-95023.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^ manual implementations of `Fn` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0229]: associated type bindings are not allowed here\n+  --> $DIR/issue-95023.rs:3:6\n+   |\n+LL | impl Fn(&isize) for Error {\n+   |      ^^^^^^^^^^ associated type not allowed here\n+\n+error[E0220]: associated type `B` not found for `Self`\n+  --> $DIR/issue-95023.rs:6:44\n+   |\n+LL |     fn foo<const N: usize>(&self) -> Self::B<{N}>;\n+   |                                            ^ associated type `B` not found\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0183, E0220, E0229, E0407.\n+For more information about an error, try `rustc --explain E0183`."}, {"sha": "77368b87e961c2cc841b5841949e262444ee5b3b", "filename": "src/test/ui/numbers-arithmetic/issue-8460.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_must_use)]\n // ignore-emscripten no threads support\n+// needs-unwind\n #![feature(rustc_attrs)]\n \n use std::thread;"}, {"sha": "098f54ac23f6afbdd37159a7356428554970f2d3", "filename": "src/test/ui/panic-while-printing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fpanic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-while-printing.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// needs-unwind\n // ignore-emscripten no subprocess support\n \n #![feature(internal_output_capture)]"}, {"sha": "a1887c2180ecf4bcf4551f93b8ac65756cc817ba", "filename": "src/test/ui/process/multi-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fmulti-panic.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // ignore-emscripten no processes\n // ignore-sgx no processes\n+// needs-unwind\n \n fn check_for_no_backtrace(test: std::process::Output) {\n     assert!(!test.status.success());"}, {"sha": "01e460da5ab57ff938c089031b57aeb78530232f", "filename": "src/test/ui/test-attrs/test-panic-while-printing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-panic-while-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-panic-while-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-panic-while-printing.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -1,5 +1,6 @@\n // compile-flags:--test\n // run-pass\n+// needs-unwind\n // ignore-emscripten no subprocess support\n \n use std::fmt;"}, {"sha": "0e5e0c2616e5c3cdae6eddbad07fec1c49b2e72b", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17c84a386e7badf6b2c6018d172496b3a28a04/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=3c17c84a386e7badf6b2c6018d172496b3a28a04", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 984;\n+const ROOT_ENTRY_LIMIT: usize = 985;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}