{"sha": "dbe167daaa9fd64213f78d55980070b4251a92be", "node_id": "C_kwDOAAsO6NoAKGRiZTE2N2RhYWE5ZmQ2NDIxM2Y3OGQ1NTk4MDA3MGI0MjUxYTkyYmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-29T19:45:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-29T19:45:26Z"}, "message": "Auto merge of #7890 - Alexendoo:ptr-arg-alias, r=camsteffen\n\nIgnore references to type aliases in ptr_arg\n\nWorks using the fact that the hir path will point to a TyAlias, rather than being resolved to the underlying type\n\nFixes #7699\n\nchangelog: [`ptr_arg`] No longer lints references to type aliases", "tree": {"sha": "33ca1a5e6a882fe17fc02796595e249c40844449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ca1a5e6a882fe17fc02796595e249c40844449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe167daaa9fd64213f78d55980070b4251a92be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe167daaa9fd64213f78d55980070b4251a92be", "html_url": "https://github.com/rust-lang/rust/commit/dbe167daaa9fd64213f78d55980070b4251a92be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe167daaa9fd64213f78d55980070b4251a92be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00821ca937ab400e465a008eecdef60e985665ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/00821ca937ab400e465a008eecdef60e985665ad", "html_url": "https://github.com/rust-lang/rust/commit/00821ca937ab400e465a008eecdef60e985665ad"}, {"sha": "e2c30f05c11bd06d2ba11584407e6671e7d5d1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c30f05c11bd06d2ba11584407e6671e7d5d1b8", "html_url": "https://github.com/rust-lang/rust/commit/e2c30f05c11bd06d2ba11584407e6671e7d5d1b8"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "8a36e20fc973d678297d14718039e8913af8acc7", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/dbe167daaa9fd64213f78d55980070b4251a92be/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe167daaa9fd64213f78d55980070b4251a92be/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=dbe167daaa9fd64213f78d55980070b4251a92be", "patch": "@@ -3,16 +3,16 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n+use clippy_utils::ty::walk_ptrs_hir_ty;\n use clippy_utils::{expr_path_res, is_lint_allowed, match_any_diagnostic_items, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n use rustc_hir::{\n-    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, HirId, Impl, ImplItem, ImplItemKind, Item,\n-    ItemKind, Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n+    BinOpKind, BodyId, Expr, ExprKind, FnDecl, FnRetTy, GenericArg, Impl, ImplItem, ImplItemKind, Item, ItemKind,\n+    Lifetime, MutTy, Mutability, Node, PathSegment, QPath, TraitFn, TraitItem, TraitItemKind, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -153,7 +153,7 @@ declare_lint_pass!(Ptr => [PTR_ARG, CMP_NULL, MUT_FROM_REF, INVALID_NULL_PTR_USA\n impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if let ItemKind::Fn(ref sig, _, body_id) = item.kind {\n-            check_fn(cx, sig.decl, item.hir_id(), Some(body_id));\n+            check_fn(cx, sig.decl, Some(body_id));\n         }\n     }\n \n@@ -165,7 +165,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n                     return; // ignore trait impls\n                 }\n             }\n-            check_fn(cx, sig.decl, item.hir_id(), Some(body_id));\n+            check_fn(cx, sig.decl, Some(body_id));\n         }\n     }\n \n@@ -176,7 +176,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             } else {\n                 None\n             };\n-            check_fn(cx, sig.decl, item.hir_id(), body_id);\n+            check_fn(cx, sig.decl, body_id);\n         }\n     }\n \n@@ -244,22 +244,31 @@ fn check_invalid_ptr_usage<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id: Option<BodyId>) {\n-    let fn_def_id = cx.tcx.hir().local_def_id(fn_id);\n-    let sig = cx.tcx.fn_sig(fn_def_id);\n-    let fn_ty = sig.skip_binder();\n+fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, opt_body_id: Option<BodyId>) {\n     let body = opt_body_id.map(|id| cx.tcx.hir().body(id));\n \n-    for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n+    for (idx, arg) in decl.inputs.iter().enumerate() {\n         // Honor the allow attribute on parameters. See issue 5644.\n         if let Some(body) = &body {\n             if is_lint_allowed(cx, PTR_ARG, body.params[idx].hir_id) {\n                 continue;\n             }\n         }\n \n-        if let ty::Ref(_, ty, Mutability::Not) = ty.kind() {\n-            if is_type_diagnostic_item(cx, ty, sym::Vec) {\n+        let (item_name, path) = if_chain! {\n+            if let TyKind::Rptr(_, MutTy { ty, mutbl: Mutability::Not }) = arg.kind;\n+            if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+            if let Res::Def(_, did) = path.res;\n+            if let Some(item_name) = cx.tcx.get_diagnostic_name(did);\n+            then {\n+                (item_name, path)\n+            } else {\n+                continue\n+            }\n+        };\n+\n+        match item_name {\n+            sym::Vec => {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -289,7 +298,8 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if is_type_diagnostic_item(cx, ty, sym::String) {\n+            },\n+            sym::String => {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -311,7 +321,8 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if is_type_diagnostic_item(cx, ty, sym::PathBuf) {\n+            },\n+            sym::PathBuf => {\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_path_buf()\"), (\"as_path\", \"\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -338,11 +349,10 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n-            } else if match_type(cx, ty, &paths::COW) {\n+            },\n+            sym::Cow => {\n                 if_chain! {\n-                    if let TyKind::Rptr(_, MutTy { ty, ..} ) = arg.kind;\n-                    if let TyKind::Path(QPath::Resolved(None, pp)) = ty.kind;\n-                    if let [ref bx] = *pp.segments;\n+                    if let [ref bx] = *path.segments;\n                     if let Some(params) = bx.args;\n                     if !params.parenthesized;\n                     if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n@@ -363,7 +373,8 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         );\n                     }\n                 }\n-            }\n+            },\n+            _ => {},\n         }\n     }\n "}, {"sha": "67bfef06a05e8cdd3e7b73c19fbc629d5e6fbf3e", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe167daaa9fd64213f78d55980070b4251a92be/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe167daaa9fd64213f78d55980070b4251a92be/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=dbe167daaa9fd64213f78d55980070b4251a92be", "patch": "@@ -155,3 +155,7 @@ mod issue6509 {\n         let _ = str.clone().clone();\n     }\n }\n+\n+// No error for types behind an alias (#7699)\n+type A = Vec<u8>;\n+fn aliased(a: &A) {}"}]}