{"sha": "5026d114a0bbe27f2052af9fbadebacac80e1955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMjZkMTE0YTBiYmUyN2YyMDUyYWY5ZmJhZGViYWNhYzgwZTE5NTU=", "commit": {"author": {"name": "Matthew McPherrin", "email": "matt@mcpherrin.ca", "date": "2014-03-16T22:31:47Z"}, "committer": {"name": "Matthew McPherrin", "email": "matt@mcpherrin.ca", "date": "2014-03-16T22:57:16Z"}, "message": "Doc-sprint: Document endian conversion functions", "tree": {"sha": "e599c627cf5d9d3fad12129c30951131e2f272c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e599c627cf5d9d3fad12129c30951131e2f272c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5026d114a0bbe27f2052af9fbadebacac80e1955", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5026d114a0bbe27f2052af9fbadebacac80e1955", "html_url": "https://github.com/rust-lang/rust/commit/5026d114a0bbe27f2052af9fbadebacac80e1955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5026d114a0bbe27f2052af9fbadebacac80e1955/comments", "author": {"login": "mcpherrinm", "id": 47425, "node_id": "MDQ6VXNlcjQ3NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/47425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcpherrinm", "html_url": "https://github.com/mcpherrinm", "followers_url": "https://api.github.com/users/mcpherrinm/followers", "following_url": "https://api.github.com/users/mcpherrinm/following{/other_user}", "gists_url": "https://api.github.com/users/mcpherrinm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcpherrinm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcpherrinm/subscriptions", "organizations_url": "https://api.github.com/users/mcpherrinm/orgs", "repos_url": "https://api.github.com/users/mcpherrinm/repos", "events_url": "https://api.github.com/users/mcpherrinm/events{/privacy}", "received_events_url": "https://api.github.com/users/mcpherrinm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcpherrinm", "id": 47425, "node_id": "MDQ6VXNlcjQ3NDI1", "avatar_url": "https://avatars.githubusercontent.com/u/47425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcpherrinm", "html_url": "https://github.com/mcpherrinm", "followers_url": "https://api.github.com/users/mcpherrinm/followers", "following_url": "https://api.github.com/users/mcpherrinm/following{/other_user}", "gists_url": "https://api.github.com/users/mcpherrinm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcpherrinm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcpherrinm/subscriptions", "organizations_url": "https://api.github.com/users/mcpherrinm/orgs", "repos_url": "https://api.github.com/users/mcpherrinm/repos", "events_url": "https://api.github.com/users/mcpherrinm/events{/privacy}", "received_events_url": "https://api.github.com/users/mcpherrinm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7156ded5bcf6831a6da22688d08f71985fdc81df", "url": "https://api.github.com/repos/rust-lang/rust/commits/7156ded5bcf6831a6da22688d08f71985fdc81df", "html_url": "https://github.com/rust-lang/rust/commit/7156ded5bcf6831a6da22688d08f71985fdc81df"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "e124ada08c7674693181905fde646e4032983028", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5026d114a0bbe27f2052af9fbadebacac80e1955/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5026d114a0bbe27f2052af9fbadebacac80e1955/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=5026d114a0bbe27f2052af9fbadebacac80e1955", "patch": "@@ -99,32 +99,127 @@ pub unsafe fn move_val_init<T>(dst: &mut T, src: T) {\n     intrinsics::move_val_init(dst, src)\n }\n \n+/// Convert an i16 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_le16(x: i16) -> i16 { x }\n+\n+/// Convert an i16 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i32 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_le32(x: i32) -> i32 { x }\n+\n+/// Convert an i32 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i64 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_le64(x: i64) -> i64 { x }\n+\n+/// Convert an i64 to little endian from the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n \n+\n+/// Convert an i16 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i16 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_be16(x: i16) -> i16 { x }\n+\n+/// Convert an i32 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i32 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_be32(x: i32) -> i32 { x }\n+\n+/// Convert an i64 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+/// Convert an i64 to big endian from the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn to_be64(x: i64) -> i64 { x }\n \n+\n+/// Convert an i16 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_le16(x: i16) -> i16 { x }\n+\n+/// Convert an i16 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i32 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_le32(x: i32) -> i32 { x }\n+\n+/// Convert an i32 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i64 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_le64(x: i64) -> i64 { x }\n+\n+/// Convert an i64 from little endian to the target's endianness.\n+///\n+/// On little endian, this is a no-op.  On big endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n \n+\n+/// Convert an i16 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+\n+/// Convert an i16 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be16(x: i16) -> i16 { x }\n+\n+/// Convert an i32 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+\n+/// Convert an i32 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be32(x: i32) -> i32 { x }\n+\n+/// Convert an i64 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"little\")] #[inline] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+/// Convert an i64 from big endian to the target's endianness.\n+///\n+/// On big endian, this is a no-op.  On little endian, the bytes are swapped.\n #[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n \n "}]}