{"sha": "53142b486d847e2bf846fd82b02ad602bab85d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTQyYjQ4NmQ4NDdlMmJmODQ2ZmQ4MmIwMmFkNjAyYmFiODVkNDE=", "commit": {"author": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-05-16T12:27:34Z"}, "committer": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-05-16T12:27:34Z"}, "message": "use the span between the self_ty and left brace", "tree": {"sha": "4c29cc5714dcf763cf432b60dac3a30d657ead51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c29cc5714dcf763cf432b60dac3a30d657ead51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53142b486d847e2bf846fd82b02ad602bab85d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53142b486d847e2bf846fd82b02ad602bab85d41", "html_url": "https://github.com/rust-lang/rust/commit/53142b486d847e2bf846fd82b02ad602bab85d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53142b486d847e2bf846fd82b02ad602bab85d41/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdf105245bc5d548c21f3626ed576a808eac57ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf105245bc5d548c21f3626ed576a808eac57ba", "html_url": "https://github.com/rust-lang/rust/commit/bdf105245bc5d548c21f3626ed576a808eac57ba"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "232d3745e59c074dd6a360b272e2d5d509676894", "filename": "src/comment.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53142b486d847e2bf846fd82b02ad602bab85d41/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53142b486d847e2bf846fd82b02ad602bab85d41/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=53142b486d847e2bf846fd82b02ad602bab85d41", "patch": "@@ -880,12 +880,6 @@ pub(crate) fn recover_missing_comment_in_span(\n         Some(String::new())\n     } else {\n         let missing_snippet = context.snippet(span);\n-        let trimmed_missing_snippet = missing_snippet.trim();\n-        if !trimmed_missing_snippet.starts_with(\"//\") && !trimmed_missing_snippet.starts_with(\"/*\")\n-        {\n-            return None;\n-        };\n-\n         let pos = missing_snippet.find('/').unwrap_or(0);\n         // 1 = ` `\n         let total_width = missing_comment.len() + used_width + 1;"}, {"sha": "202eb2cf1179fb73ed8e65446bcde538a37cfd87", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53142b486d847e2bf846fd82b02ad602bab85d41/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53142b486d847e2bf846fd82b02ad602bab85d41/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=53142b486d847e2bf846fd82b02ad602bab85d41", "patch": "@@ -664,7 +664,6 @@ pub(crate) fn format_impl(\n     context: &RewriteContext<'_>,\n     item: &ast::Item,\n     offset: Indent,\n-    where_span_end: Option<BytePos>,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(_, _, _, ref generics, _, ref self_ty, ref items) = item.node {\n         let mut result = String::with_capacity(128);\n@@ -691,6 +690,8 @@ pub(crate) fn format_impl(\n             option.compress_where();\n         }\n \n+        let misssing_span = mk_sp(self_ty.span.hi(), item.span.hi());\n+        let where_span_end = context.snippet_provider.opt_span_before(misssing_span, \"{\");\n         let where_clause_str = rewrite_where_clause(\n             context,\n             &generics.where_clause,"}, {"sha": "5fdd0625dff8ee352985a4cce2f5d87180b4541d", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53142b486d847e2bf846fd82b02ad602bab85d41/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53142b486d847e2bf846fd82b02ad602bab85d41/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=53142b486d847e2bf846fd82b02ad602bab85d41", "patch": "@@ -5,7 +5,7 @@ use syntax::source_map::{self, BytePos, Pos, SourceMap, Span};\n use syntax::{ast, visit};\n \n use crate::attr::*;\n-use crate::comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n+use crate::comment::{CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileName;\n use crate::config::{BraceStyle, Config, Version};\n use crate::expr::{format_expr, ExprType};\n@@ -359,13 +359,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             match item.node {\n                 ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n                 ast::ItemKind::Impl(..) => {\n-                    let snippet = self.snippet(item.span);\n-                    let where_span_end = snippet\n-                        .find_uncommented(\"{\")\n-                        .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n                     let block_indent = self.block_indent;\n-                    let rw = self\n-                        .with_context(|ctx| format_impl(&ctx, item, block_indent, where_span_end));\n+                    let rw = self.with_context(|ctx| format_impl(&ctx, item, block_indent));\n                     self.push_rewrite(item.span, rw);\n                 }\n                 ast::ItemKind::Trait(..) => {"}]}