{"sha": "e2567b034dd6847cc026eb80db47bd1271fe71de", "node_id": "C_kwDOAAsO6NoAKGUyNTY3YjAzNGRkNjg0N2NjMDI2ZWI4MGRiNDdiZDEyNzFmZTcxZGU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T18:30:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T21:23:36Z"}, "message": "Remove intermediate function doesn't make more sense", "tree": {"sha": "950de65a69a8320ec786082b4ee4c756da9b9abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/950de65a69a8320ec786082b4ee4c756da9b9abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2567b034dd6847cc026eb80db47bd1271fe71de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHrJFgACgkQgTGiTgx5\n769pAg//QkQ9y/gnVMIvmbAw/fjnx/pw1kiY7si7bhhibkvwPVkWptdqwgxOQ64j\n8YgaSlW+DDl7FHQFrBxIL0pKoePJJdV7Mx9vvGCVu0ITjJTedcRs50JmcbUulP6v\nQQLTNTLH9h/Z+a67vsMpn0kdtiJktHmCTRrhyX7aKGwr3EVkT7L3Czu2Igy4byya\nW6BgBY3SDJYiZJArt0MeKKPBJkaw1H+wIS6oZgp6b67z3UBlRWPsZ3ROy3fhCh6Q\nnXi/YqJUPit2KsZN0lsRqD6yrMBrHHljwrMeSmP3Djqd5YM25TIRkNhfgOqqqJt8\nfCXlreJq87r9cxsCZfu2Sf5VeUK9IVB9WEuMSNUATHhdRZWBxKrGCjleOa1CYQKs\n5CA/szdGEzpTQDbB45os3FIBZd/Ck7nz7wJ3nUqTnKGQsfd0Z3OA3rve8u+Whfff\nexbH4ZTyHsZp0GQGUcf13EQCyNxokDJ12kC3jfjm+gDyQ4JCWZkVYUPHHG2BfuCy\ngISRFmxkAUHFLNBQnMbPmZ0qi5FcpQJU7bHh0I427E2Iwhyglg2kz5rL6BgshOri\nE4rE/DvjRftTzdD4FiBZakpcQCYyT6O/FLk+lTJmtI8EMm5QqhomtD15Sy0LxzDD\nMXuNUgU5/oZgcquOn0+/6hUnF0+41D7Wts2tWN6J7womwnkeHas=\n=6QVg\n-----END PGP SIGNATURE-----", "payload": "tree 950de65a69a8320ec786082b4ee4c756da9b9abd\nparent 19e3c860037a8bb01157aa9da291003c8b69e18c\nauthor Santiago Pastorino <spastorino@gmail.com> 1642789810 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1642800216 -0300\n\nRemove intermediate function doesn't make more sense\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2567b034dd6847cc026eb80db47bd1271fe71de", "html_url": "https://github.com/rust-lang/rust/commit/e2567b034dd6847cc026eb80db47bd1271fe71de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2567b034dd6847cc026eb80db47bd1271fe71de/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e3c860037a8bb01157aa9da291003c8b69e18c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e3c860037a8bb01157aa9da291003c8b69e18c", "html_url": "https://github.com/rust-lang/rust/commit/19e3c860037a8bb01157aa9da291003c8b69e18c"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "4f3b08bd3add4a9eba5e3ad387e679663c7013d7", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e2567b034dd6847cc026eb80db47bd1271fe71de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2567b034dd6847cc026eb80db47bd1271fe71de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=e2567b034dd6847cc026eb80db47bd1271fe71de", "patch": "@@ -249,33 +249,6 @@ fn stable_disjoint<'cx, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     impl1_header: &ty::ImplHeader<'tcx>,\n     impl2_header: ty::ImplHeader<'tcx>,\n-) -> bool {\n-    let infcx = selcx.infcx();\n-    let tcx = infcx.tcx;\n-\n-    disjoint_with_filter(selcx, param_env, impl1_header, impl2_header, |selcx, o| {\n-        loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o)\n-    })\n-}\n-\n-fn strict_disjoint<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n-    impl1_def_id: DefId,\n-    impl2_def_id: DefId,\n-) -> bool {\n-    explicit_disjoint(selcx, impl1_def_id, impl2_def_id)\n-        || explicit_disjoint(selcx, impl2_def_id, impl1_def_id)\n-}\n-\n-fn disjoint_with_filter<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    impl1_header: &ty::ImplHeader<'tcx>,\n-    impl2_header: ty::ImplHeader<'tcx>,\n-    mut filter: impl FnMut(\n-        &mut SelectionContext<'cx, 'tcx>,\n-        &rustc_infer::traits::Obligation<'tcx, rustc_middle::ty::Predicate<'tcx>>,\n-    ) -> bool,\n ) -> bool {\n     debug!(\"overlap: impl1_header={:?}\", impl1_header);\n     debug!(\"overlap: impl2_header={:?}\", impl2_header);\n@@ -316,6 +289,7 @@ fn disjoint_with_filter<'cx, 'tcx>(\n     // hold we need to check if `&'?a str: !Error` holds, if doesn't hold there's overlap because\n     // at some point an impl for `&'?a str: Error` could be added.\n     let infcx = selcx.infcx();\n+    let tcx = infcx.tcx;\n     let opt_failing_obligation = impl1_header\n         .predicates\n         .iter()\n@@ -329,7 +303,7 @@ fn disjoint_with_filter<'cx, 'tcx>(\n             predicate: p,\n         })\n         .chain(obligations)\n-        .find(|o| filter(selcx, o));\n+        .find(|o| loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o));\n     // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported\n     // to the canonical trait query form, `infcx.predicate_may_hold`, once\n     // the new system supports intercrate mode (which coherence needs).\n@@ -344,6 +318,15 @@ fn disjoint_with_filter<'cx, 'tcx>(\n \n /// Given impl1 and impl2 check if both impls are never satisfied by a common type (including\n /// where-clauses) If so, return true, they are disjoint and false otherwise.\n+fn strict_disjoint<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    impl1_def_id: DefId,\n+    impl2_def_id: DefId,\n+) -> bool {\n+    explicit_disjoint(selcx, impl1_def_id, impl2_def_id)\n+        || explicit_disjoint(selcx, impl2_def_id, impl1_def_id)\n+}\n+\n fn explicit_disjoint<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     impl1_def_id: DefId,"}]}