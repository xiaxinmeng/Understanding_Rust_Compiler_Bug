{"sha": "8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTZlZWE5ZGM4YzZjNGE1NjMxMGVjZjljMjhmNGEzODllMDZhYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-18T05:47:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-18T05:47:56Z"}, "message": "Auto merge of #43900 - TobiasSchaffner:net_out_of_io, r=alexcrichton\n\nRefactoring: move net specific file descriptor methods\n\nMove the implementations of net specific file descriptor methods from\nio to net. This makes it easier to exclude net at all if it is not needed\nfor a target.", "tree": {"sha": "5057fbd5f598d660048d309c24dab57ae0a63ded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5057fbd5f598d660048d309c24dab57ae0a63ded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3", "html_url": "https://github.com/rust-lang/rust/commit/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3be0a4b254cac6e71b8a025ee6e58112e47948", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3be0a4b254cac6e71b8a025ee6e58112e47948", "html_url": "https://github.com/rust-lang/rust/commit/7f3be0a4b254cac6e71b8a025ee6e58112e47948"}, {"sha": "2ccaeff5822fd866fd9e695b9ca51893167be35c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccaeff5822fd866fd9e695b9ca51893167be35c", "html_url": "https://github.com/rust-lang/rust/commit/2ccaeff5822fd866fd9e695b9ca51893167be35c"}], "stats": {"total": 121, "additions": 62, "deletions": 59}, "files": [{"sha": "c9fe3590a64a05542c8946ba3308d9ce3e4ebba1", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 1, "deletions": 56, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3", "patch": "@@ -13,11 +13,10 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use fs;\n-use net;\n use os::raw;\n use sys;\n use io;\n-use sys_common::{self, AsInner, FromInner, IntoInner};\n+use sys_common::{AsInner, FromInner, IntoInner};\n use libc;\n \n /// Raw file descriptors.\n@@ -93,19 +92,6 @@ impl IntoRawFd for fs::File {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for net::TcpStream {\n-    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n-}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for net::TcpListener {\n-    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n-}\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl AsRawFd for net::UdpSocket {\n-    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n-}\n-\n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stdin {\n     fn as_raw_fd(&self) -> RawFd { libc::STDIN_FILENO }\n@@ -120,44 +106,3 @@ impl AsRawFd for io::Stdout {\n impl AsRawFd for io::Stderr {\n     fn as_raw_fd(&self) -> RawFd { libc::STDERR_FILENO }\n }\n-\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for net::TcpStream {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(socket))\n-    }\n-}\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for net::TcpListener {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(socket))\n-    }\n-}\n-#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n-impl FromRawFd for net::UdpSocket {\n-    unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n-        let socket = sys::net::Socket::from_inner(fd);\n-        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(socket))\n-    }\n-}\n-\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for net::TcpStream {\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n-    }\n-}\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for net::TcpListener {\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n-    }\n-}\n-#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n-impl IntoRawFd for net::UdpSocket {\n-    fn into_raw_fd(self) -> RawFd {\n-        self.into_inner().into_socket().into_inner()\n-    }\n-}"}, {"sha": "86b0f35be924dcfeca450bc5afd3ba31586f09e6", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=8016eea9dc8c6c4a56310ecf9c28f4a389e06ac3", "patch": "@@ -30,14 +30,14 @@ use ffi::OsStr;\n use fmt;\n use io::{self, Initializer};\n use mem;\n-use net::Shutdown;\n+use net::{self, Shutdown};\n use os::unix::ffi::OsStrExt;\n use os::unix::io::{RawFd, AsRawFd, FromRawFd, IntoRawFd};\n use path::Path;\n use time::Duration;\n-use sys::cvt;\n+use sys::{self, cvt};\n use sys::net::Socket;\n-use sys_common::{AsInner, FromInner, IntoInner};\n+use sys_common::{self, AsInner, FromInner, IntoInner};\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\",\n           target_os = \"dragonfly\", target_os = \"freebsd\",\n@@ -588,6 +588,64 @@ impl IntoRawFd for UnixStream {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRawFd for net::TcpStream {\n+    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRawFd for net::TcpListener {\n+    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl AsRawFd for net::UdpSocket {\n+    fn as_raw_fd(&self) -> RawFd { *self.as_inner().socket().as_inner() }\n+}\n+\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+impl FromRawFd for net::TcpStream {\n+    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n+        let socket = sys::net::Socket::from_inner(fd);\n+        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(socket))\n+    }\n+}\n+\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+impl FromRawFd for net::TcpListener {\n+    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n+        let socket = sys::net::Socket::from_inner(fd);\n+        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(socket))\n+    }\n+}\n+\n+#[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n+impl FromRawFd for net::UdpSocket {\n+    unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n+        let socket = sys::net::Socket::from_inner(fd);\n+        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(socket))\n+    }\n+}\n+\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+impl IntoRawFd for net::TcpStream {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+impl IntoRawFd for net::TcpListener {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+#[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n+impl IntoRawFd for net::UdpSocket {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+\n /// A structure representing a Unix domain socket server.\n ///\n /// # Examples"}]}