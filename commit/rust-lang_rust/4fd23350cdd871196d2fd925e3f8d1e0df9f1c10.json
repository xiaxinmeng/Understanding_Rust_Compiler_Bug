{"sha": "4fd23350cdd871196d2fd925e3f8d1e0df9f1c10", "node_id": "C_kwDOAAsO6NoAKDRmZDIzMzUwY2RkODcxMTk2ZDJmZDkyNWUzZjhkMWUwZGY5ZjFjMTA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-05T06:10:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-07T05:50:03Z"}, "message": "expand: Remove some unnecessary `self` mutability", "tree": {"sha": "ffee028d42b550dc1655450dae393fd1ef2da568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffee028d42b550dc1655450dae393fd1ef2da568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10", "html_url": "https://github.com/rust-lang/rust/commit/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc7e7711555a0021f5a3592de84bb2b650e42e19", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7e7711555a0021f5a3592de84bb2b650e42e19", "html_url": "https://github.com/rust-lang/rust/commit/dc7e7711555a0021f5a3592de84bb2b650e42e19"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "e0bdeb30dc84bcfe70436b7bf9007fb4242db1e0", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=4fd23350cdd871196d2fd925e3f8d1e0df9f1c10", "patch": "@@ -238,7 +238,7 @@ macro_rules! configure {\n }\n \n impl<'a> StripUnconfigured<'a> {\n-    pub fn configure<T: AstLike>(&mut self, mut node: T) -> Option<T> {\n+    pub fn configure<T: AstLike>(&self, mut node: T) -> Option<T> {\n         self.process_cfg_attrs(&mut node);\n         if self.in_cfg(node.attrs()) {\n             self.try_configure_tokens(&mut node);\n@@ -248,7 +248,7 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    fn try_configure_tokens<T: AstLike>(&mut self, node: &mut T) {\n+    fn try_configure_tokens<T: AstLike>(&self, node: &mut T) {\n         if self.config_tokens {\n             if let Some(Some(tokens)) = node.tokens_mut() {\n                 let attr_annotated_tokens = tokens.create_token_stream();\n@@ -257,10 +257,7 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    fn configure_krate_attrs(\n-        &mut self,\n-        mut attrs: Vec<ast::Attribute>,\n-    ) -> Option<Vec<ast::Attribute>> {\n+    fn configure_krate_attrs(&self, mut attrs: Vec<ast::Attribute>) -> Option<Vec<ast::Attribute>> {\n         attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n         if self.in_cfg(&attrs) { Some(attrs) } else { None }\n     }\n@@ -269,7 +266,7 @@ impl<'a> StripUnconfigured<'a> {\n     /// This is only used during the invocation of `derive` proc-macros,\n     /// which require that we cfg-expand their entire input.\n     /// Normal cfg-expansion operates on parsed AST nodes via the `configure` method\n-    fn configure_tokens(&mut self, stream: &AttrAnnotatedTokenStream) -> AttrAnnotatedTokenStream {\n+    fn configure_tokens(&self, stream: &AttrAnnotatedTokenStream) -> AttrAnnotatedTokenStream {\n         fn can_skip(stream: &AttrAnnotatedTokenStream) -> bool {\n             stream.0.iter().all(|(tree, _spacing)| match tree {\n                 AttrAnnotatedTokenTree::Attributes(_) => false,\n@@ -325,7 +322,7 @@ impl<'a> StripUnconfigured<'a> {\n     /// Gives compiler warnings if any `cfg_attr` does not contain any\n     /// attributes and is in the original source code. Gives compiler errors if\n     /// the syntax of any `cfg_attr` is incorrect.\n-    fn process_cfg_attrs<T: AstLike>(&mut self, node: &mut T) {\n+    fn process_cfg_attrs<T: AstLike>(&self, node: &mut T) {\n         node.visit_attrs(|attrs| {\n             attrs.flat_map_in_place(|attr| self.process_cfg_attr(attr));\n         });\n@@ -338,7 +335,7 @@ impl<'a> StripUnconfigured<'a> {\n     /// Gives a compiler warning when the `cfg_attr` contains no attributes and\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect.\n-    fn process_cfg_attr(&mut self, attr: Attribute) -> Vec<Attribute> {\n+    fn process_cfg_attr(&self, attr: Attribute) -> Vec<Attribute> {\n         if !attr.has_name(sym::cfg_attr) {\n             return vec![attr];\n         }\n@@ -461,7 +458,7 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    pub fn configure_expr(&mut self, expr: &mut P<ast::Expr>) {\n+    pub fn configure_expr(&self, expr: &mut P<ast::Expr>) {\n         for attr in expr.attrs.iter() {\n             self.maybe_emit_expr_attr_err(attr);\n         }"}, {"sha": "f8c4ddbff767d0d2f57417ffe8ef4cbd14cb3b7a", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd23350cdd871196d2fd925e3f8d1e0df9f1c10/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=4fd23350cdd871196d2fd925e3f8d1e0df9f1c10", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     /// its position and derives following it. We have to collect the derives in order to resolve\n     /// legacy derive helpers (helpers written before derives that introduce them).\n     fn take_first_attr(\n-        &mut self,\n+        &self,\n         item: &mut impl AstLike,\n     ) -> Option<(ast::Attribute, usize, Vec<Path>)> {\n         let mut attr = None;\n@@ -1040,7 +1040,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     }\n \n     fn take_stmt_bang(\n-        &mut self,\n+        &self,\n         stmt: ast::Stmt,\n     ) -> Result<(bool, MacCall, Vec<ast::Attribute>), ast::Stmt> {\n         match stmt.kind {\n@@ -1071,7 +1071,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn configure<T: AstLike>(&mut self, node: T) -> Option<T> {\n+    fn configure<T: AstLike>(&self, node: T) -> Option<T> {\n         self.cfg.configure(node)\n     }\n "}]}