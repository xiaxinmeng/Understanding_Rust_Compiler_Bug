{"sha": "952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MmM1NzMyYzJkMjVhODc1ZjkwZTVjZDVkZDI5YTFhMjFjMWQ0YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T16:06:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-13T16:06:08Z"}, "message": "Auto merge of #85258 - GuillaumeGomez:rollup-kzay7o5, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #85068 (Fix diagnostic for cross crate private tuple struct constructors)\n - #85175 (Rustdoc cleanup)\n - #85177 (add BITS associated constant to core::num::Wrapping)\n - #85240 (Don't suggest adding `'static` lifetime to arguments)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c3f04f78d67061529e831fe7bf72bfd88d0b6dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f04f78d67061529e831fe7bf72bfd88d0b6dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "html_url": "https://github.com/rust-lang/rust/commit/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2df620789cd82a6751320223cd3de87256bf15e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2df620789cd82a6751320223cd3de87256bf15e", "html_url": "https://github.com/rust-lang/rust/commit/d2df620789cd82a6751320223cd3de87256bf15e"}, {"sha": "3761ada94ebb9693190bc7924951b6035fd9c419", "url": "https://api.github.com/repos/rust-lang/rust/commits/3761ada94ebb9693190bc7924951b6035fd9c419", "html_url": "https://github.com/rust-lang/rust/commit/3761ada94ebb9693190bc7924951b6035fd9c419"}], "stats": {"total": 587, "additions": 258, "deletions": 329}, "files": [{"sha": "0878f8550da35a6a3d7abf830039bbc4943124ad", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -114,12 +114,16 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         );\n \n         diag.span_label(span, format!(\"lifetime `{}` required\", named));\n-        diag.span_suggestion(\n-            new_ty_span,\n-            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-            new_ty.to_string(),\n-            Applicability::Unspecified,\n-        );\n+        // Suggesting `'static` is nearly always incorrect, and can steer users\n+        // down the wrong path.\n+        if *named != ty::ReStatic {\n+            diag.span_suggestion(\n+                new_ty_span,\n+                &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n+                new_ty.to_string(),\n+                Applicability::Unspecified,\n+            );\n+        }\n \n         Some(diag)\n     }"}, {"sha": "de5279c4a8da36f587a31e77552041dfe8088256", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n use rustc_middle::ty::codec::TyDecoder;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnDataDecodeMode;\n@@ -1312,6 +1312,17 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .collect()\n     }\n \n+    fn get_struct_field_visibilities(&self, id: DefIndex) -> Vec<Visibility> {\n+        self.root\n+            .tables\n+            .children\n+            .get(self, id)\n+            .unwrap_or_else(Lazy::empty)\n+            .decode(self)\n+            .map(|field_index| self.get_visibility(field_index))\n+            .collect()\n+    }\n+\n     fn get_inherent_implementations_for_type(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "82ca634f2828ee6677002f87c88c8ddeedbf7c7f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n@@ -17,7 +17,7 @@ use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{Span, Spanned};\n@@ -392,6 +392,20 @@ impl CStore {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }\n \n+    pub fn struct_field_visibilities_untracked(&self, def: DefId) -> Vec<Visibility> {\n+        self.get_crate_data(def.krate).get_struct_field_visibilities(def.index)\n+    }\n+\n+    pub fn ctor_def_id_and_kind_untracked(&self, def: DefId) -> Option<(DefId, CtorKind)> {\n+        self.get_crate_data(def.krate).get_ctor_def_id(def.index).map(|ctor_def_id| {\n+            (ctor_def_id, self.get_crate_data(def.krate).get_ctor_kind(def.index))\n+        })\n+    }\n+\n+    pub fn visibility_untracked(&self, def: DefId) -> Visibility {\n+        self.get_crate_data(def.krate).get_visibility(def.index)\n+    }\n+\n     pub fn item_children_untracked(\n         &self,\n         def_id: DefId,"}, {"sha": "e10314a11fc1bbacd6e83a378f10aecc774fb686", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -995,7 +995,20 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record some extra data for better diagnostics.\n         let cstore = self.r.cstore();\n         match res {\n-            Res::Def(DefKind::Struct | DefKind::Union, def_id) => {\n+            Res::Def(DefKind::Struct, def_id) => {\n+                let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n+                let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);\n+                if let Some((ctor_def_id, ctor_kind)) = ctor {\n+                    let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n+                    let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n+                    let field_visibilities = cstore.struct_field_visibilities_untracked(def_id);\n+                    self.r\n+                        .struct_constructors\n+                        .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n+                }\n+                self.insert_field_names(def_id, field_names);\n+            }\n+            Res::Def(DefKind::Union, def_id) => {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n@@ -1007,12 +1020,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     self.r.has_self.insert(def_id);\n                 }\n             }\n-            Res::Def(DefKind::Ctor(CtorOf::Struct, ..), def_id) => {\n-                let parent = cstore.def_key(def_id).parent;\n-                if let Some(struct_def_id) = parent.map(|index| DefId { index, ..def_id }) {\n-                    self.r.struct_constructors.insert(struct_def_id, (res, vis, vec![]));\n-                }\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "be6d70320d407669839cae46e732bc1471becfa3", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -433,6 +433,21 @@ macro_rules! wrapping_int_impl {\n             #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n             pub const MAX: Self = Self(<$t>::MAX);\n \n+            /// Returns the size of this integer type in bits.\n+            ///\n+            /// # Examples\n+            ///\n+            /// Basic usage:\n+            ///\n+            /// ```\n+            /// #![feature(wrapping_int_impl)]\n+            /// use std::num::Wrapping;\n+            ///\n+            #[doc = concat!(\"assert_eq!(<Wrapping<\", stringify!($t), \">>::BITS, \", stringify!($t), \"::BITS);\")]\n+            /// ```\n+            #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n+            pub const BITS: u32 = <$t>::BITS;\n+\n             /// Returns the number of ones in the binary representation of `self`.\n             ///\n             /// # Examples"}, {"sha": "20e82cf2caf388f6169ace9577668fcd4d8476c7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -573,10 +573,6 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         )\n     }\n \n-    fn write_loading_content(w: &mut Buffer, extra_content: &str) {\n-        write!(w, \"{}<span class=\\\"loading-content\\\">Loading content...</span>\", extra_content)\n-    }\n-\n     fn trait_item(w: &mut Buffer, cx: &Context<'_>, m: &clean::Item, t: &clean::Item) {\n         let name = m.name.as_ref().unwrap();\n         info!(\"Documenting {} on {:?}\", name, t.name);\n@@ -601,7 +597,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         for t in types {\n             trait_item(w, cx, t, it);\n         }\n-        write_loading_content(w, \"</div>\");\n+        w.write_str(\"</div>\");\n     }\n \n     if !consts.is_empty() {\n@@ -614,7 +610,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         for t in consts {\n             trait_item(w, cx, t, it);\n         }\n-        write_loading_content(w, \"</div>\");\n+        w.write_str(\"</div>\");\n     }\n \n     // Output the documentation for each function individually\n@@ -628,7 +624,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         for m in required {\n             trait_item(w, cx, m, it);\n         }\n-        write_loading_content(w, \"</div>\");\n+        w.write_str(\"</div>\");\n     }\n     if !provided.is_empty() {\n         write_small_section_header(\n@@ -640,7 +636,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         for m in provided {\n             trait_item(w, cx, m, it);\n         }\n-        write_loading_content(w, \"</div>\");\n+        w.write_str(\"</div>\");\n     }\n \n     // If there are methods directly on this trait object, render them here.\n@@ -703,7 +699,6 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     &[],\n                 );\n             }\n-            write_loading_content(w, \"\");\n         }\n \n         write_small_section_header(\n@@ -715,7 +710,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         for implementor in concrete {\n             render_implementor(cx, implementor, it, w, &implementor_dups, &[]);\n         }\n-        write_loading_content(w, \"</div>\");\n+        w.write_str(\"</div>\");\n \n         if t.is_auto {\n             write_small_section_header(\n@@ -734,7 +729,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     &collect_paths_for_type(implementor.inner_impl().for_.clone(), &cx.cache),\n                 );\n             }\n-            write_loading_content(w, \"</div>\");\n+            w.write_str(\"</div>\");\n         }\n     } else {\n         // even without any implementations to write in, we still want the heading and list, so the\n@@ -743,18 +738,16 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             w,\n             \"implementors\",\n             \"Implementors\",\n-            \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\">\",\n+            \"<div class=\\\"item-list\\\" id=\\\"implementors-list\\\"></div>\",\n         );\n-        write_loading_content(w, \"</div>\");\n \n         if t.is_auto {\n             write_small_section_header(\n                 w,\n                 \"synthetic-implementors\",\n                 \"Auto implementors\",\n-                \"<div class=\\\"item-list\\\" id=\\\"synthetic-implementors-list\\\">\",\n+                \"<div class=\\\"item-list\\\" id=\\\"synthetic-implementors-list\\\"></div>\",\n             );\n-            write_loading_content(w, \"</div>\");\n         }\n     }\n "}, {"sha": "ebc9ada4451e7813555b7e32487545f4f9a4fe81", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 139, "deletions": 157, "changes": 296, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -156,152 +156,154 @@ function hideThemeButtonState() {\n     \"use strict\";\n \n     window.searchState = {\n-      loadingText: \"Loading search results...\",\n-      input: document.getElementsByClassName(\"search-input\")[0],\n-      outputElement: function() {\n-        return document.getElementById(\"search\");\n-      },\n-      title: null,\n-      titleBeforeSearch: document.title,\n-      timeout: null,\n-      // On the search screen, so you remain on the last tab you opened.\n-      //\n-      // 0 for \"In Names\"\n-      // 1 for \"In Parameters\"\n-      // 2 for \"In Return Types\"\n-      currentTab: 0,\n-      mouseMovedAfterSearch: true,\n-      clearInputTimeout: function() {\n-        if (searchState.timeout !== null) {\n-            clearTimeout(searchState.timeout);\n-            searchState.timeout = null;\n-        }\n-      },\n-      // Sets the focus on the search bar at the top of the page\n-      focus: function() {\n-          searchState.input.focus();\n-      },\n-      // Removes the focus from the search bar.\n-      defocus: function() {\n-          searchState.input.blur();\n-      },\n-      showResults: function(search) {\n-        if (search === null || typeof search === 'undefined') {\n-            search = searchState.outputElement();\n-        }\n-        addClass(main, \"hidden\");\n-        removeClass(search, \"hidden\");\n-        searchState.mouseMovedAfterSearch = false;\n-        document.title = searchState.title;\n-      },\n-      hideResults: function(search) {\n-        if (search === null || typeof search === 'undefined') {\n-            search = searchState.outputElement();\n-        }\n-        addClass(search, \"hidden\");\n-        removeClass(main, \"hidden\");\n-        document.title = searchState.titleBeforeSearch;\n-        // We also remove the query parameter from the URL.\n-        if (searchState.browserSupportsHistoryApi()) {\n-            history.replaceState(\"\", window.currentCrate + \" - Rust\",\n-                getNakedUrl() + window.location.hash);\n-        }\n-      },\n-      getQueryStringParams: function() {\n-        var params = {};\n-        window.location.search.substring(1).split(\"&\").\n-            map(function(s) {\n-                var pair = s.split(\"=\");\n-                params[decodeURIComponent(pair[0])] =\n-                    typeof pair[1] === \"undefined\" ? null : decodeURIComponent(pair[1]);\n-            });\n-        return params;\n-      },\n-      putBackSearch: function(search_input) {\n-        var search = searchState.outputElement();\n-        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n-            searchState.showResults(search);\n-            if (searchState.browserSupportsHistoryApi()) {\n-                var extra = \"?search=\" + encodeURIComponent(search_input.value);\n-                history.replaceState(search_input.value, \"\",\n-                    getNakedUrl() + extra + window.location.hash);\n+        loadingText: \"Loading search results...\",\n+        input: document.getElementsByClassName(\"search-input\")[0],\n+        outputElement: function() {\n+            return document.getElementById(\"search\");\n+        },\n+        title: null,\n+        titleBeforeSearch: document.title,\n+        timeout: null,\n+        // On the search screen, so you remain on the last tab you opened.\n+        //\n+        // 0 for \"In Names\"\n+        // 1 for \"In Parameters\"\n+        // 2 for \"In Return Types\"\n+        currentTab: 0,\n+        mouseMovedAfterSearch: true,\n+        clearInputTimeout: function() {\n+            if (searchState.timeout !== null) {\n+                clearTimeout(searchState.timeout);\n+                searchState.timeout = null;\n+            }\n+        },\n+        // Sets the focus on the search bar at the top of the page\n+        focus: function() {\n+            searchState.input.focus();\n+        },\n+        // Removes the focus from the search bar.\n+        defocus: function() {\n+            searchState.input.blur();\n+        },\n+        showResults: function(search) {\n+            if (search === null || typeof search === 'undefined') {\n+                search = searchState.outputElement();\n             }\n+            addClass(main, \"hidden\");\n+            removeClass(search, \"hidden\");\n+            searchState.mouseMovedAfterSearch = false;\n             document.title = searchState.title;\n-        }\n-      },\n-      browserSupportsHistoryApi: function() {\n-          return window.history && typeof window.history.pushState === \"function\";\n-      },\n-      setup: function() {\n-        var search_input = searchState.input;\n-        if (!searchState.input) {\n-            return;\n-        }\n-        function loadScript(url) {\n-            var script = document.createElement('script');\n-            script.src = url;\n-            document.head.append(script);\n-        }\n-\n-        var searchLoaded = false;\n-        function loadSearch() {\n-            if (!searchLoaded) {\n-                searchLoaded = true;\n-                loadScript(window.searchJS);\n-                loadScript(window.searchIndexJS);\n+        },\n+        hideResults: function(search) {\n+            if (search === null || typeof search === 'undefined') {\n+                search = searchState.outputElement();\n+            }\n+            addClass(search, \"hidden\");\n+            removeClass(main, \"hidden\");\n+            document.title = searchState.titleBeforeSearch;\n+            // We also remove the query parameter from the URL.\n+            if (searchState.browserSupportsHistoryApi()) {\n+                history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                    getNakedUrl() + window.location.hash);\n+            }\n+        },\n+        getQueryStringParams: function() {\n+            var params = {};\n+            window.location.search.substring(1).split(\"&\").\n+                map(function(s) {\n+                    var pair = s.split(\"=\");\n+                    params[decodeURIComponent(pair[0])] =\n+                        typeof pair[1] === \"undefined\" ? null : decodeURIComponent(pair[1]);\n+                });\n+            return params;\n+        },\n+        putBackSearch: function(search_input) {\n+            var search = searchState.outputElement();\n+            if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n+                searchState.showResults(search);\n+                if (searchState.browserSupportsHistoryApi()) {\n+                    var extra = \"?search=\" + encodeURIComponent(search_input.value);\n+                    history.replaceState(search_input.value, \"\",\n+                        getNakedUrl() + extra + window.location.hash);\n+                }\n+                document.title = searchState.title;\n+            }\n+        },\n+        browserSupportsHistoryApi: function() {\n+            return window.history && typeof window.history.pushState === \"function\";\n+        },\n+        setup: function() {\n+            var search_input = searchState.input;\n+            if (!searchState.input) {\n+                return;\n+            }\n+            function loadScript(url) {\n+                var script = document.createElement('script');\n+                script.src = url;\n+                document.head.append(script);\n             }\n-        }\n \n-        search_input.addEventListener(\"focus\", function() {\n-            searchState.putBackSearch(this);\n-            search_input.origPlaceholder = searchState.input.placeholder;\n-            search_input.placeholder = \"Type your search here.\";\n-            loadSearch();\n-        });\n-        search_input.addEventListener(\"blur\", function() {\n-            search_input.placeholder = searchState.input.origPlaceholder;\n-        });\n+            var searchLoaded = false;\n+            function loadSearch() {\n+                if (!searchLoaded) {\n+                    searchLoaded = true;\n+                    loadScript(window.searchJS);\n+                    loadScript(window.searchIndexJS);\n+                }\n+            }\n \n-        document.addEventListener(\"mousemove\", function() {\n-          searchState.mouseMovedAfterSearch = true;\n-        });\n+            search_input.addEventListener(\"focus\", function() {\n+                searchState.putBackSearch(this);\n+                search_input.origPlaceholder = searchState.input.placeholder;\n+                search_input.placeholder = \"Type your search here.\";\n+                loadSearch();\n+            });\n+            search_input.addEventListener(\"blur\", function() {\n+                search_input.placeholder = searchState.input.origPlaceholder;\n+            });\n \n-        search_input.removeAttribute('disabled');\n+            document.addEventListener(\"mousemove\", function() {\n+                searchState.mouseMovedAfterSearch = true;\n+            });\n \n-        // `crates{version}.js` should always be loaded before this script, so we can use it safely.\n-        searchState.addCrateDropdown(window.ALL_CRATES);\n-        var params = searchState.getQueryStringParams();\n-        if (params.search !== undefined) {\n-            var search = searchState.outputElement();\n-            search.innerHTML = \"<h3 style=\\\"text-align: center;\\\">\" +\n-               searchState.loadingText + \"</h3>\";\n-            searchState.showResults(search);\n-            loadSearch();\n-        }\n-      },\n-      addCrateDropdown: function(crates) {\n-        var elem = document.getElementById(\"crate-search\");\n+            search_input.removeAttribute('disabled');\n+\n+            // `crates{version}.js` should always be loaded before this script, so we can use it\n+            // safely.\n+            searchState.addCrateDropdown(window.ALL_CRATES);\n+            var params = searchState.getQueryStringParams();\n+            if (params.search !== undefined) {\n+                var search = searchState.outputElement();\n+                search.innerHTML = \"<h3 style=\\\"text-align: center;\\\">\" +\n+                   searchState.loadingText + \"</h3>\";\n+                searchState.showResults(search);\n+                loadSearch();\n+            }\n+        },\n+        addCrateDropdown: function(crates) {\n+            var elem = document.getElementById(\"crate-search\");\n \n-        if (!elem) {\n-            return;\n-        }\n-        var savedCrate = getSettingValue(\"saved-filter-crate\");\n-        for (var i = 0, len = crates.length; i < len; ++i) {\n-            var option = document.createElement(\"option\");\n-            option.value = crates[i];\n-            option.innerText = crates[i];\n-            elem.appendChild(option);\n-            // Set the crate filter from saved storage, if the current page has the saved crate\n-            // filter.\n-            //\n-            // If not, ignore the crate filter -- we want to support filtering for crates on sites\n-            // like doc.rust-lang.org where the crates may differ from page to page while on the\n-            // same domain.\n-            if (crates[i] === savedCrate) {\n-                elem.value = savedCrate;\n+            if (!elem) {\n+                return;\n             }\n-        }\n-      },\n+            var savedCrate = getSettingValue(\"saved-filter-crate\");\n+            for (var i = 0, len = crates.length; i < len; ++i) {\n+                var option = document.createElement(\"option\");\n+                option.value = crates[i];\n+                option.innerText = crates[i];\n+                elem.appendChild(option);\n+                // Set the crate filter from saved storage, if the current page has the saved crate\n+                // filter.\n+                //\n+                // If not, ignore the crate filter -- we want to support filtering for crates on\n+                // sites like doc.rust-lang.org where the crates may differ from page to page while\n+                // on the\n+                // same domain.\n+                if (crates[i] === savedCrate) {\n+                    elem.value = savedCrate;\n+                }\n+            }\n+        },\n     };\n \n     function getPageId() {\n@@ -1045,26 +1047,6 @@ function hideThemeButtonState() {\n         };\n     }\n \n-    if (main) {\n-        onEachLazy(main.getElementsByClassName(\"loading-content\"), function(e) {\n-            e.remove();\n-        });\n-        onEachLazy(main.childNodes, function(e) {\n-            // Unhide the actual content once loading is complete. Headers get\n-            // flex treatment for their horizontal layout, divs get block treatment\n-            // for vertical layout (column-oriented flex layout for divs caused\n-            // errors in mobile browsers).\n-            if (e.tagName === \"H2\" || e.tagName === \"H3\") {\n-                var nextTagName = e.nextElementSibling.tagName;\n-                if (nextTagName === \"H2\" || nextTagName === \"H3\") {\n-                    e.nextElementSibling.style.display = \"flex\";\n-                } else if (nextTagName !== \"DETAILS\") {\n-                    e.nextElementSibling.style.display = \"block\";\n-                }\n-            }\n-        });\n-    }\n-\n     function buildHelperPopup() {\n         var popup = document.createElement(\"aside\");\n         addClass(popup, \"hidden\");"}, {"sha": "0a196edd53b1dd063900a27a45a598e8e49be2f8", "filename": "src/librustdoc/html/static/noscript.css", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoscript.css?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -4,31 +4,6 @@ of content is hidden by default (depending on the settings too), we have to over\n rules.\n */\n \n-#main > h2 + div, #main > h2 + h3, #main > h3 + div {\n-\tdisplay: block;\n-}\n-\n-.loading-content {\n-\tdisplay: none;\n-}\n-\n-#main > h2 + div, #main > h3 + div {\n-\tdisplay: block;\n-}\n-\n-#main > h2 + h3 {\n-\tdisplay: flex;\n-}\n-\n-#main .impl-items .hidden {\n-\tdisplay: block !important;\n-}\n-\n-#main .impl-items h4.hidden {\n-\t/* Without this rule, the version and the \"[src]\" span aren't on the same line as the header. */\n-\tdisplay: flex !important;\n-}\n-\n #main .attributes {\n \t/* Since there is no toggle (the \"[-]\") when JS is disabled, no need for this margin either. */\n \tmargin-left: 0 !important;"}, {"sha": "1b7eff4604f5f9f694a0e9d671bce9f541b33e56", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 73, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -145,7 +145,7 @@ h4.type.trait-impl, h4.associatedconstant.trait-impl, h4.associatedtype.trait-im\n \n h1, h2, h3, h4,\n .sidebar, a.source, .search-input, .content table td:first-child > a,\n-.collapse-toggle, div.item-list .out-of-band,\n+div.item-list .out-of-band,\n #source-sidebar, #sidebar-toggle,\n details.rustdoc-toggle > summary::before,\n details.undocumented > summary::before,\n@@ -431,11 +431,6 @@ nav.sub {\n #main > .docblock h2 { font-size: 1.15em; }\n #main > .docblock h3, #main > .docblock h4, #main > .docblock h5 { font-size: 1em; }\n \n-#main > h2 + div, #main > h2 + h3, #main > h3 + div {\n-\tdisplay: none; /* Changed to flex or block via js once the page is loaded */\n-\tflex-wrap: wrap;\n-}\n-\n .docblock h1 { font-size: 1em; }\n .docblock h2 { font-size: 0.95em; }\n .docblock h3, .docblock h4, .docblock h5 { font-size: 0.9em; }\n@@ -565,9 +560,6 @@ h4 > code, h3 > code, .invisible > code {\n .content .docblock >.impl-items table td {\n \tpadding: 0;\n }\n-.toggle-wrapper.marg-left > .collapse-toggle {\n-\tleft: -24px;\n-}\n .content .docblock > .impl-items .table-display, .impl-items table td {\n \tborder: none;\n }\n@@ -974,45 +966,6 @@ a.test-arrow:hover{\n \tfont-weight: 300;\n }\n \n-.collapse-toggle {\n-\tfont-weight: 300;\n-\tposition: absolute;\n-\tleft: -23px;\n-\ttop: 0;\n-}\n-\n-h3 > .collapse-toggle, h4 > .collapse-toggle {\n-\tfont-size: 0.8em;\n-\ttop: 5px;\n-}\n-\n-.toggle-wrapper > .collapse-toggle {\n-\tleft: -24px;\n-\tmargin-top: 0px;\n-}\n-\n-.toggle-wrapper {\n-\tposition: relative;\n-\tmargin-top: 0;\n-}\n-\n-.toggle-wrapper.collapsed {\n-\theight: 25px;\n-\ttransition: height .2s;\n-\tmargin-bottom: .6em;\n-}\n-\n-.collapse-toggle > .inner {\n-\tdisplay: inline-block;\n-\twidth: 1.2ch;\n-\ttext-align: center;\n-}\n-\n-.collapse-toggle.hidden-default {\n-\tposition: relative;\n-\tmargin-left: 20px;\n-}\n-\n .since + .srclink {\n \tdisplay: table-cell;\n \tpadding-left: 10px;\n@@ -1029,14 +982,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tmargin-right: 5px;\n }\n \n-.toggle-wrapper > .collapse-toggle {\n-\tleft: 0;\n-}\n-\n-.variant + .toggle-wrapper + .docblock > p {\n-\tmargin-top: 5px;\n-}\n-\n .sub-variant, .sub-variant > h3 {\n \tmargin-top: 0px !important;\n \tpadding-top: 1px;\n@@ -1457,14 +1402,6 @@ h4 > .notable-traits {\n \t\tposition: inherit;\n \t}\n \n-\t.toggle-wrapper > .collapse-toggle {\n-\t\tleft: 0px;\n-\t}\n-\n-\t.toggle-wrapper {\n-\t\theight: 1.5em;\n-\t}\n-\n \t#search {\n \t\tmargin-left: 0;\n \t}\n@@ -1555,14 +1492,6 @@ h4 > .notable-traits {\n \t\tborder-bottom: 1px solid;\n \t}\n \n-\t.collapse-toggle {\n-\t\tleft: -20px;\n-\t}\n-\n-\t.impl > .collapse-toggle {\n-\t\tleft: -10px;\n-\t}\n-\n \t.item-list > details.rustdoc-toggle > summary:not(.hideme)::before {\n \t\tleft: -10px;\n \t}\n@@ -1602,7 +1531,7 @@ h4 > .notable-traits {\n }\n \n @media print {\n-\tnav.sub, .content .out-of-band, .collapse-toggle {\n+\tnav.sub, .content .out-of-band {\n \t\tdisplay: none;\n \t}\n }"}, {"sha": "a09d3eb1796b3ff6512f0600af6602a0ab5ea167", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1505,7 +1505,7 @@ window.initSearch = function(rawSearchIndex) {\n };\n \n if (window.searchIndex !== undefined) {\n-  initSearch(window.searchIndex);\n+    initSearch(window.searchIndex);\n }\n \n })();"}, {"sha": "13d1a475e4b2ad98877847eae397b4a9ce0b4ce4", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -224,7 +224,6 @@ a {\n \tcolor: #39AFD7;\n }\n \n-.collapse-toggle,\n details.rustdoc-toggle > summary.hideme > span,\n details.rustdoc-toggle > summary::before,\n details.undocumented > summary::before {"}, {"sha": "945ca9b252e5f509c0642e946031f6e10486212d", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -186,7 +186,6 @@ a.test-arrow {\n \tcolor: #dedede;\n }\n \n-.collapse-toggle,\n details.rustdoc-toggle > summary.hideme > span,\n details.rustdoc-toggle > summary::before,\n details.undocumented > summary::before {"}, {"sha": "2ed638bdd4fa188c4e9a5fa0ef318232c85e7fbe", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -184,7 +184,6 @@ a.test-arrow {\n \tcolor: #f5f5f5;\n }\n \n-.collapse-toggle,\n details.rustdoc-toggle > summary.hideme > span,\n details.rustdoc-toggle > summary::before,\n details.undocumented > summary::before {"}, {"sha": "1b0e0902d67ba3fe88cf9fe345b41d64071c2015", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1,8 +1,6 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n-LL |   fn foo(x: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n LL | /     bar(|| {\n LL | |\n LL | |         let _ = x;"}, {"sha": "a9add6184f13eab5f969eee592ffe031b1b3ed9c", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1,8 +1,6 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n-LL | fn foo(x: &()) {\n-   |           --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n LL |     bar(|| {\n    |     ^^^ lifetime `'static` required\n "}, {"sha": "de90a599e76b79189f94b6718eb8cde298b386ec", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1,9 +1,6 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/generator-region-requirements.rs:12:51\n    |\n-LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n-   |              -------- help: add explicit lifetime `'static` to the type of `x`: `&'static mut i32`\n-...\n LL |             GeneratorState::Complete(c) => return c,\n    |                                                   ^ lifetime `'static` required\n "}, {"sha": "aec878625661bef9bb668b8d7f0300515432dc84", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1,24 +1,18 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/projection-type-lifetime-mismatch.rs:18:5\n    |\n-LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n-   |         ------------------------------- help: add explicit lifetime `'static` to the type of `x`: `&'static impl for<'a> X<Y<'a> = &'a ()>`\n LL |     x.m()\n    |     ^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/projection-type-lifetime-mismatch.rs:23:5\n    |\n-LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n-   |                                       -- help: add explicit lifetime `'static` to the type of `x`: `&'static T`\n LL |     x.m()\n    |     ^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/projection-type-lifetime-mismatch.rs:28:5\n    |\n-LL | fn h(x: &()) -> &'static () {\n-   |         --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n LL |     x.m()\n    |     ^^^^^ lifetime `'static` required\n "}, {"sha": "389c9c35101ab4367eee05aeda41003eb3487b3d", "filename": "src/test/ui/issues/auxiliary/issue-75907.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-75907.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -3,3 +3,15 @@ pub struct Bar(pub u8, u8, u8);\n pub fn make_bar() -> Bar {\n     Bar(1, 12, 10)\n }\n+\n+mod inner {\n+    pub struct Foo(u8, pub u8, u8);\n+\n+    impl Foo {\n+        pub fn new() -> Foo {\n+            Foo(1, 12, 10)\n+        }\n+    }\n+}\n+\n+pub use inner::Foo;"}, {"sha": "d328329edad22209166ef61166d347bf00c959f1", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1,8 +1,6 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/issue-46983.rs:2:5\n    |\n-LL | fn foo(x: &u32) -> &'static u32 {\n-   |           ---- help: add explicit lifetime `'static` to the type of `x`: `&'static u32`\n LL |     &*x\n    |     ^^^ lifetime `'static` required\n "}, {"sha": "e30747782339cb4c675e783ba043beeb3f6a78cb", "filename": "src/test/ui/issues/issue-75907_b.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -3,9 +3,12 @@\n \n extern crate issue_75907 as a;\n \n-use a::{make_bar, Bar};\n+use a::{make_bar, Bar, Foo};\n \n fn main() {\n     let Bar(x, y, z) = make_bar();\n     //~^ ERROR cannot match against a tuple struct which contains private fields\n+\n+    let Foo(x, y, z) = Foo::new();\n+    //~^ ERROR cannot match against a tuple struct which contains private fields\n }"}, {"sha": "b82d08473c8c9962a6298c577adf58a916286085", "filename": "src/test/ui/issues/issue-75907_b.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -2,8 +2,30 @@ error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-75907_b.rs:9:9\n    |\n LL |     let Bar(x, y, z) = make_bar();\n-   |         ^^^ constructor is not visible here due to private fields\n+   |         ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75907_b.rs:9:16\n+   |\n+LL |     let Bar(x, y, z) = make_bar();\n+   |                ^  ^ private field\n+   |                |\n+   |                private field\n+\n+error[E0532]: cannot match against a tuple struct which contains private fields\n+  --> $DIR/issue-75907_b.rs:12:9\n+   |\n+LL |     let Foo(x, y, z) = Foo::new();\n+   |         ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75907_b.rs:12:13\n+   |\n+LL |     let Foo(x, y, z) = Foo::new();\n+   |             ^     ^ private field\n+   |             |\n+   |             private field\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0532`."}, {"sha": "4c302d935db96338085329cd6099a5e99e397082", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -1,8 +1,6 @@\n error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:9:5\n    |\n-LL | fn foo(x: &u32) -> &'static u32 {\n-   |           ---- help: add explicit lifetime `ReStatic` to the type of `x`: `&ReStatic u32`\n LL |     &*x\n    |     ^^^ lifetime `ReStatic` required\n "}, {"sha": "eabc3105c029307a119e5a94489f6aca70d55784", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -12,9 +12,6 @@ LL |     *x\n error[E0621]: explicit lifetime required in the type of `s`\n   --> $DIR/guarantor-issue-46974.rs:15:5\n    |\n-LL | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n-   |           ------------ help: add explicit lifetime `'static` to the type of `s`: `&'static Box<(i32,)>`\n-LL |     // FIXME(#46983): error message should be better\n LL |     &s.0\n    |     ^^^^ lifetime `'static` required\n "}, {"sha": "a4c8e721145eb4c3afef74e83f2f550d9e80e21d", "filename": "src/test/ui/regions/regions-static-bound.migrate.nll.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -11,17 +11,12 @@ LL |     t\n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5\n    |\n-LL | fn error(u: &(), v: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n LL |     static_id(&u);\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/regions-static-bound.rs:16:5\n    |\n-LL | fn error(u: &(), v: &()) {\n-   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n-...\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n "}, {"sha": "644458e2063ce8efa80f3c44ace25de2a1184e20", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -14,17 +14,12 @@ LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5\n    |\n-LL | fn error(u: &(), v: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n LL |     static_id(&u);\n    |     ^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/regions-static-bound.rs:16:5\n    |\n-LL | fn error(u: &(), v: &()) {\n-   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n-...\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n "}, {"sha": "a4c8e721145eb4c3afef74e83f2f550d9e80e21d", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -11,17 +11,12 @@ LL |     t\n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5\n    |\n-LL | fn error(u: &(), v: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n LL |     static_id(&u);\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/regions-static-bound.rs:16:5\n    |\n-LL | fn error(u: &(), v: &()) {\n-   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n-...\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n "}, {"sha": "d023ba3096e68ee0b85998869d2c802304f8a508", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=952c5732c2d25a875f90e5cd5dd29a1a21c1d4a2", "patch": "@@ -2,7 +2,7 @@ error[E0423]: cannot initialize a tuple struct which contains private fields\n   --> $DIR/struct.rs:20:14\n    |\n LL |     let ts = TupleStruct(640, 480);\n-   |              ^^^^^^^^^^^ constructor is not visible here due to private fields\n+   |              ^^^^^^^^^^^\n \n error[E0423]: expected value, found struct `UnitStruct`\n   --> $DIR/struct.rs:29:14"}]}