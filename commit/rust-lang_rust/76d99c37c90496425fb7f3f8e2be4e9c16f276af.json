{"sha": "76d99c37c90496425fb7f3f8e2be4e9c16f276af", "node_id": "C_kwDOAAsO6NoAKDc2ZDk5YzM3YzkwNDk2NDI1ZmI3ZjNmOGUyYmU0ZTljMTZmMjc2YWY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T19:21:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T19:21:08Z"}, "message": "fix RUSTC_BACKTRACE always being set", "tree": {"sha": "87ebc192a6a65e18416a50fda560bb238b5956d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ebc192a6a65e18416a50fda560bb238b5956d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d99c37c90496425fb7f3f8e2be4e9c16f276af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d99c37c90496425fb7f3f8e2be4e9c16f276af", "html_url": "https://github.com/rust-lang/rust/commit/76d99c37c90496425fb7f3f8e2be4e9c16f276af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d99c37c90496425fb7f3f8e2be4e9c16f276af/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f633537f3e4d47a2e1f96daee68e1063e0da17d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f633537f3e4d47a2e1f96daee68e1063e0da17d4", "html_url": "https://github.com/rust-lang/rust/commit/f633537f3e4d47a2e1f96daee68e1063e0da17d4"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "430f9e2f637baa89da30c73045e0d2364c6ddd24", "filename": "src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76d99c37c90496425fb7f3f8e2be4e9c16f276af/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d99c37c90496425fb7f3f8e2be4e9c16f276af/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=76d99c37c90496425fb7f3f8e2be4e9c16f276af", "patch": "@@ -306,6 +306,11 @@ fn parse_comma_list<T: FromStr>(input: &str) -> Result<Vec<T>, T::Err> {\n }\n \n fn main() {\n+    // Snapshot a copy of the environment before `rustc` starts messing with it.\n+    // (`install_ice_hook` might change `RUST_BACKTRACE`.)\n+    let env_snapshot = env::vars_os().collect::<Vec<_>>();\n+\n+    // Earliest rustc setup.\n     rustc_driver::install_ice_hook();\n \n     // If the environment asks us to actually be rustc, then do that.\n@@ -333,6 +338,8 @@ fn main() {\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n     let mut miri_config = miri::MiriConfig::default();\n+    miri_config.env = env_snapshot;\n+\n     let mut rustc_args = vec![];\n     let mut after_dashdash = false;\n "}, {"sha": "981776e3eebd2d75e4d8ea1e77b00224b12cff08", "filename": "src/eval.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d99c37c90496425fb7f3f8e2be4e9c16f276af/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d99c37c90496425fb7f3f8e2be4e9c16f276af/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=76d99c37c90496425fb7f3f8e2be4e9c16f276af", "patch": "@@ -1,7 +1,7 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n use std::collections::HashSet;\n-use std::ffi::OsStr;\n+use std::ffi::{OsStr, OsString};\n use std::iter;\n use std::panic::{self, AssertUnwindSafe};\n use std::thread;\n@@ -72,6 +72,9 @@ pub enum BacktraceStyle {\n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n+    /// The host environment snapshot to use as basis for what is provided to the interpreted program.\n+    /// (This is still subject to isolation as well as `excluded_env_vars` and `forwarded_env_vars`.)\n+    pub env: Vec<(OsString, OsString)>,\n     /// Determine if validity checking is enabled.\n     pub validate: bool,\n     /// Determines if Stacked Borrows is enabled.\n@@ -130,6 +133,7 @@ pub struct MiriConfig {\n impl Default for MiriConfig {\n     fn default() -> MiriConfig {\n         MiriConfig {\n+            env: vec![],\n             validate: true,\n             stacked_borrows: true,\n             check_alignment: AlignmentCheck::Int,"}, {"sha": "07b9cf18192c8527797bfa661d1d95eaf7edc35c", "filename": "src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76d99c37c90496425fb7f3f8e2be4e9c16f276af/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d99c37c90496425fb7f3f8e2be4e9c16f276af/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=76d99c37c90496425fb7f3f8e2be4e9c16f276af", "patch": "@@ -49,11 +49,11 @@ impl<'tcx> EnvVars<'tcx> {\n \n         // Skip the loop entirely if we don't want to forward anything.\n         if ecx.machine.communicate() || !config.forwarded_env_vars.is_empty() {\n-            for (name, value) in env::vars_os() {\n+            for (name, value) in &config.env {\n                 // Always forward what is in `forwarded_env_vars`; that list can take precedence over excluded_env_vars.\n-                let forward = config.forwarded_env_vars.iter().any(|v| **v == name)\n+                let forward = config.forwarded_env_vars.iter().any(|v| **v == *name)\n                     || (ecx.machine.communicate()\n-                        && !excluded_env_vars.iter().any(|v| **v == name));\n+                        && !excluded_env_vars.iter().any(|v| **v == *name));\n                 if forward {\n                     let var_ptr = match target_os {\n                         target if target_os_is_unix(target) =>\n@@ -65,7 +65,7 @@ impl<'tcx> EnvVars<'tcx> {\n                                 unsupported\n                             ),\n                     };\n-                    ecx.machine.env_vars.map.insert(name, var_ptr);\n+                    ecx.machine.env_vars.map.insert(name.clone(), var_ptr);\n                 }\n             }\n         }"}]}