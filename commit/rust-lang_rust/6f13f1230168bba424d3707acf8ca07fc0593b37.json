{"sha": "6f13f1230168bba424d3707acf8ca07fc0593b37", "node_id": "C_kwDOAAsO6NoAKDZmMTNmMTIzMDE2OGJiYTQyNGQzNzA3YWNmOGNhMDdmYzA1OTNiMzc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-26T11:00:29Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-27T08:37:23Z"}, "message": "rustc_typeck to rustc_hir_analysis", "tree": {"sha": "040066bfce24565f239525dafe678a0eab403ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040066bfce24565f239525dafe678a0eab403ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f13f1230168bba424d3707acf8ca07fc0593b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f13f1230168bba424d3707acf8ca07fc0593b37", "html_url": "https://github.com/rust-lang/rust/commit/6f13f1230168bba424d3707acf8ca07fc0593b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f13f1230168bba424d3707acf8ca07fc0593b37/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5fde4df43fa9a6cf929b1cb0f6ab8233a4be4dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fde4df43fa9a6cf929b1cb0f6ab8233a4be4dc", "html_url": "https://github.com/rust-lang/rust/commit/f5fde4df43fa9a6cf929b1cb0f6ab8233a4be4dc"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e106c4c2cfd6a2f5105c58e47429297514145a99", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=6f13f1230168bba424d3707acf8ca07fc0593b37", "patch": "@@ -1,7 +1,7 @@\n //! In certain situations, rust automatically inserts derefs as necessary: for\n //! example, field accesses `foo.bar` still work when `foo` is actually a\n //! reference to a type with the field `bar`. This is an approximation of the\n-//! logic in rustc (which lives in librustc_typeck/check/autoderef.rs).\n+//! logic in rustc (which lives in rustc_hir_analysis/check/autoderef.rs).\n \n use std::sync::Arc;\n "}, {"sha": "9dbeba4f9f48f900bf0afd09ef9ba2e11522e667", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=6f13f1230168bba424d3707acf8ca07fc0593b37", "patch": "@@ -2,7 +2,7 @@\n //! the type of each expression and pattern.\n //!\n //! For type inference, compare the implementations in rustc (the various\n-//! check_* methods in librustc_typeck/check/mod.rs are a good entry point) and\n+//! check_* methods in rustc_hir_analysis/check/mod.rs are a good entry point) and\n //! IntelliJ-Rust (org.rust.lang.core.types.infer). Our entry point for\n //! inference here is the `infer` function, which infers the types of all\n //! expressions in a given function."}, {"sha": "8df25c83c6eb7d5b35a910881403186861be2a11", "filename": "crates/hir-ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=6f13f1230168bba424d3707acf8ca07fc0593b37", "patch": "@@ -3,7 +3,7 @@\n //! like going from `&Vec<T>` to `&[T]`.\n //!\n //! See <https://doc.rust-lang.org/nomicon/coercions.html> and\n-//! `librustc_typeck/check/coercion.rs`.\n+//! `rustc_hir_analysis/check/coercion.rs`.\n \n use std::{iter, sync::Arc};\n "}, {"sha": "cc21990d5537186fb89d0d4abc92737c0e702838", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f13f1230168bba424d3707acf8ca07fc0593b37/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=6f13f1230168bba424d3707acf8ca07fc0593b37", "patch": "@@ -1,7 +1,7 @@\n //! This module is concerned with finding methods that a given type provides.\n //! For details about how this works in rustc, see the method lookup page in the\n //! [rustc guide](https://rust-lang.github.io/rustc-guide/method-lookup.html)\n-//! and the corresponding code mostly in librustc_typeck/check/method/probe.rs.\n+//! and the corresponding code mostly in rustc_hir_analysis/check/method/probe.rs.\n use std::{iter, ops::ControlFlow, sync::Arc};\n \n use arrayvec::ArrayVec;"}]}