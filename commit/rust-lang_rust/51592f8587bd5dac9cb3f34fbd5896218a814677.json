{"sha": "51592f8587bd5dac9cb3f34fbd5896218a814677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTkyZjg1ODdiZDVkYWM5Y2IzZjM0ZmJkNTg5NjIxOGE4MTQ2Nzc=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-06-23T00:18:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-06-23T00:23:27Z"}, "message": "Fix sync fallout", "tree": {"sha": "35ebb9e0055ca5d7b579adbec485723f826c88b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ebb9e0055ca5d7b579adbec485723f826c88b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51592f8587bd5dac9cb3f34fbd5896218a814677", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl7xS4EACgkQLO/Nsn7Q\nvnksuhAAj82s7niI5UFYqgyx50xyAf1isThh1cvempWzdz+2jGLasJX80PSH3ZW6\nFHWPg3/FWQndk1h9G7NO4XwZlaOcZW4N7TDEhqm0GhoIZF1LKamupJoL7l+pKIm8\nU/lTJprvgtxZRz1t0YXR1RWZZ5De+Flj+ZAMhAUhWOXw0f8sJmvlj88p0MGfeJtT\n7q4GcwRXi63IVUaEdvNmrSd6J7c1goKdG7nrpGnb0p+N6vUlumE+4+UOkZbq3FxY\nP9GqkcoTG315VX6RjUg14W4zrVPJB6JmfJEpfUd9E3gJhHWi0T554gR6JVKt2Lej\ncWLEXElqG3HrM77y3HagWhyBGf9KhL/qq97CahhhbLdIOaABJRXZxMjnQjB/cII/\nCOIk9c2jVbjVnpRrWoXQD8rRkBa8v04dQwecAbPkes3mRDWYd4ZQSFlpIfV5kUZp\nCLQ6P2mD4Id95qltue7BbbNsmjTOLGT8o7QQko/oh/sJULSotz7U9jv3fkE5atBv\nBrfzK8c6VqG86PEGL70+BjssC95BCA5gGlfMaMEn4Nm8CNAjVcCjC8G9HW/7ybGT\nWY2AQtWekAaKhVx2a2JhNX+h0HHI57nuh0b3hjVTlsvrJUCRAsPFBFpNzy9+wOtP\nncME8sgymFT99v3NL0fSa7w5yjL8XmhSd0AoqvF5FsF2PxvFhdI=\n=OAA+\n-----END PGP SIGNATURE-----", "payload": "tree 35ebb9e0055ca5d7b579adbec485723f826c88b5\nparent 018440c11e2fb13d96537807c98f6df9222e2fea\nauthor flip1995 <hello@philkrones.com> 1592871518 +0200\ncommitter flip1995 <hello@philkrones.com> 1592871807 +0200\n\nFix sync fallout\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51592f8587bd5dac9cb3f34fbd5896218a814677", "html_url": "https://github.com/rust-lang/rust/commit/51592f8587bd5dac9cb3f34fbd5896218a814677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51592f8587bd5dac9cb3f34fbd5896218a814677/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018440c11e2fb13d96537807c98f6df9222e2fea", "url": "https://api.github.com/repos/rust-lang/rust/commits/018440c11e2fb13d96537807c98f6df9222e2fea", "html_url": "https://github.com/rust-lang/rust/commit/018440c11e2fb13d96537807c98f6df9222e2fea"}], "stats": {"total": 81, "additions": 27, "deletions": 54}, "files": [{"sha": "77e90eeac49589ecfcdfcb1c9488f61dc54fe832", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_target::abi::LayoutOf;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use crate::utils::span_lint;\n "}, {"sha": "7838e8e8ab774c8d6e456fabb552e42e6faa0cf7", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -211,7 +211,8 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[Imp\n }\n \n fn check_cmp(cx: &LateContext<'_, '_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>, op: &str, compare_to: u32) {\n-    if let (&ExprKind::MethodCall(ref method_path, _, ref args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind) {\n+    if let (&ExprKind::MethodCall(ref method_path, _, ref args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind)\n+    {\n         // check if we are in an is_empty() method\n         if let Some(name) = get_item_name(cx, method) {\n             if name.as_str() == \"is_empty\" {"}, {"sha": "ae1aa66be5cdab1ecff29e6f598ec3851e086ced", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::iter::{once, Iterator};\n use std::mem;\n \n@@ -1580,13 +1580,13 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr<'_>) -> Option<Hi\n     None\n }\n \n-fn check_for_mutation<'a, 'tcx> (\n+fn check_for_mutation<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     body: &Expr<'_>,\n     bound_ids: &[Option<HirId>],\n ) -> (Option<Span>, Option<Span>) {\n     let mut delegate = MutatePairDelegate {\n-        cx: cx,\n+        cx,\n         hir_id_low: bound_ids[0],\n         hir_id_high: bound_ids[1],\n         span_low: None,"}, {"sha": "98de08f79f3d7872a61a3b18c878a7f8b222c40b", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 46, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -1945,16 +1945,12 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n \n     let which = match (&ty.kind, cv) {\n         (&ty::Bool, Constant::Bool(false)) | (&ty::Uint(_), Constant::Int(0)) => Minimum,\n-        (&ty::Int(ity), Constant::Int(i))\n-            if i == unsext(cx.tcx, i128::MIN >> (128 - int_bits(cx.tcx, ity)), ity) =>\n-        {\n+        (&ty::Int(ity), Constant::Int(i)) if i == unsext(cx.tcx, i128::MIN >> (128 - int_bits(cx.tcx, ity)), ity) => {\n             Minimum\n         },\n \n         (&ty::Bool, Constant::Bool(true)) => Maximum,\n-        (&ty::Int(ity), Constant::Int(i))\n-            if i == unsext(cx.tcx, i128::MAX >> (128 - int_bits(cx.tcx, ity)), ity) =>\n-        {\n+        (&ty::Int(ity), Constant::Int(i)) if i == unsext(cx.tcx, i128::MAX >> (128 - int_bits(cx.tcx, ity)), ity) => {\n             Maximum\n         },\n         (&ty::Uint(uty), Constant::Int(i)) if clip(cx.tcx, u128::MAX, uty) == i => Maximum,\n@@ -2083,50 +2079,20 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'_>)\n         }\n         match pre_cast_ty.kind {\n             ty::Int(int_ty) => Some(match int_ty {\n-                IntTy::I8 => (\n-                    FullInt::S(i128::from(i8::MIN)),\n-                    FullInt::S(i128::from(i8::MAX)),\n-                ),\n-                IntTy::I16 => (\n-                    FullInt::S(i128::from(i16::MIN)),\n-                    FullInt::S(i128::from(i16::MAX)),\n-                ),\n-                IntTy::I32 => (\n-                    FullInt::S(i128::from(i32::MIN)),\n-                    FullInt::S(i128::from(i32::MAX)),\n-                ),\n-                IntTy::I64 => (\n-                    FullInt::S(i128::from(i64::MIN)),\n-                    FullInt::S(i128::from(i64::MAX)),\n-                ),\n+                IntTy::I8 => (FullInt::S(i128::from(i8::MIN)), FullInt::S(i128::from(i8::MAX))),\n+                IntTy::I16 => (FullInt::S(i128::from(i16::MIN)), FullInt::S(i128::from(i16::MAX))),\n+                IntTy::I32 => (FullInt::S(i128::from(i32::MIN)), FullInt::S(i128::from(i32::MAX))),\n+                IntTy::I64 => (FullInt::S(i128::from(i64::MIN)), FullInt::S(i128::from(i64::MAX))),\n                 IntTy::I128 => (FullInt::S(i128::MIN), FullInt::S(i128::MAX)),\n-                IntTy::Isize => (\n-                    FullInt::S(isize::MIN as i128),\n-                    FullInt::S(isize::MAX as i128),\n-                ),\n+                IntTy::Isize => (FullInt::S(isize::MIN as i128), FullInt::S(isize::MAX as i128)),\n             }),\n             ty::Uint(uint_ty) => Some(match uint_ty {\n-                UintTy::U8 => (\n-                    FullInt::U(u128::from(u8::MIN)),\n-                    FullInt::U(u128::from(u8::MAX)),\n-                ),\n-                UintTy::U16 => (\n-                    FullInt::U(u128::from(u16::MIN)),\n-                    FullInt::U(u128::from(u16::MAX)),\n-                ),\n-                UintTy::U32 => (\n-                    FullInt::U(u128::from(u32::MIN)),\n-                    FullInt::U(u128::from(u32::MAX)),\n-                ),\n-                UintTy::U64 => (\n-                    FullInt::U(u128::from(u64::MIN)),\n-                    FullInt::U(u128::from(u64::MAX)),\n-                ),\n+                UintTy::U8 => (FullInt::U(u128::from(u8::MIN)), FullInt::U(u128::from(u8::MAX))),\n+                UintTy::U16 => (FullInt::U(u128::from(u16::MIN)), FullInt::U(u128::from(u16::MAX))),\n+                UintTy::U32 => (FullInt::U(u128::from(u32::MIN)), FullInt::U(u128::from(u32::MAX))),\n+                UintTy::U64 => (FullInt::U(u128::from(u64::MIN)), FullInt::U(u128::from(u64::MAX))),\n                 UintTy::U128 => (FullInt::U(u128::MIN), FullInt::U(u128::MAX)),\n-                UintTy::Usize => (\n-                    FullInt::U(usize::MIN as u128),\n-                    FullInt::U(usize::MAX as u128),\n-                ),\n+                UintTy::Usize => (FullInt::U(usize::MIN as u128), FullInt::U(usize::MAX as u128)),\n             }),\n             _ => None,\n         }"}, {"sha": "6ac6a12529c868c13e0c903bcb8b8c6b68660e83", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -95,7 +95,10 @@ fn mirrored_exprs(\n         // The two exprs are method calls.\n         // Check to see that the function is the same and the arguments are mirrored\n         // This is enough because the receiver of the method is listed in the arguments\n-        (ExprKind::MethodCall(left_segment, _, left_args, _), ExprKind::MethodCall(right_segment, _, right_args, _)) => {\n+        (\n+            ExprKind::MethodCall(left_segment, _, left_args, _),\n+            ExprKind::MethodCall(right_segment, _, right_args, _),\n+        ) => {\n             left_segment.ident == right_segment.ident\n                 && left_args\n                     .iter()"}, {"sha": "910b665ccb75ea2fcc1a4682df2e021fd0be9a55", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -251,7 +251,10 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 }\n             },\n             ExprKind::MethodCall(ref _method_name, ref _generics, ref _args, ref _fn_span) => {\n-                println!(\"MethodCall(ref method_name, ref generics, ref args, ref fn_span) = {};\", current);\n+                println!(\n+                    \"MethodCall(ref method_name, ref generics, ref args, ref fn_span) = {};\",\n+                    current\n+                );\n                 println!(\"    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment\");\n             },\n             ExprKind::Tup(ref elements) => {"}, {"sha": "0492878fc272f19a8028fa6ac04a168fd76c6a8b", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51592f8587bd5dac9cb3f34fbd5896218a814677/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=51592f8587bd5dac9cb3f34fbd5896218a814677", "patch": "@@ -8,7 +8,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<HirId>> {"}]}