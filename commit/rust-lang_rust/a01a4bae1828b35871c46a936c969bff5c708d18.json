{"sha": "a01a4bae1828b35871c46a936c969bff5c708d18", "node_id": "C_kwDOAAsO6NoAKGEwMWE0YmFlMTgyOGIzNTg3MWM0NmE5MzZjOTY5YmZmNWM3MDhkMTg", "commit": {"author": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-15T12:14:21Z"}, "committer": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-15T12:30:22Z"}, "message": "fix sample + cosmetics + one more test", "tree": {"sha": "043d0715139df177d93626dee974dc65ee15c55e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043d0715139df177d93626dee974dc65ee15c55e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a01a4bae1828b35871c46a936c969bff5c708d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a01a4bae1828b35871c46a936c969bff5c708d18", "html_url": "https://github.com/rust-lang/rust/commit/a01a4bae1828b35871c46a936c969bff5c708d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a01a4bae1828b35871c46a936c969bff5c708d18/comments", "author": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e16cfbdf42c901476f82a9e8c77620037e76e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e16cfbdf42c901476f82a9e8c77620037e76e92", "html_url": "https://github.com/rust-lang/rust/commit/4e16cfbdf42c901476f82a9e8c77620037e76e92"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "c366832ebbf498ea0bd2d0a2c6e7ecdca7dbfde0", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a01a4bae1828b35871c46a936c969bff5c708d18/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01a4bae1828b35871c46a936c969bff5c708d18/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=a01a4bae1828b35871c46a936c969bff5c708d18", "patch": "@@ -21,7 +21,8 @@ use crate::{\n // enum Action { Move { distance: u32 }, Stop }\n //\n // fn handle(action: Action) {\n-//     match action $0 {\n+//     match action {\n+//         $0\n //     }\n // }\n // ```\n@@ -30,7 +31,7 @@ use crate::{\n // enum Action { Move { distance: u32 }, Stop }\n //\n // fn handle(action: Action) {\n-//     match action  {\n+//     match action {\n //         $0Action::Move { distance } => todo!(),\n //         Action::Stop => todo!(),\n //     }\n@@ -41,7 +42,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     let match_arm_list = match_expr.match_arm_list()?;\n     let target_range : TextRange;\n \n-    if let None = cursor_inside_simple_match_arm_list(&ctx, &match_expr, &match_arm_list) {\n+    if let None = trivial_match_arm_list_at_cursor(&ctx, &match_expr, &match_arm_list) {\n         target_range = TextRange::new(\n             ctx.sema.original_range(match_expr.syntax()).range.start(),\n             ctx.sema.original_range(match_arm_list.syntax()).range.start(),\n@@ -192,12 +193,13 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     )\n }\n \n-fn cursor_inside_simple_match_arm_list(ctx: &AssistContext, match_expr : &MatchExpr, match_arm_list : &MatchArmList) -> Option<()> {\n-    println!(\"---\\n{:#?}\\n{:#?}\\n---\", match_expr, match_arm_list);\n+fn trivial_match_arm_list_at_cursor(ctx: &AssistContext, match_expr : &MatchExpr, match_arm_list : &MatchArmList) -> Option<()> {\n+    // match x { $0 }\n     if match_arm_list.arms().next() == None {\n         return Some(());\n     }\n \n+    // match { _$0 => {...} }\n     let wild_pat = ctx.find_node_at_offset_with_descend::<ast::WildcardPat>()?;\n     let arm = wild_pat.syntax().parent().and_then(ast::MatchArm::cast)?;\n     let arm_match_expr = arm.syntax().ancestors().nth(2).and_then(ast::MatchExpr::cast)?;\n@@ -973,6 +975,26 @@ fn main() {\n         );\n     }\n \n+\n+    #[test]\n+    fn wildcard_inside_expression_not_applicable() {\n+        check_assist_not_applicable(\n+            add_missing_match_arms,\n+            r#\"\n+enum E { X, Y }\n+\n+fn foo(e : E) {\n+    match e {\n+        _ => {\n+            println!(\"1\");$0\n+            println!(\"2\");\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_missing_match_arms_qualifies_path() {\n         check_assist("}]}