{"sha": "51d438e568dc128af47f4ac77ea1416c29b7402c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDQzOGU1NjhkYzEyOGFmNDdmNGFjNzdlYTE0MTZjMjliNzQwMmM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-18T19:34:43Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T18:36:28Z"}, "message": "Incorporate upstream changes to old lint code", "tree": {"sha": "198d1a5563c3282eaaed2ec99227cdc3c5cccc84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198d1a5563c3282eaaed2ec99227cdc3c5cccc84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d438e568dc128af47f4ac77ea1416c29b7402c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d438e568dc128af47f4ac77ea1416c29b7402c", "html_url": "https://github.com/rust-lang/rust/commit/51d438e568dc128af47f4ac77ea1416c29b7402c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d438e568dc128af47f4ac77ea1416c29b7402c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67e6e678de8d449e8a6d00b2e3ab476848959fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67e6e678de8d449e8a6d00b2e3ab476848959fd", "html_url": "https://github.com/rust-lang/rust/commit/e67e6e678de8d449e8a6d00b2e3ab476848959fd"}], "stats": {"total": 64, "additions": 18, "deletions": 46}, "files": [{"sha": "0a1f83fc79de9e973432d081923276ca6656c550", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 18, "deletions": 45, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/51d438e568dc128af47f4ac77ea1416c29b7402c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d438e568dc128af47f4ac77ea1416c29b7402c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=51d438e568dc128af47f4ac77ea1416c29b7402c", "patch": "@@ -45,6 +45,7 @@ use std::u16;\n use std::u32;\n use std::u64;\n use std::u8;\n+use std::gc::Gc;\n use syntax::abi;\n use syntax::ast_map;\n use syntax::attr::AttrMetaMethods;\n@@ -98,8 +99,8 @@ impl LintPass for UnusedCasts {\n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         match e.node {\n             ast::ExprCast(expr, ty) => {\n-                let t_t = ast_ty_to_ty(cx, &infer::new_infer_ctxt(cx.tcx), ty);\n-                if ty::get(ty::expr_ty(cx.tcx, expr)).sty == ty::get(t_t).sty {\n+                let t_t = ast_ty_to_ty(cx, &infer::new_infer_ctxt(cx.tcx), &*ty);\n+                if ty::get(ty::expr_ty(cx.tcx, &*expr)).sty == ty::get(t_t).sty {\n                     cx.span_lint(UNNECESSARY_TYPECAST, ty.span, \"unnecessary type cast\");\n                 }\n             }\n@@ -150,7 +151,7 @@ impl LintPass for TypeLimits {\n                         }\n                     },\n                     _ => {\n-                        let t = ty::expr_ty(cx.tcx, expr);\n+                        let t = ty::expr_ty(cx.tcx, &*expr);\n                         match ty::get(t).sty {\n                             ty::ty_uint(_) => {\n                                 cx.span_lint(UNSIGNED_NEGATE, e.span,\n@@ -170,7 +171,7 @@ impl LintPass for TypeLimits {\n                 self.negated_expr_id = expr.id;\n             },\n             ast::ExprBinary(binop, l, r) => {\n-                if is_comparison(binop) && !check_limits(cx.tcx, binop, l, r) {\n+                if is_comparison(binop) && !check_limits(cx.tcx, binop, &*l, &*r) {\n                     cx.span_lint(TYPE_LIMITS, e.span,\n                                  \"comparison is useless due to type limits\");\n                 }\n@@ -202,6 +203,7 @@ impl LintPass for TypeLimits {\n                         } else { t };\n                         let (min, max) = uint_ty_range(uint_type);\n                         let lit_val: u64 = match lit.node {\n+                            ast::LitByte(_v) => return,  // _v is u8, within range by definition\n                             ast::LitInt(v, _) => v as u64,\n                             ast::LitUint(v, _) => v,\n                             ast::LitIntUnsuffixed(v) => v as u64,\n@@ -350,24 +352,24 @@ impl LintPass for CTypes {\n                         _ => ()\n                     }\n                 }\n-                ast::TyPtr(ref mt) => { check_ty(cx, mt.ty) }\n+                ast::TyPtr(ref mt) => { check_ty(cx, &*mt.ty) }\n                 _ => {}\n             }\n         }\n \n         fn check_foreign_fn(cx: &Context, decl: &ast::FnDecl) {\n             for input in decl.inputs.iter() {\n-                check_ty(cx, input.ty);\n+                check_ty(cx, &*input.ty);\n             }\n-            check_ty(cx, decl.output)\n+            check_ty(cx, &*decl.output)\n         }\n \n         match it.node {\n           ast::ItemForeignMod(ref nmod) if nmod.abi != abi::RustIntrinsic => {\n             for ni in nmod.items.iter() {\n                 match ni.node {\n-                    ast::ForeignItemFn(decl, _) => check_foreign_fn(cx, decl),\n-                    ast::ForeignItemStatic(t, _) => check_ty(cx, t)\n+                    ast::ForeignItemFn(decl, _) => check_foreign_fn(cx, &*decl),\n+                    ast::ForeignItemStatic(t, _) => check_ty(cx, &*t)\n                 }\n             }\n           }\n@@ -397,9 +399,6 @@ impl HeapMemory {\n                     n_box += 1;\n                 }\n                 ty::ty_uniq(_) |\n-                ty::ty_trait(box ty::TyTrait {\n-                    store: ty::UniqTraitStore, ..\n-                }) |\n                 ty::ty_closure(box ty::ClosureTy {\n                     store: ty::UniqTraitStore,\n                     ..\n@@ -523,7 +522,7 @@ impl LintPass for RawPointerDeriving {\n         match item.node {\n             ast::ItemStruct(..) | ast::ItemEnum(..) => {\n                 let mut visitor = RawPtrDerivingVisitor { cx: cx };\n-                visit::walk_item(&mut visitor, item, ());\n+                visit::walk_item(&mut visitor, &*item, ());\n             }\n             _ => {}\n         }\n@@ -547,7 +546,6 @@ impl LintPass for UnusedAttribute {\n \n             // FIXME: #14406 these are processed in trans, which happens after the\n             // lint pass\n-            \"address_insignificant\",\n             \"cold\",\n             \"inline\",\n             \"link\",\n@@ -653,7 +651,7 @@ impl LintPass for UnusedResult {\n             ast::StmtSemi(expr, _) => expr,\n             _ => return\n         };\n-        let t = ty::expr_ty(cx.tcx, expr);\n+        let t = ty::expr_ty(cx.tcx, &*expr);\n         match ty::get(t).sty {\n             ty::ty_nil | ty::ty_bot | ty::ty_bool => return,\n             _ => {}\n@@ -663,7 +661,7 @@ impl LintPass for UnusedResult {\n             _ => {}\n         }\n \n-        let t = ty::expr_ty(cx.tcx, expr);\n+        let t = ty::expr_ty(cx.tcx, &*expr);\n         let mut warned = false;\n         match ty::get(t).sty {\n             ty::ty_struct(did, _) |\n@@ -698,31 +696,6 @@ impl LintPass for UnusedResult {\n     }\n }\n \n-declare_lint!(DEPRECATED_OWNED_VECTOR, Allow,\n-              \"use of a `~[T]` vector\")\n-\n-pub struct DeprecatedOwnedVector;\n-\n-impl LintPass for DeprecatedOwnedVector {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED_OWNED_VECTOR)\n-    }\n-\n-    fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n-        let t = ty::expr_ty(cx.tcx, e);\n-        match ty::get(t).sty {\n-            ty::ty_uniq(t) => match ty::get(t).sty {\n-                ty::ty_vec(_, None) => {\n-                    cx.span_lint(DEPRECATED_OWNED_VECTOR, e.span,\n-                                 \"use of deprecated `~[]` vector; replaced by `std::vec::Vec`\")\n-                }\n-                _ => {}\n-            },\n-            _ => {}\n-        }\n-    }\n-}\n-\n declare_lint!(NON_CAMEL_CASE_TYPES, Warn,\n               \"types, variants and traits should have camel case names\")\n \n@@ -1028,7 +1001,7 @@ impl LintPass for UnnecessaryParens {\n             ast::ExprAssignOp(_, _, value) => (value, \"assigned value\"),\n             _ => return\n         };\n-        self.check_unnecessary_parens_core(cx, value, msg);\n+        self.check_unnecessary_parens_core(cx, &*value, msg);\n     }\n \n     fn check_stmt(&mut self, cx: &Context, s: &ast::Stmt) {\n@@ -1042,7 +1015,7 @@ impl LintPass for UnnecessaryParens {\n             },\n             _ => return\n         };\n-        self.check_unnecessary_parens_core(cx, value, msg);\n+        self.check_unnecessary_parens_core(cx, &*value, msg);\n     }\n }\n \n@@ -1097,12 +1070,12 @@ declare_lint!(UNUSED_MUT, Warn,\n pub struct UnusedMut;\n \n impl UnusedMut {\n-    fn check_unused_mut_pat(&self, cx: &Context, pats: &[@ast::Pat]) {\n+    fn check_unused_mut_pat(&self, cx: &Context, pats: &[Gc<ast::Pat>]) {\n         // collect all mutable pattern and group their NodeIDs by their Identifier to\n         // avoid false warnings in match arms with multiple patterns\n         let mut mutables = HashMap::new();\n         for &p in pats.iter() {\n-            pat_util::pat_bindings(&cx.tcx.def_map, p, |mode, id, _, path| {\n+            pat_util::pat_bindings(&cx.tcx.def_map, &*p, |mode, id, _, path| {\n                 match mode {\n                     ast::BindByValue(ast::MutMutable) => {\n                         if path.segments.len() != 1 {"}, {"sha": "3ba948786d08dd3e46081372279d395e355152a9", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51d438e568dc128af47f4ac77ea1416c29b7402c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d438e568dc128af47f4ac77ea1416c29b7402c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=51d438e568dc128af47f4ac77ea1416c29b7402c", "patch": "@@ -145,7 +145,6 @@ impl LintStore {\n                      UnusedAttribute,\n                      PathStatement,\n                      UnusedResult,\n-                     DeprecatedOwnedVector,\n                      NonCamelCaseTypes,\n                      NonSnakeCaseFunctions,\n                      NonUppercaseStatics,"}]}