{"sha": "498553fc04f6a3fdc53412320f4e913bc53bc267", "node_id": "C_kwDOAAsO6NoAKDQ5ODU1M2ZjMDRmNmEzZmRjNTM0MTIzMjBmNGU5MTNiYzUzYmMyNjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T13:31:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T13:31:53Z"}, "message": "Auto merge of #111235 - loongarch-rs:stabilize-asm, r=Amanieu\n\nStabilize inline asm for LoongArch64\n\nThis PR is used to tracking for stabilize `inline asm` for LoongArch64.\n\n**Status**\n\n- [x] https://github.com/rust-lang/rust/pull/111237\n- [x] https://github.com/rust-lang/rust/pull/111332\n- [ ] https://github.com/rust-lang/reference/pull/1357\n\nAny others I missed?\n\nr? `@Amanieu`", "tree": {"sha": "167344357f320ba7d1191191923eeeb274af79a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167344357f320ba7d1191191923eeeb274af79a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/498553fc04f6a3fdc53412320f4e913bc53bc267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/498553fc04f6a3fdc53412320f4e913bc53bc267", "html_url": "https://github.com/rust-lang/rust/commit/498553fc04f6a3fdc53412320f4e913bc53bc267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/498553fc04f6a3fdc53412320f4e913bc53bc267/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ff5afeb8717c096a4f153896e0c3856a3934ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ff5afeb8717c096a4f153896e0c3856a3934ad", "html_url": "https://github.com/rust-lang/rust/commit/99ff5afeb8717c096a4f153896e0c3856a3934ad"}, {"sha": "46252ef401c4134a125f4623a450a5d37079a7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/46252ef401c4134a125f4623a450a5d37079a7a8", "html_url": "https://github.com/rust-lang/rust/commit/46252ef401c4134a125f4623a450a5d37079a7a8"}], "stats": {"total": 18, "additions": 2, "deletions": 16}, "files": [{"sha": "d350498bc965a7063406067837d9d44988566a0d", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/498553fc04f6a3fdc53412320f4e913bc53bc267/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/498553fc04f6a3fdc53412320f4e913bc53bc267/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=498553fc04f6a3fdc53412320f4e913bc53bc267", "patch": "@@ -44,6 +44,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     | asm::InlineAsmArch::AArch64\n                     | asm::InlineAsmArch::RiscV32\n                     | asm::InlineAsmArch::RiscV64\n+                    | asm::InlineAsmArch::LoongArch64\n             );\n             if !is_stable && !self.tcx.features().asm_experimental_arch {\n                 feature_err("}, {"sha": "c634dc50d6d7d6e857c3395fb68c827de3574ae6", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/498553fc04f6a3fdc53412320f4e913bc53bc267/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/498553fc04f6a3fdc53412320f4e913bc53bc267/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=498553fc04f6a3fdc53412320f4e913bc53bc267", "patch": "@@ -17,7 +17,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n - AVR\n - MSP430\n - M68k\n-- LoongArch\n - s390x\n \n ## Register classes\n@@ -47,8 +46,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg`          | `d[0-7]`, `a[0-7]`                 | `r`                  |\n | M68k         | `reg_data`     | `d[0-7]`                           | `d`                  |\n | M68k         | `reg_addr`     | `a[0-3]`                           | `a`                  |\n-| LoongArch    | `reg`          | `$r1`, `$r[4-20]`, `$r[23,30]`     | `r`                  |\n-| LoongArch    | `freg`         | `$f[0-31]`                         | `f`                  |\n | s390x        | `reg`          | `r[0-10]`, `r[12-14]`              | `r`                  |\n | s390x        | `freg`         | `f[0-15]`                          | `f`                  |\n \n@@ -82,8 +79,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | MSP430       | `reg`                           | None           | `i8`, `i16`                             |\n | M68k         | `reg`, `reg_addr`               | None           | `i16`, `i32`                            |\n | M68k         | `reg_data`                      | None           | `i8`, `i16`, `i32`                      |\n-| LoongArch64  | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n-| LoongArch64  | `freg`                          | None           | `f32`, `f64`                            |\n | s390x        | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`               |\n | s390x        | `freg`                          | None           | `f32`, `f64`                            |\n \n@@ -107,10 +102,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `a5`          | `bp`      |\n | M68k         | `a6`          | `fp`      |\n | M68k         | `a7`          | `sp`, `usp`, `ssp`, `isp` |\n-| LoongArch    | `$r0`         | `zero`    |\n-| LoongArch    | `$r2`         | `tp`      |\n-| LoongArch    | `$r3`         | `sp`      |\n-| LoongArch    | `$r22`        | `fp`      |\n \n > **Notes**:\n > - TI does not mandate a frame pointer for MSP430, but toolchains are allowed\n@@ -121,7 +112,7 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | Architecture | Unsupported register                    | Reason                                                                                                                                                                              |\n | ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n | All          | `sp`, `r15` (s390x)                     | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n-| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch), `r11` (s390x) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n+| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `r11` (s390x) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n | All          | `r19` (Hexagon)                         | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.                                                                                        |\n | MIPS         | `$0` or `$zero`                         | This is a constant zero register which can't be modified.                                                                                                                           |\n | MIPS         | `$1` or `$at`                           | Reserved for assembler.                                                                                                                                                             |\n@@ -132,10 +123,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | AVR          | `r0`, `r1`, `r1r0`                      | Due to an issue in LLVM, the `r0` and `r1` registers cannot be used as inputs or outputs.  If modified, they must be restored to their original values before the end of the block. |\n |MSP430        | `r0`, `r2`, `r3`                        | These are the program counter, status register, and constant generator respectively. Neither the status register nor constant generator can be written to.                          |\n | M68k         | `a4`, `a5`                              | Used internally by LLVM for the base pointer and global base pointer. |\n-| LoongArch    | `$r0` or `$zero`                        | This is a constant zero register which can't be modified.                                                                                                                           |\n-| LoongArch    | `$r2` or `$tp`                          | This is reserved for TLS.                                                                                                                                                           |\n-| LoongArch    | `$r21`                                  | This is reserved by the ABI.                                                                                                                                                        |\n-| LoongArch    | `$r31` or `$s8`                         | This is used internally by LLVM.                                                                                                                                                    |\n \n ## Template modifiers\n \n@@ -150,8 +137,6 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | PowerPC      | `reg`          | None     | `0`            | None          |\n | PowerPC      | `reg_nonzero`  | None     | `3`            | `b`           |\n | PowerPC      | `freg`         | None     | `0`            | None          |\n-| LoongArch    | `reg`          | None     | `$r2`          | None          |\n-| LoongArch    | `freg`         | None     | `$f0`          | None          |\n | s390x        | `reg`          | None     | `%r0`          | None          |\n | s390x        | `freg`         | None     | `%f0`          | None          |\n "}]}