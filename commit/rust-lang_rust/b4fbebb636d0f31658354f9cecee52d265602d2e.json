{"sha": "b4fbebb636d0f31658354f9cecee52d265602d2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmJlYmI2MzZkMGYzMTY1ODM1NGY5Y2VjZWU1MmQyNjU2MDJkMmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-05T10:45:15Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-14T11:36:51Z"}, "message": "rustc_mir: remove outdated `const fn` stability diagnostic.", "tree": {"sha": "60afd15c075dca95f535b9b1c53f8a128c8af94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60afd15c075dca95f535b9b1c53f8a128c8af94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4fbebb636d0f31658354f9cecee52d265602d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4fbebb636d0f31658354f9cecee52d265602d2e", "html_url": "https://github.com/rust-lang/rust/commit/b4fbebb636d0f31658354f9cecee52d265602d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4fbebb636d0f31658354f9cecee52d265602d2e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d1e9790c2d6d8922dc25d03817b93893bfcff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d1e9790c2d6d8922dc25d03817b93893bfcff8", "html_url": "https://github.com/rust-lang/rust/commit/f6d1e9790c2d6d8922dc25d03817b93893bfcff8"}], "stats": {"total": 26, "additions": 4, "deletions": 22}, "files": [{"sha": "44c7327044fdaa0ae1d51aacbe0f299d6c5a72a8", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4fbebb636d0f31658354f9cecee52d265602d2e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4fbebb636d0f31658354f9cecee52d265602d2e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b4fbebb636d0f31658354f9cecee52d265602d2e", "patch": "@@ -21,7 +21,7 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUs\n use rustc::middle::lang_items;\n use rustc::session::config::nightly_options;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -1062,32 +1062,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                                         err.emit();\n                                     }\n                                 } else {\n-                                    // FIXME(#57563): remove this check when const fn stabilizes.\n-                                    let (msg, note) = if let UnstableFeatures::Disallow =\n-                                            self.tcx.sess.opts.unstable_features {\n-                                        (format!(\"calls in {}s are limited to \\\n-                                                tuple structs and tuple variants\",\n-                                                self.mode),\n-                                        Some(\"a limited form of compile-time function \\\n-                                            evaluation is available on a nightly \\\n-                                            compiler via `const fn`\"))\n-                                    } else {\n-                                        (format!(\"calls in {}s are limited \\\n-                                                to constant functions, \\\n-                                                tuple structs and tuple variants\",\n-                                                self.mode),\n-                                        None)\n-                                    };\n                                     let mut err = struct_span_err!(\n                                         self.tcx.sess,\n                                         self.span,\n                                         E0015,\n-                                        \"{}\",\n-                                        msg,\n+                                        \"calls in {}s are limited to constant functions, \\\n+                                         tuple structs and tuple variants\",\n+                                        self.mode,\n                                     );\n-                                    if let Some(note) = note {\n-                                        err.span_note(self.span, note);\n-                                    }\n                                     err.emit();\n                                 }\n                             }"}]}