{"sha": "6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZDdhNmRjMGY1YzRjOGZkNTFkNTdjMGY0Zjc5NWQ1MjQ4MWY5MDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T18:28:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T18:28:24Z"}, "message": "Auto merge of #85156 - GuillaumeGomez:rollup-8u4h34g, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #84465 (rustdoc: Implement `is_primitive` in terms of `primitive_type()`)\n - #85118 (Use an SVG image for clipboard instead of unicode character)\n - #85148 (Fix source code line number display and make it clickable again)\n - #85152 (Adjust target search algorithm for rustlib path)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a22101c2f5f999c09d665a18a2325e2df6d57430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22101c2f5f999c09d665a18a2325e2df6d57430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "html_url": "https://github.com/rust-lang/rust/commit/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266f452118e27e6a3d9d6b6f9d5483890a18345f", "url": "https://api.github.com/repos/rust-lang/rust/commits/266f452118e27e6a3d9d6b6f9d5483890a18345f", "html_url": "https://github.com/rust-lang/rust/commit/266f452118e27e6a3d9d6b6f9d5483890a18345f"}, {"sha": "6ec1de7d4f950c7c0b33bae9858157282416591d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec1de7d4f950c7c0b33bae9858157282416591d", "html_url": "https://github.com/rust-lang/rust/commit/6ec1de7d4f950c7c0b33bae9858157282416591d"}], "stats": {"total": 277, "additions": 173, "deletions": 104}, "files": [{"sha": "30a56badeb52e2fdb1e5d9bc742d77c7c09bcf0b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -1576,7 +1576,7 @@ fn add_rpath_args(\n         let target_triple = sess.opts.target_triple.triple();\n         let mut get_install_prefix_lib_path = || {\n             let install_prefix = option_env!(\"CFG_PREFIX\").expect(\"CFG_PREFIX\");\n-            let tlib = filesearch::relative_target_lib_path(&sess.sysroot, target_triple);\n+            let tlib = rustc_target::target_rustlib_path(&sess.sysroot, target_triple).join(\"lib\");\n             let mut path = PathBuf::from(install_prefix);\n             path.push(&tlib);\n "}, {"sha": "fd29053433e5555910730018003f6e38bddfe54d", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -423,8 +423,7 @@ pub fn get_codegen_sysroot(\n         .iter()\n         .chain(sysroot_candidates.iter())\n         .map(|sysroot| {\n-            let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir).with_file_name(\"codegen-backends\")\n+            filesearch::make_target_lib_path(&sysroot, &target).with_file_name(\"codegen-backends\")\n         })\n         .find(|f| {\n             info!(\"codegen backend candidate: {}\", f.display());"}, {"sha": "6fe6a555f1af81ccf8f5c6b87039af4bf3ce5a65", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 15, "deletions": 53, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -1,6 +1,5 @@\n pub use self::FileMatch::*;\n \n-use std::borrow::Cow;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -91,26 +90,21 @@ impl<'a> FileSearch<'a> {\n \n     // Returns a list of directories where target-specific tool binaries are located.\n     pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n-        let mut p = PathBuf::from(self.sysroot);\n-        p.push(find_libdir(self.sysroot).as_ref());\n-        p.push(RUST_LIB_DIR);\n-        p.push(&self.triple);\n-        p.push(\"bin\");\n+        let rustlib_path = rustc_target::target_rustlib_path(self.sysroot, &self.triple);\n+        let p = std::array::IntoIter::new([\n+            Path::new(&self.sysroot),\n+            Path::new(&rustlib_path),\n+            Path::new(\"bin\"),\n+        ])\n+        .collect::<PathBuf>();\n         if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p] }\n     }\n }\n \n-pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n-    let mut p = PathBuf::from(find_libdir(sysroot).as_ref());\n-    assert!(p.is_relative());\n-    p.push(RUST_LIB_DIR);\n-    p.push(target_triple);\n-    p.push(\"lib\");\n-    p\n-}\n-\n pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n-    sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n+    let rustlib_path = rustc_target::target_rustlib_path(sysroot, target_triple);\n+    std::array::IntoIter::new([sysroot, Path::new(&rustlib_path), Path::new(\"lib\")])\n+        .collect::<PathBuf>()\n }\n \n // This function checks if sysroot is found using env::args().next(), and if it\n@@ -157,11 +151,13 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                     return None;\n                 }\n \n+                // Pop off `bin/rustc`, obtaining the suspected sysroot.\n                 p.pop();\n                 p.pop();\n-                let mut libdir = PathBuf::from(&p);\n-                libdir.push(find_libdir(&p).as_ref());\n-                if libdir.exists() { Some(p) } else { None }\n+                // Look for the target rustlib directory in the suspected sysroot.\n+                let mut rustlib_path = rustc_target::target_rustlib_path(&p, \"dummy\");\n+                rustlib_path.pop(); // pop off the dummy target.\n+                if rustlib_path.exists() { Some(p) } else { None }\n             }\n             None => None,\n         }\n@@ -171,37 +167,3 @@ pub fn get_or_default_sysroot() -> PathBuf {\n     // use env::current_exe() to imply sysroot.\n     from_env_args_next().unwrap_or_else(from_current_exe)\n }\n-\n-// The name of the directory rustc expects libraries to be located.\n-fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n-    // FIXME: This is a quick hack to make the rustc binary able to locate\n-    // Rust libraries in Linux environments where libraries might be installed\n-    // to lib64/lib32. This would be more foolproof by basing the sysroot off\n-    // of the directory where `librustc_driver` is located, rather than\n-    // where the rustc binary is.\n-    // If --libdir is set during configuration to the value other than\n-    // \"lib\" (i.e., non-default), this value is used (see issue #16552).\n-\n-    #[cfg(target_pointer_width = \"64\")]\n-    const PRIMARY_LIB_DIR: &str = \"lib64\";\n-\n-    #[cfg(target_pointer_width = \"32\")]\n-    const PRIMARY_LIB_DIR: &str = \"lib32\";\n-\n-    const SECONDARY_LIB_DIR: &str = \"lib\";\n-\n-    match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n-        None | Some(\"lib\") => {\n-            if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n-                PRIMARY_LIB_DIR.into()\n-            } else {\n-                SECONDARY_LIB_DIR.into()\n-            }\n-        }\n-        Some(libdir) => libdir.into(),\n-    }\n-}\n-\n-// The name of rustc's own place to organize libraries.\n-// Used to be \"rustc\", now the default is \"rustlib\"\n-const RUST_LIB_DIR: &str = \"rustlib\";"}, {"sha": "48ace9b65b6787979655b871b4e63965abc75ef8", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -15,6 +15,8 @@\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n \n+use std::path::{Path, PathBuf};\n+\n #[macro_use]\n extern crate rustc_macros;\n \n@@ -29,3 +31,52 @@ pub mod spec;\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in `rustc_middle`.\n pub trait HashStableContext {}\n+\n+/// The name of rustc's own place to organize libraries.\n+///\n+/// Used to be `rustc`, now the default is `rustlib`.\n+const RUST_LIB_DIR: &str = \"rustlib\";\n+\n+/// Returns a `rustlib` path for this particular target, relative to the provided sysroot.\n+///\n+/// For example: `target_sysroot_path(\"/usr\", \"x86_64-unknown-linux-gnu\")` =>\n+/// `\"lib*/rustlib/x86_64-unknown-linux-gnu\"`.\n+pub fn target_rustlib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n+    let libdir = find_libdir(sysroot);\n+    std::array::IntoIter::new([\n+        Path::new(libdir.as_ref()),\n+        Path::new(RUST_LIB_DIR),\n+        Path::new(target_triple),\n+    ])\n+    .collect::<PathBuf>()\n+}\n+\n+/// The name of the directory rustc expects libraries to be located.\n+fn find_libdir(sysroot: &Path) -> std::borrow::Cow<'static, str> {\n+    // FIXME: This is a quick hack to make the rustc binary able to locate\n+    // Rust libraries in Linux environments where libraries might be installed\n+    // to lib64/lib32. This would be more foolproof by basing the sysroot off\n+    // of the directory where `librustc_driver` is located, rather than\n+    // where the rustc binary is.\n+    // If --libdir is set during configuration to the value other than\n+    // \"lib\" (i.e., non-default), this value is used (see issue #16552).\n+\n+    #[cfg(target_pointer_width = \"64\")]\n+    const PRIMARY_LIB_DIR: &str = \"lib64\";\n+\n+    #[cfg(target_pointer_width = \"32\")]\n+    const PRIMARY_LIB_DIR: &str = \"lib32\";\n+\n+    const SECONDARY_LIB_DIR: &str = \"lib\";\n+\n+    match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n+        None | Some(\"lib\") => {\n+            if sysroot.join(PRIMARY_LIB_DIR).join(RUST_LIB_DIR).exists() {\n+                PRIMARY_LIB_DIR.into()\n+            } else {\n+                SECONDARY_LIB_DIR.into()\n+            }\n+        }\n+        Some(libdir) => libdir.into(),\n+    }\n+}"}, {"sha": "4bffd6e8ddd354a7457e28c5321185b6b96e2db0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -1897,15 +1897,15 @@ impl Target {\n         Ok(base)\n     }\n \n-    /// Search RUST_TARGET_PATH for a JSON file specifying the given target\n-    /// triple. If none is found, look for a file called `target.json` inside\n-    /// the sysroot under the target-triple's `rustlib` directory.\n-    /// Note that it could also just be a bare filename already, so also\n-    /// check for that. If one of the hardcoded targets we know about, just\n-    /// return it directly.\n+    /// Search for a JSON file specifying the given target triple.\n     ///\n-    /// The error string could come from any of the APIs called, including\n-    /// filesystem access and JSON decoding.\n+    /// If none is found in `$RUST_TARGET_PATH`, look for a file called `target.json` inside the\n+    /// sysroot under the target-triple's `rustlib` directory.  Note that it could also just be a\n+    /// bare filename already, so also check for that. If one of the hardcoded targets we know\n+    /// about, just return it directly.\n+    ///\n+    /// The error string could come from any of the APIs called, including filesystem access and\n+    /// JSON decoding.\n     pub fn search(target_triple: &TargetTriple, sysroot: &PathBuf) -> Result<Target, String> {\n         use rustc_serialize::json;\n         use std::env;\n@@ -1942,8 +1942,13 @@ impl Target {\n \n                 // Additionally look in the sysroot under `lib/rustlib/<triple>/target.json`\n                 // as a fallback.\n-                let p =\n-                    sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"target.json\");\n+                let rustlib_path = crate::target_rustlib_path(&sysroot, &target_triple);\n+                let p = std::array::IntoIter::new([\n+                    Path::new(sysroot),\n+                    Path::new(&rustlib_path),\n+                    Path::new(\"target.json\"),\n+                ])\n+                .collect::<PathBuf>();\n                 if p.is_file() {\n                     return load_file(&p);\n                 }"}, {"sha": "bca7a8cfcee0970a62b55b05ecff01c93dd5c501", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -1606,7 +1606,6 @@ impl Type {\n                 }\n             }\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n-            BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n             Never => Some(PrimitiveType::Never),\n             _ => None,\n@@ -1665,13 +1664,7 @@ impl Type {\n     }\n \n     crate fn is_primitive(&self) -> bool {\n-        match self {\n-            Self::Primitive(_) => true,\n-            Self::BorrowedRef { ref type_, .. } | Self::RawPointer(_, ref type_) => {\n-                type_.is_primitive()\n-            }\n-            _ => false,\n-        }\n+        self.primitive_type().is_some()\n     }\n \n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {"}, {"sha": "51392ca1191891a7dc3932f909bb4e5e9efa62eb", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -24,6 +24,7 @@ crate fn render_with_highlighting(\n     playground_button: Option<&str>,\n     tooltip: Option<(Option<Edition>, &str)>,\n     edition: Edition,\n+    extra_content: Option<Buffer>,\n ) {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     if let Some((edition_info, class)) = tooltip {\n@@ -39,13 +40,21 @@ crate fn render_with_highlighting(\n         );\n     }\n \n-    write_header(out, class);\n+    write_header(out, class, extra_content);\n     write_code(out, &src, edition);\n     write_footer(out, playground_button);\n }\n \n-fn write_header(out: &mut Buffer, class: Option<&str>) {\n-    writeln!(out, \"<div class=\\\"example-wrap\\\"><pre class=\\\"rust {}\\\">\", class.unwrap_or_default());\n+fn write_header(out: &mut Buffer, class: Option<&str>, extra_content: Option<Buffer>) {\n+    write!(out, \"<div class=\\\"example-wrap\\\">\");\n+    if let Some(extra) = extra_content {\n+        out.push_buffer(extra);\n+    }\n+    if let Some(class) = class {\n+        writeln!(out, \"<pre class=\\\"rust {}\\\">\", class);\n+    } else {\n+        writeln!(out, \"<pre class=\\\"rust\\\">\");\n+    }\n }\n \n fn write_code(out: &mut Buffer, src: &str, edition: Edition) {"}, {"sha": "99e96fdcf1eb4e91404e7d65b6ba30f91c59f515", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -34,14 +34,20 @@ crate struct Page<'a> {\n     crate static_extra_scripts: &'a [&'a str],\n }\n \n+impl<'a> Page<'a> {\n+    crate fn get_static_root_path(&self) -> &str {\n+        self.static_root_path.unwrap_or(self.root_path)\n+    }\n+}\n+\n crate fn render<T: Print, S: Print>(\n     layout: &Layout,\n     page: &Page<'_>,\n     sidebar: S,\n     t: T,\n     style_files: &[StylePath],\n ) -> String {\n-    let static_root_path = page.static_root_path.unwrap_or(page.root_path);\n+    let static_root_path = page.get_static_root_path();\n     format!(\n         \"<!DOCTYPE html>\\\n <html lang=\\\"en\\\">\\"}, {"sha": "c2b40ab34e2551c1062525c3ce6d7f33c45705c4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -315,6 +315,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n             playground_button.as_deref(),\n             tooltip,\n             edition,\n+            None,\n         );\n         Some(Event::Html(s.into_inner().into()))\n     }"}, {"sha": "4e17dc8d3a7d0121f2b9d8f3be38699c0912807d", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -215,7 +215,7 @@ impl<'tcx> Context<'tcx> {\n                 &self.shared.layout,\n                 &page,\n                 |buf: &mut _| print_sidebar(self, it, buf),\n-                |buf: &mut _| print_item(self, it, buf),\n+                |buf: &mut _| print_item(self, it, buf, &page),\n                 &self.shared.style_files,\n             )\n         } else {"}, {"sha": "7ccc313cc5905ef6c6486f33af86d43f80dd38bb", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -22,9 +22,10 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{print_abi_with_space, print_where_clause, Buffer, PrintWithSpace};\n use crate::html::highlight;\n+use crate::html::layout::Page;\n use crate::html::markdown::MarkdownSummaryLine;\n \n-pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n+pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer, page: &Page<'_>) {\n     debug_assert!(!item.is_stripped());\n     // Write the breadcrumb trail header for the top\n     buf.write_str(\"<h1 class=\\\"fqn\\\"><span class=\\\"in-band\\\">\");\n@@ -74,7 +75,16 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer)\n         }\n     }\n     write!(buf, \"<a class=\\\"{}\\\" href=\\\"\\\">{}</a>\", item.type_(), item.name.as_ref().unwrap());\n-    write!(buf, \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\">\u2398</button>\");\n+    write!(\n+        buf,\n+        \"<button id=\\\"copy-path\\\" onclick=\\\"copy_path(this)\\\">\\\n+            <img src=\\\"{static_root_path}clipboard{suffix}.svg\\\" \\\n+                width=\\\"19\\\" height=\\\"18\\\" \\\n+                alt=\\\"Copy item import\\\">\\\n+         </button>\",\n+        static_root_path = page.get_static_root_path(),\n+        suffix = page.resource_suffix,\n+    );\n \n     buf.write_str(\"</span>\"); // in-band\n     buf.write_str(\"<span class=\\\"out-of-band\\\">\");\n@@ -1016,6 +1026,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             None,\n             None,\n             it.span(cx.tcx()).inner().edition(),\n+            None,\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "d0518cb6862fe3987e4015712bf510e1a6c8a397", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -207,6 +207,7 @@ pub(super) fn write_shared(\n     }\n     write_toolchain(\"brush.svg\", static_files::BRUSH_SVG)?;\n     write_toolchain(\"wheel.svg\", static_files::WHEEL_SVG)?;\n+    write_toolchain(\"clipboard.svg\", static_files::CLIPBOARD_SVG)?;\n     write_toolchain(\"down-arrow.svg\", static_files::DOWN_ARROW_SVG)?;\n \n     let mut themes: Vec<&String> = themes.iter().collect();"}, {"sha": "57c33f94918d71fd097ddf80609814ca0e406504", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -169,16 +169,17 @@ where\n /// adding line numbers to the left-hand side.\n fn print_src(buf: &mut Buffer, s: &str, edition: Edition) {\n     let lines = s.lines().count();\n+    let mut line_numbers = Buffer::empty_from(buf);\n     let mut cols = 0;\n     let mut tmp = lines;\n     while tmp > 0 {\n         cols += 1;\n         tmp /= 10;\n     }\n-    buf.write_str(\"<pre class=\\\"line-numbers\\\">\");\n+    line_numbers.write_str(\"<pre class=\\\"line-numbers\\\">\");\n     for i in 1..=lines {\n-        writeln!(buf, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i, cols);\n+        writeln!(line_numbers, \"<span id=\\\"{0}\\\">{0:1$}</span>\", i, cols);\n     }\n-    buf.write_str(\"</pre>\");\n-    highlight::render_with_highlighting(s, buf, None, None, None, edition);\n+    line_numbers.write_str(\"</pre>\");\n+    highlight::render_with_highlighting(s, buf, None, None, None, edition, Some(line_numbers));\n }"}, {"sha": "8adbd99630488f9a325a99362aa59c9b235ac737", "filename": "src/librustdoc/html/static/clipboard.svg", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fclipboard.svg", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fclipboard.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fclipboard.svg?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -0,0 +1 @@\n+<svg width=\"24\" height=\"25\" viewBox=\"0 0 24 25\" xmlns=\"http://www.w3.org/2000/svg\" aria-label=\"Copy to clipboard\"><path d=\"M18 20h2v3c0 1-1 2-2 2H2c-.998 0-2-1-2-2V5c0-.911.755-1.667 1.667-1.667h5A3.323 3.323 0 0110 0a3.323 3.323 0 013.333 3.333h5C19.245 3.333 20 4.09 20 5v8.333h-2V9H2v14h16v-3zM3 7h14c0-.911-.793-1.667-1.75-1.667H13.5c-.957 0-1.75-.755-1.75-1.666C11.75 2.755 10.957 2 10 2s-1.75.755-1.75 1.667c0 .911-.793 1.666-1.75 1.666H4.75C3.793 5.333 3 6.09 3 7z\"/><path d=\"M4 19h6v2H4zM12 11H4v2h8zM4 17h4v-2H4zM15 15v-3l-4.5 4.5L15 21v-3l8.027-.032L23 15z\"/></svg>"}, {"sha": "dc65e14ab37b83cee273fb8b41710b66e1da45f6", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -1252,15 +1252,31 @@ function hideThemeButtonState() {\n         document.execCommand('copy');\n         document.body.removeChild(el);\n \n-        but.textContent = '\u2713';\n+        // There is always one children, but multiple childNodes.\n+        but.children[0].style.display = 'none';\n+\n+        var tmp;\n+        if (but.childNodes.length < 2) {\n+            tmp = document.createTextNode('\u2713');\n+            but.appendChild(tmp);\n+        } else {\n+            onEachLazy(but.childNodes, function(e) {\n+                if (e.nodeType === Node.TEXT_NODE) {\n+                    tmp = e;\n+                    return true;\n+                }\n+            });\n+            tmp.textContent = '\u2713';\n+        }\n \n         if (reset_button_timeout !== null) {\n             window.clearTimeout(reset_button_timeout);\n         }\n \n         function reset_button() {\n-            but.textContent = '\u2398';\n+            tmp.textContent = '';\n             reset_button_timeout = null;\n+            but.children[0].style.display = \"\";\n         }\n \n         reset_button_timeout = window.setTimeout(reset_button, 1000);"}, {"sha": "aaa2525644f117fa2318e26f5fb4d1c09c39c36c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -206,7 +206,6 @@ li {\n \tmax-width: none;\n \toverflow: visible;\n \tmargin-left: 0px;\n-\tmin-width: 70em;\n }\n \n nav.sub {\n@@ -357,7 +356,7 @@ nav.sub {\n \tpadding-left: 0;\n }\n \n-.rustdoc:not(.source) .example-wrap {\n+.rustdoc .example-wrap {\n \tdisplay: inline-flex;\n \tmargin-bottom: 10px;\n }\n@@ -370,8 +369,6 @@ nav.sub {\n .example-wrap > pre.line-number {\n \toverflow: initial;\n \tborder: 1px solid;\n-\tborder-top-left-radius: 5px;\n-\tborder-bottom-left-radius: 5px;\n \tpadding: 13px 8px;\n \ttext-align: right;\n }\n@@ -381,7 +378,7 @@ nav.sub {\n \toverflow-x: auto;\n }\n \n-.rustdoc:not(.source) .example-wrap > pre {\n+.rustdoc .example-wrap > pre {\n \tmargin: 0;\n }\n \n@@ -395,15 +392,14 @@ nav.sub {\n \ttable-layout: fixed;\n }\n \n-.content pre.line-numbers {\n-\tfloat: left;\n-\tborder: none;\n+.content > .example-wrap pre.line-numbers {\n \tposition: relative;\n-\n \t-webkit-user-select: none;\n \t-moz-user-select: none;\n \t-ms-user-select: none;\n \tuser-select: none;\n+\tborder-top-left-radius: 5px;\n+\tborder-bottom-left-radius: 5px;\n }\n .line-numbers span {\n \tcursor: pointer;\n@@ -1321,11 +1317,12 @@ h4 > .notable-traits {\n }\n \n #copy-path {\n-\theight: 30px;\n-\tfont-size: 18px;\n \tmargin-left: 10px;\n-\tpadding: 0 6px;\n-\twidth: 28px;\n+\tpadding: 0;\n+\tpadding-left: 2px;\n+}\n+#copy-path> img {\n+\tmargin-bottom: 2px;\n }\n \n #theme-choices {"}, {"sha": "aafb7f6300ea476aee1b7bc098401e68cd75eb18", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -53,7 +53,7 @@ span code {\n .docblock code, .docblock-short code {\n \tbackground-color: #191f26;\n }\n-pre {\n+pre, .rustdoc.source .example-wrap {\n \tcolor: #e6e1cf;\n \tbackground-color: #191f26;\n }\n@@ -509,7 +509,7 @@ kbd {\n \tcolor: #fff;\n }\n \n-#theme-picker > img, #settings-menu > img {\n+#theme-picker > img, #settings-menu > img, #copy-path > img {\n \tfilter: invert(100);\n }\n "}, {"sha": "715605d7b3785cfa0ea4dd962f40168915afb086", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -26,7 +26,7 @@ h4:not(.method):not(.type):not(.tymethod) {\n .docblock code, .docblock-short code {\n \tbackground-color: #2A2A2A;\n }\n-pre {\n+pre, .rustdoc.source .example-wrap {\n \tbackground-color: #2A2A2A;\n }\n "}, {"sha": "60ed8898793875504b60ac54d027699f55c7473d", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -28,7 +28,7 @@ h4:not(.method):not(.type):not(.tymethod) {\n .docblock code, .docblock-short code {\n \tbackground-color: #F5F5F5;\n }\n-pre {\n+pre, .rustdoc.source .example-wrap {\n \tbackground-color: #F5F5F5;\n }\n "}, {"sha": "1abb1f7294a18f9eb04898cee963e22f6074003d", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -41,6 +41,9 @@ crate static BRUSH_SVG: &[u8] = include_bytes!(\"static/brush.svg\");\n /// The file contents of `wheel.svg`, the icon used for the settings button.\n crate static WHEEL_SVG: &[u8] = include_bytes!(\"static/wheel.svg\");\n \n+/// The file contents of `clipboard.svg`, the icon used for the \"copy path\" button.\n+crate static CLIPBOARD_SVG: &[u8] = include_bytes!(\"static/clipboard.svg\");\n+\n /// The file contents of `down-arrow.svg`, the icon used for the crate choice combobox.\n crate static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/down-arrow.svg\");\n "}, {"sha": "f11c41e8bd552eb870377696b5abe25b5669ebaa", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=6fd7a6dc0f5c4c8fd51d57c0f4f795d52481f904", "patch": "@@ -0,0 +1,13 @@\n+goto: file://|DOC_PATH|/../src/test_docs/lib.rs.html\n+// Check that we can click on the line number.\n+click: (40, 224) // This is the position of the span for line 4.\n+// Unfortunately, \"#4\" isn't a valid query selector, so we have to go around that limitation\n+// by instead getting the nth span.\n+assert: (\".line-numbers > span:nth-child(4)\", \"class\", \"line-highlighted\")\n+// We now check that the good spans are highlighted\n+goto: file://|DOC_PATH|/../src/test_docs/lib.rs.html#4-6\n+assert-false: (\".line-numbers > span:nth-child(3)\", \"class\", \"line-highlighted\")\n+assert: (\".line-numbers > span:nth-child(4)\", \"class\", \"line-highlighted\")\n+assert: (\".line-numbers > span:nth-child(5)\", \"class\", \"line-highlighted\")\n+assert: (\".line-numbers > span:nth-child(6)\", \"class\", \"line-highlighted\")\n+assert-false: (\".line-numbers > span:nth-child(7)\", \"class\", \"line-highlighted\")"}]}