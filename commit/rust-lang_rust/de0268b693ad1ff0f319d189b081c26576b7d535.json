{"sha": "de0268b693ad1ff0f319d189b081c26576b7d535", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDI2OGI2OTNhZDFmZjBmMzE5ZDE4OWIwODFjMjY1NzZiN2Q1MzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-27T02:08:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-27T02:09:12Z"}, "message": "librustc: Fix translation of cross-crate inline or generic methods with explicit self. rs=blocking-snapshot", "tree": {"sha": "94b6cd0f669900767a99aeb709ee32289d945a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b6cd0f669900767a99aeb709ee32289d945a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0268b693ad1ff0f319d189b081c26576b7d535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0268b693ad1ff0f319d189b081c26576b7d535", "html_url": "https://github.com/rust-lang/rust/commit/de0268b693ad1ff0f319d189b081c26576b7d535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0268b693ad1ff0f319d189b081c26576b7d535/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917ee7e5b1fef1916e382b237b11b4df7ce0e97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/917ee7e5b1fef1916e382b237b11b4df7ce0e97d", "html_url": "https://github.com/rust-lang/rust/commit/917ee7e5b1fef1916e382b237b11b4df7ce0e97d"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "ce1d92242b4f4c3064448e626ffaa777c98b237f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=de0268b693ad1ff0f319d189b081c26576b7d535", "patch": "@@ -1644,6 +1644,7 @@ fn trans_fn(ccx: @crate_ctxt,\n     let do_time = ccx.sess.trans_stats();\n     let start = if do_time { time::get_time() }\n                 else { {sec: 0i64, nsec: 0i32} };\n+    debug!(\"trans_fn(ty_self=%?)\", ty_self);\n     let _icx = ccx.insn_ctxt(\"trans_fn\");\n     ccx.stats.n_fns += 1;\n     trans_closure(ccx, path, decl, body, llfndecl, ty_self,"}, {"sha": "2ad6ad4d8c475a710e31f7eb510074d1d39c9aad", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=de0268b693ad1ff0f319d189b081c26576b7d535", "patch": "@@ -2,8 +2,8 @@ use common::*;\n use syntax::ast;\n use syntax::ast_util::local_def;\n use syntax::ast_map::{path, path_mod, path_name};\n-use base::{trans_item, get_item_val, self_arg, trans_fn,\n-              impl_self, get_insn_ctxt};\n+use base::{trans_item, get_item_val, self_arg, trans_fn, impl_owned_self,\n+           impl_self, get_insn_ctxt};\n \n // `translate` will be true if this function is allowed to translate the\n // item and false otherwise. Currently, this parameter is set to false when\n@@ -66,15 +66,29 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id,\n           csearch::found(ast::ii_method(impl_did, mth)) => {\n             ccx.stats.n_inlines += 1;\n             ccx.external.insert(fn_id, Some(mth.id));\n-            let {bounds: impl_bnds, region_param: _, ty: impl_ty} =\n+            let {bounds: impl_bnds, region_param: _, ty: _} =\n                 ty::lookup_item_type(ccx.tcx, impl_did);\n             if translate && (*impl_bnds).len() + mth.tps.len() == 0u {\n                 let llfn = get_item_val(ccx, mth.id);\n                 let path = vec::append(\n                     ty::item_path(ccx.tcx, impl_did),\n                     ~[path_name(mth.ident)]);\n-                trans_fn(ccx, path, mth.decl, mth.body,\n-                         llfn, impl_self(impl_ty), None, mth.id,\n+                let self_ty = ty::node_id_to_type(ccx.tcx, mth.self_id);\n+                debug!(\"calling inline trans_fn with self_ty %s\",\n+                       ty_to_str(ccx.tcx, self_ty));\n+                let self_kind;\n+                match mth.self_ty.node {\n+                    ast::sty_value => self_kind = impl_owned_self(self_ty),\n+                    _ => self_kind = impl_self(self_ty),\n+                }\n+                trans_fn(ccx,\n+                         path,\n+                         mth.decl,\n+                         mth.body,\n+                         llfn,\n+                         self_kind,\n+                         None,\n+                         mth.id,\n                          Some(impl_did));\n             }\n             local_def(mth.id)"}, {"sha": "616a193a9b43e5564c324edff7888f01edc5af93", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=de0268b693ad1ff0f319d189b081c26576b7d535", "patch": "@@ -98,6 +98,12 @@ fn trans_method(ccx: @crate_ctxt,\n                 ty::subst_tps(ccx.tcx, *tys, None, self_ty)\n             }\n         };\n+        debug!(\"calling trans_fn with base_self_ty %s, self_ty %s\",\n+               match base_self_ty {\n+                    None => ~\"(none)\",\n+                    Some(x) => ty_to_str(ccx.tcx, x),\n+               },\n+               ty_to_str(ccx.tcx, self_ty));\n         match method.self_ty.node {\n           ast::sty_value => {\n             impl_owned_self(self_ty)"}, {"sha": "780ff5f662af985d3697c5a4a3fe23405c0e0150", "filename": "src/test/auxiliary/explicit_self_xcrate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs?ref=de0268b693ad1ff0f319d189b081c26576b7d535", "patch": "@@ -0,0 +1,17 @@\n+pub trait Foo {\n+    #[inline(always)]\n+    fn f(&self);\n+}\n+\n+pub struct Bar {\n+    x: ~str\n+}\n+\n+impl Bar : Foo {\n+    #[inline(always)]\n+    fn f(&self) {\n+        io::println((*self).x);\n+    }\n+}\n+\n+"}, {"sha": "a1a2c58cf6bc943cbfa9e9f45f27883ab9b744a8", "filename": "src/test/run-pass/explicit_self_xcrate_exe.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0268b693ad1ff0f319d189b081c26576b7d535/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs?ref=de0268b693ad1ff0f319d189b081c26576b7d535", "patch": "@@ -0,0 +1,11 @@\n+// xfail-fast\n+// aux-build:explicit_self_xcrate.rs\n+\n+extern mod explicit_self_xcrate;\n+use explicit_self_xcrate::{Foo, Bar};\n+\n+fn main() {\n+    let x = Bar { x: ~\"hello\" };\n+    x.f();\n+}\n+"}]}