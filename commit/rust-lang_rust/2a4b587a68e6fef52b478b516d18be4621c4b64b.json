{"sha": "2a4b587a68e6fef52b478b516d18be4621c4b64b", "node_id": "C_kwDOAAsO6NoAKDJhNGI1ODdhNjhlNmZlZjUyYjQ3OGI1MTZkMThiZTQ2MjFjNGI2NGI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T12:10:49Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "ast_lowering: use derive more\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "762ffb52d39d2750582067105eaa3285d4e8c858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762ffb52d39d2750582067105eaa3285d4e8c858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a4b587a68e6fef52b478b516d18be4621c4b64b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4b587a68e6fef52b478b516d18be4621c4b64b", "html_url": "https://github.com/rust-lang/rust/commit/2a4b587a68e6fef52b478b516d18be4621c4b64b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a4b587a68e6fef52b478b516d18be4621c4b64b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feeeb11d89d4f379085d5ee1374b3660e46815e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/feeeb11d89d4f379085d5ee1374b3660e46815e3", "html_url": "https://github.com/rust-lang/rust/commit/feeeb11d89d4f379085d5ee1374b3660e46815e3"}], "stats": {"total": 59, "additions": 18, "deletions": 41}, "files": [{"sha": "17ca1aa7fe1702dc108d993b873353f59fc23d5c", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 18, "deletions": 41, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2a4b587a68e6fef52b478b516d18be4621c4b64b/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a4b587a68e6fef52b478b516d18be4621c4b64b/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=2a4b587a68e6fef52b478b516d18be4621c4b64b", "patch": "@@ -1,7 +1,4 @@\n-use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay,\n-    SubdiagnosticMessage,\n-};\n+use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -15,25 +12,15 @@ pub struct GenericTypeWithParentheses {\n     pub sub: Option<UseAngleBrackets>,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n+#[multipart_suggestion(ast_lowering::use_angle_brackets, applicability = \"maybe-incorrect\")]\n pub struct UseAngleBrackets {\n+    #[suggestion_part(code = \"<\")]\n     pub open_param: Span,\n+    #[suggestion_part(code = \">\")]\n     pub close_param: Span,\n }\n \n-impl AddToDiagnostic for UseAngleBrackets {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        diag.multipart_suggestion(\n-            fluent::ast_lowering::use_angle_brackets,\n-            vec![(self.open_param, String::from(\"<\")), (self.close_param, String::from(\">\"))],\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n #[note]\n@@ -68,30 +55,20 @@ pub struct AssocTyParentheses {\n     pub sub: AssocTyParenthesesSub,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n pub enum AssocTyParenthesesSub {\n-    Empty { parentheses_span: Span },\n-    NotEmpty { open_param: Span, close_param: Span },\n-}\n-\n-impl AddToDiagnostic for AssocTyParenthesesSub {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            Self::Empty { parentheses_span } => diag.multipart_suggestion(\n-                fluent::ast_lowering::remove_parentheses,\n-                vec![(parentheses_span, String::new())],\n-                Applicability::MaybeIncorrect,\n-            ),\n-            Self::NotEmpty { open_param, close_param } => diag.multipart_suggestion(\n-                fluent::ast_lowering::use_angle_brackets,\n-                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n-                Applicability::MaybeIncorrect,\n-            ),\n-        };\n-    }\n+    #[multipart_suggestion(ast_lowering::remove_parentheses)]\n+    Empty {\n+        #[suggestion_part(code = \"\")]\n+        parentheses_span: Span,\n+    },\n+    #[multipart_suggestion(ast_lowering::use_angle_brackets)]\n+    NotEmpty {\n+        #[suggestion_part(code = \"<\")]\n+        open_param: Span,\n+        #[suggestion_part(code = \">\")]\n+        close_param: Span,\n+    },\n }\n \n #[derive(Diagnostic)]"}]}