{"sha": "21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjVjMWQ1MWU5ZmNmMjZlY2E1YTFjY2M4ZGZhZWU1MjQwZjc1MjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-08T22:20:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-08T22:20:35Z"}, "message": "Rollup merge of #61660 - petrochenkov:nocusta, r=Centril\n\nMinimize use of `#![feature(custom_attribute)]`\n\nSome preparations before resurrecting https://github.com/rust-lang/rust/pull/57921.", "tree": {"sha": "b6a64d9a639c695e131be663ff9ca613e1da8fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a64d9a639c695e131be663ff9ca613e1da8fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc/DSzCRBK7hj4Ov3rIwAAdHIIAKSl+QvdOzSg3+BSwV7JGzT4\nAC//JKMpVvmVPMMg4bT9ukRXA3Ib72JSuMLykdWpY/FjelwggRmfEYJi7NihY/I2\nNbCdGh16eAKIAeJF2/N8npeBGibLRA+gG6TJlo74asoMkuz1BFJ1t1xMktOEuUxd\ngUJbMoNMRJ3YUswhbV0VE3CzsnrPur/GWPe/FJSZtGDeIeNLC6LTwn4YhAKvds95\n+7uTD5Khs44XimndPjNAqKX5ICJTkRnOWDSa/M4sgDI4eVW7MQzClo0fwSBTwStX\nDgWNYs6aZBSs0FEPcnchNxBip2rf2fo77roxg5m2JT1UJzyFeSLA+9L00H5Fjpk=\n=g6OS\n-----END PGP SIGNATURE-----\n", "payload": "tree b6a64d9a639c695e131be663ff9ca613e1da8fdf\nparent 2410b4de7c425b1160a4368bc944d081d6e48a70\nparent ee189ae028ce4ff620630686432f44b0ea706181\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560032435 +0200\ncommitter GitHub <noreply@github.com> 1560032435 +0200\n\nRollup merge of #61660 - petrochenkov:nocusta, r=Centril\n\nMinimize use of `#![feature(custom_attribute)]`\n\nSome preparations before resurrecting https://github.com/rust-lang/rust/pull/57921.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "html_url": "https://github.com/rust-lang/rust/commit/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2410b4de7c425b1160a4368bc944d081d6e48a70", "url": "https://api.github.com/repos/rust-lang/rust/commits/2410b4de7c425b1160a4368bc944d081d6e48a70", "html_url": "https://github.com/rust-lang/rust/commit/2410b4de7c425b1160a4368bc944d081d6e48a70"}, {"sha": "ee189ae028ce4ff620630686432f44b0ea706181", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee189ae028ce4ff620630686432f44b0ea706181", "html_url": "https://github.com/rust-lang/rust/commit/ee189ae028ce4ff620630686432f44b0ea706181"}], "stats": {"total": 1377, "additions": 656, "deletions": 721}, "files": [{"sha": "6d4aa024c75b4ffa1ad23055e0f0af4fca25b400", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -728,19 +728,17 @@ This lint detects attributes that were not used by the compiler. Some\n example code that triggers this lint:\n \n ```rust\n-#![feature(custom_attribute)]\n-\n-#![mutable_doc]\n+#![macro_export]\n ```\n \n This will produce:\n \n ```text\n warning: unused attribute\n- --> src/main.rs:4:1\n+ --> src/main.rs:1:1\n   |\n-4 | #![mutable_doc]\n-  | ^^^^^^^^^^^^^^^\n+1 | #![macro_export]\n+  | ^^^^^^^^^^^^^^^^\n   |\n ```\n "}, {"sha": "755feb849620357dda2d109220b5b5bf2e7536ff", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -15,7 +15,8 @@ extern \"Rust\" {\n     // them from the `#[global_allocator]` attribute if there is one, or uses the\n     // default implementations in libstd (`__rdl_alloc` etc in `src/libstd/alloc.rs`)\n     // otherwise.\n-    #[allocator]\n+    #[cfg_attr(bootstrap, allocator)]\n+    #[cfg_attr(not(bootstrap), rustc_allocator)]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n     #[rustc_allocator_nounwind]"}, {"sha": "c530ac24275c2bb5f85b7431a28f43d009805bd3", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -79,7 +79,7 @@\n #![feature(coerce_unsized)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n+#![cfg_attr(bootstrap, feature(custom_attribute))]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]"}, {"sha": "030f4f1d12cc824a734b17a32e384ed9ad742efb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -75,7 +75,6 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n-#![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n #![feature(extern_types)]"}, {"sha": "27ee664aa5f580ed7dc178c040caf80419fd11cf", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -2574,7 +2574,7 @@ bitflags! {\n         /// `#[cold]`: a hint to LLVM that this function, when called, is never on\n         /// the hot path.\n         const COLD                      = 1 << 0;\n-        /// `#[allocator]`: a hint to LLVM that the pointer returned from this\n+        /// `#[rustc_allocator]`: a hint to LLVM that the pointer returned from this\n         /// function is never null.\n         const ALLOCATOR                 = 1 << 1;\n         /// `#[unwind]`: an indicator that this function may unwind despite what"}, {"sha": "8391f02fc69ec07bcf3a62d7f779ad40504de64f", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -10,7 +10,6 @@\n #![feature(box_syntax)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n-#![feature(custom_attribute)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![allow(unused_attributes)]"}, {"sha": "97de0d823b32229833ee340e465ea930433f4b40", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -3,7 +3,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n #![feature(libc)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "38d1719e7763ea46d116681878e9733c1b2321f9", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -8,7 +8,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(custom_attribute)]\n #![feature(never_type)]\n #![feature(nll)]\n #![allow(unused_attributes)]"}, {"sha": "cc3180c783bdf9c22296cbed3b7181fc36c076a0", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(custom_attribute)]\n #![allow(unused_attributes)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]"}, {"sha": "a695a90f2ae640a93347aa6f1ba66fcbe4a1ea3f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,5 +1,4 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n-#![feature(custom_attribute)]\n #![feature(nll)]\n #![deny(rust_2018_idioms)]\n #![deny(internal)]"}, {"sha": "f738f90b31eb6320a47357939ef8bcbfe82edf19", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -2445,7 +2445,7 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n     for attr in attrs.iter() {\n         if attr.check_name(sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n-        } else if attr.check_name(sym::allocator) {\n+        } else if attr.check_name(sym::rustc_allocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n         } else if attr.check_name(sym::unwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::UNWIND;"}, {"sha": "7119fd13fbbfb0ba2c223d08a989edb270210147", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1331,6 +1331,16 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n+    (sym::rustc_allocator, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n+    (sym::rustc_dummy, Normal, template!(Word /* doesn't matter*/), Gated(Stability::Unstable,\n+                                         sym::rustc_attrs,\n+                                         \"used by the test suite\",\n+                                         cfg_fn!(rustc_attrs))),\n+\n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     (\n         sym::doc,\n@@ -1957,12 +1967,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n \n         match attr_info {\n-            Some(&(name, _, template, _)) => self.check_builtin_attribute(\n-                attr,\n-                name,\n-                template\n-            ),\n-            None => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n+            // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n+            Some(&(name, _, template, _)) if name != sym::rustc_dummy =>\n+                self.check_builtin_attribute(attr, name, template),\n+            _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n                 if token == token::Eq {\n                     // All key-value attributes are restricted to meta-item syntax.\n                     attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();"}, {"sha": "8f5595968a73820e40145664052838dd00e105a7", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -11,7 +11,6 @@\n \n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n-#![feature(custom_attribute)]\n #![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]"}, {"sha": "302b3c75263cf687c32a56660d1cb8c667e7f3ac", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -513,6 +513,7 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n+        rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n@@ -526,6 +527,7 @@ symbols! {\n         rustc_diagnostic_macros,\n         rustc_dirty,\n         rustc_doc_only_macro,\n+        rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,"}, {"sha": "3b5ac7baf20bd29b3c0d6213ee86045d4b9fa3cb", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -38,9 +38,6 @@\n #![deny(rust_2018_idioms)]\n \n #![cfg_attr(windows, feature(libc))]\n-// Handle rustfmt skips\n-#![feature(custom_attribute)]\n-#![allow(unused_attributes)]\n \n use std::io::prelude::*;\n use std::io::{self, Stdout, Stderr};"}, {"sha": "bd121ef24adae1db555cffc70af3c327d564c2b0", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -2,7 +2,7 @@\n // ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n pub struct S {\n   _field: [i32; 8],\n@@ -146,7 +146,7 @@ pub fn enum_id_2(x: Option<u8>) -> Option<u8> {\n \n // CHECK: noalias i8* @allocator()\n #[no_mangle]\n-#[allocator]\n+#[rustc_allocator]\n pub fn allocator() -> *const i8 {\n   std::ptr::null()\n }"}, {"sha": "0a745e7d34fc1bcab326efa5a9dc39a9ef0e4b76", "filename": "src/test/pretty/attr-fn-inner.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,15 +1,16 @@\n-// pp-exact\n // Testing that both the inner item and next outer item are\n // preserved, and that the first outer item parsed in main is not\n // accidentally carried over to each inner function\n \n-#![feature(custom_attribute)]\n+// pp-exact\n+\n+#![feature(rustc_attrs)]\n \n fn main() {\n-    #![inner_attr]\n-    #[outer_attr]\n+    #![rustc_dummy]\n+    #[rustc_dummy]\n     fn f() { }\n \n-    #[outer_attr]\n+    #[rustc_dummy]\n     fn g() { }\n }"}, {"sha": "44d2c5db3e668e67fad55215387a9710a4aeb250", "filename": "src/test/pretty/attr-literals.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fpretty%2Fattr-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fpretty%2Fattr-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-literals.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,13 +1,14 @@\n-// pp-exact\n // Tests literals in attributes.\n \n-#![feature(custom_attribute)]\n+// pp-exact\n+\n+#![feature(rustc_attrs)]\n \n fn main() {\n-    #![hello(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n-    #[align = 8]\n+    #![rustc_dummy(\"hi\", 1, 2, 1.012, pi = 3.14, bye, name(\"John\"))]\n+    #[rustc_dummy = 8]\n     fn f() { }\n \n-    #[vector(1, 2, 3)]\n+    #[rustc_dummy(1, 2, 3)]\n     fn g() { }\n }"}, {"sha": "d81485b555fa6c502a699f52e2ca5308d0d46be4", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 134, "deletions": 145, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,84 +1,84 @@\n // pp-exact\n \n-#![feature(custom_attribute)]\n #![feature(box_syntax)]\n+#![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n \n fn main() { }\n \n fn _0() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     foo();\n }\n \n fn _1() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     unsafe {\n         // code\n     }\n }\n \n fn _2() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     { foo(); }\n \n     {\n-        #![attr]\n+        #![rustc_dummy]\n \n         foo()\n     }\n }\n \n fn _3() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     match () { _ => { } }\n }\n \n fn _4() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     match () {\n-        #![attr]\n+        #![rustc_dummy]\n         _ => (),\n     }\n \n     let _ =\n-        #[attr] match () {\n-                    #![attr]\n-                    () => (),\n-                };\n+        #[rustc_dummy] match () {\n+                           #![rustc_dummy]\n+                           () => (),\n+                       };\n }\n \n fn _5() {\n \n-    #[attr]\n+    #[rustc_dummy]\n     let x = 1;\n \n-    let x = #[attr] 1;\n+    let x = #[rustc_dummy] 1;\n \n     let y = ();\n     let z = ();\n \n-    foo3(x, #[attr] y, z);\n+    foo3(x, #[rustc_dummy] y, z);\n \n-    qux(3 + #[attr] 2);\n+    qux(3 + #[rustc_dummy] 2);\n }\n \n fn _6() {\n \n-    #[attr]\n-    [#![attr] 1, 2, 3];\n+    #[rustc_dummy]\n+    [#![rustc_dummy] 1, 2, 3];\n \n-    let _ = #[attr] [#![attr] 1, 2, 3];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 1, 2, 3];\n \n-    #[attr]\n-    [#![attr] 1; 4];\n+    #[rustc_dummy]\n+    [#![rustc_dummy] 1; 4];\n \n-    let _ = #[attr] [#![attr] 1; 4];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 1; 4];\n }\n \n struct Foo {\n@@ -89,184 +89,173 @@ struct Bar(());\n \n fn _7() {\n \n-    #[attr]\n-    Foo{#![attr] data: (),};\n+    #[rustc_dummy]\n+    Foo{#![rustc_dummy] data: (),};\n \n-    let _ = #[attr] Foo{#![attr] data: (),};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};\n }\n \n fn _8() {\n \n-    #[attr]\n-    (#![attr] );\n+    #[rustc_dummy]\n+    (#![rustc_dummy] );\n \n-    #[attr]\n-    (#![attr] 0);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0);\n \n-    #[attr]\n-    (#![attr] 0,);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0,);\n \n-    #[attr]\n-    (#![attr] 0, 1);\n+    #[rustc_dummy]\n+    (#![rustc_dummy] 0, 1);\n }\n \n fn _9() {\n     macro_rules! stmt_mac((  ) => { let _ = (  ) ; });\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!();\n \n-    /*\n-    // pre existing pp bug: delimiter styles gets lost:\n-\n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!{ };\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac![];\n \n-    #[attr]\n-    stmt_mac!{ } // pre-existing pp bug: compiler ICEs with a None unwrap\n-    */\n+    #[rustc_dummy]\n+    stmt_mac!{ }\n \n     let _ = ();\n }\n \n macro_rules! expr_mac((  ) => { (  ) });\n \n fn _10() {\n-\n-    let _ = #[attr] expr_mac!();\n-\n-    /*\n-    // pre existing pp bug: delimiter styles gets lost:\n-    let _ = #[attr] expr_mac![];\n-    let _ = #[attr] expr_mac!{};\n-    */\n+    let _ = #[rustc_dummy] expr_mac!();\n+    let _ = #[rustc_dummy] expr_mac![];\n+    let _ = #[rustc_dummy] expr_mac!{ };\n }\n \n fn _11() {\n-    let _ = #[attr] box 0;\n-    let _: [(); 0] = #[attr] [#![attr] ];\n-    let _ = #[attr] [#![attr] 0, 0];\n-    let _ = #[attr] [#![attr] 0; 0];\n-    let _ = #[attr] foo();\n-    let _ = #[attr] 1i32.clone();\n-    let _ = #[attr] (#![attr] );\n-    let _ = #[attr] (#![attr] 0);\n-    let _ = #[attr] (#![attr] 0,);\n-    let _ = #[attr] (#![attr] 0, 0);\n-    let _ = #[attr] 0 + #[attr] 0;\n-    let _ = #[attr] !0;\n-    let _ = #[attr] -0i32;\n-    let _ = #[attr] false;\n-    let _ = #[attr] 'c';\n-    let _ = #[attr] 0;\n-    let _ = #[attr] 0 as usize;\n+    let _ = #[rustc_dummy] box 0;\n+    let _: [(); 0] = #[rustc_dummy] [#![rustc_dummy] ];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 0, 0];\n+    let _ = #[rustc_dummy] [#![rustc_dummy] 0; 0];\n+    let _ = #[rustc_dummy] foo();\n+    let _ = #[rustc_dummy] 1i32.clone();\n+    let _ = #[rustc_dummy] (#![rustc_dummy] );\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0);\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0,);\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0, 0);\n+    let _ = #[rustc_dummy] 0 + #[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] !0;\n+    let _ = #[rustc_dummy] -0i32;\n+    let _ = #[rustc_dummy] false;\n+    let _ = #[rustc_dummy] 'c';\n+    let _ = #[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] 0 as usize;\n     let _ =\n-        #[attr] while false {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] while false {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] while let None = Some(()) {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] while let None = Some(()) {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] for _ in 0..0 {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] for _ in 0..0 {\n+                           #![rustc_dummy]\n+                       };\n     // FIXME: pp bug, two spaces after the loop\n     let _ =\n-        #[attr] loop  {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] loop  {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] match false {\n-                    #![attr]\n-                    _ => (),\n-                };\n-    let _ = #[attr] || #[attr] ();\n-    let _ = #[attr] move || #[attr] ();\n+        #[rustc_dummy] match false {\n+                           #![rustc_dummy]\n+                           _ => (),\n+                       };\n+    let _ = #[rustc_dummy] || #[rustc_dummy] ();\n+    let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ =\n-        #[attr] ||\n-                    {\n-                        #![attr]\n-                        #[attr]\n-                        ()\n-                    };\n+        #[rustc_dummy] ||\n+                           {\n+                               #![rustc_dummy]\n+                               #[rustc_dummy]\n+                               ()\n+                           };\n     let _ =\n-        #[attr] move ||\n-                    {\n-                        #![attr]\n-                        #[attr]\n-                        ()\n-                    };\n+        #[rustc_dummy] move ||\n+                           {\n+                               #![rustc_dummy]\n+                               #[rustc_dummy]\n+                               ()\n+                           };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                       };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                           let _ = ();\n+                       };\n     let _ =\n-        #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                    ()\n-                };\n+        #[rustc_dummy] {\n+                           #![rustc_dummy]\n+                           let _ = ();\n+                           ()\n+                       };\n     let mut x = 0;\n-    let _ = #[attr] x = 15;\n-    let _ = #[attr] x += 15;\n+    let _ = #[rustc_dummy] x = 15;\n+    let _ = #[rustc_dummy] x += 15;\n     let s = Foo{data: (),};\n-    let _ = #[attr] s.data;\n-    let _ = (#[attr] s).data;\n+    let _ = #[rustc_dummy] s.data;\n+    let _ = (#[rustc_dummy] s).data;\n     let t = Bar(());\n-    let _ = #[attr] t.0;\n-    let _ = (#[attr] t).0;\n+    let _ = #[rustc_dummy] t.0;\n+    let _ = (#[rustc_dummy] t).0;\n     let v = vec!(0);\n-    let _ = #[attr] v[0];\n-    let _ = (#[attr] v)[0];\n-    let _ = #[attr] 0..#[attr] 0;\n-    let _ = #[attr] 0..;\n-    let _ = #[attr] (0..0);\n-    let _ = #[attr] (0..);\n-    let _ = #[attr] (..0);\n-    let _ = #[attr] (..);\n-    let _: fn(&u32) -> u32 = #[attr] std::clone::Clone::clone;\n-    let _ = #[attr] &0;\n-    let _ = #[attr] &mut 0;\n-    let _ = #[attr] &#[attr] 0;\n-    let _ = #[attr] &mut #[attr] 0;\n+    let _ = #[rustc_dummy] v[0];\n+    let _ = (#[rustc_dummy] v)[0];\n+    let _ = #[rustc_dummy] 0..#[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] 0..;\n+    let _ = #[rustc_dummy] (0..0);\n+    let _ = #[rustc_dummy] (0..);\n+    let _ = #[rustc_dummy] (..0);\n+    let _ = #[rustc_dummy] (..);\n+    let _: fn(&u32) -> u32 = #[rustc_dummy] std::clone::Clone::clone;\n+    let _ = #[rustc_dummy] &0;\n+    let _ = #[rustc_dummy] &mut 0;\n+    let _ = #[rustc_dummy] &#[rustc_dummy] 0;\n+    let _ = #[rustc_dummy] &mut #[rustc_dummy] 0;\n     // FIXME: pp bug, extra space after keyword?\n-    while false { let _ = #[attr] continue ; }\n-    while true { let _ = #[attr] break ; }\n-    || #[attr] return;\n-    let _ = #[attr] expr_mac!();\n-    /* FIXME: pp bug, losing delimiter styles\n-    let _ = #[attr] expr_mac![];\n-    let _ = #[attr] expr_mac!{};\n-    */\n-    let _ = #[attr] Foo{#![attr] data: (),};\n-    let _ = #[attr] Foo{#![attr] ..s};\n-    let _ = #[attr] Foo{#![attr] data: (), ..s};\n-    let _ = #[attr] (#![attr] 0);\n+    while false { let _ = #[rustc_dummy] continue ; }\n+    while true { let _ = #[rustc_dummy] break ; }\n+    || #[rustc_dummy] return;\n+    let _ = #[rustc_dummy] expr_mac!();\n+    let _ = #[rustc_dummy] expr_mac![];\n+    let _ = #[rustc_dummy] expr_mac!{ };\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (),};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] ..s};\n+    let _ = #[rustc_dummy] Foo{#![rustc_dummy] data: (), ..s};\n+    let _ = #[rustc_dummy] (#![rustc_dummy] 0);\n }\n \n fn _12() {\n-    #[attr]\n+    #[rustc_dummy]\n     let _ = 0;\n \n-    #[attr]\n+    #[rustc_dummy]\n     0;\n \n-    #[attr]\n+    #[rustc_dummy]\n     expr_mac!();\n \n-    #[attr]\n+    #[rustc_dummy]\n     {\n-        #![attr]\n+        #![rustc_dummy]\n     }\n }\n "}, {"sha": "14b4189684f9c317f055be035a21ec353c47ee15", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,11 +0,0 @@\n-#![allow(unused_attributes)]\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(custom_attribute, test)]\n-\n-#[foo = \"bar\"]\n-extern crate test;\n-\n-pub fn main() {\n-}"}, {"sha": "6fc1e35d47ac511ac5440152f6f65728372da2e6", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,13 +0,0 @@\n-#![allow(unused_attributes)]\n-\n-// pretty-expanded FIXME #23616\n-\n-#![feature(custom_attribute, test)]\n-\n-mod m {\n-    #[foo = \"bar\"]\n-    extern crate test;\n-}\n-\n-pub fn main() {\n-}"}, {"sha": "223a434dbb9e7e976a566a26678f3d9125af3f70", "filename": "src/test/run-pass/attr-mix-new.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-mix-new.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,14 +0,0 @@\n-#![allow(unused_attributes)]\n-#![allow(unknown_lints)]\n-\n-// pretty-expanded FIXME #23616\n-\n-#![allow(unused_attribute)]\n-#![feature(custom_attribute)]\n-\n-#[foo(bar)]\n-mod foo {\n-  #![feature(globs)]\n-}\n-\n-pub fn main() {}"}, {"sha": "bedf3020c8be0fd8363f1f7d1bd47f9e78a80093", "filename": "src/test/run-pass/auxiliary/allocator-dummy.rs", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fallocator-dummy.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,59 +0,0 @@\n-// no-prefer-dynamic\n-\n-#![feature(allocator, core_intrinsics, panic_unwind)]\n-#![allocator]\n-#![crate_type = \"rlib\"]\n-#![no_std]\n-\n-extern crate unwind;\n-\n-pub static mut HITS: usize = 0;\n-\n-type size_t = usize;\n-\n-extern {\n-    fn malloc(size: usize) -> *mut u8;\n-    fn free(ptr: *mut u8);\n-    fn calloc(size: usize, amt: usize) -> *mut u8;\n-    fn realloc(ptr: *mut u8, size: usize) -> *mut u8;\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n-    unsafe {\n-        HITS += 1;\n-        malloc(size as size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_allocate_zeroed(size: usize, _align: usize) -> *mut u8 {\n-    unsafe { calloc(size as size_t, 1) as *mut u8 }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n-    unsafe {\n-        HITS += 1;\n-        free(ptr as *mut _)\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate(ptr: *mut u8, old_size: usize, size: usize,\n-                                align: usize) -> *mut u8 {\n-    unsafe {\n-        realloc(ptr as *mut _, size as size_t) as *mut u8\n-    }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_reallocate_inplace(ptr: *mut u8, old_size: usize,\n-                                        size: usize, align: usize) -> usize {\n-    unsafe { core::intrinsics::abort() }\n-}\n-\n-#[no_mangle]\n-pub extern fn __rust_usable_size(size: usize, align: usize) -> usize {\n-    unsafe { core::intrinsics::abort() }\n-}"}, {"sha": "361f8a1d3406ec142914ba2ccb147bf736938361", "filename": "src/test/run-pass/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-recursion-foreign.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -6,7 +6,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate check_static_recursion_foreign_helper;\n extern crate libc;"}, {"sha": "d382e8b719713dacd439b9e95abeb3a4b492b5dd", "filename": "src/test/run-pass/macros/macro-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fmacro-attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(custom_attribute)]\n \n macro_rules! compiles_fine {\n     (#[$at:meta]) => {"}, {"sha": "c7d8b3b1403ab774c2f761f2300e08e64cfc8cf2", "filename": "src/test/run-pass/methods/method-attributes.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethods%2Fmethod-attributes.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,31 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n-// pp-exact - Make sure we print all the attributes\n-// pretty-expanded FIXME #23616\n-\n-#![feature(custom_attribute)]\n-\n-#[frobable]\n-trait frobable {\n-    #[frob_attr]\n-    fn frob(&self);\n-    #[defrob_attr]\n-    fn defrob(&self);\n-}\n-\n-#[int_frobable]\n-impl frobable for isize {\n-    #[frob_attr1]\n-    fn frob(&self) {\n-        #![frob_attr2]\n-    }\n-\n-    #[defrob_attr1]\n-    fn defrob(&self) {\n-        #![defrob_attr2]\n-    }\n-}\n-\n-pub fn main() { }"}, {"sha": "11ea29ece8a021bd4e7a9681b01e29cf4bc024b0", "filename": "src/test/run-pass/structs-enums/class-attributes-1.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-1.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,21 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n-// pp-exact - Make sure we actually print the attributes\n-#![feature(custom_attribute)]\n-\n-struct cat {\n-    name: String,\n-}\n-\n-impl Drop for cat {\n-    #[cat_dropper]\n-    fn drop(&mut self) { println!(\"{} landed on hir feet\" , self . name); }\n-}\n-\n-\n-#[cat_maker]\n-fn cat(name: String) -> cat { cat{name: name,} }\n-\n-pub fn main() { let _kitty = cat(\"Spotty\".to_string()); }"}, {"sha": "d6cf63e62fea2d6da5b93a5d4d864d12e352086a", "filename": "src/test/run-pass/structs-enums/class-attributes-2.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fclass-attributes-2.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,33 +0,0 @@\n-// run-pass\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-\n-#![feature(custom_attribute)]\n-\n-struct cat {\n-  name: String,\n-}\n-\n-impl Drop for cat {\n-    #[cat_dropper]\n-    /**\n-       Actually, cats don't always land on their feet when you drop them.\n-    */\n-    fn drop(&mut self) {\n-        println!(\"{} landed on hir feet\", self.name);\n-    }\n-}\n-\n-#[cat_maker]\n-/**\n-Maybe it should technically be a kitten_maker.\n-*/\n-fn cat(name: String) -> cat {\n-    cat {\n-        name: name\n-    }\n-}\n-\n-pub fn main() {\n-  let _kitty = cat(\"Spotty\".to_string());\n-}"}, {"sha": "c301492b9e21a52bae33c540475f00f0aba2921f", "filename": "src/test/ui/attr-eq-token-tree.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,4 +1,2 @@\n-#![feature(custom_attribute)]\n-\n #[my_attr = !] //~ ERROR unexpected token: `!`\n fn main() {}"}, {"sha": "bb37c2e0cc4734b1d499bbc4416a2e5cc9a1365d", "filename": "src/test/ui/attr-eq-token-tree.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `!`\n-  --> $DIR/attr-eq-token-tree.rs:3:13\n+  --> $DIR/attr-eq-token-tree.rs:1:13\n    |\n LL | #[my_attr = !]\n    |             ^"}, {"sha": "fc040bd1a5d10a01dc81aa4ac19103d224335d7b", "filename": "src/test/ui/attributes/attr-before-view-item.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,10 @@\n+// compile-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+#![feature(test)]\n+\n+#[rustc_dummy = \"bar\"]\n+extern crate test;\n+\n+fn main() {}"}, {"sha": "c7fad3802e9d6d2ee778b8bc4961121faafc49b3", "filename": "src/test/ui/attributes/attr-before-view-item2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-before-view-item2.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+#![feature(test)]\n+\n+mod m {\n+    #[rustc_dummy = \"bar\"]\n+    extern crate test;\n+}\n+\n+fn main() {}"}, {"sha": "d9cb551096092f6298d79ea32c6a42afd97c4180", "filename": "src/test/ui/attributes/attr-mix-new.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattr-mix-new.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_dummy(bar)]\n+mod foo {\n+  #![feature(globs)]\n+}\n+\n+fn main() {}"}, {"sha": "ca5fdd9da859bae78bde7f472c409a9b310ec95e", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.rs"}, {"sha": "55e7a9877846f271a79ac78561a15a13a9823d9c", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-1.stderr"}, {"sha": "c795612acf08c13a59b92d967a4d332905182ec9", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.rs"}, {"sha": "acd0ae3678a7c275d10f09d059b3cc1b30eeb670", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-2.stderr"}, {"sha": "3cfc70b41850a07ed2836bb10bdfa04b5f51fe6c", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.rs"}, {"sha": "b9ca00974677b4a835f0654e8e381a639db79c0e", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-3.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "previous_filename": "src/test/ui/attrs-with-no-formal-in-generics/attrs-with-no-formal-in-generics-3.stderr"}, {"sha": "7808367f2c10f9e3b77e09d47e1c8f4bd5cabb9c", "filename": "src/test/ui/attributes/class-attributes-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-1.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,19 @@\n+// compile-pass\n+// pp-exact - Make sure we actually print the attributes\n+\n+#![feature(rustc_attrs)]\n+\n+struct Cat {\n+    name: String,\n+}\n+\n+impl Drop for Cat {\n+    #[rustc_dummy]\n+    fn drop(&mut self) { println!(\"{} landed on hir feet\" , self . name); }\n+}\n+\n+\n+#[rustc_dummy]\n+fn cat(name: String) -> Cat { Cat{name: name,} }\n+\n+fn main() { let _kitty = cat(\"Spotty\".to_string()); }"}, {"sha": "348c70f35c328c8d359c37e883de70ca951e65cc", "filename": "src/test/ui/attributes/class-attributes-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fclass-attributes-2.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,31 @@\n+// compile-pass\n+\n+#![feature(rustc_attrs)]\n+\n+struct Cat {\n+    name: String,\n+}\n+\n+impl Drop for Cat {\n+    #[rustc_dummy]\n+    /**\n+       Actually, cats don't always land on their feet when you drop them.\n+    */\n+    fn drop(&mut self) {\n+        println!(\"{} landed on hir feet\", self.name);\n+    }\n+}\n+\n+#[rustc_dummy]\n+/**\n+Maybe it should technically be a kitten_maker.\n+*/\n+fn cat(name: String) -> Cat {\n+    Cat {\n+        name: name\n+    }\n+}\n+\n+fn main() {\n+    let _kitty = cat(\"Spotty\".to_string());\n+}"}, {"sha": "72c9a35dc07f049650835e28fe3eba078f7d5e08", "filename": "src/test/ui/attributes/item-attributes.rs", "status": "renamed", "additions": 57, "deletions": 60, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fitem-attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,80 +1,77 @@\n-#![allow(non_camel_case_types)]\n-#![allow(non_upper_case_globals)]\n-#![allow(unused_attributes)]\n-#![allow(dead_code)]\n-#![allow(unknown_lints)]\n // These are attributes of the implicit crate. Really this just needs to parse\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-#![feature(custom_attribute)]\n-#![allow(unused_attribute)]\n-#![attr1 = \"val\"]\n-#![attr2 = \"val\"]\n-#![attr3]\n-#![attr4(attr5)]\n+// compile-pass\n+\n+#![feature(rustc_attrs)]\n+\n+#![rustc_dummy = \"val\"]\n+#![rustc_dummy = \"val\"]\n+#![rustc_dummy]\n+#![rustc_dummy(attr5)]\n \n #![crate_id=\"foobar#0.1\"]\n \n // These are attributes of the following mod\n-#[attr1 = \"val\"]\n-#[attr2 = \"val\"]\n+#[rustc_dummy = \"val\"]\n+#[rustc_dummy = \"val\"]\n mod test_first_item_in_file_mod {}\n \n mod test_single_attr_outer {\n-    #[attr = \"val\"]\n-    pub static x: isize = 10;\n+    #[rustc_dummy = \"val\"]\n+    pub static X: isize = 10;\n \n-    #[attr = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub fn f() { }\n \n-    #[attr = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         extern {}\n     }\n }\n \n mod test_multi_attr_outer {\n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    pub static x: isize = 10;\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    pub static X: isize = 10;\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub fn f() { }\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n     pub mod mod1 {}\n \n     pub mod rustrt {\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         extern {}\n     }\n \n-    #[attr1 = \"val\"]\n-    #[attr2 = \"val\"]\n-    struct t {x: isize}\n+    #[rustc_dummy = \"val\"]\n+    #[rustc_dummy = \"val\"]\n+    struct T {x: isize}\n }\n \n mod test_stmt_single_attr_outer {\n     pub fn f() {\n-        #[attr = \"val\"]\n-        static x: isize = 10;\n+        #[rustc_dummy = \"val\"]\n+        static X: isize = 10;\n \n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n \n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         mod mod1 {\n         }\n \n         mod rustrt {\n-            #[attr = \"val\"]\n+            #[rustc_dummy = \"val\"]\n             extern {\n             }\n         }\n@@ -84,22 +81,22 @@ mod test_stmt_single_attr_outer {\n mod test_stmt_multi_attr_outer {\n     pub fn f() {\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n-        static x: isize = 10;\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        static X: isize = 10;\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n \n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         mod mod1 {\n         }\n \n         mod rustrt {\n-            #[attr1 = \"val\"]\n-            #[attr2 = \"val\"]\n+            #[rustc_dummy = \"val\"]\n+            #[rustc_dummy = \"val\"]\n             extern {\n             }\n         }\n@@ -109,54 +106,54 @@ mod test_stmt_multi_attr_outer {\n mod test_attr_inner {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr = \"val\"]\n+        #![rustc_dummy = \"val\"]\n     }\n }\n \n mod test_attr_inner_then_outer {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr = \"val\"]\n+        #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n     }\n }\n \n mod test_attr_inner_then_outer_multi {\n     pub mod m {\n         // This is an attribute of mod m\n-        #![attr1 = \"val\"]\n-        #![attr2 = \"val\"]\n+        #![rustc_dummy = \"val\"]\n+        #![rustc_dummy = \"val\"]\n         // This is an attribute of fn f\n-        #[attr1 = \"val\"]\n-        #[attr2 = \"val\"]\n+        #[rustc_dummy = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn f() { }\n     }\n }\n \n mod test_distinguish_syntax_ext {\n     pub fn f() {\n         format!(\"test{}\", \"s\");\n-        #[attr = \"val\"]\n+        #[rustc_dummy = \"val\"]\n         fn g() { }\n     }\n }\n \n mod test_other_forms {\n-    #[attr]\n-    #[attr(word)]\n-    #[attr(attr(word))]\n-    #[attr(key1 = \"val\", key2 = \"val\", attr)]\n+    #[rustc_dummy]\n+    #[rustc_dummy(word)]\n+    #[rustc_dummy(attr(word))]\n+    #[rustc_dummy(key1 = \"val\", key2 = \"val\", attr)]\n     pub fn f() { }\n }\n \n mod test_foreign_items {\n     pub mod rustrt {\n         extern {\n-            #![attr]\n+            #![rustc_dummy]\n \n-            #[attr]\n+            #[rustc_dummy]\n             fn rust_get_test_int() -> u32;\n         }\n     }\n@@ -178,7 +175,7 @@ mod test_foreign_items {\n }*/\n \n fn test_fn_inner() {\n-    #![inner_fn_attr]\n+    #![rustc_dummy]\n }\n \n-pub fn main() { }\n+fn main() {}", "previous_filename": "src/test/run-pass/item-attributes.rs"}, {"sha": "2d608acc71f71dd1c2d34816ca0a446d21d7bcf5", "filename": "src/test/ui/attributes/method-attributes.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmethod-attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,28 @@\n+// compile-pass\n+// pp-exact - Make sure we print all the attributes\n+// pretty-expanded FIXME #23616\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_dummy]\n+trait Frobable {\n+    #[rustc_dummy]\n+    fn frob(&self);\n+    #[rustc_dummy]\n+    fn defrob(&self);\n+}\n+\n+#[rustc_dummy]\n+impl Frobable for isize {\n+    #[rustc_dummy]\n+    fn frob(&self) {\n+        #![rustc_dummy]\n+    }\n+\n+    #[rustc_dummy]\n+    fn defrob(&self) {\n+        #![rustc_dummy]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "89e2ad2669cbe0e6d8fe3d9b52966a0cb1fe4203", "filename": "src/test/ui/attributes/obsolete-attr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,7 @@\n+// Obsolete attributes fall back to feature gated custom attributes.\n+\n+#[ab_isize=\"stdcall\"] extern {} //~ ERROR attribute `ab_isize` is currently unknown\n+\n+#[fixed_stack_segment] fn f() {} //~ ERROR attribute `fixed_stack_segment` is currently unknown\n+\n+fn main() {}"}, {"sha": "2ed7f87935fca7872c6bfc6c2ad43f9b91194ee7", "filename": "src/test/ui/attributes/obsolete-attr.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fobsolete-attr.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: The attribute `fixed_stack_segment` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/obsolete-attr.rs:5:3\n+   |\n+LL | #[fixed_stack_segment] fn f() {}\n+   |   ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `ab_isize` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/obsolete-attr.rs:3:3\n+   |\n+LL | #[ab_isize=\"stdcall\"] extern {}\n+   |   ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e2a4f3226d5626c10f303474381e0d34c975b4d9", "filename": "src/test/ui/attributes/unknown-attr.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,9 @@\n+// Unknown attributes fall back to feature gated custom attributes.\n+\n+#![feature(custom_inner_attributes)]\n+\n+#![mutable_doc] //~ ERROR attribute `mutable_doc` is currently unknown\n+\n+#[dance] mod a {} //~ ERROR attribute `dance` is currently unknown\n+\n+#[dance] fn main() {} //~ ERROR attribute `dance` is currently unknown"}, {"sha": "d0ac58108fc8d7e994c5ecfb60b58c07e7d739a6", "filename": "src/test/ui/attributes/unknown-attr.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Funknown-attr.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -0,0 +1,30 @@\n+error[E0658]: The attribute `mutable_doc` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/unknown-attr.rs:5:4\n+   |\n+LL | #![mutable_doc]\n+   |    ^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `dance` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/unknown-attr.rs:7:3\n+   |\n+LL | #[dance] mod a {}\n+   |   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `dance` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/unknown-attr.rs:9:3\n+   |\n+LL | #[dance] fn main() {}\n+   |   ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a910340f4a06d01e7bca58bd59bc4d4f5765e2af", "filename": "src/test/ui/attributes/variant-attributes.rs", "status": "renamed", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fvariant-attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,38 +1,37 @@\n-#![allow(unused_attributes)]\n-#![allow(non_camel_case_types)]\n-#![allow(dead_code)]\n+// compile-pass\n // pp-exact - Make sure we actually print the attributes\n // pretty-expanded FIXME #23616\n \n-#![feature(custom_attribute)]\n+#![allow(non_camel_case_types)]\n+#![feature(rustc_attrs)]\n \n enum crew_of_enterprise_d {\n \n-    #[captain]\n+    #[rustc_dummy]\n     jean_luc_picard,\n \n-    #[oldcommander]\n+    #[rustc_dummy]\n     william_t_riker,\n \n-    #[chief_medical_officer]\n+    #[rustc_dummy]\n     beverly_crusher,\n \n-    #[ships_councellor]\n+    #[rustc_dummy]\n     deanna_troi,\n \n-    #[lieutenant_oldcommander]\n+    #[rustc_dummy]\n     data,\n \n-    #[chief_of_security]\n+    #[rustc_dummy]\n     worf,\n \n-    #[chief_engineer]\n+    #[rustc_dummy]\n     geordi_la_forge,\n }\n \n fn boldly_go(_crew_member: crew_of_enterprise_d, _where: String) { }\n \n-pub fn main() {\n+fn main() {\n     boldly_go(crew_of_enterprise_d::worf,\n               \"where no one has gone before\".to_string());\n }", "previous_filename": "src/test/run-pass/variant-attributes.rs"}, {"sha": "2434921390245d13248e18dea565fc31ab5bc82f", "filename": "src/test/ui/custom-attribute-multisegment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,7 +1,5 @@\n // Unresolved multi-segment attributes are not treated as custom.\n \n-#![feature(custom_attribute)]\n-\n mod existent {}\n \n #[existent::nonexistent] //~ ERROR failed to resolve: could not find `nonexistent` in `existent`"}, {"sha": "57eca211ed10eb5e34f04338c24259c79fd4d40e", "filename": "src/test/ui/custom-attribute-multisegment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-attribute-multisegment.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,5 +1,5 @@\n error[E0433]: failed to resolve: could not find `nonexistent` in `existent`\n-  --> $DIR/custom-attribute-multisegment.rs:7:13\n+  --> $DIR/custom-attribute-multisegment.rs:5:13\n    |\n LL | #[existent::nonexistent]\n    |             ^^^^^^^^^^^ could not find `nonexistent` in `existent`"}, {"sha": "c98fd7ffea8bee3c461dbe87915a956a257b5724", "filename": "src/test/ui/expanded-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fexpanded-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpanded-cfg.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,6 +1,6 @@\n // skip-codegen\n // compile-pass\n-#![feature(custom_attribute)]\n+\n macro_rules! mac {\n     {} => {\n         #[cfg(attr)]"}, {"sha": "2424a1c92cd644a80981c1f7f204f7a379babf85", "filename": "src/test/ui/issues/issue-24434.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24434.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,8 +1,7 @@\n // compile-pass\n-#![allow(unused_attributes)]\n // compile-flags:--cfg set1\n \n-#![cfg_attr(set1, feature(custom_attribute))]\n+#![cfg_attr(set1, feature(rustc_attrs))]\n+#![rustc_dummy]\n \n-#![foobar]\n fn main() {}"}, {"sha": "149948b5a6da23ffd665c12a7e7dd384b9a60b42", "filename": "src/test/ui/lint/lint-obsolete-attr.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,12 +0,0 @@\n-// When denying at the crate level, be sure to not get random warnings from the\n-// injected intrinsics by the compiler.\n-\n-#![deny(unused_attributes)]\n-#![allow(dead_code)]\n-#![feature(custom_attribute)]\n-\n-#[ab_isize=\"stdcall\"] extern {} //~ ERROR unused attribute\n-\n-#[fixed_stack_segment] fn f() {} //~ ERROR unused attribute\n-\n-fn main() {}"}, {"sha": "c06bd26df2b96d5cfec59e8f6c8e0b54825299e1", "filename": "src/test/ui/lint/lint-obsolete-attr.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-obsolete-attr.stderr?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,20 +0,0 @@\n-error: unused attribute\n-  --> $DIR/lint-obsolete-attr.rs:8:1\n-   |\n-LL | #[ab_isize=\"stdcall\"] extern {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-obsolete-attr.rs:4:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/lint-obsolete-attr.rs:10:1\n-   |\n-LL | #[fixed_stack_segment] fn f() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "828b869c12e23a0f2408ef84767ef7aacb312185", "filename": "src/test/ui/lint/lint-unknown-attr.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.rs?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,11 +0,0 @@\n-// When denying at the crate level, be sure to not get random warnings from the\n-// injected intrinsics by the compiler.\n-\n-#![feature(custom_attribute)]\n-#![deny(unused_attributes)]\n-\n-#![mutable_doc] //~ ERROR unused attribute\n-\n-#[dance] mod a {} //~ ERROR unused attribute\n-\n-#[dance] fn main() {} //~ ERROR unused attribute"}, {"sha": "9817760c2247aca11b4ecb7ca615985ba1d0235b", "filename": "src/test/ui/lint/lint-unknown-attr.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2410b4de7c425b1160a4368bc944d081d6e48a70/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-attr.stderr?ref=2410b4de7c425b1160a4368bc944d081d6e48a70", "patch": "@@ -1,26 +0,0 @@\n-error: unused attribute\n-  --> $DIR/lint-unknown-attr.rs:9:1\n-   |\n-LL | #[dance] mod a {}\n-   | ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/lint-unknown-attr.rs:5:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/lint-unknown-attr.rs:11:1\n-   |\n-LL | #[dance] fn main() {}\n-   | ^^^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/lint-unknown-attr.rs:7:1\n-   |\n-LL | #![mutable_doc]\n-   | ^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "56a902315661293e21971ce57cf9ea0003e2ce8d", "filename": "src/test/ui/macros/macro-inner-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-inner-attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n@@ -12,7 +12,7 @@ test!(b,\n       #[cfg(not(qux))],\n       pub fn bar() { });\n \n-#[qux]\n+#[rustc_dummy]\n fn main() {\n     a::bar();\n     //~^ ERROR failed to resolve: use of undeclared type or module `a`"}, {"sha": "0752f7e3153c19e5b7ac870bf4185b4fa6235a12", "filename": "src/test/ui/macros/macro-outer-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! test { ($nm:ident,\n                      #[$a:meta],\n@@ -13,7 +13,7 @@ test!(b,\n       pub fn bar() { });\n \n // test1!(#[bar])\n-#[qux]\n+#[rustc_dummy]\n fn main() {\n     a::bar(); //~ ERROR cannot find function `bar` in module `a`\n     b::bar();"}, {"sha": "5101b5caeea09c31df69bf6a56586e7979b02bf2", "filename": "src/test/ui/malformed/malformed-interpolated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,9 +1,9 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! check {\n     ($expr: expr) => (\n-        #[my_attr = $expr] //~ ERROR unexpected token: `-0`\n-                           //~| ERROR unexpected token: `0 + 0`\n+        #[rustc_dummy = $expr] //~ ERROR unexpected token: `-0`\n+                               //~| ERROR unexpected token: `0 + 0`\n         use main as _;\n     );\n }"}, {"sha": "bcd2ef545d815ed93bbb93eca31d21059563a167", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -7,19 +7,19 @@ LL | check!(0u8);\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: unexpected token: `-0`\n-  --> $DIR/malformed-interpolated.rs:5:21\n+  --> $DIR/malformed-interpolated.rs:5:25\n    |\n-LL |         #[my_attr = $expr]\n-   |                     ^^^^^\n+LL |         #[rustc_dummy = $expr]\n+   |                         ^^^^^\n ...\n LL | check!(-0); // ERROR, see above\n    | ----------- in this macro invocation\n \n error: unexpected token: `0 + 0`\n-  --> $DIR/malformed-interpolated.rs:5:21\n+  --> $DIR/malformed-interpolated.rs:5:25\n    |\n-LL |         #[my_attr = $expr]\n-   |                     ^^^^^\n+LL |         #[rustc_dummy = $expr]\n+   |                         ^^^^^\n ...\n LL | check!(0 + 0); // ERROR, see above\n    | -------------- in this macro invocation"}, {"sha": "1298c08df846df8994685f19c1ee2f433bc77947", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -2,8 +2,6 @@\n // aux-build:derive-clona.rs\n // aux-build:test-macros.rs\n \n-#![feature(custom_attribute)]\n-\n #[macro_use]\n extern crate derive_foo;\n #[macro_use]\n@@ -25,10 +23,12 @@ macro_rules! attr_proc_mac {\n //~^ ERROR cannot find\n struct Foo;\n \n-#[attr_proc_macra] // OK, interpreted as a custom attribute\n+// Interpreted as a feature gated custom attribute\n+#[attr_proc_macra] //~ ERROR attribute `attr_proc_macra` is currently unknown\n struct Bar;\n \n-#[FooWithLongNan]  // OK, interpreted as a custom attribute\n+// Interpreted as a feature gated custom attribute\n+#[FooWithLongNan] //~ ERROR attribute `FooWithLongNan` is currently unknown\n struct Asdf;\n \n #[derive(Dlone)]"}, {"sha": "f9f116c15dcc7fff9905a6018b560837dc99f5ed", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,5 +1,23 @@\n+error[E0658]: The attribute `attr_proc_macra` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/resolve-error.rs:27:3\n+   |\n+LL | #[attr_proc_macra]\n+   |   ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `FooWithLongNan` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/resolve-error.rs:31:3\n+   |\n+LL | #[FooWithLongNan]\n+   |   ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error: cannot find derive macro `FooWithLongNan` in this scope\n-  --> $DIR/resolve-error.rs:24:10\n+  --> $DIR/resolve-error.rs:22:10\n    |\n LL | #[derive(FooWithLongNan)]\n    |          ^^^^^^^^^^^^^^ help: try: `FooWithLongName`\n@@ -46,5 +64,6 @@ error: cannot find macro `bang_proc_macrp!` in this scope\n LL |     bang_proc_macrp!();\n    |     ^^^^^^^^^^^^^^^ help: you could try the macro: `bang_proc_macro`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "674a5ed18cee3ab5033e6d7842dc94d8afb1f5da", "filename": "src/test/ui/stmt_expr_attrs_no_feature.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n macro_rules! stmt_mac {\n     () => {\n@@ -7,44 +7,45 @@ macro_rules! stmt_mac {\n }\n \n fn main() {\n-    #[attr]\n+    #[rustc_dummy]\n     fn a() {}\n \n-    #[attr] //~ ERROR attributes on expressions are experimental\n+    // Bug: built-in attrs like `rustc_dummy` are not gated on blocks, but other attrs are.\n+    #[rustfmt::skip] //~ ERROR attributes on expressions are experimental\n     {\n \n     }\n \n-    #[attr]\n+    #[rustc_dummy]\n     5;\n \n-    #[attr]\n+    #[rustc_dummy]\n     stmt_mac!();\n }\n \n // Check that cfg works right\n \n #[cfg(unset)]\n fn c() {\n-    #[attr]\n+    #[rustc_dummy]\n     5;\n }\n \n #[cfg(not(unset))]\n fn j() {\n-    #[attr]\n+    #[rustc_dummy]\n     5;\n }\n \n #[cfg_attr(not(unset), cfg(unset))]\n fn d() {\n-    #[attr]\n+    #[rustc_dummy]\n     8;\n }\n \n #[cfg_attr(not(unset), cfg(not(unset)))]\n fn i() {\n-    #[attr]\n+    #[rustc_dummy]\n     8;\n }\n \n@@ -53,30 +54,30 @@ fn i() {\n macro_rules! item_mac {\n     ($e:ident) => {\n         fn $e() {\n-            #[attr]\n+            #[rustc_dummy]\n             42;\n \n             #[cfg(unset)]\n             fn f() {\n-                #[attr]\n+                #[rustc_dummy]\n                 5;\n             }\n \n             #[cfg(not(unset))]\n             fn k() {\n-                #[attr]\n+                #[rustc_dummy]\n                 5;\n             }\n \n             #[cfg_attr(not(unset), cfg(unset))]\n             fn g() {\n-                #[attr]\n+                #[rustc_dummy]\n                 8;\n             }\n \n             #[cfg_attr(not(unset), cfg(not(unset)))]\n             fn h() {\n-                #[attr]\n+                #[rustc_dummy]\n                 8;\n             }\n \n@@ -90,51 +91,51 @@ item_mac!(e);\n \n extern {\n     #[cfg(unset)]\n-    fn x(a: [u8; #[attr] 5]);\n-    fn y(a: [u8; #[attr] 5]); //~ ERROR attributes on expressions are experimental\n+    fn x(a: [u8; #[rustc_dummy] 5]);\n+    fn y(a: [u8; #[rustc_dummy] 5]); //~ ERROR attributes on expressions are experimental\n }\n \n struct Foo;\n impl Foo {\n     #[cfg(unset)]\n-    const X: u8 = #[attr] 5;\n-    const Y: u8 = #[attr] 5; //~ ERROR attributes on expressions are experimental\n+    const X: u8 = #[rustc_dummy] 5;\n+    const Y: u8 = #[rustc_dummy] 5; //~ ERROR attributes on expressions are experimental\n }\n \n trait Bar {\n     #[cfg(unset)]\n-    const X: [u8; #[attr] 5];\n-    const Y: [u8; #[attr] 5]; //~ ERROR attributes on expressions are experimental\n+    const X: [u8; #[rustc_dummy] 5];\n+    const Y: [u8; #[rustc_dummy] 5]; //~ ERROR attributes on expressions are experimental\n }\n \n struct Joyce {\n     #[cfg(unset)]\n-    field: [u8; #[attr] 5],\n-    field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+    field: [u8; #[rustc_dummy] 5],\n+    field2: [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n }\n \n struct Walky(\n-    #[cfg(unset)] [u8; #[attr] 5],\n-    [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+    #[cfg(unset)] [u8; #[rustc_dummy] 5],\n+    [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n );\n \n enum Mike {\n     Happy(\n-        #[cfg(unset)] [u8; #[attr] 5],\n-        [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+        #[cfg(unset)] [u8; #[rustc_dummy] 5],\n+        [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n     ),\n     Angry {\n         #[cfg(unset)]\n-        field: [u8; #[attr] 5],\n-        field2: [u8; #[attr] 5] //~ ERROR attributes on expressions are experimental\n+        field: [u8; #[rustc_dummy] 5],\n+        field2: [u8; #[rustc_dummy] 5] //~ ERROR attributes on expressions are experimental\n     }\n }\n \n fn pat() {\n     match 5 {\n         #[cfg(unset)]\n-        5 => #[attr] (),\n-        6 => #[attr] (), //~ ERROR attributes on expressions are experimental\n+        5 => #[rustc_dummy] (),\n+        6 => #[rustc_dummy] (), //~ ERROR attributes on expressions are experimental\n         _ => (),\n     }\n }"}, {"sha": "01372cc164b62f63884aa2b31e31e2abcad7df28", "filename": "src/test/ui/stmt_expr_attrs_no_feature.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstmt_expr_attrs_no_feature.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,80 +1,80 @@\n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:13:5\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:14:5\n    |\n-LL |     #[attr]\n-   |     ^^^^^^^\n+LL |     #[rustfmt::skip]\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:94:18\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:95:18\n    |\n-LL |     fn y(a: [u8; #[attr] 5]);\n-   |                  ^^^^^^^\n+LL |     fn y(a: [u8; #[rustc_dummy] 5]);\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:101:19\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:102:19\n    |\n-LL |     const Y: u8 = #[attr] 5;\n-   |                   ^^^^^^^\n+LL |     const Y: u8 = #[rustc_dummy] 5;\n+   |                   ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:107:19\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:108:19\n    |\n-LL |     const Y: [u8; #[attr] 5];\n-   |                   ^^^^^^^\n+LL |     const Y: [u8; #[rustc_dummy] 5];\n+   |                   ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:113:18\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:114:18\n    |\n-LL |     field2: [u8; #[attr] 5]\n-   |                  ^^^^^^^\n+LL |     field2: [u8; #[rustc_dummy] 5]\n+   |                  ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:118:10\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:119:10\n    |\n-LL |     [u8; #[attr] 5]\n-   |          ^^^^^^^\n+LL |     [u8; #[rustc_dummy] 5]\n+   |          ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:124:14\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:125:14\n    |\n-LL |         [u8; #[attr] 5]\n-   |              ^^^^^^^\n+LL |         [u8; #[rustc_dummy] 5]\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:129:22\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:130:22\n    |\n-LL |         field2: [u8; #[attr] 5]\n-   |                      ^^^^^^^\n+LL |         field2: [u8; #[rustc_dummy] 5]\n+   |                      ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n \n error[E0658]: attributes on expressions are experimental\n-  --> $DIR/stmt_expr_attrs_no_feature.rs:137:14\n+  --> $DIR/stmt_expr_attrs_no_feature.rs:138:14\n    |\n-LL |         6 => #[attr] (),\n-   |              ^^^^^^^\n+LL |         6 => #[rustc_dummy] (),\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/15701\n    = help: add #![feature(stmt_expr_attributes)] to the crate attributes to enable"}, {"sha": "a6531490c015914091f13b6423d65a64611090a5", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,15 +1,15 @@\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#[my_attr = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[my_attr = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n-fn main() { }\n+#[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[rustc_dummy = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n+fn main() {}"}, {"sha": "83de173b1a703a4e553c0b160022108436947e73", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,96 +1,96 @@\n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:3:13\n+  --> $DIR/suffixed-literal-meta.rs:3:17\n    |\n-LL | #[my_attr = 1usize]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1usize]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:4:13\n+  --> $DIR/suffixed-literal-meta.rs:4:17\n    |\n-LL | #[my_attr = 1u8]\n-   |             ^^^\n+LL | #[rustc_dummy = 1u8]\n+   |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:5:13\n+  --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n-LL | #[my_attr = 1u16]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u16]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:6:13\n+  --> $DIR/suffixed-literal-meta.rs:6:17\n    |\n-LL | #[my_attr = 1u32]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u32]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:13\n+  --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n-LL | #[my_attr = 1u64]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1u64]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:8:13\n+  --> $DIR/suffixed-literal-meta.rs:8:17\n    |\n-LL | #[my_attr = 1isize]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1isize]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:13\n+  --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n-LL | #[my_attr = 1i8]\n-   |             ^^^\n+LL | #[rustc_dummy = 1i8]\n+   |                 ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:10:13\n+  --> $DIR/suffixed-literal-meta.rs:10:17\n    |\n-LL | #[my_attr = 1i16]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i16]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:13\n+  --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n-LL | #[my_attr = 1i32]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i32]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:12:13\n+  --> $DIR/suffixed-literal-meta.rs:12:17\n    |\n-LL | #[my_attr = 1i64]\n-   |             ^^^^\n+LL | #[rustc_dummy = 1i64]\n+   |                 ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:13:13\n+  --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n-LL | #[my_attr = 1.0f32]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1.0f32]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:14:13\n+  --> $DIR/suffixed-literal-meta.rs:14:17\n    |\n-LL | #[my_attr = 1.0f64]\n-   |             ^^^^^^\n+LL | #[rustc_dummy = 1.0f64]\n+   |                 ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n "}, {"sha": "ce902b7e7d28a8d9fb7513114f1c1e985b58b130", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,12 +1,11 @@\n-#![feature(custom_attribute)]\n-\n type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n \n #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n struct S;\n \n-#[rustfmt] // OK, interpreted as a custom attribute\n+// Interpreted as a feature gated custom attribute\n+#[rustfmt] //~ ERROR attribute `rustfmt` is currently unknown\n fn check() {}\n \n #[rustfmt::skip] // OK"}, {"sha": "1df9821f2444092a0f05e9a917b1d0502cb60977", "filename": "src/test/ui/tool-attributes/tool-attributes-misplaced-1.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Ftool-attributes-misplaced-1.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,39 +1,49 @@\n+error[E0658]: The attribute `rustfmt` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/tool-attributes-misplaced-1.rs:8:3\n+   |\n+LL | #[rustfmt]\n+   |   ^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error: cannot find derive macro `rustfmt` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:6:10\n+  --> $DIR/tool-attributes-misplaced-1.rs:4:10\n    |\n LL | #[derive(rustfmt)]\n    |          ^^^^^^^\n \n error: cannot find macro `rustfmt!` in this scope\n-  --> $DIR/tool-attributes-misplaced-1.rs:15:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:14:5\n    |\n LL |     rustfmt!();\n    |     ^^^^^^^\n \n error[E0573]: expected type, found tool module `rustfmt`\n-  --> $DIR/tool-attributes-misplaced-1.rs:3:10\n+  --> $DIR/tool-attributes-misplaced-1.rs:1:10\n    |\n LL | type A = rustfmt;\n    |          ^^^^^^^ not a type\n \n error[E0573]: expected type, found tool attribute `rustfmt::skip`\n-  --> $DIR/tool-attributes-misplaced-1.rs:4:10\n+  --> $DIR/tool-attributes-misplaced-1.rs:2:10\n    |\n LL | type B = rustfmt::skip;\n    |          ^^^^^^^^^^^^^ not a type\n \n error[E0423]: expected value, found tool module `rustfmt`\n-  --> $DIR/tool-attributes-misplaced-1.rs:14:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:13:5\n    |\n LL |     rustfmt;\n    |     ^^^^^^^ not a value\n \n error[E0423]: expected value, found tool attribute `rustfmt::skip`\n-  --> $DIR/tool-attributes-misplaced-1.rs:17:5\n+  --> $DIR/tool-attributes-misplaced-1.rs:16:5\n    |\n LL |     rustfmt::skip;\n    |     ^^^^^^^^^^^^^ not a value\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0423`.\n+Some errors have detailed explanations: E0423, E0658.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "b07ab96bce13fe55ce2a4d58c9926c0c7f456a3c", "filename": "src/test/ui/unrestricted-attribute-tokens.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funrestricted-attribute-tokens.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,8 +1,8 @@\n // compile-pass\n \n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#[my_attr(a b c d)]\n-#[my_attr[a b c d]]\n-#[my_attr{a b c d}]\n+#[rustc_dummy(a b c d)]\n+#[rustc_dummy[a b c d]]\n+#[rustc_dummy{a b c d}]\n fn main() {}"}, {"sha": "cb8ac0e6a05c0837433fae4b7ff3df756421c165", "filename": "src/test/ui/unused/unused-attr.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Funused%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Funused%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.rs?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,49 +1,48 @@\n #![deny(unused_attributes)]\n-#![allow(dead_code, unused_imports, unused_extern_crates)]\n-#![feature(custom_attribute)]\n+#![feature(rustc_attrs)]\n \n-#![foo] //~ ERROR unused attribute\n+#![rustc_dummy] //~ ERROR unused attribute\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n extern crate core;\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n use std::collections;\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n extern \"C\" {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn foo();\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n mod foo {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     pub enum Foo {\n-        #[foo] //~ ERROR unused attribute\n+        #[rustc_dummy] //~ ERROR unused attribute\n         Bar,\n     }\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n fn bar(f: foo::Foo) {\n     match f {\n-        #[foo] //~ ERROR unused attribute\n+        #[rustc_dummy] //~ ERROR unused attribute\n         foo::Foo::Bar => {}\n     }\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n struct Foo {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     a: isize\n }\n \n-#[foo] //~ ERROR unused attribute\n+#[rustc_dummy] //~ ERROR unused attribute\n trait Baz {\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn blah(&self);\n-    #[foo] //~ ERROR unused attribute\n+    #[rustc_dummy] //~ ERROR unused attribute\n     fn blah2(&self) {}\n }\n "}, {"sha": "956b870715eb2fcd6280c154596b2f7b402cf3b7", "filename": "src/test/ui/unused/unused-attr.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-attr.stderr?ref=21b5c1d51e9fcf26eca5a1ccc8dfaee5240f7522", "patch": "@@ -1,8 +1,8 @@\n error: unused attribute\n-  --> $DIR/unused-attr.rs:7:1\n+  --> $DIR/unused-attr.rs:6:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/unused-attr.rs:1:9\n@@ -11,88 +11,88 @@ LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:10:1\n+  --> $DIR/unused-attr.rs:9:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:15:5\n+  --> $DIR/unused-attr.rs:14:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:13:1\n+  --> $DIR/unused-attr.rs:12:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:23:9\n+  --> $DIR/unused-attr.rs:22:9\n    |\n-LL |         #[foo]\n-   |         ^^^^^^\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:21:5\n+  --> $DIR/unused-attr.rs:20:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:19:1\n+  --> $DIR/unused-attr.rs:18:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:31:9\n+  --> $DIR/unused-attr.rs:30:9\n    |\n-LL |         #[foo]\n-   |         ^^^^^^\n+LL |         #[rustc_dummy]\n+   |         ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:28:1\n+  --> $DIR/unused-attr.rs:27:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:38:5\n+  --> $DIR/unused-attr.rs:37:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:36:1\n+  --> $DIR/unused-attr.rs:35:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:44:5\n+  --> $DIR/unused-attr.rs:43:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:46:5\n+  --> $DIR/unused-attr.rs:45:5\n    |\n-LL |     #[foo]\n-   |     ^^^^^^\n+LL |     #[rustc_dummy]\n+   |     ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:42:1\n+  --> $DIR/unused-attr.rs:41:1\n    |\n-LL | #[foo]\n-   | ^^^^^^\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n \n error: unused attribute\n-  --> $DIR/unused-attr.rs:5:1\n+  --> $DIR/unused-attr.rs:4:1\n    |\n-LL | #![foo]\n-   | ^^^^^^^\n+LL | #![rustc_dummy]\n+   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 15 previous errors\n "}]}