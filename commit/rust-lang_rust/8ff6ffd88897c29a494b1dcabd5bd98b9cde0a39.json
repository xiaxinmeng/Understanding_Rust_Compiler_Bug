{"sha": "8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZjZmZmQ4ODg5N2MyOWE0OTRiMWRjYWJkNWJkOThiOWNkZTBhMzk=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-20T23:08:49Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T16:07:48Z"}, "message": "Use `DefId` in `ResolverOutputs::extern_crate_map` instead of `NodeId`", "tree": {"sha": "6dd04f7dec79d3c1c2a551dcc1b92116d36802be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd04f7dec79d3c1c2a551dcc1b92116d36802be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "html_url": "https://github.com/rust-lang/rust/commit/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f65ae9db20c2019e9e4989754894d9ee7680ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f65ae9db20c2019e9e4989754894d9ee7680ce", "html_url": "https://github.com/rust-lang/rust/commit/21f65ae9db20c2019e9e4989754894d9ee7680ce"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "6a46a83a412a0b3adeeaaf5863da0ad36658f345", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "patch": "@@ -34,7 +34,6 @@ use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use rustc_ast::ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -923,7 +922,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     /// Resolutions of `extern crate` items produced by resolver.\n-    extern_crate_map: NodeMap<CrateNum>,\n+    extern_crate_map: FxHashMap<DefId, CrateNum>,\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n@@ -2682,10 +2681,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         let id = tcx.hir().local_def_id_to_hir_id(id.expect_local());\n         tcx.stability().local_deprecation_entry(id)\n     };\n-    providers.extern_mod_stmt_cnum = |tcx, id| {\n-        let id = tcx.hir().as_local_node_id(id).unwrap();\n-        tcx.extern_crate_map.get(&id).cloned()\n-    };\n+    providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n     providers.all_crate_nums = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())"}, {"sha": "73b4074bd62058ff4115b944c9834b14dd0cce18", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "patch": "@@ -17,7 +17,6 @@ use crate::ty;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use rustc_ast::ast;\n-use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -121,7 +120,7 @@ mod sty;\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n-    pub extern_crate_map: NodeMap<CrateNum>,\n+    pub extern_crate_map: FxHashMap<DefId, CrateNum>,\n     pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(DefId, Span)>,"}, {"sha": "d09b5b5d701d2508a233a34c6793b89f99bb4e53", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "patch": "@@ -1274,6 +1274,13 @@ impl<'a> Resolver<'a> {\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n+        let extern_crate_map = {\n+            let mut map = FxHashMap::default();\n+            for (k, v) in self.extern_crate_map.into_iter() {\n+                map.insert(definitions.local_def_id(k).to_def_id(), v);\n+            }\n+            map\n+        };\n         let export_map = {\n             let mut map = FxHashMap::default();\n             for (k, v) in self.export_map.into_iter() {\n@@ -1316,7 +1323,7 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n-            extern_crate_map: self.extern_crate_map,\n+            extern_crate_map,\n             export_map,\n             trait_map,\n             glob_map,\n@@ -1334,7 +1341,13 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n-            extern_crate_map: self.extern_crate_map.clone(),\n+            extern_crate_map: {\n+                let mut map = FxHashMap::default();\n+                for (k, v) in self.extern_crate_map.iter() {\n+                    map.insert(self.definitions.local_def_id(k.clone()).to_def_id(), v.clone());\n+                }\n+                map\n+            },\n             export_map: {\n                 let mut map = FxHashMap::default();\n                 for (k, v) in self.export_map.iter() {"}]}