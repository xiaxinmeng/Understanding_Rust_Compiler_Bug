{"sha": "316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNmEzOTFkY2I3ZDY2ZGMyNWYxZjlhNGVjOWQzNjhlZjc2MTUwMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-19T04:04:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-19T04:04:02Z"}, "message": "Auto merge of #60104 - Centril:rollup-7vmae1a, r=Centril\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #59915 (Implement event filtering for self-profiler.)\n - #59933 (Make clear that format padding doesn't work for Debug)\n - #60023 (implement specialized nth_back() for Bytes, Fuse and Enumerate)\n - #60032 (Remove unwanted z-index change)\n - #60041 (Simplify the returning of a Result a bit)\n - #60045 (Suggest appropriate path when calling associated item on bare types)\n - #60052 (Correct unused parameter diagnostic)\n - #60056 (Update rustfmt to 1.2.1)\n - #60060 (whitelist RTM x86 target cpu feature)\n - #60061 (Change suggestion of field when not in self context)\n - #60064 (Point at try `?` on errors affecting the err match arm of the desugared code)\n - #60078 (Use more realistic example for thread builder)\n - #60080 (Fix small errors in docs for `rchunks_exact` and `rchunks_exact_mut`.)\n - #60082 (Update miri)\n - #60097 (Use -mergefunc-use-aliases for any LLVM >= 8)\n - #60098 (libcore: deny `elided_lifetimes_in_paths`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8701a634c23f3bd64688468562f1f57458199d61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8701a634c23f3bd64688468562f1f57458199d61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "html_url": "https://github.com/rust-lang/rust/commit/316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e928e9441157f63a776ba1f8773818838e0912ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e928e9441157f63a776ba1f8773818838e0912ea", "html_url": "https://github.com/rust-lang/rust/commit/e928e9441157f63a776ba1f8773818838e0912ea"}, {"sha": "3ad9fcccbbfef027386c6f42fe6321c885b04817", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad9fcccbbfef027386c6f42fe6321c885b04817", "html_url": "https://github.com/rust-lang/rust/commit/3ad9fcccbbfef027386c6f42fe6321c885b04817"}], "stats": {"total": 1073, "additions": 670, "deletions": 403}, "files": [{"sha": "95efd04d6f84f976e8211f0b5f92144b852cfe6e", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -36,6 +36,14 @@ dependencies = [\n  \"url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"annotate-snippets\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n@@ -2246,7 +2254,7 @@ dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n  \"rustc_tools_util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 1.2.0\",\n+ \"rustfmt-nightly 1.2.1\",\n  \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3038,8 +3046,9 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.2.0\"\n+version = \"1.2.1\"\n dependencies = [\n+ \"annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3049,6 +3058,7 @@ dependencies = [\n  \"env_logger 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ignore 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3061,7 +3071,7 @@ dependencies = [\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3987,6 +3997,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum adler32 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n \"checksum aho-corasick 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e9a933f4e58658d7b12defcf96dc5c720f20832deebe3e0a19efd3b6aaeeb9e\"\n \"checksum ammonia 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd4c682378117e4186a492b2252b9537990e1617f44aed9788b9a1149de45477\"\n+\"checksum annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e8bcdcd5b291ce85a78f2b9d082a8de9676c12b1840d386d67bc5eea6f9d2b4e\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum arc-swap 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1025aeae2b664ca0ea726a89d574fe8f4e77dd712d443236ad1de00379450cf6\"\n \"checksum argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f67b0b6a86dae6e67ff4ca2b6201396074996379fba2b92ff649126f37cb392\""}, {"sha": "68cbc366d7bc2a25bb77e9eaff2761c5a34dd559", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -343,9 +343,10 @@\n //! * `^` - the argument is center-aligned in `width` columns\n //! * `>` - the argument is right-aligned in `width` columns\n //!\n-//! Note that alignment may not be implemented by some types. A good way\n-//! to ensure padding is applied is to format your input, then use this\n-//! resulting string to pad your output.\n+//! Note that alignment may not be implemented by some types. In particular, it\n+//! is not generally implemented for the `Debug` trait.  A good way to ensure\n+//! padding is applied is to format your input, then use this resulting string\n+//! to pad your output.\n //!\n //! ## Sign/`#`/`0`\n //!"}, {"sha": "c124457118cb97768a98b181f70be07ad85e7dd9", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -338,7 +338,7 @@ pub struct LayoutErr {\n // (we need this for downstream impl of trait Error)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n impl fmt::Display for LayoutErr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"invalid parameters to Layout::from_size_align\")\n     }\n }\n@@ -354,7 +354,7 @@ pub struct AllocErr;\n // (we need this for downstream impl of trait Error)\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n impl fmt::Display for AllocErr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"memory allocation failed\")\n     }\n }\n@@ -376,7 +376,7 @@ impl CannotReallocInPlace {\n // (we need this for downstream impl of trait Error)\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n impl fmt::Display for CannotReallocInPlace {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.description())\n     }\n }"}, {"sha": "d043ce34effcdf4d6aa62198ca5d586bab75c293", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -107,7 +107,7 @@ impl<T: 'static + ?Sized > Any for T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for dyn Any {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n@@ -117,14 +117,14 @@ impl fmt::Debug for dyn Any {\n // dispatch works with upcasting.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for dyn Any + Send {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }\n \n #[stable(feature = \"any_send_sync_methods\", since = \"1.28.0\")]\n impl fmt::Debug for dyn Any + Send + Sync {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Any\")\n     }\n }"}, {"sha": "fb9c99f667df230310c8c79563bf26c0c5bbcddf", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -55,7 +55,7 @@ pub struct TryFromSliceError(());\n \n impl fmt::Display for TryFromSliceError {\n     #[inline]\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self.__description(), f)\n     }\n }\n@@ -184,7 +184,7 @@ macro_rules! array_impls {\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T: fmt::Debug> fmt::Debug for [T; $N] {\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     fmt::Debug::fmt(&&self[..], f)\n                 }\n             }"}, {"sha": "c0ab364380fbd83d379fe22662e5d4eb20f80598", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -131,7 +131,7 @@ impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for EscapeDefault {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"EscapeDefault { .. }\")\n     }\n }"}, {"sha": "fcfd80d92660d8a28facb2ea90de54a5d731e551", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -577,14 +577,14 @@ pub struct BorrowError {\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Debug for BorrowError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowError\").finish()\n     }\n }\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Display for BorrowError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Display::fmt(\"already mutably borrowed\", f)\n     }\n }\n@@ -597,14 +597,14 @@ pub struct BorrowMutError {\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Debug for BorrowMutError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"BorrowMutError\").finish()\n     }\n }\n \n #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n impl Display for BorrowMutError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         Display::fmt(\"already borrowed\", f)\n     }\n }\n@@ -788,7 +788,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn borrow(&self) -> Ref<T> {\n+    pub fn borrow(&self) -> Ref<'_, T> {\n         self.try_borrow().expect(\"already mutably borrowed\")\n     }\n \n@@ -819,7 +819,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n     #[inline]\n-    pub fn try_borrow(&self) -> Result<Ref<T>, BorrowError> {\n+    pub fn try_borrow(&self) -> Result<Ref<'_, T>, BorrowError> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Ok(Ref {\n                 value: unsafe { &*self.value.get() },\n@@ -869,7 +869,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn borrow_mut(&self) -> RefMut<T> {\n+    pub fn borrow_mut(&self) -> RefMut<'_, T> {\n         self.try_borrow_mut().expect(\"already borrowed\")\n     }\n \n@@ -897,7 +897,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"try_borrow\", since = \"1.13.0\")]\n     #[inline]\n-    pub fn try_borrow_mut(&self) -> Result<RefMut<T>, BorrowMutError> {\n+    pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => Ok(RefMut {\n                 value: unsafe { &mut *self.value.get() },\n@@ -1245,7 +1245,7 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b,\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for Ref<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.value.fmt(f)\n     }\n }\n@@ -1402,7 +1402,7 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefM\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.value.fmt(f)\n     }\n }"}, {"sha": "ec9ac7ce8b1cb39c9a06d410af0e707273fa20ef", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -193,7 +193,7 @@ enum CharErrorKind {\n \n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n impl fmt::Display for ParseCharError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }\n@@ -240,7 +240,7 @@ pub struct CharTryFromError(());\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for CharTryFromError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)\n     }\n }\n@@ -316,4 +316,3 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n         None\n     }\n }\n-"}, {"sha": "23059243c61d773e3210b71d2f7261d74994fa6f", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -128,7 +128,7 @@ impl DecodeUtf16Error {\n \n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n impl fmt::Display for DecodeUtf16Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"unpaired surrogate found: {:x}\", self.code)\n     }\n }"}, {"sha": "dedd2f758b6cb299336ccb15373165bd0a98f2fc", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -220,7 +220,7 @@ impl FusedIterator for EscapeUnicode {}\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeUnicode {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         for c in self.clone() {\n             f.write_char(c)?;\n         }\n@@ -333,7 +333,7 @@ impl FusedIterator for EscapeDefault {}\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for EscapeDefault {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         for c in self.clone() {\n             f.write_char(c)?;\n         }\n@@ -367,7 +367,7 @@ impl FusedIterator for EscapeDebug {}\n \n #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n impl fmt::Display for EscapeDebug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)\n     }\n }\n@@ -482,7 +482,7 @@ impl Iterator for CaseMappingIter {\n }\n \n impl fmt::Display for CaseMappingIter {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             CaseMappingIter::Three(a, b, c) => {\n                 f.write_char(a)?;\n@@ -503,14 +503,14 @@ impl fmt::Display for CaseMappingIter {\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for ToLowercase {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)\n     }\n }\n \n #[stable(feature = \"char_struct_display\", since = \"1.16.0\")]\n impl fmt::Display for ToUppercase {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.0, f)\n     }\n }"}, {"sha": "2906e5824ae70dcc35879f306cc40af73f56857f", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -39,7 +39,7 @@ pub enum c_void {\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for c_void {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"c_void\")\n     }\n }\n@@ -62,7 +62,7 @@ extern {\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n           windows))]\n impl fmt::Debug for VaListImpl {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"va_list* {:p}\", self)\n     }\n }\n@@ -212,7 +212,7 @@ impl<'a> VaList<'a> {\n extern \"rust-intrinsic\" {\n     /// Destroy the arglist `ap` after initialization with `va_start` or\n     /// `va_copy`.\n-    fn va_end(ap: &mut VaList);\n+    fn va_end(ap: &mut VaList<'_>);\n \n     /// Copies the current location of arglist `src` to the arglist `dst`.\n     #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n@@ -222,9 +222,9 @@ extern \"rust-intrinsic\" {\n     fn va_copy<'a>(src: &VaList<'a>) -> VaList<'a>;\n     #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n               not(windows), not(all(target_arch = \"aarch64\", target_os = \"ios\"))))]\n-    fn va_copy(src: &VaList) -> VaListImpl;\n+    fn va_copy(src: &VaList<'_>) -> VaListImpl;\n \n     /// Loads an argument of type `T` from the `va_list` `ap` and increment the\n     /// argument `ap` points to.\n-    fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaList) -> T;\n+    fn va_arg<T: sealed_trait::VaArgSafe>(ap: &mut VaList<'_>) -> T;\n }"}, {"sha": "df86da5fc39068f421bd076da455c83637816166", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -6,7 +6,7 @@ struct PadAdapter<'a> {\n }\n \n impl<'a> PadAdapter<'a> {\n-    fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter, slot: &'b mut Option<Self>)\n+    fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter<'_>, slot: &'b mut Option<Self>)\n                         -> fmt::Formatter<'b> {\n         fmt.wrap_buf(move |buf| {\n             *slot = Some(PadAdapter {"}, {"sha": "4bd7d3b4b22e3b9e1cc3520be663a846dd7d5737", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -5,13 +5,13 @@ use crate::num::flt2dec;\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n-fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_decimal_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n                                     sign: flt2dec::Sign, precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n         // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n         // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n         // we decided whether that is valid or not.\n@@ -26,14 +26,14 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers that call both this and the above won't wind\n // up using the combined stack space of both functions in some cases.\n #[inline(never)]\n-fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter<'_>, num: &T,\n                                        sign: flt2dec::Sign, precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n                                                  sign, precision, false, buf.get_mut(),\n@@ -43,7 +43,7 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n }\n \n // Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_decimal_common<T>(fmt: &mut Formatter<'_>, num: &T,\n                               negative_zero: bool, min_precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n@@ -65,14 +65,14 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n-fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n+fn float_to_exponential_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n                                         sign: flt2dec::Sign, precision: usize,\n                                         upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n@@ -84,15 +84,15 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers that call both this and the above won't wind\n // up using the combined stack space of both functions in some cases.\n #[inline(never)]\n-fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n+fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter<'_>,\n                                            num: &T, sign: flt2dec::Sign,\n                                            upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         // enough for f32 and f64\n         let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninit();\n-        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninit();\n+        let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 6]>::uninit();\n         // FIXME(#53491)\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n@@ -102,7 +102,7 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n }\n \n // Common code of floating point LowerExp and UpperExp.\n-fn float_to_exponential_common<T>(fmt: &mut Formatter, num: &T, upper: bool) -> Result\n+fn float_to_exponential_common<T>(fmt: &mut Formatter<'_>, num: &T, upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     let force_sign = fmt.sign_plus();\n@@ -123,28 +123,28 @@ macro_rules! floating {\n     ($ty:ident) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_decimal_common(fmt, self, true, 1)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_decimal_common(fmt, self, false, 0)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl LowerExp for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_exponential_common(fmt, self, false)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl UpperExp for $ty {\n-            fn fmt(&self, fmt: &mut Formatter) -> Result {\n+            fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n                 float_to_exponential_common(fmt, self, true)\n             }\n         }"}, {"sha": "43c1a3b7767ab647838c9f4f3702e0a29271a881", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -55,7 +55,7 @@ pub mod rt {\n /// }\n ///\n /// impl fmt::Display for Triangle {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         write!(f, \"({}, {}, {})\", self.a, self.b, self.c)\n ///     }\n /// }\n@@ -191,7 +191,7 @@ pub trait Write {\n     /// assert_eq!(&buf, \"world\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn write_fmt(mut self: &mut Self, args: Arguments) -> Result {\n+    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {\n         write(&mut self, args)\n     }\n }\n@@ -206,7 +206,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n         (**self).write_char(c)\n     }\n \n-    fn write_fmt(&mut self, args: Arguments) -> Result {\n+    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n         (**self).write_fmt(args)\n     }\n }\n@@ -238,7 +238,7 @@ pub struct Formatter<'a> {\n }\n \n // NB. Argument is essentially an optimized partially applied formatting function,\n-// equivalent to `exists T.(&T, fn(&T, &mut Formatter) -> Result`.\n+// equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.\n \n struct Void {\n     _priv: (),\n@@ -263,20 +263,20 @@ struct Void {\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n-    formatter: fn(&Void, &mut Formatter) -> Result,\n+    formatter: fn(&Void, &mut Formatter<'_>) -> Result,\n }\n \n impl<'a> ArgumentV1<'a> {\n     #[inline(never)]\n-    fn show_usize(x: &usize, f: &mut Formatter) -> Result {\n+    fn show_usize(x: &usize, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(x, f)\n     }\n \n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n     pub fn new<'b, T>(x: &'b T,\n-                      f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n+                      f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n             ArgumentV1 {\n                 formatter: mem::transmute(f),\n@@ -288,7 +288,7 @@ impl<'a> ArgumentV1<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n-    pub fn from_usize(x: &usize) -> ArgumentV1 {\n+    pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n \n@@ -406,14 +406,14 @@ pub struct Arguments<'a> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for Arguments<'_> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n         Display::fmt(self, fmt)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for Arguments<'_> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n         write(fmt.buf, *self)\n     }\n }\n@@ -463,7 +463,7 @@ impl Display for Arguments<'_> {\n /// }\n ///\n /// impl fmt::Debug for Point {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         write!(f, \"Point {{ x: {}, y: {} }}\", self.x, self.y)\n ///     }\n /// }\n@@ -533,7 +533,7 @@ pub trait Debug {\n     /// }\n     ///\n     /// impl fmt::Debug for Position {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"({:?}, {:?})\", self.longitude, self.latitude)\n     ///     }\n     /// }\n@@ -542,7 +542,7 @@ pub trait Debug {\n     ///            format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// Format trait for an empty format, `{}`.\n@@ -569,7 +569,7 @@ pub trait Debug {\n /// }\n ///\n /// impl fmt::Display for Point {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         write!(f, \"({}, {})\", self.x, self.y)\n ///     }\n /// }\n@@ -605,7 +605,7 @@ pub trait Display {\n     /// }\n     ///\n     /// impl fmt::Display for Position {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     ///         write!(f, \"({}, {})\", self.longitude, self.latitude)\n     ///     }\n     /// }\n@@ -614,7 +614,7 @@ pub trait Display {\n     ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `o` formatting.\n@@ -651,7 +651,7 @@ pub trait Display {\n /// struct Length(i32);\n ///\n /// impl fmt::Octal for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:o}\", val) // delegate to i32's implementation\n@@ -666,7 +666,7 @@ pub trait Display {\n pub trait Octal {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `b` formatting.\n@@ -701,7 +701,7 @@ pub trait Octal {\n /// struct Length(i32);\n ///\n /// impl fmt::Binary for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:b}\", val) // delegate to i32's implementation\n@@ -722,7 +722,7 @@ pub trait Octal {\n pub trait Binary {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `x` formatting.\n@@ -760,7 +760,7 @@ pub trait Binary {\n /// struct Length(i32);\n ///\n /// impl fmt::LowerHex for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:x}\", val) // delegate to i32's implementation\n@@ -775,7 +775,7 @@ pub trait Binary {\n pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `X` formatting.\n@@ -813,7 +813,7 @@ pub trait LowerHex {\n /// struct Length(i32);\n ///\n /// impl fmt::UpperHex for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///\n ///         write!(f, \"{:X}\", val) // delegate to i32's implementation\n@@ -828,7 +828,7 @@ pub trait LowerHex {\n pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `p` formatting.\n@@ -858,7 +858,7 @@ pub trait UpperHex {\n /// struct Length(i32);\n ///\n /// impl fmt::Pointer for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         // use `as` to convert to a `*const T`, which implements Pointer, which we can use\n ///\n ///         write!(f, \"{:p}\", self as *const Length)\n@@ -873,7 +873,7 @@ pub trait UpperHex {\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `e` formatting.\n@@ -902,7 +902,7 @@ pub trait Pointer {\n /// struct Length(i32);\n ///\n /// impl fmt::LowerExp for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///         write!(f, \"{}e1\", val / 10)\n ///     }\n@@ -916,7 +916,7 @@ pub trait Pointer {\n pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// `E` formatting.\n@@ -945,7 +945,7 @@ pub trait LowerExp {\n /// struct Length(i32);\n ///\n /// impl fmt::UpperExp for Length {\n-///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n ///         let val = self.0;\n ///         write!(f, \"{}E1\", val / 10)\n ///     }\n@@ -959,7 +959,7 @@ pub trait LowerExp {\n pub trait UpperExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, f: &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n }\n \n /// The `write` function takes an output stream, and an `Arguments` struct\n@@ -994,7 +994,7 @@ pub trait UpperExp {\n ///\n /// [`write!`]: ../../std/macro.write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn write(output: &mut dyn Write, args: Arguments) -> Result {\n+pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n         width: None,\n@@ -1183,7 +1183,7 @@ impl<'a> Formatter<'a> {\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n         #[inline(never)]\n-        fn write_prefix(f: &mut Formatter, sign: Option<char>, prefix: Option<&str>) -> Result {\n+        fn write_prefix(f: &mut Formatter<'_>, sign: Option<char>, prefix: Option<&str>) -> Result {\n             if let Some(c) = sign {\n                 f.buf.write_char(c)?;\n             }\n@@ -1331,7 +1331,7 @@ impl<'a> Formatter<'a> {\n     /// Takes the formatted parts and applies the padding.\n     /// Assumes that the caller already has rendered the parts with required precision,\n     /// so that `self.precision` can be ignored.\n-    fn pad_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {\n+    fn pad_formatted_parts(&mut self, formatted: &flt2dec::Formatted<'_>) -> Result {\n         if let Some(mut width) = self.width {\n             // for the sign-aware zero padding, we render the sign first and\n             // behave as if we had no sign from the beginning.\n@@ -1370,7 +1370,7 @@ impl<'a> Formatter<'a> {\n         }\n     }\n \n-    fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {\n+    fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted<'_>) -> Result {\n         fn write_bytes(buf: &mut dyn Write, s: &[u8]) -> Result {\n             buf.write_str(unsafe { str::from_utf8_unchecked(s) })\n         }\n@@ -1453,7 +1453,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn write_fmt(&mut self, fmt: Arguments) -> Result {\n+    pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {\n         write(self.buf, fmt)\n     }\n \n@@ -1892,14 +1892,14 @@ impl Write for Formatter<'_> {\n         self.buf.write_char(c)\n     }\n \n-    fn write_fmt(&mut self, args: Arguments) -> Result {\n+    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {\n         write(self.buf, args)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for Error {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(\"an error occurred when formatting an argument\", f)\n     }\n }\n@@ -1911,11 +1911,11 @@ macro_rules! fmt_refs {\n         $(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized + $tr> $tr for &T {\n-            fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }\n         }\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<T: ?Sized + $tr> $tr for &mut T {\n-            fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }\n         }\n         )*\n     }\n@@ -1925,36 +1925,36 @@ fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperEx\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Debug for ! {\n-    fn fmt(&self, _: &mut Formatter) -> Result {\n+    fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n impl Display for ! {\n-    fn fmt(&self, _: &mut Formatter) -> Result {\n+    fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for bool {\n     #[inline]\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for bool {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Display::fmt(if *self { \"true\" } else { \"false\" }, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for str {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.write_char('\"')?;\n         let mut from = 0;\n         for (i, c) in self.char_indices() {\n@@ -1975,14 +1975,14 @@ impl Debug for str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for str {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(self)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for char {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.write_char('\\'')?;\n         for c in self.escape_debug() {\n             f.write_char(c)?\n@@ -1993,7 +1993,7 @@ impl Debug for char {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for char {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         if f.width.is_none() && f.precision.is_none() {\n             f.write_char(*self)\n         } else {\n@@ -2004,7 +2004,7 @@ impl Display for char {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         let old_width = f.width;\n         let old_flags = f.flags;\n \n@@ -2032,21 +2032,21 @@ impl<T: ?Sized> Pointer for *const T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for &T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for &mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Pointer::fmt(&(&**self as *const T), f)\n     }\n }\n@@ -2055,11 +2055,11 @@ impl<T: ?Sized> Pointer for &mut T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for *const T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result { Pointer::fmt(self, f) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for *mut T {\n-    fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result { Pointer::fmt(self, f) }\n }\n \n macro_rules! peel {\n@@ -2072,7 +2072,7 @@ macro_rules! tuple {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments)]\n-            fn fmt(&self, f: &mut Formatter) -> Result {\n+            fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;\n                 $(\n@@ -2095,28 +2095,28 @@ tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for [T] {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.debug_list().entries(self.iter()).finish()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for () {\n     #[inline]\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"()\")\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for PhantomData<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"PhantomData\")\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Copy + Debug> Debug for Cell<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.debug_struct(\"Cell\")\n             .field(\"value\", &self.get())\n             .finish()\n@@ -2125,7 +2125,7 @@ impl<T: Copy + Debug> Debug for Cell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for RefCell<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         match self.try_borrow() {\n             Ok(borrow) => {\n                 f.debug_struct(\"RefCell\")\n@@ -2138,7 +2138,7 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n                 struct BorrowedPlaceholder;\n \n                 impl Debug for BorrowedPlaceholder {\n-                    fn fmt(&self, f: &mut Formatter) -> Result {\n+                    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                         f.write_str(\"<borrowed>\")\n                     }\n                 }\n@@ -2153,21 +2153,21 @@ impl<T: ?Sized + Debug> Debug for RefCell<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for Ref<'_, T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + Debug> Debug for RefMut<'_, T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         Debug::fmt(&*(self.deref()), f)\n     }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n         f.pad(\"UnsafeCell\")\n     }\n }"}, {"sha": "f9b4c26496cdc7c54461e37945edec8b82160c22", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -46,7 +46,7 @@ trait GenericRadix {\n     fn digit(x: u8) -> u8;\n \n     /// Format an integer using the radix using a formatter.\n-    fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // The radix can be as low as 2, so we need a buffer of at least 128\n         // characters for a base 2 number.\n         let zero = T::zero();\n@@ -131,7 +131,7 @@ macro_rules! int_base {\n     ($Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::$Trait for $T {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 $Radix.fmt_int(*self as $U, f)\n             }\n         }\n@@ -143,7 +143,7 @@ macro_rules! debug {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::Debug for $T {\n             #[inline]\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 if f.debug_lower_hex() {\n                     fmt::LowerHex::fmt(self, f)\n                 } else if f.debug_upper_hex() {\n@@ -188,7 +188,7 @@ static DEC_DIGITS_LUT: &[u8; 200] =\n \n macro_rules! impl_Display {\n     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n-        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter) -> fmt::Result {\n+        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n             let mut buf = uninitialized_array![u8; 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n@@ -243,7 +243,7 @@ macro_rules! impl_Display {\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl fmt::Display for $t {\n                 #[allow(unused_comparisons)]\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     let is_nonnegative = *self >= 0;\n                     let n = if is_nonnegative {\n                         self.$conv_fn()"}, {"sha": "98150fd9f821ea5679eec470a382340aa23dae6b", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -500,7 +500,7 @@ pub struct BuildHasherDefault<H>(marker::PhantomData<H>);\n \n #[stable(since = \"1.9.0\", feature = \"core_impl_debug\")]\n impl<H> fmt::Debug for BuildHasherDefault<H> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"BuildHasherDefault\")\n     }\n }"}, {"sha": "8c2aae477bf2a35ca1a31864ef517e36a81ea6a1", "filename": "src/libcore/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -34,7 +34,7 @@ impl<I: Clone, U: Clone + IntoIterator, F: Clone> Clone for FlatMap<I, U, F>\n impl<I: fmt::Debug, U: IntoIterator, F> fmt::Debug for FlatMap<I, U, F>\n     where U::IntoIter: fmt::Debug\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FlatMap\").field(\"inner\", &self.inner).finish()\n     }\n }\n@@ -120,7 +120,7 @@ impl<I, U> fmt::Debug for Flatten<I>\n     where I: Iterator + fmt::Debug, U: Iterator + fmt::Debug,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Flatten\").field(\"inner\", &self.inner).finish()\n     }\n }\n@@ -328,4 +328,3 @@ impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n             .rfold(init, |acc, iter| iter.rfold(acc, &mut fold))\n     }\n }\n-"}, {"sha": "3ab404a48d3d8ea5cbac01599794a6d09e6cf27e", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -553,7 +553,7 @@ impl<I, F> Map<I, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, F> fmt::Debug for Map<I, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Map\")\n             .field(\"iter\", &self.iter)\n             .finish()\n@@ -669,7 +669,7 @@ impl<I, P> Filter<I, P> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for Filter<I, P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Filter\")\n             .field(\"iter\", &self.iter)\n             .finish()\n@@ -793,7 +793,7 @@ impl<I, F> FilterMap<I, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, F> fmt::Debug for FilterMap<I, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FilterMap\")\n             .field(\"iter\", &self.iter)\n             .finish()\n@@ -981,6 +981,16 @@ impl<I> DoubleEndedIterator for Enumerate<I> where\n         })\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<(usize, <I as Iterator>::Item)> {\n+        self.iter.nth_back(n).map(|a| {\n+            let len = self.iter.len();\n+            // Can safely add, `ExactSizeIterator` promises that the number of\n+            // elements fits into a `usize`.\n+            (self.count + len, a)\n+        })\n+    }\n+\n     #[inline]\n     fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n@@ -1222,7 +1232,7 @@ impl<I, P> SkipWhile<I, P> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for SkipWhile<I, P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SkipWhile\")\n             .field(\"iter\", &self.iter)\n             .field(\"flag\", &self.flag)\n@@ -1310,7 +1320,7 @@ impl<I, P> TakeWhile<I, P> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, P> fmt::Debug for TakeWhile<I, P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"TakeWhile\")\n             .field(\"iter\", &self.iter)\n             .field(\"flag\", &self.flag)\n@@ -1634,7 +1644,7 @@ impl<I, St, F> Scan<I, St, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, St: fmt::Debug, F> fmt::Debug for Scan<I, St, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Scan\")\n             .field(\"iter\", &self.iter)\n             .field(\"state\", &self.state)\n@@ -1790,6 +1800,17 @@ impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n         }\n     }\n \n+    #[inline]\n+    default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        if self.done {\n+            None\n+        } else {\n+            let nth = self.iter.nth_back(n);\n+            self.done = nth.is_none();\n+            nth\n+        }\n+    }\n+\n     #[inline]\n     default fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n@@ -1878,6 +1899,11 @@ impl<I> DoubleEndedIterator for Fuse<I>\n         self.iter.next_back()\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        self.iter.nth_back(n)\n+    }\n+\n     #[inline]\n     fn try_rfold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n@@ -1928,7 +1954,7 @@ impl<I, F> Inspect<I, F> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<I: fmt::Debug, F> fmt::Debug for Inspect<I, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Inspect\")\n             .field(\"iter\", &self.iter)\n             .finish()"}, {"sha": "70a3b70c180dc1169cf441d7d9981cea8032d65f", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -200,7 +200,7 @@ pub struct Empty<T>(marker::PhantomData<T>);\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T> fmt::Debug for Empty<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"Empty\")\n     }\n }\n@@ -558,7 +558,7 @@ impl<T, F> Iterator for FromFn<F>\n \n #[stable(feature = \"iter_from_fn\", since = \"1.34.0\")]\n impl<F> fmt::Debug for FromFn<F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FromFn\").finish()\n     }\n }\n@@ -631,7 +631,7 @@ impl<T, F> FusedIterator for Successors<T, F>\n \n #[stable(feature = \"iter_successors\", since = \"1.34.0\")]\n impl<T: fmt::Debug, F> fmt::Debug for Successors<T, F> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Successors\")\n             .field(\"next\", &self.next)\n             .finish()"}, {"sha": "28db55578c3de7972a2d19b1795a337675e925b3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -65,7 +65,6 @@\n \n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]\n-#![allow(elided_lifetimes_in_paths)]\n \n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}, {"sha": "95480c6bf048dd5bd3af0b5ba44762cf9abc499f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -862,7 +862,7 @@ impl<T> hash::Hash for Discriminant<T> {\n \n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n impl<T> fmt::Debug for Discriminant<T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt.debug_tuple(\"Discriminant\")\n            .field(&self.0)\n            .finish()"}, {"sha": "342ac69748d92a5d35d97cb53d8af2f7fcee56d6", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -459,7 +459,7 @@ macro_rules! define_bignum {\n         }\n \n         impl crate::fmt::Debug for $name {\n-            fn fmt(&self, f: &mut crate::fmt::Formatter) -> crate::fmt::Result {\n+            fn fmt(&self, f: &mut crate::fmt::Formatter<'_>) -> crate::fmt::Result {\n                 use crate::mem;\n \n                 let sz = if self.size < 1 {1} else {self.size};"}, {"sha": "4536bbc94ad803e5d83117437d581d9a52541a25", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -196,7 +196,7 @@ impl ParseFloatError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseFloatError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }\n@@ -244,7 +244,7 @@ fn dec2flt<T: RawFloat>(s: &str) -> Result<T, ParseFloatError> {\n \n /// The main workhorse for the decimal-to-float conversion: Orchestrate all the preprocessing\n /// and figure out which algorithm should do the actual conversion.\n-fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n+fn convert<T: RawFloat>(mut decimal: Decimal<'_>) -> Result<T, ParseFloatError> {\n     simplify(&mut decimal);\n     if let Some(x) = trivial_cases(&decimal) {\n         return Ok(x);\n@@ -281,7 +281,7 @@ fn convert<T: RawFloat>(mut decimal: Decimal) -> Result<T, ParseFloatError> {\n \n /// Strip zeros where possible, even when this requires changing the exponent\n #[inline(always)]\n-fn simplify(decimal: &mut Decimal) {\n+fn simplify(decimal: &mut Decimal<'_>) {\n     let is_zero = &|&&d: &&u8| -> bool { d == b'0' };\n     // Trimming these zeros does not change anything but may enable the fast path (< 15 digits).\n     let leading_zeros = decimal.integral.iter().take_while(is_zero).count();\n@@ -306,7 +306,7 @@ fn simplify(decimal: &mut Decimal) {\n \n /// Returns a quick-an-dirty upper bound on the size (log10) of the largest value that Algorithm R\n /// and Algorithm M will compute while working on the given decimal.\n-fn bound_intermediate_digits(decimal: &Decimal, e: i64) -> u64 {\n+fn bound_intermediate_digits(decimal: &Decimal<'_>, e: i64) -> u64 {\n     // We don't need to worry too much about overflow here thanks to trivial_cases() and the\n     // parser, which filter out the most extreme inputs for us.\n     let f_len: u64 = decimal.integral.len() as u64 + decimal.fractional.len() as u64;\n@@ -325,7 +325,7 @@ fn bound_intermediate_digits(decimal: &Decimal, e: i64) -> u64 {\n }\n \n /// Detects obvious overflows and underflows without even looking at the decimal digits.\n-fn trivial_cases<T: RawFloat>(decimal: &Decimal) -> Option<T> {\n+fn trivial_cases<T: RawFloat>(decimal: &Decimal<'_>) -> Option<T> {\n     // There were zeros but they were stripped by simplify()\n     if decimal.integral.is_empty() && decimal.fractional.is_empty() {\n         return Some(T::ZERO);"}, {"sha": "cf3664a8748867a375802be4556a83a7b907e34c", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -44,7 +44,7 @@ pub enum ParseResult<'a> {\n \n /// Checks if the input string is a valid floating point number and if so, locate the integral\n /// part, the fractional part, and the exponent in it. Does not handle signs.\n-pub fn parse_decimal(s: &str) -> ParseResult {\n+pub fn parse_decimal(s: &str) -> ParseResult<'_> {\n     if s.is_empty() {\n         return Invalid;\n     }"}, {"sha": "c8a4ff7ca61e7cef706c5b11ac99e99d06183999", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -15,7 +15,7 @@ macro_rules! impl_nonzero_fmt {\n             #[$stability]\n             impl fmt::$Trait for $Ty {\n                 #[inline]\n-                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     self.get().fmt(f)\n                 }\n             }\n@@ -164,42 +164,42 @@ pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_display\", since = \"1.10.0\")]\n impl<T: fmt::Display> fmt::Display for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::Binary> fmt::Binary for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::Octal> fmt::Octal for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::LowerHex> fmt::LowerHex for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n \n #[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.0.fmt(f)\n     }\n }\n@@ -4423,7 +4423,7 @@ impl TryFromIntError {\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for TryFromIntError {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n@@ -4820,7 +4820,7 @@ impl ParseIntError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseIntError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.__description().fmt(f)\n     }\n }"}, {"sha": "a707f0cc0627acdd6c3cf404c0cb30e8380039b1", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -45,7 +45,7 @@ pub struct RangeFull;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for RangeFull {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"..\")\n     }\n }\n@@ -84,7 +84,7 @@ pub struct Range<Idx> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.start.fmt(fmt)?;\n         write!(fmt, \"..\")?;\n         self.end.fmt(fmt)?;\n@@ -186,7 +186,7 @@ pub struct RangeFrom<Idx> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.start.fmt(fmt)?;\n         write!(fmt, \"..\")?;\n         Ok(())\n@@ -270,7 +270,7 @@ pub struct RangeTo<Idx> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"..\")?;\n         self.end.fmt(fmt)?;\n         Ok(())\n@@ -473,7 +473,7 @@ impl<Idx> RangeInclusive<Idx> {\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.start.fmt(fmt)?;\n         write!(fmt, \"..=\")?;\n         self.end.fmt(fmt)?;\n@@ -611,7 +611,7 @@ pub struct RangeToInclusive<Idx> {\n \n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"..=\")?;\n         self.end.fmt(fmt)?;\n         Ok(())"}, {"sha": "9599491462e922607c199151fc1af0fe72f3014e", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -538,7 +538,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { inner: Item { opt: self.as_ref() } }\n     }\n \n@@ -559,7 +559,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         IterMut { inner: Item { opt: self.as_mut() } }\n     }\n "}, {"sha": "989fc96732a5ab789b6273c3174833b68d6cc162", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -86,7 +86,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// [`fmt::write`]: ../fmt/fn.write.html\n     #[unstable(feature = \"panic_info_message\", issue = \"44489\")]\n-    pub fn message(&self) -> Option<&fmt::Arguments> {\n+    pub fn message(&self) -> Option<&fmt::Arguments<'_>> {\n         self.message\n     }\n \n@@ -115,7 +115,7 @@ impl<'a> PanicInfo<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn location(&self) -> Option<&Location> {\n+    pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,\n         // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n@@ -124,7 +124,7 @@ impl<'a> PanicInfo<'a> {\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n impl fmt::Display for PanicInfo<'_> {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         formatter.write_str(\"panicked at \")?;\n         if let Some(message) = self.message {\n             write!(formatter, \"'{}', \", message)?\n@@ -249,7 +249,7 @@ impl<'a> Location<'a> {\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]\n impl fmt::Display for Location<'_> {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(formatter, \"{}:{}:{}\", self.file, self.line, self.col)\n     }\n }"}, {"sha": "15b7d69c58d24b09fc9abaa57daf3b91c80c07aa", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -65,7 +65,7 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n #[cfg_attr(    feature=\"panic_immediate_abort\" ,inline)]\n-pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u32)) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n     }\n@@ -74,7 +74,7 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n-        fn panic_impl(pi: &PanicInfo) -> !;\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n     let (file, line, col) = *file_line_col;"}, {"sha": "dbf3dcf03a3c0edf282cacf0fb0ddfb8b3481a43", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -602,21 +602,21 @@ impl<P: Receiver> Receiver for Pin<P> {}\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Debug> fmt::Debug for Pin<P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.pointer, f)\n     }\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Display> fmt::Display for Pin<P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.pointer, f)\n     }\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P: fmt::Pointer> fmt::Pointer for Pin<P> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.pointer, f)\n     }\n }"}, {"sha": "f05700a1db2852c928501298e35c83074a5f116a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2623,14 +2623,14 @@ macro_rules! fnptr_impls_safety_abi {\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt::Pointer::fmt(&(*self as *const ()), f)\n             }\n         }\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt::Pointer::fmt(&(*self as *const ()), f)\n             }\n         }\n@@ -2776,7 +2776,7 @@ pub struct Unique<T: ?Sized> {\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Debug for Unique<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n@@ -2876,7 +2876,7 @@ impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Uns\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: ?Sized> fmt::Pointer for Unique<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n@@ -3049,14 +3049,14 @@ impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: U\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Debug for NonNull<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }"}, {"sha": "bf8fd63b6446f3eaa081366195a98f46b5bd1e1e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -544,7 +544,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         Iter { inner: self.as_ref().ok() }\n     }\n \n@@ -569,7 +569,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         IterMut { inner: self.as_mut().ok() }\n     }\n "}, {"sha": "bf3dda48dc797521c6407104262897d0276a763f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -524,7 +524,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<'_, T> {\n         unsafe {\n             let ptr = self.as_ptr();\n             assume(!ptr.is_null());\n@@ -556,7 +556,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn iter_mut(&mut self) -> IterMut<T> {\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         unsafe {\n             let ptr = self.as_mut_ptr();\n             assume(!ptr.is_null());\n@@ -603,7 +603,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn windows(&self, size: usize) -> Windows<T> {\n+    pub fn windows(&self, size: usize) -> Windows<'_, T> {\n         assert!(size != 0);\n         Windows { v: self, size }\n     }\n@@ -637,7 +637,7 @@ impl<T> [T] {\n     /// [`rchunks`]: #method.rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chunks(&self, chunk_size: usize) -> Chunks<T> {\n+    pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n         assert!(chunk_size != 0);\n         Chunks { v: self, chunk_size }\n     }\n@@ -675,7 +675,7 @@ impl<T> [T] {\n     /// [`rchunks_mut`]: #method.rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> {\n+    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n         assert!(chunk_size != 0);\n         ChunksMut { v: self, chunk_size }\n     }\n@@ -712,7 +712,7 @@ impl<T> [T] {\n     /// [`rchunks_exact`]: #method.rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<T> {\n+    pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let len = self.len() - rem;\n@@ -757,7 +757,7 @@ impl<T> [T] {\n     /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<T> {\n+    pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let len = self.len() - rem;\n@@ -794,7 +794,7 @@ impl<T> [T] {\n     /// [`chunks`]: #method.chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks(&self, chunk_size: usize) -> RChunks<T> {\n+    pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n         assert!(chunk_size != 0);\n         RChunks { v: self, chunk_size }\n     }\n@@ -832,13 +832,13 @@ impl<T> [T] {\n     /// [`chunks_mut`]: #method.chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<T> {\n+    pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n         assert!(chunk_size != 0);\n         RChunksMut { v: self, chunk_size }\n     }\n \n     /// Returns an iterator over `chunk_size` elements of the slice at a time, starting at the\n-    /// beginning of the slice.\n+    /// end of the slice.\n     ///\n     /// The chunks are slices and do not overlap. If `chunk_size` does not divide the length of the\n     /// slice, then the last up to `chunk_size-1` elements will be omitted and can be retrieved\n@@ -849,7 +849,7 @@ impl<T> [T] {\n     ///\n     /// See [`rchunks`] for a variant of this iterator that also returns the remainder as a smaller\n     /// chunk, and [`chunks_exact`] for the same iterator but starting at the beginning of the\n-    /// slice of the slice.\n+    /// slice.\n     ///\n     /// # Panics\n     ///\n@@ -871,7 +871,7 @@ impl<T> [T] {\n     /// [`chunks_exact`]: #method.chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<T> {\n+    pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let (fst, snd) = self.split_at(rem);\n@@ -890,7 +890,7 @@ impl<T> [T] {\n     ///\n     /// See [`rchunks_mut`] for a variant of this iterator that also returns the remainder as a\n     /// smaller chunk, and [`chunks_exact_mut`] for the same iterator but starting at the beginning\n-    /// of the slice of the slice.\n+    /// of the slice.\n     ///\n     /// # Panics\n     ///\n@@ -916,7 +916,7 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n-    pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<T> {\n+    pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let (fst, snd) = self.split_at_mut(rem);\n@@ -1042,7 +1042,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn split<F>(&self, pred: F) -> Split<T, F>\n+    pub fn split<F>(&self, pred: F) -> Split<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         Split {\n@@ -1067,7 +1067,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F>\n+    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         SplitMut { v: self, pred, finished: false }\n@@ -1102,7 +1102,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn rsplit<F>(&self, pred: F) -> RSplit<T, F>\n+    pub fn rsplit<F>(&self, pred: F) -> RSplit<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplit { inner: self.split(pred) }\n@@ -1127,7 +1127,7 @@ impl<T> [T] {\n     ///\n     #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<T, F>\n+    pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplitMut { inner: self.split_mut(pred) }\n@@ -1154,7 +1154,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<T, F>\n+    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         SplitN {\n@@ -1184,7 +1184,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>\n+    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         SplitNMut {\n@@ -1217,7 +1217,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<T, F>\n+    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplitN {\n@@ -1248,7 +1248,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<T, F>\n+    pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<'_, T, F>\n         where F: FnMut(&T) -> bool\n     {\n         RSplitNMut {\n@@ -3284,7 +3284,7 @@ pub struct Iter<'a, T: 'a> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Iter\")\n             .field(&self.as_slice())\n             .finish()\n@@ -3386,7 +3386,7 @@ pub struct IterMut<'a, T: 'a> {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"IterMut\")\n             .field(&self.make_slice())\n             .finish()\n@@ -3493,7 +3493,7 @@ pub struct Split<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for Split<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Split\")\n             .field(\"v\", &self.v)\n             .field(\"finished\", &self.finished)\n@@ -3584,7 +3584,7 @@ pub struct SplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitMut\")\n             .field(\"v\", &self.v)\n             .field(\"finished\", &self.finished)\n@@ -3681,7 +3681,7 @@ pub struct RSplit<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplit<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplit\")\n             .field(\"v\", &self.inner.v)\n             .field(\"finished\", &self.inner.finished)\n@@ -3737,7 +3737,7 @@ pub struct RSplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplitMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplitMut\")\n             .field(\"v\", &self.inner.v)\n             .field(\"finished\", &self.inner.finished)\n@@ -3823,7 +3823,7 @@ pub struct SplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitN<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitN\")\n             .field(\"inner\", &self.inner)\n             .finish()\n@@ -3845,7 +3845,7 @@ pub struct RSplitN<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplitN<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplitN\")\n             .field(\"inner\", &self.inner)\n             .finish()\n@@ -3866,7 +3866,7 @@ pub struct SplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for SplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitNMut\")\n             .field(\"inner\", &self.inner)\n             .finish()\n@@ -3888,7 +3888,7 @@ pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n impl<T: fmt::Debug, P> fmt::Debug for RSplitNMut<'_, T, P> where P: FnMut(&T) -> bool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RSplitNMut\")\n             .field(\"inner\", &self.inner)\n             .finish()"}, {"sha": "b291579553a642b4c78097c15faa5f7d47d002c6", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -18,7 +18,7 @@ impl Utf8Lossy {\n         unsafe { mem::transmute(bytes) }\n     }\n \n-    pub fn chunks(&self) -> Utf8LossyChunksIter {\n+    pub fn chunks(&self) -> Utf8LossyChunksIter<'_> {\n         Utf8LossyChunksIter { source: &self.bytes }\n     }\n }\n@@ -138,7 +138,7 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n \n \n impl fmt::Display for Utf8Lossy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // If we're the empty string then our iterator won't actually yield\n         // anything, so perform the formatting manually\n         if self.bytes.len() == 0 {\n@@ -164,7 +164,7 @@ impl fmt::Display for Utf8Lossy {\n }\n \n impl fmt::Debug for Utf8Lossy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_char('\"')?;\n \n         for Utf8LossyChunk { valid, broken } in self.chunks() {"}, {"sha": "379c263c04ca6da1e048e0e256619dc823318487", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -146,7 +146,7 @@ pub struct ParseBoolError { _priv: () }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for ParseBoolError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         \"provided string was not `true` or `false`\".fmt(f)\n     }\n }\n@@ -439,7 +439,7 @@ pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Utf8Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let Some(error_len) = self.error_len {\n             write!(f, \"invalid utf-8 sequence of {} bytes from index {}\",\n                    error_len, self.valid_up_to)\n@@ -795,6 +795,11 @@ impl DoubleEndedIterator for Bytes<'_> {\n         self.0.next_back()\n     }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        self.0.nth_back(n)\n+    }\n+\n     #[inline]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item> where\n         P: FnMut(&Self::Item) -> bool\n@@ -914,7 +919,7 @@ macro_rules! generate_pattern_iterators {\n         impl<'a, P: Pattern<'a>> fmt::Debug for $forward_iterator<'a, P>\n             where P::Searcher: fmt::Debug\n         {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_tuple(stringify!($forward_iterator))\n                     .field(&self.0)\n                     .finish()\n@@ -948,7 +953,7 @@ macro_rules! generate_pattern_iterators {\n         impl<'a, P: Pattern<'a>> fmt::Debug for $reverse_iterator<'a, P>\n             where P::Searcher: fmt::Debug\n         {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_tuple(stringify!($reverse_iterator))\n                     .field(&self.0)\n                     .finish()\n@@ -1033,7 +1038,7 @@ struct SplitInternal<'a, P: Pattern<'a>> {\n }\n \n impl<'a, P: Pattern<'a>> fmt::Debug for SplitInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInternal\")\n             .field(\"start\", &self.start)\n             .field(\"end\", &self.end)\n@@ -1150,7 +1155,7 @@ struct SplitNInternal<'a, P: Pattern<'a>> {\n }\n \n impl<'a, P: Pattern<'a>> fmt::Debug for SplitNInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitNInternal\")\n             .field(\"iter\", &self.iter)\n             .field(\"count\", &self.count)\n@@ -1206,7 +1211,7 @@ derive_pattern_clone!{\n struct MatchIndicesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> fmt::Debug for MatchIndicesInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"MatchIndicesInternal\")\n             .field(&self.0)\n             .finish()\n@@ -1257,7 +1262,7 @@ derive_pattern_clone!{\n struct MatchesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> fmt::Debug for MatchesInternal<'a, P> where P::Searcher: fmt::Debug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"MatchesInternal\")\n             .field(&self.0)\n             .finish()\n@@ -2559,7 +2564,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn chars(&self) -> Chars {\n+    pub fn chars(&self) -> Chars<'_> {\n         Chars{iter: self.as_bytes().iter()}\n     }\n \n@@ -2614,7 +2619,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn char_indices(&self) -> CharIndices {\n+    pub fn char_indices(&self) -> CharIndices<'_> {\n         CharIndices { front_offset: 0, iter: self.chars() }\n     }\n \n@@ -2639,7 +2644,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn bytes(&self) -> Bytes {\n+    pub fn bytes(&self) -> Bytes<'_> {\n         Bytes(self.as_bytes().iter().cloned())\n     }\n \n@@ -2682,7 +2687,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n     #[inline]\n-    pub fn split_whitespace(&self) -> SplitWhitespace {\n+    pub fn split_whitespace(&self) -> SplitWhitespace<'_> {\n         SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }\n     }\n \n@@ -2723,7 +2728,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n     #[inline]\n-    pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace {\n+    pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace<'_> {\n         let inner = self\n             .as_bytes()\n             .split(IsAsciiWhitespace)\n@@ -2770,7 +2775,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn lines(&self) -> Lines {\n+    pub fn lines(&self) -> Lines<'_> {\n         Lines(self.split_terminator('\\n').map(LinesAnyMap))\n     }\n \n@@ -2779,7 +2784,7 @@ impl str {\n     #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]\n     #[inline]\n     #[allow(deprecated)]\n-    pub fn lines_any(&self) -> LinesAny {\n+    pub fn lines_any(&self) -> LinesAny<'_> {\n         LinesAny(self.lines())\n     }\n \n@@ -2798,7 +2803,7 @@ impl str {\n     /// assert!(utf16_len <= utf8_len);\n     /// ```\n     #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n-    pub fn encode_utf16(&self) -> EncodeUtf16 {\n+    pub fn encode_utf16(&self) -> EncodeUtf16<'_> {\n         EncodeUtf16 { chars: self.chars(), extra: 0 }\n     }\n \n@@ -4018,7 +4023,7 @@ impl str {\n     /// assert_eq!(\"\u2764\\n!\".escape_debug().to_string(), \"\u2764\\\\n!\");\n     /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_debug(&self) -> EscapeDebug {\n+    pub fn escape_debug(&self) -> EscapeDebug<'_> {\n         let mut chars = self.chars();\n         EscapeDebug {\n             inner: chars.next()\n@@ -4063,7 +4068,7 @@ impl str {\n     /// assert_eq!(\"\u2764\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n     /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_default(&self) -> EscapeDefault {\n+    pub fn escape_default(&self) -> EscapeDefault<'_> {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n     }\n \n@@ -4101,7 +4106,7 @@ impl str {\n     /// assert_eq!(\"\u2764\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n     /// ```\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n-    pub fn escape_unicode(&self) -> EscapeUnicode {\n+    pub fn escape_unicode(&self) -> EscapeUnicode<'_> {\n         EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }\n     }\n }\n@@ -4267,7 +4272,7 @@ pub struct EncodeUtf16<'a> {\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n impl fmt::Debug for EncodeUtf16<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.pad(\"EncodeUtf16 { .. }\")\n     }\n }\n@@ -4341,7 +4346,7 @@ macro_rules! escape_types_impls {\n     ($( $Name: ident ),+) => {$(\n         #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n         impl<'a> fmt::Display for $Name<'a> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 self.clone().try_for_each(|c| f.write_char(c))\n             }\n         }"}, {"sha": "ad9d956fda1c84d1309a4809d6a462b3822cfd4d", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -658,7 +658,7 @@ pub struct CharPredicateSearcher<'a, F>(<MultiCharEqPattern<F> as Pattern<'a>>::\n impl<F> fmt::Debug for CharPredicateSearcher<'_, F>\n     where F: FnMut(char) -> bool\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"CharPredicateSearcher\")\n             .field(\"haystack\", &self.0.haystack)\n             .field(\"char_indices\", &self.0.char_indices)"}, {"sha": "12414980d76b11b4af3c9832250e8aab781a7996", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1193,7 +1193,7 @@ macro_rules! atomic_int {\n \n         #[$stable_debug]\n         impl fmt::Debug for $atomic_type {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n             }\n         }\n@@ -2506,23 +2506,23 @@ pub fn compiler_fence(order: Ordering) {\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl fmt::Debug for AtomicBool {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n \n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl<T> fmt::Debug for AtomicPtr<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n \n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"atomic_pointer\", since = \"1.24.0\")]\n impl<T> fmt::Pointer for AtomicPtr<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }"}, {"sha": "94e31054a58129e0c41ea6acb10fe04203351b67", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -180,7 +180,7 @@ impl<'a> Context<'a> {\n }\n \n impl fmt::Debug for Context<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Context\")\n             .field(\"waker\", &self.waker)\n             .finish()\n@@ -283,7 +283,7 @@ impl Drop for Waker {\n }\n \n impl fmt::Debug for Waker {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let vtable_ptr = self.waker.vtable as *const RawWakerVTable;\n         f.debug_struct(\"Waker\")\n             .field(\"data\", &self.waker.data)"}, {"sha": "5247331fba24fa6ddf876a8e498eaf7a157220ac", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -389,6 +389,24 @@ fn test_iterator_enumerate_nth() {\n     assert_eq!(i, 3);\n }\n \n+#[test]\n+fn test_iterator_enumerate_nth_back() {\n+    let xs = [0, 1, 2, 3, 4, 5];\n+    let mut it = xs.iter().enumerate();\n+    while let Some((i, &x)) = it.nth_back(0) {\n+        assert_eq!(i, x);\n+    }\n+\n+    let mut it = xs.iter().enumerate();\n+    while let Some((i, &x)) = it.nth_back(1) {\n+        assert_eq!(i, x);\n+    }\n+\n+    let (i, &x) = xs.iter().enumerate().nth_back(3).unwrap();\n+    assert_eq!(i, x);\n+    assert_eq!(i, 2);\n+}\n+\n #[test]\n fn test_iterator_enumerate_count() {\n     let xs = [0, 1, 2, 3, 4, 5];"}, {"sha": "0f5f91f41a8cd11b5af61f729c5a13b9530b9249", "filename": "src/libcore/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -847,7 +847,7 @@ impl<'a> Sum<&'a Duration> for Duration {\n \n #[stable(feature = \"duration_debug_impl\", since = \"1.27.0\")]\n impl fmt::Debug for Duration {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         /// Formats a floating point number in decimal notation.\n         ///\n         /// The number is given as the `integer_part` and a fractional part.\n@@ -859,7 +859,7 @@ impl fmt::Debug for Duration {\n         /// of 10, everything else doesn't make sense. `fractional_part` has\n         /// to be less than `10 * divisor`!\n         fn fmt_decimal(\n-            f: &mut fmt::Formatter,\n+            f: &mut fmt::Formatter<'_>,\n             mut integer_part: u64,\n             mut fractional_part: u32,\n             mut divisor: u32,"}, {"sha": "42ad571cf283259d8ea496a4be57254634917b7d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -4685,6 +4685,14 @@ impl<'a> LoweringContext<'a> {\n                         Symbol::intern(\"try_trait\")\n                     ].into()),\n                 );\n+                let try_span = self.sess.source_map().end_point(e.span);\n+                let try_span = self.mark_span_with_reason(\n+                    CompilerDesugaringKind::QuestionMark,\n+                    try_span,\n+                    Some(vec![\n+                        Symbol::intern(\"try_trait\")\n+                    ].into()),\n+                );\n \n                 // `Try::into_result(<expr>)`\n                 let discr = {\n@@ -4729,14 +4737,14 @@ impl<'a> LoweringContext<'a> {\n                 //              return Try::from_error(From::from(err)),`\n                 let err_arm = {\n                     let err_ident = self.str_to_ident(\"err\");\n-                    let (err_local, err_local_nid) = self.pat_ident(e.span, err_ident);\n+                    let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n                     let from_expr = {\n                         let path = &[\"convert\", \"From\", \"from\"];\n                         let from = P(self.expr_std_path(\n-                                e.span, path, None, ThinVec::new()));\n-                        let err_expr = self.expr_ident(e.span, err_ident, err_local_nid);\n+                                try_span, path, None, ThinVec::new()));\n+                        let err_expr = self.expr_ident(try_span, err_ident, err_local_nid);\n \n-                        self.expr_call(e.span, from, hir_vec![err_expr])\n+                        self.expr_call(try_span, from, hir_vec![err_expr])\n                     };\n                     let from_err_expr =\n                         self.wrap_in_try_constructor(\"from_error\", from_expr, unstable_span);\n@@ -4745,7 +4753,7 @@ impl<'a> LoweringContext<'a> {\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n                         let target_id = Ok(self.lower_node_id(catch_node).hir_id);\n                         P(self.expr(\n-                            e.span,\n+                            try_span,\n                             hir::ExprKind::Break(\n                                 hir::Destination {\n                                     label: None,\n@@ -4756,10 +4764,10 @@ impl<'a> LoweringContext<'a> {\n                             thin_attrs,\n                         ))\n                     } else {\n-                        P(self.expr(e.span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n+                        P(self.expr(try_span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n                     };\n \n-                    let err_pat = self.pat_err(e.span, err_local);\n+                    let err_pat = self.pat_err(try_span, err_local);\n                     self.arm(hir_vec![err_pat], ret_expr)\n                 };\n "}, {"sha": "97a1c83dbffb600982990504bb5968efdcc1497e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1467,6 +1467,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"inject the given attribute in the crate\"),\n     self_profile: bool = (false, parse_bool, [UNTRACKED],\n         \"run the self profiler and output the raw event data\"),\n+    self_profile_events: Option<Vec<String>> = (None, parse_opt_comma_list, [UNTRACKED],\n+        \"specifies which kinds of events get recorded by the self profiler\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emits a section containing stack size metadata\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "54eb1d815d31a48b257de878aa28668303d58a7b", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -165,6 +165,10 @@ pub struct Session {\n \n     /// `Span`s of trait methods that weren't found to avoid emitting object safety errors\n     pub trait_methods_not_found: Lock<FxHashSet<Span>>,\n+\n+    /// Mapping from ident span to path span for paths that don't exist as written, but that\n+    /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n+    pub confused_type_with_std_module: Lock<FxHashMap<Span, Span>>,\n }\n \n pub struct PerfStats {\n@@ -1138,7 +1142,7 @@ fn build_session_(\n ) -> Session {\n     let self_profiler =\n         if sopts.debugging_opts.self_profile {\n-            let profiler = SelfProfiler::new();\n+            let profiler = SelfProfiler::new(&sopts.debugging_opts.self_profile_events);\n             match profiler {\n                 Ok(profiler) => {\n                     crate::ty::query::QueryName::register_with_profiler(&profiler);\n@@ -1248,6 +1252,7 @@ fn build_session_(\n         has_panic_handler: Once::new(),\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n+        confused_type_with_std_module: Lock::new(Default::default()),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "14c81a806c259fbcda9f11d648765aedb3baae51", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -638,6 +638,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let OnUnimplementedNote { message, label, note }\n                             = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n+                        let is_try = self.tcx.sess.source_map().span_to_snippet(span)\n+                            .map(|s| &s == \"?\")\n+                            .unwrap_or(false);\n+                        let is_from = format!(\"{}\", trait_ref).starts_with(\"std::convert::From<\");\n+                        let message = if is_try && is_from {\n+                            Some(format!(\n+                                \"`?` couldn't convert the error to `{}`\",\n+                                trait_ref.self_ty(),\n+                            ))\n+                        } else {\n+                            message\n+                        };\n \n                         let mut err = struct_span_err!(\n                             self.tcx.sess,"}, {"sha": "585970e64df8d65b1a73636af3a4dd688fe71a17", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 94, "deletions": 27, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -27,26 +27,42 @@ pub enum ProfileCategory {\n     Other,\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq)]\n-pub enum ProfilerEvent {\n-    QueryStart { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    QueryEnd { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    GenericActivityStart { category: ProfileCategory, label: Cow<'static, str>, time: u64 },\n-    GenericActivityEnd { category: ProfileCategory, label: Cow<'static, str>, time: u64 },\n-    IncrementalLoadResultStart { query_name: &'static str, time: u64 },\n-    IncrementalLoadResultEnd { query_name: &'static str, time: u64 },\n-    QueryCacheHit { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    QueryCount { query_name: &'static str, category: ProfileCategory, count: usize, time: u64 },\n-    QueryBlockedStart { query_name: &'static str, category: ProfileCategory, time: u64 },\n-    QueryBlockedEnd { query_name: &'static str, category: ProfileCategory, time: u64 },\n+bitflags! {\n+    struct EventFilter: u32 {\n+        const GENERIC_ACTIVITIES = 1 << 0;\n+        const QUERY_PROVIDERS    = 1 << 1;\n+        const QUERY_CACHE_HITS   = 1 << 2;\n+        const QUERY_BLOCKED      = 1 << 3;\n+        const INCR_CACHE_LOADS   = 1 << 4;\n+\n+        const DEFAULT = Self::GENERIC_ACTIVITIES.bits |\n+                        Self::QUERY_PROVIDERS.bits |\n+                        Self::QUERY_BLOCKED.bits |\n+                        Self::INCR_CACHE_LOADS.bits;\n+\n+        // empty() and none() aren't const-fns unfortunately\n+        const NONE = 0;\n+        const ALL  = !Self::NONE.bits;\n+    }\n }\n \n+const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n+    (\"none\", EventFilter::NONE),\n+    (\"all\", EventFilter::ALL),\n+    (\"generic-activity\", EventFilter::GENERIC_ACTIVITIES),\n+    (\"query-provider\", EventFilter::QUERY_PROVIDERS),\n+    (\"query-cache-hit\", EventFilter::QUERY_CACHE_HITS),\n+    (\"query-blocked\" , EventFilter::QUERY_BLOCKED),\n+    (\"incr-cache-load\", EventFilter::INCR_CACHE_LOADS),\n+];\n+\n fn thread_id_to_u64(tid: ThreadId) -> u64 {\n     unsafe { mem::transmute::<ThreadId, u64>(tid) }\n }\n \n pub struct SelfProfiler {\n     profiler: Profiler,\n+    event_filter_mask: EventFilter,\n     query_event_kind: StringId,\n     generic_activity_event_kind: StringId,\n     incremental_load_result_event_kind: StringId,\n@@ -55,7 +71,7 @@ pub struct SelfProfiler {\n }\n \n impl SelfProfiler {\n-    pub fn new() -> Result<SelfProfiler, Box<dyn Error>> {\n+    pub fn new(event_filters: &Option<Vec<String>>) -> Result<SelfProfiler, Box<dyn Error>> {\n         let filename = format!(\"pid-{}.rustc_profile\", process::id());\n         let path = std::path::Path::new(&filename);\n         let profiler = Profiler::new(path)?;\n@@ -66,8 +82,38 @@ impl SelfProfiler {\n         let query_blocked_event_kind = profiler.alloc_string(\"QueryBlocked\");\n         let query_cache_hit_event_kind = profiler.alloc_string(\"QueryCacheHit\");\n \n+        let mut event_filter_mask = EventFilter::empty();\n+\n+        if let Some(ref event_filters) = *event_filters {\n+            let mut unknown_events = vec![];\n+            for item in event_filters {\n+                if let Some(&(_, mask)) = EVENT_FILTERS_BY_NAME.iter()\n+                                                               .find(|&(name, _)| name == item) {\n+                    event_filter_mask |= mask;\n+                } else {\n+                    unknown_events.push(item.clone());\n+                }\n+            }\n+\n+            // Warn about any unknown event names\n+            if unknown_events.len() > 0 {\n+                unknown_events.sort();\n+                unknown_events.dedup();\n+\n+                warn!(\"Unknown self-profiler events specified: {}. Available options are: {}.\",\n+                    unknown_events.join(\", \"),\n+                    EVENT_FILTERS_BY_NAME.iter()\n+                                         .map(|&(name, _)| name.to_string())\n+                                         .collect::<Vec<_>>()\n+                                         .join(\", \"));\n+            }\n+        } else {\n+            event_filter_mask = EventFilter::DEFAULT;\n+        }\n+\n         Ok(SelfProfiler {\n             profiler,\n+            event_filter_mask,\n             query_event_kind,\n             generic_activity_event_kind,\n             incremental_load_result_event_kind,\n@@ -86,7 +132,6 @@ impl SelfProfiler {\n \n     pub fn register_query_name(&self, query_name: QueryName) {\n         let id = SelfProfiler::get_query_name_string_id(query_name);\n-\n         self.profiler.alloc_string_with_reserved_id(id, query_name.as_str());\n     }\n \n@@ -95,54 +140,76 @@ impl SelfProfiler {\n         &self,\n         label: impl Into<Cow<'static, str>>,\n     ) {\n-        self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::Start);\n+        if self.event_filter_mask.contains(EventFilter::GENERIC_ACTIVITIES) {\n+            self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::Start);\n+        }\n     }\n \n     #[inline]\n     pub fn end_activity(\n         &self,\n         label: impl Into<Cow<'static, str>>,\n     ) {\n-        self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::GENERIC_ACTIVITIES) {\n+            self.record(&label.into(), self.generic_activity_event_kind, TimestampKind::End);\n+        }\n     }\n \n     #[inline]\n     pub fn record_query_hit(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_cache_hit_event_kind, TimestampKind::Instant);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_CACHE_HITS) {\n+            self.record_query(query_name, self.query_cache_hit_event_kind, TimestampKind::Instant);\n+        }\n     }\n \n     #[inline]\n     pub fn start_query(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_event_kind, TimestampKind::Start);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_PROVIDERS) {\n+            self.record_query(query_name, self.query_event_kind, TimestampKind::Start);\n+        }\n     }\n \n     #[inline]\n     pub fn end_query(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_PROVIDERS) {\n+            self.record_query(query_name, self.query_event_kind, TimestampKind::End);\n+        }\n     }\n \n     #[inline]\n     pub fn incremental_load_result_start(&self, query_name: QueryName) {\n-        self.record_query(\n-            query_name,\n-            self.incremental_load_result_event_kind,\n-            TimestampKind::Start\n-        );\n+        if self.event_filter_mask.contains(EventFilter::INCR_CACHE_LOADS) {\n+            self.record_query(\n+                query_name,\n+                self.incremental_load_result_event_kind,\n+                TimestampKind::Start\n+            );\n+        }\n     }\n \n     #[inline]\n     pub fn incremental_load_result_end(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.incremental_load_result_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::INCR_CACHE_LOADS) {\n+            self.record_query(\n+                query_name,\n+                self.incremental_load_result_event_kind,\n+                TimestampKind::End\n+            );\n+        }\n     }\n \n     #[inline]\n     pub fn query_blocked_start(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::Start);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_BLOCKED) {\n+            self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::Start);\n+        }\n     }\n \n     #[inline]\n     pub fn query_blocked_end(&self, query_name: QueryName) {\n-        self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::End);\n+        if self.event_filter_mask.contains(EventFilter::QUERY_BLOCKED) {\n+            self.record_query(query_name, self.query_blocked_event_kind, TimestampKind::End);\n+        }\n     }\n \n     #[inline]"}, {"sha": "f88923fc9f1c5dc54e94062c6e68f51363f288ad", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1382,7 +1382,6 @@ extern \"C\" {\n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;\n     pub fn LLVMRustVersionMinor() -> u32;\n-    pub fn LLVMRustIsRustLLVM() -> bool;\n \n     pub fn LLVMRustAddModuleFlag(M: &Module, name: *const c_char, value: u32);\n "}, {"sha": "fe21b19b52a3d4ba4eef5c63340f50e9170fbbc4", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -61,7 +61,7 @@ unsafe fn configure_llvm(sess: &Session) {\n         if sess.opts.debugging_opts.disable_instrumentation_preinliner {\n             add(\"-disable-preinline\");\n         }\n-        if llvm::LLVMRustIsRustLLVM() {\n+        if get_major_version() >= 8 {\n             match sess.opts.debugging_opts.merge_functions\n                   .unwrap_or(sess.target.target.options.merge_functions) {\n                 MergeFunctions::Disabled |\n@@ -154,6 +154,7 @@ const X86_WHITELIST: &[(&str, Option<&str>)] = &[\n     (\"popcnt\", None),\n     (\"rdrand\", None),\n     (\"rdseed\", None),\n+    (\"rtm\", Some(\"rtm_target_feature\")),\n     (\"sha\", None),\n     (\"sse\", None),\n     (\"sse2\", None),"}, {"sha": "9b02f98164fdf9c0aba89153d9931c415b9d3e23", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -166,16 +166,18 @@ impl<'a> Resolver<'a> {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span, span);\n                 match candidate {\n                     AssocSuggestion::Field => {\n-                        err.span_suggestion(\n-                            span,\n-                            \"try\",\n-                            format!(\"self.{}\", path_str),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        if !self_is_available {\n-                            err.span_label(span, format!(\"`self` value is a keyword \\\n-                                                         only available in \\\n-                                                         methods with `self` parameter\"));\n+                        if self_is_available {\n+                            err.span_suggestion(\n+                                span,\n+                                \"you might have meant to use the available field\",\n+                                format!(\"self.{}\", path_str),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        } else {\n+                            err.span_label(\n+                                span,\n+                                \"a field by this name exists in `Self`\",\n+                            );\n                         }\n                     }\n                     AssocSuggestion::MethodWithSelf if self_is_available => {"}, {"sha": "8df83120738c154ee39a86e806b86750ed0f8cad", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -3273,6 +3273,25 @@ impl<'a> Resolver<'a> {\n                     let traits = self.get_traits_containing_item(item_name, ns);\n                     self.trait_map.insert(id, traits);\n                 }\n+\n+                let mut std_path = vec![Segment::from_ident(Ident::from_str(\"std\"))];\n+                std_path.extend(path);\n+                if self.primitive_type_table.primitive_types.contains_key(&path[0].ident.name) {\n+                    let cl = CrateLint::No;\n+                    let ns = Some(ns);\n+                    if let PathResult::Module(_) | PathResult::NonModule(_) =\n+                        self.resolve_path_without_parent_scope(&std_path, ns, false, span, cl)\n+                    {\n+                        // check if we wrote `str::from_utf8` instead of `std::str::from_utf8`\n+                        let item_span = path.iter().last().map(|segment| segment.ident.span)\n+                            .unwrap_or(span);\n+                        debug!(\"accessed item from `std` submodule as a bare type {:?}\", std_path);\n+                        let mut hm = self.session.confused_type_with_std_module.borrow_mut();\n+                        hm.insert(item_span, span);\n+                        // In some places (E0223) we only have access to the full path\n+                        hm.insert(span, span);\n+                    }\n+                }\n                 resolution\n             }\n             _ => report_errors(self, None)\n@@ -3387,16 +3406,17 @@ impl<'a> Resolver<'a> {\n     }\n \n     // Resolve in alternative namespaces if resolution in the primary namespace fails.\n-    fn resolve_qpath_anywhere(&mut self,\n-                              id: NodeId,\n-                              qself: Option<&QSelf>,\n-                              path: &[Segment],\n-                              primary_ns: Namespace,\n-                              span: Span,\n-                              defer_to_typeck: bool,\n-                              global_by_default: bool,\n-                              crate_lint: CrateLint)\n-                              -> Option<PathResolution> {\n+    fn resolve_qpath_anywhere(\n+        &mut self,\n+        id: NodeId,\n+        qself: Option<&QSelf>,\n+        path: &[Segment],\n+        primary_ns: Namespace,\n+        span: Span,\n+        defer_to_typeck: bool,\n+        global_by_default: bool,\n+        crate_lint: CrateLint,\n+    ) -> Option<PathResolution> {\n         let mut fin_res = None;\n         // FIXME: can't resolve paths in macro namespace yet, macros are\n         // processed by the little special hack below.\n@@ -3426,15 +3446,16 @@ impl<'a> Resolver<'a> {\n     }\n \n     /// Handles paths that may refer to associated items.\n-    fn resolve_qpath(&mut self,\n-                     id: NodeId,\n-                     qself: Option<&QSelf>,\n-                     path: &[Segment],\n-                     ns: Namespace,\n-                     span: Span,\n-                     global_by_default: bool,\n-                     crate_lint: CrateLint)\n-                     -> Option<PathResolution> {\n+    fn resolve_qpath(\n+        &mut self,\n+        id: NodeId,\n+        qself: Option<&QSelf>,\n+        path: &[Segment],\n+        ns: Namespace,\n+        span: Span,\n+        global_by_default: bool,\n+        crate_lint: CrateLint,\n+    ) -> Option<PathResolution> {\n         debug!(\n             \"resolve_qpath(id={:?}, qself={:?}, path={:?}, \\\n              ns={:?}, span={:?}, global_by_default={:?})\","}, {"sha": "be8e5dae1d9f9ff5a1db0099d6da4084f0ef801a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1187,18 +1187,33 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         ty\n     }\n \n-    fn report_ambiguous_associated_type(&self,\n-                                        span: Span,\n-                                        type_str: &str,\n-                                        trait_str: &str,\n-                                        name: &str) {\n-        struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\")\n-            .span_suggestion(\n+    fn report_ambiguous_associated_type(\n+        &self,\n+        span: Span,\n+        type_str: &str,\n+        trait_str: &str,\n+        name: &str,\n+    ) {\n+        let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n+        if let (Some(_), Ok(snippet)) = (\n+            self.tcx().sess.confused_type_with_std_module.borrow().get(&span),\n+            self.tcx().sess.source_map().span_to_snippet(span),\n+         ) {\n+            err.span_suggestion(\n                 span,\n-                \"use fully-qualified syntax\",\n-                format!(\"<{} as {}>::{}\", type_str, trait_str, name),\n-                Applicability::HasPlaceholders\n-            ).emit();\n+                \"you are looking for the module in `std`, not the primitive type\",\n+                format!(\"std::{}\", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            err.span_suggestion(\n+                    span,\n+                    \"use fully-qualified syntax\",\n+                    format!(\"<{} as {}>::{}\", type_str, trait_str, name),\n+                    Applicability::HasPlaceholders\n+            );\n+        }\n+        err.emit();\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n@@ -1391,10 +1406,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                     err.emit();\n                 } else if !qself_ty.references_error() {\n                     // Don't print `TyErr` to the user.\n-                    self.report_ambiguous_associated_type(span,\n-                                                          &qself_ty.to_string(),\n-                                                          \"Trait\",\n-                                                          &assoc_ident.as_str());\n+                    self.report_ambiguous_associated_type(\n+                        span,\n+                        &qself_ty.to_string(),\n+                        \"Trait\",\n+                        &assoc_ident.as_str(),\n+                    );\n                 }\n                 return (tcx.types.err, Def::Err);\n             }\n@@ -1461,10 +1478,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             ty\n         } else {\n             let path_str = tcx.def_path_str(trait_def_id);\n-            self.report_ambiguous_associated_type(span,\n-                                                  \"Type\",\n-                                                  &path_str,\n-                                                  &item_segment.ident.as_str());\n+            self.report_ambiguous_associated_type(\n+                span,\n+                \"Type\",\n+                &path_str,\n+                &item_segment.ident.as_str(),\n+            );\n             return tcx.types.err;\n         };\n "}, {"sha": "7121b06e27a0f07af568e98642af2ede29c8ce5f", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -292,15 +292,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         return;\n                     } else {\n                         span = item_name.span;\n-                        struct_span_err!(\n+                        let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             item_kind,\n                             item_name,\n                             ty_str\n-                        )\n+                        );\n+                        if let Some(span) = tcx.sess.confused_type_with_std_module.borrow()\n+                            .get(&span)\n+                        {\n+                            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(*span) {\n+                                err.span_suggestion(\n+                                    *span,\n+                                    \"you are looking for the module in `std`, \\\n+                                     not the primitive type\",\n+                                    format!(\"std::{}\", snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                        }\n+                        err\n                     }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()"}, {"sha": "37be1c3b5b7fa015d8fc54c5b063ef8955f68154", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -938,17 +938,20 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         .map(|(index, _)| Parameter(index as u32))\n                         .collect();\n \n-    identify_constrained_generic_params(tcx,\n-                                     &ty_predicates,\n-                                     None,\n-                                     &mut constrained_parameters);\n+    identify_constrained_generic_params(\n+        tcx,\n+        &ty_predicates,\n+        None,\n+        &mut constrained_parameters,\n+    );\n \n     for (index, _) in variances.iter().enumerate() {\n         if constrained_parameters.contains(&Parameter(index as u32)) {\n             continue;\n         }\n \n         let param = &hir_generics.params[index];\n+\n         match param.name {\n             hir::ParamName::Error => { }\n             _ => report_bivariance(tcx, param.span, param.name.ident().name),\n@@ -1123,7 +1126,7 @@ fn error_392<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, param_name: ast:\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,\n                   \"parameter `{}` is never used\", param_name);\n-    err.span_label(span, \"unused type parameter\");\n+    err.span_label(span, \"unused parameter\");\n     err\n }\n "}, {"sha": "d601c962fc6afd22c753cb6ab049dcba0b7c9793", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2432,6 +2432,7 @@ fn from_target_feature(\n                 Some(\"cmpxchg16b_target_feature\") => rust_features.cmpxchg16b_target_feature,\n                 Some(\"adx_target_feature\") => rust_features.adx_target_feature,\n                 Some(\"movbe_target_feature\") => rust_features.movbe_target_feature,\n+                Some(\"rtm_target_feature\") => rust_features.rtm_target_feature,\n                 Some(name) => bug!(\"unknown target feature gate {}\", name),\n                 None => true,\n             };"}, {"sha": "53b08cf56978352ba472d921f03ee5bf4d9ff95a", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -166,7 +166,6 @@ nav.sub {\n \ttop: 0;\n \theight: 100vh;\n \toverflow: auto;\n-\tz-index: 1;\n }\n \n .sidebar .block > ul > li {"}, {"sha": "1772879d01362eb167907967d8983da09d6f1813", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -901,8 +901,7 @@ impl OpenOptions {\n     }\n \n     fn _open(&self, path: &Path) -> io::Result<File> {\n-        let inner = fs_imp::File::open(path, &self.0)?;\n-        Ok(File { inner })\n+        fs_imp::File::open(path, &self.0).map(|inner| File { inner })\n     }\n }\n "}, {"sha": "fce28ffd9c3880714fab7b8727459e6efd74f5cf", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -269,7 +269,7 @@ impl Builder {\n     ///\n     /// let builder = thread::Builder::new()\n     ///                               .name(\"foo\".into())\n-    ///                               .stack_size(10);\n+    ///                               .stack_size(32 * 1024);\n     ///\n     /// let handler = builder.spawn(|| {\n     ///     // thread code"}, {"sha": "7bae5ba75719a0544b0faf789fbbd91ec67854bb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -402,6 +402,7 @@ declare_features! (\n     (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n     (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n     (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n+    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n \n     // Allows macro invocations on modules expressions and statements and\n     // procedural macros to expand to non-items."}, {"sha": "66453c08a66ef2b6ee7a0444b56b9b25978d479c", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -613,14 +613,6 @@ extern \"C\" uint32_t LLVMRustVersionMinor() { return LLVM_VERSION_MINOR; }\n \n extern \"C\" uint32_t LLVMRustVersionMajor() { return LLVM_VERSION_MAJOR; }\n \n-extern \"C\" bool LLVMRustIsRustLLVM() {\n-#ifdef LLVM_RUSTLLVM\n-  return 1;\n-#else\n-  return 0;\n-#endif\n-}\n-\n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n                                       uint32_t Value) {\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);"}, {"sha": "25cb85dadb903dcae01f9193a74aad1b6d130157", "filename": "src/test/ui/class-missing-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-missing-self.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find value `meows` in this scope\n   --> $DIR/class-missing-self.rs:9:7\n    |\n LL |       meows += 1;\n-   |       ^^^^^ help: try: `self.meows`\n+   |       ^^^^^ help: you might have meant to use the available field: `self.meows`\n \n error[E0425]: cannot find function `sleep` in this scope\n   --> $DIR/class-missing-self.rs:10:7"}, {"sha": "d0b808df184c4bcb7c07414ea05354f790e07481", "filename": "src/test/ui/error-codes/E0392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,7 +2,7 @@ error[E0392]: parameter `T` is never used\n   --> $DIR/E0392.rs:1:10\n    |\n LL | enum Foo<T> { Bar }\n-   |          ^ unused type parameter\n+   |          ^ unused parameter\n    |\n    = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "083b4b67eb459159358c3dbc7f754a5e02d07348", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -12,7 +12,7 @@ error[E0392]: parameter `T` is never used\n   --> $DIR/inner-static-type-parameter.rs:3:10\n    |\n LL | enum Bar<T> { What }\n-   |          ^ unused type parameter\n+   |          ^ unused parameter\n    |\n    = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "930409cc6372767b3e530f8ccad434d957d3491c", "filename": "src/test/ui/issues/issue-17904-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,7 +2,7 @@ error[E0392]: parameter `T` is never used\n   --> $DIR/issue-17904-2.rs:4:12\n    |\n LL | struct Foo<T> where T: Copy;\n-   |            ^ unused type parameter\n+   |            ^ unused parameter\n    |\n    = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "6ef806cd66821adfaa69dc36fd106699e7da427f", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,7 +2,7 @@ error[E0392]: parameter `T` is never used\n   --> $DIR/issue-20413.rs:5:15\n    |\n LL | struct NoData<T>;\n-   |               ^ unused type parameter\n+   |               ^ unused parameter\n    |\n    = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "e0e8b5e18a42d4625d2b6e7f50dc296d27dfae48", "filename": "src/test/ui/issues/issue-22933-3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-3.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -3,6 +3,10 @@ error[E0599]: no associated item named `MIN` found for type `u8` in the current\n    |\n LL | const FOO: [u32; u8::MIN as usize] = [];\n    |                      ^^^ associated item not found in `u8`\n+help: you are looking for the module in `std`, not the primitive type\n+   |\n+LL | const FOO: [u32; std::u8::MIN as usize] = [];\n+   |                  ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "84cca5b20af472d800fcc13e5c2ce366ec000683", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): std::convert::From<{integer}>` is not satisfied\n-  --> $DIR/issue-32709.rs:4:5\n+error[E0277]: `?` couldn't convert the error to `()`\n+  --> $DIR/issue-32709.rs:4:11\n    |\n LL |     Err(5)?;\n-   |     ^^^^^^^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n+   |           ^ the trait `std::convert::From<{integer}>` is not implemented for `()`\n    |\n    = note: required by `std::convert::From::from`\n "}, {"sha": "edbe790a0c9f6b42963bac76b093beddba241475", "filename": "src/test/ui/issues/issue-36299.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,15 +2,15 @@ error[E0392]: parameter `'a` is never used\n   --> $DIR/issue-36299.rs:1:12\n    |\n LL | struct Foo<'a, A> {}\n-   |            ^^ unused type parameter\n+   |            ^^ unused parameter\n    |\n    = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/issue-36299.rs:1:16\n    |\n LL | struct Foo<'a, A> {}\n-   |                ^ unused type parameter\n+   |                ^ unused parameter\n    |\n    = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "2e44086161110750cffbab6565a8543c08b99f09", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -14,7 +14,7 @@ error[E0392]: parameter `Self` is never used\n   --> $DIR/issue-36638.rs:3:12\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ unused type parameter\n+   |            ^^^^ unused parameter\n    |\n    = help: consider removing `Self` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "741e93561bc54a29019b8c1f2c511cc95781b3f6", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -18,7 +18,7 @@ error[E0392]: parameter `T` is never used\n   --> $DIR/issue-37534.rs:1:12\n    |\n LL | struct Foo<T: ?Hash> { }\n-   |            ^ unused type parameter\n+   |            ^ unused parameter\n    |\n    = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "3027d01c5325bd41f5d1159b878cb29d59fb319b", "filename": "src/test/ui/issues/issue-60057.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -0,0 +1,17 @@\n+struct A {\n+    banana: u8,\n+}\n+\n+impl A {\n+    fn new(peach: u8) -> A {\n+        A {\n+            banana: banana //~ ERROR cannot find value `banana` in this scope\n+        }\n+    }\n+\n+    fn foo(&self, peach: u8) -> A {\n+        A {\n+            banana: banana //~ ERROR cannot find value `banana` in this scope\n+        }\n+    }\n+}"}, {"sha": "6b967204ce6fb6f685f6ff116c5f1209c374bee1", "filename": "src/test/ui/issues/issue-60057.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -0,0 +1,20 @@\n+error[E0425]: cannot find value `banana` in this scope\n+  --> $DIR/issue-60057.rs:8:21\n+   |\n+LL |             banana: banana\n+   |                     ^^^^^^ a field by this name exists in `Self`\n+\n+error[E0425]: cannot find value `banana` in this scope\n+  --> $DIR/issue-60057.rs:14:21\n+   |\n+LL |             banana: banana\n+   |                     ^^^^^^ help: you might have meant to use the available field: `self.banana`\n+\n+error[E0601]: `main` function not found in crate `issue_60057`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-60057.rs`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0425, E0601.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "8bcb2da4577926cbf2e2e02d351420747a8d7958", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -25,7 +25,7 @@ error[E0392]: parameter `'c` is never used\n   --> $DIR/region-bounds-on-objects-and-type-parameters.rs:11:18\n    |\n LL | struct Foo<'a,'b,'c> {\n-   |                  ^^ unused type parameter\n+   |                  ^^ unused parameter\n    |\n    = help: consider removing `'c` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "97d42aa8ef4a5e166b61bdfeeda38744b682d445", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -20,13 +20,13 @@ error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:30:9\n    |\n LL |         x;\n-   |         ^ help: try: `self.x`\n+   |         ^ help: you might have meant to use the available field: `self.x`\n \n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-14254.rs:32:9\n    |\n LL |         y;\n-   |         ^ help: try: `self.y`\n+   |         ^ help: you might have meant to use the available field: `self.y`\n \n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:34:9\n@@ -56,13 +56,13 @@ error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:47:9\n    |\n LL |         x;\n-   |         ^ help: try: `self.x`\n+   |         ^ help: you might have meant to use the available field: `self.x`\n \n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/issue-14254.rs:49:9\n    |\n LL |         y;\n-   |         ^ help: try: `self.y`\n+   |         ^ help: you might have meant to use the available field: `self.y`\n \n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:51:9"}, {"sha": "7790383843e17743a1c0cc99f619c4b783484e2c", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -20,10 +20,7 @@ error[E0425]: cannot find value `whiskers` in this scope\n   --> $DIR/issue-2356.rs:39:5\n    |\n LL |     whiskers -= other;\n-   |     ^^^^^^^^\n-   |     |\n-   |     `self` value is a keyword only available in methods with `self` parameter\n-   |     help: try: `self.whiskers`\n+   |     ^^^^^^^^ a field by this name exists in `Self`\n \n error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:41:5\n@@ -83,16 +80,13 @@ error[E0425]: cannot find value `whiskers` in this scope\n   --> $DIR/issue-2356.rs:79:5\n    |\n LL |     whiskers = 0;\n-   |     ^^^^^^^^ help: try: `self.whiskers`\n+   |     ^^^^^^^^ help: you might have meant to use the available field: `self.whiskers`\n \n error[E0425]: cannot find value `whiskers` in this scope\n   --> $DIR/issue-2356.rs:84:5\n    |\n LL |     whiskers = 4;\n-   |     ^^^^^^^^\n-   |     |\n-   |     `self` value is a keyword only available in methods with `self` parameter\n-   |     help: try: `self.whiskers`\n+   |     ^^^^^^^^ a field by this name exists in `Self`\n \n error[E0425]: cannot find function `purr_louder` in this scope\n   --> $DIR/issue-2356.rs:86:5"}, {"sha": "87040015b8d805add6bd2b422e4429b97420abc5", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -14,7 +14,7 @@ error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:20:9\n    |\n LL |         field;\n-   |         ^^^^^ help: try: `self.field`\n+   |         ^^^^^ help: you might have meant to use the available field: `self.field`\n \n error[E0412]: cannot find type `Type` in this scope\n   --> $DIR/resolve-assoc-suggestions.rs:23:16"}, {"sha": "892b50309a905daeab7848418c6196bb9332729b", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -14,7 +14,7 @@ error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:23:9\n    |\n LL |         field;\n-   |         ^^^^^ help: try: `self.field`\n+   |         ^^^^^ help: you might have meant to use the available field: `self.field`\n \n error[E0425]: cannot find function `method` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:25:9"}, {"sha": "06926b53ddd35e3eee1319df19a4a5f4b8e7dc8f", "filename": "src/test/ui/resolve/unresolved_static_type_field.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,10 +2,7 @@ error[E0425]: cannot find value `cx` in this scope\n   --> $DIR/unresolved_static_type_field.rs:9:11\n    |\n LL |         f(cx);\n-   |           ^^\n-   |           |\n-   |           `self` value is a keyword only available in methods with `self` parameter\n-   |           help: try: `self.cx`\n+   |           ^^ a field by this name exists in `Self`\n \n error: aborting due to previous error\n "}, {"sha": "e0df00ffa9299ab818189e00efc3f25a84b31efa", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -62,7 +62,7 @@ error[E0392]: parameter `'Self` is never used\n   --> $DIR/self_type_keyword.rs:8:12\n    |\n LL | struct Bar<'Self>;\n-   |            ^^^^^ unused type parameter\n+   |            ^^^^^ unused parameter\n    |\n    = help: consider removing `'Self` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "9ca68a635da96ad85247aaa0f36f10f260b6aab7", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let pi = f32::consts::PI; //~ ERROR ambiguous associated type\n+    let bytes = \"hello world\".as_bytes();\n+    let string = unsafe {\n+        str::from_utf8(bytes) //~ ERROR no function or associated item named `from_utf8` found\n+    };\n+}"}, {"sha": "eecb4e60f9d5990fceae61f4eb9e23b4cfdcdbfd", "filename": "src/test/ui/suggestions/suggest-std-when-using-type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-std-when-using-type.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -0,0 +1,24 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/suggest-std-when-using-type.rs:2:14\n+   |\n+LL |     let pi = f32::consts::PI;\n+   |              ^^^^^^^^^^^^^^^\n+help: you are looking for the module in `std`, not the primitive type\n+   |\n+LL |     let pi = std::f32::consts::PI;\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0599]: no function or associated item named `from_utf8` found for type `str` in the current scope\n+  --> $DIR/suggest-std-when-using-type.rs:5:14\n+   |\n+LL |         str::from_utf8(bytes)\n+   |              ^^^^^^^^^ function or associated item not found in `str`\n+help: you are looking for the module in `std`, not the primitive type\n+   |\n+LL |         std::str::from_utf8(bytes)\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0223, E0599.\n+For more information about an error, try `rustc --explain E0223`."}, {"sha": "8f3a52ba5d677a8c46c83955734f2c1197c51805", "filename": "src/test/ui/target-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -23,6 +23,7 @@\n // gate-test-adx_target_feature\n // gate-test-cmpxchg16b_target_feature\n // gate-test-movbe_target_feature\n+// gate-test-rtm_target_feature\n // min-llvm-version 6.0\n \n #[target_feature(enable = \"avx512bw\")]"}, {"sha": "e142125225fb4830d68d5520fe3b5c9d36d4d9a9", "filename": "src/test/ui/target-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/target-feature-gate.rs:28:18\n+  --> $DIR/target-feature-gate.rs:29:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "4dfc8e6a2fca497f1dc77ebb8fffd8ec957ce4dd", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -4,7 +4,7 @@\n \n pub fn main() {\n     let res: Result<u32, i32> = try {\n-        Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n+        Err(\"\")?; //~ ERROR `?` couldn't convert the error\n         5\n     };\n "}, {"sha": "7c7366df1dc3ed6b59eac7c13fbf3b20c8ee6f18", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `i32: std::convert::From<&str>` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:7:9\n+error[E0277]: `?` couldn't convert the error to `i32`\n+  --> $DIR/try-block-bad-type.rs:7:16\n    |\n LL |         Err(\"\")?;\n-   |         ^^^^^^^^ the trait `std::convert::From<&str>` is not implemented for `i32`\n+   |                ^ the trait `std::convert::From<&str>` is not implemented for `i32`\n    |\n    = help: the following implementations were found:\n              <i32 as std::convert::From<bool>>"}, {"sha": "5d94cee8e37215406317b5e84a2ae5064b16e9c9", "filename": "src/test/ui/try-on-option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.rs?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -4,12 +4,12 @@ fn main() {}\n \n fn foo() -> Result<u32, ()> {\n     let x: Option<u32> = None;\n-    x?; //~ the trait bound\n+    x?; //~ ERROR `?` couldn't convert the error\n     Ok(22)\n }\n \n fn bar() -> u32 {\n     let x: Option<u32> = None;\n-    x?; //~ the `?` operator\n+    x?; //~ ERROR the `?` operator\n     22\n }"}, {"sha": "4465fbe14b75cd39f2f9b3265dd245f4738b9f8a", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): std::convert::From<std::option::NoneError>` is not satisfied\n-  --> $DIR/try-on-option.rs:7:5\n+error[E0277]: `?` couldn't convert the error to `()`\n+  --> $DIR/try-on-option.rs:7:6\n    |\n LL |     x?;\n-   |     ^^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n+   |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n    |\n    = note: required by `std::convert::From::from`\n "}, {"sha": "21ff475663c6c8ca0f4f61db6fd3583fe0d2aae0", "filename": "src/test/ui/variance/variance-regions-unused-direct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,15 +2,15 @@ error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-regions-unused-direct.rs:5:18\n    |\n LL | struct Bivariant<'a>;\n-   |                  ^^ unused type parameter\n+   |                  ^^ unused parameter\n    |\n    = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'d` is never used\n   --> $DIR/variance-regions-unused-direct.rs:7:19\n    |\n LL | struct Struct<'a, 'd> {\n-   |                   ^^ unused type parameter\n+   |                   ^^ unused parameter\n    |\n    = help: consider removing `'d` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "fd66217f692f10b6afde9ba073f1b19f6fc83db2", "filename": "src/test/ui/variance/variance-regions-unused-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,15 +2,15 @@ error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-regions-unused-indirect.rs:3:10\n    |\n LL | enum Foo<'a> {\n-   |          ^^ unused type parameter\n+   |          ^^ unused parameter\n    |\n    = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-regions-unused-indirect.rs:7:10\n    |\n LL | enum Bar<'a> {\n-   |          ^^ unused type parameter\n+   |          ^^ unused parameter\n    |\n    = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "a96b2338bf4282059d8b811464377e56fecaa236", "filename": "src/test/ui/variance/variance-unused-region-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,15 +2,15 @@ error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-unused-region-param.rs:3:19\n    |\n LL | struct SomeStruct<'a> { x: u32 }\n-   |                   ^^ unused type parameter\n+   |                   ^^ unused parameter\n    |\n    = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-unused-region-param.rs:4:15\n    |\n LL | enum SomeEnum<'a> { Nothing }\n-   |               ^^ unused type parameter\n+   |               ^^ unused parameter\n    |\n    = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "883db462986246b484835aa262d5e0028f72d3d3", "filename": "src/test/ui/variance/variance-unused-type-param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/316a391dcb7d66dc25f1f9a4ec9d368ef7615005/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -2,23 +2,23 @@ error[E0392]: parameter `A` is never used\n   --> $DIR/variance-unused-type-param.rs:6:19\n    |\n LL | struct SomeStruct<A> { x: u32 }\n-   |                   ^ unused type parameter\n+   |                   ^ unused parameter\n    |\n    = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/variance-unused-type-param.rs:9:15\n    |\n LL | enum SomeEnum<A> { Nothing }\n-   |               ^ unused type parameter\n+   |               ^ unused parameter\n    |\n    = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/variance-unused-type-param.rs:13:15\n    |\n LL | enum ListCell<T> {\n-   |               ^ unused type parameter\n+   |               ^ unused parameter\n    |\n    = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n "}, {"sha": "7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1 +1 @@\n-Subproject commit ae9e9cb47c7b79d8bb29fab90929bd9b3606348a\n+Subproject commit 7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee"}, {"sha": "b860feaffccb81199c045e9b1511c2e25825dc0c", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=316a391dcb7d66dc25f1f9a4ec9d368ef7615005", "patch": "@@ -1 +1 @@\n-Subproject commit 09940a70d0a9fabfb4985426aa7d66ca1875c65e\n+Subproject commit b860feaffccb81199c045e9b1511c2e25825dc0c"}]}