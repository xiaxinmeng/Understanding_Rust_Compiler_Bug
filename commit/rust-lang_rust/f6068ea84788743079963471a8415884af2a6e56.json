{"sha": "f6068ea84788743079963471a8415884af2a6e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MDY4ZWE4NDc4ODc0MzA3OTk2MzQ3MWE4NDE1ODg0YWYyYTZlNTY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-29T16:27:05Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-03T13:11:18Z"}, "message": "fix ICEs with RUST_LOG", "tree": {"sha": "8eaa61d69c45638549e0b9da38c693a29f84a70c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eaa61d69c45638549e0b9da38c693a29f84a70c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6068ea84788743079963471a8415884af2a6e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6068ea84788743079963471a8415884af2a6e56", "html_url": "https://github.com/rust-lang/rust/commit/f6068ea84788743079963471a8415884af2a6e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6068ea84788743079963471a8415884af2a6e56/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fff19528b80e4d2600c8866937bb70e9482e13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fff19528b80e4d2600c8866937bb70e9482e13b", "html_url": "https://github.com/rust-lang/rust/commit/4fff19528b80e4d2600c8866937bb70e9482e13b"}], "stats": {"total": 98, "additions": 66, "deletions": 32}, "files": [{"sha": "d85ea961462276a8ee7d74c909b640d1e9c0621d", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -163,6 +163,7 @@ pub trait CrateStore<'tcx> {\n                      -> ty::TypeScheme<'tcx>;\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;\n     fn item_name(&self, def: DefId) -> ast::Name;\n+    fn opt_item_name(&self, def: DefId) -> Option<ast::Name>;\n     fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> ty::GenericPredicates<'tcx>;\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n@@ -345,6 +346,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n         bug!(\"visible_parent_map\")\n     }\n     fn item_name(&self, def: DefId) -> ast::Name { bug!(\"item_name\") }\n+    fn opt_item_name(&self, def: DefId) -> Option<ast::Name> { bug!(\"opt_item_name\") }\n     fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> ty::GenericPredicates<'tcx> { bug!(\"item_predicates\") }\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)"}, {"sha": "1cd837e4853b01745c97d186b3316fe230b99cb9", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -942,7 +942,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         ppaux::parameterized(fmt, substs, variant_def.did,\n                                              ppaux::Ns::Value, &[],\n                                              |tcx| {\n-                            tcx.lookup_item_type(variant_def.did).generics\n+                            Some(tcx.lookup_item_type(variant_def.did).generics)\n                         })?;\n \n                         match variant_def.kind() {\n@@ -1034,8 +1034,9 @@ impl<'tcx> Debug for Literal<'tcx> {\n         use self::Literal::*;\n         match *self {\n             Item { def_id, substs } => {\n-                ppaux::parameterized(fmt, substs, def_id, ppaux::Ns::Value, &[],\n-                                     |tcx| tcx.lookup_item_type(def_id).generics)\n+                ppaux::parameterized(\n+                    fmt, substs, def_id, ppaux::Ns::Value, &[],\n+                    |tcx| Some(tcx.lookup_item_type(def_id).generics))\n             }\n             Value { ref value } => {\n                 write!(fmt, \"const \")?;"}, {"sha": "74c05feb6d16a5822464da1319f591f3b8d62b69", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -13,6 +13,7 @@ use middle::cstore::LOCAL_CRATE;\n use hir::def_id::{DefId, CRATE_DEF_INDEX};\n use ty::{self, Ty, TyCtxt};\n use syntax::ast;\n+use syntax::parse::token;\n \n use std::cell::Cell;\n \n@@ -138,7 +139,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            cur_path.push(self.sess.cstore.item_name(cur_def));\n+            cur_path.push(self.sess.cstore.opt_item_name(cur_def).unwrap_or_else(||\n+                token::intern(\"<unnamed>\")));\n             match visible_parent_map.get(&cur_def) {\n                 Some(&def) => cur_def = def,\n                 None => return false,"}, {"sha": "8f42ca2abb92f0f68b6bcc2e813f9d3aa57ce5ac", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -2480,6 +2480,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             || self.sess.cstore.item_type(self.global_tcx(), did))\n     }\n \n+    pub fn opt_lookup_item_type(self, did: DefId) -> Option<TypeScheme<'gcx>> {\n+        if let Some(scheme) = self.tcache.borrow_mut().get(&did) {\n+            return Some(scheme.clone());\n+        }\n+\n+        if did.krate == LOCAL_CRATE {\n+            None\n+        } else {\n+            Some(self.sess.cstore.item_type(self.global_tcx(), did))\n+        }\n+    }\n+\n     /// Given the did of a trait, returns its canonical trait ref.\n     pub fn lookup_trait_def(self, did: DefId) -> &'gcx TraitDef<'gcx> {\n         lookup_locally_or_in_crate_store("}, {"sha": "bbee7afce7183a1a5e2a47fbf3c67d4c5e8e1a31", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -69,15 +69,12 @@ pub enum Ns {\n     Value\n }\n \n-fn number_of_supplied_defaults<'a, 'gcx, 'tcx, GG>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                                   substs: &subst::Substs,\n-                                                   space: subst::ParamSpace,\n-                                                   get_generics: GG)\n-                                                   -> usize\n-    where GG: FnOnce(TyCtxt<'a, 'gcx, 'tcx>) -> ty::Generics<'tcx>\n+fn number_of_supplied_defaults<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                               substs: &subst::Substs,\n+                                               space: subst::ParamSpace,\n+                                               generics: ty::Generics<'tcx>)\n+                                               -> usize\n {\n-    let generics = get_generics(tcx);\n-\n     let has_self = substs.self_ty().is_some();\n     let ty_params = generics.types.get_slice(space);\n     let tps = substs.types.get_slice(space);\n@@ -115,7 +112,8 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n                          projections: &[ty::ProjectionPredicate],\n                          get_generics: GG)\n                          -> fmt::Result\n-    where GG: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'a, 'gcx, 'tcx>) -> ty::Generics<'tcx>\n+    where GG: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'a, 'gcx, 'tcx>)\n+                                         -> Option<ty::Generics<'tcx>>\n {\n     if let (Ns::Value, Some(self_ty)) = (ns, substs.self_ty()) {\n         write!(f, \"<{} as \", self_ty)?;\n@@ -176,13 +174,12 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n     let num_supplied_defaults = if verbose {\n         0\n     } else {\n-        // It is important to execute this conditionally, only if -Z\n-        // verbose is false. Otherwise, debug logs can sometimes cause\n-        // ICEs trying to fetch the generics early in the pipeline. This\n-        // is kind of a hacky workaround in that -Z verbose is required to\n-        // avoid those ICEs.\n         ty::tls::with(|tcx| {\n-            number_of_supplied_defaults(tcx, substs, subst::TypeSpace, get_generics)\n+            if let Some(generics) = get_generics(tcx) {\n+                number_of_supplied_defaults(tcx, substs, subst::TypeSpace, generics)\n+            } else {\n+                0\n+            }\n         })\n     };\n \n@@ -310,7 +307,7 @@ impl<'tcx> fmt::Display for TraitAndProjections<'tcx> {\n                       trait_ref.def_id,\n                       Ns::Type,\n                       projection_bounds,\n-                      |tcx| tcx.lookup_trait_def(trait_ref.def_id).generics.clone())\n+                      |tcx| Some(tcx.lookup_trait_def(trait_ref.def_id).generics.clone()))\n     }\n }\n \n@@ -811,7 +808,7 @@ impl fmt::Display for ty::Binder<ty::OutlivesPredicate<ty::Region, ty::Region>>\n impl<'tcx> fmt::Display for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         parameterized(f, self.substs, self.def_id, Ns::Type, &[],\n-                      |tcx| tcx.lookup_trait_def(self.def_id).generics.clone())\n+                      |tcx| Some(tcx.lookup_trait_def(self.def_id).generics.clone()))\n     }\n }\n \n@@ -863,8 +860,9 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n \n                 write!(f, \"{} {{\", bare_fn.sig.0)?;\n-                parameterized(f, substs, def_id, Ns::Value, &[],\n-                              |tcx| tcx.lookup_item_type(def_id).generics)?;\n+                parameterized(\n+                    f, substs, def_id, Ns::Value, &[],\n+                    |tcx| tcx.opt_lookup_item_type(def_id).map(|t| t.generics))?;\n                 write!(f, \"}}\")\n             }\n             TyFnPtr(ref bare_fn) => {\n@@ -887,8 +885,12 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                           !tcx.tcache.borrow().contains_key(&def.did) {\n                         write!(f, \"{}<..>\", tcx.item_path_str(def.did))\n                     } else {\n-                        parameterized(f, substs, def.did, Ns::Type, &[],\n-                                      |tcx| tcx.lookup_item_type(def.did).generics)\n+                        parameterized(\n+                            f, substs, def.did, Ns::Type, &[],\n+                            |tcx| {\n+                                tcx.opt_lookup_item_type(def.did).\n+                                    map(|t| t.generics)\n+                            })\n                     }\n                 })\n             }"}, {"sha": "3134a3844bc050caac4bf8732efd1784da49ec43", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -142,6 +142,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_item_name(&self.intr, &cdata, def.index)\n     }\n \n+    fn opt_item_name(&self, def: DefId) -> Option<ast::Name> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n+        let cdata = self.get_crate_data(def.krate);\n+        decoder::maybe_get_item_name(&self.intr, &cdata, def.index)\n+    }\n \n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>\n     {"}, {"sha": "d97ecebc476e95c623335e20df84897478548d77", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -285,12 +285,17 @@ fn item_trait_ref<'a, 'tcx>(doc: rbml::Doc, tcx: TyCtxt<'a, 'tcx, 'tcx>, cdata:\n }\n \n fn item_name(intr: &IdentInterner, item: rbml::Doc) -> ast::Name {\n-    let name = reader::get_doc(item, tag_paths_data_name);\n-    let string = name.as_str_slice();\n-    match intr.find(string) {\n-        None => token::intern(string),\n-        Some(val) => val,\n-    }\n+    maybe_item_name(intr, item).expect(\"no item in item_name\")\n+}\n+\n+fn maybe_item_name(intr: &IdentInterner, item: rbml::Doc) -> Option<ast::Name> {\n+    reader::maybe_get_doc(item, tag_paths_data_name).map(|name| {\n+        let string = name.as_str_slice();\n+        match intr.find(string) {\n+            None => token::intern(string),\n+            Some(val) => val,\n+        }\n+    })\n }\n \n fn family_to_variant_kind<'tcx>(family: Family) -> Option<ty::VariantKind> {\n@@ -792,6 +797,11 @@ pub fn get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex) -> ast::Nam\n     item_name(intr, cdata.lookup_item(id))\n }\n \n+pub fn maybe_get_item_name(intr: &IdentInterner, cdata: Cmd, id: DefIndex)\n+                         -> Option<ast::Name> {\n+    maybe_item_name(intr, cdata.lookup_item(id))\n+}\n+\n pub fn maybe_get_item_ast<'a, 'tcx>(cdata: Cmd, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)\n                                     -> FoundAst<'tcx> {\n     debug!(\"Looking up item: {:?}\", id);"}, {"sha": "cf84dd57d0254e61a7f67a95a4c6098e7a90d574", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6068ea84788743079963471a8415884af2a6e56/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=f6068ea84788743079963471a8415884af2a6e56", "patch": "@@ -173,7 +173,7 @@ pub struct Instance<'tcx> {\n impl<'tcx> fmt::Display for Instance<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         ppaux::parameterized(f, &self.substs, self.def, ppaux::Ns::Value, &[],\n-                             |tcx| tcx.lookup_item_type(self.def).generics)\n+                             |tcx| Some(tcx.lookup_item_type(self.def).generics))\n     }\n }\n "}]}