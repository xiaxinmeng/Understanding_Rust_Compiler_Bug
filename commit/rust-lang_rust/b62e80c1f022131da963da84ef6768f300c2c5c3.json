{"sha": "b62e80c1f022131da963da84ef6768f300c2c5c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MmU4MGMxZjAyMjEzMWRhOTYzZGE4NGVmNjc2OGYzMDBjMmM1YzM=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-05T22:16:48Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-05T22:27:28Z"}, "message": "Atomic ref counting for chans.", "tree": {"sha": "5b975cd8fe1a872b9ac0bd0a9739d516588fa5ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b975cd8fe1a872b9ac0bd0a9739d516588fa5ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b62e80c1f022131da963da84ef6768f300c2c5c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b62e80c1f022131da963da84ef6768f300c2c5c3", "html_url": "https://github.com/rust-lang/rust/commit/b62e80c1f022131da963da84ef6768f300c2c5c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b62e80c1f022131da963da84ef6768f300c2c5c3/comments", "author": null, "committer": null, "parents": [{"sha": "200bbcf91b4eb190cff227127cc60a333f9c33a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/200bbcf91b4eb190cff227127cc60a333f9c33a2", "html_url": "https://github.com/rust-lang/rust/commit/200bbcf91b4eb190cff227127cc60a333f9c33a2"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "1f7dab3a3d6a680a96b43e8639f60dc594b6d3e3", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -36,6 +36,8 @@ type upcalls =\n      del_port: ValueRef,\n      new_chan: ValueRef,\n      flush_chan: ValueRef,\n+     drop_chan: ValueRef,\n+     take_chan: ValueRef,\n      del_chan: ValueRef,\n      clone_chan: ValueRef,\n      chan_target_task: ValueRef,\n@@ -94,6 +96,8 @@ fn declare_upcalls(tn: type_names, tydesc_type: TypeRef,\n           new_chan:\n               d(\"new_chan\", ~[T_opaque_port_ptr()], T_opaque_chan_ptr()),\n           flush_chan: dv(\"flush_chan\", ~[T_opaque_chan_ptr()]),\n+          drop_chan: dv(\"drop_chan\", ~[T_opaque_chan_ptr()]),\n+          take_chan: dv(\"take_chan\", ~[T_opaque_chan_ptr()]),\n           del_chan: dv(\"del_chan\", ~[T_opaque_chan_ptr()]),\n           clone_chan:\n               d(\"clone_chan\", ~[taskptr_type, T_opaque_chan_ptr()],"}, {"sha": "be109921fc4847aff2fa21dfc88b98f8b678e50c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -1237,6 +1237,12 @@ fn make_copy_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n         cx.build.Call(bcx_ccx(cx).upcalls.take_task,\n                       ~[cx.fcx.lltaskptr, task_ptr]);\n         bcx = cx;\n+    } else if ty::type_is_chan(bcx_tcx(cx), t) {\n+        let ptr = cx.build.Load(v);\n+        ptr = cx.build.PointerCast(ptr, T_opaque_chan_ptr());\n+        cx.build.Call(bcx_ccx(cx).upcalls.take_chan,\n+                      ~[cx.fcx.lltaskptr, ptr]);\n+        bcx = cx;\n     } else if ty::type_is_boxed(bcx_tcx(cx), t) {\n         bcx = incr_refcnt_of_boxed(cx, cx.build.Load(v)).bcx;\n     } else if (ty::type_is_structural(bcx_tcx(cx), t)) {\n@@ -1395,7 +1401,13 @@ fn make_drop_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n           }\n           ty::ty_box(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n           ty::ty_port(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n-          ty::ty_chan(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n+          ty::ty_chan(_) {\n+            let ptr = cx.build.Load(v0);\n+            ptr = cx.build.PointerCast(ptr, T_opaque_chan_ptr());\n+            {bcx: cx,\n+             val: cx.build.Call(bcx_ccx(cx).upcalls.drop_chan,\n+                                ~[cx.fcx.lltaskptr, ptr])}\n+          }\n           ty::ty_task. {\n             let task_ptr = cx.build.Load(v0);\n             {bcx: cx,"}, {"sha": "021375d8ef0aa1877bddf367d47f8c4ce682813f", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -4,7 +4,7 @@\n // NB: please do not commit code with this uncommented. It's\n // hugely expensive and should only be used as a last resort.\n //\n-//#define TRACK_ALLOCATIONS\n+// #define TRACK_ALLOCATIONS\n \n #define MAGIC 0xbadc0ffe\n "}, {"sha": "1b6ad431cab0c78e841f04a05d1e19f2dad6862a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -904,9 +904,14 @@ void del_chan(rust_task *task, rust_chan *chan) {\n     chan->destroy();\n }\n \n+extern \"C\" CDECL\n+void take_chan(rust_task *task, rust_chan *chan) {\n+    chan->ref();\n+}\n+\n extern \"C\" CDECL\n void drop_chan(rust_task *task, rust_chan *chan) {\n-    chan->ref_count--;\n+    chan->deref();\n }\n \n extern \"C\" CDECL"}, {"sha": "4b9320688a14b1404f6e915b2ad11f6cb7855350", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -22,6 +22,8 @@ rust_chan::~rust_chan() {\n     KLOG(kernel, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n          (uintptr_t) this);\n \n+    this->destroy();\n+\n     A(kernel, is_associated() == false,\n       \"Channel must be disassociated before being freed.\");\n }\n@@ -35,7 +37,7 @@ void rust_chan::associate(rust_port *port) {\n     KLOG(kernel, task,\n          \"associating chan: 0x%\" PRIxPTR \" with port: 0x%\" PRIxPTR,\n          this, port);\n-    ++this->ref_count;\n+    this->ref();\n     this->task = port->task;\n     this->task->ref();\n     this->port->chans.push(this);\n@@ -57,13 +59,14 @@ void rust_chan::disassociate() {\n     KLOG(kernel, task,\n          \"disassociating chan: 0x%\" PRIxPTR \" from port: 0x%\" PRIxPTR,\n          this, port);\n-    --this->ref_count;\n     task->deref();\n     this->task = NULL;\n     port->chans.swap_delete(this);\n \n     // Delete reference to the port.\n     port = NULL;\n+\n+    this->deref();\n }\n \n /**\n@@ -101,9 +104,6 @@ rust_chan *rust_chan::clone(rust_task *target) {\n  * appear to be live, causing modify-after-free errors.\n  */\n void rust_chan::destroy() {\n-    A(kernel, ref_count == 0,\n-      \"Channel's ref count should be zero.\");\n-\n     if (is_associated()) {\n         // We're trying to delete a channel that another task may be\n         // reading from. We have two options:\n@@ -121,7 +121,6 @@ void rust_chan::destroy() {\n         scoped_lock with(port->lock);\n         disassociate();\n     }\n-    delete this;\n }\n \n //"}, {"sha": "eff4958f683134234bf3da0b4d86ec0335b3caeb", "filename": "src/rt/rust_chan.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_chan.h", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_chan.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.h?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -3,13 +3,13 @@\n \n class rust_chan : public kernel_owned<rust_chan>,\n                   public rust_cond {\n+    ~rust_chan();\n+\n public:\n-    RUST_REFCOUNTED_WITH_DTOR(rust_chan, destroy())\n+    RUST_ATOMIC_REFCOUNT();\n     rust_chan(rust_kernel *kernel, rust_port *port,\n               size_t unit_sz);\n \n-    ~rust_chan();\n-\n     rust_kernel *kernel;\n     rust_task *task;\n     rust_port *port;"}, {"sha": "3ad9afa7fbffe7623e9bee0d394ea2dfc35d38a4", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -108,6 +108,13 @@ static size_t const BUF_BYTES = 2048;\n   void ref() { ++ref_count; } \\\n   void deref() { if (--ref_count == 0) { dtor; } }\n \n+#define RUST_ATOMIC_REFCOUNT()                                          \\\n+    private:                                                            \\\n+    intptr_t ref_count;                                                 \\\n+public:                                                                 \\\n+ void ref() { sync::increment(ref_count); }                             \\\n+ void deref() { if(0 == sync::decrement(ref_count)) { delete this; } }\n+\n template <typename T> struct rc_base {\n     RUST_REFCOUNTED(T)\n "}, {"sha": "62ee80cb1b76f3511aea49a61c0fe4f73c5a55a6", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -8,10 +8,6 @@ rust_port::rust_port(rust_task *task, size_t unit_sz)\n     LOG(task, comm,\n         \"new rust_port(task=0x%\" PRIxPTR \", unit_sz=%d) -> port=0x%\"\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n-\n-    // Allocate a remote channel, for remote channel data.\n-    remote_channel = new (kernel, \"remote chan\")\n-        rust_chan(kernel, this, unit_sz);\n }\n \n rust_port::~rust_port() {\n@@ -22,15 +18,7 @@ rust_port::~rust_port() {\n         scoped_lock with(lock);\n         rust_chan *chan = chans.peek();\n         chan->disassociate();\n-\n-        if (chan->ref_count == 0) {\n-            LOG(task, comm,\n-                \"chan: 0x%\" PRIxPTR \" is dormant, freeing\", chan);\n-            delete chan;\n-        }\n     }\n-\n-    delete remote_channel;\n }\n \n bool rust_port::receive(void *dptr) {\n@@ -52,10 +40,9 @@ void rust_port::log_state() {\n     for (uint32_t i = 0; i < chans.length(); i++) {\n         rust_chan *chan = chans[i];\n         LOG(task, comm,\n-            \"\\tchan: 0x%\" PRIxPTR \", size: %d, remote: %s\",\n+            \"\\tchan: 0x%\" PRIxPTR \", size: %d\",\n             chan,\n-            chan->buffer.size(),\n-            chan == remote_channel ? \"yes\" : \"no\");\n+            chan->buffer.size());\n     }\n }\n "}, {"sha": "46ace6942e11680e4889efc20bbefc20bbfad668", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -12,9 +12,6 @@ class rust_port : public kernel_owned<rust_port>, public rust_cond {\n     ptr_vec<rust_token> writers;\n     ptr_vec<rust_chan> chans;\n \n-    // Data sent to this port from remote tasks is buffered in this channel.\n-    rust_chan *remote_channel;\n-\n     lock_and_signal lock;\n \n     rust_port(rust_task *task, size_t unit_sz);"}, {"sha": "66d03d19b62eebc3880f20103406d01c37a6aee4", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -38,14 +38,7 @@ struct gc_alloc {\n struct\n rust_task : public kernel_owned<rust_task>, rust_cond\n {\n-    // This block could be pulled out into something like a\n-    // RUST_ATOMIC_REFCOUNTED macro.\n-private:\n-    intptr_t ref_count;\n-public:\n-    void ref() { sync::increment(ref_count); }\n-    void deref() { if(0 == sync::decrement(ref_count)) { delete this; } }\n-\n+    RUST_ATOMIC_REFCOUNT();\n \n     // Fields known to the compiler.\n     stk_seg *stk;"}, {"sha": "2190ec7b49fe5111005994afc3e5cc9ef08629ad", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -508,6 +508,22 @@ upcall_drop_task(rust_task *task, rust_task *target) {\n     }\n }\n \n+extern \"C\" CDECL void\n+upcall_take_chan(rust_task *task, rust_chan *target) {\n+    LOG_UPCALL_ENTRY(task);\n+    if(target) {\n+        target->ref();\n+    }\n+}\n+\n+extern \"C\" CDECL void\n+upcall_drop_chan(rust_task *task, rust_chan *target) {\n+    LOG_UPCALL_ENTRY(task);\n+    if(target) {\n+        target->deref();\n+    }\n+}\n+\n extern \"C\" CDECL rust_task *\n upcall_start_task(rust_task *spawner,\n                   rust_task *task,"}, {"sha": "d353dd3a0fb7beef912b73fe65802a97d4b19389", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b62e80c1f022131da963da84ef6768f300c2c5c3/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b62e80c1f022131da963da84ef6768f300c2c5c3", "patch": "@@ -69,6 +69,7 @@ str_from_vec\n str_push_byte\n str_slice\n str_vec\n+take_chan\n task_sleep\n task_yield\n task_join\n@@ -78,6 +79,7 @@ upcall_chan_target_task\n upcall_clone_chan\n upcall_del_chan\n upcall_del_port\n+upcall_drop_chan\n upcall_drop_task\n upcall_dup_str\n upcall_exit\n@@ -108,6 +110,7 @@ upcall_shared_free\n upcall_sleep\n upcall_start_task\n upcall_take_task\n+upcall_take_chan\n upcall_trace_str\n upcall_trace_word\n upcall_vec_append"}]}