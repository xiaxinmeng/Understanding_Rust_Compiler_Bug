{"sha": "1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlY2RhYTI5ZjliYmUzM2I4ZWE3MDFmYjY5MWM3MDAxODk0ZGM4M2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-25T10:53:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-25T10:54:34Z"}, "message": "remove now-unused 'is_min_const_fn'", "tree": {"sha": "efef8198d33c3cc60bda5e76309b48022acb61f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efef8198d33c3cc60bda5e76309b48022acb61f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "html_url": "https://github.com/rust-lang/rust/commit/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2", "html_url": "https://github.com/rust-lang/rust/commit/9082078a26b3f8c6e8c9b55a966b2a6d6f410ea2"}], "stats": {"total": 49, "additions": 0, "deletions": 49}, "files": [{"sha": "40419a4d201ac0b198ab799ebf509a020ea23b7e", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ecdaa29f9bbe33b8ea701fb691c7001894dc83a/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=1ecdaa29f9bbe33b8ea701fb691c7001894dc83a", "patch": "@@ -1,4 +1,3 @@\n-use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n@@ -34,54 +33,6 @@ pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     }\n }\n \n-/// Returns `true` if this function must conform to `min_const_fn`\n-pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    // Bail out if the signature doesn't contain `const`\n-    if !tcx.is_const_fn_raw(def_id) {\n-        return false;\n-    }\n-\n-    if tcx.features().staged_api {\n-        // In order for a libstd function to be considered min_const_fn\n-        // it needs to be stable and have no `rustc_const_unstable` attribute.\n-        match tcx.lookup_const_stability(def_id) {\n-            // `rustc_const_unstable` functions don't need to conform.\n-            Some(&attr::ConstStability { ref level, .. }) if level.is_unstable() => false,\n-            None => {\n-                if let Some(stab) = tcx.lookup_stability(def_id) {\n-                    if stab.level.is_stable() {\n-                        tcx.sess.delay_span_bug(\n-                            tcx.def_span(def_id),\n-                            \"stable const functions must have either `rustc_const_stable` or \\\n-                             `rustc_const_unstable` attribute\",\n-                        );\n-                        // While we errored above, because we don't know if we need to conform, we\n-                        // err on the \"safe\" side and require min_const_fn.\n-                        true\n-                    } else {\n-                        // Unstable functions need not conform to min_const_fn.\n-                        false\n-                    }\n-                } else {\n-                    // Internal functions are forced to conform to min_const_fn.\n-                    // Annotate the internal function with a const stability attribute if\n-                    // you need to use unstable features.\n-                    // Note: this is an arbitrary choice that does not affect stability or const\n-                    // safety or anything, it just changes whether we need to annotate some\n-                    // internal functions with `rustc_const_stable` or with `rustc_const_unstable`\n-                    true\n-                }\n-            }\n-            // Everything else needs to conform, because it would be callable from\n-            // other `min_const_fn` functions.\n-            _ => true,\n-        }\n-    } else {\n-        // users enabling the `const_fn` feature gate can do what they want\n-        !tcx.features().const_fn\n-    }\n-}\n-\n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     let parent_id = tcx.hir().get_parent_did(hir_id);\n     if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }"}]}