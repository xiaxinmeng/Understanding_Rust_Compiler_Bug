{"sha": "653b78e9b33c03c43c3facd0c281fdd370896e53", "node_id": "C_kwDOAAsO6NoAKDY1M2I3OGU5YjMzYzAzYzQzYzNmYWNkMGMyODFmZGQzNzA4OTZlNTM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-08T14:08:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-08T14:08:49Z"}, "message": "Merge #10722\n\n10722: fix: Fix proc-macro attributes being shadowed by their functions in IDE layer r=Veykril a=Veykril\n\nWe sometimes still didn't resolve proc-macro attrs in attribute paths in the ide crates due to their function definitions resolving first.\r\nbors r+  \n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "eae45a1ee07cfa3c9837ad709f4cb675d3af3f53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae45a1ee07cfa3c9837ad709f4cb675d3af3f53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653b78e9b33c03c43c3facd0c281fdd370896e53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhiS9xCRBK7hj4Ov3rIwAAHjQIABf3Z6vjLkzcHqJhWMeeV//a\ncyn3Mfa4VvF8pjgY52/nr06Wj2iS/cOKo+jsgvS1IZr3uXUhfM+gkfc/jzhhheCm\ng7tlQ8xozY4yY1qUvVdhrxukqHkESaKMEDTQv3NNhN25sjKHrW4dEo7Wp2DVYMaF\nLxAuh+Dp9aHqZlMpRtSp2wefzJLPDbWvuBPOXmWvBpQnVbeA1Dd9Evo6zfRrhExq\n9QkOu+A46icNWGuZTNGkJk/GkQw/ByFcX3inix053hMjzv7jE3z4wZ1YFp36bdl2\nxO19WXVbiEUCAFDZsaKNAH3v7ea0cHTWg5GXut4H9870tcOzrAPQLqTA1aBlx5A=\n=mF5v\n-----END PGP SIGNATURE-----\n", "payload": "tree eae45a1ee07cfa3c9837ad709f4cb675d3af3f53\nparent f48b2622d8e4d2f91dc8ffa7f8708c7484dd4eb6\nparent 26419c03795574b35a8751fd466e500a0ca59233\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636380529 +0000\ncommitter GitHub <noreply@github.com> 1636380529 +0000\n\nMerge #10722\n\n10722: fix: Fix proc-macro attributes being shadowed by their functions in IDE layer r=Veykril a=Veykril\n\nWe sometimes still didn't resolve proc-macro attrs in attribute paths in the ide crates due to their function definitions resolving first.\r\nbors r+  \n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653b78e9b33c03c43c3facd0c281fdd370896e53", "html_url": "https://github.com/rust-lang/rust/commit/653b78e9b33c03c43c3facd0c281fdd370896e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653b78e9b33c03c43c3facd0c281fdd370896e53/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48b2622d8e4d2f91dc8ffa7f8708c7484dd4eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48b2622d8e4d2f91dc8ffa7f8708c7484dd4eb6", "html_url": "https://github.com/rust-lang/rust/commit/f48b2622d8e4d2f91dc8ffa7f8708c7484dd4eb6"}, {"sha": "26419c03795574b35a8751fd466e500a0ca59233", "url": "https://api.github.com/repos/rust-lang/rust/commits/26419c03795574b35a8751fd466e500a0ca59233", "html_url": "https://github.com/rust-lang/rust/commit/26419c03795574b35a8751fd466e500a0ca59233"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "b09c0e753b59164b1521807c0bca32999a3f085f", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=653b78e9b33c03c43c3facd0c281fdd370896e53", "patch": "@@ -329,6 +329,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n+    pub fn resolve_path_as_macro(&self, path: &ast::Path) -> Option<MacroDef> {\n+        self.imp.resolve_path_as_macro(path)\n+    }\n+\n     pub fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         self.imp.resolve_extern_crate(extern_crate)\n     }\n@@ -845,6 +849,12 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    // FIXME: This shouldn't exist, but is currently required to always resolve attribute paths in\n+    // the IDE layer due to namespace collisions\n+    fn resolve_path_as_macro(&self, path: &ast::Path) -> Option<MacroDef> {\n+        self.analyze(path.syntax()).resolve_path_as_macro(self.db, path)\n+    }\n+\n     fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         let krate = self.scope(extern_crate.syntax()).krate()?;\n         krate.dependencies(self.db).into_iter().find_map(|dep| {"}, {"sha": "b12461818e956f5c4906ac61892350f964dd2be3", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=653b78e9b33c03c43c3facd0c281fdd370896e53", "patch": "@@ -246,6 +246,18 @@ impl SourceAnalyzer {\n         }\n     }\n \n+    pub(crate) fn resolve_path_as_macro(\n+        &self,\n+        db: &dyn HirDatabase,\n+        path: &ast::Path,\n+    ) -> Option<MacroDef> {\n+        // This must be a normal source file rather than macro file.\n+        let hygiene = Hygiene::new(db.upcast(), self.file_id);\n+        let ctx = body::LowerCtx::with_hygiene(db.upcast(), &hygiene);\n+        let hir_path = Path::from_src(path.clone(), &ctx)?;\n+        resolve_hir_path_as_macro(db, &self.resolver, &hir_path)\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &dyn HirDatabase,"}, {"sha": "ab810aceca3f7214bc1cf27b254e54a0e6df343a", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=653b78e9b33c03c43c3facd0c281fdd370896e53", "patch": "@@ -43,7 +43,7 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"builtin_attr attribute\">identity</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"macro attribute\">identity</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>"}, {"sha": "e4874c7c48246349aa2f6250eecd00f26f2c60ce", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653b78e9b33c03c43c3facd0c281fdd370896e53/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=653b78e9b33c03c43c3facd0c281fdd370896e53", "patch": "@@ -433,20 +433,20 @@ impl NameRefClass {\n                 .find_map(ast::Attr::cast)\n                 .map(|attr| attr.path().as_ref() == Some(&top_path));\n             return match is_attribute_path {\n-                Some(true) => sema.resolve_path(&path).and_then(|resolved| {\n-                    match resolved {\n-                        // Don't wanna collide with builtin attributes here like `test` hence guard\n-                        // so only resolve to modules that aren't the last segment\n-                        PathResolution::Def(module @ ModuleDef::Module(_)) if path != top_path => {\n-                            cov_mark::hit!(name_ref_classify_attr_path_qualifier);\n-                            Some(NameRefClass::Definition(Definition::ModuleDef(module)))\n-                        }\n-                        PathResolution::Macro(mac) if mac.kind() == hir::MacroKind::Attr => {\n-                            Some(NameRefClass::Definition(Definition::Macro(mac)))\n-                        }\n-                        _ => None,\n+                Some(true) if path == top_path => sema\n+                    .resolve_path_as_macro(&path)\n+                    .filter(|mac| mac.kind() == hir::MacroKind::Attr)\n+                    .map(Definition::Macro)\n+                    .map(NameRefClass::Definition),\n+                // in case of the path being a qualifier, don't resolve to anything but a module\n+                Some(true) => match sema.resolve_path(&path)? {\n+                    PathResolution::Def(module @ ModuleDef::Module(_)) => {\n+                        cov_mark::hit!(name_ref_classify_attr_path_qualifier);\n+                        Some(NameRefClass::Definition(Definition::ModuleDef(module)))\n                     }\n-                }),\n+                    _ => None,\n+                },\n+                // inside attribute, but our path isn't part of the attribute's path(might be in its expression only)\n                 Some(false) => None,\n                 None => sema.resolve_path(&path).map(Into::into).map(NameRefClass::Definition),\n             };"}]}