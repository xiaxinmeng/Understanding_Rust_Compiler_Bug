{"sha": "b53468f500e079cef07ed53245c3aa99daf32fcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MzQ2OGY1MDBlMDc5Y2VmMDdlZDUzMjQ1YzNhYTk5ZGFmMzJmY2M=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-11T22:36:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-18T09:44:09Z"}, "message": "Add rustc_trans to x.py check", "tree": {"sha": "66510cd4e10f2821d371aa2d325f3c627635e09e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66510cd4e10f2821d371aa2d325f3c627635e09e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53468f500e079cef07ed53245c3aa99daf32fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53468f500e079cef07ed53245c3aa99daf32fcc", "html_url": "https://github.com/rust-lang/rust/commit/b53468f500e079cef07ed53245c3aa99daf32fcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53468f500e079cef07ed53245c3aa99daf32fcc/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23561c6747b0916e852aaa2a5d04c0b0eeddc6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/23561c6747b0916e852aaa2a5d04c0b0eeddc6de", "html_url": "https://github.com/rust-lang/rust/commit/23561c6747b0916e852aaa2a5d04c0b0eeddc6de"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "dcc4134b2f306b76995ba028aaefcb65eeedf95f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b53468f500e079cef07ed53245c3aa99daf32fcc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53468f500e079cef07ed53245c3aa99daf32fcc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b53468f500e079cef07ed53245c3aa99daf32fcc", "patch": "@@ -310,7 +310,7 @@ impl<'a> Builder<'a> {\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n                 native::Llvm, tool::Rustfmt, tool::Miri, native::Lld),\n-            Kind::Check => describe!(check::Std, check::Test, check::Rustc),\n+            Kind::Check => describe!(check::Std, check::Test, check::Rustc, check::CodegenBackend),\n             Kind::Test => describe!(test::Tidy, test::Bootstrap, test::Ui, test::RunPass,\n                 test::CompileFail, test::ParseFail, test::RunFail, test::RunPassValgrind,\n                 test::MirOpt, test::Codegen, test::CodegenUnits, test::Incremental, test::Debuginfo,\n@@ -834,7 +834,7 @@ impl<'a> Builder<'a> {\n         cargo\n     }\n \n-    /// Ensure that a given step is built, returning it's output. This will\n+    /// Ensure that a given step is built, returning its output. This will\n     /// cache the step, so it is safe (and good!) to call this as often as\n     /// needed to ensure that all dependencies are built.\n     pub fn ensure<S: Step>(&'a self, step: S) -> S::Output {"}, {"sha": "b155cb826b6445ec01dfff2d87195f7462b5e039", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b53468f500e079cef07ed53245c3aa99daf32fcc/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53468f500e079cef07ed53245c3aa99daf32fcc/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=b53468f500e079cef07ed53245c3aa99daf32fcc", "patch": "@@ -10,10 +10,12 @@\n \n //! Implementation of compiling the compiler and standard library, in \"check\" mode.\n \n-use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, add_to_sysroot};\n+use compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env, add_to_sysroot};\n+use compile::compiler_file;\n use builder::{RunConfig, Builder, ShouldRun, Step};\n use {Compiler, Mode};\n-use cache::Interned;\n+use native;\n+use cache::{INTERNER, Interned};\n use std::path::PathBuf;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n@@ -104,6 +106,97 @@ impl Step for Rustc {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct CodegenBackend {\n+    pub target: Interned<String>,\n+    pub backend: Interned<String>,\n+}\n+\n+impl Step for CodegenBackend {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.all_krates(\"rustc_trans\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        let backend = run.builder.config.rust_codegen_backends.get(0);\n+        let backend = backend.cloned().unwrap_or_else(|| {\n+            INTERNER.intern_str(\"llvm\")\n+        });\n+        run.builder.ensure(CodegenBackend {\n+            target: run.target,\n+            backend,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let compiler = builder.compiler(0, build.build);\n+        let target = self.target;\n+\n+        let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"check\");\n+        let mut features = build.rustc_features().to_string();\n+        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/librustc_trans/Cargo.toml\"));\n+        rustc_cargo_env(build, &mut cargo);\n+\n+        match &*self.backend {\n+            \"llvm\" | \"emscripten\" => {\n+                // Build LLVM for our target. This will implicitly build the\n+                // host LLVM if necessary.\n+                let llvm_config = builder.ensure(native::Llvm {\n+                    target,\n+                    emscripten: self.backend == \"emscripten\",\n+                });\n+\n+                if self.backend == \"emscripten\" {\n+                    features.push_str(\" emscripten\");\n+                }\n+\n+                // Pass down configuration from the LLVM build into the build of\n+                // librustc_llvm and librustc_trans.\n+                if build.is_rust_llvm(target) {\n+                    cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+                }\n+                cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+                if self.backend != \"emscripten\" {\n+                    let target_config = build.config.target_config.get(&target);\n+                    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+                        cargo.env(\"CFG_LLVM_ROOT\", s);\n+                    }\n+                }\n+                // Building with a static libstdc++ is only supported on linux right now,\n+                // not for MSVC or macOS\n+                if build.config.llvm_static_stdcpp &&\n+                   !target.contains(\"freebsd\") &&\n+                   !target.contains(\"windows\") &&\n+                   !target.contains(\"apple\") {\n+                    let file = compiler_file(build,\n+                                             build.cxx(target).unwrap(),\n+                                             target,\n+                                             \"libstdc++.a\");\n+                    cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+                }\n+                if build.config.llvm_link_shared {\n+                    cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+                }\n+            }\n+            _ => panic!(\"unknown backend: {}\", self.backend),\n+        }\n+\n+        let tmp_stamp = build.cargo_out(compiler, Mode::Librustc, target)\n+            .join(\".tmp.stamp\");\n+\n+        let _folder = build.fold_output(|| format!(\"stage{}-rustc_trans\", compiler.stage));\n+        run_cargo(build,\n+                  cargo.arg(\"--features\").arg(features),\n+                  &tmp_stamp,\n+                  true);\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Test {\n     pub target: Interned<String>,"}, {"sha": "12fd57d9531f2057d6254edeafb3ee60aab07497", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b53468f500e079cef07ed53245c3aa99daf32fcc/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53468f500e079cef07ed53245c3aa99daf32fcc/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b53468f500e079cef07ed53245c3aa99daf32fcc", "patch": "@@ -519,7 +519,7 @@ pub fn rustc_cargo(builder: &Builder, cargo: &mut Command) {\n     rustc_cargo_env(builder, cargo);\n }\n \n-fn rustc_cargo_env(builder: &Builder, cargo: &mut Command) {\n+pub fn rustc_cargo_env(builder: &Builder, cargo: &mut Command) {\n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n     cargo.env(\"CFG_RELEASE\", builder.rust_release())\n@@ -614,7 +614,7 @@ impl Step for CodegenBackend {\n         run.builder.ensure(CodegenBackend {\n             compiler: run.builder.compiler(run.builder.top_stage, run.host),\n             target: run.target,\n-            backend\n+            backend,\n         });\n     }\n \n@@ -803,7 +803,7 @@ fn codegen_backend_stamp(builder: &Builder,\n         .join(format!(\".librustc_trans-{}.stamp\", backend))\n }\n \n-fn compiler_file(builder: &Builder,\n+pub fn compiler_file(builder: &Builder,\n                  compiler: &Path,\n                  target: Interned<String>,\n                  file: &str) -> PathBuf {"}]}