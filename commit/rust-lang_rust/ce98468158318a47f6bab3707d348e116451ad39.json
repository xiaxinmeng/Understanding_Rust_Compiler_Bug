{"sha": "ce98468158318a47f6bab3707d348e116451ad39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTg0NjgxNTgzMThhNDdmNmJhYjM3MDdkMzQ4ZTExNjQ1MWFkMzk=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-02T16:59:47Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-02T17:08:38Z"}, "message": "Fix incorrect suggestion when from expansion in `try_err` lint", "tree": {"sha": "f442b0fefa2a278253c7e63c06f0e37e824043ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f442b0fefa2a278253c7e63c06f0e37e824043ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce98468158318a47f6bab3707d348e116451ad39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce98468158318a47f6bab3707d348e116451ad39", "html_url": "https://github.com/rust-lang/rust/commit/ce98468158318a47f6bab3707d348e116451ad39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce98468158318a47f6bab3707d348e116451ad39/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "343bdb33647627a6a001be039a107e7ef3362707", "url": "https://api.github.com/repos/rust-lang/rust/commits/343bdb33647627a6a001be039a107e7ef3362707", "html_url": "https://github.com/rust-lang/rust/commit/343bdb33647627a6a001be039a107e7ef3362707"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "e6d8e7521a8c44627f37e0711c39a7f28321b6dd", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce98468158318a47f6bab3707d348e116451ad39/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce98468158318a47f6bab3707d348e116451ad39/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=ce98468158318a47f6bab3707d348e116451ad39", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n+    in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n     span_lint_and_sugg,\n };\n use if_chain::if_chain;\n@@ -92,16 +92,22 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n \n                 let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n \n-                let origin_snippet = if err_arg.span.from_expansion() {\n+                // println!(\"\\n\\n{:?}\", in_macro(expr.span));\n+                // println!(\"{:#?}\", snippet(cx, err_arg.span, \"_\"));\n+                let origin_snippet = if err_arg.span.from_expansion() && !in_macro(expr.span) {\n+                    // println!(\"from expansion\");\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n+                    // println!(\"just a snippet\");\n                     snippet(cx, err_arg.span, \"_\")\n                 };\n                 let suggestion = if err_ty == expr_err_ty {\n                     format!(\"return {}{}{}\", prefix, origin_snippet, suffix)\n                 } else {\n                     format!(\"return {}{}.into(){}\", prefix, origin_snippet, suffix)\n                 };\n+                // println!(\"origin_snippet: {:#?}\", origin_snippet);\n+                // println!(\"suggestion: {:#?}\", suggestion);\n \n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "053dd45f23e1a3ac242f3321b770eda29ffb997c", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce98468158318a47f6bab3707d348e116451ad39/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ce98468158318a47f6bab3707d348e116451ad39/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=ce98468158318a47f6bab3707d348e116451ad39", "patch": "@@ -78,12 +78,28 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n+// Bad suggestion when in macro (see #6242)\n+macro_rules! try_validation {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => return Err(1),\n+        }\n+    }};\n+}\n+\n+fn calling_macro() -> Result<i32, i32> {\n+    try_validation!(Ok::<_, i32>(5));\n+    Ok(5)\n+}\n+\n fn main() {\n     basic_test().unwrap();\n     into_test().unwrap();\n     negative_test().unwrap();\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n+    calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n     try_err!();"}, {"sha": "215ca6a07e62d1828023e77099ea06bd52e15ac2", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce98468158318a47f6bab3707d348e116451ad39/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce98468158318a47f6bab3707d348e116451ad39/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=ce98468158318a47f6bab3707d348e116451ad39", "patch": "@@ -78,12 +78,28 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n+// Bad suggestion when in macro (see #6242)\n+macro_rules! try_validation {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => Err(1)?,\n+        }\n+    }};\n+}\n+\n+fn calling_macro() -> Result<i32, i32> {\n+    try_validation!(Ok::<_, i32>(5));\n+    Ok(5)\n+}\n+\n fn main() {\n     basic_test().unwrap();\n     into_test().unwrap();\n     negative_test().unwrap();\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n+    calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n     try_err!();"}, {"sha": "443c8d084721853d3aab468d76d309439a2ca908", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ce98468158318a47f6bab3707d348e116451ad39/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce98468158318a47f6bab3707d348e116451ad39/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=ce98468158318a47f6bab3707d348e116451ad39", "patch": "@@ -29,28 +29,39 @@ LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:106:9\n+  --> $DIR/try_err.rs:86:23\n+   |\n+LL |             Err(_) => Err(1)?,\n+   |                       ^^^^^^^ help: try this: `return Err(1)`\n+...\n+LL |     try_validation!(Ok::<_, i32>(5));\n+   |     --------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:122:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:113:9\n+  --> $DIR/try_err.rs:129:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:115:9\n+  --> $DIR/try_err.rs:131:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:123:9\n+  --> $DIR/try_err.rs:139:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}