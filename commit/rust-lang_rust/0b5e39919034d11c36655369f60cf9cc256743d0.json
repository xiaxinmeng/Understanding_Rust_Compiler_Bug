{"sha": "0b5e39919034d11c36655369f60cf9cc256743d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNWUzOTkxOTAzNGQxMWMzNjY1NTM2OWY2MGNmOWNjMjU2NzQzZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-05T16:40:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-05T16:40:02Z"}, "message": "use correct file for diagnostics\n\ncloses #1475", "tree": {"sha": "c175d87985271961227a1716ce54fd1d2229e254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c175d87985271961227a1716ce54fd1d2229e254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b5e39919034d11c36655369f60cf9cc256743d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5e39919034d11c36655369f60cf9cc256743d0", "html_url": "https://github.com/rust-lang/rust/commit/0b5e39919034d11c36655369f60cf9cc256743d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b5e39919034d11c36655369f60cf9cc256743d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd30ec406ba776e670dbd46b964de626f28e2857", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd30ec406ba776e670dbd46b964de626f28e2857", "html_url": "https://github.com/rust-lang/rust/commit/fd30ec406ba776e670dbd46b964de626f28e2857"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "c97f0656d75bff9f8e1124817c0393452966fc1d", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b5e39919034d11c36655369f60cf9cc256743d0/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5e39919034d11c36655369f60cf9cc256743d0/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=0b5e39919034d11c36655369f60cf9cc256743d0", "patch": "@@ -1,6 +1,6 @@\n use std::{any::Any, fmt};\n \n-use ra_syntax::{ast, AstPtr, SyntaxNode, SyntaxNodePtr, TextRange, TreeArc};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr, TextRange, TreeArc};\n use relative_path::RelativePathBuf;\n \n use crate::{HirDatabase, HirFileId, Name};\n@@ -27,11 +27,17 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     fn as_any(&self) -> &(dyn Any + Send + 'static);\n }\n \n+pub trait AstDiagnostic {\n+    type AST;\n+    fn ast(&self, db: &impl HirDatabase) -> Self::AST;\n+}\n+\n impl dyn Diagnostic {\n     pub fn syntax_node(&self, db: &impl HirDatabase) -> TreeArc<SyntaxNode> {\n         let node = db.parse_or_expand(self.file()).unwrap();\n         self.syntax_node_ptr().to_node(&*node).to_owned()\n     }\n+\n     pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n         self.as_any().downcast_ref()\n     }\n@@ -135,3 +141,13 @@ impl Diagnostic for MissingFields {\n         self\n     }\n }\n+\n+impl AstDiagnostic for MissingFields {\n+    type AST = TreeArc<ast::NamedFieldList>;\n+\n+    fn ast(&self, db: &impl HirDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.file()).unwrap();\n+        let node = self.syntax_node_ptr().to_node(&*root);\n+        ast::NamedFieldList::cast(&node).unwrap().to_owned()\n+    }\n+}"}, {"sha": "a46289cbaa2abfc78a657c56af4500cfd9c80150", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b5e39919034d11c36655369f60cf9cc256743d0/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5e39919034d11c36655369f60cf9cc256743d0/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=0b5e39919034d11c36655369f60cf9cc256743d0", "patch": "@@ -1,15 +1,15 @@\n use std::cell::RefCell;\n \n use hir::{\n-    diagnostics::{Diagnostic as _, DiagnosticSink},\n+    diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink},\n     source_binder,\n };\n use itertools::Itertools;\n use ra_assists::ast_editor::{AstBuilder, AstEditor};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, AstNode, NamedField, NamedFieldList},\n+    ast::{self, AstNode, NamedField},\n     Location, SyntaxNode, TextRange, T,\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n@@ -34,9 +34,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         fix: None,\n     }));\n \n-    let source_file = parse.tree;\n-\n-    for node in source_file.syntax().descendants() {\n+    for node in parse.tree.syntax().descendants() {\n         check_unnecessary_braces_in_use_statement(&mut res, file_id, node);\n         check_struct_shorthand_initialization(&mut res, file_id, node);\n     }\n@@ -61,9 +59,8 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         })\n     })\n     .on::<hir::diagnostics::MissingFields, _>(|d| {\n-        let syntax_node = d.syntax_node_ptr();\n-        let node = NamedFieldList::cast(syntax_node.to_node(source_file.syntax())).unwrap();\n-        let mut ast_editor = AstEditor::new(node);\n+        let node = d.ast(db);\n+        let mut ast_editor = AstEditor::new(&*node);\n         for f in d.missed_fields.iter() {\n             ast_editor.append_field(&AstBuilder::<NamedField>::from_name(f));\n         }"}]}