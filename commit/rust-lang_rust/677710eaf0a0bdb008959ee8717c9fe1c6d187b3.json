{"sha": "677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "node_id": "C_kwDOAAsO6NoAKDY3NzcxMGVhZjBhMGJkYjAwODk1OWVlODcxN2M5ZmUxYzZkMTg3YjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-18T12:45:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-18T12:45:41Z"}, "message": "Auto merge of #112638 - lqd:rpo, r=cjgillot\n\nSwitch the BB CFG cache from postorder to RPO\n\nThe `BasicBlocks` CFG cache is interesting:\n- it stores a postorder, but `traversal::postorder` doesn't use it\n- `traversal::reverse_postorder` does traverse the postorder cache backwards\n- we do more RPO traversals than postorder traversals (around 20x on the perf.rlo benchmarks IIRC) but it's not cached\n- a couple places here and there were manually reversing the non-cached postorder traversal\n\nThis PR switches the order of the cache, and makes a bit more use of it. This is a tiny win locally, but it's also for consistency and aesthetics.\n\nr? `@ghost`", "tree": {"sha": "fcf4c9e8fda9a2eb573d806c29586882b513eda4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf4c9e8fda9a2eb573d806c29586882b513eda4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "html_url": "https://github.com/rust-lang/rust/commit/677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76fb0e38087cb8fcc6de5fe2ce347e939dfdb0bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/76fb0e38087cb8fcc6de5fe2ce347e939dfdb0bd", "html_url": "https://github.com/rust-lang/rust/commit/76fb0e38087cb8fcc6de5fe2ce347e939dfdb0bd"}, {"sha": "08a9f25245eb7cbc4f0952a8497808f94999b6b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a9f25245eb7cbc4f0952a8497808f94999b6b2", "html_url": "https://github.com/rust-lang/rust/commit/08a9f25245eb7cbc4f0952a8497808f94999b6b2"}], "stats": {"total": 77, "additions": 31, "deletions": 46}, "files": [{"sha": "44b143c77f36e30e012207ad8b8a60651cdbf12a", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "patch": "@@ -14,7 +14,6 @@\n \n use rustc_hir as hir;\n use rustc_middle::mir;\n-use rustc_middle::mir::traversal::ReversePostorderIter;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -53,9 +52,8 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n             return;\n         }\n \n-        let mut rpo = traversal::reverse_postorder(body);\n         let ccx = ConstCx::new(tcx, body);\n-        let (mut temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);\n+        let (mut temps, all_candidates) = collect_temps_and_candidates(&ccx);\n \n         let promotable_candidates = validate_candidates(&ccx, &mut temps, &all_candidates);\n \n@@ -166,14 +164,13 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n pub fn collect_temps_and_candidates<'tcx>(\n     ccx: &ConstCx<'_, 'tcx>,\n-    rpo: &mut ReversePostorderIter<'_, 'tcx>,\n ) -> (IndexVec<Local, TempState>, Vec<Candidate>) {\n     let mut collector = Collector {\n         temps: IndexVec::from_elem(TempState::Undefined, &ccx.body.local_decls),\n         candidates: vec![],\n         ccx,\n     };\n-    for (bb, data) in rpo {\n+    for (bb, data) in traversal::reverse_postorder(ccx.body) {\n         collector.visit_basic_block_data(bb, data);\n     }\n     (collector.temps, collector.candidates)"}, {"sha": "7722e7b47cffa756dd1e9429646dea94ef5ab59e", "filename": "compiler/rustc_middle/src/mir/basic_blocks.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs?ref=677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "patch": "@@ -26,7 +26,7 @@ struct Cache {\n     predecessors: OnceCell<Predecessors>,\n     switch_sources: OnceCell<SwitchSources>,\n     is_cyclic: OnceCell<bool>,\n-    postorder: OnceCell<Vec<BasicBlock>>,\n+    reverse_postorder: OnceCell<Vec<BasicBlock>>,\n     dominators: OnceCell<Dominators<BasicBlock>>,\n }\n \n@@ -62,11 +62,14 @@ impl<'tcx> BasicBlocks<'tcx> {\n         })\n     }\n \n-    /// Returns basic blocks in a postorder.\n+    /// Returns basic blocks in a reverse postorder.\n     #[inline]\n-    pub fn postorder(&self) -> &[BasicBlock] {\n-        self.cache.postorder.get_or_init(|| {\n-            Postorder::new(&self.basic_blocks, START_BLOCK).map(|(bb, _)| bb).collect()\n+    pub fn reverse_postorder(&self) -> &[BasicBlock] {\n+        self.cache.reverse_postorder.get_or_init(|| {\n+            let mut rpo: Vec<_> =\n+                Postorder::new(&self.basic_blocks, START_BLOCK).map(|(bb, _)| bb).collect();\n+            rpo.reverse();\n+            rpo\n         })\n     }\n "}, {"sha": "ec16a8470c412161ef6aeeb5ac4195748b21a401", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "patch": "@@ -188,10 +188,6 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     }\n }\n \n-pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {\n-    Postorder::new(&body.basic_blocks, START_BLOCK)\n-}\n-\n impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n     type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n \n@@ -219,6 +215,17 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n     }\n }\n \n+/// Creates an iterator over the `Body`'s basic blocks, that:\n+/// - returns basic blocks in a postorder,\n+/// - traverses the `BasicBlocks` CFG cache's reverse postorder backwards, and does not cache the\n+///   postorder itself.\n+pub fn postorder<'a, 'tcx>(\n+    body: &'a Body<'tcx>,\n+) -> impl Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> + ExactSizeIterator + DoubleEndedIterator\n+{\n+    reverse_postorder(body).rev()\n+}\n+\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal.\n@@ -295,34 +302,12 @@ pub fn reachable_as_bitset(body: &Body<'_>) -> BitSet<BasicBlock> {\n     iter.visited\n }\n \n-#[derive(Clone)]\n-pub struct ReversePostorderIter<'a, 'tcx> {\n+/// Creates an iterator over the `Body`'s basic blocks, that:\n+/// - returns basic blocks in a reverse postorder,\n+/// - makes use of the `BasicBlocks` CFG cache's reverse postorder.\n+pub fn reverse_postorder<'a, 'tcx>(\n     body: &'a Body<'tcx>,\n-    blocks: &'a [BasicBlock],\n-    idx: usize,\n-}\n-\n-impl<'a, 'tcx> Iterator for ReversePostorderIter<'a, 'tcx> {\n-    type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n-\n-    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {\n-        if self.idx == 0 {\n-            return None;\n-        }\n-        self.idx -= 1;\n-\n-        self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (self.idx, Some(self.idx))\n-    }\n-}\n-\n-impl<'a, 'tcx> ExactSizeIterator for ReversePostorderIter<'a, 'tcx> {}\n-\n-pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorderIter<'a, 'tcx> {\n-    let blocks = body.basic_blocks.postorder();\n-    let len = blocks.len();\n-    ReversePostorderIter { body, blocks, idx: len }\n+) -> impl Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> + ExactSizeIterator + DoubleEndedIterator\n+{\n+    body.basic_blocks.reverse_postorder().iter().map(|&bb| (bb, &body.basic_blocks[bb]))\n }"}, {"sha": "2f2c7357b006959939c541654357bbf570b96bbc", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "patch": "@@ -118,8 +118,8 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n \n         // Traverse the body in reverse post-order, to ensure that `FullConstProp` locals are\n         // assigned before being read.\n-        let postorder = body.basic_blocks.postorder().to_vec();\n-        for bb in postorder.into_iter().rev() {\n+        let rpo = body.basic_blocks.reverse_postorder().to_vec();\n+        for bb in rpo {\n             let data = &mut body.basic_blocks.as_mut_preserves_cfg()[bb];\n             optimization_finder.visit_basic_block_data(bb, data);\n         }"}, {"sha": "745fa30841c35bad4410218240b8390607b6228e", "filename": "compiler/rustc_mir_transform/src/prettify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677710eaf0a0bdb008959ee8717c9fe1c6d187b3/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs?ref=677710eaf0a0bdb008959ee8717c9fe1c6d187b3", "patch": "@@ -24,7 +24,7 @@ impl<'tcx> MirPass<'tcx> for ReorderBasicBlocks {\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let rpo: IndexVec<BasicBlock, BasicBlock> =\n-            body.basic_blocks.postorder().iter().copied().rev().collect();\n+            body.basic_blocks.reverse_postorder().iter().copied().collect();\n         if rpo.iter().is_sorted() {\n             return;\n         }"}]}