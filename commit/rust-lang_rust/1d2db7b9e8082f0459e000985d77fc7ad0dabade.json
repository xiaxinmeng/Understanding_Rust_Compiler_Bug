{"sha": "1d2db7b9e8082f0459e000985d77fc7ad0dabade", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMmRiN2I5ZTgwODJmMDQ1OWUwMDA5ODVkNzdmYzdhZDBkYWJhZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-02T23:54:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-02T23:54:32Z"}, "message": "Auto merge of #43010 - stjepang:stabilize-sort-unstable, r=alexcrichton\n\nStabilize feature sort_unstable\n\nCloses #40585", "tree": {"sha": "1e233d61fd80946db5767e8979c4246197b92597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e233d61fd80946db5767e8979c4246197b92597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d2db7b9e8082f0459e000985d77fc7ad0dabade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2db7b9e8082f0459e000985d77fc7ad0dabade", "html_url": "https://github.com/rust-lang/rust/commit/1d2db7b9e8082f0459e000985d77fc7ad0dabade", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d2db7b9e8082f0459e000985d77fc7ad0dabade/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0679711398bef656699e1ff6b004ecccbdb67284", "url": "https://api.github.com/repos/rust-lang/rust/commits/0679711398bef656699e1ff6b004ecccbdb67284", "html_url": "https://github.com/rust-lang/rust/commit/0679711398bef656699e1ff6b004ecccbdb67284"}, {"sha": "66f8cddae55ae3699932b424823dc21cfa566e6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f8cddae55ae3699932b424823dc21cfa566e6b", "html_url": "https://github.com/rust-lang/rust/commit/66f8cddae55ae3699932b424823dc21cfa566e6b"}], "stats": {"total": 83, "additions": 20, "deletions": 63}, "files": [{"sha": "9effcfc774c7743bc55a7756741ed2ad263680ff", "filename": "src/doc/unstable-book/src/library-features/sort-unstable.md", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0679711398bef656699e1ff6b004ecccbdb67284/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsort-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/0679711398bef656699e1ff6b004ecccbdb67284/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsort-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsort-unstable.md?ref=0679711398bef656699e1ff6b004ecccbdb67284", "patch": "@@ -1,40 +0,0 @@\n-# `sort_unstable`\n-\n-The tracking issue for this feature is: [#40585]\n-\n-[#40585]: https://github.com/rust-lang/rust/issues/40585\n-\n-------------------------\n-\n-The default `sort` method on slices is stable. In other words, it guarantees\n-that the original order of equal elements is preserved after sorting. The\n-method has several undesirable characteristics:\n-\n-1. It allocates a sizable chunk of memory.\n-2. If you don't need stability, it is not as performant as it could be.\n-\n-An alternative is the new `sort_unstable` feature, which includes these\n-methods for sorting slices:\n-\n-1. `sort_unstable`\n-2. `sort_unstable_by`\n-3. `sort_unstable_by_key`\n-\n-Unstable sorting is generally faster and makes no allocations. The majority\n-of real-world sorting needs doesn't require stability, so these methods can\n-very often come in handy.\n-\n-Another important difference is that `sort` lives in `libstd` and\n-`sort_unstable` lives in `libcore`. The reason is that the former makes\n-allocations and the latter doesn't.\n-\n-A simple example:\n-\n-```rust\n-#![feature(sort_unstable)]\n-\n-let mut v = [-5, 4, 1, -3, 2];\n-\n-v.sort_unstable();\n-assert!(v == [-5, -3, 1, 2, 4]);\n-```"}, {"sha": "174628ccd0788e5eeeea962274542138cd643ad4", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -14,7 +14,6 @@\n #![feature(rand)]\n #![feature(repr_simd)]\n #![feature(slice_rotate)]\n-#![feature(sort_unstable)]\n #![feature(test)]\n \n extern crate rand;"}, {"sha": "23da29131362e6c3e0773668df58d5f30929200a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -83,7 +83,6 @@\n #![cfg_attr(not(test), feature(core_float))]\n #![cfg_attr(not(test), feature(exact_size_is_empty))]\n #![cfg_attr(not(test), feature(slice_rotate))]\n-#![cfg_attr(not(test), feature(sort_unstable))]\n #![cfg_attr(not(test), feature(str_checked_slicing))]\n #![cfg_attr(test, feature(rand, test))]\n #![feature(allocator)]"}, {"sha": "f4c2b9d054b4faf7019f7225795cb4456e4f7b08", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -1144,6 +1144,10 @@ impl<T> [T] {\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n+    /// When applicable, unstable sorting is preferred because it is generally faster than stable\n+    /// sorting and it doesn't allocate auxiliary memory.\n+    /// See [`sort_unstable`](#method.sort_unstable).\n+    ///\n     /// # Current implementation\n     ///\n     /// The current algorithm is an adaptive, iterative merge sort inspired by\n@@ -1174,6 +1178,10 @@ impl<T> [T] {\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n+    /// When applicable, unstable sorting is preferred because it is generally faster than stable\n+    /// sorting and it doesn't allocate auxiliary memory.\n+    /// See [`sort_unstable_by`](#method.sort_unstable_by).\n+    ///\n     /// # Current implementation\n     ///\n     /// The current algorithm is an adaptive, iterative merge sort inspired by\n@@ -1207,6 +1215,10 @@ impl<T> [T] {\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n+    /// When applicable, unstable sorting is preferred because it is generally faster than stable\n+    /// sorting and it doesn't allocate auxiliary memory.\n+    /// See [`sort_unstable_by_key`](#method.sort_unstable_by_key).\n+    ///\n     /// # Current implementation\n     ///\n     /// The current algorithm is an adaptive, iterative merge sort inspired by\n@@ -1251,17 +1263,14 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(sort_unstable)]\n-    ///\n     /// let mut v = [-5, 4, 1, -3, 2];\n     ///\n     /// v.sort_unstable();\n     /// assert!(v == [-5, -3, 1, 2, 4]);\n     /// ```\n     ///\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n-    // FIXME #40585: Mention `sort_unstable` in the documentation for `sort`.\n-    #[unstable(feature = \"sort_unstable\", issue = \"40585\")]\n+    #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     #[inline]\n     pub fn sort_unstable(&mut self)\n         where T: Ord\n@@ -1288,8 +1297,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(sort_unstable)]\n-    ///\n     /// let mut v = [5, 4, 1, 3, 2];\n     /// v.sort_unstable_by(|a, b| a.cmp(b));\n     /// assert!(v == [1, 2, 3, 4, 5]);\n@@ -1300,8 +1307,7 @@ impl<T> [T] {\n     /// ```\n     ///\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n-    // FIXME #40585: Mention `sort_unstable_by` in the documentation for `sort_by`.\n-    #[unstable(feature = \"sort_unstable\", issue = \"40585\")]\n+    #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     #[inline]\n     pub fn sort_unstable_by<F>(&mut self, compare: F)\n         where F: FnMut(&T, &T) -> Ordering\n@@ -1328,17 +1334,14 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(sort_unstable)]\n-    ///\n     /// let mut v = [-5i32, 4, 1, -3, 2];\n     ///\n     /// v.sort_unstable_by_key(|k| k.abs());\n     /// assert!(v == [1, 2, -3, 4, -5]);\n     /// ```\n     ///\n     /// [pdqsort]: https://github.com/orlp/pdqsort\n-    // FIXME #40585: Mention `sort_unstable_by_key` in the documentation for `sort_by_key`.\n-    #[unstable(feature = \"sort_unstable\", issue = \"40585\")]\n+    #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     #[inline]\n     pub fn sort_unstable_by_key<B, F>(&mut self, f: F)\n         where F: FnMut(&T) -> B,"}, {"sha": "62c7e7aa1cce223ada86607a9e9775b60f0e47d8", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -212,15 +212,15 @@ pub trait SliceExt {\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     fn copy_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Copy;\n \n-    #[unstable(feature = \"sort_unstable\", issue = \"40585\")]\n+    #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     fn sort_unstable(&mut self)\n         where Self::Item: Ord;\n \n-    #[unstable(feature = \"sort_unstable\", issue = \"40585\")]\n+    #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     fn sort_unstable_by<F>(&mut self, compare: F)\n         where F: FnMut(&Self::Item, &Self::Item) -> Ordering;\n \n-    #[unstable(feature = \"sort_unstable\", issue = \"40585\")]\n+    #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n     fn sort_unstable_by_key<B, F>(&mut self, f: F)\n         where F: FnMut(&Self::Item) -> B,\n               B: Ord;"}, {"sha": "518d56095d60105ecf05392ad73c45f2efa1769c", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -351,7 +351,7 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n     if start_l < end_l {\n         // The left block remains.\n-        // Move it's remaining out-of-order elements to the far right.\n+        // Move its remaining out-of-order elements to the far right.\n         debug_assert_eq!(width(l, r), block_l);\n         while start_l < end_l {\n             unsafe {\n@@ -363,7 +363,7 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n         width(v.as_mut_ptr(), r)\n     } else if start_r < end_r {\n         // The right block remains.\n-        // Move it's remaining out-of-order elements to the far left.\n+        // Move its remaining out-of-order elements to the far left.\n         debug_assert_eq!(width(l, r), block_r);\n         while start_r < end_r {\n             unsafe {"}, {"sha": "b0a57d97d5eff54aa7479324c683f23a794d2035", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -34,7 +34,6 @@\n #![feature(slice_patterns)]\n #![feature(slice_rotate)]\n #![feature(sort_internals)]\n-#![feature(sort_unstable)]\n #![feature(specialization)]\n #![feature(step_by)]\n #![feature(step_trait)]"}, {"sha": "e4cf893375c757e68d4695da606c7ca498c56314", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -39,7 +39,6 @@\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(discriminant_value)]\n-#![feature(sort_unstable)]\n #![feature(trace_macros)]\n #![feature(test)]\n "}, {"sha": "ac3149b90b8af9a7a6ceb970a8678993834edb1a", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -20,7 +20,6 @@\n \n #![feature(rand)]\n #![feature(conservative_impl_trait)]\n-#![feature(sort_unstable)]\n \n extern crate graphviz;\n #[macro_use] extern crate rustc;"}, {"sha": "99b718ea07b1e9cc6bc0a592702f2674b50d1b32", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d2db7b9e8082f0459e000985d77fc7ad0dabade/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=1d2db7b9e8082f0459e000985d77fc7ad0dabade", "patch": "@@ -26,7 +26,6 @@\n #![feature(specialization)]\n #![feature(discriminant_value)]\n #![feature(rustc_private)]\n-#![feature(sort_unstable)]\n \n #[macro_use]\n extern crate log;"}]}