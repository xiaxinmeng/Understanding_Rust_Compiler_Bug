{"sha": "282f75a4ced2b859b10779ea91d7e889ddfdc659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MmY3NWE0Y2VkMmI4NTliMTA3NzllYTkxZDdlODg5ZGRmZGM2NTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T23:02:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-15T23:20:48Z"}, "message": "Review comments: remove enum suggestion", "tree": {"sha": "33c32a276681dea64a69e56abfa7d00a1db2e021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c32a276681dea64a69e56abfa7d00a1db2e021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/282f75a4ced2b859b10779ea91d7e889ddfdc659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/282f75a4ced2b859b10779ea91d7e889ddfdc659", "html_url": "https://github.com/rust-lang/rust/commit/282f75a4ced2b859b10779ea91d7e889ddfdc659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/282f75a4ced2b859b10779ea91d7e889ddfdc659/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7691692c517da9a28c1682c48af0d64891c9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7691692c517da9a28c1682c48af0d64891c9ee", "html_url": "https://github.com/rust-lang/rust/commit/4a7691692c517da9a28c1682c48af0d64891c9ee"}], "stats": {"total": 28, "additions": 3, "deletions": 25}, "files": [{"sha": "889b6de7bfa818de0d0d6e07670a6c3c203667dd", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/282f75a4ced2b859b10779ea91d7e889ddfdc659/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f75a4ced2b859b10779ea91d7e889ddfdc659/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=282f75a4ced2b859b10779ea91d7e889ddfdc659", "patch": "@@ -2709,43 +2709,21 @@ impl<'a> Resolver<'a> {\n                             if is_expected(ctor_def) && !accessible_ctor {\n                                 err.span_label(span, format!(\"constructor is not visible \\\n                                                               here due to private fields\"));\n-                            } else if accessible_ctor {\n-                                let block = match ctor_def {\n-                                    Def::StructCtor(_, CtorKind::Fn) => \"(/* fields */)\",\n-                                    Def::StructCtor(_, CtorKind::Const) => \"\",\n-                                    Def::Struct(..) => \" { /* fields */ }\",\n-                                    def => bug!(\"found def `{:?}` when looking for a ctor\", def),\n-                                };\n-                                err.span_label(span, format!(\"did you mean `{}{}`?\",\n-                                                             path_str,\n-                                                             block));\n                             }\n                         } else {\n                             err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n                                                          path_str));\n                         }\n                         return (err, candidates);\n                     }\n-                    (Def::VariantCtor(_, CtorKind::Const), _) => {\n-                        err.span_label(span, format!(\"did you mean `{}`?\", path_str));\n-                        return (err, candidates);\n-                    }\n-                    (Def::VariantCtor(_, CtorKind::Fn), _) => {\n-                        err.span_label(span, format!(\"did you mean `{}( /* fields */ )`?\",\n-                                                      path_str));\n-                        return (err, candidates);\n-                    }\n-                    (Def::VariantCtor(_, CtorKind::Fictive), _) => {\n-                        err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                                      path_str));\n-                        return (err, candidates);\n-                    }\n                     (Def::SelfTy(..), _) if ns == ValueNS => {\n                         err.note(\"can't use `Self` as a constructor, you must use the \\\n                                   implemented struct\");\n+                        return (err, candidates);\n                     }\n-                    (Def::TyAlias(_def_id), _) => {\n+                    (Def::TyAlias(_), _) if ns == ValueNS => {\n                         err.note(\"can't use a type alias as a constructor\");\n+                        return (err, candidates);\n                     }\n                     _ => {}\n                 }"}]}