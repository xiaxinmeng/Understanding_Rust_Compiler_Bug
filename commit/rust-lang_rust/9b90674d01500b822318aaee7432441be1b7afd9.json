{"sha": "9b90674d01500b822318aaee7432441be1b7afd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTA2NzRkMDE1MDBiODIyMzE4YWFlZTc0MzI0NDFiZTFiN2FmZDk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T13:44:14Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-04-06T10:14:08Z"}, "message": "Allow for internalizing monomorphizations that cannot be shared.", "tree": {"sha": "1b8d722b42ebe00edf9ab55a365ff88393174065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b8d722b42ebe00edf9ab55a365ff88393174065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b90674d01500b822318aaee7432441be1b7afd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b90674d01500b822318aaee7432441be1b7afd9", "html_url": "https://github.com/rust-lang/rust/commit/9b90674d01500b822318aaee7432441be1b7afd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b90674d01500b822318aaee7432441be1b7afd9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e203b3ab712cb014a4d9dbdefc11cdf91c4d2717", "url": "https://api.github.com/repos/rust-lang/rust/commits/e203b3ab712cb014a4d9dbdefc11cdf91c4d2717", "html_url": "https://github.com/rust-lang/rust/commit/e203b3ab712cb014a4d9dbdefc11cdf91c4d2717"}], "stats": {"total": 164, "additions": 136, "deletions": 28}, "files": [{"sha": "7c5318a96f5ac5773422972984e7afd37179579b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -561,6 +561,7 @@ define_dep_nodes!( <'tcx>\n     [] ImplParent(DefId),\n     [] TraitOfItem(DefId),\n     [] IsReachableNonGeneric(DefId),\n+    [] IsUnreachableLocalDefinition(DefId),\n     [] IsMirAvailable(DefId),\n     [] ItemAttrs(DefId),\n     [] TransFnAttrs(DefId),"}, {"sha": "3e6002cbd51717eed89acfba42a5166bee8e2fc0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -15,6 +15,7 @@ use dep_graph::{DepNode, DepConstructor};\n use errors::DiagnosticBuilder;\n use session::Session;\n use session::config::{BorrowckMode, OutputFilenames, OptLevel};\n+use session::config::CrateType::*;\n use middle;\n use hir::{TraitCandidate, HirId, ItemLocalId};\n use hir::def::{Def, Export};\n@@ -1517,6 +1518,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    pub fn local_crate_exports_generics(self) -> bool {\n+        self.sess.crate_types.borrow().iter().any(|crate_type| {\n+            match crate_type {\n+                CrateTypeExecutable |\n+                CrateTypeStaticlib  |\n+                CrateTypeProcMacro  |\n+                CrateTypeCdylib     => false,\n+                CrateTypeRlib       |\n+                CrateTypeDylib      => true,\n+            }\n+        })\n+    }\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {"}, {"sha": "5a23a3b952a423c392f4aa8ce274d965b966285a", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -322,6 +322,7 @@ define_maps! { <'tcx>\n     [] fn reachable_non_generics: ReachableNonGenerics(CrateNum)\n         -> Lrc<DefIdMap<SymbolExportLevel>>,\n     [] fn is_reachable_non_generic: IsReachableNonGeneric(DefId) -> bool,\n+    [] fn is_unreachable_local_definition: IsUnreachableLocalDefinition(DefId) -> bool,\n \n     [] fn upstream_monomorphizations: UpstreamMonomorphizations(CrateNum)\n         -> Lrc<DefIdMap<Lrc<FxHashMap<&'tcx Substs<'tcx>, CrateNum>>>>,"}, {"sha": "65571aa6a692db4d10a0b8f63102a62f2ae20b62", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -1003,6 +1003,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::ImplParent => { force!(impl_parent, def_id!()); }\n         DepKind::TraitOfItem => { force!(trait_of_item, def_id!()); }\n         DepKind::IsReachableNonGeneric => { force!(is_reachable_non_generic, def_id!()); }\n+        DepKind::IsUnreachableLocalDefinition => {\n+            force!(is_unreachable_local_definition, def_id!());\n+        }\n         DepKind::IsMirAvailable => { force!(is_mir_available, def_id!()); }\n         DepKind::ItemAttrs => { force!(item_attrs, def_id!()); }\n         DepKind::TransFnAttrs => { force!(trans_fn_attrs, def_id!()); }"}, {"sha": "039ea2f015d212e20fd761b25dcf9fbcfbc513ea", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 64, "deletions": 21, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -301,7 +301,8 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut codegen_units = FxHashMap();\n     let is_incremental_build = tcx.sess.opts.incremental.is_some();\n     let mut internalization_candidates = FxHashSet();\n-    let share_generics = tcx.share_generics();\n+    let export_generics = tcx.share_generics() &&\n+                          tcx.local_crate_exports_generics();\n \n     for trans_item in trans_items {\n         match trans_item.instantiation_mode(tcx) {\n@@ -326,14 +327,27 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             .or_insert_with(make_codegen_unit);\n \n         let mut can_be_internalized = true;\n-        let default_visibility = |id: DefId| {\n-            if tcx.sess.target.target.options.default_hidden_visibility &&\n-               tcx.reachable_non_generics(id.krate).get(&id).cloned() !=\n-                    Some(SymbolExportLevel::C)\n-            {\n-                Visibility::Hidden\n-            } else {\n+        let default_visibility = |id: DefId, is_generic: bool| {\n+            if !tcx.sess.target.target.options.default_hidden_visibility {\n+                return Visibility::Default\n+            }\n+\n+            // Generic functions never have export level C\n+            if is_generic {\n+                return Visibility::Hidden\n+            }\n+\n+            // Things with export level C don't get instantiated in downstream\n+            // crates\n+            if !id.is_local() {\n+                return Visibility::Hidden\n+            }\n+\n+            if let Some(&SymbolExportLevel::C) = tcx.reachable_non_generics(id.krate)\n+                                                    .get(&id) {\n                 Visibility::Default\n+            } else {\n+                Visibility::Hidden\n             }\n         };\n         let (linkage, mut visibility) = match trans_item.explicit_linkage(tcx) {\n@@ -343,6 +357,11 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     MonoItem::Fn(ref instance) => {\n                         let visibility = match instance.def {\n                             InstanceDef::Item(def_id) => {\n+                                let is_generic = instance.substs\n+                                                         .types()\n+                                                         .next()\n+                                                         .is_some();\n+\n                                 // The `start_fn` lang item is actually a\n                                 // monomorphized instance of a function in the\n                                 // standard library, used for the `main`\n@@ -364,22 +383,46 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 if tcx.lang_items().start_fn() == Some(def_id) {\n                                     can_be_internalized = false;\n                                     Visibility::Hidden\n-                                } else if instance.substs.types().next().is_some() {\n-                                    if share_generics {\n-                                        can_be_internalized = false;\n-                                        Visibility::Default\n+                                } else if def_id.is_local() {\n+                                    if is_generic {\n+                                        if export_generics {\n+                                            if tcx.is_unreachable_local_definition(def_id) {\n+                                                // This instance cannot be used\n+                                                // from another crate.\n+                                                Visibility::Hidden\n+                                            } else {\n+                                                // This instance might be useful in\n+                                                // a downstream crate.\n+                                                can_be_internalized = false;\n+                                                default_visibility(def_id, true)\n+                                            }\n+                                        } else {\n+                                            // We are not exporting generics or\n+                                            // the definition is not reachable\n+                                            // for downstream crates, we can\n+                                            // internalize its instantiations.\n+                                            Visibility::Hidden\n+                                        }\n                                     } else {\n-                                        Visibility::Hidden\n+                                        // This isn't a generic function.\n+                                        if tcx.is_reachable_non_generic(def_id) {\n+                                            can_be_internalized = false;\n+                                            debug_assert!(!is_generic);\n+                                            default_visibility(def_id, false)\n+                                        } else {\n+                                            Visibility::Hidden\n+                                        }\n                                     }\n-                                } else if def_id.is_local() {\n-                                    if tcx.is_reachable_non_generic(def_id) {\n-                                        can_be_internalized = false;\n-                                        default_visibility(def_id)\n+                                } else {\n+                                    // This is an upstream DefId.\n+                                    if export_generics && is_generic {\n+                                        // If it is a upstream monomorphization\n+                                        // and we export generics, we must make\n+                                        // it available to downstream crates.\n+                                        default_visibility(def_id, true)\n                                     } else {\n                                         Visibility::Hidden\n                                     }\n-                                } else {\n-                                    Visibility::Hidden\n                                 }\n                             }\n                             InstanceDef::FnPtrShim(..) |\n@@ -396,7 +439,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     MonoItem::Static(def_id) => {\n                         let visibility = if tcx.is_reachable_non_generic(def_id) {\n                             can_be_internalized = false;\n-                            default_visibility(def_id)\n+                            default_visibility(def_id, false)\n                         } else {\n                             Visibility::Hidden\n                         };\n@@ -406,7 +449,7 @@ fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         let def_id = tcx.hir.local_def_id(node_id);\n                         let visibility = if tcx.is_reachable_non_generic(def_id) {\n                             can_be_internalized = false;\n-                            default_visibility(def_id)\n+                            default_visibility(def_id, false)\n                         } else {\n                             Visibility::Hidden\n                         };"}, {"sha": "e6bdcd5d76556b3eee0c8a64dbdf876f357e20d9", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -241,22 +241,20 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         symbols.push((exported_symbol, SymbolExportLevel::Rust));\n     }\n \n-    if tcx.share_generics() {\n+    if tcx.share_generics() && tcx.local_crate_exports_generics() {\n         use rustc::mir::mono::{Linkage, Visibility, MonoItem};\n         use rustc::ty::InstanceDef;\n \n         let (_, cgus) = tcx.collect_and_partition_translation_items(LOCAL_CRATE);\n \n         for (mono_item, &(linkage, visibility)) in cgus.iter()\n                                                        .flat_map(|cgu| cgu.items().iter()) {\n-            if linkage == Linkage::External {\n+            if linkage == Linkage::External && visibility == Visibility::Default {\n                 if let &MonoItem::Fn(Instance {\n                     def: InstanceDef::Item(def_id),\n                     substs,\n                 }) = mono_item {\n                     if substs.types().next().is_some() {\n-                        assert!(tcx.lang_items().start_fn() == Some(def_id) ||\n-                                visibility == Visibility::Default);\n                         symbols.push((ExportedSymbol::Generic(def_id, substs),\n                                       SymbolExportLevel::Rust));\n                     }\n@@ -310,11 +308,21 @@ fn upstream_monomorphizations_for_provider<'a, 'tcx>(\n        .cloned()\n }\n \n+fn is_unreachable_local_definition_provider(tcx: TyCtxt, def_id: DefId) -> bool {\n+    if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n+        !tcx.reachable_set(LOCAL_CRATE).0.contains(&node_id)\n+    } else {\n+        bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\",\n+              def_id)\n+    }\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     providers.reachable_non_generics = reachable_non_generics_provider;\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_local;\n     providers.exported_symbols = exported_symbols_provider_local;\n     providers.upstream_monomorphizations = upstream_monomorphizations_provider;\n+    providers.is_unreachable_local_definition = is_unreachable_local_definition_provider;\n }\n \n pub fn provide_extern(providers: &mut Providers) {"}, {"sha": "5fd5cbe3a008a7d9cfd9b0498f926c2c9f0e3b31", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b90674d01500b822318aaee7432441be1b7afd9/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=9b90674d01500b822318aaee7432441be1b7afd9", "patch": "@@ -148,16 +148,53 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         unsafe {\n             llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n \n-            if cx.tcx.share_generics() && instance.substs.types().next().is_some() {\n-                // If this is a generic function and we are sharing generics\n-                // it will always have Visibility::Default\n+            let is_generic = instance.substs.types().next().is_some();\n+\n+            if is_generic {\n+                if cx.tcx.share_generics() {\n+                    // We are in share_generics mode.\n+\n+                    if instance_def_id.is_local() {\n+                        // This is a definition from the current crate. If the\n+                        // definition is unreachable for downstream crates or\n+                        // the current crate does not re-export generics, the\n+                        // instance has been hidden\n+                        if cx.tcx.is_unreachable_local_definition(instance_def_id) ||\n+                           !cx.tcx.local_crate_exports_generics() {\n+                            llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+                        }\n+                    } else {\n+                        if cx.tcx.upstream_monomorphizations_for(instance_def_id)\n+                                 .map(|set| set.contains_key(instance.substs))\n+                                 .unwrap_or(false) {\n+                            // This is instantiated in another crate. It cannot be hidden\n+                        } else {\n+                            // This is a local instantiation of an upstream definition.\n+                            // If the current crate does not re-export it, it is hidden.\n+                            if !cx.tcx.local_crate_exports_generics() {\n+                                llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // When not sharing generics, all instances are in the same\n+                    // crate and have hidden visibility\n+                    llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n+                }\n             } else {\n+                // This is a non-generic function\n                 if cx.tcx.is_translated_item(instance_def_id) {\n+                    // This is a function that is instantiated in the local crate\n+\n                     if instance_def_id.is_local() {\n+                        // This is function that is defined in the local crate.\n+                        // If it is not reachable, it is hidden.\n                         if !cx.tcx.is_reachable_non_generic(instance_def_id) {\n                             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                         }\n                     } else {\n+                        // This is a function from an upstream crate that has\n+                        // been instantiated here. These are always hidden.\n                         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n                     }\n                 }"}]}