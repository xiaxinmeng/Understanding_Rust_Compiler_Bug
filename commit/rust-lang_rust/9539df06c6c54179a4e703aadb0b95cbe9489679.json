{"sha": "9539df06c6c54179a4e703aadb0b95cbe9489679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MzlkZjA2YzZjNTQxNzlhNGU3MDNhYWRiMGI5NWNiZTk0ODk2Nzk=", "commit": {"author": {"name": "Frederick Zhang", "email": "frederick888@tsundere.moe", "date": "2017-08-01T07:11:05Z"}, "committer": {"name": "Frederick Zhang", "email": "frederick888@tsundere.moe", "date": "2017-08-01T07:17:38Z"}, "message": "use BindingAnnotation instead of BindingMode", "tree": {"sha": "c94bcc510ada0e691ddeee2d39a6ff338a236f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94bcc510ada0e691ddeee2d39a6ff338a236f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9539df06c6c54179a4e703aadb0b95cbe9489679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9539df06c6c54179a4e703aadb0b95cbe9489679", "html_url": "https://github.com/rust-lang/rust/commit/9539df06c6c54179a4e703aadb0b95cbe9489679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9539df06c6c54179a4e703aadb0b95cbe9489679/comments", "author": {"login": "Frederick888", "id": 4507647, "node_id": "MDQ6VXNlcjQ1MDc2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4507647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederick888", "html_url": "https://github.com/Frederick888", "followers_url": "https://api.github.com/users/Frederick888/followers", "following_url": "https://api.github.com/users/Frederick888/following{/other_user}", "gists_url": "https://api.github.com/users/Frederick888/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederick888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederick888/subscriptions", "organizations_url": "https://api.github.com/users/Frederick888/orgs", "repos_url": "https://api.github.com/users/Frederick888/repos", "events_url": "https://api.github.com/users/Frederick888/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederick888/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Frederick888", "id": 4507647, "node_id": "MDQ6VXNlcjQ1MDc2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4507647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Frederick888", "html_url": "https://github.com/Frederick888", "followers_url": "https://api.github.com/users/Frederick888/followers", "following_url": "https://api.github.com/users/Frederick888/following{/other_user}", "gists_url": "https://api.github.com/users/Frederick888/gists{/gist_id}", "starred_url": "https://api.github.com/users/Frederick888/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Frederick888/subscriptions", "organizations_url": "https://api.github.com/users/Frederick888/orgs", "repos_url": "https://api.github.com/users/Frederick888/repos", "events_url": "https://api.github.com/users/Frederick888/events{/privacy}", "received_events_url": "https://api.github.com/users/Frederick888/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1fa1768a27c4bb5c47ce0bd002258474aa64cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fa1768a27c4bb5c47ce0bd002258474aa64cbe", "html_url": "https://github.com/rust-lang/rust/commit/f1fa1768a27c4bb5c47ce0bd002258474aa64cbe"}], "stats": {"total": 83, "additions": 43, "deletions": 40}, "files": [{"sha": "93b981a2b4a5e3339c29a4793a914f0ab8cddea5", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=9539df06c6c54179a4e703aadb0b95cbe9489679", "patch": "@@ -1,5 +1,6 @@\n use rustc::lint::*;\n use rustc::hir;\n+use rustc::hir::BindingAnnotation;\n use syntax_pos::{Span, NO_EXPANSION};\n use utils::{snippet, span_lint_and_then};\n \n@@ -94,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 };\n \n                 let mutability = match mode {\n-                    hir::BindByRef(hir::MutMutable) | hir::BindByValue(hir::MutMutable) => \"<mut> \",\n+                    BindingAnnotation::RefMut | BindingAnnotation::Mutable => \"<mut> \",\n                     _ => \"\",\n                 };\n "}, {"sha": "ec06e72749e2781f4f753be441744fa65dee0869", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9539df06c6c54179a4e703aadb0b95cbe9489679", "patch": "@@ -243,7 +243,7 @@ fn check_single_match_opt_like(cx: &LateContext, ex: &Expr, arms: &[Arm], expr:\n             }\n             print::to_string(print::NO_ANN, |s| s.print_qpath(path, false))\n         },\n-        PatKind::Binding(BindByValue(MutImmutable), _, ident, None) => ident.node.to_string(),\n+        PatKind::Binding(BindingAnnotation::Unannotated, _, ident, None) => ident.node.to_string(),\n         PatKind::Path(ref path) => print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)),\n         _ => return,\n     };"}, {"sha": "7fa2075b41e1436f1bb737b924dde806dcb2783b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9539df06c6c54179a4e703aadb0b95cbe9489679", "patch": "@@ -225,11 +225,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         for arg in iter_input_pats(decl, body) {\n-            if let PatKind::Binding(BindByRef(_), _, _, _) = arg.pat.node {\n-                span_lint(cx,\n-                          TOPLEVEL_REF_ARG,\n-                          arg.pat.span,\n-                          \"`ref` directly on a function argument is ignored. Consider using a reference type instead.\");\n+            match arg.pat.node {\n+                PatKind::Binding(BindingAnnotation::Ref, _, _, _) | PatKind::Binding(BindingAnnotation::RefMut, _, _, _) => {\n+                    span_lint(cx,\n+                              TOPLEVEL_REF_ARG,\n+                              arg.pat.span,\n+                              \"`ref` directly on a function argument is ignored. Consider using a reference type instead.\");\n+                },\n+                _ => {}\n             }\n         }\n     }\n@@ -238,33 +241,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if_let_chain! {[\n             let StmtDecl(ref d, _) = s.node,\n             let DeclLocal(ref l) = d.node,\n-            let PatKind::Binding(BindByRef(mt), _, i, None) = l.pat.node,\n+            let PatKind::Binding(an, _, i, None) = l.pat.node,\n             let Some(ref init) = l.init\n         ], {\n-            let init = Sugg::hir(cx, init, \"..\");\n-            let (mutopt,initref) = if mt == Mutability::MutMutable {\n-                (\"mut \", init.mut_addr())\n-            } else {\n-                (\"\", init.addr())\n-            };\n-            let tyopt = if let Some(ref ty) = l.ty {\n-                format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"_\"))\n-            } else {\n-                \"\".to_owned()\n-            };\n-            span_lint_and_then(cx,\n-                TOPLEVEL_REF_ARG,\n-                l.pat.span,\n-                \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n-                |db| {\n-                    db.span_suggestion(s.span,\n-                                       \"try\",\n-                                       format!(\"let {name}{tyopt} = {initref};\",\n-                                               name=snippet(cx, i.span, \"_\"),\n-                                               tyopt=tyopt,\n-                                               initref=initref));\n-                }\n-            );\n+            if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut {\n+                let init = Sugg::hir(cx, init, \"..\");\n+                let (mutopt,initref) = if an == BindingAnnotation::RefMut {\n+                    (\"mut \", init.mut_addr())\n+                } else {\n+                    (\"\", init.addr())\n+                };\n+                let tyopt = if let Some(ref ty) = l.ty {\n+                    format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"_\"))\n+                } else {\n+                    \"\".to_owned()\n+                };\n+                span_lint_and_then(cx,\n+                    TOPLEVEL_REF_ARG,\n+                    l.pat.span,\n+                    \"`ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\",\n+                    |db| {\n+                        db.span_suggestion(s.span,\n+                                           \"try\",\n+                                           format!(\"let {name}{tyopt} = {initref};\",\n+                                                   name=snippet(cx, i.span, \"_\"),\n+                                                   tyopt=tyopt,\n+                                                   initref=initref));\n+                    }\n+                );\n+            }\n         }};\n         if_let_chain! {[\n             let StmtSemi(ref expr, _) = s.node,"}, {"sha": "385fcc86adb6a50f8fce8fe28cb89946c8da4737", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=9539df06c6c54179a4e703aadb0b95cbe9489679", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use rustc::hir::{ExprAddrOf, Expr, MutImmutable, Pat, PatKind, BindingMode};\n+use rustc::hir::{ExprAddrOf, Expr, MutImmutable, Pat, PatKind, BindingAnnotation};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjustment, Adjust};\n use utils::{span_lint, in_macro};\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n             return;\n         }\n         if_let_chain! {[\n-            let PatKind::Binding(BindingMode::BindByRef(MutImmutable), _, _, _) = pat.node,\n+            let PatKind::Binding(BindingAnnotation::Ref, _, _, _) = pat.node,\n             let ty::TyRef(_, ref tam) = cx.tables.pat_ty(pat).sty,\n             tam.mutbl == MutImmutable,\n             let ty::TyRef(_, ref tam) = tam.ty.sty,"}, {"sha": "bfe52a412144e6606285b1e579e66fa397fdf348", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=9539df06c6c54179a4e703aadb0b95cbe9489679", "patch": "@@ -3,7 +3,7 @@\n //! This lint is **warn** by default\n \n use rustc::lint::*;\n-use rustc::hir::{MutImmutable, Pat, PatKind, BindingMode};\n+use rustc::hir::{MutImmutable, Pat, PatKind, BindingAnnotation};\n use rustc::ty;\n use utils::{span_lint, in_macro};\n \n@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n         if_let_chain! {[\n             // Pat is a pattern whose node\n             // is a binding which \"involves\" a immutable reference...\n-            let PatKind::Binding(BindingMode::BindByRef(MutImmutable), ..) = pat.node,\n+            let PatKind::Binding(BindingAnnotation::Ref, ..) = pat.node,\n             // Pattern's type is a reference. Get the type and mutability of referenced value (tam: TypeAndMut).\n             let ty::TyRef(_, ref tam) = cx.tables.pat_ty(pat).sty,\n             // This is an immutable reference."}, {"sha": "0740ca483f7b60ad4b99506586f9d769574fa1e9", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539df06c6c54179a4e703aadb0b95cbe9489679/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=9539df06c6c54179a4e703aadb0b95cbe9489679", "patch": "@@ -123,10 +123,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 !moved_vars.contains(&defid),\n             ], {\n                 // Note: `toplevel_ref_arg` warns if `BindByRef`\n-                let m = match mode {\n-                    BindingMode::BindByRef(m) | BindingMode::BindByValue(m) => m,\n-                };\n-                if m == Mutability::MutMutable {\n+                if mode == BindingAnnotation::Mutable || mode == BindingAnnotation::RefMut {\n                     continue;\n                 }\n "}]}