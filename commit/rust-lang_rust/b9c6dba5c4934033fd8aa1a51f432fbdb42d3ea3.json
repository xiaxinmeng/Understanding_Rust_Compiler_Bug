{"sha": "b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzZkYmE1YzQ5MzQwMzNmZDhhYTFhNTFmNDMyZmJkYjQyZDNlYTM=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-07T03:02:47Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-07-07T03:02:47Z"}, "message": "extend where clauses", "tree": {"sha": "ff72ce404057cc4e3f7ccbc527427afbff593655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff72ce404057cc4e3f7ccbc527427afbff593655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "html_url": "https://github.com/rust-lang/rust/commit/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a", "html_url": "https://github.com/rust-lang/rust/commit/a6d4d2b9455a7954a4321b2b3af3d3aa8dcdd08a"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "2c6c6bd2a935ba32f52dd9730594303d72a5153d", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=b9c6dba5c4934033fd8aa1a51f432fbdb42d3ea3", "patch": "@@ -289,21 +289,24 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     //   WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n     // }\n \n-    let wellformed_clauses = where_clauses\n-        .into_iter()\n-        .map(|wc| wc.lower())\n-        // WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n-        .map(|wc| {\n-            wc.map_bound(|goal| ProgramClause {\n-                goal: goal.into_wellformed_goal(),\n-                hypotheses: tcx.mk_goals(\n-                    where_clauses\n-                        .into_iter()\n-                        .map(|wc| Goal::from_poly_domain_goal(wc.lower(), tcx)),\n-                ),\n-            })\n-        })\n-        .map(Clause::ForAll);\n+    //Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n+    let mut extend_where_clauses = vec![ty::Binder::dummy(trait_pred.lower())];\n+    extend_where_clauses.extend(\n+        where_clauses\n+            .into_iter()\n+            .map(|wc| wc.lower().map_bound(|wc| wc.into_wellformed_goal())),\n+    );\n+\n+    // WellFormed(Self: Trait<P1..Pn>) :- Implemented(Self: Trait<P1..Pn>) && WellFormed(WC)\n+    let clause = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Trait(trait_pred)),\n+        hypotheses: tcx.mk_goals(\n+            extend_where_clauses\n+                .into_iter()\n+                .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n+        ),\n+    };\n+    let wellformed_clauses = iter::once(Clause::ForAll(ty::Binder::dummy(clause)));\n \n     tcx.mk_clauses(\n         clauses"}]}