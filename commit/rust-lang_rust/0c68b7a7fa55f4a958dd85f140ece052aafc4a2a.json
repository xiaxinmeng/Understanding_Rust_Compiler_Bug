{"sha": "0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNjhiN2E3ZmE1NWY0YTk1OGRkODVmMTQwZWNlMDUyYWFmYzRhMmE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-07T15:10:50Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:28Z"}, "message": "Update `body_owner` and `maybe_body_owned_by`", "tree": {"sha": "c5c3898c2c0d54cc21ed0ba0a20a495270b63d27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5c3898c2c0d54cc21ed0ba0a20a495270b63d27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "html_url": "https://github.com/rust-lang/rust/commit/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e", "html_url": "https://github.com/rust-lang/rust/commit/d3c73940b7516f68aaa682e5ef1b54e3b6103e3e"}], "stats": {"total": 70, "additions": 31, "deletions": 39}, "files": [{"sha": "38260eac890b8fcd315151a194a74f5d9dfe24f6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c68b7a7fa55f4a958dd85f140ece052aafc4a2a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0c68b7a7fa55f4a958dd85f140ece052aafc4a2a", "patch": "@@ -94,43 +94,41 @@ fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n     }\n }\n \n-impl<'hir> Entry<'hir> {\n-    fn associated_body(self) -> Option<BodyId> {\n-        match self.node {\n-            Node::Item(item) => match item.kind {\n-                ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body) => {\n-                    Some(body)\n-                }\n-                _ => None,\n-            },\n-\n-            Node::TraitItem(item) => match item.kind {\n-                TraitItemKind::Const(_, Some(body))\n-                | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n-                _ => None,\n-            },\n+fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n+    match node {\n+        Node::Item(item) => match item.kind {\n+            ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body) => {\n+                Some(body)\n+            }\n+            _ => None,\n+        },\n \n-            Node::ImplItem(item) => match item.kind {\n-                ImplItemKind::Const(_, body) | ImplItemKind::Method(_, body) => Some(body),\n-                _ => None,\n-            },\n+        Node::TraitItem(item) => match item.kind {\n+            TraitItemKind::Const(_, Some(body))\n+            | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n+            _ => None,\n+        },\n \n-            Node::AnonConst(constant) => Some(constant.body),\n+        Node::ImplItem(item) => match item.kind {\n+            ImplItemKind::Const(_, body) | ImplItemKind::Method(_, body) => Some(body),\n+            _ => None,\n+        },\n \n-            Node::Expr(expr) => match expr.kind {\n-                ExprKind::Closure(.., body, _, _) => Some(body),\n-                _ => None,\n-            },\n+        Node::AnonConst(constant) => Some(constant.body),\n \n+        Node::Expr(expr) => match expr.kind {\n+            ExprKind::Closure(.., body, _, _) => Some(body),\n             _ => None,\n-        }\n+        },\n+\n+        _ => None,\n     }\n+}\n \n-    fn is_body_owner(self, hir_id: HirId) -> bool {\n-        match self.associated_body() {\n-            Some(b) => b.hir_id == hir_id,\n-            None => false,\n-        }\n+fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n+    match associated_body(node) {\n+        Some(b) => b.hir_id == hir_id,\n+        None => false,\n     }\n }\n \n@@ -455,7 +453,7 @@ impl<'hir> Map<'hir> {\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {\n         let parent = self.get_parent_node(hir_id);\n-        assert!(self.lookup(parent).map_or(false, |e| e.is_body_owner(hir_id)));\n+        assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));\n         parent\n     }\n \n@@ -466,14 +464,8 @@ impl<'hir> Map<'hir> {\n     /// Given a `HirId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n     pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {\n-        if let Some(entry) = self.find_entry(hir_id) {\n-            if self.dep_graph.is_fully_enabled() {\n-                let hir_id_owner = hir_id.owner;\n-                let def_path_hash = self.definitions.def_path_hash(hir_id_owner);\n-                self.dep_graph.read(def_path_hash.to_dep_node(DepKind::HirBody));\n-            }\n-\n-            entry.associated_body()\n+        if let Some(node) = self.find(hir_id) {\n+            associated_body(node)\n         } else {\n             bug!(\"no entry for id `{}`\", hir_id)\n         }"}]}