{"sha": "ce61d4044d7621fd190a2ddd1f51fa78e2941518", "node_id": "C_kwDOAAsO6NoAKGNlNjFkNDA0NGQ3NjIxZmQxOTBhMmRkZDFmNTFmYTc4ZTI5NDE1MTg", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-03-27T23:08:17Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-04-03T19:29:57Z"}, "message": "Replace every Vec in Target(Options) with it's Cow equivalent", "tree": {"sha": "6d9fd86e7cc978dde4ae2810d5e3fe2888c8a74d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9fd86e7cc978dde4ae2810d5e3fe2888c8a74d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce61d4044d7621fd190a2ddd1f51fa78e2941518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce61d4044d7621fd190a2ddd1f51fa78e2941518", "html_url": "https://github.com/rust-lang/rust/commit/ce61d4044d7621fd190a2ddd1f51fa78e2941518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce61d4044d7621fd190a2ddd1f51fa78e2941518/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccff48f97b7a4438b9818f8ff0f60c1cd01cdbeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccff48f97b7a4438b9818f8ff0f60c1cd01cdbeb", "html_url": "https://github.com/rust-lang/rust/commit/ccff48f97b7a4438b9818f8ff0f60c1cd01cdbeb"}], "stats": {"total": 170, "additions": 117, "deletions": 53}, "files": [{"sha": "07edb70634e8be9c1c15019bbadfbd306ac307c2", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -674,10 +674,10 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     linker::disable_localization(&mut cmd);\n \n-    for &(ref k, ref v) in &sess.target.link_env {\n+    for &(ref k, ref v) in sess.target.link_env.iter() {\n         cmd.env(k.as_ref(), v.as_ref());\n     }\n-    for k in &sess.target.link_env_remove {\n+    for k in sess.target.link_env_remove.iter() {\n         cmd.env_remove(k.as_ref());\n     }\n "}, {"sha": "c915dd5bbf65c261dc7878409f94252e7e9b6482", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -2247,6 +2247,15 @@ impl<A: ToJson> ToJson for Vec<A> {\n     }\n }\n \n+impl<'a, A: ToJson> ToJson for Cow<'a, [A]>\n+where\n+    [A]: ToOwned,\n+{\n+    fn to_json(&self) -> Json {\n+        Json::Array(self.iter().map(|elt| elt.to_json()).collect())\n+    }\n+}\n+\n impl<T: ToString, A: ToJson> ToJson for BTreeMap<T, A> {\n     fn to_json(&self) -> Json {\n         let mut d = BTreeMap::new();"}, {"sha": "408fd4ed2e67425980689d30340aea24d87c1da3", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -956,7 +956,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(7); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    for fam in &sess.target.families {\n+    for fam in sess.target.families.iter() {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));"}, {"sha": "86f76fdb6a7f699819bb35cec08dd9bc02d64e13", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), \"arm64\".into()]);\n-    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on\n     // MACOSX_DEPLOYMENT_TARGET.  To enable cross-language LTO to work"}, {"sha": "f2cef7996ffecb8c6db70ceb5db4b1cc2f5eaf93", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -2,6 +2,8 @@ use std::{borrow::Cow, env};\n \n use crate::spec::{FramePointer, LldFlavor, SplitDebuginfo, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts(os: &'static str) -> TargetOptions {\n     // ELF TLS is only available in macOS 10.7+. If you try to compile for 10.6\n     // either the linker will complain if it is used or the binary will end up\n@@ -26,7 +28,7 @@ pub fn opts(os: &'static str) -> TargetOptions {\n         dynamic_linking: true,\n         linker_is_gnu: false,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         frame_pointer: FramePointer::Always,\n@@ -51,7 +53,7 @@ pub fn opts(os: &'static str) -> TargetOptions {\n         // this environment variable too in recent versions.\n         //\n         // For some more info see the commentary on #47086\n-        link_env: vec![(\"ZERO_AR_DATE\".into(), \"1\".into())],\n+        link_env: Cow::Borrowed(&[(Cow::Borrowed(\"ZERO_AR_DATE\"), Cow::Borrowed(\"1\"))]),\n \n         ..Default::default()\n     }"}, {"sha": "e2d08955c089c1815a4df02169e1629d818eb206", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::TargetOptions;\n+use crate::{spec::cvs, spec::TargetOptions};\n use std::borrow::Cow;\n \n use Arch::*;\n@@ -36,12 +36,12 @@ fn target_cpu(arch: Arch) -> &'static str {\n     }\n }\n \n-fn link_env_remove(arch: Arch) -> Vec<Cow<'static, str>> {\n+fn link_env_remove(arch: Arch) -> Cow<'static, [Cow<'static, str>]> {\n     match arch {\n         Armv7 | Armv7s | Arm64 | I386 | X86_64 | Arm64_sim => {\n-            vec![\"MACOSX_DEPLOYMENT_TARGET\".into()]\n+            cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n         }\n-        X86_64_macabi | Arm64_macabi => vec![\"IPHONEOS_DEPLOYMENT_TARGET\".into()],\n+        X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],\n     }\n }\n "}, {"sha": "2e050b44156bdfaa51231e610c8b53d23ae0a8c3", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,5 +1,7 @@\n use crate::spec::{LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n \n+use super::cvs;\n+\n /// A base target for Nintendo 3DS devices using the devkitARM toolchain.\n ///\n /// Requires the devkitARM toolchain for 3DS targets on the host system.\n@@ -30,7 +32,7 @@ pub fn target() -> Target {\n             linker_flavor: LinkerFlavor::Gcc,\n             cpu: \"mpcore\".into(),\n             executables: true,\n-            families: vec![\"unix\".into()],\n+            families: cvs![\"unix\"],\n             linker: Some(\"arm-none-eabi-gcc\".into()),\n             relocation_model: RelocModel::Static,\n             features: \"+vfp2\".into(),"}, {"sha": "43072d638943274067614c96a715877970542e54", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,11 +1,13 @@\n use crate::spec::{RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"dragonfly\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "05d60574f32de9c1e2eed50d3eca515afbaa9962", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,11 +1,13 @@\n use crate::spec::{RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"freebsd\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "2ee7047d7e0ac9c0c1fea751c74d675104fcc9b2", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,5 +1,7 @@\n use crate::spec::{crt_objects, LinkArgs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n@@ -25,7 +27,7 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"rust-lld\".into()),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         is_like_fuchsia: true,\n         pre_link_args,\n         pre_link_objects: crt_objects::new(&["}, {"sha": "25549491f4b685e08bbd8d7f82c8ab63e36605b1", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,11 +1,13 @@\n use crate::spec::{RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"haiku\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         relro_level: RelroLevel::Full,\n         ..Default::default()\n     }"}, {"sha": "ad716a6cd5aae149275254da6233676f2660b83e", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".into()]);\n-    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.frame_pointer = FramePointer::Always;"}, {"sha": "1f6202dd7f57b4575ba60f112cde1adeb6b1250c", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,6 +1,8 @@\n use crate::spec::{FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n use std::default::Default;\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     let mut late_link_args = LinkArgs::new();\n     late_link_args.insert(\n@@ -31,7 +33,7 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         is_like_solaris: true,\n         linker_is_gnu: false,\n         limit_rdylib_exports: false, // Linker doesn't support this"}, {"sha": "e185de78bcaaa94b670332c56426b03dffe3b736", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,6 +1,8 @@\n use crate::spec::{LinkerFlavor, PanicStrategy, TargetOptions};\n use std::default::Default;\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".into(),\n@@ -10,7 +12,7 @@ pub fn opts() -> TargetOptions {\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         ..Default::default()\n     }\n }"}, {"sha": "84d8e19159ae2f6a47c179ac8d2aeb5368582258", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,11 +1,13 @@\n use crate::spec::{RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"linux\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "dc8169b711847dbea3f941b55a435cca4a716bdc", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,6 +1,8 @@\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n use crate::spec::{Target, TargetOptions};\n \n+use super::cvs;\n+\n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n@@ -27,7 +29,7 @@ pub fn target() -> Target {\n             features: \"+single-float\".into(),\n \n             // PSP does not support trap-on-condition instructions.\n-            llvm_args: vec![\"-mno-check-zero-division\".into()],\n+            llvm_args: cvs![\"-mno-check-zero-division\"],\n             pre_link_args,\n             link_script: Some(LINKER_SCRIPT.into()),\n             ..Default::default()"}, {"sha": "6d23ddc09855bf44d1cb5414c8ceb661e301ea24", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1027,6 +1027,25 @@ supported_targets! {\n     (\"mips64-openwrt-linux-musl\", mips64_openwrt_linux_musl),\n }\n \n+/// Cow-Vec-Str: Cow<'static, [Cow<'static, str>]>\n+// FIXME(Urgau): Figure out why the obvious form `[\"\".into()].into()` doesn't work.\n+macro_rules! cvs {\n+    () => {\n+        ::std::borrow::Cow::Borrowed(&[])\n+    };\n+    ($($x:expr),+ $(,)?) => {\n+        {\n+            ::std::borrow::Cow::Borrowed(&[\n+                $(\n+                    ::std::borrow::Cow::Borrowed($x),\n+                )*\n+            ])\n+        }\n+    };\n+}\n+\n+pub(crate) use cvs;\n+\n /// Warnings encountered when parsing the target `json`.\n ///\n /// Includes fields that weren't recognized and fields that don't have the expected type.\n@@ -1160,12 +1179,12 @@ pub struct TargetOptions {\n     pub link_script: Option<Cow<'static, str>>,\n \n     /// Environment variables to be set for the linker invocation.\n-    pub link_env: Vec<(Cow<'static, str>, Cow<'static, str>)>,\n+    pub link_env: Cow<'static, [(Cow<'static, str>, Cow<'static, str>)]>,\n     /// Environment variables to be removed for the linker invocation.\n-    pub link_env_remove: Vec<Cow<'static, str>>,\n+    pub link_env_remove: Cow<'static, [Cow<'static, str>]>,\n \n     /// Extra arguments to pass to the external assembler (when used)\n-    pub asm_args: Vec<Cow<'static, str>>,\n+    pub asm_args: Cow<'static, [Cow<'static, str>]>,\n \n     /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n     /// to \"generic\".\n@@ -1211,7 +1230,7 @@ pub struct TargetOptions {\n     /// Common options are: \"unix\", \"windows\". Defaults to no families.\n     ///\n     /// See <https://doc.rust-lang.org/reference/conditional-compilation.html#target_family>.\n-    pub families: Vec<Cow<'static, str>>,\n+    pub families: Cow<'static, [Cow<'static, str>]>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -1371,7 +1390,7 @@ pub struct TargetOptions {\n \n     /// If set, have the linker export exactly these symbols, instead of using\n     /// the usual logic to figure this out from the crate itself.\n-    pub override_export_symbols: Option<Vec<Cow<'static, str>>>,\n+    pub override_export_symbols: Option<Cow<'static, [Cow<'static, str>]>>,\n \n     /// Determines how or whether the MergeFunctions LLVM pass should run for\n     /// this target. Either \"disabled\", \"trampolines\", or \"aliases\".\n@@ -1391,7 +1410,7 @@ pub struct TargetOptions {\n     pub relax_elf_relocations: bool,\n \n     /// Additional arguments to pass to LLVM, similar to the `-C llvm-args` codegen option.\n-    pub llvm_args: Vec<Cow<'static, str>>,\n+    pub llvm_args: Cow<'static, [Cow<'static, str>]>,\n \n     /// Whether to use legacy .ctors initialization hooks rather than .init_array. Defaults\n     /// to false (uses .init_array).\n@@ -1449,7 +1468,7 @@ impl Default for TargetOptions {\n             pre_link_args: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             link_script: None,\n-            asm_args: Vec::new(),\n+            asm_args: Cow::Borrowed(&[]),\n             cpu: \"generic\".into(),\n             features: Cow::from(\"\"),\n             dynamic_linking: false,\n@@ -1466,7 +1485,7 @@ impl Default for TargetOptions {\n             exe_suffix: Cow::from(\"\"),\n             staticlib_prefix: \"lib\".into(),\n             staticlib_suffix: \".a\".into(),\n-            families: Vec::new(),\n+            families: cvs![],\n             abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n@@ -1492,8 +1511,8 @@ impl Default for TargetOptions {\n             late_link_args: LinkArgs::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n             late_link_args_static: LinkArgs::new(),\n-            link_env: Vec::new(),\n-            link_env_remove: Vec::new(),\n+            link_env: Cow::Borrowed(&[]),\n+            link_env_remove: Cow::Borrowed(&[]),\n             archive_format: \"gnu\".into(),\n             main_needs_argc_argv: true,\n             allow_asm: true,\n@@ -1526,7 +1545,7 @@ impl Default for TargetOptions {\n             mcount: \"mcount\".into(),\n             llvm_abiname: \"\".into(),\n             relax_elf_relocations: false,\n-            llvm_args: vec![],\n+            llvm_args: cvs![],\n             use_ctors_section: false,\n             eh_frame_header: true,\n             has_thumb_interworking: false,\n@@ -1978,7 +1997,7 @@ impl Target {\n                                 if p.len() == 2 {\n                                     let k = p[0].to_string();\n                                     let v = p[1].to_string();\n-                                    base.$key_name.push((k.into(), v.into()));\n+                                    base.$key_name.to_mut().push((k.into(), v.into()));\n                                 }\n                             }\n                         }\n@@ -2004,7 +2023,7 @@ impl Target {\n                             .map(|a| a.as_string().unwrap().to_string().into())\n                             .collect();\n                     } else if let Some(v) = Json::as_string(&value) {\n-                        base.$key_name = vec![v.to_string().into()];\n+                        base.$key_name = vec![v.to_string().into()].into();\n                     }\n                 }\n             } );"}, {"sha": "f22c8672639f8bfbdb4667cfc152d581465a60e5", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,3 +1,4 @@\n+use super::cvs;\n use crate::spec::{PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -15,7 +16,7 @@ pub fn target() -> Target {\n             // workaround this LLVM generates assembly files which then we feed\n             // to gcc to get object files. For this reason we have a hard\n             // dependency on this specific gcc.\n-            asm_args: vec![\"-mcpu=msp430\".into()],\n+            asm_args: cvs![\"-mcpu=msp430\"],\n             linker: Some(\"msp430-elf-gcc\".into()),\n             linker_is_gnu: false,\n "}, {"sha": "a5fb58f5e7b659f7fb07eba551736133c9bd3501", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,11 +1,13 @@\n use crate::spec::{RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"netbsd\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         no_default_libraries: false,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "7745d10e13e4cd0e93290d65fc071b3a7fb55bd7", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,11 +1,13 @@\n use crate::spec::{FramePointer, RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"openbsd\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         abi_return_struct_as_int: true,\n         position_independent_executables: true,"}, {"sha": "667aa8e9c94c4d7c9b9683c9857962b51e1ab1da", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,12 +1,14 @@\n use crate::spec::{RelroLevel, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"redox\".into(),\n         env: \"relibc\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,"}, {"sha": "4c7401380fdebb7928f2d07e1db597f45c51511c", "filename": "compiler/rustc_target/src/spec/riscv32imc_esp_espidf.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imc_esp_espidf.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,6 +1,8 @@\n use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel};\n use crate::spec::{Target, TargetOptions};\n \n+use super::cvs;\n+\n pub fn target() -> Target {\n     Target {\n         data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n@@ -9,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"riscv32\".into(),\n \n         options: TargetOptions {\n-            families: vec![\"unix\".into()],\n+            families: cvs![\"unix\"],\n             os: \"espidf\".into(),\n             env: \"newlib\".into(),\n             vendor: \"espressif\".into(),"}, {"sha": "8d8ad049b33df3965ebc2ec125caa4834feb94a8", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,12 +1,14 @@\n use crate::spec::TargetOptions;\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"solaris\".into(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         is_like_solaris: true,\n         linker_is_gnu: false,\n         limit_rdylib_exports: false, // Linker doesn't support this"}, {"sha": "457b78850ace0e6d23c26a1cf0b38a405c67bec0", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -8,6 +8,7 @@\n //!\n //! **Important:** This target profile **does not** specify a linker script. You just get the default link script when you build a binary for this target. The default link script is very likely wrong, so you should use `-Clink-arg=-Tmy_script.ld` to override that with a correct linker script.\n \n+use super::cvs;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -34,11 +35,7 @@ pub fn target() -> Target {\n             // * activate t32/a32 interworking\n             // * use arch ARMv4T\n             // * use little-endian\n-            asm_args: vec![\n-                \"-mthumb-interwork\".into(),\n-                \"-march=armv4t\".into(),\n-                \"-mlittle-endian\".into(),\n-            ],\n+            asm_args: cvs![\"-mthumb-interwork\", \"-march=armv4t\", \"-mlittle-endian\",],\n \n             // minimum extra features, these cannot be disabled via -C\n             features: \"+soft-float,+strict-align\".into(),"}, {"sha": "f43cea131b7bec7e4bcfc2bce4067e825b2d481e", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,5 +1,7 @@\n use crate::spec::TargetOptions;\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"vxworks\".into(),\n@@ -9,7 +11,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".vxe\".into(),\n         dynamic_linking: true,\n         executables: true,\n-        families: vec![\"unix\".into()],\n+        families: cvs![\"unix\"],\n         has_rpath: true,\n         has_thread_local: true,\n         crt_static_default: true,"}, {"sha": "b34cac41d78ca89b847e0b620253731099eb3d30", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,4 +1,4 @@\n-use super::wasm_base;\n+use super::{cvs, wasm_base};\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -37,7 +37,7 @@ pub fn target() -> Target {\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        families: vec![\"unix\".into(), \"wasm\".into()],\n+        families: cvs![\"unix\", \"wasm\"],\n         ..options\n     };\n     Target {"}, {"sha": "d884dcf68bfa6e75eee55adce2630bd7ba350cca", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,5 +1,5 @@\n use super::crt_objects::CrtObjectsFallback;\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n+use super::{cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n@@ -61,7 +61,7 @@ pub fn options() -> TargetOptions {\n \n     TargetOptions {\n         is_like_wasm: true,\n-        families: vec![\"wasm\".into()],\n+        families: cvs![\"wasm\"],\n \n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but"}, {"sha": "1e5ced684bd557fd9c8b5c38d1627cd1780ceb1b", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,6 +1,8 @@\n use crate::spec::crt_objects::{self, CrtObjectsFallback};\n use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(\n@@ -71,7 +73,7 @@ pub fn opts() -> TargetOptions {\n         dll_prefix: \"\".into(),\n         dll_suffix: \".dll\".into(),\n         exe_suffix: \".exe\".into(),\n-        families: vec![\"windows\".into()],\n+        families: cvs![\"windows\"],\n         is_like_windows: true,\n         allows_weak_linkage: false,\n         pre_link_args,"}, {"sha": "bfe8edecac4093087942d2f1f6a00d362546de09", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,5 +1,7 @@\n use crate::spec::TargetOptions;\n \n+use super::cvs;\n+\n pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();\n \n@@ -13,7 +15,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".into(),\n         staticlib_prefix: \"\".into(),\n         staticlib_suffix: \".lib\".into(),\n-        families: vec![\"windows\".into()],\n+        families: cvs![\"windows\"],\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         requires_uwtable: true,"}, {"sha": "51d14f0403a5537a98515386abe7a526b66238d0", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n     base.frame_pointer = FramePointer::Always;\n     base.pre_link_args\n         .insert(LinkerFlavor::Gcc, vec![\"-m64\".into(), \"-arch\".into(), \"x86_64\".into()]);\n-    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n+    base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers ="}, {"sha": "33b5917b4016823a216188d1426fd48400766a10", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce61d4044d7621fd190a2ddd1f51fa78e2941518/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=ce61d4044d7621fd190a2ddd1f51fa78e2941518", "patch": "@@ -1,5 +1,7 @@\n use std::{borrow::Cow, iter};\n \n+use crate::spec::cvs;\n+\n use super::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -62,7 +64,7 @@ pub fn target() -> Target {\n         max_atomic_width: Some(64),\n         cpu: \"x86-64\".into(),\n         features: \"+rdrnd,+rdseed,+lvi-cfi,+lvi-load-hardening\".into(),\n-        llvm_args: vec![\"--x86-experimental-lvi-inline-asm-hardening\".into()],\n+        llvm_args: cvs![\"--x86-experimental-lvi-inline-asm-hardening\"],\n         position_independent_executables: true,\n         pre_link_args: iter::once((\n             LinkerFlavor::Lld(LldFlavor::Ld),"}]}