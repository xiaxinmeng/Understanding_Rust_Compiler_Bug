{"sha": "8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNmMxZGQzZDM2OTA4NTljOGM4ZWUyMDU2ZTc2MjdmNDFhNWFmZGE=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-05-21T23:43:59Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-15T15:38:10Z"}, "message": "Automatically calculate std::env::consts::ARCH.\n\nThis simplifies the definition for ARCH.\n\nNote that this changes asmjs-unknown-emscripten ARCH to `wasm32`,\nwhich reflects the actual target arch.", "tree": {"sha": "6fefc3e21711ea021b942babf3134e854534b531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fefc3e21711ea021b942babf3134e854534b531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "html_url": "https://github.com/rust-lang/rust/commit/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e8d6290745a65025a3e082aea72fbe372292c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e8d6290745a65025a3e082aea72fbe372292c6", "html_url": "https://github.com/rust-lang/rust/commit/d9e8d6290745a65025a3e082aea72fbe372292c6"}], "stats": {"total": 78, "additions": 2, "deletions": 76}, "files": [{"sha": "f33af1ef7f668b3fb8da494b9c529e18b14c525b", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "patch": "@@ -63,4 +63,5 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=c\");\n         println!(\"cargo:rustc-link-lib=compiler_rt\");\n     }\n+    println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n }"}, {"sha": "6489e0709cb91f8dec8d51f3a61d3709c1bfef87", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 76, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6c1dd3d3690859c8c8ee2056e7627f41a5afda/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=8c6c1dd3d3690859c8c8ee2056e7627f41a5afda", "patch": "@@ -882,7 +882,7 @@ pub mod consts {\n     /// - s390x\n     /// - sparc64\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const ARCH: &str = super::arch::ARCH;\n+    pub const ARCH: &str = env!(\"STD_ENV_ARCH\");\n \n     /// The family of the operating system. Example value is `unix`.\n     ///\n@@ -966,81 +966,6 @@ pub mod consts {\n     pub const EXE_EXTENSION: &str = os::EXE_EXTENSION;\n }\n \n-#[cfg(target_arch = \"x86\")]\n-mod arch {\n-    pub const ARCH: &str = \"x86\";\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n-mod arch {\n-    pub const ARCH: &str = \"x86_64\";\n-}\n-\n-#[cfg(target_arch = \"arm\")]\n-mod arch {\n-    pub const ARCH: &str = \"arm\";\n-}\n-\n-#[cfg(target_arch = \"aarch64\")]\n-mod arch {\n-    pub const ARCH: &str = \"aarch64\";\n-}\n-\n-#[cfg(target_arch = \"mips\")]\n-mod arch {\n-    pub const ARCH: &str = \"mips\";\n-}\n-\n-#[cfg(target_arch = \"mips64\")]\n-mod arch {\n-    pub const ARCH: &str = \"mips64\";\n-}\n-\n-#[cfg(target_arch = \"powerpc\")]\n-mod arch {\n-    pub const ARCH: &str = \"powerpc\";\n-}\n-\n-#[cfg(target_arch = \"powerpc64\")]\n-mod arch {\n-    pub const ARCH: &str = \"powerpc64\";\n-}\n-\n-#[cfg(target_arch = \"s390x\")]\n-mod arch {\n-    pub const ARCH: &str = \"s390x\";\n-}\n-\n-#[cfg(target_arch = \"sparc64\")]\n-mod arch {\n-    pub const ARCH: &str = \"sparc64\";\n-}\n-\n-#[cfg(target_arch = \"le32\")]\n-mod arch {\n-    pub const ARCH: &str = \"le32\";\n-}\n-\n-#[cfg(target_arch = \"asmjs\")]\n-mod arch {\n-    pub const ARCH: &str = \"asmjs\";\n-}\n-\n-#[cfg(target_arch = \"wasm32\")]\n-mod arch {\n-    pub const ARCH: &str = \"wasm32\";\n-}\n-\n-#[cfg(target_arch = \"hexagon\")]\n-mod arch {\n-    pub const ARCH: &'static str = \"hexagon\";\n-}\n-\n-#[cfg(target_arch = \"riscv64\")]\n-mod arch {\n-    pub const ARCH: &'static str = \"riscv64\";\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}