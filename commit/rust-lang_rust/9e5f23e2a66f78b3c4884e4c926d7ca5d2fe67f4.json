{"sha": "9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "node_id": "C_kwDOAAsO6NoAKDllNWYyM2UyYTY2Zjc4YjNjNDg4NGU0YzkyNmQ3Y2E1ZDJmZTY3ZjQ", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-11-18T22:33:49Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-07T21:31:46Z"}, "message": "Update clippy for associated item changes", "tree": {"sha": "7135621df6280e2886f44fe4743fcce90f792878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7135621df6280e2886f44fe4743fcce90f792878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "html_url": "https://github.com/rust-lang/rust/commit/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7d496f72a3a9745756c88179b4a23cc550f89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7d496f72a3a9745756c88179b4a23cc550f89e", "html_url": "https://github.com/rust-lang/rust/commit/3b7d496f72a3a9745756c88179b4a23cc550f89e"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "d805bbc79269015c9c466a22e2b3a38524253951", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "patch": "@@ -4,6 +4,15 @@ error[E0437]: type `bar` is not a member of trait `Foo`\n LL |     type bar = u64;\n    |     ^^^^^^^^^^^^^^^ not a member of trait `Foo`\n \n+error[E0324]: item `MY_CONST` is an associated method, which doesn't match its trait `Foo`\n+  --> $DIR/impl-wrong-item-for-trait.rs:22:5\n+   |\n+LL |     const MY_CONST: u32;\n+   |     -------------------- item in trait\n+...\n+LL |     fn MY_CONST() {}\n+   |     ^^^^^^^^^^^^^^^^ does not match trait\n+\n error[E0323]: item `bar` is an associated const, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:12:5\n    |\n@@ -13,6 +22,15 @@ LL |     fn bar(&self);\n LL |     const bar: u64 = 1;\n    |     ^^^^^^^^^^^^^^^^^^^ does not match trait\n \n+error[E0325]: item `bar` is an associated type, which doesn't match its trait `Foo`\n+  --> $DIR/impl-wrong-item-for-trait.rs:30:5\n+   |\n+LL |     fn bar(&self);\n+   |     -------------- item in trait\n+...\n+LL |     type bar = u64;\n+   |     ^^^^^^^^^^^^^^^ does not match trait\n+\n error[E0046]: not all trait items implemented, missing: `bar`\n   --> $DIR/impl-wrong-item-for-trait.rs:10:1\n    |\n@@ -22,15 +40,6 @@ LL |     fn bar(&self);\n LL | impl Foo for FooConstForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `bar` in implementation\n \n-error[E0324]: item `MY_CONST` is an associated method, which doesn't match its trait `Foo`\n-  --> $DIR/impl-wrong-item-for-trait.rs:22:5\n-   |\n-LL |     const MY_CONST: u32;\n-   |     -------------------- item in trait\n-...\n-LL |     fn MY_CONST() {}\n-   |     ^^^^^^^^^^^^^^^^ does not match trait\n-\n error[E0046]: not all trait items implemented, missing: `MY_CONST`\n   --> $DIR/impl-wrong-item-for-trait.rs:19:1\n    |\n@@ -40,15 +49,6 @@ LL |     const MY_CONST: u32;\n LL | impl Foo for FooMethodForConst {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `MY_CONST` in implementation\n \n-error[E0325]: item `bar` is an associated type, which doesn't match its trait `Foo`\n-  --> $DIR/impl-wrong-item-for-trait.rs:30:5\n-   |\n-LL |     fn bar(&self);\n-   |     -------------- item in trait\n-...\n-LL |     type bar = u64;\n-   |     ^^^^^^^^^^^^^^^ does not match trait\n-\n error[E0046]: not all trait items implemented, missing: `bar`\n   --> $DIR/impl-wrong-item-for-trait.rs:28:1\n    |"}, {"sha": "64f6d62fbdcd80c12fac55ad62654d9054f75cee", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "patch": "@@ -214,14 +214,14 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n+        let is_empty = sym!(is_empty);\n \n         let is_empty_method_found = current_and_super_traits\n             .iter()\n-            .flat_map(|&i| cx.tcx.associated_items(i).in_definition_order())\n+            .flat_map(|&i| cx.tcx.associated_items(i).filter_by_name_unhygienic(is_empty))\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn\n                     && i.fn_has_self_parameter\n-                    && i.ident.name == sym!(is_empty)\n                     && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n             });\n \n@@ -458,7 +458,7 @@ fn is_empty_array(expr: &Expr<'_>) -> bool {\n fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n-        if item.kind == ty::AssocKind::Fn && item.ident.name.as_str() == \"is_empty\" {\n+        if item.kind == ty::AssocKind::Fn {\n             let sig = cx.tcx.fn_sig(item.def_id);\n             let ty = sig.skip_binder();\n             ty.inputs().len() == 1\n@@ -469,20 +469,22 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n \n     /// Checks the inherent impl's items for an `is_empty(self)` method.\n     fn has_is_empty_impl(cx: &LateContext<'_>, id: DefId) -> bool {\n+        let is_empty = sym!(is_empty);\n         cx.tcx.inherent_impls(id).iter().any(|imp| {\n             cx.tcx\n                 .associated_items(*imp)\n-                .in_definition_order()\n+                .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         })\n     }\n \n     let ty = &cx.typeck_results().expr_ty(expr).peel_refs();\n     match ty.kind() {\n         ty::Dynamic(tt, ..) => tt.principal().map_or(false, |principal| {\n+            let is_empty = sym!(is_empty);\n             cx.tcx\n                 .associated_items(principal.def_id())\n-                .in_definition_order()\n+                .filter_by_name_unhygienic(is_empty)\n                 .any(|item| is_is_empty(cx, item))\n         }),\n         ty::Projection(ref proj) => has_is_empty_impl(cx, proj.item_def_id),"}, {"sha": "7d2ff083b7e07f95b8c76971933638d3caf175f2", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "patch": "@@ -12,11 +12,10 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{\n     BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n-use rustc_infer::traits::specialization_graph;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::adjustment::Adjust;\n-use rustc_middle::ty::{self, AssocKind, Const, Ty};\n+use rustc_middle::ty::{self, Const, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n@@ -293,8 +292,10 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                         // Lint a trait impl item only when the definition is a generic type,\n                         // assuming an assoc const is not meant to be an interior mutable type.\n                         if let Some(of_trait_def_id) = of_trait_ref.trait_def_id();\n-                        if let Some(of_assoc_item) = specialization_graph::Node::Trait(of_trait_def_id)\n-                            .item(cx.tcx, impl_item.ident, AssocKind::Const, of_trait_def_id);\n+                        if let Some(of_assoc_item) = cx\n+                            .tcx\n+                            .associated_item(impl_item.def_id)\n+                            .trait_item_def_id;\n                         if cx\n                             .tcx\n                             .layout_of(cx.tcx.param_env(of_trait_def_id).and(\n@@ -303,7 +304,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                                 // and, in that case, the definition is *not* generic.\n                                 cx.tcx.normalize_erasing_regions(\n                                     cx.tcx.param_env(of_trait_def_id),\n-                                    cx.tcx.type_of(of_assoc_item.def_id),\n+                                    cx.tcx.type_of(of_assoc_item),\n                                 ),\n                             ))\n                             .is_err();"}, {"sha": "a86db58741eb6ca0a052b2dbf21756dd0ee2d03f", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=9e5f23e2a66f78b3c4884e4c926d7ca5d2fe67f4", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::ty::AssocKind;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -143,10 +142,10 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                 // trait, not in the impl of the trait.\n                 let trait_method = cx\n                     .tcx\n-                    .associated_items(impl_trait_ref.def_id)\n-                    .find_by_name_and_kind(cx.tcx, impl_item.ident, AssocKind::Fn, impl_trait_ref.def_id)\n+                    .associated_item(impl_item.def_id)\n+                    .trait_item_def_id\n                     .expect(\"impl method matches a trait method\");\n-                let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);\n+                let trait_method_sig = cx.tcx.fn_sig(trait_method);\n                 let trait_method_sig = cx.tcx.erase_late_bound_regions(trait_method_sig);\n \n                 // `impl_inputs_outputs` is an iterator over the types (`hir::Ty`) declared in the"}]}