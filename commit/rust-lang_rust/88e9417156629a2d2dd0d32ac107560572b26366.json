{"sha": "88e9417156629a2d2dd0d32ac107560572b26366", "node_id": "C_kwDOAAsO6NoAKDg4ZTk0MTcxNTY2MjlhMmQyZGQwZDMyYWMxMDc1NjA1NzJiMjYzNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:29:26Z"}, "message": "Rollup merge of #98835 - aliemjay:relate_closure_substs, r=nikomatsakis\n\nrelate `closure_substs.parent_substs()` to parent fn in NLL\n\nFixes #98589\n\nThe discrepancy between early- and late-bound lifetimes is because we map early-bound lifetimes into those found in the `closure_substs` while late-bound lifetimes are mapped into liberated free regions:\nhttps://github.com/rust-lang/rust/blob/5f98537eb7b5f42c246a52c550813c3cff336069/compiler/rustc_borrowck/src/universal_regions.rs#L255-L261\n\nr? `@rust-lang/types`", "tree": {"sha": "3f287a4018738c39ee097d6929b701989edc62a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f287a4018738c39ee097d6929b701989edc62a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e9417156629a2d2dd0d32ac107560572b26366", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tqnCRBK7hj4Ov3rIwAAOqAIAHEovpI+7bFBTHlNEMd4VHx9\nBMShlAIPhFfrGkBcKzTuiqgiw9ZB6ZyXMUloiksYePE2vxHTlGwnOD8FSj8gPOqG\nlDlnhHWfpsuFif4wKzgvKE9QZ6h19zKIdXottocUg0b9KGL6oQI1Qojg4owuoEMZ\nohdc0tP7ItniPFj4BYP+zOKZo3RCv+LUAv977dl5w9yQs3tid5DcEw+RGEHdKPc9\nan5Zkvk0aVD+C++5F+hnMocwdpJJVVG2nz4g76VckxTVzNvQHs7xiknDdNgdti9L\n/cTvwCOJBEASbMrAqiNGiLEJXnxdGgwG4B/O+8hGUCJ00LVmHJqed+w7iUL6kCQ=\n=8fMG\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f287a4018738c39ee097d6929b701989edc62a5\nparent 7b0360e516ffa5979b38958a274243294fb61700\nparent 78adc0139cda567c1f3633137e70bd4b23106f4e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558566 +0200\ncommitter GitHub <noreply@github.com> 1659558566 +0200\n\nRollup merge of #98835 - aliemjay:relate_closure_substs, r=nikomatsakis\n\nrelate `closure_substs.parent_substs()` to parent fn in NLL\n\nFixes #98589\n\nThe discrepancy between early- and late-bound lifetimes is because we map early-bound lifetimes into those found in the `closure_substs` while late-bound lifetimes are mapped into liberated free regions:\nhttps://github.com/rust-lang/rust/blob/5f98537eb7b5f42c246a52c550813c3cff336069/compiler/rustc_borrowck/src/universal_regions.rs#L255-L261\n\nr? `@rust-lang/types`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e9417156629a2d2dd0d32ac107560572b26366", "html_url": "https://github.com/rust-lang/rust/commit/88e9417156629a2d2dd0d32ac107560572b26366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e9417156629a2d2dd0d32ac107560572b26366/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0360e516ffa5979b38958a274243294fb61700", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0360e516ffa5979b38958a274243294fb61700", "html_url": "https://github.com/rust-lang/rust/commit/7b0360e516ffa5979b38958a274243294fb61700"}, {"sha": "78adc0139cda567c1f3633137e70bd4b23106f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/78adc0139cda567c1f3633137e70bd4b23106f4e", "html_url": "https://github.com/rust-lang/rust/commit/78adc0139cda567c1f3633137e70bd4b23106f4e"}], "stats": {"total": 147, "additions": 146, "deletions": 1}, "files": [{"sha": "d32b1edcd8fd75b7e942d5d4e833f04eea9e4c3c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88e9417156629a2d2dd0d32ac107560572b26366/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e9417156629a2d2dd0d32ac107560572b26366/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=88e9417156629a2d2dd0d32ac107560572b26366", "patch": "@@ -2619,6 +2619,34 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             );\n         }\n \n+        // Now equate closure substs to regions inherited from `typeck_root_def_id`. Fixes #98589.\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.body.source.def_id());\n+        let typeck_root_substs = ty::InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n+\n+        let parent_substs = match tcx.def_kind(def_id) {\n+            DefKind::Closure => substs.as_closure().parent_substs(),\n+            DefKind::Generator => substs.as_generator().parent_substs(),\n+            DefKind::InlineConst => substs.as_inline_const().parent_substs(),\n+            other => bug!(\"unexpected item {:?}\", other),\n+        };\n+        let parent_substs = tcx.mk_substs(parent_substs.iter());\n+\n+        assert_eq!(typeck_root_substs.len(), parent_substs.len());\n+        if let Err(_) = self.eq_substs(\n+            typeck_root_substs,\n+            parent_substs,\n+            location.to_locations(),\n+            ConstraintCategory::BoringNoLocation,\n+        ) {\n+            span_mirbug!(\n+                self,\n+                def_id,\n+                \"could not relate closure to parent {:?} != {:?}\",\n+                typeck_root_substs,\n+                parent_substs\n+            );\n+        }\n+\n         tcx.predicates_of(def_id).instantiate(tcx, substs)\n     }\n "}, {"sha": "c97a6a1a6587a56aa13f07c564c1e4af4430ee99", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88e9417156629a2d2dd0d32ac107560572b26366/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e9417156629a2d2dd0d32ac107560572b26366/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=88e9417156629a2d2dd0d32ac107560572b26366", "patch": "@@ -38,6 +38,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         .relate(a, b)?;\n         Ok(())\n     }\n+\n+    /// Add sufficient constraints to ensure `a == b`. See also [Self::relate_types].\n+    pub(super) fn eq_substs(\n+        &mut self,\n+        a: ty::SubstsRef<'tcx>,\n+        b: ty::SubstsRef<'tcx>,\n+        locations: Locations,\n+        category: ConstraintCategory<'tcx>,\n+    ) -> Fallible<()> {\n+        TypeRelating::new(\n+            self.infcx,\n+            NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::other()),\n+            ty::Variance::Invariant,\n+        )\n+        .relate(a, b)?;\n+        Ok(())\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {"}, {"sha": "71f070f2678b36c910f9868ff94ea0c86762ac76", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88e9417156629a2d2dd0d32ac107560572b26366/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e9417156629a2d2dd0d32ac107560572b26366/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=88e9417156629a2d2dd0d32ac107560572b26366", "patch": "@@ -24,7 +24,10 @@ pub(crate) struct AutoTraitFinder<'a, 'tcx> {\n     pub(crate) cx: &'a mut core::DocContext<'tcx>,\n }\n \n-impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n+impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx>\n+where\n+    'tcx: 'a, // should be an implied bound; rustc bug #98852.\n+{\n     pub(crate) fn new(cx: &'a mut core::DocContext<'tcx>) -> Self {\n         AutoTraitFinder { cx }\n     }"}, {"sha": "6cc4340bbd7335a747167b051036cd618136dde7", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/88e9417156629a2d2dd0d32ac107560572b26366/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e9417156629a2d2dd0d32ac107560572b26366/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.rs?ref=88e9417156629a2d2dd0d32ac107560572b26366", "patch": "@@ -0,0 +1,36 @@\n+// Regression test for #98589.\n+// Previously, named lifetime `'a` that appears in the closure was unrelated to `'a`\n+// that appears in the parent function iff `'a` is early-bound.\n+// This made the following tests pass borrowck.\n+\n+// check-fail\n+\n+// The bound `'a: 'a` ensures that `'a` is early-bound.\n+fn test_early_early<'a: 'a, 'b: 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn test_early_late<'a: 'a, 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+// No early-bound lifetime; included for completeness.\n+fn test_late_late<'a, 'b>() {\n+    || { None::<&'a &'b ()>; };\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn test_early_type<'a: 'a, T>() {\n+    || { None::<&'a T>; };\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+// No early-bound lifetime; included for completeness.\n+fn test_late_type<'a, T>() {\n+    || { None::<&'a T>; };\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "6def5602e70b3a4499bed252c82d7318794f11c4", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/88e9417156629a2d2dd0d32ac107560572b26366/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88e9417156629a2d2dd0d32ac107560572b26366/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr?ref=88e9417156629a2d2dd0d32ac107560572b26366", "patch": "@@ -0,0 +1,61 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:10:5\n+   |\n+LL | fn test_early_early<'a: 'a, 'b: 'b>() {\n+   |                     --      -- lifetime `'b` defined here\n+   |                     |\n+   |                     lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:15:10\n+   |\n+LL | fn test_early_late<'a: 'a, 'b>() {\n+   |                    --      -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |          ^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:21:10\n+   |\n+LL | fn test_late_late<'a, 'b>() {\n+   |                   --  -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+LL |     || { None::<&'a &'b ()>; };\n+   |          ^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:26:5\n+   |\n+LL |     || { None::<&'a T>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn test_early_type<'a: 'a, T: 'a>() {\n+   |                             ++++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:32:5\n+   |\n+LL |     || { None::<&'a T>; };\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn test_late_type<'a, T: 'a>() {\n+   |                        ++++\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}]}