{"sha": "11b8f9c3f666e3a0533da0f3a00188689fc60cb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjhmOWMzZjY2NmUzYTA1MzNkYTBmM2EwMDE4ODY4OWZjNjBjYjQ=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-02T07:01:33Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-12T03:33:05Z"}, "message": "Implement Index for SmallIntMap\n\nThis also deprecates SmallIntMap::get. Use indexing instead.", "tree": {"sha": "5ba811cba77e342bfdbd53391cf05786717b5766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ba811cba77e342bfdbd53391cf05786717b5766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b8f9c3f666e3a0533da0f3a00188689fc60cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b8f9c3f666e3a0533da0f3a00188689fc60cb4", "html_url": "https://github.com/rust-lang/rust/commit/11b8f9c3f666e3a0533da0f3a00188689fc60cb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b8f9c3f666e3a0533da0f3a00188689fc60cb4/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd6bc6887858f91b846ffa7dbd9f0f49b9f3b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd6bc6887858f91b846ffa7dbd9f0f49b9f3b87", "html_url": "https://github.com/rust-lang/rust/commit/2dd6bc6887858f91b846ffa7dbd9f0f49b9f3b87"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "39244c7cd5fa60a7dc2c4e3581a97072acb95d8f", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/11b8f9c3f666e3a0533da0f3a00188689fc60cb4/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b8f9c3f666e3a0533da0f3a00188689fc60cb4/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=11b8f9c3f666e3a0533da0f3a00188689fc60cb4", "patch": "@@ -209,12 +209,15 @@ impl<V> SmallIntMap<V> {\n     /// # Example\n     ///\n     /// ```\n+    /// #![allow(deprecated)]\n+    ///\n     /// use std::collections::SmallIntMap;\n     ///\n     /// let mut map = SmallIntMap::new();\n     /// map.insert(1, \"a\");\n     /// assert_eq!(map.get(&1), &\"a\");\n     /// ```\n+    #[deprecated = \"prefer using indexing, e.g., map[0]\"]\n     pub fn get<'a>(&'a self, key: &uint) -> &'a V {\n         self.find(key).expect(\"key not present\")\n     }\n@@ -330,11 +333,11 @@ impl<V:Clone> SmallIntMap<V> {\n     ///\n     /// // Key does not exist, will do a simple insert\n     /// assert!(map.update(1, vec![1i, 2], |old, new| old.append(new.as_slice())));\n-    /// assert_eq!(map.get(&1), &vec![1i, 2]);\n+    /// assert_eq!(map[1], vec![1i, 2]);\n     ///\n     /// // Key exists, update the value\n     /// assert!(!map.update(1, vec![3i, 4], |old, new| old.append(new.as_slice())));\n-    /// assert_eq!(map.get(&1), &vec![1i, 2, 3, 4]);\n+    /// assert_eq!(map[1], vec![1i, 2, 3, 4]);\n     /// ```\n     pub fn update(&mut self, key: uint, newval: V, ff: |V, V| -> V) -> bool {\n         self.update_with_key(key, newval, |_k, v, v1| ff(v,v1))\n@@ -354,11 +357,11 @@ impl<V:Clone> SmallIntMap<V> {\n     ///\n     /// // Key does not exist, will do a simple insert\n     /// assert!(map.update_with_key(7, 10, |key, old, new| (old + new) % key));\n-    /// assert_eq!(map.get(&7), &10);\n+    /// assert_eq!(map[7], 10);\n     ///\n     /// // Key exists, update the value\n     /// assert!(!map.update_with_key(7, 20, |key, old, new| (old + new) % key));\n-    /// assert_eq!(map.get(&7), &2);\n+    /// assert_eq!(map[7], 2);\n     /// ```\n     pub fn update_with_key(&mut self,\n                            key: uint,\n@@ -416,6 +419,21 @@ impl<V> Extendable<(uint, V)> for SmallIntMap<V> {\n     }\n }\n \n+impl<V> Index<uint, V> for SmallIntMap<V> {\n+    #[inline]\n+    fn index<'a>(&'a self, i: &uint) -> &'a V {\n+        self.get(i)\n+    }\n+}\n+\n+// FIXME(#12825) Indexing will always try IndexMut first and that causes issues.\n+/*impl<V> IndexMut<uint, V> for SmallIntMap<V> {\n+    #[inline]\n+    fn index_mut<'a>(&'a mut self, i: &uint) -> &'a mut V {\n+        self.find_mut(i).expect(\"key not present\")\n+    }\n+}*/\n+\n macro_rules! iterator {\n     (impl $name:ident -> $elem:ty, $getter:ident) => {\n         impl<'a, T> Iterator<$elem> for $name<'a, T> {\n@@ -843,6 +861,29 @@ mod test_map {\n             assert_eq!(map.find(&k), Some(&v));\n         }\n     }\n+\n+    #[test]\n+    fn test_index() {\n+        let mut map: SmallIntMap<int> = SmallIntMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(2, 1);\n+        map.insert(3, 4);\n+\n+        assert_eq!(map[3], 4);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_index_nonexistent() {\n+        let mut map: SmallIntMap<int> = SmallIntMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(2, 1);\n+        map.insert(3, 4);\n+\n+        map[4];\n+    }\n }\n \n #[cfg(test)]"}]}