{"sha": "2ea08e1c534455c2867c34ed51582f900861a084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYTA4ZTFjNTM0NDU1YzI4NjdjMzRlZDUxNTgyZjkwMDg2MWEwODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T18:10:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T18:10:43Z"}, "message": "Auto merge of #6294 - giraffate:fix_suggestion_to_add_space_in_manual_async, r=Manishearth\n\nFix suggestion to add unneeded space in `manual_async`\n\nFix a same case as https://github.com/rust-lang/rust-clippy/pull/6247\n\nchangelog: Fix suggestion to add unneeded space in `manual_async`", "tree": {"sha": "8cdbc2ea053328f5bfb0278b09c54c6e0ee81b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cdbc2ea053328f5bfb0278b09c54c6e0ee81b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ea08e1c534455c2867c34ed51582f900861a084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea08e1c534455c2867c34ed51582f900861a084", "html_url": "https://github.com/rust-lang/rust/commit/2ea08e1c534455c2867c34ed51582f900861a084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ea08e1c534455c2867c34ed51582f900861a084/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20d4c155d2fe3a8391f86dcf9a8c49e17188703", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20d4c155d2fe3a8391f86dcf9a8c49e17188703", "html_url": "https://github.com/rust-lang/rust/commit/b20d4c155d2fe3a8391f86dcf9a8c49e17188703"}, {"sha": "b7892c6a26adf6173758641d3f7deb0ae972959d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7892c6a26adf6173758641d3f7deb0ae972959d", "html_url": "https://github.com/rust-lang/rust/commit/b7892c6a26adf6173758641d3f7deb0ae972959d"}], "stats": {"total": 172, "additions": 140, "deletions": 32}, "files": [{"sha": "7b3b450ef93e943fad6882126463f32a42617ebd", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ea08e1c534455c2867c34ed51582f900861a084/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea08e1c534455c2867c34ed51582f900861a084/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=2ea08e1c534455c2867c34ed51582f900861a084", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::paths::FUTURE_FROM_GENERATOR;\n-use crate::utils::{match_function_call, snippet_block, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_function_call, position_before_rarrow, snippet_block, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                     |diag| {\n                         if_chain! {\n                             if let Some(header_snip) = snippet_opt(cx, header_span);\n-                            if let Some(ret_pos) = header_snip.rfind(\"->\");\n+                            if let Some(ret_pos) = position_before_rarrow(header_snip.clone());\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n                                 let help = format!(\"make the function `async` and {}\", ret_sugg);\n@@ -194,7 +194,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";\n-            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\"-> {}\", snip)))\n+            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {}\", snip)))\n         },\n     }\n }"}, {"sha": "f61fd2ecd735d915964c5b3ce80bfaa6da56e29e", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2ea08e1c534455c2867c34ed51582f900861a084/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea08e1c534455c2867c34ed51582f900861a084/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=2ea08e1c534455c2867c34ed51582f900861a084", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::span_lint_and_sugg;\n+use crate::utils::{position_before_rarrow, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed.\n@@ -120,26 +120,13 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n \n fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n     let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n-        fn_source\n-            .rfind(\"->\")\n-            .map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n-                let mut rpos = rpos;\n-                let chars: Vec<char> = fn_source.chars().collect();\n-                while rpos > 1 {\n-                    if let Some(c) = chars.get(rpos - 1) {\n-                        if c.is_whitespace() {\n-                            rpos -= 1;\n-                            continue;\n-                        }\n-                    }\n-                    break;\n-                }\n-                (\n-                    #[allow(clippy::cast_possible_truncation)]\n-                    ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                    Applicability::MachineApplicable,\n-                )\n-            })\n+        position_before_rarrow(fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n+            (\n+                #[allow(clippy::cast_possible_truncation)]\n+                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                Applicability::MachineApplicable,\n+            )\n+        })\n     } else {\n         (ty.span, Applicability::MaybeIncorrect)\n     };"}, {"sha": "8e4149df0328b18cb5663978d456b8e2c90c3582", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2ea08e1c534455c2867c34ed51582f900861a084/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea08e1c534455c2867c34ed51582f900861a084/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=2ea08e1c534455c2867c34ed51582f900861a084", "patch": "@@ -659,6 +659,35 @@ pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n     snippet_opt(cx, line_span(cx, span)).and_then(|snip| snip.find(|c: char| !c.is_whitespace()))\n }\n \n+/// Returns the positon just before rarrow\n+///\n+/// ```rust,ignore\n+/// fn into(self) -> () {}\n+///              ^\n+/// // in case of unformatted code\n+/// fn into2(self)-> () {}\n+///               ^\n+/// fn into3(self)   -> () {}\n+///               ^\n+/// ```\n+#[allow(clippy::needless_pass_by_value)]\n+pub fn position_before_rarrow(s: String) -> Option<usize> {\n+    s.rfind(\"->\").map(|rpos| {\n+        let mut rpos = rpos;\n+        let chars: Vec<char> = s.chars().collect();\n+        while rpos > 1 {\n+            if let Some(c) = chars.get(rpos - 1) {\n+                if c.is_whitespace() {\n+                    rpos -= 1;\n+                    continue;\n+                }\n+            }\n+            break;\n+        }\n+        rpos\n+    })\n+}\n+\n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n ///\n /// ```rust,ignore"}, {"sha": "5184f6fdb88b3991850aead57bf02ea0a75b46cf", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ea08e1c534455c2867c34ed51582f900861a084/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2ea08e1c534455c2867c34ed51582f900861a084/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=2ea08e1c534455c2867c34ed51582f900861a084", "patch": "@@ -7,7 +7,19 @@ use std::future::Future;\n \n async fn fut() -> i32 { 42 }\n \n-async fn empty_fut()  {}\n+#[rustfmt::skip]\n+async fn fut2() -> i32 { 42 }\n+\n+#[rustfmt::skip]\n+async fn fut3() -> i32 { 42 }\n+\n+async fn empty_fut() {}\n+\n+#[rustfmt::skip]\n+async fn empty_fut2() {}\n+\n+#[rustfmt::skip]\n+async fn empty_fut3() {}\n \n async fn core_fut() -> i32 { 42 }\n "}, {"sha": "68c0e591f0b6eed6b4ffd5eeb1b8bd0fde47bae1", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ea08e1c534455c2867c34ed51582f900861a084/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea08e1c534455c2867c34ed51582f900861a084/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=2ea08e1c534455c2867c34ed51582f900861a084", "patch": "@@ -9,10 +9,30 @@ fn fut() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n+#[rustfmt::skip]\n+fn fut2() ->impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n+#[rustfmt::skip]\n+fn fut3()-> impl Future<Output = i32> {\n+    async { 42 }\n+}\n+\n fn empty_fut() -> impl Future<Output = ()> {\n     async {}\n }\n \n+#[rustfmt::skip]\n+fn empty_fut2() ->impl Future<Output = ()> {\n+    async {}\n+}\n+\n+#[rustfmt::skip]\n+fn empty_fut3()-> impl Future<Output = ()> {\n+    async {}\n+}\n+\n fn core_fut() -> impl core::future::Future<Output = i32> {\n     async move { 42 }\n }"}, {"sha": "fdd43db3255ee5991fe49597ded05698fbae3f64", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2ea08e1c534455c2867c34ed51582f900861a084/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ea08e1c534455c2867c34ed51582f900861a084/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=2ea08e1c534455c2867c34ed51582f900861a084", "patch": "@@ -15,22 +15,82 @@ LL | fn fut() -> impl Future<Output = i32> { 42 }\n    |                                       ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:12:1\n+  --> $DIR/manual_async_fn.rs:13:1\n+   |\n+LL | fn fut2() ->impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | async fn fut2() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn fut2() ->impl Future<Output = i32> { 42 }\n+   |                                       ^^^^^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:18:1\n+   |\n+LL | fn fut3()-> impl Future<Output = i32> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and return the output of the future directly\n+   |\n+LL | async fn fut3() -> i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn fut3()-> impl Future<Output = i32> { 42 }\n+   |                                       ^^^^^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:22:1\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: make the function `async` and remove the return type\n    |\n-LL | async fn empty_fut()  {\n+LL | async fn empty_fut() {\n    | ^^^^^^^^^^^^^^^^^^^^\n help: move the body of the async block to the enclosing function\n    |\n LL | fn empty_fut() -> impl Future<Output = ()> {}\n    |                                            ^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:16:1\n+  --> $DIR/manual_async_fn.rs:27:1\n+   |\n+LL | fn empty_fut2() ->impl Future<Output = ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and remove the return type\n+   |\n+LL | async fn empty_fut2() {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn empty_fut2() ->impl Future<Output = ()> {}\n+   |                                            ^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:32:1\n+   |\n+LL | fn empty_fut3()-> impl Future<Output = ()> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: make the function `async` and remove the return type\n+   |\n+LL | async fn empty_fut3() {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+help: move the body of the async block to the enclosing function\n+   |\n+LL | fn empty_fut3()-> impl Future<Output = ()> {}\n+   |                                            ^^\n+\n+error: this function can be simplified using the `async fn` syntax\n+  --> $DIR/manual_async_fn.rs:36:1\n    |\n LL | fn core_fut() -> impl core::future::Future<Output = i32> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +105,7 @@ LL | fn core_fut() -> impl core::future::Future<Output = i32> { 42 }\n    |                                                          ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:38:5\n+  --> $DIR/manual_async_fn.rs:58:5\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -65,7 +125,7 @@ LL |             let c = 21;\n  ...\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:73:1\n+  --> $DIR/manual_async_fn.rs:93:1\n    |\n LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +140,7 @@ LL | fn elided(_: &i32) -> impl Future<Output = i32> + '_ { 42 }\n    |                                                      ^^^^^^\n \n error: this function can be simplified using the `async fn` syntax\n-  --> $DIR/manual_async_fn.rs:82:1\n+  --> $DIR/manual_async_fn.rs:102:1\n    |\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,5 +154,5 @@ help: move the body of the async block to the enclosing function\n LL | fn explicit<'a, 'b>(_: &'a i32, _: &'b i32) -> impl Future<Output = i32> + 'a + 'b { 42 }\n    |                                                                                    ^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 10 previous errors\n "}]}