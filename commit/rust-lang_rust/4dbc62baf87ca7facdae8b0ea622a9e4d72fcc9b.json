{"sha": "4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYmM2MmJhZjg3Y2E3ZmFjZGFlOGIwZWE2MjJhOWU0ZDcyZmNjOWI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-08-01T05:18:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T05:18:18Z"}, "message": "Merge pull request #2983 from mikerite/fix_warnings_20180730\n\nFix compiler warnings", "tree": {"sha": "28b634264c7a4c86c42e073f8082964ce8a8577e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b634264c7a4c86c42e073f8082964ce8a8577e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYUKaCRBK7hj4Ov3rIwAAdHIIAELDsy4LUxAQL20O0ia1Opgs\nzaL+T4q3FzsOZXJxXM1dZm1XR2OuVLHBHm+v/DdNUlVi04+sEsXCj9MTAn+HWsdH\ndRBS9CiZnqE2l4Lkl+43rgqW+nh1k0p06xIb1ojPt5/XkB3EH0vWCcGxHxv3GCE9\nJiDuk2a8x2rHGO6XegSvs8dfqyRsOOEVKWMyTsO3ALjdv/Dp6E6poaEsO9xTfEv2\nno+eO+pFsES7BQ9F2q8TpeCc+P64LHAka9SXJ0SZcweFWSDGS/ClBZTcauQWqACZ\n+DGNLXJl4AjmtJWrjL1goGFgvVzbYCfefN+ubZc3XSgox52ZAzjmx7jTzZYsN2Y=\n=LUg+\n-----END PGP SIGNATURE-----\n", "payload": "tree 28b634264c7a4c86c42e073f8082964ce8a8577e\nparent 97840090b78ce1f370c3380e8a703da420fe3a98\nparent 98dbce4fe4a6f63a4d1f9e2fdd6b2752ed097af4\nauthor Philipp Hansch <dev@phansch.net> 1533100698 +0100\ncommitter GitHub <noreply@github.com> 1533100698 +0100\n\nMerge pull request #2983 from mikerite/fix_warnings_20180730\n\nFix compiler warnings"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "html_url": "https://github.com/rust-lang/rust/commit/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97840090b78ce1f370c3380e8a703da420fe3a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/97840090b78ce1f370c3380e8a703da420fe3a98", "html_url": "https://github.com/rust-lang/rust/commit/97840090b78ce1f370c3380e8a703da420fe3a98"}, {"sha": "98dbce4fe4a6f63a4d1f9e2fdd6b2752ed097af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/98dbce4fe4a6f63a4d1f9e2fdd6b2752ed097af4", "html_url": "https://github.com/rust-lang/rust/commit/98dbce4fe4a6f63a4d1f9e2fdd6b2752ed097af4"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "d116ffafeacdcb614439c1e85dc79783f37b5d11", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "patch": "@@ -241,7 +241,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         match *o {\n             Bool(b) => Some(Bool(!b)),\n             Int(value) => {\n-                let mut value = !value;\n+                let value = !value;\n                 match ty.sty {\n                     ty::TyInt(ity) => Some(Int(unsext(self.tcx, value as i128, ity))),\n                     ty::TyUint(ity) => Some(Int(clip(self.tcx, value, ity))),"}, {"sha": "4a23de3b8fd234a863d44ab740e11875ea5d1313", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "patch": "@@ -366,9 +366,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n+\n+    let target = &reg.sess.target;\n     reg.register_late_lint_pass(box trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n             conf.trivial_copy_size_limit,\n-            &reg.sess.target,\n+            target,\n     ));\n     reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n     reg.register_early_lint_pass(box literal_representation::LiteralRepresentation::new("}, {"sha": "57486b30d349324a40e02ad7971cdb11afe0d20b", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=4dbc62baf87ca7facdae8b0ea622a9e4d72fcc9b", "patch": "@@ -448,7 +448,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                     CaptureClause::CaptureByValue => 0,\n                     CaptureClause::CaptureByRef => 1,\n                 }.hash(&mut self.s);\n-                self.hash_expr(&self.cx.tcx.hir.body(eid).value);\n+                let value = &self.cx.tcx.hir.body(eid).value;\n+                self.hash_expr(value);\n             },\n             ExprKind::Field(ref e, ref f) => {\n                 let c: fn(_, _) -> _ = ExprKind::Field;\n@@ -515,7 +516,8 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 let full_table = self.tables;\n                 self.tables = self.cx.tcx.body_tables(l_id.body);\n-                self.hash_expr(&self.cx.tcx.hir.body(l_id.body).value);\n+                let value = &self.cx.tcx.hir.body(l_id.body).value;\n+                self.hash_expr(value);\n                 self.tables = full_table;\n             },\n             ExprKind::Ret(ref e) => {"}]}