{"sha": "ff536f3fa59dc5d232724200e24af5eeae6f4b54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNTM2ZjNmYTU5ZGM1ZDIzMjcyNDIwMGUyNGFmNWVlYWU2ZjRiNTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-18T19:57:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-18T19:57:30Z"}, "message": "core: Don't require copyable options where possible. Closes #2636", "tree": {"sha": "a721d71479da39899f27d6a5e3356375582da7c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a721d71479da39899f27d6a5e3356375582da7c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff536f3fa59dc5d232724200e24af5eeae6f4b54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff536f3fa59dc5d232724200e24af5eeae6f4b54", "html_url": "https://github.com/rust-lang/rust/commit/ff536f3fa59dc5d232724200e24af5eeae6f4b54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff536f3fa59dc5d232724200e24af5eeae6f4b54/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f87c28b1225abd7f5d1328cca3c198be3b919b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87c28b1225abd7f5d1328cca3c198be3b919b2e", "html_url": "https://github.com/rust-lang/rust/commit/f87c28b1225abd7f5d1328cca3c198be3b919b2e"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "98090ba8514b9b2f346c48283df6514c69aac02b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff536f3fa59dc5d232724200e24af5eeae6f4b54/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff536f3fa59dc5d232724200e24af5eeae6f4b54/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ff536f3fa59dc5d232724200e24af5eeae6f4b54", "patch": "@@ -87,20 +87,26 @@ pure fn unwrap<T>(-opt: option<T>) -> T unsafe {\n     ret liberated_value;\n }\n \n-impl extensions<T:copy> for option<T> {\n+impl extensions<T> for option<T> {\n     #[doc = \"\n     Update an optional value by optionally running its content through a\n     function that returns an option.\n     \"]\n     fn chain<U>(f: fn(T) -> option<U>) -> option<U> { chain(self, f) }\n-    #[doc = \"Returns the contained value or a default\"]\n-    fn get_default(def: T) -> T { get_default(self, def) }\n     #[doc = \"Applies a function to the contained value or returns a default\"]\n     fn map_default<U: copy>(def: U, f: fn(T) -> U) -> U\n         { map_default(self, def, f) }\n     #[doc = \"Performs an operation on the contained value or does nothing\"]\n     fn iter(f: fn(T)) { iter(self, f) }\n+    #[doc = \"Returns true if the option equals `none`\"]\n+    fn is_none() -> bool { is_none(self) }\n+    #[doc = \"Returns true if the option contains some value\"]\n+    fn is_some() -> bool { is_some(self) }\n+    #[doc = \"Maps a `some` value from one type to another\"]\n+    fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n+}\n \n+impl extensions<T: copy> for option<T> {\n     #[doc = \"\n     Gets the value out of an option\n \n@@ -109,12 +115,7 @@ impl extensions<T:copy> for option<T> {\n     Fails if the value equals `none`\n     \"]\n     fn get() -> T { get(self) }\n-    #[doc = \"Returns true if the option equals `none`\"]\n-    fn is_none() -> bool { is_none(self) }\n-    #[doc = \"Returns true if the option contains some value\"]\n-    fn is_some() -> bool { is_some(self) }\n-    #[doc = \"Maps a `some` value from one type to another\"]\n-    fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n+    fn get_default(def: T) -> T { get_default(self, def) }\n }\n \n #[test]"}]}