{"sha": "d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MWI3OTFjMWFmNTZiMWY1MzhjYzZmNzdlNTk3YjdhZDViNGQyMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-01T05:52:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-01T05:52:08Z"}, "message": "Auto merge of #42971 - stepancheg:ir-demangle, r=nagisa\n\nWhen writing LLVM IR output demangled fn name in comments\n\n`--emit=llvm-ir` looks like this now:\n\n```\n; <alloc::vec::Vec<T> as core::ops::index::IndexMut<core::ops::range::RangeFull>>::index_mut\n; Function Attrs: inlinehint uwtable\ndefine internal { i8*, i64 } @\"_ZN106_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..index..IndexMut$LT$core..ops..range..RangeFull$GT$$GT$9index_mut17h7f7b576609f30262E\"(%\"alloc::vec::Vec<u8>\"* dereferenceable(24)) unnamed_addr #0 {\nstart:\n  ...\n```\n\ncc https://github.com/integer32llc/rust-playground/issues/15", "tree": {"sha": "6a2e60cd6329d5d8a5d93a78d56a55512aa7283f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2e60cd6329d5d8a5d93a78d56a55512aa7283f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "html_url": "https://github.com/rust-lang/rust/commit/d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a92ae2524bdd73ea92a570dfc9c7644920482ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a92ae2524bdd73ea92a570dfc9c7644920482ad", "html_url": "https://github.com/rust-lang/rust/commit/4a92ae2524bdd73ea92a570dfc9c7644920482ad"}, {"sha": "b62bdaafe038b8933fac5df5fa0fa5ddbaf176b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62bdaafe038b8933fac5df5fa0fa5ddbaf176b7", "html_url": "https://github.com/rust-lang/rust/commit/b62bdaafe038b8933fac5df5fa0fa5ddbaf176b7"}], "stats": {"total": 178, "additions": 173, "deletions": 5}, "files": [{"sha": "c66396973f8a18910a489b301c6d64848ac3d709", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "patch": "@@ -1398,6 +1398,7 @@ dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n+ \"rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_back 0.0.0\",\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_const_math 0.0.0\","}, {"sha": "770d16e5c029a6e6c21f1b1919bfaee93e83877d", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "patch": "@@ -1597,7 +1597,13 @@ extern \"C\" {\n                                    Output: *const c_char,\n                                    FileType: FileType)\n                                    -> LLVMRustResult;\n-    pub fn LLVMRustPrintModule(PM: PassManagerRef, M: ModuleRef, Output: *const c_char);\n+    pub fn LLVMRustPrintModule(PM: PassManagerRef,\n+                               M: ModuleRef,\n+                               Output: *const c_char,\n+                               Demangle: extern fn(*const c_char,\n+                                                   size_t,\n+                                                   *mut c_char,\n+                                                   size_t) -> size_t);\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n     pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *const c_char);"}, {"sha": "a512cf2f02a5c0807f33995332a29918df55e8ae", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "patch": "@@ -15,6 +15,7 @@ flate2 = \"0.2\"\n jobserver = \"0.1.5\"\n log = \"0.3\"\n owning_ref = \"0.3.3\"\n+rustc-demangle = \"0.1.4\"\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }"}, {"sha": "562d7171156fe0dbe66b1b250a0d624ae2b5705c", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "patch": "@@ -29,15 +29,18 @@ use syntax_pos::MultiSpan;\n use context::{is_pie_binary, get_reloc_model};\n use jobserver::{Client, Acquired};\n use crossbeam::{scope, Scope};\n+use rustc_demangle;\n \n use std::cmp;\n use std::ffi::CString;\n use std::fs;\n use std::io;\n+use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::str;\n use std::sync::mpsc::{channel, Sender};\n-use libc::{c_uint, c_void};\n+use std::slice;\n+use libc::{c_uint, c_void, c_char, size_t};\n \n pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 7] = [\n     (\"pic\", llvm::RelocMode::PIC),\n@@ -510,8 +513,40 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n         if config.emit_ir {\n             let out = output_names.temp_path(OutputType::LlvmAssembly, module_name);\n             let out = path2cstr(&out);\n+\n+            extern \"C\" fn demangle_callback(input_ptr: *const c_char,\n+                                            input_len: size_t,\n+                                            output_ptr: *mut c_char,\n+                                            output_len: size_t) -> size_t {\n+                let input = unsafe {\n+                    slice::from_raw_parts(input_ptr as *const u8, input_len as usize)\n+                };\n+\n+                let input = match str::from_utf8(input) {\n+                    Ok(s) => s,\n+                    Err(_) => return 0,\n+                };\n+\n+                let output = unsafe {\n+                    slice::from_raw_parts_mut(output_ptr as *mut u8, output_len as usize)\n+                };\n+                let mut cursor = io::Cursor::new(output);\n+\n+                let demangled = match rustc_demangle::try_demangle(input) {\n+                    Ok(d) => d,\n+                    Err(_) => return 0,\n+                };\n+\n+                if let Err(_) = write!(cursor, \"{:#}\", demangled) {\n+                    // Possible only if provided buffer is not big enough\n+                    return 0;\n+                }\n+\n+                cursor.position() as size_t\n+            }\n+\n             with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                llvm::LLVMRustPrintModule(cpm, llmod, out.as_ptr());\n+                llvm::LLVMRustPrintModule(cpm, llmod, out.as_ptr(), demangle_callback);\n                 llvm::LLVMDisposePassManager(cpm);\n             })\n         }"}, {"sha": "6acd10cb887f8e615a63b76d3a383bc737b1daf4", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "patch": "@@ -52,6 +52,7 @@ extern crate rustc_const_math;\n #[macro_use]\n #[no_link]\n extern crate rustc_bitflags;\n+extern crate rustc_demangle;\n extern crate jobserver;\n \n #[macro_use] extern crate log;"}, {"sha": "7fb1eafb30da7faf58a55a4fb27be5eb7c481349", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 126, "deletions": 2, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d41b791c1af56b1f538cc6f77e597b7ad5b4d223/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=d41b791c1af56b1f538cc6f77e597b7ad5b4d223", "patch": "@@ -10,11 +10,14 @@\n \n #include <stdio.h>\n \n+#include <vector>\n+\n #include \"rustllvm.h\"\n \n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n #include \"llvm/IR/AutoUpgrade.h\"\n+#include \"llvm/IR/AssemblyAnnotationWriter.h\"\n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n@@ -503,8 +506,129 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n   return LLVMRustResult::Success;\n }\n \n+\n+// Callback to demangle function name\n+// Parameters:\n+// * name to be demangled\n+// * name len\n+// * output buffer\n+// * output buffer len\n+// Returns len of demangled string, or 0 if demangle failed.\n+typedef size_t (*DemangleFn)(const char*, size_t, char*, size_t);\n+\n+\n+namespace {\n+\n+class RustAssemblyAnnotationWriter : public AssemblyAnnotationWriter {\n+  DemangleFn Demangle;\n+  std::vector<char> Buf;\n+\n+public:\n+  RustAssemblyAnnotationWriter(DemangleFn Demangle) : Demangle(Demangle) {}\n+\n+  // Return empty string if demangle failed\n+  // or if name does not need to be demangled\n+  StringRef CallDemangle(StringRef name) {\n+    if (!Demangle) {\n+      return StringRef();\n+    }\n+\n+    if (Buf.size() < name.size() * 2) {\n+      // Semangled name usually shorter than mangled,\n+      // but allocate twice as much memory just in case\n+      Buf.resize(name.size() * 2);\n+    }\n+\n+    auto R = Demangle(name.data(), name.size(), Buf.data(), Buf.size());\n+    if (!R) {\n+      // Demangle failed.\n+      return StringRef();\n+    }\n+\n+    auto Demangled = StringRef(Buf.data(), R);\n+    if (Demangled == name) {\n+      // Do not print anything if demangled name is equal to mangled.\n+      return StringRef();\n+    }\n+\n+    return Demangled;\n+  }\n+\n+  void emitFunctionAnnot(const Function *F,\n+                         formatted_raw_ostream &OS) override {\n+    StringRef Demangled = CallDemangle(F->getName());\n+    if (Demangled.empty()) {\n+        return;\n+    }\n+\n+    OS << \"; \" << Demangled << \"\\n\";\n+  }\n+\n+  void emitInstructionAnnot(const Instruction *I,\n+                            formatted_raw_ostream &OS) override {\n+    const char *Name;\n+    const Value *Value;\n+    if (const CallInst *CI = dyn_cast<CallInst>(I)) {\n+      Name = \"call\";\n+      Value = CI->getCalledValue();\n+    } else if (const InvokeInst* II = dyn_cast<InvokeInst>(I)) {\n+      Name = \"invoke\";\n+      Value = II->getCalledValue();\n+    } else {\n+      // Could demangle more operations, e. g.\n+      // `store %place, @function`.\n+      return;\n+    }\n+\n+    if (!Value->hasName()) {\n+      return;\n+    }\n+\n+    StringRef Demangled = CallDemangle(Value->getName());\n+    if (Demangled.empty()) {\n+      return;\n+    }\n+\n+    OS << \"; \" << Name << \" \" << Demangled << \"\\n\";\n+  }\n+};\n+\n+class RustPrintModulePass : public ModulePass {\n+  raw_ostream* OS;\n+  DemangleFn Demangle;\n+public:\n+  static char ID;\n+  RustPrintModulePass() : ModulePass(ID), OS(nullptr), Demangle(nullptr) {}\n+  RustPrintModulePass(raw_ostream &OS, DemangleFn Demangle)\n+      : ModulePass(ID), OS(&OS), Demangle(Demangle) {}\n+\n+  bool runOnModule(Module &M) override {\n+    RustAssemblyAnnotationWriter AW(Demangle);\n+\n+    M.print(*OS, &AW, false);\n+\n+    return false;\n+  }\n+\n+  void getAnalysisUsage(AnalysisUsage &AU) const override {\n+    AU.setPreservesAll();\n+  }\n+\n+  static StringRef name() { return \"RustPrintModulePass\"; }\n+};\n+\n+} // namespace\n+\n+namespace llvm {\n+  void initializeRustPrintModulePassPass(PassRegistry&);\n+}\n+\n+char RustPrintModulePass::ID = 0;\n+INITIALIZE_PASS(RustPrintModulePass, \"print-rust-module\",\n+                \"Print rust module to stderr\", false, false)\n+\n extern \"C\" void LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n-                                    const char *Path) {\n+                                    const char *Path, DemangleFn Demangle) {\n   llvm::legacy::PassManager *PM = unwrap<llvm::legacy::PassManager>(PMR);\n   std::string ErrorInfo;\n \n@@ -515,7 +639,7 @@ extern \"C\" void LLVMRustPrintModule(LLVMPassManagerRef PMR, LLVMModuleRef M,\n \n   formatted_raw_ostream FOS(OS);\n \n-  PM->add(createPrintModulePass(FOS));\n+  PM->add(new RustPrintModulePass(FOS, Demangle));\n \n   PM->run(*unwrap(M));\n }"}]}