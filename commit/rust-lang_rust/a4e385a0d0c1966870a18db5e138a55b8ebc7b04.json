{"sha": "a4e385a0d0c1966870a18db5e138a55b8ebc7b04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTM4NWEwZDBjMTk2Njg3MGExOGRiNWUxMzhhNTViOGViYzdiMDQ=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-17T13:50:48Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:11Z"}, "message": "use memmove instead of generic in-place iteration for IntoIter source\n\nthis is the original SpecExtend<_, IntoIter> logic except generalizing\nthe fast-path to include a memmove", "tree": {"sha": "20159d1fc00d1a15d4c77becbba0639e25d638b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20159d1fc00d1a15d4c77becbba0639e25d638b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e385a0d0c1966870a18db5e138a55b8ebc7b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e385a0d0c1966870a18db5e138a55b8ebc7b04", "html_url": "https://github.com/rust-lang/rust/commit/a4e385a0d0c1966870a18db5e138a55b8ebc7b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e385a0d0c1966870a18db5e138a55b8ebc7b04/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "631543dcb4e79d3c134a7dfc8e87b62287e96796", "url": "https://api.github.com/repos/rust-lang/rust/commits/631543dcb4e79d3c134a7dfc8e87b62287e96796", "html_url": "https://github.com/rust-lang/rust/commit/631543dcb4e79d3c134a7dfc8e87b62287e96796"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "ce7ea2058b5b3641f23f18b7af675288d9183869", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4e385a0d0c1966870a18db5e138a55b8ebc7b04/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e385a0d0c1966870a18db5e138a55b8ebc7b04/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=a4e385a0d0c1966870a18db5e138a55b8ebc7b04", "patch": "@@ -2216,14 +2216,22 @@ impl<T> SpecFrom<T, IntoIter<T>> for Vec<T> {\n         // A common case is passing a vector into a function which immediately\n         // re-collects into a vector. We can short circuit this if the IntoIter\n         // has not been advanced at all.\n-        if iterator.buf.as_ptr() as *const _ == iterator.ptr {\n+        // We can also reuse the memory and move the data to the front if\n+        // allocating a new vector and moving to it would result in the same capacity\n+        let non_zero_offset = iterator.buf.as_ptr() as *const _ != iterator.ptr;\n+        if !non_zero_offset || iterator.len() >= iterator.cap / 2 {\n             unsafe {\n                 let it = ManuallyDrop::new(iterator);\n+                if non_zero_offset {\n+                    ptr::copy(it.ptr, it.buf.as_ptr(), it.len());\n+                }\n                 return Vec::from_raw_parts(it.buf.as_ptr(), it.len(), it.cap);\n             }\n         }\n \n-        from_into_iter_source(iterator)\n+        let mut vec = Vec::new();\n+        vec.extend(iterator);\n+        vec\n     }\n }\n "}]}