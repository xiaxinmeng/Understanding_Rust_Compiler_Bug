{"sha": "70222b7e86da5a813f9bcf60d884389fc8b04ef7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjIyYjdlODZkYTVhODEzZjliY2Y2MGQ4ODQzODlmYzhiMDRlZjc=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-21T14:05:45Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-21T14:05:45Z"}, "message": "Remove unnecessary allocations flagged by lint from fuzzer", "tree": {"sha": "a966e5298c7734da8ae44f6898b1aad7d7aa798c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a966e5298c7734da8ae44f6898b1aad7d7aa798c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70222b7e86da5a813f9bcf60d884389fc8b04ef7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70222b7e86da5a813f9bcf60d884389fc8b04ef7", "html_url": "https://github.com/rust-lang/rust/commit/70222b7e86da5a813f9bcf60d884389fc8b04ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70222b7e86da5a813f9bcf60d884389fc8b04ef7/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4724c1a178252c240c9ad012fc3cba93f18babc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4724c1a178252c240c9ad012fc3cba93f18babc", "html_url": "https://github.com/rust-lang/rust/commit/d4724c1a178252c240c9ad012fc3cba93f18babc"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "468f50a0cc1ff0f96042682608ae14c4cdc2847d", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/70222b7e86da5a813f9bcf60d884389fc8b04ef7/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/70222b7e86da5a813f9bcf60d884389fc8b04ef7/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=70222b7e86da5a813f9bcf60d884389fc8b04ef7", "patch": "@@ -38,7 +38,7 @@ pub enum test_mode { tm_converge, tm_run, }\n pub struct Context { mode: test_mode } // + rng\n \n pub fn write_file(filename: &Path, content: &str) {\n-    result::get(&io::file_writer(filename, ~[io::Create, io::Truncate]))\n+    result::get(&io::file_writer(filename, [io::Create, io::Truncate]))\n                     .write_str(content);\n }\n \n@@ -47,12 +47,12 @@ pub fn contains(haystack: &str, needle: &str) -> bool {\n }\n \n pub fn find_rust_files(files: &mut ~[Path], path: &Path) {\n-    if path.filetype() == Some(~\".rs\") && !contains(path.to_str(), ~\"utf8\") {\n+    if path.filetype() == Some(~\".rs\") && !contains(path.to_str(), \"utf8\") {\n         // ignoring \"utf8\" tests because something is broken\n         files.push(path.clone());\n     } else if os::path_is_dir(path)\n-        && !contains(path.to_str(), ~\"compile-fail\")\n-        && !contains(path.to_str(), ~\"build\") {\n+        && !contains(path.to_str(), \"compile-fail\")\n+        && !contains(path.to_str(), \"build\") {\n         for os::list_dir_path(path).each |p| {\n             find_rust_files(&mut *files, *p);\n         }\n@@ -406,34 +406,34 @@ pub fn check_whole_compiler(code: &str,\n \n pub fn removeIfExists(filename: &Path) {\n     // So sketchy!\n-    assert!(!contains(filename.to_str(), ~\" \"));\n-    run::program_output(~\"bash\", ~[~\"-c\", ~\"rm \" + filename.to_str()]);\n+    assert!(!contains(filename.to_str(), \" \"));\n+    run::program_output(\"bash\", [~\"-c\", ~\"rm \" + filename.to_str()]);\n }\n \n pub fn removeDirIfExists(filename: &Path) {\n     // So sketchy!\n-    assert!(!contains(filename.to_str(), ~\" \"));\n-    run::program_output(~\"bash\", ~[~\"-c\", ~\"rm -r \" + filename.to_str()]);\n+    assert!(!contains(filename.to_str(), \" \"));\n+    run::program_output(\"bash\", [~\"-c\", ~\"rm -r \" + filename.to_str()]);\n }\n \n pub fn check_running(exe_filename: &Path) -> happiness {\n     let p = run::program_output(\n-        ~\"/Users/jruderman/scripts/timed_run_rust_program.py\",\n-        ~[exe_filename.to_str()]);\n+        \"/Users/jruderman/scripts/timed_run_rust_program.py\",\n+        [exe_filename.to_str()]);\n     let comb = p.out + ~\"\\n\" + p.err;\n     if str::len(comb) > 1u {\n         error!(\"comb comb comb: %?\", comb);\n     }\n \n-    if contains(comb, ~\"Assertion failed:\") {\n+    if contains(comb, \"Assertion failed:\") {\n         failed(~\"C++ assertion failure\")\n-    } else if contains(comb, ~\"leaked memory in rust main loop\") {\n+    } else if contains(comb, \"leaked memory in rust main loop\") {\n         // might also use exit code 134\n         //failed(\"Leaked\")\n         known_bug(~\"https://github.com/mozilla/rust/issues/910\")\n-    } else if contains(comb, ~\"src/rt/\") {\n+    } else if contains(comb, \"src/rt/\") {\n         failed(~\"Mentioned src/rt/\")\n-    } else if contains(comb, ~\"malloc\") {\n+    } else if contains(comb, \"malloc\") {\n         failed(~\"Mentioned malloc\")\n     } else {\n         match p.status {\n@@ -457,26 +457,26 @@ pub fn check_running(exe_filename: &Path) -> happiness {\n \n pub fn check_compiling(filename: &Path) -> happiness {\n     let p = run::program_output(\n-        ~\"/Users/jruderman/code/rust/build/x86_64-apple-darwin/\\\n+        \"/Users/jruderman/code/rust/build/x86_64-apple-darwin/\\\n          stage1/bin/rustc\",\n-        ~[filename.to_str()]);\n+        [filename.to_str()]);\n \n     //error!(\"Status: %d\", p.status);\n     if p.status == 0 {\n         passed\n     } else if p.err != ~\"\" {\n-        if contains(p.err, ~\"error:\") {\n+        if contains(p.err, \"error:\") {\n             cleanly_rejected(~\"rejected with span_error\")\n         } else {\n             error!(\"Stderr: %?\", p.err);\n             failed(~\"Unfamiliar error message\")\n         }\n-    } else if contains(p.out, ~\"Assertion\") && contains(p.out, ~\"failed\") {\n+    } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n         error!(\"Stdout: %?\", p.out);\n         failed(~\"Looks like an llvm assertion failure\")\n-    } else if contains(p.out, ~\"internal compiler error unimplemented\") {\n+    } else if contains(p.out, \"internal compiler error unimplemented\") {\n         known_bug(~\"Something unimplemented\")\n-    } else if contains(p.out, ~\"internal compiler error\") {\n+    } else if contains(p.out, \"internal compiler error\") {\n         error!(\"Stdout: %?\", p.out);\n         failed(~\"internal compiler error\")\n \n@@ -603,8 +603,8 @@ pub fn check_roundtrip_convergence(code: @~str, maxIters: uint) {\n         error!(\"Did not converge after %u iterations!\", i);\n         write_file(&Path(\"round-trip-a.rs\"), *oldv);\n         write_file(&Path(\"round-trip-b.rs\"), *newv);\n-        run::run_program(~\"diff\",\n-                         ~[~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n+        run::run_program(\"diff\",\n+                         [~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n                           ~\"round-trip-b.rs\"]);\n         fail!(\"Mismatch\");\n     }\n@@ -635,7 +635,7 @@ pub fn check_variants(files: &[Path], cx: Context) {\n         }\n \n         let s = @result::get(&io::read_whole_file_str(file));\n-        if contains(*s, ~\"#\") {\n+        if contains(*s, \"#\") {\n             loop; // Macros are confusing\n         }\n         if cx.mode == tm_converge && content_might_not_converge(*s) {"}]}