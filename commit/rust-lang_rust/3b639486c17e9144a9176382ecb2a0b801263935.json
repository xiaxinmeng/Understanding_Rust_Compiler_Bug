{"sha": "3b639486c17e9144a9176382ecb2a0b801263935", "node_id": "C_kwDOAAsO6NoAKDNiNjM5NDg2YzE3ZTkxNDRhOTE3NjM4MmVjYjJhMGI4MDEyNjM5MzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T07:47:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T07:47:29Z"}, "message": "Auto merge of #107546 - matthiaskrgr:rollup-9rgf2gx, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #107389 (Fixing confusion between mod and remainder)\n - #107442 (improve panic message for slice windows and chunks)\n - #107470 (Small bootstrap improvements)\n - #107487 (Make the \"extra if in let...else block\" hint a suggestion)\n - #107499 (Do not depend on Generator trait when deducing closure signature)\n - #107533 (Extend `-Z print-type-sizes` to distinguish generator upvars+locals from \"normal\" fields.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7a062a4c43bf11d1fa11b1efdfd496d8a6f40d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a062a4c43bf11d1fa11b1efdfd496d8a6f40d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b639486c17e9144a9176382ecb2a0b801263935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b639486c17e9144a9176382ecb2a0b801263935", "html_url": "https://github.com/rust-lang/rust/commit/3b639486c17e9144a9176382ecb2a0b801263935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b639486c17e9144a9176382ecb2a0b801263935/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d32c8f2ce10710b6560dcb75f32f79c378410d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d32c8f2ce10710b6560dcb75f32f79c378410d0", "html_url": "https://github.com/rust-lang/rust/commit/0d32c8f2ce10710b6560dcb75f32f79c378410d0"}, {"sha": "f41f154dfbe2aa943e35a21c0e2a8de002443424", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41f154dfbe2aa943e35a21c0e2a8de002443424", "html_url": "https://github.com/rust-lang/rust/commit/f41f154dfbe2aa943e35a21c0e2a8de002443424"}], "stats": {"total": 556, "additions": 289, "deletions": 267}, "files": [{"sha": "90c4e5b6540b0ed511edacc08a34ec8b8628f11b", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TypeSuperVisitable, TypeVisitor};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::ArgKind;\n@@ -288,21 +289,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_def_id = projection.trait_def_id(tcx);\n \n         let is_fn = tcx.is_fn_trait(trait_def_id);\n-        let gen_trait = tcx.require_lang_item(LangItem::Generator, cause_span);\n-        let is_gen = gen_trait == trait_def_id;\n+\n+        let gen_trait = tcx.lang_items().gen_trait();\n+        let is_gen = gen_trait == Some(trait_def_id);\n+\n         if !is_fn && !is_gen {\n             debug!(\"not fn or generator\");\n             return None;\n         }\n \n-        if is_gen {\n-            // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n-            // associated item and not yield.\n-            let return_assoc_item = self.tcx.associated_item_def_ids(gen_trait)[1];\n-            if return_assoc_item != projection.projection_def_id() {\n-                debug!(\"not return assoc item of generator\");\n-                return None;\n-            }\n+        // Check that we deduce the signature from the `<_ as std::ops::Generator>::Return`\n+        // associated item and not yield.\n+        if is_gen && self.tcx.associated_item(projection.projection_def_id()).name != sym::Return {\n+            debug!(\"not `Return` assoc item of `Generator`\");\n+            return None;\n         }\n \n         let input_tys = if is_fn {"}, {"sha": "67769fe4478a24a081c41e42f0f63aee00ab70cd", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -335,7 +335,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 format!(\"cannot divide `{lhs_ty}` by `{rhs_ty}`\")\n                             }\n                             hir::BinOpKind::Rem => {\n-                                format!(\"cannot mod `{lhs_ty}` by `{rhs_ty}`\")\n+                                format!(\n+                                    \"cannot calculate the remainder of `{lhs_ty}` divided by `{rhs_ty}`\"\n+                                )\n                             }\n                             hir::BinOpKind::BitAnd => {\n                                 format!(\"no implementation for `{lhs_ty} & {rhs_ty}`\")"}, {"sha": "e63fc3c73b209e308a5960bf932fb8b5dd10de3b", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -351,7 +351,7 @@ pub(crate) enum IfExpressionMissingThenBlockSub {\n }\n \n #[derive(Subdiagnostic)]\n-#[help(parse_extra_if_in_let_else)]\n+#[suggestion(parse_extra_if_in_let_else, applicability = \"maybe-incorrect\", code = \"\")]\n pub(crate) struct IfExpressionLetSomeSub {\n     #[primary_span]\n     pub if_span: Span,"}, {"sha": "500d7d77071de9b70114c5e59c8f1859dcd59aa7", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -2290,7 +2290,7 @@ impl<'a> Parser<'a> {\n                 block\n             } else {\n                 let let_else_sub = matches!(cond.kind, ExprKind::Let(..))\n-                    .then(|| IfExpressionLetSomeSub { if_span: lo });\n+                    .then(|| IfExpressionLetSomeSub { if_span: lo.until(cond_span) });\n \n                 self.sess.emit_err(IfExpressionMissingThenBlock {\n                     if_span: lo,"}, {"sha": "87dfccdef2f10af64e15d34525aad68f19a52b0d", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -19,8 +19,26 @@ pub enum SizeKind {\n     Min,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum FieldKind {\n+    AdtField,\n+    Upvar,\n+    GeneratorLocal,\n+}\n+\n+impl std::fmt::Display for FieldKind {\n+    fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            FieldKind::AdtField => write!(w, \"field\"),\n+            FieldKind::Upvar => write!(w, \"upvar\"),\n+            FieldKind::GeneratorLocal => write!(w, \"local\"),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FieldInfo {\n+    pub kind: FieldKind,\n     pub name: Symbol,\n     pub offset: u64,\n     pub size: u64,\n@@ -145,7 +163,7 @@ impl CodeStats {\n                 fields.sort_by_key(|f| (f.offset, f.size));\n \n                 for field in fields {\n-                    let FieldInfo { ref name, offset, size, align } = field;\n+                    let FieldInfo { kind, ref name, offset, size, align } = field;\n \n                     if offset > min_offset {\n                         let pad = offset - min_offset;\n@@ -155,16 +173,16 @@ impl CodeStats {\n                     if offset < min_offset {\n                         // If this happens it's probably a union.\n                         println!(\n-                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                            \"print-type-size {indent}{kind} `.{name}`: {size} bytes, \\\n                                   offset: {offset} bytes, \\\n                                   alignment: {align} bytes\"\n                         );\n                     } else if info.packed || offset == min_offset {\n-                        println!(\"print-type-size {indent}field `.{name}`: {size} bytes\");\n+                        println!(\"print-type-size {indent}{kind} `.{name}`: {size} bytes\");\n                     } else {\n                         // Include field alignment in output only if it caused padding injection\n                         println!(\n-                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                            \"print-type-size {indent}{kind} `.{name}`: {size} bytes, \\\n                                   alignment: {align} bytes\"\n                         );\n                     }"}, {"sha": "746e0f169bcf30ca37971009f60aabce0cc5b481", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -1,6 +1,6 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n-pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+pub use crate::code_stats::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use crate::config::Input;\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n use crate::errors::{"}, {"sha": "93c9c675c9a6be2cfb88826ca27b7c5e35e13b0c", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, subst::SubstsRef, AdtDef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeVisitable,\n };\n-use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_session::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::*;\n@@ -881,6 +881,7 @@ fn variant_info_for_adt<'tcx>(\n                 let offset = layout.fields.offset(i);\n                 min_size = min_size.max(offset + field_layout.size);\n                 FieldInfo {\n+                    kind: FieldKind::AdtField,\n                     name,\n                     offset: offset.bytes(),\n                     size: field_layout.size.bytes(),\n@@ -960,6 +961,7 @@ fn variant_info_for_generator<'tcx>(\n             let offset = layout.fields.offset(field_idx);\n             upvars_size = upvars_size.max(offset + field_layout.size);\n             FieldInfo {\n+                kind: FieldKind::Upvar,\n                 name: Symbol::intern(&name),\n                 offset: offset.bytes(),\n                 size: field_layout.size.bytes(),\n@@ -983,6 +985,7 @@ fn variant_info_for_generator<'tcx>(\n                     // The struct is as large as the last field's end\n                     variant_size = variant_size.max(offset + field_layout.size);\n                     FieldInfo {\n+                        kind: FieldKind::GeneratorLocal,\n                         name: state_specific_names.get(*local).copied().flatten().unwrap_or(\n                             Symbol::intern(&format!(\".generator_field{}\", local.as_usize())),\n                         ),"}, {"sha": "cc13db5c9565beca6844381a896532759c654fae", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -545,7 +545,7 @@ div_impl_float! { f32 f64 }\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    message = \"cannot mod `{Self}` by `{Rhs}`\",\n+    message = \"cannot calculate the remainder of `{Self}` divided by `{Rhs}`\",\n     label = \"no implementation for `{Self} % {Rhs}`\"\n )]\n #[doc(alias = \"%\")]\n@@ -981,7 +981,7 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n #[lang = \"rem_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n #[rustc_on_unimplemented(\n-    message = \"cannot mod-assign `{Self}` by `{Rhs}``\",\n+    message = \"cannot calculate and assign the remainder of `{Self}` divided by `{Rhs}`\",\n     label = \"no implementation for `{Self} %= {Rhs}`\"\n )]\n #[doc(alias = \"%\")]"}, {"sha": "6ea16bf643071120f523a21f7cf88d3710ceb639", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -805,8 +805,9 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn windows(&self, size: usize) -> Windows<'_, T> {\n-        let size = NonZeroUsize::new(size).expect(\"size is zero\");\n+        let size = NonZeroUsize::new(size).expect(\"window size must be non-zero\");\n         Windows::new(self, size)\n     }\n \n@@ -839,8 +840,9 @@ impl<T> [T] {\n     /// [`rchunks`]: slice::rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         Chunks::new(self, chunk_size)\n     }\n \n@@ -877,8 +879,9 @@ impl<T> [T] {\n     /// [`rchunks_mut`]: slice::rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksMut::new(self, chunk_size)\n     }\n \n@@ -914,8 +917,9 @@ impl<T> [T] {\n     /// [`rchunks_exact`]: slice::rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExact::new(self, chunk_size)\n     }\n \n@@ -956,8 +960,9 @@ impl<T> [T] {\n     /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n-        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n@@ -1037,9 +1042,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1068,9 +1074,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1108,8 +1115,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunks::new(self)\n     }\n \n@@ -1186,9 +1194,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1223,9 +1232,10 @@ impl<T> [T] {\n     /// ```\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1265,8 +1275,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n-        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n+        assert!(N != 0, \"chunk size must be non-zero\");\n         ArrayChunksMut::new(self)\n     }\n \n@@ -1297,8 +1308,9 @@ impl<T> [T] {\n     /// [`windows`]: slice::windows\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n+    #[track_caller]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n-        assert_ne!(N, 0, \"windows cannot have a size of zero\");\n+        assert!(N != 0, \"window size must be non-zero\");\n         ArrayWindows::new(self)\n     }\n \n@@ -1331,8 +1343,9 @@ impl<T> [T] {\n     /// [`chunks`]: slice::chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunks::new(self, chunk_size)\n     }\n \n@@ -1369,8 +1382,9 @@ impl<T> [T] {\n     /// [`chunks_mut`]: slice::chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksMut::new(self, chunk_size)\n     }\n \n@@ -1408,8 +1422,9 @@ impl<T> [T] {\n     /// [`chunks_exact`]: slice::chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExact::new(self, chunk_size)\n     }\n \n@@ -1451,8 +1466,9 @@ impl<T> [T] {\n     /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n+    #[track_caller]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n-        assert!(chunk_size != 0);\n+        assert!(chunk_size != 0, \"chunk size must be non-zero\");\n         RChunksExactMut::new(self, chunk_size)\n     }\n "}, {"sha": "5b19a658fb5432c0d4983860fd449f19313ac2d3", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 111, "deletions": 115, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -2,7 +2,6 @@\n import argparse\n import contextlib\n import datetime\n-import distutils.version\n import hashlib\n import json\n import os\n@@ -13,17 +12,17 @@\n import tarfile\n import tempfile\n \n-from time import time, sleep\n+from time import time\n \n-def support_xz():\n-    try:\n-        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n-            temp_path = temp_file.name\n-        with tarfile.open(temp_path, \"w:xz\"):\n-            pass\n-        return True\n-    except tarfile.CompressionError:\n-        return False\n+try:\n+    import lzma\n+except ImportError:\n+    lzma = None\n+\n+if sys.platform == 'win32':\n+    EXE_SUFFIX = \".exe\"\n+else:\n+    EXE_SUFFIX = \"\"\n \n def get(base, url, path, checksums, verbose=False):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n@@ -61,7 +60,7 @@ def get(base, url, path, checksums, verbose=False):\n \n \n def download(path, url, probably_big, verbose):\n-    for _ in range(0, 4):\n+    for _ in range(4):\n         try:\n             _download(path, url, probably_big, verbose, True)\n             return\n@@ -395,17 +394,18 @@ class RustBuild(object):\n     def __init__(self):\n         self.checksums_sha256 = {}\n         self.stage0_compiler = None\n-        self._download_url = ''\n+        self.download_url = ''\n         self.build = ''\n         self.build_dir = ''\n         self.clean = False\n         self.config_toml = ''\n         self.rust_root = ''\n-        self.use_locked_deps = ''\n-        self.use_vendored_sources = ''\n+        self.use_locked_deps = False\n+        self.use_vendored_sources = False\n         self.verbose = False\n         self.git_version = None\n         self.nix_deps_dir = None\n+        self._should_fix_bins_and_dylibs = None\n \n     def download_toolchain(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -426,7 +426,7 @@ def download_toolchain(self):\n                  self.program_out_of_date(self.rustc_stamp(), key)):\n             if os.path.exists(bin_root):\n                 shutil.rmtree(bin_root)\n-            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+            tarball_suffix = '.tar.gz' if lzma is None else '.tar.xz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n@@ -437,15 +437,17 @@ def download_toolchain(self):\n             filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n                                             tarball_suffix)\n             self._download_component_helper(filename, \"cargo\", tarball_suffix)\n-            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n-\n-            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n-            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n-            self.fix_bin_or_dylib(\"{}/libexec/rust-analyzer-proc-macro-srv\".format(bin_root))\n-            lib_dir = \"{}/lib\".format(bin_root)\n-            for lib in os.listdir(lib_dir):\n-                if lib.endswith(\".so\"):\n-                    self.fix_bin_or_dylib(os.path.join(lib_dir, lib))\n+            if self.should_fix_bins_and_dylibs():\n+                self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n+\n+                self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n+                self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n+                self.fix_bin_or_dylib(\"{}/libexec/rust-analyzer-proc-macro-srv\".format(bin_root))\n+                lib_dir = \"{}/lib\".format(bin_root)\n+                for lib in os.listdir(lib_dir):\n+                    if lib.endswith(\".so\"):\n+                        self.fix_bin_or_dylib(os.path.join(lib_dir, lib))\n+\n             with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(key)\n \n@@ -458,60 +460,73 @@ def _download_component_helper(\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        base = self._download_url\n-        url = \"dist/{}\".format(key)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\n-                base,\n-                \"{}/{}\".format(url, filename),\n+                self.download_url,\n+                \"dist/{}/{}\".format(key, filename),\n                 tarball,\n                 self.checksums_sha256,\n                 verbose=self.verbose,\n             )\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n-    def fix_bin_or_dylib(self, fname):\n-        \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n-        or the RPATH section, to fix the dynamic library search path\n-\n-        This method is only required on NixOS and uses the PatchELF utility to\n-        change the interpreter/RPATH of ELF executables.\n-\n-        Please see https://nixos.org/patchelf.html for more information\n+    def should_fix_bins_and_dylibs(self):\n+        \"\"\"Whether or not `fix_bin_or_dylib` needs to be run; can only be True\n+        on NixOS.\n         \"\"\"\n-        default_encoding = sys.getdefaultencoding()\n-        try:\n-            ostype = subprocess.check_output(\n-                ['uname', '-s']).strip().decode(default_encoding)\n-        except subprocess.CalledProcessError:\n-            return\n-        except OSError as reason:\n-            if getattr(reason, 'winerror', None) is not None:\n-                return\n-            raise reason\n+        if self._should_fix_bins_and_dylibs is not None:\n+            return self._should_fix_bins_and_dylibs\n \n-        if ostype != \"Linux\":\n-            return\n+        def get_answer():\n+            default_encoding = sys.getdefaultencoding()\n+            try:\n+                ostype = subprocess.check_output(\n+                    ['uname', '-s']).strip().decode(default_encoding)\n+            except subprocess.CalledProcessError:\n+                return False\n+            except OSError as reason:\n+                if getattr(reason, 'winerror', None) is not None:\n+                    return False\n+                raise reason\n+\n+            if ostype != \"Linux\":\n+                return False\n+\n+            # If the user has asked binaries to be patched for Nix, then\n+            # don't check for NixOS or `/lib`.\n+            if self.get_toml(\"patch-binaries-for-nix\", \"build\") == \"true\":\n+                return True\n \n-        # If the user has asked binaries to be patched for Nix, then\n-        # don't check for NixOS or `/lib`, just continue to the patching.\n-        if self.get_toml('patch-binaries-for-nix', 'build') != 'true':\n             # Use `/etc/os-release` instead of `/etc/NIXOS`.\n             # The latter one does not exist on NixOS when using tmpfs as root.\n             try:\n                 with open(\"/etc/os-release\", \"r\") as f:\n-                    if not any(l.strip() in [\"ID=nixos\", \"ID='nixos'\", 'ID=\"nixos\"'] for l in f):\n-                        return\n+                    if not any(l.strip() in (\"ID=nixos\", \"ID='nixos'\", 'ID=\"nixos\"') for l in f):\n+                        return False\n             except FileNotFoundError:\n-                return\n+                return False\n             if os.path.exists(\"/lib\"):\n-                return\n+                return False\n+\n+            return True\n+\n+        answer = self._should_fix_bins_and_dylibs = get_answer()\n+        if answer:\n+            print(\"info: You seem to be using Nix.\")\n+        return answer\n+\n+    def fix_bin_or_dylib(self, fname):\n+        \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n+        or the RPATH section, to fix the dynamic library search path\n \n-        # At this point we're pretty sure the user is running NixOS or\n-        # using Nix\n-        nix_os_msg = \"info: you seem to be using Nix. Attempting to patch\"\n-        print(nix_os_msg, fname)\n+        This method is only required on NixOS and uses the PatchELF utility to\n+        change the interpreter/RPATH of ELF executables.\n+\n+        Please see https://nixos.org/patchelf.html for more information\n+        \"\"\"\n+        assert self._should_fix_bins_and_dylibs is True\n+        print(\"attempting to patch\", fname)\n \n         # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n@@ -666,8 +681,7 @@ def program_config(self, program):\n         config = self.get_toml(program)\n         if config:\n             return os.path.expanduser(config)\n-        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(\n-            program, self.exe_suffix()))\n+        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(program, EXE_SUFFIX))\n \n     @staticmethod\n     def get_string(line):\n@@ -692,13 +706,6 @@ def get_string(line):\n             return line[start + 1:end]\n         return None\n \n-    @staticmethod\n-    def exe_suffix():\n-        \"\"\"Return a suffix for executables\"\"\"\n-        if sys.platform == 'win32':\n-            return '.exe'\n-        return ''\n-\n     def bootstrap_binary(self):\n         \"\"\"Return the path of the bootstrap binary\n \n@@ -710,7 +717,7 @@ def bootstrap_binary(self):\n         \"\"\"\n         return os.path.join(self.build_dir, \"bootstrap\", \"debug\", \"bootstrap\")\n \n-    def build_bootstrap(self, color):\n+    def build_bootstrap(self, color, verbose_count):\n         \"\"\"Build bootstrap\"\"\"\n         print(\"Building bootstrap\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n@@ -757,7 +764,6 @@ def build_bootstrap(self, color):\n         if target_linker is not None:\n             env[\"RUSTFLAGS\"] += \" -C linker=\" + target_linker\n         env[\"RUSTFLAGS\"] += \" -Wrust_2018_idioms -Wunused_lifetimes\"\n-        env[\"RUSTFLAGS\"] += \" -Wsemicolon_in_expressions_from_macros\"\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\"\n \n@@ -768,8 +774,7 @@ def build_bootstrap(self, color):\n                 self.cargo()))\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n-        for _ in range(0, self.verbose):\n-            args.append(\"--verbose\")\n+        args.extend(\"--verbose\" for _ in range(verbose_count))\n         if self.use_locked_deps:\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n@@ -792,16 +797,7 @@ def build_triple(self):\n         so use `self.build` where possible.\n         \"\"\"\n         config = self.get_toml('build')\n-        if config:\n-            return config\n-        return default_build_triple(self.verbose)\n-\n-    def set_dist_environment(self, url):\n-        \"\"\"Set download URL for normal environment\"\"\"\n-        if 'RUSTUP_DIST_SERVER' in os.environ:\n-            self._download_url = os.environ['RUSTUP_DIST_SERVER']\n-        else:\n-            self._download_url = url\n+        return config or default_build_triple(self.verbose)\n \n     def check_vendored_status(self):\n         \"\"\"Check that vendoring is configured properly\"\"\"\n@@ -834,31 +830,25 @@ def check_vendored_status(self):\n             if os.path.exists(cargo_dir):\n                 shutil.rmtree(cargo_dir)\n \n-def bootstrap(help_triggered):\n-    \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n-\n-    # If the user is asking for help, let them know that the whole download-and-build\n-    # process has to happen before anything is printed out.\n-    if help_triggered:\n-        print(\"info: Downloading and building bootstrap before processing --help\")\n-        print(\"      command. See src/bootstrap/README.md for help with common\")\n-        print(\"      commands.\")\n-\n-    parser = argparse.ArgumentParser(description='Build rust')\n+def parse_args():\n+    \"\"\"Parse the command line arguments that the python script needs.\"\"\"\n+    parser = argparse.ArgumentParser(add_help=False)\n+    parser.add_argument('-h', '--help', action='store_true')\n     parser.add_argument('--config')\n     parser.add_argument('--build-dir')\n     parser.add_argument('--build')\n     parser.add_argument('--color', choices=['always', 'never', 'auto'])\n     parser.add_argument('--clean', action='store_true')\n     parser.add_argument('-v', '--verbose', action='count', default=0)\n \n-    args = [a for a in sys.argv if a != '-h' and a != '--help']\n-    args, _ = parser.parse_known_args(args)\n+    return parser.parse_known_args(sys.argv)[0]\n \n+def bootstrap(args):\n+    \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n     # Configure initial bootstrap\n     build = RustBuild()\n     build.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n-    build.verbose = args.verbose\n+    build.verbose = args.verbose != 0\n     build.clean = args.clean\n \n     # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`,\n@@ -886,12 +876,12 @@ def bootstrap(help_triggered):\n         with open(include_path) as included_toml:\n             build.config_toml += os.linesep + included_toml.read()\n \n-    config_verbose = build.get_toml('verbose', 'build')\n-    if config_verbose is not None:\n-        build.verbose = max(build.verbose, int(config_verbose))\n+    verbose_count = args.verbose\n+    config_verbose_count = build.get_toml('verbose', 'build')\n+    if config_verbose_count is not None:\n+        verbose_count = max(args.verbose, int(config_verbose_count))\n \n     build.use_vendored_sources = build.get_toml('vendor', 'build') == 'true'\n-\n     build.use_locked_deps = build.get_toml('locked-deps', 'build') == 'true'\n \n     build.check_vendored_status()\n@@ -903,8 +893,7 @@ def bootstrap(help_triggered):\n         data = json.load(f)\n     build.checksums_sha256 = data[\"checksums_sha256\"]\n     build.stage0_compiler = Stage0Toolchain(data[\"compiler\"])\n-\n-    build.set_dist_environment(data[\"config\"][\"dist_server\"])\n+    build.download_url = os.getenv(\"RUSTUP_DIST_SERVER\") or data[\"config\"][\"dist_server\"]\n \n     build.build = args.build or build.build_triple()\n \n@@ -914,7 +903,7 @@ def bootstrap(help_triggered):\n     # Fetch/build the bootstrap\n     build.download_toolchain()\n     sys.stdout.flush()\n-    build.build_bootstrap(args.color)\n+    build.build_bootstrap(args.color, verbose_count)\n     sys.stdout.flush()\n \n     # Run the bootstrap\n@@ -932,25 +921,32 @@ def main():\n \n     # x.py help <cmd> ...\n     if len(sys.argv) > 1 and sys.argv[1] == 'help':\n-        sys.argv = [sys.argv[0], '-h'] + sys.argv[2:]\n+        sys.argv[1] = '-h'\n+\n+    args = parse_args()\n+    help_triggered = args.help or len(sys.argv) == 1\n \n-    help_triggered = (\n-        '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n+    # If the user is asking for help, let them know that the whole download-and-build\n+    # process has to happen before anything is printed out.\n+    if help_triggered:\n+        print(\n+            \"info: Downloading and building bootstrap before processing --help command.\\n\"\n+            \"      See src/bootstrap/README.md for help with common commands.\"\n+        )\n+\n+    exit_code = 0\n     try:\n-        bootstrap(help_triggered)\n-        if not help_triggered:\n-            print(\"Build completed successfully in {}\".format(\n-                format_build_time(time() - start_time)))\n+        bootstrap(args)\n     except (SystemExit, KeyboardInterrupt) as error:\n         if hasattr(error, 'code') and isinstance(error.code, int):\n             exit_code = error.code\n         else:\n             exit_code = 1\n             print(error)\n-        if not help_triggered:\n-            print(\"Build completed unsuccessfully in {}\".format(\n-                format_build_time(time() - start_time)))\n-        sys.exit(exit_code)\n+\n+    if not help_triggered:\n+        print(\"Build completed successfully in\", format_build_time(time() - start_time))\n+    sys.exit(exit_code)\n \n \n if __name__ == '__main__':"}, {"sha": "bd67978a7662ee1d61c9d572d6194c8b243276c0", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 77, "deletions": 55, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -18,6 +18,8 @@ use crate::{\n     Config,\n };\n \n+static SHOULD_FIX_BINS_AND_DYLIBS: OnceCell<bool> = OnceCell::new();\n+\n /// Generic helpers that are useful anywhere in bootstrap.\n impl Config {\n     pub fn is_verbose(&self) -> bool {\n@@ -70,53 +72,61 @@ impl Config {\n         check_run(cmd, self.is_verbose())\n     }\n \n-    /// Modifies the interpreter section of 'fname' to fix the dynamic linker,\n-    /// or the RPATH section, to fix the dynamic library search path\n-    ///\n-    /// This is only required on NixOS and uses the PatchELF utility to\n-    /// change the interpreter/RPATH of ELF executables.\n-    ///\n-    /// Please see https://nixos.org/patchelf.html for more information\n-    fn fix_bin_or_dylib(&self, fname: &Path) {\n-        // FIXME: cache NixOS detection?\n-        match Command::new(\"uname\").arg(\"-s\").stderr(Stdio::inherit()).output() {\n-            Err(_) => return,\n-            Ok(output) if !output.status.success() => return,\n-            Ok(output) => {\n-                let mut s = output.stdout;\n-                if s.last() == Some(&b'\\n') {\n-                    s.pop();\n-                }\n-                if s != b\"Linux\" {\n-                    return;\n+    /// Whether or not `fix_bin_or_dylib` needs to be run; can only be true\n+    /// on NixOS\n+    fn should_fix_bins_and_dylibs(&self) -> bool {\n+        let val = *SHOULD_FIX_BINS_AND_DYLIBS.get_or_init(|| {\n+            match Command::new(\"uname\").arg(\"-s\").stderr(Stdio::inherit()).output() {\n+                Err(_) => return false,\n+                Ok(output) if !output.status.success() => return false,\n+                Ok(output) => {\n+                    let mut os_name = output.stdout;\n+                    if os_name.last() == Some(&b'\\n') {\n+                        os_name.pop();\n+                    }\n+                    if os_name != b\"Linux\" {\n+                        return false;\n+                    }\n                 }\n             }\n-        }\n \n-        // If the user has asked binaries to be patched for Nix, then\n-        // don't check for NixOS or `/lib`, just continue to the patching.\n-        // NOTE: this intentionally comes after the Linux check:\n-        // - patchelf only works with ELF files, so no need to run it on Mac or Windows\n-        // - On other Unix systems, there is no stable syscall interface, so Nix doesn't manage the global libc.\n-        if !self.patch_binaries_for_nix {\n+            // If the user has asked binaries to be patched for Nix, then\n+            // don't check for NixOS or `/lib`.\n+            // NOTE: this intentionally comes after the Linux check:\n+            // - patchelf only works with ELF files, so no need to run it on Mac or Windows\n+            // - On other Unix systems, there is no stable syscall interface, so Nix doesn't manage the global libc.\n+            if self.patch_binaries_for_nix {\n+                return true;\n+            }\n+\n             // Use `/etc/os-release` instead of `/etc/NIXOS`.\n             // The latter one does not exist on NixOS when using tmpfs as root.\n-            const NIX_IDS: &[&str] = &[\"ID=nixos\", \"ID='nixos'\", \"ID=\\\"nixos\\\"\"];\n-            let os_release = match File::open(\"/etc/os-release\") {\n-                Err(e) if e.kind() == ErrorKind::NotFound => return,\n+            let is_nixos = match File::open(\"/etc/os-release\") {\n+                Err(e) if e.kind() == ErrorKind::NotFound => false,\n                 Err(e) => panic!(\"failed to access /etc/os-release: {}\", e),\n-                Ok(f) => f,\n+                Ok(os_release) => BufReader::new(os_release).lines().any(|l| {\n+                    let l = l.expect(\"reading /etc/os-release\");\n+                    matches!(l.trim(), \"ID=nixos\" | \"ID='nixos'\" | \"ID=\\\"nixos\\\"\")\n+                }),\n             };\n-            if !BufReader::new(os_release).lines().any(|l| NIX_IDS.contains(&t!(l).trim())) {\n-                return;\n-            }\n-            if Path::new(\"/lib\").exists() {\n-                return;\n-            }\n+            is_nixos && !Path::new(\"/lib\").exists()\n+        });\n+        if val {\n+            println!(\"info: You seem to be using Nix.\");\n         }\n+        val\n+    }\n \n-        // At this point we're pretty sure the user is running NixOS or using Nix\n-        println!(\"info: you seem to be using Nix. Attempting to patch {}\", fname.display());\n+    /// Modifies the interpreter section of 'fname' to fix the dynamic linker,\n+    /// or the RPATH section, to fix the dynamic library search path\n+    ///\n+    /// This is only required on NixOS and uses the PatchELF utility to\n+    /// change the interpreter/RPATH of ELF executables.\n+    ///\n+    /// Please see https://nixos.org/patchelf.html for more information\n+    fn fix_bin_or_dylib(&self, fname: &Path) {\n+        assert_eq!(SHOULD_FIX_BINS_AND_DYLIBS.get(), Some(&true));\n+        println!(\"attempting to patch {}\", fname.display());\n \n         // Only build `.nix-deps` once.\n         static NIX_DEPS_DIR: OnceCell<PathBuf> = OnceCell::new();\n@@ -340,8 +350,10 @@ impl Config {\n             \"rustfmt\",\n         );\n \n-        self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n-        self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n+        if self.should_fix_bins_and_dylibs() {\n+            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n+            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n+        }\n \n         self.create(&rustfmt_stamp, &channel);\n         Some(rustfmt_path)\n@@ -370,16 +382,21 @@ impl Config {\n             let filename = format!(\"rust-src-{version}.tar.xz\");\n             self.download_ci_component(filename, \"rust-src\", commit);\n \n-            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n-            self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustdoc\"));\n-            self.fix_bin_or_dylib(&bin_root.join(\"libexec\").join(\"rust-analyzer-proc-macro-srv\"));\n-            let lib_dir = bin_root.join(\"lib\");\n-            for lib in t!(fs::read_dir(&lib_dir), lib_dir.display().to_string()) {\n-                let lib = t!(lib);\n-                if lib.path().extension() == Some(OsStr::new(\"so\")) {\n-                    self.fix_bin_or_dylib(&lib.path());\n+            if self.should_fix_bins_and_dylibs() {\n+                self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n+                self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustdoc\"));\n+                self.fix_bin_or_dylib(\n+                    &bin_root.join(\"libexec\").join(\"rust-analyzer-proc-macro-srv\"),\n+                );\n+                let lib_dir = bin_root.join(\"lib\");\n+                for lib in t!(fs::read_dir(&lib_dir), lib_dir.display().to_string()) {\n+                    let lib = t!(lib);\n+                    if lib.path().extension() == Some(OsStr::new(\"so\")) {\n+                        self.fix_bin_or_dylib(&lib.path());\n+                    }\n                 }\n             }\n+\n             t!(fs::write(rustc_stamp, commit));\n         }\n     }\n@@ -471,8 +488,10 @@ impl Config {\n         let key = format!(\"{}{}\", llvm_sha, self.llvm_assertions);\n         if program_out_of_date(&llvm_stamp, &key) && !self.dry_run() {\n             self.download_ci_llvm(&llvm_sha);\n-            for entry in t!(fs::read_dir(llvm_root.join(\"bin\"))) {\n-                self.fix_bin_or_dylib(&t!(entry).path());\n+            if self.should_fix_bins_and_dylibs() {\n+                for entry in t!(fs::read_dir(llvm_root.join(\"bin\"))) {\n+                    self.fix_bin_or_dylib(&t!(entry).path());\n+                }\n             }\n \n             // Update the timestamp of llvm-config to force rustc_llvm to be\n@@ -487,13 +506,16 @@ impl Config {\n             let llvm_config = llvm_root.join(\"bin\").join(exe(\"llvm-config\", self.build));\n             t!(filetime::set_file_times(&llvm_config, now, now));\n \n-            let llvm_lib = llvm_root.join(\"lib\");\n-            for entry in t!(fs::read_dir(&llvm_lib)) {\n-                let lib = t!(entry).path();\n-                if lib.extension().map_or(false, |ext| ext == \"so\") {\n-                    self.fix_bin_or_dylib(&lib);\n+            if self.should_fix_bins_and_dylibs() {\n+                let llvm_lib = llvm_root.join(\"lib\");\n+                for entry in t!(fs::read_dir(&llvm_lib)) {\n+                    let lib = t!(entry).path();\n+                    if lib.extension().map_or(false, |ext| ext == \"so\") {\n+                        self.fix_bin_or_dylib(&lib);\n+                    }\n                 }\n             }\n+\n             t!(fs::write(llvm_stamp, key));\n         }\n     }"}, {"sha": "586d2568c306fe4877ba9c4c517d055a5e8b52c3", "filename": "tests/ui/binop/binary-op-on-double-ref.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.fixed?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let vr = v.iter().filter(|x| {\n         *x % 2 == 0\n-        //~^ ERROR cannot mod `&&{integer}` by `{integer}`\n+        //~^ ERROR cannot calculate the remainder of `&&{integer}` divided by `{integer}`\n     });\n     println!(\"{:?}\", vr);\n }"}, {"sha": "48ee445466e35a8d37d0b78f5a9368d98100ad4b", "filename": "tests/ui/binop/binary-op-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n-        //~^ ERROR cannot mod `&&{integer}` by `{integer}`\n+        //~^ ERROR cannot calculate the remainder of `&&{integer}` divided by `{integer}`\n     });\n     println!(\"{:?}\", vr);\n }"}, {"sha": "2e8aeebc681d6ed1cecb10cbd7f04e18a2454971", "filename": "tests/ui/binop/binary-op-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fbinary-op-on-double-ref.stderr?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: cannot mod `&&{integer}` by `{integer}`\n+error[E0369]: cannot calculate the remainder of `&&{integer}` divided by `{integer}`\n   --> $DIR/binary-op-on-double-ref.rs:5:11\n    |\n LL |         x % 2 == 0"}, {"sha": "54c8838e48f113675dbfc6b8ef3cead310657e49", "filename": "tests/ui/binop/issue-28837.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fissue-28837.rs?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -11,7 +11,7 @@ fn main() {\n \n     a / a; //~ ERROR cannot divide `A` by `A`\n \n-    a % a; //~ ERROR cannot mod `A` by `A`\n+    a % a; //~ ERROR cannot calculate the remainder of `A` divided by `A`\n \n     a & a; //~ ERROR no implementation for `A & A`\n "}, {"sha": "cca1da3b6ac49ee2a0b1316c0eb0d8a004af73de", "filename": "tests/ui/binop/issue-28837.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fissue-28837.stderr?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -62,7 +62,7 @@ LL | struct A;\n note: the trait `Div` must be implemented\n   --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n \n-error[E0369]: cannot mod `A` by `A`\n+error[E0369]: cannot calculate the remainder of `A` divided by `A`\n   --> $DIR/issue-28837.rs:14:7\n    |\n LL |     a % a;"}, {"sha": "9b9aff38e524ee3ba6ac99920b2bd04dd10105fa", "filename": "tests/ui/lang-items/lang-item-missing-generator.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d32c8f2ce10710b6560dcb75f32f79c378410d0/tests%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d32c8f2ce10710b6560dcb75f32f79c378410d0/tests%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Flang-item-missing-generator.rs?ref=0d32c8f2ce10710b6560dcb75f32f79c378410d0", "patch": "@@ -1,21 +0,0 @@\n-// error-pattern: requires `generator` lang_item\n-#![feature(no_core, lang_items, unboxed_closures, tuple_trait)]\n-#![no_core]\n-\n-#[lang = \"sized\"] pub trait Sized { }\n-\n-#[lang = \"tuple_trait\"] pub trait Tuple { }\n-\n-#[lang = \"fn_once\"]\n-#[rustc_paren_sugar]\n-pub trait FnOnce<Args: Tuple> {\n-    type Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-}\n-\n-pub fn abc() -> impl FnOnce(f32) {\n-    |_| {}\n-}\n-\n-fn main() {}"}, {"sha": "a24fdb5fb6506402239d1a2feaad67d0f70ccf70", "filename": "tests/ui/lang-items/lang-item-missing-generator.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d32c8f2ce10710b6560dcb75f32f79c378410d0/tests%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d32c8f2ce10710b6560dcb75f32f79c378410d0/tests%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Flang-item-missing-generator.stderr?ref=0d32c8f2ce10710b6560dcb75f32f79c378410d0", "patch": "@@ -1,15 +0,0 @@\n-error[E0635]: unknown feature `tuple_trait`\n-  --> $DIR/lang-item-missing-generator.rs:2:51\n-   |\n-LL | #![feature(no_core, lang_items, unboxed_closures, tuple_trait)]\n-   |                                                   ^^^^^^^^^^^\n-\n-error: requires `generator` lang_item\n-  --> $DIR/lang-item-missing-generator.rs:17:17\n-   |\n-LL | pub fn abc() -> impl FnOnce(f32) {\n-   |                 ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0635`."}, {"sha": "57e5259173078f1fd0da4bda7ed24dd388945b28", "filename": "tests/ui/let-else/accidental-if.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Flet-else%2Faccidental-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Flet-else%2Faccidental-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Faccidental-if.stderr?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -10,10 +10,10 @@ help: add a block here\n LL |     if let Some(y) = x else {\n    |                       ^\n help: remove the `if` if you meant to write a `let...else` statement\n-  --> $DIR/accidental-if.rs:3:5\n    |\n-LL |     if let Some(y) = x else {\n-   |     ^^\n+LL -     if let Some(y) = x else {\n+LL +     let Some(y) = x else {\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4588c0ebd81b0c250862e941b6ee986500f7e401", "filename": "tests/ui/print_type_sizes/async.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fasync.stdout?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -1,15 +1,15 @@\n print-type-size type: `[async fn body@$DIR/async.rs:8:36: 11:2]`: 16386 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Suspend0`: 16385 bytes\n-print-type-size         field `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n-print-type-size         field `.arg`: 8192 bytes\n-print-type-size         field `.__awaitee`: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         local `.arg`: 8192 bytes\n+print-type-size         local `.__awaitee`: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n-print-type-size         field `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size     variant `Returned`: 8192 bytes\n-print-type-size         field `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size     variant `Panicked`: 8192 bytes\n-print-type-size         field `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.arg`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size type: `std::mem::ManuallyDrop<[u8; 8192]>`: 8192 bytes, alignment: 1 bytes\n print-type-size     field `.value`: 8192 bytes\n print-type-size type: `std::mem::MaybeUninit<[u8; 8192]>`: 8192 bytes, alignment: 1 bytes"}, {"sha": "13d850a66902f87654273f3a61248b2ddcd4e334", "filename": "tests/ui/print_type_sizes/generator.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fprint_type_sizes%2Fgenerator.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fprint_type_sizes%2Fgenerator.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator.stdout?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -1,10 +1,10 @@\n print-type-size type: `[generator@$DIR/generator.rs:10:5: 10:14]`: 8193 bytes, alignment: 1 bytes\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Unresumed`: 8192 bytes\n-print-type-size         field `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size     variant `Returned`: 8192 bytes\n-print-type-size         field `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size     variant `Panicked`: 8192 bytes\n-print-type-size         field `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n print-type-size     variant `Suspend0`: 8192 bytes\n-print-type-size         field `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes\n+print-type-size         upvar `.array`: 8192 bytes, offset: 0 bytes, alignment: 1 bytes"}, {"sha": "b294b2d139c3cfab9e60feb561adb5d3b65fb119", "filename": "tests/ui/print_type_sizes/generator_discr_placement.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_type_sizes%2Fgenerator_discr_placement.stdout?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -2,10 +2,10 @@ print-type-size type: `[generator@$DIR/generator_discr_placement.rs:11:13: 11:15\n print-type-size     discriminant: 1 bytes\n print-type-size     variant `Suspend0`: 7 bytes\n print-type-size         padding: 3 bytes\n-print-type-size         field `.w`: 4 bytes, alignment: 4 bytes\n+print-type-size         local `.w`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Suspend1`: 7 bytes\n print-type-size         padding: 3 bytes\n-print-type-size         field `.z`: 4 bytes, alignment: 4 bytes\n+print-type-size         local `.z`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `Unresumed`: 0 bytes\n print-type-size     variant `Returned`: 0 bytes\n print-type-size     variant `Panicked`: 0 bytes"}, {"sha": "9bc3e754126db7bce9708bfe7f24fcf399fd49b1", "filename": "tests/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -38,10 +38,10 @@ help: add a block here\n LL |     if let Some(n) = opt else {\n    |                         ^\n help: remove the `if` if you meant to write a `let...else` statement\n-  --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:24:5\n    |\n-LL |     if let Some(n) = opt else {\n-   |     ^^\n+LL -     if let Some(n) = opt else {\n+LL +     let Some(n) = opt else {\n+   |\n \n error: this `if` expression is missing a block after the condition\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:28:5"}, {"sha": "5dee953a31899ff46fe3f459de48d8249ce2a4b2", "filename": "x.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b639486c17e9144a9176382ecb2a0b801263935/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/3b639486c17e9144a9176382ecb2a0b801263935/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=3b639486c17e9144a9176382ecb2a0b801263935", "patch": "@@ -22,7 +22,8 @@\n             pass\n \n rust_dir = os.path.dirname(os.path.abspath(__file__))\n-sys.path.append(os.path.join(rust_dir, \"src\", \"bootstrap\"))\n+# For the import below, have Python search in src/bootstrap first.\n+sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n \n import bootstrap\n bootstrap.main()"}]}