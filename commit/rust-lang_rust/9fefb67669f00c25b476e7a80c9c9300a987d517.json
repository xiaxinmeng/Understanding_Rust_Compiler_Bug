{"sha": "9fefb67669f00c25b476e7a80c9c9300a987d517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZWZiNjc2NjlmMDBjMjViNDc2ZTdhODBjOWM5MzAwYTk4N2Q1MTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-13T19:16:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-13T19:16:18Z"}, "message": "Auto merge of #55356 - Aaron1011:fix/rustdoc-negative-auto, r=nikomatsakis\n\nCheck for negative impls when finding auto traits\n\nFixes #55321\n\nWhen AutoTraitFinder begins examining a type, it checks for an explicit\nnegative impl. However, it wasn't checking for negative impls found when\ncalling 'select' on predicates found from nested obligations.\n\nThis commit makes AutoTraitFinder check for negative impls whenever it\nmakes a call to 'select'. If a negative impl is found, it immediately\nbails out.\n\nNormal users of SelectioContext don't need to worry about this, since\nthey stop as soon as an Unimplemented error is encountered. However, we\nadd predicates to our ParamEnv when we encounter this error, so we need\nto handle negative impls specially (so that we don't try adding them to\nour ParamEnv).", "tree": {"sha": "ac52853cd239af068c447b627a9c4836d0ca4321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac52853cd239af068c447b627a9c4836d0ca4321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fefb67669f00c25b476e7a80c9c9300a987d517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fefb67669f00c25b476e7a80c9c9300a987d517", "html_url": "https://github.com/rust-lang/rust/commit/9fefb67669f00c25b476e7a80c9c9300a987d517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fefb67669f00c25b476e7a80c9c9300a987d517/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9f7dcd8307f92931bc7e5534b467063b4ecc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9f7dcd8307f92931bc7e5534b467063b4ecc76", "html_url": "https://github.com/rust-lang/rust/commit/5c9f7dcd8307f92931bc7e5534b467063b4ecc76"}, {"sha": "56acb2a00180c1e041e03e48c1c1818c305e13c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/56acb2a00180c1e041e03e48c1c1818c305e13c6", "html_url": "https://github.com/rust-lang/rust/commit/56acb2a00180c1e041e03e48c1c1818c305e13c6"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "c3cca149c2c57bc541b679e4ee01778db6aa460c", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9fefb67669f00c25b476e7a80c9c9300a987d517/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fefb67669f00c25b476e7a80c9c9300a987d517/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=9fefb67669f00c25b476e7a80c9c9300a987d517", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     ) -> Option<(ty::ParamEnv<'c>, ty::ParamEnv<'c>)> {\n         let tcx = infcx.tcx;\n \n-        let mut select = SelectionContext::new(&infcx);\n+        let mut select = SelectionContext::with_negative(&infcx, true);\n \n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n@@ -338,6 +338,21 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n             match &result {\n                 &Ok(Some(ref vtable)) => {\n+                    // If we see an explicit negative impl (e.g. 'impl !Send for MyStruct'),\n+                    // we immediately bail out, since it's impossible for us to continue.\n+                    match vtable {\n+                        Vtable::VtableImpl(VtableImplData { impl_def_id, .. }) => {\n+                            // Blame tidy for the weird bracket placement\n+                            if infcx.tcx.impl_polarity(*impl_def_id) == hir::ImplPolarity::Negative\n+                            {\n+                                debug!(\"evaluate_nested_obligations: Found explicit negative impl\\\n+                                        {:?}, bailing out\", impl_def_id);\n+                                return None;\n+                            }\n+                        },\n+                        _ => {}\n+                    }\n+\n                     let obligations = vtable.clone().nested_obligations().into_iter();\n \n                     if !self.evaluate_nested_obligations("}, {"sha": "f6ba7c7be177e7867298c702c24626a65441270d", "filename": "src/test/rustdoc/issue-55321.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9fefb67669f00c25b476e7a80c9c9300a987d517/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fefb67669f00c25b476e7a80c9c9300a987d517/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=9fefb67669f00c25b476e7a80c9c9300a987d517", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(optin_builtin_traits)]\n+\n+// @has issue_55321/struct.A.html\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl !Send for A\"\n+// @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl !Sync for A\"\n+pub struct A();\n+\n+impl !Send for A {}\n+impl !Sync for A {}\n+\n+// @has issue_55321/struct.B.html\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Send for \\\n+// B<T>\"\n+// @has - '//*[@id=\"synthetic-implementations-list\"]/*[@class=\"impl\"]//*/code' \"impl<T> !Sync for \\\n+// B<T>\"\n+pub struct B<T: ?Sized>(A, Box<T>);"}]}