{"sha": "e02313a172acca34bd29e10cdd10f7495664694e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMjMxM2ExNzJhY2NhMzRiZDI5ZTEwY2RkMTBmNzQ5NTY2NDY5NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-18T15:01:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-18T15:01:00Z"}, "message": "auto merge of #9275 : blake2-ppc/rust/float-from-str, r=thestinger\n\nstd: Remove {float,f64,f32}::from_str in favor of from_str in the prelude\r\n\r\nLike issue #9209, remove float::{from_str, from_str_radix} in favor of\r\nthe two corresponding traits. The same for modules f64 and f32.\r\n\r\nNew usage is:\r\n\r\n    from_str::<float>(\"1.2e34\")", "tree": {"sha": "85bcdeab462ee265820a7a7838a77c7c1869282f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85bcdeab462ee265820a7a7838a77c7c1869282f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e02313a172acca34bd29e10cdd10f7495664694e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e02313a172acca34bd29e10cdd10f7495664694e", "html_url": "https://github.com/rust-lang/rust/commit/e02313a172acca34bd29e10cdd10f7495664694e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e02313a172acca34bd29e10cdd10f7495664694e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e636f106d50f948ce90738683fba416bb265796", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e636f106d50f948ce90738683fba416bb265796", "html_url": "https://github.com/rust-lang/rust/commit/9e636f106d50f948ce90738683fba416bb265796"}, {"sha": "b5d560a9e09498db5434ea26338a3d2bfc545eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d560a9e09498db5434ea26338a3d2bfc545eee", "html_url": "https://github.com/rust-lang/rust/commit/b5d560a9e09498db5434ea26338a3d2bfc545eee"}], "stats": {"total": 406, "additions": 190, "deletions": 216}, "files": [{"sha": "270b1097c554be9e6bde6333abe1ea4febd743fe", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02313a172acca34bd29e10cdd10f7495664694e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02313a172acca34bd29e10cdd10f7495664694e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=e02313a172acca34bd29e10cdd10f7495664694e", "patch": "@@ -17,7 +17,6 @@ extern mod extra;\n \n use std::os;\n use std::rt;\n-use std::f64;\n \n use extra::getopts;\n use extra::getopts::groups::{optopt, optflag, reqopt};\n@@ -131,7 +130,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n         ratchet_noise_percent:\n             getopts::opt_maybe_str(matches,\n                                    \"ratchet-noise-percent\").map_move(|s|\n-                                                                     f64::from_str(s).unwrap()),\n+                                                                     from_str::<f64>(s).unwrap()),\n         runtool: getopts::opt_maybe_str(matches, \"runtool\"),\n         rustcflags: getopts::opt_maybe_str(matches, \"rustcflags\"),\n         jit: getopts::opt_present(matches, \"jit\"),"}, {"sha": "bba3ca9f212a9897c60e03f200ca6e37ecf9af55", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e02313a172acca34bd29e10cdd10f7495664694e", "patch": "@@ -19,7 +19,6 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use syntax::ast::*;\n \n-use std::float;\n use std::hashmap::{HashMap, HashSet};\n \n //\n@@ -476,9 +475,9 @@ pub fn lit_to_const(lit: &lit) -> const_val {\n       lit_int(n, _) => const_int(n),\n       lit_uint(n, _) => const_uint(n),\n       lit_int_unsuffixed(n) => const_int(n),\n-      lit_float(n, _) => const_float(float::from_str(n).unwrap() as f64),\n+      lit_float(n, _) => const_float(from_str::<float>(n).unwrap() as f64),\n       lit_float_unsuffixed(n) =>\n-        const_float(float::from_str(n).unwrap() as f64),\n+        const_float(from_str::<float>(n).unwrap() as f64),\n       lit_nil => const_int(0i64),\n       lit_bool(b) => const_bool(b)\n     }"}, {"sha": "1bb488d02780c90a336e08e0ceeac1ea3d76c1d6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 52, "deletions": 60, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=e02313a172acca34bd29e10cdd10f7495664694e", "patch": "@@ -822,39 +822,6 @@ impl num::ToStrRadix for f32 {\n     }\n }\n \n-///\n-/// Convert a string in base 10 to a float.\n-/// Accepts a optional decimal exponent.\n-///\n-/// This function accepts strings such as\n-///\n-/// * '3.14'\n-/// * '+3.14', equivalent to '3.14'\n-/// * '-3.14'\n-/// * '2.5E10', or equivalently, '2.5e10'\n-/// * '2.5E-10'\n-/// * '.' (understood as 0)\n-/// * '5.'\n-/// * '.5', or, equivalently,  '0.5'\n-/// * '+inf', 'inf', '-inf', 'NaN'\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-///\n-/// # Return value\n-///\n-/// `none` if the string did not represent a valid number.  Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `num`.\n-///\n-#[inline]\n-pub fn from_str(num: &str) -> Option<f32> {\n-    strconv::from_str_common(num, 10u, true, true, true,\n-                             strconv::ExpDec, false, false)\n-}\n-\n ///\n /// Convert a string in base 16 to a float.\n /// Accepts a optional binary exponent.\n@@ -888,40 +855,65 @@ pub fn from_str_hex(num: &str) -> Option<f32> {\n                              strconv::ExpBin, false, false)\n }\n \n-///\n-/// Convert a string in an given base to a float.\n-///\n-/// Due to possible conflicts, this function does **not** accept\n-/// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n-/// does it recognize exponents of any kind.\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-/// * radix - The base to use. Must lie in the range [2 .. 36]\n-///\n-/// # Return value\n-///\n-/// `none` if the string did not represent a valid number. Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `num`.\n-///\n-#[inline]\n-pub fn from_str_radix(num: &str, rdx: uint) -> Option<f32> {\n-    strconv::from_str_common(num, rdx, true, true, false,\n-                             strconv::ExpNone, false, false)\n-}\n-\n impl FromStr for f32 {\n+    ///\n+    /// Convert a string in base 10 to a float.\n+    /// Accepts a optional decimal exponent.\n+    ///\n+    /// This function accepts strings such as\n+    ///\n+    /// * '3.14'\n+    /// * '+3.14', equivalent to '3.14'\n+    /// * '-3.14'\n+    /// * '2.5E10', or equivalently, '2.5e10'\n+    /// * '2.5E-10'\n+    /// * '.' (understood as 0)\n+    /// * '5.'\n+    /// * '.5', or, equivalently,  '0.5'\n+    /// * '+inf', 'inf', '-inf', 'NaN'\n+    ///\n+    /// Leading and trailing whitespace represent an error.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - A string\n+    ///\n+    /// # Return value\n+    ///\n+    /// `none` if the string did not represent a valid number.  Otherwise,\n+    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    ///\n     #[inline]\n-    fn from_str(val: &str) -> Option<f32> { from_str(val) }\n+    fn from_str(val: &str) -> Option<f32> {\n+        strconv::from_str_common(val, 10u, true, true, true,\n+                                 strconv::ExpDec, false, false)\n+    }\n }\n \n impl num::FromStrRadix for f32 {\n+    ///\n+    /// Convert a string in an given base to a float.\n+    ///\n+    /// Due to possible conflicts, this function does **not** accept\n+    /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n+    /// does it recognize exponents of any kind.\n+    ///\n+    /// Leading and trailing whitespace represent an error.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - A string\n+    /// * radix - The base to use. Must lie in the range [2 .. 36]\n+    ///\n+    /// # Return value\n+    ///\n+    /// `none` if the string did not represent a valid number. Otherwise,\n+    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    ///\n     #[inline]\n     fn from_str_radix(val: &str, rdx: uint) -> Option<f32> {\n-        from_str_radix(val, rdx)\n+        strconv::from_str_common(val, rdx, true, true, false,\n+                                 strconv::ExpNone, false, false)\n     }\n }\n "}, {"sha": "604eac0a0a7505e2b650c4177113e1ac98ff6f34", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 52, "deletions": 60, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e02313a172acca34bd29e10cdd10f7495664694e", "patch": "@@ -869,39 +869,6 @@ impl num::ToStrRadix for f64 {\n     }\n }\n \n-///\n-/// Convert a string in base 10 to a float.\n-/// Accepts a optional decimal exponent.\n-///\n-/// This function accepts strings such as\n-///\n-/// * '3.14'\n-/// * '+3.14', equivalent to '3.14'\n-/// * '-3.14'\n-/// * '2.5E10', or equivalently, '2.5e10'\n-/// * '2.5E-10'\n-/// * '.' (understood as 0)\n-/// * '5.'\n-/// * '.5', or, equivalently,  '0.5'\n-/// * '+inf', 'inf', '-inf', 'NaN'\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-///\n-/// # Return value\n-///\n-/// `none` if the string did not represent a valid number.  Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `num`.\n-///\n-#[inline]\n-pub fn from_str(num: &str) -> Option<f64> {\n-    strconv::from_str_common(num, 10u, true, true, true,\n-                             strconv::ExpDec, false, false)\n-}\n-\n ///\n /// Convert a string in base 16 to a float.\n /// Accepts a optional binary exponent.\n@@ -935,40 +902,65 @@ pub fn from_str_hex(num: &str) -> Option<f64> {\n                              strconv::ExpBin, false, false)\n }\n \n-///\n-/// Convert a string in an given base to a float.\n-///\n-/// Due to possible conflicts, this function does **not** accept\n-/// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n-/// does it recognize exponents of any kind.\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-/// * radix - The base to use. Must lie in the range [2 .. 36]\n-///\n-/// # Return value\n-///\n-/// `none` if the string did not represent a valid number. Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `num`.\n-///\n-#[inline]\n-pub fn from_str_radix(num: &str, rdx: uint) -> Option<f64> {\n-    strconv::from_str_common(num, rdx, true, true, false,\n-                             strconv::ExpNone, false, false)\n-}\n-\n impl FromStr for f64 {\n+    ///\n+    /// Convert a string in base 10 to a float.\n+    /// Accepts a optional decimal exponent.\n+    ///\n+    /// This function accepts strings such as\n+    ///\n+    /// * '3.14'\n+    /// * '+3.14', equivalent to '3.14'\n+    /// * '-3.14'\n+    /// * '2.5E10', or equivalently, '2.5e10'\n+    /// * '2.5E-10'\n+    /// * '.' (understood as 0)\n+    /// * '5.'\n+    /// * '.5', or, equivalently,  '0.5'\n+    /// * '+inf', 'inf', '-inf', 'NaN'\n+    ///\n+    /// Leading and trailing whitespace represent an error.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - A string\n+    ///\n+    /// # Return value\n+    ///\n+    /// `none` if the string did not represent a valid number.  Otherwise,\n+    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    ///\n     #[inline]\n-    fn from_str(val: &str) -> Option<f64> { from_str(val) }\n+    fn from_str(val: &str) -> Option<f64> {\n+        strconv::from_str_common(val, 10u, true, true, true,\n+                                 strconv::ExpDec, false, false)\n+    }\n }\n \n impl num::FromStrRadix for f64 {\n+    ///\n+    /// Convert a string in an given base to a float.\n+    ///\n+    /// Due to possible conflicts, this function does **not** accept\n+    /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n+    /// does it recognize exponents of any kind.\n+    ///\n+    /// Leading and trailing whitespace represent an error.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - A string\n+    /// * radix - The base to use. Must lie in the range [2 .. 36]\n+    ///\n+    /// # Return value\n+    ///\n+    /// `none` if the string did not represent a valid number. Otherwise,\n+    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    ///\n     #[inline]\n     fn from_str_radix(val: &str, rdx: uint) -> Option<f64> {\n-        from_str_radix(val, rdx)\n+        strconv::from_str_common(val, rdx, true, true, false,\n+                                 strconv::ExpNone, false, false)\n     }\n }\n "}, {"sha": "b86422edc0356975f68f02614cbd8a9cf8c86887", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 83, "deletions": 91, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02313a172acca34bd29e10cdd10f7495664694e/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=e02313a172acca34bd29e10cdd10f7495664694e", "patch": "@@ -187,39 +187,6 @@ impl num::ToStrRadix for float {\n     }\n }\n \n-///\n-/// Convert a string in base 10 to a float.\n-/// Accepts a optional decimal exponent.\n-///\n-/// This function accepts strings such as\n-///\n-/// * '3.14'\n-/// * '+3.14', equivalent to '3.14'\n-/// * '-3.14'\n-/// * '2.5E10', or equivalently, '2.5e10'\n-/// * '2.5E-10'\n-/// * '.' (understood as 0)\n-/// * '5.'\n-/// * '.5', or, equivalently,  '0.5'\n-/// * '+inf', 'inf', '-inf', 'NaN'\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-///\n-/// # Return value\n-///\n-/// `none` if the string did not represent a valid number.  Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `num`.\n-///\n-#[inline]\n-pub fn from_str(num: &str) -> Option<float> {\n-    strconv::from_str_common(num, 10u, true, true, true,\n-                             strconv::ExpDec, false, false)\n-}\n-\n ///\n /// Convert a string in base 16 to a float.\n /// Accepts a optional binary exponent.\n@@ -253,40 +220,65 @@ pub fn from_str_hex(num: &str) -> Option<float> {\n                              strconv::ExpBin, false, false)\n }\n \n-///\n-/// Convert a string in an given base to a float.\n-///\n-/// Due to possible conflicts, this function does **not** accept\n-/// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n-/// does it recognize exponents of any kind.\n-///\n-/// Leading and trailing whitespace represent an error.\n-///\n-/// # Arguments\n-///\n-/// * num - A string\n-/// * radix - The base to use. Must lie in the range [2 .. 36]\n-///\n-/// # Return value\n-///\n-/// `none` if the string did not represent a valid number. Otherwise,\n-/// `Some(n)` where `n` is the floating-point number represented by `num`.\n-///\n-#[inline]\n-pub fn from_str_radix(num: &str, radix: uint) -> Option<float> {\n-    strconv::from_str_common(num, radix, true, true, false,\n-                             strconv::ExpNone, false, false)\n-}\n-\n impl FromStr for float {\n+    ///\n+    /// Convert a string in base 10 to a float.\n+    /// Accepts a optional decimal exponent.\n+    ///\n+    /// This function accepts strings such as\n+    ///\n+    /// * '3.14'\n+    /// * '+3.14', equivalent to '3.14'\n+    /// * '-3.14'\n+    /// * '2.5E10', or equivalently, '2.5e10'\n+    /// * '2.5E-10'\n+    /// * '.' (understood as 0)\n+    /// * '5.'\n+    /// * '.5', or, equivalently,  '0.5'\n+    /// * '+inf', 'inf', '-inf', 'NaN'\n+    ///\n+    /// Leading and trailing whitespace represent an error.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - A string\n+    ///\n+    /// # Return value\n+    ///\n+    /// `none` if the string did not represent a valid number.  Otherwise,\n+    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    ///\n     #[inline]\n-    fn from_str(val: &str) -> Option<float> { from_str(val) }\n+    fn from_str(val: &str) -> Option<float> {\n+        strconv::from_str_common(val, 10u, true, true, true,\n+                                 strconv::ExpDec, false, false)\n+    }\n }\n \n impl num::FromStrRadix for float {\n+    ///\n+    /// Convert a string in an given base to a float.\n+    ///\n+    /// Due to possible conflicts, this function does **not** accept\n+    /// the special values `inf`, `-inf`, `+inf` and `NaN`, **nor**\n+    /// does it recognize exponents of any kind.\n+    ///\n+    /// Leading and trailing whitespace represent an error.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * num - A string\n+    /// * radix - The base to use. Must lie in the range [2 .. 36]\n+    ///\n+    /// # Return value\n+    ///\n+    /// `none` if the string did not represent a valid number. Otherwise,\n+    /// `Some(n)` where `n` is the floating-point number represented by `num`.\n+    ///\n     #[inline]\n     fn from_str_radix(val: &str, radix: uint) -> Option<float> {\n-        from_str_radix(val, radix)\n+        strconv::from_str_common(val, radix, true, true, false,\n+                                 strconv::ExpNone, false, false)\n     }\n }\n \n@@ -1316,49 +1308,49 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str() {\n-        assert_eq!(from_str(\"3\"), Some(3.));\n-        assert_eq!(from_str(\"3.14\"), Some(3.14));\n-        assert_eq!(from_str(\"+3.14\"), Some(3.14));\n-        assert_eq!(from_str(\"-3.14\"), Some(-3.14));\n-        assert_eq!(from_str(\"2.5E10\"), Some(25000000000.));\n-        assert_eq!(from_str(\"2.5e10\"), Some(25000000000.));\n-        assert_eq!(from_str(\"25000000000.E-10\"), Some(2.5));\n-        assert_eq!(from_str(\".\"), Some(0.));\n-        assert_eq!(from_str(\".e1\"), Some(0.));\n-        assert_eq!(from_str(\".e-1\"), Some(0.));\n-        assert_eq!(from_str(\"5.\"), Some(5.));\n-        assert_eq!(from_str(\".5\"), Some(0.5));\n-        assert_eq!(from_str(\"0.5\"), Some(0.5));\n-        assert_eq!(from_str(\"-.5\"), Some(-0.5));\n-        assert_eq!(from_str(\"-5\"), Some(-5.));\n-        assert_eq!(from_str(\"inf\"), Some(infinity));\n-        assert_eq!(from_str(\"+inf\"), Some(infinity));\n-        assert_eq!(from_str(\"-inf\"), Some(neg_infinity));\n+        assert_eq!(from_str::<float>(\"3\"), Some(3.));\n+        assert_eq!(from_str::<float>(\"3.14\"), Some(3.14));\n+        assert_eq!(from_str::<float>(\"+3.14\"), Some(3.14));\n+        assert_eq!(from_str::<float>(\"-3.14\"), Some(-3.14));\n+        assert_eq!(from_str::<float>(\"2.5E10\"), Some(25000000000.));\n+        assert_eq!(from_str::<float>(\"2.5e10\"), Some(25000000000.));\n+        assert_eq!(from_str::<float>(\"25000000000.E-10\"), Some(2.5));\n+        assert_eq!(from_str::<float>(\".\"), Some(0.));\n+        assert_eq!(from_str::<float>(\".e1\"), Some(0.));\n+        assert_eq!(from_str::<float>(\".e-1\"), Some(0.));\n+        assert_eq!(from_str::<float>(\"5.\"), Some(5.));\n+        assert_eq!(from_str::<float>(\".5\"), Some(0.5));\n+        assert_eq!(from_str::<float>(\"0.5\"), Some(0.5));\n+        assert_eq!(from_str::<float>(\"-.5\"), Some(-0.5));\n+        assert_eq!(from_str::<float>(\"-5\"), Some(-5.));\n+        assert_eq!(from_str::<float>(\"inf\"), Some(infinity));\n+        assert_eq!(from_str::<float>(\"+inf\"), Some(infinity));\n+        assert_eq!(from_str::<float>(\"-inf\"), Some(neg_infinity));\n         // note: NaN != NaN, hence this slightly complex test\n-        match from_str(\"NaN\") {\n+        match from_str::<float>(\"NaN\") {\n             Some(f) => assert!(f.is_NaN()),\n             None => fail!()\n         }\n         // note: -0 == 0, hence these slightly more complex tests\n-        match from_str(\"-0\") {\n+        match from_str::<float>(\"-0\") {\n             Some(v) if v.is_zero() => assert!(v.is_negative()),\n             _ => fail!()\n         }\n-        match from_str(\"0\") {\n+        match from_str::<float>(\"0\") {\n             Some(v) if v.is_zero() => assert!(v.is_positive()),\n             _ => fail!()\n         }\n \n-        assert!(from_str(\"\").is_none());\n-        assert!(from_str(\"x\").is_none());\n-        assert!(from_str(\" \").is_none());\n-        assert!(from_str(\"   \").is_none());\n-        assert!(from_str(\"e\").is_none());\n-        assert!(from_str(\"E\").is_none());\n-        assert!(from_str(\"E1\").is_none());\n-        assert!(from_str(\"1e1e1\").is_none());\n-        assert!(from_str(\"1e1.1\").is_none());\n-        assert!(from_str(\"1e1-1\").is_none());\n+        assert!(from_str::<float>(\"\").is_none());\n+        assert!(from_str::<float>(\"x\").is_none());\n+        assert!(from_str::<float>(\" \").is_none());\n+        assert!(from_str::<float>(\"   \").is_none());\n+        assert!(from_str::<float>(\"e\").is_none());\n+        assert!(from_str::<float>(\"E\").is_none());\n+        assert!(from_str::<float>(\"E1\").is_none());\n+        assert!(from_str::<float>(\"1e1e1\").is_none());\n+        assert!(from_str::<float>(\"1e1.1\").is_none());\n+        assert!(from_str::<float>(\"1e1-1\").is_none());\n     }\n \n     #[test]"}]}