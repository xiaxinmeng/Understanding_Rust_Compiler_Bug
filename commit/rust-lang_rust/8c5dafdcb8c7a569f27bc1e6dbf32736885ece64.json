{"sha": "8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNWRhZmRjYjhjN2E1NjlmMjdiYzFlNmRiZjMyNzM2ODg1ZWNlNjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-21T04:03:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-22T05:41:47Z"}, "message": "Parse loop labels missing a leading `'`\n\nWhen encountering the following typo:\n\n```rust\na: loop { break 'a; }\n```\n\nprovide an appropriate suggestion.", "tree": {"sha": "bdec8d8010bc7c80362c654b63c72fae56ebc553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdec8d8010bc7c80362c654b63c72fae56ebc553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "html_url": "https://github.com/rust-lang/rust/commit/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ddaf000cd6c17b9b99721fa84d091922c6eb14", "url": "https://api.github.com/repos/rust-lang/rust/commits/74ddaf000cd6c17b9b99721fa84d091922c6eb14", "html_url": "https://github.com/rust-lang/rust/commit/74ddaf000cd6c17b9b99721fa84d091922c6eb14"}], "stats": {"total": 93, "additions": 70, "deletions": 23}, "files": [{"sha": "cfd7ad48222a25a5c2fb97d619deace7689f2037", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "patch": "@@ -585,7 +585,7 @@ impl<'a> Parser<'a> {\n         lhs_span: Span,\n         expr_kind: fn(P<Expr>, P<Ty>) -> ExprKind,\n     ) -> PResult<'a, P<Expr>> {\n-        let mk_expr = |this: &mut Self, rhs: P<Ty>| {\n+        let mk_expr = |this: &mut Self, lhs: P<Expr>, rhs: P<Ty>| {\n             this.mk_expr(\n                 this.mk_expr_sp(&lhs, lhs_span, rhs.span),\n                 expr_kind(lhs, rhs),\n@@ -597,13 +597,49 @@ impl<'a> Parser<'a> {\n         // LessThan comparison after this cast.\n         let parser_snapshot_before_type = self.clone();\n         let cast_expr = match self.parse_ty_no_plus() {\n-            Ok(rhs) => mk_expr(self, rhs),\n+            Ok(rhs) => mk_expr(self, lhs, rhs),\n             Err(mut type_err) => {\n                 // Rewind to before attempting to parse the type with generics, to recover\n                 // from situations like `x as usize < y` in which we first tried to parse\n                 // `usize < y` as a type with generic arguments.\n                 let parser_snapshot_after_type = mem::replace(self, parser_snapshot_before_type);\n \n+                // Check for typo of `'a: loop { break 'a }` with a missing `'`.\n+                match (&lhs.kind, &self.token.kind) {\n+                    (\n+                        // `foo: `\n+                        ExprKind::Path(None, ast::Path { segments, .. }),\n+                        TokenKind::Ident(kw::For | kw::Loop | kw::While, false),\n+                    ) if segments.len() == 1 => {\n+                        let snapshot = self.clone();\n+                        let label = Label {\n+                            ident: Ident::from_str_and_span(\n+                                &format!(\"'{}\", segments[0].ident),\n+                                segments[0].ident.span,\n+                            ),\n+                        };\n+                        match self.parse_labeled_expr(label, AttrVec::new(), false) {\n+                            Ok(expr) => {\n+                                type_err.cancel();\n+                                self.struct_span_err(label.ident.span, \"malformed loop label\")\n+                                    .span_suggestion(\n+                                        label.ident.span,\n+                                        \"use the correct loop label format\",\n+                                        label.ident.to_string(),\n+                                        Applicability::MachineApplicable,\n+                                    )\n+                                    .emit();\n+                                return Ok(expr);\n+                            }\n+                            Err(mut err) => {\n+                                err.cancel();\n+                                *self = snapshot;\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+\n                 match self.parse_path(PathStyle::Expr) {\n                     Ok(path) => {\n                         let (op_noun, op_verb) = match self.token.kind {\n@@ -630,7 +666,8 @@ impl<'a> Parser<'a> {\n                             op_noun,\n                         );\n                         let span_after_type = parser_snapshot_after_type.token.span;\n-                        let expr = mk_expr(self, self.mk_ty(path.span, TyKind::Path(None, path)));\n+                        let expr =\n+                            mk_expr(self, lhs, self.mk_ty(path.span, TyKind::Path(None, path)));\n \n                         let expr_str = self\n                             .span_to_snippet(expr.span)\n@@ -1067,7 +1104,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::While) {\n             self.parse_while_expr(None, self.prev_token.span, attrs)\n         } else if let Some(label) = self.eat_label() {\n-            self.parse_labeled_expr(label, attrs)\n+            self.parse_labeled_expr(label, attrs, true)\n         } else if self.eat_keyword(kw::Loop) {\n             self.parse_loop_expr(None, self.prev_token.span, attrs)\n         } else if self.eat_keyword(kw::Continue) {\n@@ -1228,7 +1265,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse `'label: $expr`. The label is already parsed.\n-    fn parse_labeled_expr(&mut self, label: Label, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+    fn parse_labeled_expr(\n+        &mut self,\n+        label: Label,\n+        attrs: AttrVec,\n+        consume_colon: bool,\n+    ) -> PResult<'a, P<Expr>> {\n         let lo = label.ident.span;\n         let label = Some(label);\n         let ate_colon = self.eat(&token::Colon);\n@@ -1247,7 +1289,7 @@ impl<'a> Parser<'a> {\n             self.parse_expr()\n         }?;\n \n-        if !ate_colon {\n+        if !ate_colon && consume_colon {\n             self.error_labeled_expr_must_be_followed_by_colon(lo, expr.span);\n         }\n "}, {"sha": "55bbe6b30a5930382dbd75afac17550f22749d44", "filename": "src/test/ui/label/label_misspelled_2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled_2.rs?ref=8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "patch": "@@ -7,11 +7,10 @@ fn main() {\n     'b: for _ in 0..1 {\n         break b; //~ ERROR cannot find value `b` in this scope\n     }\n-    c: for _ in 0..1 { //~ ERROR expected identifier, found keyword `for`\n-        //~^ ERROR expected `<`, found reserved identifier `_`\n+    c: for _ in 0..1 { //~ ERROR malformed loop label\n         break 'c;\n     }\n-    d: for _ in 0..1 {\n-        break ;\n+    d: for _ in 0..1 { //~ ERROR malformed loop label\n+        break d; //~ ERROR cannot find value `d` in this scope\n     }\n }"}, {"sha": "960646d9894d1158774e6d5369ecd7e350e24c38", "filename": "src/test/ui/label/label_misspelled_2.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c5dafdcb8c7a569f27bc1e6dbf32736885ece64/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled_2.stderr?ref=8c5dafdcb8c7a569f27bc1e6dbf32736885ece64", "patch": "@@ -1,19 +1,14 @@\n-error: expected identifier, found keyword `for`\n-  --> $DIR/label_misspelled_2.rs:10:8\n+error: malformed loop label\n+  --> $DIR/label_misspelled_2.rs:10:5\n    |\n LL |     c: for _ in 0..1 {\n-   |        ^^^ expected identifier, found keyword\n+   |     ^ help: use the correct loop label format: `'c`\n \n-error: expected `<`, found reserved identifier `_`\n-  --> $DIR/label_misspelled_2.rs:10:12\n+error: malformed loop label\n+  --> $DIR/label_misspelled_2.rs:13:5\n    |\n-LL |     c: for _ in 0..1 {\n-   |      -     ^ expected `<`\n-   |      |\n-   |      tried to parse a type due to this type ascription\n-   |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+LL |     d: for _ in 0..1 {\n+   |     ^ help: use the correct loop label format: `'d`\n \n error[E0425]: cannot find value `b` in this scope\n   --> $DIR/label_misspelled_2.rs:8:15\n@@ -26,6 +21,17 @@ LL |         break b;\n    |               not found in this scope\n    |               help: use the similarly named label: `'b`\n \n-error: aborting due to 3 previous errors\n+error[E0425]: cannot find value `d` in this scope\n+  --> $DIR/label_misspelled_2.rs:14:15\n+   |\n+LL |     d: for _ in 0..1 {\n+   |     - a label with a similar name exists\n+LL |         break d;\n+   |               ^\n+   |               |\n+   |               not found in this scope\n+   |               help: use the similarly named label: `'d`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}