{"sha": "9fe10a96069ea0f617ff86049bb50922b5424fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZTEwYTk2MDY5ZWEwZjYxN2ZmODYwNDliYjUwOTIyYjU0MjRmYWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-01T19:52:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-01T19:52:07Z"}, "message": "Resolve associated types with type anchors", "tree": {"sha": "bacb0a041f8bdf04199e9a11f6de4fb5365a761d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bacb0a041f8bdf04199e9a11f6de4fb5365a761d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fe10a96069ea0f617ff86049bb50922b5424fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe10a96069ea0f617ff86049bb50922b5424fae", "html_url": "https://github.com/rust-lang/rust/commit/9fe10a96069ea0f617ff86049bb50922b5424fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fe10a96069ea0f617ff86049bb50922b5424fae/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444f6caababc3335b1ed51d08eeedac106fd8077", "url": "https://api.github.com/repos/rust-lang/rust/commits/444f6caababc3335b1ed51d08eeedac106fd8077", "html_url": "https://github.com/rust-lang/rust/commit/444f6caababc3335b1ed51d08eeedac106fd8077"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "8e9ea0a0388701126a42c627b95886b7da683775", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9fe10a96069ea0f617ff86049bb50922b5424fae/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe10a96069ea0f617ff86049bb50922b5424fae/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=9fe10a96069ea0f617ff86049bb50922b5424fae", "patch": "@@ -20,7 +20,7 @@ use hir_def::{\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n     diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n-    InferenceResult, Substitution,\n+    InferenceResult, Substitution, TyLoweringContext,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -466,7 +466,20 @@ fn resolve_hir_path_(\n     prefer_value_ns: bool,\n ) -> Option<PathResolution> {\n     let types = || {\n-        let (ty, remaining) = resolver.resolve_path_in_type_ns(db.upcast(), path.mod_path())?;\n+        let (ty, unresolved) = match path.type_anchor() {\n+            Some(type_ref) => {\n+                let (_, res) = TyLoweringContext::new(db, resolver).lower_ty_ext(type_ref);\n+                res.map(|ty_ns| (ty_ns, path.segments().first()))\n+            }\n+            None => {\n+                let (ty, remaining) =\n+                    resolver.resolve_path_in_type_ns(db.upcast(), path.mod_path())?;\n+                match remaining {\n+                    Some(remaining) if remaining > 1 => None,\n+                    _ => Some((ty, path.segments().get(1))),\n+                }\n+            }\n+        }?;\n         let res = match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n             TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n@@ -478,18 +491,14 @@ fn resolve_hir_path_(\n             TypeNs::BuiltinType(it) => PathResolution::Def(BuiltinType::from(it).into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n         };\n-        match remaining {\n-            Some(1) => {\n-                let unresolved = path.segments().get(1)?;\n-                res.assoc_type_shorthand_candidates(db, |name, alias| {\n+        match unresolved {\n+            Some(unresolved) => res\n+                .assoc_type_shorthand_candidates(db, |name, alias| {\n                     (name == unresolved.name).then(|| alias)\n                 })\n                 .map(TypeAlias::from)\n                 .map(Into::into)\n-                .map(PathResolution::Def)\n-            }\n-            // ambiguous\n-            Some(_) => None,\n+                .map(PathResolution::Def),\n             None => Some(res),\n         }\n     };"}, {"sha": "14f34d73c687189e18fd7edd0a42d1f4fdeee766", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fe10a96069ea0f617ff86049bb50922b5424fae/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe10a96069ea0f617ff86049bb50922b5424fae/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=9fe10a96069ea0f617ff86049bb50922b5424fae", "patch": "@@ -146,7 +146,7 @@ impl<'a> TyLoweringContext<'a> {\n         self.lower_ty_ext(type_ref).0\n     }\n \n-    fn lower_ty_ext(&self, type_ref: &TypeRef) -> (Ty, Option<TypeNs>) {\n+    pub fn lower_ty_ext(&self, type_ref: &TypeRef) -> (Ty, Option<TypeNs>) {\n         let mut res = None;\n         let ty = match type_ref {\n             TypeRef::Never => TyKind::Never.intern(&Interner),"}, {"sha": "28e2e17dc22f2ad0f5c7f8721aa715c63d99a383", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9fe10a96069ea0f617ff86049bb50922b5424fae/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fe10a96069ea0f617ff86049bb50922b5424fae/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=9fe10a96069ea0f617ff86049bb50922b5424fae", "patch": "@@ -3841,6 +3841,27 @@ fn foo() {}\n             r#\"\n fn foo<T: A>() where T::Assoc$0: {}\n \n+trait A {\n+    type Assoc;\n+}\"#,\n+            expect![[r#\"\n+                *Assoc*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                type Assoc\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+fn foo<T: A>() {\n+    let _: <T>::Assoc$0;\n+}\n+\n trait A {\n     type Assoc;\n }\"#,\n@@ -3874,6 +3895,6 @@ trait A where\n                 type Assoc\n                 ```\n             \"#]],\n-        )\n+        );\n     }\n }"}]}