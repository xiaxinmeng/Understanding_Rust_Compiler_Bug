{"sha": "32b903d87768dbc9acf497b1646b20069d9bf212", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYjkwM2Q4Nzc2OGRiYzlhY2Y0OTdiMTY0NmIyMDA2OWQ5YmYyMTI=", "commit": {"author": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-11-03T19:08:11Z"}, "committer": {"name": "Falco Hirschenberger", "email": "falco.hirschenberger@gmail.com", "date": "2014-11-03T19:08:11Z"}, "message": "Also fix undefined behaviour when shift equals the number of bits\n\nLLVM states:  \"If op2 is (statically or dynamically) negative or equal\nto or larger than the number of bits in op1, the result is undefined.\"", "tree": {"sha": "d4580303b7129be285ef9b581955e6ca4505b8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4580303b7129be285ef9b581955e6ca4505b8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32b903d87768dbc9acf497b1646b20069d9bf212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32b903d87768dbc9acf497b1646b20069d9bf212", "html_url": "https://github.com/rust-lang/rust/commit/32b903d87768dbc9acf497b1646b20069d9bf212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32b903d87768dbc9acf497b1646b20069d9bf212/comments", "author": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hirschenberger", "id": 1053180, "node_id": "MDQ6VXNlcjEwNTMxODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1053180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hirschenberger", "html_url": "https://github.com/hirschenberger", "followers_url": "https://api.github.com/users/hirschenberger/followers", "following_url": "https://api.github.com/users/hirschenberger/following{/other_user}", "gists_url": "https://api.github.com/users/hirschenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/hirschenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hirschenberger/subscriptions", "organizations_url": "https://api.github.com/users/hirschenberger/orgs", "repos_url": "https://api.github.com/users/hirschenberger/repos", "events_url": "https://api.github.com/users/hirschenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/hirschenberger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2790505c19b158a5494139dba084b6af82810b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/2790505c19b158a5494139dba084b6af82810b96", "html_url": "https://github.com/rust-lang/rust/commit/2790505c19b158a5494139dba084b6af82810b96"}], "stats": {"total": 80, "additions": 40, "deletions": 40}, "files": [{"sha": "2b145192131c45bd1bdd39cead85ad0d7d742856", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32b903d87768dbc9acf497b1646b20069d9bf212/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b903d87768dbc9acf497b1646b20069d9bf212/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=32b903d87768dbc9acf497b1646b20069d9bf212", "patch": "@@ -187,12 +187,12 @@ impl LintPass for TypeLimits {\n \n                     if let Some(bits) = opt_ty_bits {\n                         let exceeding = if let ast::ExprLit(ref lit) = r.node {\n-                            if let ast::LitInt(shift, _) = lit.node { shift > bits }\n+                            if let ast::LitInt(shift, _) = lit.node { shift >= bits }\n                             else { false }\n                         } else {\n                             match eval_const_expr_partial(cx.tcx, &**r) {\n-                                Ok(const_int(shift)) => { shift as u64 > bits },\n-                                Ok(const_uint(shift)) => { shift > bits },\n+                                Ok(const_int(shift)) => { shift as u64 >= bits },\n+                                Ok(const_uint(shift)) => { shift >= bits },\n                                 _ => { false }\n                             }\n                         };"}, {"sha": "eecc216802955613343d36dbe1592258472d75a2", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/32b903d87768dbc9acf497b1646b20069d9bf212/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b903d87768dbc9acf497b1646b20069d9bf212/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=32b903d87768dbc9acf497b1646b20069d9bf212", "patch": "@@ -12,47 +12,47 @@\n #![allow(unused_variables)]\n \n fn main() {\n-      let n = 1u8 << 8;\n-      let n = 1u8 << 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u16 << 16;\n-      let n = 1u16 << 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u32 << 32;\n-      let n = 1u32 << 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u64 << 64;\n-      let n = 1u64 << 65; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i8 << 8;\n-      let n = 1i8 << 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i16 << 16;\n-      let n = 1i16 << 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i32 << 32;\n-      let n = 1i32 << 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i64 << 64;\n-      let n = 1i64 << 65; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << 7;\n+      let n = 1u8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 << 15;\n+      let n = 1u16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 << 31;\n+      let n = 1u32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 << 63;\n+      let n = 1u64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 << 7;\n+      let n = 1i8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 << 15;\n+      let n = 1i16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 << 31;\n+      let n = 1i32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 << 63;\n+      let n = 1i64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1u8 >> 8;\n-      let n = 1u8 >> 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u16 >> 16;\n-      let n = 1u16 >> 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u32 >> 32;\n-      let n = 1u32 >> 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u64 >> 64;\n-      let n = 1u64 >> 65; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i8 >> 8;\n-      let n = 1i8 >> 9;   //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i16 >> 16;\n-      let n = 1i16 >> 17; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i32 >> 32;\n-      let n = 1i32 >> 33; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1i64 >> 64;\n-      let n = 1i64 >> 65; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 >> 7;\n+      let n = 1u8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u16 >> 15;\n+      let n = 1u16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u32 >> 31;\n+      let n = 1u32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u64 >> 63;\n+      let n = 1u64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i8 >> 7;\n+      let n = 1i8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i16 >> 15;\n+      let n = 1i16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i32 >> 31;\n+      let n = 1i32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1i64 >> 63;\n+      let n = 1i64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n \n       let n = 1u8;\n-      let n = n << 8;\n-      let n = n << 9; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = n << 7;\n+      let n = n << 8; //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1u8 << -9; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << -8; //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1u8 << (4+4);\n-      let n = 1u8 << (4+5); //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << (4+3);\n+      let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n }\n "}]}