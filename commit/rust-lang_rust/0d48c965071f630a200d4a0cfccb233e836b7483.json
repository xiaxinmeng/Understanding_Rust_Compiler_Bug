{"sha": "0d48c965071f630a200d4a0cfccb233e836b7483", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNDhjOTY1MDcxZjYzMGEyMDBkNGEwY2ZjY2IyMzNlODM2Yjc0ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-13T09:16:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-13T09:16:11Z"}, "message": "Auto merge of #50643 - dlrobertson:fix_ice, r=oli-obk\n\ntypeck: Fix ICE with struct update syntax\n\nIf check_expr_struct_fields fails, do not continue to record update.\nIf we continue to record update, the struct may cause us to ICE later\non indexing a field that may or may not exist.\n\nFixes: #50618", "tree": {"sha": "df5d143c96a3aa7afc93906fdbe77a31b28af52d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5d143c96a3aa7afc93906fdbe77a31b28af52d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d48c965071f630a200d4a0cfccb233e836b7483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d48c965071f630a200d4a0cfccb233e836b7483", "html_url": "https://github.com/rust-lang/rust/commit/0d48c965071f630a200d4a0cfccb233e836b7483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d48c965071f630a200d4a0cfccb233e836b7483/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ae5bc1c5a98427244a8b3abd7c7e337267fb1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ae5bc1c5a98427244a8b3abd7c7e337267fb1c", "html_url": "https://github.com/rust-lang/rust/commit/f9ae5bc1c5a98427244a8b3abd7c7e337267fb1c"}, {"sha": "f6a46cf4d16e5fa38ee983dd6e191ae7e46acaae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a46cf4d16e5fa38ee983dd6e191ae7e46acaae", "html_url": "https://github.com/rust-lang/rust/commit/f6a46cf4d16e5fa38ee983dd6e191ae7e46acaae"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "b9c035e1ca10eae534af31dca2ab8224ac771904", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0d48c965071f630a200d4a0cfccb233e836b7483/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d48c965071f630a200d4a0cfccb233e836b7483/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0d48c965071f630a200d4a0cfccb233e836b7483", "patch": "@@ -3278,7 +3278,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 span: Span,\n                                 variant: &'tcx ty::VariantDef,\n                                 ast_fields: &'gcx [hir::Field],\n-                                check_completeness: bool) {\n+                                check_completeness: bool) -> bool {\n         let tcx = self.tcx;\n \n         let adt_ty_hint =\n@@ -3380,6 +3380,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           truncated_fields_error))\n                 .emit();\n         }\n+        error_happened\n     }\n \n     fn check_struct_fields_on_error(&self,\n@@ -3478,24 +3479,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.check_expr_struct_fields(struct_ty, expected, expr.id, path_span, variant, fields,\n-                                      base_expr.is_none());\n+        let error_happened = self.check_expr_struct_fields(struct_ty, expected, expr.id, path_span,\n+                                                           variant, fields, base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {\n-            self.check_expr_has_type_or_error(base_expr, struct_ty);\n-            match struct_ty.sty {\n-                ty::TyAdt(adt, substs) if adt.is_struct() => {\n-                    let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {\n-                        self.normalize_associated_types_in(expr.span, &f.ty(self.tcx, substs))\n-                    }).collect();\n-\n-                    self.tables\n-                        .borrow_mut()\n-                        .fru_field_types_mut()\n-                        .insert(expr.hir_id, fru_field_types);\n-                }\n-                _ => {\n-                    span_err!(self.tcx.sess, base_expr.span, E0436,\n-                              \"functional record update syntax requires a struct\");\n+            // If check_expr_struct_fields hit an error, do not attempt to populate\n+            // the fields with the base_expr. This could cause us to hit errors later\n+            // when certain fields are assumed to exist that in fact do not.\n+            if !error_happened {\n+                self.check_expr_has_type_or_error(base_expr, struct_ty);\n+                match struct_ty.sty {\n+                    ty::TyAdt(adt, substs) if adt.is_struct() => {\n+                        let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {\n+                            self.normalize_associated_types_in(expr.span, &f.ty(self.tcx, substs))\n+                        }).collect();\n+\n+                        self.tables\n+                            .borrow_mut()\n+                            .fru_field_types_mut()\n+                            .insert(expr.hir_id, fru_field_types);\n+                    }\n+                    _ => {\n+                        span_err!(self.tcx.sess, base_expr.span, E0436,\n+                                  \"functional record update syntax requires a struct\");\n+                    }\n                 }\n             }\n         }"}, {"sha": "ed427c293df47599894faf600dda70be9ad1d9f8", "filename": "src/test/ui/issue-50618.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0d48c965071f630a200d4a0cfccb233e836b7483/src%2Ftest%2Fui%2Fissue-50618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d48c965071f630a200d4a0cfccb233e836b7483/src%2Ftest%2Fui%2Fissue-50618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50618.rs?ref=0d48c965071f630a200d4a0cfccb233e836b7483", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Point {\n+    pub x: u64,\n+    pub y: u64,\n+}\n+\n+const TEMPLATE: Point = Point {\n+    x: 0,\n+    y: 0\n+};\n+\n+fn main() {\n+    let _ = || {\n+        Point {\n+            nonexistent: 0,\n+            //~^ ERROR struct `Point` has no field named `nonexistent`\n+            ..TEMPLATE\n+        }\n+    };\n+}"}, {"sha": "07cc5a1318aa43980a80c439921d76270fdc81e0", "filename": "src/test/ui/issue-50618.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d48c965071f630a200d4a0cfccb233e836b7483/src%2Ftest%2Fui%2Fissue-50618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d48c965071f630a200d4a0cfccb233e836b7483/src%2Ftest%2Fui%2Fissue-50618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50618.stderr?ref=0d48c965071f630a200d4a0cfccb233e836b7483", "patch": "@@ -0,0 +1,11 @@\n+error[E0560]: struct `Point` has no field named `nonexistent`\n+  --> $DIR/issue-50618.rs:24:13\n+   |\n+LL |             nonexistent: 0,\n+   |             ^^^^^^^^^^^ `Point` does not have this field\n+   |\n+   = note: available fields are: `x`, `y`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0560`."}]}