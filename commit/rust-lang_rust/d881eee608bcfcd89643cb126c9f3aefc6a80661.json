{"sha": "d881eee608bcfcd89643cb126c9f3aefc6a80661", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODFlZWU2MDhiY2ZjZDg5NjQzY2IxMjZjOWYzYWVmYzZhODA2NjE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-08T00:54:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-08T02:25:07Z"}, "message": "Change try_define_child to return a Result instead of an Option", "tree": {"sha": "86562681a93519eebeb6b50a6d9892ecc18b9645", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86562681a93519eebeb6b50a6d9892ecc18b9645"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d881eee608bcfcd89643cb126c9f3aefc6a80661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d881eee608bcfcd89643cb126c9f3aefc6a80661", "html_url": "https://github.com/rust-lang/rust/commit/d881eee608bcfcd89643cb126c9f3aefc6a80661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d881eee608bcfcd89643cb126c9f3aefc6a80661/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e7ff1bffea9f1b4c9f016989081286b32a1ec7", "html_url": "https://github.com/rust-lang/rust/commit/16e7ff1bffea9f1b4c9f016989081286b32a1ec7"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "775ed34ab073cc01f957ea754256476dcfe940d7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d881eee608bcfcd89643cb126c9f3aefc6a80661/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d881eee608bcfcd89643cb126c9f3aefc6a80661/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d881eee608bcfcd89643cb126c9f3aefc6a80661", "patch": "@@ -100,16 +100,16 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     fn try_define<T>(&self, parent: Module<'b>, name: Name, ns: Namespace, def: T)\n         where T: ToNameBinding<'b>\n     {\n-        parent.try_define_child(name, ns, self.new_name_binding(def.to_name_binding()));\n+        let _ = parent.try_define_child(name, ns, self.new_name_binding(def.to_name_binding()));\n     }\n \n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     fn define<T: ToNameBinding<'b>>(&self, parent: Module<'b>, name: Name, ns: Namespace, def: T) {\n         let binding = self.new_name_binding(def.to_name_binding());\n         let old_binding = match parent.try_define_child(name, ns, binding) {\n-            Some(old_binding) => old_binding,\n-            None => return,\n+            Ok(()) => return,\n+            Err(old_binding) => old_binding,\n         };\n \n         let span = binding.span.unwrap_or(DUMMY_SP);"}, {"sha": "47a811bc8ab89d45237667ef1ce297ed5174e738", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d881eee608bcfcd89643cb126c9f3aefc6a80661/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d881eee608bcfcd89643cb126c9f3aefc6a80661/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d881eee608bcfcd89643cb126c9f3aefc6a80661", "patch": "@@ -870,10 +870,10 @@ impl<'a> ModuleS<'a> {\n     // If the name is not yet defined, define the name and return None.\n     // Otherwise, return the existing definition.\n     fn try_define_child(&self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>)\n-                        -> Option<&'a NameBinding<'a>> {\n+                        -> Result<(), &'a NameBinding<'a>> {\n         match self.children.borrow_mut().entry((name, ns)) {\n-            hash_map::Entry::Vacant(entry) => { entry.insert(binding); None }\n-            hash_map::Entry::Occupied(entry) => { Some(entry.get()) },\n+            hash_map::Entry::Vacant(entry) => { entry.insert(binding); Ok(()) }\n+            hash_map::Entry::Occupied(entry) => { Err(entry.get()) },\n         }\n     }\n "}]}