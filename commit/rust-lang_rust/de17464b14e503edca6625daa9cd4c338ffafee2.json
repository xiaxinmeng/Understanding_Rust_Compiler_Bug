{"sha": "de17464b14e503edca6625daa9cd4c338ffafee2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTc0NjRiMTRlNTAzZWRjYTY2MjVkYWE5Y2Q0YzMzOGZmYWZlZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-07T21:14:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-07T21:14:39Z"}, "message": "Auto merge of #65881 - anp:implicit-caller-location, r=eddyb,oli-obk\n\nImplement #[track_caller] attribute. (RFC 2091 4/N)\n\nImplements the `#[track_caller]` attribute in both const and codegen contexts.\n\nThe const implementation walks up the stack to find the nearest untracked callsite.\n\nThe codegen implementation adds an implicit argument to tracked function calls, and populates it with either a call to the previously-landed intrinsic or if the caller has `#[track_caller]` with a copy of the location passed to the current function.\n\nAlso includes a little cleanup and a few comments in the other caller location areas.\n\n[Depends on: 65664](https://github.com/rust-lang/rust/pull/65664)\n[RFC 2091 text](https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md)\n[Tracking issue](https://github.com/rust-lang/rust/issues/47809)\n[Tracking doc](https://paper.dropbox.com/doc/track_rfc_2091_impl-notes--Anf1NwnIb0xcRv31YLIadyj0Ag-rwCdRc2fi2yvRZ7syGZ9q#:uid=863513134494965680023183&h2=TODO-actually-pass-location-to)", "tree": {"sha": "88969c0d7bbddc53c7fa798ae477efad19f2147c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88969c0d7bbddc53c7fa798ae477efad19f2147c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de17464b14e503edca6625daa9cd4c338ffafee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de17464b14e503edca6625daa9cd4c338ffafee2", "html_url": "https://github.com/rust-lang/rust/commit/de17464b14e503edca6625daa9cd4c338ffafee2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de17464b14e503edca6625daa9cd4c338ffafee2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c5c8eb864e56ce905742b8e97df5506bba6aeef", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5c8eb864e56ce905742b8e97df5506bba6aeef", "html_url": "https://github.com/rust-lang/rust/commit/5c5c8eb864e56ce905742b8e97df5506bba6aeef"}, {"sha": "15d1f7cffdc0b111123a6d34a356eae95af04676", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d1f7cffdc0b111123a6d34a356eae95af04676", "html_url": "https://github.com/rust-lang/rust/commit/15d1f7cffdc0b111123a6d34a356eae95af04676"}], "stats": {"total": 427, "additions": 286, "deletions": 141}, "files": [{"sha": "8a514f1e78e807d6efe5889931709ba6a241b52e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -102,6 +102,7 @@\n #![feature(staged_api)]\n #![feature(std_internals)]\n #![feature(stmt_expr_attributes)]\n+#![cfg_attr(not(bootstrap), feature(track_caller))]\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]"}, {"sha": "e924ee2036988781481131303e75f4fa1ae18330", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -176,6 +176,60 @@ pub struct Location<'a> {\n     col: u32,\n }\n \n+impl<'a> Location<'a> {\n+    /// Returns the source location of the caller of this function. If that function's caller is\n+    /// annotated then its call location will be returned, and so on up the stack to the first call\n+    /// within a non-tracked function body.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(track_caller)]\n+    /// use core::panic::Location;\n+    ///\n+    /// /// Returns the [`Location`] at which it is called.\n+    /// #[track_caller]\n+    /// fn get_caller_location() -> &'static Location<'static> {\n+    ///     Location::caller()\n+    /// }\n+    ///\n+    /// /// Returns a [`Location`] from within this function's definition.\n+    /// fn get_just_one_location() -> &'static Location<'static> {\n+    ///     get_caller_location()\n+    /// }\n+    ///\n+    /// let fixed_location = get_just_one_location();\n+    /// assert_eq!(fixed_location.file(), file!());\n+    /// assert_eq!(fixed_location.line(), 15);\n+    /// assert_eq!(fixed_location.column(), 5);\n+    ///\n+    /// // running the same untracked function in a different location gives us the same result\n+    /// let second_fixed_location = get_just_one_location();\n+    /// assert_eq!(fixed_location.file(), second_fixed_location.file());\n+    /// assert_eq!(fixed_location.line(), second_fixed_location.line());\n+    /// assert_eq!(fixed_location.column(), second_fixed_location.column());\n+    ///\n+    /// let this_location = get_caller_location();\n+    /// assert_eq!(this_location.file(), file!());\n+    /// assert_eq!(this_location.line(), 29);\n+    /// assert_eq!(this_location.column(), 21);\n+    ///\n+    /// // running the tracked function in a different location produces a different value\n+    /// let another_location = get_caller_location();\n+    /// assert_eq!(this_location.file(), another_location.file());\n+    /// assert_ne!(this_location.line(), another_location.line());\n+    /// assert_ne!(this_location.column(), another_location.column());\n+    /// ```\n+    #[cfg(not(bootstrap))]\n+    #[unstable(feature = \"track_caller\",\n+               reason = \"uses #[track_caller] which is not yet stable\",\n+               issue = \"47809\")]\n+    #[track_caller]\n+    pub const fn caller() -> &'static Location<'static> {\n+        crate::intrinsics::caller_location()\n+    }\n+}\n+\n impl<'a> Location<'a> {\n     #![unstable(feature = \"panic_internals\",\n                 reason = \"internal details of the implementation of the `panic!` \\"}, {"sha": "bf6c10dd3c9560d97562e55a8bb1fe0d45a29826", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -8,6 +8,7 @@ use crate::session::Session;\n use crate::session::config::{BorrowckMode, OutputFilenames};\n use crate::session::config::CrateType;\n use crate::middle;\n+use crate::middle::lang_items::PanicLocationLangItem;\n use crate::hir::{self, TraitCandidate, HirId, ItemKind, ItemLocalId, Node};\n use crate::hir::def::{Res, DefKind, Export};\n use crate::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n@@ -1588,6 +1589,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn has_strict_asm_symbol_naming(&self) -> bool {\n         self.sess.target.target.arch.contains(\"nvptx\")\n     }\n+\n+    /// Returns `&'static core::panic::Location<'static>`.\n+    pub fn caller_location_ty(&self) -> Ty<'tcx> {\n+        self.mk_imm_ref(\n+            self.lifetimes.re_static,\n+            self.type_of(self.require_lang_item(PanicLocationLangItem, None))\n+                .subst(*self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n+        )\n+    }\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {"}, {"sha": "366951bc9f494d325ab0cd4cc0ac7718825c62f2", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -116,6 +116,10 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n         tcx.codegen_fn_attrs(self.def_id()).requests_inline()\n     }\n+\n+    pub fn requires_caller_location(&self, tcx: TyCtxt<'_>) -> bool {\n+        tcx.codegen_fn_attrs(self.def_id()).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+    }\n }\n \n impl<'tcx> fmt::Display for Instance<'tcx> {\n@@ -255,11 +259,8 @@ impl<'tcx> Instance<'tcx> {\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         Instance::resolve(tcx, param_env, def_id, substs).map(|mut resolved| {\n-            let has_track_caller = |def| tcx.codegen_fn_attrs(def).flags\n-                .contains(CodegenFnAttrFlags::TRACK_CALLER);\n-\n             match resolved.def {\n-                InstanceDef::Item(def_id) if has_track_caller(def_id) => {\n+                InstanceDef::Item(def_id) if resolved.def.requires_caller_location(tcx) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n                     resolved.def = InstanceDef::ReifyShim(def_id);\n                 }"}, {"sha": "6c921134ab895ad1ca0f21710d33b51cac0694e4", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -2434,6 +2434,7 @@ where\n         cx: &C,\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n+        caller_location: Option<Ty<'tcx>>,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self;\n     fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n@@ -2448,13 +2449,19 @@ where\n         + HasParamEnv<'tcx>,\n {\n     fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n-        call::FnAbi::new_internal(cx, sig, extra_args, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n+        call::FnAbi::new_internal(cx, sig, extra_args, None, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n     }\n \n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n         let sig = instance.fn_sig_for_fn_abi(cx.tcx());\n \n-        call::FnAbi::new_internal(cx, sig, extra_args, |ty, arg_idx| {\n+        let caller_location = if instance.def.requires_caller_location(cx.tcx()) {\n+            Some(cx.tcx().caller_location_ty())\n+        } else {\n+            None\n+        };\n+\n+        call::FnAbi::new_internal(cx, sig, extra_args, caller_location, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`\n@@ -2512,6 +2519,7 @@ where\n         cx: &C,\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n+        caller_location: Option<Ty<'tcx>>,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n@@ -2684,6 +2692,7 @@ where\n                 .iter()\n                 .cloned()\n                 .chain(extra_args)\n+                .chain(caller_location)\n                 .enumerate()\n                 .map(|(i, ty)| arg_of(ty, Some(i)))\n                 .collect(),"}, {"sha": "e68349660ba5aebe782752af51306fecda225fec", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -774,6 +774,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 &fn_abi.args[first_args.len()..])\n         }\n \n+        let needs_location =\n+            instance.map_or(false, |i| i.def.requires_caller_location(self.cx.tcx()));\n+        if needs_location {\n+            assert_eq!(\n+                fn_abi.args.len(), args.len() + 1,\n+                \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n+            );\n+            let location = self.get_caller_location(&mut bx, span);\n+            let last_arg = fn_abi.args.last().unwrap();\n+            self.codegen_argument(&mut bx, location, &mut llargs, last_arg);\n+        }\n+\n         let fn_ptr = match (llfn, instance) {\n             (Some(llfn), _) => llfn,\n             (None, Some(instance)) => bx.get_fn_addr(instance),\n@@ -1010,14 +1022,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         span: Span,\n     ) -> OperandRef<'tcx, Bx::Value> {\n-        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n-        let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n-        let const_loc = bx.tcx().const_caller_location((\n-            Symbol::intern(&caller.file.name.to_string()),\n-            caller.line as u32,\n-            caller.col_display as u32 + 1,\n-        ));\n-        OperandRef::from_const(bx, const_loc)\n+        self.caller_location.unwrap_or_else(|| {\n+            let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+            let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n+            let const_loc = bx.tcx().const_caller_location((\n+                Symbol::intern(&caller.file.name.to_string()),\n+                caller.line as u32,\n+                caller.col_display as u32 + 1,\n+            ));\n+            OperandRef::from_const(bx, const_loc)\n+        })\n     }\n \n     fn get_personality_slot("}, {"sha": "33e343de86be13291f2d1f193562d8f4398d14ad", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -77,6 +77,9 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     /// All `VarDebuginfo` from the MIR body, partitioned by `Local`.\n     /// This is `None` if no variable debuginfo/names are needed.\n     per_local_var_debug_info: Option<IndexVec<mir::Local, Vec<&'tcx mir::VarDebugInfo<'tcx>>>>,\n+\n+    /// Caller location propagated if this function has `#[track_caller]`.\n+    caller_location: Option<OperandRef<'tcx, Bx::Value>>,\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -172,13 +175,14 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         locals: IndexVec::new(),\n         debug_context,\n         per_local_var_debug_info: debuginfo::per_local_var_debug_info(cx.tcx(), mir_body),\n+        caller_location: None,\n     };\n \n     let memory_locals = analyze::non_ssa_locals(&fx);\n \n     // Allocate variable and temp allocas\n     fx.locals = {\n-        let args = arg_local_refs(&mut bx, &fx, &memory_locals);\n+        let args = arg_local_refs(&mut bx, &mut fx, &memory_locals);\n \n         let mut allocate_local = |local| {\n             let decl = &mir_body.local_decls[local];\n@@ -320,14 +324,14 @@ fn create_funclets<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n /// indirect.\n fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n-    fx: &FunctionCx<'a, 'tcx, Bx>,\n+    fx: &mut FunctionCx<'a, 'tcx, Bx>,\n     memory_locals: &BitSet<mir::Local>,\n ) -> Vec<LocalRef<'tcx, Bx::Value>> {\n     let mir = fx.mir;\n     let mut idx = 0;\n     let mut llarg_idx = fx.fn_abi.ret.is_indirect() as usize;\n \n-    mir.args_iter().enumerate().map(|(arg_index, local)| {\n+    let args = mir.args_iter().enumerate().map(|(arg_index, local)| {\n         let arg_decl = &mir.local_decls[local];\n \n         if Some(local) == mir.spread_arg {\n@@ -423,7 +427,27 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             bx.store_fn_arg(arg, &mut llarg_idx, tmp);\n             LocalRef::Place(tmp)\n         }\n-    }).collect()\n+    }).collect::<Vec<_>>();\n+\n+    if fx.instance.def.requires_caller_location(bx.tcx()) {\n+        assert_eq!(\n+            fx.fn_abi.args.len(), args.len() + 1,\n+            \"#[track_caller] fn's must have 1 more argument in their ABI than in their MIR\",\n+        );\n+\n+        let arg = fx.fn_abi.args.last().unwrap();\n+        match arg.mode {\n+            PassMode::Direct(_) => (),\n+            _ => bug!(\"caller location must be PassMode::Direct, found {:?}\", arg.mode),\n+        }\n+\n+        fx.caller_location = Some(OperandRef {\n+            val: OperandValue::Immediate(bx.get_param(llarg_idx)),\n+            layout: arg.layout,\n+        });\n+    }\n+\n+    args\n }\n \n mod analyze;"}, {"sha": "363621b3ca43616959979d3550fb77e10bd7b035", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -541,5 +541,4 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::or_patterns,\n     sym::let_chains,\n     sym::raw_dylib,\n-    sym::track_caller,\n ];"}, {"sha": "0123d68d878d5391c4320b4062452b97e0ee978f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -9,11 +9,10 @@ use std::convert::TryInto;\n \n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled, ScalarMaybeUndef};\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt, subst::Subst};\n-use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n+use rustc::ty::layout::{self, HasTyCtxt, LayoutOf, VariantIdx};\n use rustc::traits::Reveal;\n use rustc_data_structures::fx::FxHashMap;\n use crate::interpret::eval_nullary_intrinsic;\n@@ -348,7 +347,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 //\n                 // For the moment we only do this for functions which take no arguments\n                 // (or all arguments are ZSTs) so that we don't memoize too much.\n-                if args.iter().all(|a| a.layout.is_zst()) {\n+                //\n+                // Because `#[track_caller]` adds an implicit non-ZST argument, we also cannot\n+                // perform this optimization on items tagged with it.\n+                let no_implicit_args = !instance.def.requires_caller_location(ecx.tcx());\n+                if args.iter().all(|a| a.layout.is_zst()) && no_implicit_args {\n                     let gid = GlobalId { instance, promoted: None };\n                     ecx.eval_const_fn_call(gid, ret)?;\n                     return Ok(None);\n@@ -559,11 +562,7 @@ pub fn const_caller_location<'tcx>(\n     trace!(\"const_caller_location: {}:{}:{}\", file, line, col);\n     let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all());\n \n-    let loc_ty = tcx.mk_imm_ref(\n-        tcx.lifetimes.re_static,\n-        tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n-            .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n-    );\n+    let loc_ty = tcx.caller_location_ty();\n     let loc_place = ecx.alloc_caller_location(file, line, col);\n     intern_const_alloc_recursive(&mut ecx, None, loc_place).unwrap();\n     let loc_const = ty::Const {"}, {"sha": "67f0aed243da1f20bd46fc23e61d5d59451925c0", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -112,6 +112,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `src/librustc/ty/constness.rs`\n         match intrinsic_name {\n             sym::caller_location => {\n+                let span = self.find_closest_untracked_caller_location().unwrap_or(span);\n                 let location = self.alloc_caller_location_for_span(span);\n                 self.write_scalar(location.ptr, dest)?;\n             }"}, {"sha": "ec843ef7a4d86995c13fd8b74e7e48c3b13084d0", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -6,6 +6,21 @@ use syntax_pos::{Symbol, Span};\n use crate::interpret::{Scalar, MemoryKind, MPlaceTy, intrinsics::{InterpCx, Machine}};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n+    /// Walks up the callstack from the intrinsic's callsite, searching for the first frame which is\n+    /// not `#[track_caller]`.\n+    crate fn find_closest_untracked_caller_location(&self) -> Option<Span> {\n+        let mut caller_span = None;\n+        for next_caller in self.stack.iter().rev() {\n+            if !next_caller.instance.def.requires_caller_location(*self.tcx) {\n+                return caller_span;\n+            }\n+            caller_span = Some(next_caller.span);\n+        }\n+\n+        caller_span\n+    }\n+\n+    /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers.\n     crate fn alloc_caller_location(\n         &mut self,\n         filename: Symbol,"}, {"sha": "6462672c010450a8d9b12ef1463ee99949c835cf", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -230,6 +230,11 @@ impl Inliner<'tcx> {\n \n         let codegen_fn_attrs = tcx.codegen_fn_attrs(callsite.callee);\n \n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::TRACK_CALLER) {\n+            debug!(\"`#[track_caller]` present - not inlining\");\n+            return false;\n+        }\n+\n         let hinted = match codegen_fn_attrs.inline {\n             // Just treat inline(always) as a hint for now,\n             // there are cases that prevent inlining that we"}, {"sha": "cec831147c44f6cfd0b0ae5ca58ad0a0b27f9cdf", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,7 +1,6 @@\n //! Type-checking for the rust-intrinsic and platform-intrinsic\n //! intrinsics that the compiler exposes.\n \n-use rustc::middle::lang_items::PanicLocationLangItem;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::subst::Subst;\n@@ -148,15 +147,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n                  ], tcx.types.usize)\n             }\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n-            \"caller_location\" => (\n-                0,\n-                vec![],\n-                tcx.mk_imm_ref(\n-                    tcx.lifetimes.re_static,\n-                    tcx.type_of(tcx.require_lang_item(PanicLocationLangItem, None))\n-                        .subst(tcx, tcx.mk_substs([tcx.lifetimes.re_static.into()].iter())),\n-                ),\n-            ),\n+            \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n             \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),"}, {"sha": "b9829793cbe5040c378641f4cd34fadca22c07f2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -2616,7 +2616,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     tcx.sess,\n                     attr.span,\n                     E0737,\n-                    \"Rust ABI is required to use `#[track_caller]`\"\n+                    \"`#[track_caller]` requires Rust ABI\"\n                 ).emit();\n             }\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;"}, {"sha": "c63822f052b2fbe20762ac69ec5dd85cbebb8881", "filename": "src/test/ui/consts/const-eval/const_caller_location.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_caller_location.rs?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -1,23 +0,0 @@\n-// run-pass\n-\n-#![feature(const_fn, core_intrinsics)]\n-\n-use std::{intrinsics::caller_location, panic::Location};\n-\n-const LOCATION: &Location = caller_location();\n-const NESTED: &Location = {\n-    const fn nested_location() -> &'static Location<'static> {\n-        caller_location()\n-    };\n-    nested_location()\n-};\n-\n-fn main() {\n-    assert_eq!(LOCATION.file(), file!());\n-    assert_eq!(LOCATION.line(), 7);\n-    assert_eq!(LOCATION.column(), 29);\n-\n-    assert_eq!(NESTED.file(), file!());\n-    assert_eq!(NESTED.line(), 10);\n-    assert_eq!(NESTED.column(), 9);\n-}"}, {"sha": "0a79aea376fbc22b88631e7f0eb6869e06fa2f52", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-intrinsic.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,21 +1,27 @@\n // run-pass\n \n-#![feature(core_intrinsics)]\n+#![feature(track_caller)]\n+\n+#[inline(never)]\n+#[track_caller]\n+fn defeat_const_prop() -> &'static core::panic::Location<'static> {\n+    core::panic::Location::caller()\n+}\n \n macro_rules! caller_location_from_macro {\n-    () => (core::intrinsics::caller_location());\n+    () => (defeat_const_prop());\n }\n \n fn main() {\n-    let loc = core::intrinsics::caller_location();\n+    let loc = defeat_const_prop();\n     assert_eq!(loc.file(), file!());\n-    assert_eq!(loc.line(), 10);\n+    assert_eq!(loc.line(), 16);\n     assert_eq!(loc.column(), 15);\n \n-    // `caller_location()` in a macro should behave similarly to `file!` and `line!`,\n+    // `Location::caller()` in a macro should behave similarly to `file!` and `line!`,\n     // i.e. point to where the macro was invoked, instead of the macro itself.\n     let loc2 = caller_location_from_macro!();\n     assert_eq!(loc2.file(), file!());\n-    assert_eq!(loc2.line(), 17);\n+    assert_eq!(loc2.line(), 23);\n     assert_eq!(loc2.column(), 16);\n }"}, {"sha": "0614c52c66036a1de278e427c33e71590488ab27", "filename": "src/test/ui/rfc-2091-track-caller/const-caller-location.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+\n+#![feature(const_fn, track_caller)]\n+\n+use std::panic::Location;\n+\n+const LOCATION: &Location = Location::caller();\n+\n+const TRACKED: &Location = tracked();\n+#[track_caller]\n+const fn tracked() -> &'static Location <'static> {\n+    Location::caller()\n+}\n+\n+const NESTED: &Location = nested_location();\n+const fn nested_location() -> &'static Location<'static> {\n+    Location::caller()\n+}\n+\n+const CONTAINED: &Location = contained();\n+const fn contained() -> &'static Location<'static> {\n+    tracked()\n+}\n+\n+fn main() {\n+    assert_eq!(LOCATION.file(), file!());\n+    assert_eq!(LOCATION.line(), 7);\n+    assert_eq!(LOCATION.column(), 29);\n+\n+    assert_eq!(TRACKED.file(), file!());\n+    assert_eq!(TRACKED.line(), 9);\n+    assert_eq!(TRACKED.column(), 28);\n+\n+    assert_eq!(NESTED.file(), file!());\n+    assert_eq!(NESTED.line(), 17);\n+    assert_eq!(NESTED.column(), 5);\n+\n+    assert_eq!(CONTAINED.file(), file!());\n+    assert_eq!(CONTAINED.line(), 22);\n+    assert_eq!(CONTAINED.column(), 5);\n+}"}, {"sha": "d6560231871c9936ada4723327f7c9d458519ec8", "filename": "src/test/ui/rfc-2091-track-caller/error-odd-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n #[track_caller(1)]\n fn f() {}"}, {"sha": "8906fa59506a7cbd81be74db660b3d93538a06d3", "filename": "src/test/ui/rfc-2091-track-caller/error-odd-syntax.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-odd-syntax.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -4,13 +4,5 @@ error: malformed `track_caller` attribute input\n LL | #[track_caller(1)]\n    | ^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[track_caller]`\n \n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-odd-syntax.rs:1:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: aborting due to previous error\n "}, {"sha": "20d29619ba404830a68609f60878552462d6088f", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,6 +1,7 @@\n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n-#[track_caller] //~ ERROR Rust ABI is required to use `#[track_caller]`\n+#[track_caller]\n extern \"C\" fn f() {}\n+//~^^ ERROR `#[track_caller]` requires Rust ABI\n \n fn main() {}"}, {"sha": "2a3a4385c8bf7373c3f6761fe3c02937de54ef52", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,12 +1,4 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-invalid-abi.rs:1:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0737]: Rust ABI is required to use `#[track_caller]`\n+error[E0737]: `#[track_caller]` requires Rust ABI\n   --> $DIR/error-with-invalid-abi.rs:3:1\n    |\n LL | #[track_caller]"}, {"sha": "dd9e5d04135851cd4f1fe97c6ed828cae38b11b8", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(naked_functions, track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(naked_functions, track_caller)]\n \n #[track_caller]\n #[naked]"}, {"sha": "2f5003cfdb7a57aab2466517101303f8398d4308", "filename": "src/test/ui/rfc-2091-track-caller/error-with-naked.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-naked.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,11 +1,3 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-naked.rs:1:29\n-   |\n-LL | #![feature(naked_functions, track_caller)]\n-   |                             ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0736]: cannot use `#[track_caller]` with `#[naked]`\n   --> $DIR/error-with-naked.rs:3:1\n    |"}, {"sha": "ef037ab62aa3e001f9e4230a234eb55d288ff9cc", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n trait Trait {\n     #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods"}, {"sha": "ded721d278253e82f62d4df1e9b54c1787ae3d31", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,11 +1,3 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-trait-decl.rs:1:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-decl.rs:4:5\n    |"}, {"sha": "17e4bf41ddb53930f81973bde0955c078c73e4cb", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n trait Trait {\n     #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods"}, {"sha": "867eb918b6e087eb2e149f698622f110f928128b", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,11 +1,3 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-trait-default-impl.rs:1:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-default-impl.rs:4:5\n    |"}, {"sha": "75f20f76e660d618c1bd10874deffab0ae044e44", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,6 +1,6 @@\n // check-fail\n \n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n trait Trait {\n     fn unwrap(&self);"}, {"sha": "fafceefbfd8397f859eac694f6bca8f91a5ab945", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,11 +1,3 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-trait-fn-impl.rs:3:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-fn-impl.rs:10:5\n    |"}, {"sha": "76e62b89ab818d34f5d85a4ee50530aa2530c1fa", "filename": "src/test/ui/rfc-2091-track-caller/intrinsic-wrapper.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fintrinsic-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fintrinsic-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fintrinsic-wrapper.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+\n+#![feature(track_caller)]\n+\n+macro_rules! caller_location_from_macro {\n+    () => (core::panic::Location::caller());\n+}\n+\n+fn main() {\n+    let loc = core::panic::Location::caller();\n+    assert_eq!(loc.file(), file!());\n+    assert_eq!(loc.line(), 10);\n+    assert_eq!(loc.column(), 15);\n+\n+    // `Location::caller()` in a macro should behave similarly to `file!` and `line!`,\n+    // i.e. point to where the macro was invoked, instead of the macro itself.\n+    let loc2 = caller_location_from_macro!();\n+    assert_eq!(loc2.file(), file!());\n+    assert_eq!(loc2.line(), 17);\n+    assert_eq!(loc2.column(), 16);\n+}"}, {"sha": "0fd59b4bf4918f69c040800fc2b676a128ac59d5", "filename": "src/test/ui/rfc-2091-track-caller/only-for-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n #[track_caller]\n struct S;"}, {"sha": "7becb9c5b60af3a111f131e3528fd5cc1a0a88cc", "filename": "src/test/ui/rfc-2091-track-caller/only-for-fns.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fonly-for-fns.stderr?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,11 +1,3 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/only-for-fns.rs:1:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0739]: attribute should be applied to function\n   --> $DIR/only-for-fns.rs:3:1\n    |"}, {"sha": "eef83b3d68f970ee91e0816fdf549f726cca076d", "filename": "src/test/ui/rfc-2091-track-caller/pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n+#![feature(track_caller)]\n \n #[track_caller]\n fn f() {}"}, {"sha": "b1fd23a6a9ddb2f821fc1d2ff7572f1dd9648ec0", "filename": "src/test/ui/rfc-2091-track-caller/pass.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c5c8eb864e56ce905742b8e97df5506bba6aeef/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fpass.stderr?ref=5c5c8eb864e56ce905742b8e97df5506bba6aeef", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/pass.rs:2:12\n-   |\n-LL | #![feature(track_caller)]\n-   |            ^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "8436ee510a5bcc12aaac9ddc07b0ba3556dc19ac", "filename": "src/test/ui/rfc-2091-track-caller/track-caller-attribute.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de17464b14e503edca6625daa9cd4c338ffafee2/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ftrack-caller-attribute.rs?ref=de17464b14e503edca6625daa9cd4c338ffafee2", "patch": "@@ -0,0 +1,40 @@\n+// run-pass\n+\n+#![feature(const_fn, track_caller)]\n+\n+use std::panic::Location;\n+\n+#[track_caller]\n+fn tracked() -> &'static Location<'static> {\n+    Location::caller()\n+}\n+\n+fn nested_intrinsic() -> &'static Location<'static> {\n+    Location::caller()\n+}\n+\n+fn nested_tracked() -> &'static Location<'static> {\n+    tracked()\n+}\n+\n+fn main() {\n+    let location = Location::caller();\n+    assert_eq!(location.file(), file!());\n+    assert_eq!(location.line(), 21);\n+    assert_eq!(location.column(), 20);\n+\n+    let tracked = tracked();\n+    assert_eq!(tracked.file(), file!());\n+    assert_eq!(tracked.line(), 26);\n+    assert_eq!(tracked.column(), 19);\n+\n+    let nested = nested_intrinsic();\n+    assert_eq!(nested.file(), file!());\n+    assert_eq!(nested.line(), 13);\n+    assert_eq!(nested.column(), 5);\n+\n+    let contained = nested_tracked();\n+    assert_eq!(contained.file(), file!());\n+    assert_eq!(contained.line(), 17);\n+    assert_eq!(contained.column(), 5);\n+}"}]}