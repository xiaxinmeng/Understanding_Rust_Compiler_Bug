{"sha": "2ec933377cb528628bc33225b9d2a7223332e731", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzkzMzM3N2NiNTI4NjI4YmMzMzIyNWI5ZDJhNzIyMzMzMmU3MzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T07:37:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-12T07:37:37Z"}, "message": "Merge pull request #134 from birkenfeld/if_let_chain_macro\n\nutils: implement if_let_chain macro as suggested by isHavvy", "tree": {"sha": "5356fa441ac7a64c7177e5d040e4d81a6fbe2870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5356fa441ac7a64c7177e5d040e4d81a6fbe2870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec933377cb528628bc33225b9d2a7223332e731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec933377cb528628bc33225b9d2a7223332e731", "html_url": "https://github.com/rust-lang/rust/commit/2ec933377cb528628bc33225b9d2a7223332e731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec933377cb528628bc33225b9d2a7223332e731/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be32ea7a4598633cd072712a8bbd0fa63f42ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be32ea7a4598633cd072712a8bbd0fa63f42ae4", "html_url": "https://github.com/rust-lang/rust/commit/9be32ea7a4598633cd072712a8bbd0fa63f42ae4"}, {"sha": "6d5f9478b22da27dc59d204cf94060bf949b6746", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5f9478b22da27dc59d204cf94060bf949b6746", "html_url": "https://github.com/rust-lang/rust/commit/6d5f9478b22da27dc59d204cf94060bf949b6746"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "fef678f668d8f8410fad40dcc23d97f5bb74d3b3", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ec933377cb528628bc33225b9d2a7223332e731/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec933377cb528628bc33225b9d2a7223332e731/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2ec933377cb528628bc33225b9d2a7223332e731", "patch": "@@ -13,6 +13,8 @@ extern crate collections;\n use rustc::plugin::Registry;\n use rustc::lint::LintPassObject;\n \n+#[macro_use]\n+pub mod utils;\n pub mod types;\n pub mod misc;\n pub mod eq_op;\n@@ -27,7 +29,6 @@ pub mod len_zero;\n pub mod attrs;\n pub mod collapsible_if;\n pub mod unicode;\n-pub mod utils;\n pub mod strings;\n pub mod methods;\n pub mod returns;"}, {"sha": "5a361d3a7dc9596299927e2de582e1cc7406b55a", "filename": "src/returns.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2ec933377cb528628bc33225b9d2a7223332e731/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec933377cb528628bc33225b9d2a7223332e731/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=2ec933377cb528628bc33225b9d2a7223332e731", "patch": "@@ -67,20 +67,18 @@ impl ReturnPass {\n     // Check for \"let x = EXPR; x\"\n     fn check_let_return(&mut self, cx: &Context, block: &Block) {\n         // we need both a let-binding stmt and an expr\n-        if let Some(stmt) = block.stmts.last() {\n-            if let StmtDecl(ref decl, _) = stmt.node {\n-                if let DeclLocal(ref local) = decl.node {\n-                    if let Some(ref initexpr) = local.init {\n-                        if let PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node {\n-                            if let Some(ref retexpr) = block.expr {\n-                                if let ExprPath(_, ref path) = retexpr.node {\n-                                    if match_path(path, &[&*id.name.as_str()]) {\n-                                        self.emit_let_lint(cx, retexpr.span, initexpr.span);\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n+        if_let_chain! {\n+            [\n+                Some(stmt) = block.stmts.last(),\n+                StmtDecl(ref decl, _) = stmt.node,\n+                DeclLocal(ref local) = decl.node,\n+                Some(ref initexpr) = local.init,\n+                PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node,\n+                Some(ref retexpr) = block.expr,\n+                ExprPath(_, ref path) = retexpr.node\n+            ], {\n+                if match_path(path, &[&*id.name.as_str()]) {\n+                    self.emit_let_lint(cx, retexpr.span, initexpr.span);\n                 }\n             }\n         }"}, {"sha": "575d39b0c2374aa9b0d4bc79c09a5852abcaf7b2", "filename": "src/utils.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2ec933377cb528628bc33225b9d2a7223332e731/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec933377cb528628bc33225b9d2a7223332e731/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2ec933377cb528628bc33225b9d2a7223332e731", "patch": "@@ -92,3 +92,32 @@ pub fn walk_ptrs_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n         _ => ty\n     }\n }\n+\n+/// Produce a nested chain of if-lets from the patterns:\n+///\n+///     if_let_chain! {[Some(y) = x, Some(z) = y],\n+///         {\n+///             block\n+///         }\n+///     }\n+///\n+/// becomes\n+///\n+///     if let Some(y) = x {\n+///         if let Some(z) = y {\n+///             block\n+///         }\n+///     }\n+#[macro_export]\n+macro_rules! if_let_chain {\n+    ([$pat:pat = $expr:expr, $($p2:pat = $e2:expr),+], $block:block) => {\n+        if let $pat = $expr {\n+           if_let_chain!{ [$($p2 = $e2),+], $block }\n+        }\n+    };\n+    ([$pat:pat = $expr:expr], $block:block) => {\n+        if let $pat = $expr {\n+           $block\n+        }\n+    };\n+}"}]}