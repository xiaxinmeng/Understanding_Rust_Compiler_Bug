{"sha": "2995fd2c87bba98d4cb7957a182a58bee68d86ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTVmZDJjODdiYmE5OGQ0Y2I3OTU3YTE4MmE1OGJlZTY4ZDg2YmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-28T13:48:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-28T13:48:42Z"}, "message": "Merge #3363\n\n3363: Cleanup highlighting tags r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9c8a33d167dbea0ffd0cb1460914542746905cad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8a33d167dbea0ffd0cb1460914542746905cad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2995fd2c87bba98d4cb7957a182a58bee68d86ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWRo6CRBK7hj4Ov3rIwAAdHIIACgTAOGM2PAp0IJ4g/KIsXFb\nLtRVTvWWifYwANNNNQVnjz1650TvMLySTP0BGKEH/iGp00YEAD0KBmYEpAZfRivX\n8UnFeqYeZfw+JubY3e9sgpqL4O2Kiz7ixZOHXqbLrgiNwgQL8X/p4GG4nlLdWDrX\nLWj06IGIJbqQXbdXjJnX8TWc+Z4IGbbkprA1LxR4a/BdVCXQyODRmIAiOaTou4Mv\n0CwoKHcGq8NRFXCLdnDrUW9ZQw35ngLRnCeVpA0yHCNZLnGsObnPNcckvV2yJRTG\ntLPLYhF02nr5FSM+rByjKmhXwKCyf1Ydr3T7WxM5G0a92W4t6eAS9TK8C27NWSg=\n=uNwT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c8a33d167dbea0ffd0cb1460914542746905cad\nparent 7e5cfcd4fb708f5d20a244ef010eaf57c055310d\nparent 9464ca97c90dca4cad57d29cac4fccdd99235925\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582897722 +0000\ncommitter GitHub <noreply@github.com> 1582897722 +0000\n\nMerge #3363\n\n3363: Cleanup highlighting tags r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2995fd2c87bba98d4cb7957a182a58bee68d86ba", "html_url": "https://github.com/rust-lang/rust/commit/2995fd2c87bba98d4cb7957a182a58bee68d86ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2995fd2c87bba98d4cb7957a182a58bee68d86ba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e5cfcd4fb708f5d20a244ef010eaf57c055310d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5cfcd4fb708f5d20a244ef010eaf57c055310d", "html_url": "https://github.com/rust-lang/rust/commit/7e5cfcd4fb708f5d20a244ef010eaf57c055310d"}, {"sha": "9464ca97c90dca4cad57d29cac4fccdd99235925", "url": "https://api.github.com/repos/rust-lang/rust/commits/9464ca97c90dca4cad57d29cac4fccdd99235925", "html_url": "https://github.com/rust-lang/rust/commit/9464ca97c90dca4cad57d29cac4fccdd99235925"}], "stats": {"total": 387, "additions": 231, "deletions": 156}, "files": [{"sha": "8c372ad2700b667b11e2dd6333093f2d51ab0a14", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -3,70 +3,72 @@\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n+\n .comment            { color: #7F9F7F; }\n-.string             { color: #CC9393; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n-.type.builtin       { color: #8CD0D3; }\n-.type.param         { color: #20999D; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n .attribute          { color: #94BFF3; }\n-.literal            { color: #BFEBBF; }\n-.literal.numeric    { color: #6A8759; }\n+.numeric_literal    { color: #BFEBBF; }\n .macro              { color: #94BFF3; }\n .module             { color: #AFD8AF; }\n .variable           { color: #DCDCCC; }\n-.variable.mut       { color: #DCDCCC; text-decoration: underline; }\n+.mutable            { text-decoration: underline; }\n \n-.keyword            { color: #F0DFAF; }\n-.keyword.unsafe     { color: #DFAF8F; }\n-.keyword.control    { color: #F0DFAF; font-weight: bold; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n </style>\n <pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n-<span class=\"keyword\">struct</span> <span class=\"type\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"type builtin\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"type builtin\">i32</span>,\n+<span class=\"keyword\">struct</span> <span class=\"struct\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"builtin_type\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"builtin_type\">i32</span>,\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type param\">T</span>&gt;() -&gt; <span class=\"type param\">T</span> {\n+<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type_param\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n     <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>();\n-    <span class=\"function\">foo</span>::&lt;<span class=\"type builtin\">i32</span>&gt;();\n+    <span class=\"function\">foo</span>::&lt;<span class=\"builtin_type\">i32</span>&gt;();\n }\n \n <span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> def_fn {\n     ($($tt:tt)*) =&gt; {$($tt)*}\n }\n \n-<span class=\"macro\">def_fn</span><span class=\"macro\">!</span>{\n-    <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() -&gt; <span class=\"type builtin\">u32</span> {\n-        <span class=\"literal numeric\">100</span>\n+<span class=\"macro\">def_fn</span><span class=\"macro\">!</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n+        <span class=\"numeric_literal\">100</span>\n     }\n }\n \n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n-    <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal numeric\">92</span>);\n+    <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">vec</span> = Vec::new();\n     <span class=\"keyword control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"literal numeric\">92</span>;\n-        <span class=\"variable mutable\">vec</span>.push(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"literal numeric\">1</span> });\n+        <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"numeric_literal\">92</span>;\n+        <span class=\"variable mutable\">vec</span>.push(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n     }\n-    <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.set_len(<span class=\"literal numeric\">0</span>); }\n+    <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.set_len(<span class=\"numeric_literal\">0</span>); }\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span> = <span class=\"literal numeric\">42</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &<span class=\"variable mutable\">y</span>;\n \n     <span class=\"variable mutable\">y</span>;\n }\n \n-<span class=\"keyword\">enum</span> <span class=\"type\">E</span>&lt;<span class=\"type param\">X</span>&gt; {\n-    <span class=\"constant\">V</span>(<span class=\"type param\">X</span>)\n+<span class=\"keyword\">enum</span> <span class=\"enum\">E</span>&lt;<span class=\"type_param\">X</span>&gt; {\n+    <span class=\"enum_variant\">V</span>(<span class=\"type_param\">X</span>)\n }\n \n-<span class=\"keyword\">impl</span>&lt;<span class=\"type param\">X</span>&gt; <span class=\"type\">E</span>&lt;<span class=\"type param\">X</span>&gt; {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">new</span>&lt;<span class=\"type param\">T</span>&gt;() -&gt; <span class=\"type\">E</span>&lt;<span class=\"type param\">T</span>&gt; {}\n+<span class=\"keyword\">impl</span>&lt;<span class=\"type_param\">X</span>&gt; <span class=\"enum\">E</span>&lt;<span class=\"type_param\">X</span>&gt; {\n+    <span class=\"keyword\">fn</span> <span class=\"function\">new</span>&lt;<span class=\"type_param\">T</span>&gt;() -&gt; <span class=\"enum\">E</span>&lt;<span class=\"type_param\">T</span>&gt; {}\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "f63e64b6d1f7791ca19808e4d1b04628e5aaca10", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -3,36 +3,38 @@\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n+\n .comment            { color: #7F9F7F; }\n-.string             { color: #CC9393; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n-.type.builtin       { color: #8CD0D3; }\n-.type.param         { color: #20999D; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n .attribute          { color: #94BFF3; }\n-.literal            { color: #BFEBBF; }\n-.literal.numeric    { color: #6A8759; }\n+.numeric_literal    { color: #BFEBBF; }\n .macro              { color: #94BFF3; }\n .module             { color: #AFD8AF; }\n .variable           { color: #DCDCCC; }\n-.variable.mut       { color: #DCDCCC; text-decoration: underline; }\n+.mutable            { text-decoration: underline; }\n \n-.keyword            { color: #F0DFAF; }\n-.keyword.unsafe     { color: #DFAF8F; }\n-.keyword.control    { color: #F0DFAF; font-weight: bold; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n </style>\n <pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n \n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.to_string();\n }\n \n <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "30ca9d8b010c08edc596ec17636182e83fa0f8ee", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -177,10 +177,11 @@ fn highlight_element(\n                 }\n             };\n \n-            match name_kind {\n+            let h = match name_kind {\n                 Some(name_kind) => highlight_name(db, name_kind),\n                 None => highlight_name_by_syntax(name),\n-            }\n+            };\n+            h | HighlightModifier::Definition\n         }\n \n         // Highlight references like the definitions they resolve to\n@@ -206,12 +207,13 @@ fn highlight_element(\n \n         // Simple token-based highlighting\n         COMMENT => HighlightTag::Comment.into(),\n-        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HighlightTag::LiteralString.into(),\n+        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HighlightTag::StringLiteral.into(),\n         ATTR => HighlightTag::Attribute.into(),\n-        INT_NUMBER | FLOAT_NUMBER => HighlightTag::LiteralNumeric.into(),\n-        BYTE => HighlightTag::LiteralByte.into(),\n-        CHAR => HighlightTag::LiteralChar.into(),\n-        LIFETIME => HighlightTag::TypeLifetime.into(),\n+        INT_NUMBER | FLOAT_NUMBER => HighlightTag::NumericLiteral.into(),\n+        BYTE => HighlightTag::ByteLiteral.into(),\n+        CHAR => HighlightTag::CharLiteral.into(),\n+        // FIXME: set Declaration for decls\n+        LIFETIME => HighlightTag::Lifetime.into(),\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);\n@@ -255,20 +257,21 @@ fn highlight_name(db: &RootDatabase, def: NameDefinition) -> Highlight {\n         NameDefinition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(_) => HighlightTag::Function,\n-            hir::ModuleDef::Adt(_) => HighlightTag::Type,\n-            hir::ModuleDef::EnumVariant(_) => HighlightTag::Constant,\n+            hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n+            hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,\n+            hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Union,\n+            hir::ModuleDef::EnumVariant(_) => HighlightTag::EnumVariant,\n             hir::ModuleDef::Const(_) => HighlightTag::Constant,\n-            hir::ModuleDef::Static(_) => HighlightTag::Constant,\n-            hir::ModuleDef::Trait(_) => HighlightTag::Type,\n-            hir::ModuleDef::TypeAlias(_) => HighlightTag::Type,\n-            hir::ModuleDef::BuiltinType(_) => {\n-                return HighlightTag::Type | HighlightModifier::Builtin\n-            }\n+            hir::ModuleDef::Static(_) => HighlightTag::Static,\n+            hir::ModuleDef::Trait(_) => HighlightTag::Trait,\n+            hir::ModuleDef::TypeAlias(_) => HighlightTag::TypeAlias,\n+            hir::ModuleDef::BuiltinType(_) => HighlightTag::BuiltinType,\n         },\n-        NameDefinition::SelfType(_) => HighlightTag::TypeSelf,\n+        NameDefinition::SelfType(_) => HighlightTag::SelfType,\n         NameDefinition::TypeParam(_) => HighlightTag::TypeParam,\n+        // FIXME: distinguish between locals and parameters\n         NameDefinition::Local(local) => {\n-            let mut h = Highlight::new(HighlightTag::Variable);\n+            let mut h = Highlight::new(HighlightTag::Local);\n             if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n                 h |= HighlightModifier::Mutable;\n             }\n@@ -287,7 +290,11 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     };\n \n     match parent.kind() {\n-        STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS_DEF => HighlightTag::Type.into(),\n+        STRUCT_DEF => HighlightTag::Struct.into(),\n+        ENUM_DEF => HighlightTag::Enum.into(),\n+        UNION_KW => HighlightTag::Union.into(),\n+        TRAIT_DEF => HighlightTag::Trait.into(),\n+        TYPE_ALIAS_DEF => HighlightTag::TypeAlias.into(),\n         TYPE_PARAM => HighlightTag::TypeParam.into(),\n         RECORD_FIELD_DEF => HighlightTag::Field.into(),\n         _ => default,\n@@ -312,7 +319,7 @@ fn highlight_injection(\n     if let Some(range) = literal.open_quote_text_range() {\n         acc.push(HighlightedRange {\n             range,\n-            highlight: HighlightTag::LiteralString.into(),\n+            highlight: HighlightTag::StringLiteral.into(),\n             binding_hash: None,\n         })\n     }\n@@ -327,7 +334,7 @@ fn highlight_injection(\n     if let Some(range) = literal.close_quote_text_range() {\n         acc.push(HighlightedRange {\n             range,\n-            highlight: HighlightTag::LiteralString.into(),\n+            highlight: HighlightTag::StringLiteral.into(),\n             binding_hash: None,\n         })\n     }"}, {"sha": "54678c278dff547add2a5ac8c09744366bd64f48", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -80,25 +80,27 @@ const STYLE: &str = \"\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n+\n .comment            { color: #7F9F7F; }\n-.string             { color: #CC9393; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n .field              { color: #94BFF3; }\n .function           { color: #93E0E3; }\n .parameter          { color: #94BFF3; }\n .text               { color: #DCDCCC; }\n .type               { color: #7CB8BB; }\n-.type.builtin       { color: #8CD0D3; }\n-.type.param         { color: #20999D; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n .attribute          { color: #94BFF3; }\n-.literal            { color: #BFEBBF; }\n-.literal.numeric    { color: #6A8759; }\n+.numeric_literal    { color: #BFEBBF; }\n .macro              { color: #94BFF3; }\n .module             { color: #AFD8AF; }\n .variable           { color: #DCDCCC; }\n-.variable.mut       { color: #DCDCCC; text-decoration: underline; }\n+.mutable            { text-decoration: underline; }\n \n-.keyword            { color: #F0DFAF; }\n-.keyword.unsafe     { color: #DFAF8F; }\n-.keyword.control    { color: #F0DFAF; font-weight: bold; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.control            { font-style: italic; }\n </style>\n \";"}, {"sha": "9da80823cc5d4f8106b257e2a5229537cf3ddc76", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -14,59 +14,71 @@ pub struct HighlightModifiers(u32);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum HighlightTag {\n+    Attribute,\n+    BuiltinType,\n+    ByteLiteral,\n+    CharLiteral,\n+    Comment,\n+    Constant,\n+    Enum,\n+    EnumVariant,\n     Field,\n     Function,\n-    Module,\n-    Constant,\n+    Keyword,\n+    Lifetime,\n     Macro,\n-    Variable,\n-\n-    Type,\n-    TypeSelf,\n+    Module,\n+    NumericLiteral,\n+    SelfType,\n+    Static,\n+    StringLiteral,\n+    Struct,\n+    Trait,\n+    TypeAlias,\n     TypeParam,\n-    TypeLifetime,\n-\n-    LiteralByte,\n-    LiteralNumeric,\n-    LiteralChar,\n-\n-    Comment,\n-    LiteralString,\n-    Attribute,\n-\n-    Keyword,\n+    Union,\n+    Local,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n #[repr(u8)]\n pub enum HighlightModifier {\n-    Mutable = 0,\n-    Unsafe,\n     /// Used with keywords like `if` and `break`.\n-    Control,\n-    Builtin,\n+    Control = 0,\n+    /// `foo` in `fn foo(x: i32)` is a definition, `foo` in `foo(90 + 2)` is\n+    /// not.\n+    Definition,\n+    Mutable,\n+    Unsafe,\n }\n \n impl HighlightTag {\n     fn as_str(self) -> &'static str {\n         match self {\n+            HighlightTag::Attribute => \"attribute\",\n+            HighlightTag::BuiltinType => \"builtin_type\",\n+            HighlightTag::ByteLiteral => \"byte_literal\",\n+            HighlightTag::CharLiteral => \"char_literal\",\n+            HighlightTag::Comment => \"comment\",\n+            HighlightTag::Constant => \"constant\",\n+            HighlightTag::Enum => \"enum\",\n+            HighlightTag::EnumVariant => \"enum_variant\",\n             HighlightTag::Field => \"field\",\n             HighlightTag::Function => \"function\",\n-            HighlightTag::Module => \"module\",\n-            HighlightTag::Constant => \"constant\",\n-            HighlightTag::Macro => \"macro\",\n-            HighlightTag::Variable => \"variable\",\n-            HighlightTag::Type => \"type\",\n-            HighlightTag::TypeSelf => \"type.self\",\n-            HighlightTag::TypeParam => \"type.param\",\n-            HighlightTag::TypeLifetime => \"type.lifetime\",\n-            HighlightTag::LiteralByte => \"literal.byte\",\n-            HighlightTag::LiteralNumeric => \"literal.numeric\",\n-            HighlightTag::LiteralChar => \"literal.char\",\n-            HighlightTag::Comment => \"comment\",\n-            HighlightTag::LiteralString => \"string\",\n-            HighlightTag::Attribute => \"attribute\",\n             HighlightTag::Keyword => \"keyword\",\n+            HighlightTag::Lifetime => \"lifetime\",\n+            HighlightTag::Macro => \"macro\",\n+            HighlightTag::Module => \"module\",\n+            HighlightTag::NumericLiteral => \"numeric_literal\",\n+            HighlightTag::SelfType => \"self_type\",\n+            HighlightTag::Static => \"static\",\n+            HighlightTag::StringLiteral => \"string_literal\",\n+            HighlightTag::Struct => \"struct\",\n+            HighlightTag::Trait => \"trait\",\n+            HighlightTag::TypeAlias => \"type_alias\",\n+            HighlightTag::TypeParam => \"type_param\",\n+            HighlightTag::Union => \"union\",\n+            HighlightTag::Local => \"variable\",\n         }\n     }\n }\n@@ -78,19 +90,15 @@ impl fmt::Display for HighlightTag {\n }\n \n impl HighlightModifier {\n-    const ALL: &'static [HighlightModifier] = &[\n-        HighlightModifier::Mutable,\n-        HighlightModifier::Unsafe,\n-        HighlightModifier::Control,\n-        HighlightModifier::Builtin,\n-    ];\n+    const ALL: &'static [HighlightModifier] =\n+        &[HighlightModifier::Mutable, HighlightModifier::Unsafe, HighlightModifier::Control];\n \n     fn as_str(self) -> &'static str {\n         match self {\n+            HighlightModifier::Control => \"control\",\n+            HighlightModifier::Definition => \"declaration\",\n             HighlightModifier::Mutable => \"mutable\",\n             HighlightModifier::Unsafe => \"unsafe\",\n-            HighlightModifier::Control => \"control\",\n-            HighlightModifier::Builtin => \"builtin\",\n         }\n     }\n "}, {"sha": "2d90a072f298ddfb9212fae8be4df349ea474efd", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -26,7 +26,7 @@ macro_rules! def_fn {\n     ($($tt:tt)*) => {$($tt)*}\n }\n \n-def_fn!{\n+def_fn! {\n     fn bar() -> u32 {\n         100\n     }"}, {"sha": "ff156307a55b4d6aacb6a739b648a1114683b020", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -20,11 +20,11 @@ use ra_vfs::LineEndings;\n \n use crate::{\n     req,\n-    semantic_tokens::{self, ModifierSet, BUILTIN, CONSTANT, CONTROL, MUTABLE, UNSAFE},\n+    semantic_tokens::{self, ModifierSet, CONSTANT, CONTROL, MUTABLE, UNSAFE},\n     world::WorldSnapshot,\n     Result,\n };\n-use semantic_tokens::ATTRIBUTE;\n+use semantic_tokens::{ATTRIBUTE, BUILTIN_TYPE, ENUM_MEMBER, LIFETIME, TYPE_ALIAS, UNION};\n \n pub trait Conv {\n     type Output;\n@@ -316,41 +316,43 @@ impl Conv for Highlight {\n     fn conv(self) -> Self::Output {\n         let mut mods = ModifierSet::default();\n         let type_ = match self.tag {\n+            HighlightTag::Struct => SemanticTokenType::STRUCT,\n+            HighlightTag::Enum => SemanticTokenType::ENUM,\n+            HighlightTag::Union => UNION,\n+            HighlightTag::TypeAlias => TYPE_ALIAS,\n+            HighlightTag::Trait => SemanticTokenType::INTERFACE,\n+            HighlightTag::BuiltinType => BUILTIN_TYPE,\n+            HighlightTag::SelfType => SemanticTokenType::TYPE,\n             HighlightTag::Field => SemanticTokenType::MEMBER,\n             HighlightTag::Function => SemanticTokenType::FUNCTION,\n             HighlightTag::Module => SemanticTokenType::NAMESPACE,\n             HighlightTag::Constant => {\n+                mods |= CONSTANT;\n                 mods |= SemanticTokenModifier::STATIC;\n-                mods |= SemanticTokenModifier::READONLY;\n-                CONSTANT\n+                SemanticTokenType::VARIABLE\n             }\n-            HighlightTag::Macro => SemanticTokenType::MACRO,\n-            HighlightTag::Variable => SemanticTokenType::VARIABLE,\n-            HighlightTag::Type => SemanticTokenType::TYPE,\n-            HighlightTag::TypeSelf => {\n-                mods |= SemanticTokenModifier::REFERENCE;\n-                SemanticTokenType::TYPE\n+            HighlightTag::Static => {\n+                mods |= SemanticTokenModifier::STATIC;\n+                SemanticTokenType::VARIABLE\n             }\n+            HighlightTag::EnumVariant => ENUM_MEMBER,\n+            HighlightTag::Macro => SemanticTokenType::MACRO,\n+            HighlightTag::Local => SemanticTokenType::VARIABLE,\n             HighlightTag::TypeParam => SemanticTokenType::TYPE_PARAMETER,\n-            HighlightTag::TypeLifetime => {\n-                mods |= SemanticTokenModifier::REFERENCE;\n-                SemanticTokenType::LABEL\n-            }\n-            HighlightTag::LiteralByte => SemanticTokenType::NUMBER,\n-            HighlightTag::LiteralNumeric => SemanticTokenType::NUMBER,\n-            HighlightTag::LiteralChar => SemanticTokenType::NUMBER,\n+            HighlightTag::Lifetime => LIFETIME,\n+            HighlightTag::ByteLiteral | HighlightTag::NumericLiteral => SemanticTokenType::NUMBER,\n+            HighlightTag::CharLiteral | HighlightTag::StringLiteral => SemanticTokenType::STRING,\n             HighlightTag::Comment => SemanticTokenType::COMMENT,\n-            HighlightTag::LiteralString => SemanticTokenType::STRING,\n             HighlightTag::Attribute => ATTRIBUTE,\n             HighlightTag::Keyword => SemanticTokenType::KEYWORD,\n         };\n \n         for modifier in self.modifiers.iter() {\n             let modifier = match modifier {\n+                HighlightModifier::Definition => SemanticTokenModifier::DECLARATION,\n+                HighlightModifier::Control => CONTROL,\n                 HighlightModifier::Mutable => MUTABLE,\n                 HighlightModifier::Unsafe => UNSAFE,\n-                HighlightModifier::Control => CONTROL,\n-                HighlightModifier::Builtin => BUILTIN,\n             };\n             mods |= modifier;\n         }"}, {"sha": "1b146e4d87e8647ee6adfeef175588160bcb6293", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -5,12 +5,16 @@ use std::ops;\n use lsp_types::{Range, SemanticToken, SemanticTokenModifier, SemanticTokenType};\n \n pub(crate) const ATTRIBUTE: SemanticTokenType = SemanticTokenType::new(\"attribute\");\n-pub(crate) const CONSTANT: SemanticTokenType = SemanticTokenType::new(\"constant\");\n+pub(crate) const BUILTIN_TYPE: SemanticTokenType = SemanticTokenType::new(\"builtinType\");\n+pub(crate) const ENUM_MEMBER: SemanticTokenType = SemanticTokenType::new(\"enumMember\");\n+pub(crate) const LIFETIME: SemanticTokenType = SemanticTokenType::new(\"lifetime\");\n+pub(crate) const TYPE_ALIAS: SemanticTokenType = SemanticTokenType::new(\"typeAlias\");\n+pub(crate) const UNION: SemanticTokenType = SemanticTokenType::new(\"union\");\n \n+pub(crate) const CONSTANT: SemanticTokenModifier = SemanticTokenModifier::new(\"constant\");\n+pub(crate) const CONTROL: SemanticTokenModifier = SemanticTokenModifier::new(\"control\");\n pub(crate) const MUTABLE: SemanticTokenModifier = SemanticTokenModifier::new(\"mutable\");\n pub(crate) const UNSAFE: SemanticTokenModifier = SemanticTokenModifier::new(\"unsafe\");\n-pub(crate) const CONTROL: SemanticTokenModifier = SemanticTokenModifier::new(\"control\");\n-pub(crate) const BUILTIN: SemanticTokenModifier = SemanticTokenModifier::new(\"builtin\");\n \n pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n     SemanticTokenType::COMMENT,\n@@ -34,7 +38,11 @@ pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n     SemanticTokenType::PARAMETER,\n     SemanticTokenType::LABEL,\n     ATTRIBUTE,\n-    CONSTANT,\n+    BUILTIN_TYPE,\n+    ENUM_MEMBER,\n+    LIFETIME,\n+    TYPE_ALIAS,\n+    UNION,\n ];\n \n pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n@@ -48,10 +56,10 @@ pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n     SemanticTokenModifier::ASYNC,\n     SemanticTokenModifier::VOLATILE,\n     SemanticTokenModifier::READONLY,\n+    CONSTANT,\n     MUTABLE,\n     UNSAFE,\n     CONTROL,\n-    BUILTIN,\n ];\n \n #[derive(Default)]"}, {"sha": "b013c3f4ae3f6120d5180c501696312b3cbab83b", "filename": "editors/code/package.json", "status": "modified", "additions": 64, "deletions": 20, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2995fd2c87bba98d4cb7957a182a58bee68d86ba/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/2995fd2c87bba98d4cb7957a182a58bee68d86ba/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=2995fd2c87bba98d4cb7957a182a58bee68d86ba", "patch": "@@ -400,24 +400,42 @@\n         ],\n         \"semanticTokenTypes\": [\n             {\n-                \"id\": \"attribute\"\n+                \"id\": \"attribute\",\n+                \"description\": \"Style for attributes\"\n             },\n             {\n-                \"id\": \"constant\"\n+                \"id\": \"builtinType\",\n+                \"description\": \"Style for builtin types\"\n+            },\n+            {\n+                \"id\": \"lifetime\",\n+                \"description\": \"Style for lifetimes\"\n+            },\n+            {\n+                \"id\": \"typeAlias\",\n+                \"description\": \"Style for type aliases\"\n+            },\n+            {\n+                \"id\": \"union\",\n+                \"description\": \"Style for C-style untagged unions\"\n             }\n         ],\n         \"semanticTokenModifiers\": [\n             {\n-                \"id\": \"mutable\"\n+                \"id\": \"constant\",\n+                \"description\": \"Style for compile-time constants\"\n             },\n             {\n-                \"id\": \"unsafe\"\n+                \"id\": \"control\",\n+                \"description\": \"Style for control flow keywords\"\n             },\n             {\n-                \"id\": \"control\"\n+                \"id\": \"mutable\",\n+                \"description\": \"Style for mutable bindings\"\n             },\n             {\n-                \"id\": \"builtin\"\n+                \"id\": \"unsafe\",\n+                \"description\": \"Style for unsafe operations\"\n             }\n         ],\n         \"semanticTokenStyleDefaults\": [\n@@ -428,21 +446,29 @@\n                 ]\n             },\n             {\n-                \"selector\": \"*.mutable\",\n-                \"light\": {\n-                    \"fontStyle\": \"underline\"\n-                },\n-                \"dark\": {\n-                    \"fontStyle\": \"underline\"\n-                },\n-                \"highContrast\": {\n-                    \"fontStyle\": \"underline\"\n-                }\n+                \"selector\": \"builtinType\",\n+                \"scope\": [\n+                    \"support.type.primitive\"\n+                ]\n             },\n             {\n-                \"selector\": \"constant\",\n+                \"selector\": \"lifetime\",\n                 \"scope\": [\n-                    \"entity.name.constant\"\n+                    \"entity.name.lifetime.rust\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"typeAlias\",\n+                \"scope\": [\n+                    \"entity.name.type\",\n+                    \"entity.name.typeAlias\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"union\",\n+                \"scope\": [\n+                    \"entity.name.type\",\n+                    \"entity.name.union\"\n                 ]\n             },\n             {\n@@ -452,10 +478,28 @@\n                 ]\n             },\n             {\n-                \"selector\": \"type.builtin\",\n+                \"selector\": \"keyword.control\",\n                 \"scope\": [\n-                    \"support.type.builtin\"\n+                    \"keyword.control\"\n                 ]\n+            },\n+            {\n+                \"selector\": \"variable.constant\",\n+                \"scope\": [\n+                    \"entity.name.constant\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"*.mutable\",\n+                \"light\": {\n+                    \"fontStyle\": \"underline\"\n+                },\n+                \"dark\": {\n+                    \"fontStyle\": \"underline\"\n+                },\n+                \"highContrast\": {\n+                    \"fontStyle\": \"underline\"\n+                }\n             }\n         ]\n     }"}]}