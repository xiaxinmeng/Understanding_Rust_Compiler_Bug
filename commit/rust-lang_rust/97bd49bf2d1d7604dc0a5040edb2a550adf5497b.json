{"sha": "97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "node_id": "C_kwDOAAsO6NoAKDk3YmQ0OWJmMmQxZDc2MDRkYzBhNTA0MGVkYjJhNTUwYWRmNTQ5N2I", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-14T20:57:57Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-14T20:57:57Z"}, "message": "Clarify `[T]::select_nth_unstable*` return values\n\nIn cases where the nth element is not unique within the slice, it is not\ncorrect to say that the values in the returned triplet include ones for\n\"all elements\" less/greater than that at the given index: indeed one (or\nmore) such values would then laso contain values equal to that at the\ngiven index.\n\nThe text proposed here clarifies exactly what is returned, but in so\ndoing it is also documenting an implementation detail that previously\nwasn't detailed: namely that the return slices are slices into the\nreordered slice.  I don't think this can be contentious, because the\nlifetimes of those returned slices are bound to that of the original\n(now reordered) slice\u2014so there really isn't any other reasonable\nimplementation that could have this behaviour; but nevertheless it's\nprobably best if @rust-lang/libs-api give it a nod?\n\nFixes #97982\nr? m-ou-se\n\n@rustbot label +A-docs C-bug +T-libs-api", "tree": {"sha": "13e19fc76effc487735f8d537b44b9ec341d8599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e19fc76effc487735f8d537b44b9ec341d8599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmKo9lYACgkQB8rDzKfg\nZD+heQ/+JcDhAG0z58ARULYeypZMow5di4dsg2mo4lOmGnymqVlzvXVcWrAIcrob\n7XIWcaP0Eolvc8njBKnh1id4TPM8/CAIJ3BrN/wH6c70oTU72FeElWtBR8TpQXzz\n/67kqF4PkslvhWGa91TqptRoMN2EPlcBKiNEeb1CHh3d1AE5dXztK/YW2cSXe7pS\nBZZ2U+kYk52FbUqmT4rpDG45lbSjo9v5MIku00sjZze0+JTERhg+1DW+7alyDCqY\nQkmJ5Avm9XDRdHDjuJXhHD16qcEX291csLLYvlf5ONAfewx1Cd77o77CqexSsyDG\n1PyfGChvdRUpvc3fdJ6y9/sF9aPzJ0BDippftZRh56xaWh6TNGENmrCmaBO14pA5\nnT3/mkKY0oToLZAsMUCZHqVuoqzX9BiP8sZCCD1v5DO3TmMvN+FcwBcnh+Fapj8J\noZff7K3rAqH0reL1y3GPRZG/Ep0RuA7oVDyuLnQWu2VmE8mgI3im9FBjPkv8vXGX\nlhnM/+luUg7n/OPltmxx3oq0RxBjm8jgEUCjShCiPe8Re4KVMgzw53lGos5WL/Ch\nn4NuOymv+/iVtzcDuwx8ZmYToyTiu8I0k64eTdJnvyhlbfB63eSj9gTNira4aMbc\npl0wU0HQZq6rqsuXk4iyfTLvWeL37vi/mREE0mMhSYiH1RXwznQ=\n=kgbS\n-----END PGP SIGNATURE-----", "payload": "tree 13e19fc76effc487735f8d537b44b9ec341d8599\nparent 1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966\nauthor Alan Egerton <eggyal@gmail.com> 1655240277 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1655240277 +0100\n\nClarify `[T]::select_nth_unstable*` return values\n\nIn cases where the nth element is not unique within the slice, it is not\ncorrect to say that the values in the returned triplet include ones for\n\"all elements\" less/greater than that at the given index: indeed one (or\nmore) such values would then laso contain values equal to that at the\ngiven index.\n\nThe text proposed here clarifies exactly what is returned, but in so\ndoing it is also documenting an implementation detail that previously\nwasn't detailed: namely that the return slices are slices into the\nreordered slice.  I don't think this can be contentious, because the\nlifetimes of those returned slices are bound to that of the original\n(now reordered) slice\u2014so there really isn't any other reasonable\nimplementation that could have this behaviour; but nevertheless it's\nprobably best if @rust-lang/libs-api give it a nod?\n\nFixes #97982\nr? m-ou-se\n\n@rustbot label +A-docs C-bug +T-libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "html_url": "https://github.com/rust-lang/rust/commit/97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97bd49bf2d1d7604dc0a5040edb2a550adf5497b/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966", "html_url": "https://github.com/rust-lang/rust/commit/1f34da9ec8a85b6f86c5fa1c121ab6f88f2f4966"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "409918952237e57058482869e6464e29398d0b3f", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/97bd49bf2d1d7604dc0a5040edb2a550adf5497b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97bd49bf2d1d7604dc0a5040edb2a550adf5497b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=97bd49bf2d1d7604dc0a5040edb2a550adf5497b", "patch": "@@ -2628,9 +2628,10 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n     /// (i.e. does not allocate), and *O*(*n*) worst-case. This function is also/ known as \"kth\n-    /// element\" in other libraries. It returns a triplet of the following values: all elements less\n-    /// than the one at the given index, the value at the given index, and all elements greater than\n-    /// the one at the given index.\n+    /// element\" in other libraries. It returns a triplet of the following from the reordered slice:\n+    /// the subslice prior to `index`, the element at `index`, and the subslice after `index`;\n+    /// accordingly, the values in those two subslices will respectively all be less-than-or-equal-to\n+    /// and greater-than-or-equal-to the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///\n@@ -2675,10 +2676,11 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n     /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following\n-    /// values: all elements less than the one at the given index, the value at the given index,\n-    /// and all elements greater than the one at the given index, using the provided comparator\n-    /// function.\n+    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// the slice reordered according to the provided comparator function: the subslice prior to\n+    /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n+    /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n+    /// the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///\n@@ -2727,10 +2729,11 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n     /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following\n-    /// values: all elements less than the one at the given index, the value at the given index, and\n-    /// all elements greater than the one at the given index, using the provided key extraction\n-    /// function.\n+    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// the slice reordered according to the provided key extraction function: the subslice prior to\n+    /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n+    /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n+    /// the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///"}]}