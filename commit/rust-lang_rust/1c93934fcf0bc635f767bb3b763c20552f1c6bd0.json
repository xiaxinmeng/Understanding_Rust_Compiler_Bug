{"sha": "1c93934fcf0bc635f767bb3b763c20552f1c6bd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOTM5MzRmY2YwYmM2MzVmNzY3YmIzYjc2M2MyMDU1MmYxYzZiZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-28T03:37:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-28T03:37:20Z"}, "message": "Auto merge of #22669 - dotdash:fast_slice_iter, r=huonw\n\nThis adds the assume() calls back that got lost when rebasing #21886.", "tree": {"sha": "2d0a310a6310a74aaf9c6f430b931e17514e2708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0a310a6310a74aaf9c6f430b931e17514e2708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c93934fcf0bc635f767bb3b763c20552f1c6bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c93934fcf0bc635f767bb3b763c20552f1c6bd0", "html_url": "https://github.com/rust-lang/rust/commit/1c93934fcf0bc635f767bb3b763c20552f1c6bd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c93934fcf0bc635f767bb3b763c20552f1c6bd0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e233987ce1de88a48db2ce612019ba644d3cf5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e233987ce1de88a48db2ce612019ba644d3cf5dd", "html_url": "https://github.com/rust-lang/rust/commit/e233987ce1de88a48db2ce612019ba644d3cf5dd"}, {"sha": "e4573286a685e478fc14b4a4399c092e0bc553c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4573286a685e478fc14b4a4399c092e0bc553c7", "html_url": "https://github.com/rust-lang/rust/commit/e4573286a685e478fc14b4a4399c092e0bc553c7"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "805e4623396b849b22041fc1281d42b3406f7067", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c93934fcf0bc635f767bb3b763c20552f1c6bd0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c93934fcf0bc635f767bb3b763c20552f1c6bd0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1c93934fcf0bc635f767bb3b763c20552f1c6bd0", "patch": "@@ -433,8 +433,10 @@ impl<T> Vec<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         unsafe {\n+            let ptr = *self.ptr;\n+            assume(!ptr.is_null());\n             mem::transmute(RawSlice {\n-                data: *self.ptr,\n+                data: ptr,\n                 len: self.len,\n             })\n         }\n@@ -458,6 +460,7 @@ impl<T> Vec<T> {\n     pub fn into_iter(self) -> IntoIter<T> {\n         unsafe {\n             let ptr = *self.ptr;\n+            assume(!ptr.is_null());\n             let cap = self.cap;\n             let begin = ptr as *const T;\n             let end = if mem::size_of::<T>() == 0 {"}, {"sha": "5b78da34eddde0e7dd363383b3fd0d4b719c5640", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c93934fcf0bc635f767bb3b763c20552f1c6bd0/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c93934fcf0bc635f767bb3b763c20552f1c6bd0/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1c93934fcf0bc635f767bb3b763c20552f1c6bd0", "patch": "@@ -40,6 +40,7 @@ use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord};\n use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n+use intrinsics::assume;\n use iter::*;\n use ops::{FnMut, self, Index};\n use ops::RangeFull;\n@@ -137,6 +138,7 @@ impl<T> SliceExt for [T] {\n     fn iter<'a>(&'a self) -> Iter<'a, T> {\n         unsafe {\n             let p = self.as_ptr();\n+            assume(!p.is_null());\n             if mem::size_of::<T>() == 0 {\n                 Iter {ptr: p,\n                       end: (p as usize + self.len()) as *const T,\n@@ -276,6 +278,7 @@ impl<T> SliceExt for [T] {\n     fn iter_mut<'a>(&'a mut self) -> IterMut<'a, T> {\n         unsafe {\n             let p = self.as_mut_ptr();\n+            assume(!p.is_null());\n             if mem::size_of::<T>() == 0 {\n                 IterMut {ptr: p,\n                          end: (p as usize + self.len()) as *mut T,"}]}