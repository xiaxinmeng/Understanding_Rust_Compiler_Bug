{"sha": "2fb66cd1d3963dd66c536865a8413a677f6aa470", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjY2Y2QxZDM5NjNkZDY2YzUzNjg2NWE4NDEzYTY3N2Y2YWE0NzA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-11T13:41:38Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-12T05:16:06Z"}, "message": "Add trailing_semicolon config option\n\ntrailing_semicolon controls whether to add a trailing semicolon after break,\ncontinue and return.", "tree": {"sha": "f0268619d6a2c60ab953a127c4d7bc89c0d4b8bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0268619d6a2c60ab953a127c4d7bc89c0d4b8bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb66cd1d3963dd66c536865a8413a677f6aa470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb66cd1d3963dd66c536865a8413a677f6aa470", "html_url": "https://github.com/rust-lang/rust/commit/2fb66cd1d3963dd66c536865a8413a677f6aa470", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb66cd1d3963dd66c536865a8413a677f6aa470/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2725636f584e8ad47ce034b4bdef0a6c2276a217", "url": "https://api.github.com/repos/rust-lang/rust/commits/2725636f584e8ad47ce034b4bdef0a6c2276a217", "html_url": "https://github.com/rust-lang/rust/commit/2725636f584e8ad47ce034b4bdef0a6c2276a217"}], "stats": {"total": 101, "additions": 95, "deletions": 6}, "files": [{"sha": "2e1cdc9dccfe24099f7bf979d55ba1efa81e561a", "filename": "Configurations.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -1698,6 +1698,27 @@ let Lorem {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma).\n \n+## `trailing_semicolon`\n+\n+Add trailing semicolon after break, continue and return\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+\n+#### `true`:\n+```rust\n+fn foo() -> usize {\n+    return 0;\n+}\n+```\n+\n+#### `false`:\n+```rust\n+fn foo() -> usize {\n+    return 0\n+}\n+```\n+\n ## `type_punctuation_density`\n \n Determines if `+` or `=` are wrapped in spaces in the punctuation of types"}, {"sha": "1965675a83eeaef3c5f51f18e391f81fac17542b", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -519,6 +519,7 @@ create_config! {\n     impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";\n     trailing_comma: SeparatorTactic, SeparatorTactic::Vertical,\n         \"How to handle trailing commas for lists\";\n+    trailing_semicolon: bool, true, \"Add trailing semicolon after break, continue and return\";\n     fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";\n     fn_return_indent: ReturnIndent, ReturnIndent::WithArgs,"}, {"sha": "e11625218597fff12cff508f1a61b72395e7fc45", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -906,7 +906,11 @@ impl Rewrite for ast::Stmt {\n         let result = match self.node {\n             ast::StmtKind::Local(ref local) => local.rewrite(context, shape),\n             ast::StmtKind::Expr(ref ex) | ast::StmtKind::Semi(ref ex) => {\n-                let suffix = if semicolon_for_stmt(self) { \";\" } else { \"\" };\n+                let suffix = if semicolon_for_stmt(context, self) {\n+                    \";\"\n+                } else {\n+                    \"\"\n+                };\n \n                 format_expr(\n                     ex,"}, {"sha": "2f3018a255243d59e6b6e4841e3378f28f8c54a5", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -352,7 +352,11 @@ impl<'a> FmtVisitor<'a> {\n                 if let Some(ref stmt) = block.stmts.first() {\n                     match stmt_expr(stmt) {\n                         Some(e) => {\n-                            let suffix = if semicolon_for_expr(e) { \";\" } else { \"\" };\n+                            let suffix = if semicolon_for_expr(&self.get_context(), e) {\n+                                \";\"\n+                            } else {\n+                                \"\"\n+                            };\n \n                             format_expr(\n                                 &e,"}, {"sha": "bdf5c2e4b5e4a41148e3f06f413ff3f8fba04792", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -156,21 +156,26 @@ pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n }\n \n #[inline]\n-pub fn semicolon_for_expr(expr: &ast::Expr) -> bool {\n+pub fn semicolon_for_expr(context: &RewriteContext, expr: &ast::Expr) -> bool {\n     match expr.node {\n-        ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => true,\n+        ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => {\n+            context.config.trailing_semicolon()\n+        }\n         _ => false,\n     }\n }\n \n #[inline]\n-pub fn semicolon_for_stmt(stmt: &ast::Stmt) -> bool {\n+pub fn semicolon_for_stmt(context: &RewriteContext, stmt: &ast::Stmt) -> bool {\n     match stmt.node {\n         ast::StmtKind::Semi(ref expr) => match expr.node {\n             ast::ExprKind::While(..) |\n             ast::ExprKind::WhileLet(..) |\n             ast::ExprKind::Loop(..) |\n             ast::ExprKind::ForLoop(..) => false,\n+            ast::ExprKind::Break(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Ret(..) => {\n+                context.config.trailing_semicolon()\n+            }\n             _ => true,\n         },\n         ast::StmtKind::Expr(..) => false,"}, {"sha": "3bb533a00fd9c72536557d7a1eaf6c61be007943", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -144,7 +144,7 @@ impl<'a> FmtVisitor<'a> {\n \n         if !b.stmts.is_empty() {\n             if let Some(expr) = utils::stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n-                if utils::semicolon_for_expr(expr) {\n+                if utils::semicolon_for_expr(&self.get_context(), expr) {\n                     self.buffer.push_str(\";\");\n                 }\n             }"}, {"sha": "9fa746e9c0ffb0a4035321942af5313946e96b94", "filename": "tests/target/configs-trailing_semicolon-false.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/tests%2Ftarget%2Fconfigs-trailing_semicolon-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/tests%2Ftarget%2Fconfigs-trailing_semicolon-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-trailing_semicolon-false.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-trailing_semicolon: false\n+\n+#![feature(loop_break_value)]\n+\n+fn main() {\n+    'a: loop {\n+        break 'a\n+    }\n+\n+    let mut done = false;\n+    'b: while !done {\n+        done = true;\n+        continue 'b\n+    }\n+\n+    let x = loop {\n+        break 5\n+    };\n+\n+    let x = 'c: loop {\n+        break 'c 5\n+    };\n+}\n+\n+fn foo() -> usize {\n+    return 0\n+}"}, {"sha": "61b6843d677cb5b9b0bdd4a99932cd9a943beeee", "filename": "tests/target/configs-trailing_semicolon-true.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2fb66cd1d3963dd66c536865a8413a677f6aa470/tests%2Ftarget%2Fconfigs-trailing_semicolon-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb66cd1d3963dd66c536865a8413a677f6aa470/tests%2Ftarget%2Fconfigs-trailing_semicolon-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-trailing_semicolon-true.rs?ref=2fb66cd1d3963dd66c536865a8413a677f6aa470", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-trailing_semicolon: true\n+\n+#![feature(loop_break_value)]\n+\n+fn main() {\n+    'a: loop {\n+        break 'a;\n+    }\n+\n+    let mut done = false;\n+    'b: while !done {\n+        done = true;\n+        continue 'b;\n+    }\n+\n+    let x = loop {\n+        break 5;\n+    };\n+\n+    let x = 'c: loop {\n+        break 'c 5;\n+    };\n+}\n+\n+fn foo() -> usize {\n+    return 0;\n+}"}]}