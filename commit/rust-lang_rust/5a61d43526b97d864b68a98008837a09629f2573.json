{"sha": "5a61d43526b97d864b68a98008837a09629f2573", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjFkNDM1MjZiOTdkODY0YjY4YTk4MDA4ODM3YTA5NjI5ZjI1NzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-24T04:18:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-24T04:18:18Z"}, "message": "Rollup merge of #24739 - nrc:span-item, r=huonw\n\n (And other kinds of items).\n\nThis brings trait/impl items in line with top-level items in this respect. It means we don't get the attributes when showing error messages for methods, etc. (a good thing, I think). Since attributes have spans it is still easy to create a span for the item + all attributes.", "tree": {"sha": "fcc399d30549b437bd68aa477c3004bc55f1cb29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcc399d30549b437bd68aa477c3004bc55f1cb29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a61d43526b97d864b68a98008837a09629f2573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a61d43526b97d864b68a98008837a09629f2573", "html_url": "https://github.com/rust-lang/rust/commit/5a61d43526b97d864b68a98008837a09629f2573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a61d43526b97d864b68a98008837a09629f2573/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda00831e39806a4d0ff1e1b2fcaf7fda9d2cfd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda00831e39806a4d0ff1e1b2fcaf7fda9d2cfd2", "html_url": "https://github.com/rust-lang/rust/commit/cda00831e39806a4d0ff1e1b2fcaf7fda9d2cfd2"}, {"sha": "17934e5c29509fe72dbf6228033ab632919dba95", "url": "https://api.github.com/repos/rust-lang/rust/commits/17934e5c29509fe72dbf6228033ab632919dba95", "html_url": "https://github.com/rust-lang/rust/commit/17934e5c29509fe72dbf6228033ab632919dba95"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "68006a8979a6468c702fe7d0497a869d830c9e52", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a61d43526b97d864b68a98008837a09629f2573/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a61d43526b97d864b68a98008837a09629f2573/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5a61d43526b97d864b68a98008837a09629f2573", "patch": "@@ -1151,8 +1151,8 @@ impl<'a> Parser<'a> {\n             &token::CloseDelim(token::Brace),\n             seq_sep_none(),\n             |p| {\n-            let lo = p.span.lo;\n             let mut attrs = p.parse_outer_attributes();\n+            let lo = p.span.lo;\n \n             let (name, node) = if try!(p.eat_keyword(keywords::Type)) {\n                 let TyParam {ident, bounds, default, ..} = try!(p.parse_ty_param());\n@@ -3409,8 +3409,8 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let lo = self.span.lo;\n         let attrs = self.parse_outer_attributes();\n+        let lo = self.span.lo;\n \n         Ok(Some(if self.check_keyword(keywords::Let) {\n             check_expected_item(self, &attrs);\n@@ -4304,8 +4304,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse an impl item.\n     pub fn parse_impl_item(&mut self) -> PResult<P<ImplItem>> {\n-        let lo = self.span.lo;\n         let mut attrs = self.parse_outer_attributes();\n+        let lo = self.span.lo;\n         let vis = try!(self.parse_visibility());\n         let (name, node) = if try!(self.eat_keyword(keywords::Type)) {\n             let name = try!(self.parse_ident());\n@@ -5380,9 +5380,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a foreign item.\n     fn parse_foreign_item(&mut self) -> PResult<Option<P<ForeignItem>>> {\n-        let lo = self.span.lo;\n-\n         let attrs = self.parse_outer_attributes();\n+        let lo = self.span.lo;\n         let visibility = try!(self.parse_visibility());\n \n         if self.check_keyword(keywords::Static) {"}]}