{"sha": "0126af314463a84f8e3f4c0247e940db71b53fa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjZhZjMxNDQ2M2E4NGY4ZTNmNGMwMjQ3ZTk0MGRiNzFiNTNmYTQ=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-02-17T05:55:36Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-02-17T10:25:26Z"}, "message": "libsyntax: Remove last use of structural records in pipes compiler.", "tree": {"sha": "48b4c161df98cbdda9d58301f88ebed7504dcba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b4c161df98cbdda9d58301f88ebed7504dcba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0126af314463a84f8e3f4c0247e940db71b53fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0126af314463a84f8e3f4c0247e940db71b53fa4", "html_url": "https://github.com/rust-lang/rust/commit/0126af314463a84f8e3f4c0247e940db71b53fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0126af314463a84f8e3f4c0247e940db71b53fa4/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6945f2a45d56ef692cd8f2955dcef4e4c10d50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6945f2a45d56ef692cd8f2955dcef4e4c10d50a", "html_url": "https://github.com/rust-lang/rust/commit/a6945f2a45d56ef692cd8f2955dcef4e4c10d50a"}], "stats": {"total": 125, "additions": 69, "deletions": 56}, "files": [{"sha": "a8bcb9dbfc4cd2e1f6c56845308b7a5a719ef54d", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0126af314463a84f8e3f4c0247e940db71b53fa4/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0126af314463a84f8e3f4c0247e940db71b53fa4/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=0126af314463a84f8e3f4c0247e940db71b53fa4", "patch": "@@ -88,6 +88,12 @@ pub trait ext_ctxt_ast_builder {\n                       +ty_params: ~[ast::ty_param]) -> @ast::item;\n     fn item_enum(name: ident, span: span,\n                  +enum_definition: ast::enum_def) -> @ast::item;\n+    fn item_struct_poly(name: ident, span: span,\n+                        struct_def: ast::struct_def,\n+                        ty_params: ~[ast::ty_param]) -> @ast::item;\n+    fn item_struct(name: ident, span: span,\n+                   struct_def: ast::struct_def) -> @ast::item;\n+    fn struct_expr(path: @ast::path, fields: ~[ast::field]) -> @ast::expr;\n     fn variant(name: ident, span: span, +tys: ~[@ast::Ty]) -> ast::variant;\n     fn item_mod(name: ident, span: span, +items: ~[@ast::item]) -> @ast::item;\n     fn ty_path_ast_builder(path: @ast::path) -> @ast::Ty;\n@@ -99,9 +105,7 @@ pub trait ext_ctxt_ast_builder {\n     fn ty_vars(+ty_params: ~[ast::ty_param]) -> ~[@ast::Ty];\n     fn ty_vars_global(+ty_params: ~[ast::ty_param]) -> ~[@ast::Ty];\n     fn ty_field_imm(name: ident, ty: @ast::Ty) -> ast::ty_field;\n-    fn ty_rec(+v: ~[ast::ty_field]) -> @ast::Ty;\n     fn field_imm(name: ident, e: @ast::expr) -> ast::field;\n-    fn rec(+v: ~[ast::field]) -> @ast::expr;\n     fn block(+stmts: ~[@ast::stmt], e: @ast::expr) -> ast::blk;\n     fn stmt_let(ident: ident, e: @ast::expr) -> @ast::stmt;\n     fn stmt_expr(e: @ast::expr) -> @ast::stmt;\n@@ -147,15 +151,6 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         }\n     }\n \n-    fn rec(+fields: ~[ast::field]) -> @ast::expr {\n-        @expr {\n-            id: self.next_id(),\n-            callee_id: self.next_id(),\n-            node: ast::expr_rec(fields, None),\n-            span: dummy_sp(),\n-        }\n-    }\n-\n     fn ty_field_imm(name: ident, ty: @ast::Ty) -> ast::ty_field {\n         spanned {\n             node: ast::ty_field_ {\n@@ -166,14 +161,6 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         }\n     }\n \n-    fn ty_rec(+fields: ~[ast::ty_field]) -> @ast::Ty {\n-        @ast::Ty {\n-            id: self.next_id(),\n-            node: ast::ty_rec(fields),\n-            span: dummy_sp(),\n-        }\n-    }\n-\n     fn ty_infer() -> @ast::Ty {\n         @ast::Ty {\n             id: self.next_id(),\n@@ -286,6 +273,26 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         self.item_enum_poly(name, span, enum_definition, ~[])\n     }\n \n+    fn item_struct(name: ident, span: span,\n+                   struct_def: ast::struct_def) -> @ast::item {\n+        self.item_struct_poly(name, span, struct_def, ~[])\n+    }\n+\n+    fn item_struct_poly(name: ident, span: span,\n+                        struct_def: ast::struct_def,\n+                        ty_params: ~[ast::ty_param]) -> @ast::item {\n+        self.item(name, span, ast::item_struct(@struct_def, ty_params))\n+    }\n+\n+    fn struct_expr(path: @ast::path, fields: ~[ast::field]) -> @ast::expr {\n+        @ast::expr {\n+            id: self.next_id(),\n+            callee_id: self.next_id(),\n+            node: ast::expr_struct(path, fields, None),\n+            span: dummy_sp()\n+        }\n+    }\n+\n     fn variant(name: ident,\n                span: span,\n                +tys: ~[@ast::Ty]) -> ast::variant {\n@@ -300,7 +307,8 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n                 kind: ast::tuple_variant_kind(args),\n                 id: self.next_id(),\n                 disr_expr: None,\n-                vis: ast::public},\n+                vis: ast::public\n+            },\n             span: span,\n         }\n     }"}, {"sha": "3eeb7832fdfddcacba6a379179f0ef2eb99f4e9e", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0126af314463a84f8e3f4c0247e940db71b53fa4/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0126af314463a84f8e3f4c0247e940db71b53fa4/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=0126af314463a84f8e3f4c0247e940db71b53fa4", "patch": "@@ -345,7 +345,9 @@ pub impl gen_init for protocol {\n     }\n \n     fn gen_buffer_init(ext_cx: ext_ctxt) -> @ast::expr {\n-        ext_cx.rec(self.states.map_to_vec(|s| {\n+        ext_cx.struct_expr(path(~[ext_cx.ident_of(~\"__Buffer\")],\n+                                dummy_sp()),\n+                      self.states.map_to_vec(|s| {\n             let fty = s.to_ty(ext_cx);\n             ext_cx.field_imm(ext_cx.ident_of(s.name),\n                              quote_expr!(\n@@ -409,13 +411,27 @@ pub impl gen_init for protocol {\n             let ty = s.to_ty(cx);\n             let fty = quote_ty!( ::pipes::Packet<$ty> );\n \n-            cx.ty_field_imm(cx.ident_of(s.name), fty)\n+            @spanned {\n+                node: ast::struct_field_ {\n+                    kind: ast::named_field(\n+                            cx.ident_of(s.name),\n+                            ast::struct_immutable,\n+                            ast::inherited),\n+                    id: cx.next_id(),\n+                    ty: fty\n+                },\n+                span: dummy_sp()\n+            }\n         };\n \n-        cx.item_ty_poly(\n+        cx.item_struct_poly(\n             cx.ident_of(~\"__Buffer\"),\n             dummy_sp(),\n-            cx.ty_rec(fields),\n+            ast::struct_def {\n+                fields: fields,\n+                dtor: None,\n+                ctor_id: None\n+            },\n             cx.strip_bounds(params))\n     }\n "}, {"sha": "a0e0b7f06cfbea0f6edb9e4d86b4bbfdd90cc81f", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0126af314463a84f8e3f4c0247e940db71b53fa4/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0126af314463a84f8e3f4c0247e940db71b53fa4/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=0126af314463a84f8e3f4c0247e940db71b53fa4", "patch": "@@ -19,20 +19,9 @@ use core::cmp;\n use core::dvec::DVec;\n use core::to_str::ToStr;\n \n+#[deriving_eq]\n pub enum direction { send, recv }\n \n-pub impl cmp::Eq for direction {\n-    pure fn eq(&self, other: &direction) -> bool {\n-        match ((*self), (*other)) {\n-            (send, send) => true,\n-            (recv, recv) => true,\n-            (send, _) => false,\n-            (recv, _) => false,\n-        }\n-    }\n-    pure fn ne(&self, other: &direction) -> bool { !(*self).eq(other) }\n-}\n-\n pub impl ToStr for direction {\n     pure fn to_str(&self) -> ~str {\n         match *self {\n@@ -82,44 +71,44 @@ pub impl message {\n     }\n }\n \n-pub enum state {\n-    state_(@{\n-        id: uint,\n-        name: ~str,\n-        ident: ast::ident,\n-        span: span,\n-        dir: direction,\n-        ty_params: ~[ast::ty_param],\n-        messages: DVec<message>,\n-        proto: protocol,\n-    }),\n+pub type state = @state_;\n+\n+pub struct state_ {\n+    id: uint,\n+    name: ~str,\n+    ident: ast::ident,\n+    span: span,\n+    dir: direction,\n+    ty_params: ~[ast::ty_param],\n+    messages: DVec<message>,\n+    proto: protocol\n }\n \n-pub impl state {\n-    fn add_message(name: ~str, span: span,\n+pub impl state_ {\n+    fn add_message(@self, name: ~str, span: span,\n                    +data: ~[@ast::Ty], next: Option<next_state>) {\n         self.messages.push(message(name, span, data, self,\n                                    next));\n     }\n \n-    fn filename() -> ~str {\n-        (*self).proto.filename()\n+    fn filename(&self) -> ~str {\n+        self.proto.filename()\n     }\n \n-    fn data_name() -> ast::ident {\n+    fn data_name(&self) -> ast::ident {\n         self.ident\n     }\n \n     /// Returns the type that is used for the messages.\n-    fn to_ty(cx: ext_ctxt) -> @ast::Ty {\n+    fn to_ty(&self, cx: ext_ctxt) -> @ast::Ty {\n         cx.ty_path_ast_builder\n             (path(~[cx.ident_of(self.name)],self.span).add_tys(\n                 cx.ty_vars(self.ty_params)))\n     }\n \n     /// Iterate over the states that can be reached in one message\n     /// from this state.\n-    fn reachable(f: fn(state) -> bool) {\n+    fn reachable(&self, f: fn(state) -> bool) {\n         for self.messages.each |m| {\n             match *m {\n               message(_, _, _, _, Some(next_state { state: ref id, _ })) => {\n@@ -199,7 +188,7 @@ pub impl protocol {\n                       +ty_params: ~[ast::ty_param]) -> state {\n         let messages = DVec();\n \n-        let state = state_(@{\n+        let state = @state_ {\n             id: self.states.len(),\n             name: name,\n             ident: ident,\n@@ -208,7 +197,7 @@ pub impl protocol {\n             ty_params: ty_params,\n             messages: messages,\n             proto: self\n-        });\n+        };\n \n         self.states.push(state);\n         state"}]}