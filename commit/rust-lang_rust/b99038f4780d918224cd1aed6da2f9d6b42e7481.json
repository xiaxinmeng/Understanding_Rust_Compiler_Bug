{"sha": "b99038f4780d918224cd1aed6da2f9d6b42e7481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OTAzOGY0NzgwZDkxODIyNGNkMWFlZDZkYTJmOWQ2YjQyZTc0ODE=", "commit": {"author": {"name": "ibraheemdev", "email": "ibrah1440@gmail.com", "date": "2021-08-30T20:13:56Z"}, "committer": {"name": "ibraheemdev", "email": "ibrah1440@gmail.com", "date": "2021-08-30T20:13:56Z"}, "message": "use `unwrap_unchecked` where possible", "tree": {"sha": "aa69c738cabbcf95d33f76a0001c3bfb3e3d145e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa69c738cabbcf95d33f76a0001c3bfb3e3d145e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99038f4780d918224cd1aed6da2f9d6b42e7481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99038f4780d918224cd1aed6da2f9d6b42e7481", "html_url": "https://github.com/rust-lang/rust/commit/b99038f4780d918224cd1aed6da2f9d6b42e7481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99038f4780d918224cd1aed6da2f9d6b42e7481/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfa773583bb5123e630668f5bfe466716225546", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfa773583bb5123e630668f5bfe466716225546", "html_url": "https://github.com/rust-lang/rust/commit/6cfa773583bb5123e630668f5bfe466716225546"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "77f09a2377a693eb034174ccbfdb3dd9c44a624e", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99038f4780d918224cd1aed6da2f9d6b42e7481/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038f4780d918224cd1aed6da2f9d6b42e7481/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=b99038f4780d918224cd1aed6da2f9d6b42e7481", "patch": "@@ -300,7 +300,7 @@ impl<T> LinkedList<T> {\n         let tail = self.tail.take();\n         let len = mem::replace(&mut self.len, 0);\n         if let Some(head) = head {\n-            let tail = tail.unwrap_or_else(|| unsafe { core::hint::unreachable_unchecked() });\n+            let tail = unsafe { tail.unwrap_unchecked() };\n             Some((head, tail, len))\n         } else {\n             None"}, {"sha": "70cccd31b92ded435eb886bd9a475bc79b27a1c1", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b99038f4780d918224cd1aed6da2f9d6b42e7481/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038f4780d918224cd1aed6da2f9d6b42e7481/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=b99038f4780d918224cd1aed6da2f9d6b42e7481", "patch": "@@ -459,11 +459,8 @@ where\n     debug_assert!(N <= iter.size_hint().1.unwrap_or(usize::MAX));\n     debug_assert!(N <= iter.size_hint().0);\n \n-    match collect_into_array(iter) {\n-        Some(array) => array,\n-        // SAFETY: covered by the function contract.\n-        None => unsafe { crate::hint::unreachable_unchecked() },\n-    }\n+    // SAFETY: covered by the function contract.\n+    unsafe { collect_into_array(iter).unwrap_unchecked() }\n }\n \n /// Pulls `N` items from `iter` and returns them as an array. If the iterator"}, {"sha": "9d5e03dd0de795eeefe17466421e81b0b203ee72", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b99038f4780d918224cd1aed6da2f9d6b42e7481/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99038f4780d918224cd1aed6da2f9d6b42e7481/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=b99038f4780d918224cd1aed6da2f9d6b42e7481", "patch": "@@ -1198,11 +1198,8 @@ impl<T> Option<T> {\n     pub fn insert(&mut self, value: T) -> &mut T {\n         *self = Some(value);\n \n-        match self {\n-            Some(v) => v,\n-            // SAFETY: the code above just filled the option\n-            None => unsafe { hint::unreachable_unchecked() },\n-        }\n+        // SAFETY: the code above just filled the option\n+        unsafe { self.as_mut().unwrap_unchecked() }\n     }\n \n     /// Inserts `value` into the option if it is [`None`], then"}]}