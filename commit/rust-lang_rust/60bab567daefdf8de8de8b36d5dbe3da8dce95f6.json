{"sha": "60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYmFiNTY3ZGFlZmRmOGRlOGRlOGIzNmQ1ZGJlM2RhOGRjZTk1ZjY=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-27T15:28:58Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:52Z"}, "message": "update docs with new syntax", "tree": {"sha": "3e4c026be88be4d1182b40cb05680f631039716f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4c026be88be4d1182b40cb05680f631039716f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "html_url": "https://github.com/rust-lang/rust/commit/60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60bab567daefdf8de8de8b36d5dbe3da8dce95f6/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64df0b0a89cec5df0eb3a531d23d41840d1d9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64df0b0a89cec5df0eb3a531d23d41840d1d9ee", "html_url": "https://github.com/rust-lang/rust/commit/b64df0b0a89cec5df0eb3a531d23d41840d1d9ee"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "3136770e1e39260942d7db921a68e315b70854d1", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60bab567daefdf8de8de8b36d5dbe3da8dce95f6/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bab567daefdf8de8de8b36d5dbe3da8dce95f6/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "patch": "@@ -655,10 +655,12 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         self.fix_right_edge();\n     }\n \n-    /// Constructs a double-ended iterator over a sub-range of elements in the map, starting\n-    /// at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\n-    /// infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\n-    /// Thus range(Unbounded, Unbounded) will yield the whole collection.\n+    /// Constructs a double-ended iterator over a sub-range of elements in the map.\n+    /// The simplest way is to use the range synax `min..max`, thus `range(..)` will\n+    /// yield the whole collection.\n+    /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n+    /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n+    /// range.\n     ///\n     /// # Examples\n     ///\n@@ -745,10 +747,12 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n     }\n \n-    /// Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\n-    /// at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\n-    /// infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\n-    /// Thus range(Unbounded, Unbounded) will yield the whole collection.\n+    /// Constructs a mutable double-ended iterator over a sub-range of elements in the map.\n+    /// The simplest way is to use the range synax `min..max`, thus `range(..)` will\n+    /// yield the whole collection.\n+    /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n+    /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n+    /// range.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b19633fa7fb05cbb56b0e426a3f4fad6df69f329", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60bab567daefdf8de8de8b36d5dbe3da8dce95f6/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bab567daefdf8de8de8b36d5dbe3da8dce95f6/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=60bab567daefdf8de8de8b36d5dbe3da8dce95f6", "patch": "@@ -207,10 +207,12 @@ impl<T> BTreeSet<T> {\n }\n \n impl<T: Ord> BTreeSet<T> {\n-    /// Constructs a double-ended iterator over a sub-range of elements in the set, starting\n-    /// at min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\n-    /// infinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\n-    /// Thus range(Unbounded, Unbounded) will yield the whole collection.\n+    /// Constructs a double-ended iterator over a sub-range of elements in the set.\n+    /// The simplest way is to use the range synax `min..max`, thus `range(..)` will\n+    /// yield the whole collection.\n+    /// The range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n+    /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n+    /// range.\n     ///\n     /// # Examples\n     ///"}]}