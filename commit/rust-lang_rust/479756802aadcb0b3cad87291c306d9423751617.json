{"sha": "479756802aadcb0b3cad87291c306d9423751617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTc1NjgwMmFhZGNiMGIzY2FkODcyOTFjMzA2ZDk0MjM3NTE2MTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-03-08T08:41:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-08T08:41:38Z"}, "message": "Rollup merge of #58204 - estebank:impl-trait-semi, r=zackmdavis\n\nOn return type `impl Trait` for block with no expr point at last semi\n\nPartial solution, doesn't actually validate that the last statement in the function body can satisfy the trait bound, but it's a good incremental improvement over the status quo.\n\n```\nerror[E0277]: the trait bound `(): Bar` is not satisfied\n  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n   |\nLL | fn foo() -> impl Bar {\n   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\nLL |     5;\n   |      - consider removing this semicolon\n   |\n   = note: the return type of a function must have a statically known size\n```\n\nPartially addresses #54771.", "tree": {"sha": "810ab17bd229b05b5394a466f8d849f053e3e0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/810ab17bd229b05b5394a466f8d849f053e3e0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/479756802aadcb0b3cad87291c306d9423751617", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcgirCCRBK7hj4Ov3rIwAAdHIIAHp4Hn1knur77pnQYbKrCjtJ\nENVQli51QuunviOjJng/Efv1y6ErjftCjKJJM0f91gP7NBaJTkbZqAvDgr+LBFBO\ndem6u97Zg/G8r4aPJWijY/zwPXryl8p5Hn5ZI1ES8PFu4VO/A/Vu7cbzu2NvgFVB\n8PkQt36tyCe8/Dnj4g6i/Vs8hdFhJC8wVBQwQHc1jhT7ShPCT5RimbB7rT0736VM\nTzvVHJg+Wr4jbRbQz1vPKd+l4LpEjnnr6PoxqL88ax32dw3BOKv1+jjOqkzQN+Zl\ng6ERlSc4ogr7xLwBT7hj8Kdg2cdl1uVs8F0U+1pufq+w02IvfYsaDI98/psIg+o=\n=HM4h\n-----END PGP SIGNATURE-----\n", "payload": "tree 810ab17bd229b05b5394a466f8d849f053e3e0b2\nparent 19e39cb9cb2e040f71bffd8a9e07890579ceeae6\nparent e6387b6a75ce37cb5ef8582b8b011737337caf9a\nauthor Pietro Albini <pietro@pietroalbini.org> 1552034498 +0100\ncommitter GitHub <noreply@github.com> 1552034498 +0100\n\nRollup merge of #58204 - estebank:impl-trait-semi, r=zackmdavis\n\nOn return type `impl Trait` for block with no expr point at last semi\n\nPartial solution, doesn't actually validate that the last statement in the function body can satisfy the trait bound, but it's a good incremental improvement over the status quo.\n\n```\nerror[E0277]: the trait bound `(): Bar` is not satisfied\n  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n   |\nLL | fn foo() -> impl Bar {\n   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\nLL |     5;\n   |      - consider removing this semicolon\n   |\n   = note: the return type of a function must have a statically known size\n```\n\nPartially addresses #54771.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/479756802aadcb0b3cad87291c306d9423751617", "html_url": "https://github.com/rust-lang/rust/commit/479756802aadcb0b3cad87291c306d9423751617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/479756802aadcb0b3cad87291c306d9423751617/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e39cb9cb2e040f71bffd8a9e07890579ceeae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e39cb9cb2e040f71bffd8a9e07890579ceeae6", "html_url": "https://github.com/rust-lang/rust/commit/19e39cb9cb2e040f71bffd8a9e07890579ceeae6"}, {"sha": "e6387b6a75ce37cb5ef8582b8b011737337caf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6387b6a75ce37cb5ef8582b8b011737337caf9a", "html_url": "https://github.com/rust-lang/rust/commit/e6387b6a75ce37cb5ef8582b8b011737337caf9a"}], "stats": {"total": 84, "additions": 72, "deletions": 12}, "files": [{"sha": "2f6cbacbd4a9dc480af076181df122d02bdcc61f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/479756802aadcb0b3cad87291c306d9423751617/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479756802aadcb0b3cad87291c306d9423751617/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=479756802aadcb0b3cad87291c306d9423751617", "patch": "@@ -599,11 +599,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn report_selection_error(&self,\n-                                  obligation: &PredicateObligation<'tcx>,\n-                                  error: &SelectionError<'tcx>,\n-                                  fallback_has_occurred: bool)\n-    {\n+    pub fn report_selection_error(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        error: &SelectionError<'tcx>,\n+        fallback_has_occurred: bool,\n+    ) {\n         let span = obligation.cause.span;\n \n         let mut err = match *error {\n@@ -673,6 +674,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n+                        self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n                         // Try to report a help message\n                         if !trait_ref.has_infer_types() &&\n@@ -901,9 +903,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// When encountering an assignment of an unsized trait, like `let x = \"\"[..];`, provide a\n     /// suggestion to borrow the initializer in order to use have a slice instead.\n-    fn suggest_borrow_on_unsized_slice(&self,\n-                                       code: &ObligationCauseCode<'tcx>,\n-                                       err: &mut DiagnosticBuilder<'tcx>) {\n+    fn suggest_borrow_on_unsized_slice(\n+        &self,\n+        code: &ObligationCauseCode<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+    ) {\n         if let &ObligationCauseCode::VariableType(node_id) = code {\n             let parent_node = self.tcx.hir().get_parent_node(node_id);\n             if let Some(Node::Local(ref local)) = self.tcx.hir().find(parent_node) {\n@@ -925,10 +929,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n-    fn suggest_remove_reference(&self,\n-                                obligation: &PredicateObligation<'tcx>,\n-                                err: &mut DiagnosticBuilder<'tcx>,\n-                                trait_ref: &ty::Binder<ty::TraitRef<'tcx>>) {\n+    fn suggest_remove_reference(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+    ) {\n         let trait_ref = trait_ref.skip_binder();\n         let span = obligation.cause.span;\n \n@@ -970,6 +976,40 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn suggest_semicolon_removal(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        span: Span,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+    ) {\n+        let hir = self.tcx.hir();\n+        let parent_node = hir.get_parent_node(\n+            hir.hir_to_node_id(obligation.cause.body_id),\n+        );\n+        let node = hir.find(parent_node);\n+        if let Some(hir::Node::Item(hir::Item {\n+            node: hir::ItemKind::Fn(decl, _, _, body_id),\n+            ..\n+        })) = node {\n+            let body = hir.body(*body_id);\n+            if let hir::ExprKind::Block(blk, _) = &body.value.node {\n+                if decl.output.span().overlaps(span) && blk.expr.is_none() &&\n+                    \"()\" == &trait_ref.self_ty().to_string()\n+                {\n+                    // FIXME(estebank): When encountering a method with a trait\n+                    // bound not satisfied in the return type with a body that has\n+                    // no return, suggest removal of semicolon on last statement.\n+                    // Once that is added, close #54771.\n+                    if let Some(ref stmt) = blk.stmts.last() {\n+                        let sp = self.tcx.sess.source_map().end_point(stmt.span);\n+                        err.span_label(sp, \"consider removing this semicolon\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     /// Given some node representing a fn-like thing in the HIR map,\n     /// returns a span and `ArgKind` information that describes the\n     /// arguments it expects. This can be supplied to"}, {"sha": "e72a2d8ccc629e9943587e09ee5551f10a907746", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/479756802aadcb0b3cad87291c306d9423751617/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479756802aadcb0b3cad87291c306d9423751617/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.rs?ref=479756802aadcb0b3cad87291c306d9423751617", "patch": "@@ -0,0 +1,7 @@\n+trait Bar {}\n+impl Bar for u8 {}\n+fn foo() -> impl Bar {\n+    5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "f26fb141ccf80d636cab9721bcb03a722e94f692", "filename": "src/test/ui/suggestions/impl-trait-return-trailing-semicolon.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/479756802aadcb0b3cad87291c306d9423751617/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479756802aadcb0b3cad87291c306d9423751617/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-return-trailing-semicolon.stderr?ref=479756802aadcb0b3cad87291c306d9423751617", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `(): Bar` is not satisfied\n+  --> $DIR/impl-trait-return-trailing-semicolon.rs:3:13\n+   |\n+LL | fn foo() -> impl Bar {\n+   |             ^^^^^^^^ the trait `Bar` is not implemented for `()`\n+LL |     5; //~^ ERROR the trait bound `(): Bar` is not satisfied\n+   |      - consider removing this semicolon\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}