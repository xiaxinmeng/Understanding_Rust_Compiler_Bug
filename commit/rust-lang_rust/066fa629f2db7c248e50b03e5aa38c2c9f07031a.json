{"sha": "066fa629f2db7c248e50b03e5aa38c2c9f07031a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NmZhNjI5ZjJkYjdjMjQ4ZTUwYjAzZTVhYTM4YzJjOWYwNzAzMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-17T16:23:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-17T16:23:07Z"}, "message": "Auto merge of #1513 - RalfJung:int-align, r=RalfJung\n\nadd option to use force_int for alignment check\n\nFixes https://github.com/rust-lang/miri/issues/1074. Depends on https://github.com/rust-lang/rust/pull/75592.", "tree": {"sha": "81aadc929ddf3a61abdf3b85749223ef172600fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81aadc929ddf3a61abdf3b85749223ef172600fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/066fa629f2db7c248e50b03e5aa38c2c9f07031a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/066fa629f2db7c248e50b03e5aa38c2c9f07031a", "html_url": "https://github.com/rust-lang/rust/commit/066fa629f2db7c248e50b03e5aa38c2c9f07031a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/066fa629f2db7c248e50b03e5aa38c2c9f07031a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9e988bdb24838e5e23e40bcc936fd35ce7dede", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9e988bdb24838e5e23e40bcc936fd35ce7dede", "html_url": "https://github.com/rust-lang/rust/commit/ca9e988bdb24838e5e23e40bcc936fd35ce7dede"}, {"sha": "5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "html_url": "https://github.com/rust-lang/rust/commit/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922"}], "stats": {"total": 291, "additions": 170, "deletions": 121}, "files": [{"sha": "37ed718a1a2b87f316e03239a9149a05800d2941", "filename": "README.md", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -165,9 +165,8 @@ up the sysroot.  If you are using `miri` (the Miri driver) directly, see the\n \n Miri adds its own set of `-Z` flags:\n \n-* `-Zmiri-disable-alignment-check` disables checking pointer alignment. This is\n-  useful to avoid [false positives][alignment-false-positives]. However, setting\n-  this flag means Miri could miss bugs in your program.\n+* `-Zmiri-disable-alignment-check` disables checking pointer alignment, so you\n+  can focus on other failures.\n * `-Zmiri-disable-stacked-borrows` disables checking the experimental\n   [Stacked Borrows] aliasing rules.  This can make Miri run faster, but it also\n   means no aliasing violations will be detected.\n@@ -189,6 +188,18 @@ Miri adds its own set of `-Z` flags:\n   entropy.  The default seed is 0.  **NOTE**: This entropy is not good enough\n   for cryptographic use!  Do not generate secret keys in Miri or perform other\n   kinds of cryptographic operations that rely on proper random numbers.\n+* `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By\n+  default, alignment is checked by casting the pointer to an integer, and making\n+  sure that is a multiple of the alignment.  This can lead to cases where a\n+  program passes the alignment check by pure chance, because things \"happened to\n+  be\" sufficiently aligned -- there is no UB in this execution but there would\n+  be UB in others.  To avoid such cases, the symbolic alignment check only takes\n+  into account the requested alignment of the relevant allocation, and the\n+  offset into that allocation.  This avoids missing such bugs, but it also\n+  incurs some false positives when the code does manual integer arithmetic to\n+  ensure alignment.  (The standard library `align_to` method works fine in both\n+  modes; under symbolic alignment it only fills the middle slice when the\n+  allocation guarantees sufficient alignment.)\n * `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n   being allocated or freed.  This helps in debugging memory leaks and\n   use after free bugs.\n@@ -200,8 +211,6 @@ Miri adds its own set of `-Z` flags:\n   assigned to a stack frame.  This helps in debugging UB related to Stacked\n   Borrows \"protectors\".\n \n-[alignment-false-positives]: https://github.com/rust-lang/miri/issues/1074\n-\n Some native rustc `-Z` flags are also very relevant for Miri:\n \n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri"}, {"sha": "e322ff61d1bda31bb18451d6d289ea581dccad76", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1 +1 @@\n-814bc4fe9364865bfaa94d7825b8eabc11245c7c\n+8cdc94e84040ce797fd33d0a7cfda4ec4f2f2421"}, {"sha": "134702047522d3fc91e4cf396f41d055fa390ee2", "filename": "src/bin/miri.rs", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -172,48 +172,41 @@ fn main() {\n     init_early_loggers();\n \n     // Parse our arguments and split them across `rustc` and `miri`.\n-    let mut validate = true;\n-    let mut stacked_borrows = true;\n-    let mut check_alignment = true;\n-    let mut communicate = false;\n-    let mut ignore_leaks = false;\n-    let mut seed: Option<u64> = None;\n-    let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n-    let mut tracked_call_id: Option<miri::CallId> = None;\n-    let mut tracked_alloc_id: Option<miri::AllocId> = None;\n+    let mut miri_config = miri::MiriConfig::default();\n     let mut rustc_args = vec![];\n-    let mut crate_args = vec![];\n     let mut after_dashdash = false;\n-    let mut excluded_env_vars = vec![];\n     for arg in env::args() {\n         if rustc_args.is_empty() {\n             // Very first arg: binary name.\n             rustc_args.push(arg);\n         } else if after_dashdash {\n             // Everything that comes after `--` is forwarded to the interpreted crate.\n-            crate_args.push(arg);\n+            miri_config.args.push(arg);\n         } else {\n             match arg.as_str() {\n                 \"-Zmiri-disable-validation\" => {\n-                    validate = false;\n+                    miri_config.validate = false;\n                 }\n                 \"-Zmiri-disable-stacked-borrows\" => {\n-                    stacked_borrows = false;\n+                    miri_config.stacked_borrows = false;\n                 }\n                 \"-Zmiri-disable-alignment-check\" => {\n-                    check_alignment = false;\n+                    miri_config.check_alignment = miri::AlignmentCheck::None;\n+                }\n+                \"-Zmiri-symbolic-alignment-check\" => {\n+                    miri_config.check_alignment = miri::AlignmentCheck::Symbolic;\n                 }\n                 \"-Zmiri-disable-isolation\" => {\n-                    communicate = true;\n+                    miri_config.communicate = true;\n                 }\n                 \"-Zmiri-ignore-leaks\" => {\n-                    ignore_leaks = true;\n+                    miri_config.ignore_leaks = true;\n                 }\n                 \"--\" => {\n                     after_dashdash = true;\n                 }\n                 arg if arg.starts_with(\"-Zmiri-seed=\") => {\n-                    if seed.is_some() {\n+                    if miri_config.seed.is_some() {\n                         panic!(\"Cannot specify -Zmiri-seed multiple times!\");\n                     }\n                     let seed_raw = hex::decode(arg.strip_prefix(\"-Zmiri-seed=\").unwrap())\n@@ -234,10 +227,10 @@ fn main() {\n \n                     let mut bytes = [0; 8];\n                     bytes[..seed_raw.len()].copy_from_slice(&seed_raw);\n-                    seed = Some(u64::from_be_bytes(bytes));\n+                    miri_config.seed = Some(u64::from_be_bytes(bytes));\n                 }\n                 arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n-                    excluded_env_vars\n+                    miri_config.excluded_env_vars\n                         .push(arg.strip_prefix(\"-Zmiri-env-exclude=\").unwrap().to_owned());\n                 }\n                 arg if arg.starts_with(\"-Zmiri-track-pointer-tag=\") => {\n@@ -249,7 +242,7 @@ fn main() {\n                         ),\n                     };\n                     if let Some(id) = miri::PtrId::new(id) {\n-                        tracked_pointer_tag = Some(id);\n+                        miri_config.tracked_pointer_tag = Some(id);\n                     } else {\n                         panic!(\"-Zmiri-track-pointer-tag requires a nonzero argument\");\n                     }\n@@ -263,7 +256,7 @@ fn main() {\n                         ),\n                     };\n                     if let Some(id) = miri::CallId::new(id) {\n-                        tracked_call_id = Some(id);\n+                        miri_config.tracked_call_id = Some(id);\n                     } else {\n                         panic!(\"-Zmiri-track-call-id requires a nonzero argument\");\n                     }\n@@ -276,7 +269,7 @@ fn main() {\n                             err\n                         ),\n                     };\n-                    tracked_alloc_id = Some(miri::AllocId(id));\n+                    miri_config.tracked_alloc_id = Some(miri::AllocId(id));\n                 }\n                 _ => {\n                     // Forward to rustc.\n@@ -287,19 +280,6 @@ fn main() {\n     }\n \n     debug!(\"rustc arguments: {:?}\", rustc_args);\n-    debug!(\"crate arguments: {:?}\", crate_args);\n-    let miri_config = miri::MiriConfig {\n-        validate,\n-        stacked_borrows,\n-        check_alignment,\n-        communicate,\n-        ignore_leaks,\n-        excluded_env_vars,\n-        seed,\n-        args: crate_args,\n-        tracked_pointer_tag,\n-        tracked_call_id,\n-        tracked_alloc_id,\n-    };\n+    debug!(\"crate arguments: {:?}\", miri_config.args);\n     run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config })\n }"}, {"sha": "81cd04921722762288be962f5a0ab1ca57cd4d57", "filename": "src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -100,11 +100,12 @@ pub fn report_error<'tcx, 'mir>(\n                     panic!(\"Error should never be raised by Miri: {:?}\", e.kind),\n                 Unsupported(_) =>\n                     vec![format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\")],\n-                UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. }) =>\n+                UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })\n+                    if ecx.memory.extra.check_alignment == AlignmentCheck::Symbolic\n+                =>\n                     vec![\n                         format!(\"this usually indicates that your program performed an invalid operation and caused Undefined Behavior\"),\n-                        format!(\"but alignment errors can also be false positives, see https://github.com/rust-lang/miri/issues/1074\"),\n-                        format!(\"you can disable the alignment check with `-Zmiri-disable-alignment-check`, but that could hide true bugs\")\n+                        format!(\"but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\"),\n                     ],\n                 UndefinedBehavior(_) =>\n                     vec!["}, {"sha": "8e4604c3360a6a190f22be6575c3dae4891bae38", "filename": "src/eval.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -13,15 +13,25 @@ use rustc_target::abi::LayoutOf;\n \n use crate::*;\n \n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum AlignmentCheck {\n+    /// Do not check alignment.\n+    None,\n+    /// Check alignment \"symbolically\", i.e., using only the requested alignment for an allocation and not its real base address.\n+    Symbolic,\n+    /// Check alignment on the actual physical integer address.\n+    Int,\n+}\n+\n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n     /// Determine if validity checking is enabled.\n     pub validate: bool,\n     /// Determines if Stacked Borrows is enabled.\n     pub stacked_borrows: bool,\n-    /// Determines if alignment checking is enabled.\n-    pub check_alignment: bool,\n+    /// Controls alignment checking.\n+    pub check_alignment: AlignmentCheck,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     /// Determines if memory leaks should be ignored.\n@@ -45,7 +55,7 @@ impl Default for MiriConfig {\n         MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n-            check_alignment: true,\n+            check_alignment: AlignmentCheck::Int,\n             communicate: false,\n             ignore_leaks: false,\n             excluded_env_vars: vec![],"}, {"sha": "1b66d5ff6f31d691d569f97b9d4f804ee6328879", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -55,7 +55,7 @@ pub use crate::diagnostics::{\n     register_diagnostic, report_error, EvalContextExt as DiagnosticsEvalContextExt,\n     TerminationInfo, NonHaltingDiagnostic,\n };\n-pub use crate::eval::{create_ecx, eval_main, MiriConfig};\n+pub use crate::eval::{create_ecx, eval_main, AlignmentCheck, MiriConfig};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{\n     AllocExtra, Evaluator, FrameData, MemoryExtra, MiriEvalContext, MiriEvalContextExt,"}, {"sha": "b76159694d822eac424690776daec5a2aedfe8cd", "filename": "src/machine.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -128,7 +128,7 @@ pub struct MemoryExtra {\n     tracked_alloc_id: Option<AllocId>,\n \n     /// Controls whether alignment of memory accesses is being checked.\n-    check_alignment: bool,\n+    pub(crate) check_alignment: AlignmentCheck,\n }\n \n impl MemoryExtra {\n@@ -138,7 +138,7 @@ impl MemoryExtra {\n         tracked_pointer_tag: Option<PtrId>,\n         tracked_call_id: Option<CallId>,\n         tracked_alloc_id: Option<AllocId>,\n-        check_alignment: bool,\n+        check_alignment: AlignmentCheck,\n     ) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag, tracked_call_id))))\n@@ -336,7 +336,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n \n     #[inline(always)]\n     fn enforce_alignment(memory_extra: &MemoryExtra) -> bool {\n-        memory_extra.check_alignment\n+        memory_extra.check_alignment != AlignmentCheck::None\n+    }\n+\n+    #[inline(always)]\n+    fn force_int_for_alignment_check(memory_extra: &Self::MemoryExtra) -> bool {\n+        memory_extra.check_alignment == AlignmentCheck::Int\n     }\n \n     #[inline(always)]"}, {"sha": "eab27496cb28616435db2668d298b6cd0aa11521", "filename": "src/shims/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -13,8 +13,6 @@ pub mod tls;\n \n // End module management, begin local code\n \n-use std::convert::TryFrom;\n-\n use log::trace;\n \n use rustc_middle::{mir, ty};\n@@ -37,8 +35,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n             let &[ptr, align] = check_arg_count(args)?;\n-            this.align_offset(ptr, align, ret, unwind)?;\n-            return Ok(None);\n+            if this.align_offset(ptr, align, ret, unwind)? {\n+                return Ok(None);\n+            }\n         }\n \n         // Try to see if we can do something about foreign items.\n@@ -56,46 +55,48 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Some(&*this.load_mir(instance.def, None)?))\n     }\n \n+    /// Returns `true` if the computation was performed, and `false` if we should just evaluate\n+    /// the actual MIR of `align_offset`.\n     fn align_offset(\n         &mut self,\n         ptr_op: OpTy<'tcx, Tag>,\n         align_op: OpTy<'tcx, Tag>,\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let (dest, ret) = ret.unwrap();\n \n+        if this.memory.extra.check_alignment != AlignmentCheck::Symbolic {\n+            // Just use actual implementation.\n+            return Ok(false);\n+        }\n+\n         let req_align = this\n             .force_bits(this.read_scalar(align_op)?.check_init()?, this.pointer_size())?;\n \n         // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {\n-            return this.start_panic(\"align_offset: align is not a power-of-two\", unwind);\n+            this.start_panic(\"align_offset: align is not a power-of-two\", unwind)?;\n+            return Ok(true); // nothing left to do\n         }\n \n         let ptr_scalar = this.read_scalar(ptr_op)?.check_init()?;\n \n-        // Default: no result.\n-        let mut result = this.machine_usize_max();\n         if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n             // Only do anything if we can identify the allocation this goes to.\n             let cur_align =\n                 this.memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?.1.bytes();\n             if u128::from(cur_align) >= req_align {\n                 // If the allocation alignment is at least the required alignment we use the\n-                // libcore implementation.\n-                // FIXME: is this correct in case of truncation?\n-                result = u64::try_from(\n-                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n-                        .align_offset(usize::try_from(req_align).unwrap())\n-                ).unwrap();\n+                // real implementation.\n+                return Ok(false);\n             }\n         }\n \n-        // Return result, and jump to caller.\n-        this.write_scalar(Scalar::from_machine_usize(result, this), dest)?;\n+        // Return error result (usize::MAX), and jump to caller.\n+        this.write_scalar(Scalar::from_machine_usize(this.machine_usize_max(), this), dest)?;\n         this.go_to_block(ret);\n-        Ok(())\n+        Ok(true)\n     }\n }"}, {"sha": "e4d7621b8b125d278e4a835916b24b74b70242ea", "filename": "tests/compile-fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,11 +1,11 @@\n+// error-pattern: but alignment 4 is required\n+\n fn main() {\n     let mut x = [0u8; 20];\n     let x_ptr: *mut u8 = x.as_mut_ptr();\n     // At least one of these is definitely unaligned.\n-    // Currently, we guarantee to complain about the first one already (https://github.com/rust-lang/miri/issues/1074).\n     unsafe {\n-        *(x_ptr as *mut u64) = 42; //~ ERROR accessing memory with alignment 1, but alignment\n-        *(x_ptr.add(1) as *mut u64) = 42;\n+        *(x_ptr as *mut u32) = 42;\n+        *(x_ptr.add(1) as *mut u32) = 42;\n     }\n-    panic!(\"unreachable in miri\");\n }"}, {"sha": "77eff5087dac5c2f293a40bb8c15c796f71ee1a5", "filename": "tests/compile-fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zmiri-symbolic-alignment-check\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "a40db99a72a6c6e78c7172ef680ddfa97b6b59d9", "filename": "tests/compile-fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,4 +1,4 @@\n-// should find the bug even without these, but gets masked by optimizations\n+// should find the bug even without validation and stacked borrows, but gets masked by optimizations\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n \n #[repr(align(256))]\n@@ -15,5 +15,5 @@ fn main() {\n     // Overwrite the data part of `ptr` so it points to `buf`.\n     unsafe { (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8); }\n     // Re-borrow that. This should be UB.\n-    let _ptr = &*ptr; //~ ERROR accessing memory with alignment 4, but alignment 256 is required\n+    let _ptr = &*ptr; //~ ERROR alignment 256 is required\n }"}, {"sha": "3865d45786374929fbf3f62fb05b7b9cbf672e5d", "filename": "tests/compile-fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,7 +1,9 @@\n-// Even with intptrcast and without validation, we want to be *sure* to catch bugs\n-// that arise from pointers being insufficiently aligned. The only way to achieve\n-// that is not not let programs exploit integer information for alignment, so here\n-// we test that this is indeed the case.\n+// compile-flags: -Zmiri-symbolic-alignment-check\n+// With the symbolic alignment check, even with intptrcast and without\n+// validation, we want to be *sure* to catch bugs that arise from pointers being\n+// insufficiently aligned. The only way to achieve that is not not let programs\n+// exploit integer information for alignment, so here we test that this is\n+// indeed the case.\n //\n // See https://github.com/rust-lang/miri/issues/1074.\n fn main() {"}, {"sha": "998394c6c70cce11eeac1db27969b0ca3439b413", "filename": "tests/compile-fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -10,10 +10,12 @@ struct Foo {\n }\n \n fn main() {\n-    let foo = Foo {\n-        x: 42,\n-        y: 99,\n-    };\n-    let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR memory with alignment 1, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let foo = Foo {\n+            x: 42,\n+            y: 99,\n+        };\n+        let p = unsafe { &foo.x };\n+        let i = *p; //~ ERROR alignment 4 is required\n+    }\n }"}, {"sha": "43e6fd67d2460c0c350f6532f27450be0722f66b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -2,8 +2,10 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const u32;\n-    // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-    let _x = unsafe { *x }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = &x[0] as *const _ as *const u32;\n+        // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n+        let _x = unsafe { *x }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    }\n }"}, {"sha": "f4ed8d47b53f1a70edbe3b85ee9c5e75710d6388", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -2,9 +2,11 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n-    // This must fail because alignment is violated: the offset is not sufficiently aligned.\n-    // Also make the offset not a power of 2, that used to ICE.\n-    let _x = unsafe { *x }; //~ ERROR memory with alignment 1, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n+        // This must fail because alignment is violated: the offset is not sufficiently aligned.\n+        // Also make the offset not a power of 2, that used to ICE.\n+        let _x = unsafe { *x }; //~ ERROR memory with alignment 1, but alignment 4 is required\n+    }\n }"}, {"sha": "61c2a3cde8948c73ae186446a6306dd5b6933a3b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -2,10 +2,12 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n-    // This must fail because alignment is violated. Test specifically for loading pointers,\n-    // which have special code in miri's memory.\n-    let _x = unsafe { *x };\n-    //~^ ERROR memory with alignment 2, but alignment\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n+        // This must fail because alignment is violated. Test specifically for loading pointers,\n+        // which have special code in miri's memory.\n+        let _x = unsafe { *x };\n+        //~^ ERROR but alignment\n+    }\n }"}, {"sha": "88e2634efaf61642b878261c91a1e9861ba275df", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -4,9 +4,11 @@\n use std::ptr;\n \n fn main() {\n-    let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const u32;\n-    // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-    // The deref is UB even if we just put the result into a raw pointer.\n-    let _x = unsafe { ptr::raw_const!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = &x[0] as *const _ as *const u32;\n+        // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n+        // The deref is UB even if we just put the result into a raw pointer.\n+        let _x = unsafe { ptr::raw_const!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    }\n }"}, {"sha": "beba47359b551d4119b093aa7edf7c6f503043c9", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -2,9 +2,9 @@\n // compile-flags: -Zmiri-disable-validation\n \n fn main() {\n-    let x = &2u16;\n+    let x = &2u8;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated. Test specifically for loading ZST.\n     let _x = unsafe { *x };\n-    //~^ ERROR memory with alignment 2, but alignment 4 is required\n+    //~^ ERROR alignment 4 is required\n }"}, {"sha": "81e7e8c7ccac323185ce6d5fa0a6bb51b1baea88", "filename": "tests/run-pass/align.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -0,0 +1,25 @@\n+/// This manually makes sure that we have a pointer with the proper alignment.\n+fn manual_alignment() {\n+    let x = &mut [0u8; 3];\n+    let base_addr = x as *mut _ as usize;\n+    let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n+    let u16_ptr = base_addr_aligned as *mut u16;\n+    unsafe { *u16_ptr = 2; }\n+}\n+\n+/// Test standard library `align_to`.\n+fn align_to() {\n+    const LEN: usize = 128;\n+    let buf = &[0u8; LEN];\n+    let (l, m, r) = unsafe { buf.align_to::<i32>() };\n+    assert!(m.len()*4 >= LEN-4);\n+    assert!(l.len() + r.len() <= 4);\n+}\n+\n+fn main() {\n+    // Do this a couple times in a loop because it may work \"by chance\".\n+    for _ in 0..10 {\n+        manual_alignment();\n+        align_to();\n+    }\n+}"}, {"sha": "70b2e00896dc0efd8e326e68bde16265b45d72e7", "filename": "tests/run-pass/align_offset_symbolic.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Falign_offset_symbolic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Falign_offset_symbolic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset_symbolic.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-symbolic-alignment-check\n+\n fn test_align_offset() {\n     let d = Box::new([0u32; 4]);\n     // Get u8 pointer to base", "previous_filename": "tests/run-pass/align_offset.rs"}, {"sha": "66d439948159632e13543778e040edd9f3cfca17", "filename": "tests/run-pass/align_offset_symbolic.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Falign_offset_symbolic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Falign_offset_symbolic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset_symbolic.stdout?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "previous_filename": "tests/run-pass/align_offset.stdout"}, {"sha": "3afff1d36d36ee4b81cbe883b1b1955c213f7a03", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,4 +1,7 @@\n // normalize-stderr-test \"[^ ]*core/[a-z_/]+.rs[0-9:]*\" -> \"$$LOC\"\n+// normalize-stderr-test \"catch_panic\\.rs:[0-9]{2}\" -> \"catch_panic.rs:LL\"\n+// We test the `align_offset` panic below, make sure we test the interpreter impl and not the \"real\" one.\n+// compile-flags: -Zmiri-symbolic-alignment-check\n #![feature(never_type)]\n #![allow(unconditional_panic)]\n \n@@ -99,7 +102,7 @@ fn test(expect_msg: Option<&str>, do_panic: impl FnOnce(usize) -> !) {\n         eprintln!(\"Caught panic message (&str): {}\", s);\n         Some(*s)\n     } else {\n-        eprintln!(\"Failed get caught panic message.\");\n+        eprintln!(\"Failed to get caught panic message.\");\n         None\n     };\n     if let Some(expect_msg) = expect_msg {"}, {"sha": "c31f54aac729af9752f98badad1bac04282f8c11", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/066fa629f2db7c248e50b03e5aa38c2c9f07031a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=066fa629f2db7c248e50b03e5aa38c2c9f07031a", "patch": "@@ -1,26 +1,26 @@\n-thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:50:27\n+thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:LL:27\n Caught panic message (&str): Hello from panic: std\n-thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:51:26\n+thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:LL:26\n Caught panic message (String): Hello from panic: 1\n-thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:52:26\n+thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:LL:26\n Caught panic message (String): Hello from panic: 2\n-thread 'main' panicked at 'Box<Any>', $DIR/catch_panic.rs:53:27\n-Failed get caught panic message.\n-thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:56:27\n+thread 'main' panicked at 'Box<Any>', $DIR/catch_panic.rs:LL:27\n+Failed to get caught panic message.\n+thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:LL:27\n Caught panic message (String): Hello from panic: core\n-thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:57:26\n+thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:LL:26\n Caught panic message (String): Hello from panic: 5\n-thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:58:26\n+thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:LL:26\n Caught panic message (String): Hello from panic: 6\n-thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:63:33\n+thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:LL:33\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n-thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:67:33\n+thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:LL:33\n Caught panic message (String): attempt to divide by zero\n thread 'main' panicked at 'align_offset: align is not a power-of-two', $LOC\n Caught panic message (String): align_offset: align is not a power-of-two\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:76:29\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:LL:29\n Caught panic message (&str): assertion failed: false\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:77:29\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:LL:29\n Caught panic message (&str): assertion failed: false\n thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', $LOC\n Caught panic message (String): called `Option::unwrap()` on a `None` value"}]}