{"sha": "7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlN2E1ZTNkM2VhYmUwZWU0NjQ3NGIwZWI3MDFjMTU5YTQ1YjQ5MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-22T20:01:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-22T20:01:52Z"}, "message": "auto merge of #13076 : FlaPer87/rust/remove-freeze, r=alexcrichton\n\nThis PR removes the `Freeze` kind and the `NoFreeze` marker completely.\r\n\r\nFixes #12577\r\n\r\ncc @nikomatsakis r?", "tree": {"sha": "70ed4399cd98654d6ba75b4251b8478868ab063a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ed4399cd98654d6ba75b4251b8478868ab063a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "html_url": "https://github.com/rust-lang/rust/commit/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e6f90eb89021342935de9af2f014fbee5805855", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6f90eb89021342935de9af2f014fbee5805855", "html_url": "https://github.com/rust-lang/rust/commit/0e6f90eb89021342935de9af2f014fbee5805855"}, {"sha": "a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d", "html_url": "https://github.com/rust-lang/rust/commit/a1cb2f5d8c4ce807b27b09344b5ef7d9cd94c04d"}], "stats": {"total": 296, "additions": 72, "deletions": 224}, "files": [{"sha": "a61e80818487acaa771a2ec17e7cc2efd9ecd703", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -1019,7 +1019,7 @@ never invoking this behaviour or exposing an API making it possible for it to oc\n \n * Data races\n * Dereferencing a null/dangling raw pointer\n-* Mutating an immutable value/reference, if it is not marked as non-`Freeze`\n+* Mutating an immutable value/reference\n * Reads of [undef](http://llvm.org/docs/LangRef.html#undefined-values) (uninitialized) memory\n * Breaking the [pointer aliasing rules](http://llvm.org/docs/LangRef.html#pointer-aliasing-rules)\n   with raw pointers (a subset of the rules used by C)\n@@ -3434,10 +3434,6 @@ call to the method `make_string`.\n Types in Rust are categorized into kinds, based on various properties of the components of the type.\n The kinds are:\n \n-`Freeze`\n-  : Types of this kind are deeply immutable;\n-    they contain no mutable memory locations\n-    directly or indirectly via pointers.\n `Send`\n   : Types of this kind can be safely sent between tasks.\n     This kind includes scalars, owning pointers, owned closures, and"}, {"sha": "bfa1a3a2a299dfcb2325578063bf5a0a4243dc04", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -2099,10 +2099,6 @@ unless they contain managed boxes, managed closures, or references.\n These are types that are safe to be used across several threads with access to\n a `&T` pointer. `MutexArc` is an example of a *sharable* type with internal mutable data.\n \n-* `Freeze` - Constant (immutable) types.\n-These are types that do not contain anything intrinsically mutable.\n-Intrinsically mutable values include `Cell` in the standard library.\n-\n * `'static` - Non-borrowed types.\n These are types that do not contain any data whose lifetime is bound to\n a particular stack frame. These are types that do not contain any\n@@ -2152,7 +2148,7 @@ We say that the `Printable` trait _provides_ a `print` method with the\n given signature.  This means that we can call `print` on an argument\n of any type that implements the `Printable` trait.\n \n-Rust's built-in `Send` and `Freeze` types are examples of traits that\n+Rust's built-in `Send` and `Share` types are examples of traits that\n don't provide any methods.\n \n Traits may be implemented for specific types with [impls]. An impl for\n@@ -2444,15 +2440,15 @@ Consequently, the trait objects themselves automatically fulfill their\n respective kind bounds. However, this default behavior can be overridden by\n specifying a list of bounds on the trait type, for example, by writing `~Trait:`\n (which indicates that the contents of the owned trait need not fulfill any\n-bounds), or by writing `~Trait:Send+Freeze`, which indicates that in addition\n-to fulfilling `Send`, contents must also fulfill `Freeze`, and as a consequence,\n-the trait itself fulfills `Freeze`.\n+bounds), or by writing `~Trait:Send+Share`, which indicates that in addition\n+to fulfilling `Send`, contents must also fulfill `Share`, and as a consequence,\n+the trait itself fulfills `Share`.\n \n * `~Trait:Send` is equivalent to `~Trait`.\n * `&Trait:` is equivalent to `&Trait`.\n \n Builtin kind bounds can also be specified on closure types in the same way (for\n-example, by writing `fn:Freeze()`), and the default behaviours are the same as\n+example, by writing `fn:Send()`), and the default behaviours are the same as\n for traits of the same storage class.\n \n ## Trait inheritance"}, {"sha": "bba81e5118c695c70553525cbe5ea55a26e4f733", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -37,7 +37,6 @@ use std::mem;\n use std::ptr::read;\n use std::cmp;\n use std::num;\n-use std::kinds::marker;\n use std::rc::Rc;\n use std::rt::global_heap;\n use std::intrinsics::{TyDesc, get_tydesc};\n@@ -90,7 +89,6 @@ pub struct Arena {\n     priv head: Chunk,\n     priv pod_head: Chunk,\n     priv chunks: RefCell<@List<Chunk>>,\n-    priv no_freeze: marker::NoFreeze,\n }\n \n impl Arena {\n@@ -103,7 +101,6 @@ impl Arena {\n             head: chunk(initial_size, false),\n             pod_head: chunk(initial_size, true),\n             chunks: RefCell::new(@Nil),\n-            no_freeze: marker::NoFreeze,\n         }\n     }\n }"}, {"sha": "9ee2779079cf000ba00c6668e522ecc323abf08e", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -584,9 +584,6 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n             'S' => {\n                 param_bounds.builtin_bounds.add(ty::BoundSend);\n             }\n-            'K' => {\n-                param_bounds.builtin_bounds.add(ty::BoundFreeze);\n-            }\n             'O' => {\n                 param_bounds.builtin_bounds.add(ty::BoundStatic);\n             }"}, {"sha": "5b3c2962ac0edfbd7d6fed17505e7e4e01c43eec", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -392,7 +392,6 @@ fn enc_bounds(w: &mut MemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n     for bound in bs.builtin_bounds.iter() {\n         match bound {\n             ty::BoundSend => mywrite!(w, \"S\"),\n-            ty::BoundFreeze => mywrite!(w, \"K\"),\n             ty::BoundStatic => mywrite!(w, \"O\"),\n             ty::BoundSized => mywrite!(w, \"Z\"),\n             ty::BoundPod => mywrite!(w, \"P\"),"}, {"sha": "fd53c2e544d2c6d1f7f9f10b04e011321ee727df", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -30,20 +30,14 @@ use syntax::visit::Visitor;\n // kind is noncopyable. The noncopyable kind can be extended with any number\n // of the following attributes.\n //\n-//  send: Things that can be sent on channels or included in spawned closures.\n-//  freeze: Things thare are deeply immutable. They are guaranteed never to\n-//    change, and can be safely shared without copying between tasks.\n+//  Send: Things that can be sent on channels or included in spawned closures. It\n+//  includes scalar types as well as classes and unique types containing only\n+//  sendable types.\n //  'static: Things that do not contain references.\n //\n-// Send includes scalar types as well as classes and unique types containing\n-// only sendable types.\n-//\n-// Freeze include scalar types, things without non-const fields, and pointers\n-// to freezable things.\n-//\n // This pass ensures that type parameters are only instantiated with types\n // whose kinds are equal or less general than the way the type parameter was\n-// annotated (with the `Send` or `Freeze` bound).\n+// annotated (with the `Send` bound).\n //\n // It also verifies that noncopyable kinds are not copied. Sendability is not\n // applied, since none of our language primitives send. Instead, the sending"}, {"sha": "67c597f927ac8f0f8be691593ba8d2586d68cb98", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -13,7 +13,7 @@\n // Language items are items that represent concepts intrinsic to the language\n // itself. Examples are:\n //\n-// * Traits that specify \"kinds\"; e.g. \"Freeze\", \"Send\".\n+// * Traits that specify \"kinds\"; e.g. \"Share\", \"Send\".\n //\n // * Traits that represent operators; e.g. \"Add\", \"Sub\", \"Index\".\n //\n@@ -82,9 +82,7 @@ impl LanguageItems {\n     }\n \n     pub fn to_builtin_kind(&self, id: ast::DefId) -> Option<ty::BuiltinBound> {\n-        if Some(id) == self.freeze_trait() {\n-            Some(ty::BoundFreeze)\n-        } else if Some(id) == self.send_trait() {\n+        if Some(id) == self.send_trait() {\n             Some(ty::BoundSend)\n         } else if Some(id) == self.sized_trait() {\n             Some(ty::BoundSized)\n@@ -210,7 +208,6 @@ pub fn collect_language_items(krate: &ast::Crate,\n \n lets_do_this! {\n //  Variant name,                    Name,                      Method name;\n-    FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n     SendTraitLangItem,               \"send\",                    send_trait;\n     SizedTraitLangItem,              \"sized\",                   sized_trait;\n     PodTraitLangItem,                \"pod\",                     pod_trait;\n@@ -275,7 +272,6 @@ lets_do_this! {\n     ContravariantLifetimeItem,       \"contravariant_lifetime\",  contravariant_lifetime;\n     InvariantLifetimeItem,           \"invariant_lifetime\",      invariant_lifetime;\n \n-    NoFreezeItem,                    \"no_freeze_bound\",         no_freeze_bound;\n     NoSendItem,                      \"no_send_bound\",           no_send_bound;\n     NoPodItem,                       \"no_pod_bound\",            no_pod_bound;\n     NoShareItem,                     \"no_share_bound\",          no_share_bound;"}, {"sha": "e9378218ce3a05f2b3d3c30fc828443c809197df", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -838,7 +838,6 @@ pub type BuiltinBounds = EnumSet<BuiltinBound>;\n pub enum BuiltinBound {\n     BoundStatic,\n     BoundSend,\n-    BoundFreeze,\n     BoundSized,\n     BoundPod,\n     BoundShare,\n@@ -852,7 +851,6 @@ pub fn AllBuiltinBounds() -> BuiltinBounds {\n     let mut set = EnumSet::empty();\n     set.add(BoundStatic);\n     set.add(BoundSend);\n-    set.add(BoundFreeze);\n     set.add(BoundSized);\n     set.add(BoundShare);\n     set\n@@ -1892,9 +1890,6 @@ def_type_content_sets!(\n         //       that it neither reaches nor owns a managed pointer.\n         Nonsendable                         = 0b0000_0111__0000_0100__0000,\n \n-        // Things that prevent values from being considered freezable\n-        Nonfreezable                        = 0b0000_1000__0000_0000__0000,\n-\n         // Things that prevent values from being considered 'static\n         Nonstatic                           = 0b0000_0010__0000_0000__0000,\n \n@@ -1929,7 +1924,6 @@ impl TypeContents {\n     pub fn meets_bound(&self, cx: &ctxt, bb: BuiltinBound) -> bool {\n         match bb {\n             BoundStatic => self.is_static(cx),\n-            BoundFreeze => self.is_freezable(cx),\n             BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n             BoundPod => self.is_pod(cx),\n@@ -1965,10 +1959,6 @@ impl TypeContents {\n         self.intersects(TC::OwnsOwned)\n     }\n \n-    pub fn is_freezable(&self, _: &ctxt) -> bool {\n-        !self.intersects(TC::Nonfreezable)\n-    }\n-\n     pub fn is_sized(&self, _: &ctxt) -> bool {\n         !self.intersects(TC::Nonsized)\n     }\n@@ -2073,10 +2063,6 @@ pub fn type_is_sendable(cx: &ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_sendable(cx)\n }\n \n-pub fn type_is_freezable(cx: &ctxt, t: ty::t) -> bool {\n-    type_contents(cx, t).is_freezable(cx)\n-}\n-\n pub fn type_interior_is_unsafe(cx: &ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).interior_unsafe()\n }\n@@ -2132,7 +2118,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n         cache.insert(ty_id, TC::None);\n \n         let result = match get(ty).sty {\n-            // Scalar and unique types are sendable, freezable, and durable\n+            // Scalar and unique types are sendable, and durable\n             ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n             ty_bare_fn(_) | ty::ty_char => {\n                 TC::None\n@@ -2270,9 +2256,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                         did: ast::DefId,\n                         tc: TypeContents)\n                         -> TypeContents {\n-        if Some(did) == cx.lang_items.no_freeze_bound() {\n-            tc | TC::ReachesMutable\n-        } else if Some(did) == cx.lang_items.no_send_bound() {\n+        if Some(did) == cx.lang_items.no_send_bound() {\n             tc | TC::ReachesNonsendAnnot\n         } else if Some(did) == cx.lang_items.managed_bound() {\n             tc | TC::Managed\n@@ -2357,7 +2341,6 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             tc = tc - match bound {\n                 BoundStatic => TC::Nonstatic,\n                 BoundSend => TC::Nonsendable,\n-                BoundFreeze => TC::Nonfreezable,\n                 BoundSized => TC::Nonsized,\n                 BoundPod => TC::Nonpod,\n                 BoundShare => TC::Nonsharable,"}, {"sha": "9ed59bd19b9025d0fb8e96a1820a8fafa454aecf", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -976,8 +976,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n          * Translate the AST's notion of ty param bounds (which are an\n          * enum consisting of a newtyped Ty or a region) to ty's\n          * notion of ty param bounds, which can either be user-defined\n-         * traits, or one of the two built-in traits (formerly known\n-         * as kinds): Freeze and Send.\n+         * traits, or the built-in trait (formerly known as kind): Send.\n          */\n \n         let mut param_bounds = ty::ParamBounds {"}, {"sha": "1a017340c95094f09814fad0483427caab202d34", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -664,7 +664,6 @@ impl Repr for ty::ParamBounds {\n             res.push(match b {\n                 ty::BoundStatic => ~\"'static\",\n                 ty::BoundSend => ~\"Send\",\n-                ty::BoundFreeze => ~\"Freeze\",\n                 ty::BoundSized => ~\"Sized\",\n                 ty::BoundPod => ~\"Pod\",\n                 ty::BoundShare => ~\"Share\",\n@@ -952,7 +951,6 @@ impl UserString for ty::BuiltinBound {\n         match *self {\n             ty::BoundStatic => ~\"'static\",\n             ty::BoundSend => ~\"Send\",\n-            ty::BoundFreeze => ~\"Freeze\",\n             ty::BoundSized => ~\"Sized\",\n             ty::BoundPod => ~\"Pod\",\n             ty::BoundShare => ~\"Share\","}, {"sha": "0e9025303d00aa80ed96043a93c79e24f2640aa0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -116,8 +116,8 @@ pub enum Implementor {\n ///\n /// This structure purposefully does not implement `Clone` because it's intended\n /// to be a fairly large and expensive structure to clone. Instead this adheres\n-/// to both `Send` and `Freeze` so it may be stored in a `Arc` instance and\n-/// shared among the various rendering tasks.\n+/// to `Send` so it may be stored in a `Arc` instance and shared among the various\n+/// rendering tasks.\n pub struct Cache {\n     /// Mapping of typaram ids to the name of the type parameter. This is used\n     /// when pretty-printing a type (so pretty printing doesn't have to"}, {"sha": "e0912b826cd592e2349a4baf5d2dbf608d668eca", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -22,17 +22,15 @@ use ty::Unsafe;\n /// A mutable memory location that admits only `Pod` data.\n pub struct Cell<T> {\n     priv value: Unsafe<T>,\n-    priv marker1: marker::NoFreeze,\n-    priv marker2: marker::NoShare,\n+    priv noshare: marker::NoShare,\n }\n \n impl<T:Pod> Cell<T> {\n     /// Creates a new `Cell` containing the given value.\n     pub fn new(value: T) -> Cell<T> {\n         Cell {\n             value: Unsafe::new(value),\n-            marker1: marker::NoFreeze,\n-            marker2: marker::NoShare,\n+            noshare: marker::NoShare,\n         }\n     }\n \n@@ -73,9 +71,8 @@ impl<T: fmt::Show> fmt::Show for Cell<T> {\n pub struct RefCell<T> {\n     priv value: Unsafe<T>,\n     priv borrow: BorrowFlag,\n-    priv marker1: marker::NoFreeze,\n-    priv marker2: marker::NoPod,\n-    priv marker3: marker::NoShare,\n+    priv nopod: marker::NoPod,\n+    priv noshare: marker::NoShare,\n }\n \n // Values [1, MAX-1] represent the number of `Ref` active\n@@ -88,10 +85,9 @@ impl<T> RefCell<T> {\n     /// Create a new `RefCell` containing `value`\n     pub fn new(value: T) -> RefCell<T> {\n         RefCell {\n-            marker1: marker::NoFreeze,\n-            marker2: marker::NoPod,\n-            marker3: marker::NoShare,\n             value: Unsafe::new(value),\n+            nopod: marker::NoPod,\n+            noshare: marker::NoShare,\n             borrow: UNUSED,\n         }\n     }"}, {"sha": "267140a0089bdfbbea30a81ecf2d30f605eb9d6f", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -291,7 +291,7 @@ pub struct Receiver<T> {\n     priv inner: Flavor<T>,\n     priv receives: Cell<uint>,\n     // can't share in an arc\n-    priv marker: marker::NoFreeze,\n+    priv marker: marker::NoShare,\n }\n \n /// An iterator over messages on a receiver, this iterator will block\n@@ -307,7 +307,7 @@ pub struct Sender<T> {\n     priv inner: Flavor<T>,\n     priv sends: Cell<uint>,\n     // can't share in an arc\n-    priv marker: marker::NoFreeze,\n+    priv marker: marker::NoShare,\n }\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n@@ -340,7 +340,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n \n impl<T: Send> Sender<T> {\n     fn my_new(inner: Flavor<T>) -> Sender<T> {\n-        Sender { inner: inner, sends: Cell::new(0), marker: marker::NoFreeze }\n+        Sender { inner: inner, sends: Cell::new(0), marker: marker::NoShare }\n     }\n \n     /// Sends a value along this channel to be received by the corresponding\n@@ -478,7 +478,7 @@ impl<T: Send> Drop for Sender<T> {\n \n impl<T: Send> Receiver<T> {\n     fn my_new(inner: Flavor<T>) -> Receiver<T> {\n-        Receiver { inner: inner, receives: Cell::new(0), marker: marker::NoFreeze }\n+        Receiver { inner: inner, receives: Cell::new(0), marker: marker::NoShare }\n     }\n \n     /// Blocks waiting for a value on this receiver"}, {"sha": "5872c308f938bc0bd68e7786164575160e47f1a1", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -66,7 +66,6 @@ pub struct Select {\n     priv tail: *mut Handle<'static, ()>,\n     priv next_id: Cell<uint>,\n     priv marker1: marker::NoSend,\n-    priv marker2: marker::NoFreeze,\n }\n \n /// A handle to a receiver which is currently a member of a `Select` set of\n@@ -105,7 +104,6 @@ impl Select {\n     pub fn new() -> Select {\n         Select {\n             marker1: marker::NoSend,\n-            marker2: marker::NoFreeze,\n             head: 0 as *mut Handle<'static, ()>,\n             tail: 0 as *mut Handle<'static, ()>,\n             next_id: Cell::new(1),"}, {"sha": "c0a442a614116275a985ff84fb594840ea17e2ab", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -26,12 +26,6 @@ pub trait Send {\n     // empty.\n }\n \n-/// Types that are either immutable or have inherited mutability.\n-#[lang=\"freeze\"]\n-pub trait Freeze {\n-    // empty.\n-}\n-\n /// Types with a constant size known at compile-time.\n #[lang=\"sized\"]\n pub trait Sized {\n@@ -225,14 +219,6 @@ pub mod marker {\n     #[deriving(Eq,Clone)]\n     pub struct InvariantLifetime<'a>;\n \n-    /// A type which is considered \"not freezable\", meaning that\n-    /// its contents could change even if stored in an immutable\n-    /// context or it is the referent of an `&T` pointer. This is\n-    /// typically embedded in other types, such as `Cell`.\n-    #[lang=\"no_freeze_bound\"]\n-    #[deriving(Eq,Clone)]\n-    pub struct NoFreeze;\n-\n     /// A type which is considered \"not sendable\", meaning that it cannot\n     /// be safely sent between tasks, even if it is owned. This is\n     /// typically embedded in other types, such as `Gc`, to ensure that"}, {"sha": "d487aa638ac09014593d2fad1b23ac46becdd4b0", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -20,7 +20,7 @@ generally useful to many Rust programs.\n */\n \n // Reexported core operators\n-pub use kinds::{Freeze, Pod, Send, Sized, Share};\n+pub use kinds::{Pod, Send, Sized, Share};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop, Deref, DerefMut};"}, {"sha": "57187e273230d8dd41f65f7b4377bc4a0d6cb5fb", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -162,7 +162,6 @@ struct MutexArcInner<T> { lock: Mutex, failed: bool, data: T }\n /// An Arc with mutable data protected by a blocking mutex.\n pub struct MutexArc<T> {\n     priv x: UnsafeArc<MutexArcInner<T>>,\n-    priv marker: marker::NoFreeze,\n }\n \n impl<T:Send> Clone for MutexArc<T> {\n@@ -171,8 +170,7 @@ impl<T:Send> Clone for MutexArc<T> {\n     fn clone(&self) -> MutexArc<T> {\n         // NB: Cloning the underlying mutex is not necessary. Its reference\n         // count would be exactly the same as the shared state's.\n-        MutexArc { x: self.x.clone(),\n-                   marker: marker::NoFreeze, }\n+        MutexArc { x: self.x.clone() }\n     }\n }\n \n@@ -191,8 +189,7 @@ impl<T:Send> MutexArc<T> {\n             lock: Mutex::new_with_condvars(num_condvars),\n             failed: false, data: user_data\n         };\n-        MutexArc { x: UnsafeArc::new(data),\n-                   marker: marker::NoFreeze, }\n+        MutexArc { x: UnsafeArc::new(data) }\n     }\n \n     /**\n@@ -297,17 +294,17 @@ struct RWArcInner<T> { lock: RWLock, failed: bool, data: T }\n  */\n pub struct RWArc<T> {\n     priv x: UnsafeArc<RWArcInner<T>>,\n-    priv marker: marker::NoFreeze,\n-    priv marker1: marker::NoShare,\n+    priv marker: marker::NoShare,\n }\n \n impl<T: Share + Send> Clone for RWArc<T> {\n     /// Duplicate a rwlock-protected Arc. See arc::clone for more details.\n     #[inline]\n     fn clone(&self) -> RWArc<T> {\n-        RWArc { x: self.x.clone(),\n-                marker: marker::NoFreeze,\n-                marker1: marker::NoShare, }\n+        RWArc {\n+            x: self.x.clone(),\n+            marker: marker::NoShare\n+        }\n     }\n \n }\n@@ -327,9 +324,10 @@ impl<T: Share + Send> RWArc<T> {\n             lock: RWLock::new_with_condvars(num_condvars),\n             failed: false, data: user_data\n         };\n-        RWArc { x: UnsafeArc::new(data),\n-                marker: marker::NoFreeze,\n-                marker1: marker::NoShare, }\n+        RWArc {\n+            x: UnsafeArc::new(data),\n+            marker: marker::NoShare\n+        }\n     }\n \n     /**"}, {"sha": "f2a256165e2973d9fc53ed07acbf2876a90b5134", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -169,7 +169,7 @@ pub static DUMMY_NODE_ID: NodeId = -1;\n // The AST represents all type param bounds as types.\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n-// detects Copy, Send, Send, and Freeze.\n+// detects Copy, Send and Share.\n #[deriving(Clone, Eq, Encodable, Decodable, Hash)]\n pub enum TyParamBound {\n     TraitTyParamBound(TraitRef),"}, {"sha": "e49ed1f9cf71798f71c4905cba246e6a9d12b1eb", "filename": "src/test/auxiliary/trait_superkinds_in_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -13,6 +13,6 @@\n \n #[crate_type=\"lib\"];\n \n-pub trait RequiresFreeze : Freeze { }\n-pub trait RequiresRequiresFreezeAndSend : RequiresFreeze + Send { }\n+pub trait RequiresShare : Share { }\n+pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n pub trait RequiresPod : Pod { }"}, {"sha": "954ec82e40fa0a057f907d4dba22afd99e0b824f", "filename": "src/test/compile-fail/borrowck-borrow-of-mut-base-ptr.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e6f90eb89021342935de9af2f014fbee5805855/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6f90eb89021342935de9af2f014fbee5805855/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs?ref=0e6f90eb89021342935de9af2f014fbee5805855", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that attempt to freeze an `&mut` pointer while referent is\n-// claimed yields an error.\n-//\n-// Example from src/middle/borrowck/doc.rs\n-\n-fn foo<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &mut int = &mut *t0; // Claims `*t0`\n-    let mut t2 = &t0;           //~ ERROR cannot borrow `t0`\n-    let q: &int = &**t2;        // Freezes `*t0` but not through `*p`\n-    *p += 1;                    // violates type of `*q`\n-}\n-\n-fn main() {\n-}"}, {"sha": "e085b35cbb113aab56f301ad139b84d0b7ef969d", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -16,12 +16,12 @@\n // Mostly tests correctness of metadata.\n \n extern crate trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n struct X<T>(T);\n \n-impl <T:Freeze> RequiresFreeze for X<T> { }\n+impl <T:Share> RequiresShare for X<T> { }\n \n-impl <T:Freeze> RequiresRequiresFreezeAndSend for X<T> { } //~ ERROR cannot implement this trait\n+impl <T:Share> RequiresRequiresShareAndSend for X<T> { } //~ ERROR cannot implement this trait\n \n fn main() { }"}, {"sha": "caf968612922b300f3b136f78d645eb286eaeb53", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -13,10 +13,7 @@\n \n trait Foo : Send { }\n \n-impl <'a> Foo for &'a mut () { } //~ ERROR cannot implement this trait\n-\n-trait Bar : Freeze { }\n-\n-impl <'a> Bar for &'a mut () { } //~ ERROR cannot implement this trait\n+impl <'a> Foo for &'a mut () { }\n+//~^ ERROR which does not fulfill `Send`, cannot implement this trait\n \n fn main() { }"}, {"sha": "5ffaebe405e1c2398d4b8d447f3aff5d70ab947e", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -12,7 +12,7 @@\n fn take_any(_: ||:) {\n }\n \n-fn take_const_owned(_: ||:Freeze+Send) {\n+fn take_const_owned(_: ||:Share+Send) {\n }\n \n fn give_any(f: ||:) {\n@@ -21,7 +21,7 @@ fn give_any(f: ||:) {\n \n fn give_owned(f: ||:Send) {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Freeze` but found bounds `Send`\n+    take_const_owned(f); //~ ERROR expected bounds `Send+Share` but found bounds `Send`\n }\n \n fn main() {}"}, {"sha": "4da1247819491e14c489caa19c7f7b3a6970c0d6", "filename": "src/test/compile-fail/kindck-freeze.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0e6f90eb89021342935de9af2f014fbee5805855/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6f90eb89021342935de9af2f014fbee5805855/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs?ref=0e6f90eb89021342935de9af2f014fbee5805855", "patch": "@@ -1,57 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test which of the builtin types are considered freezeable.\n-\n-\n-fn assert_freeze<T:Freeze>() { }\n-trait Dummy { }\n-\n-fn test<'a,T,U:Freeze>(_: &'a int) {\n-    // lifetime pointers are ok...\n-    assert_freeze::<&'static int>();\n-    assert_freeze::<&'a int>();\n-    assert_freeze::<&'a str>();\n-    assert_freeze::<&'a [int]>();\n-\n-    // ...unless they are mutable\n-    assert_freeze::<&'static mut int>(); //~ ERROR does not fulfill `Freeze`\n-    assert_freeze::<&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // ~ pointers are ok\n-    assert_freeze::<~int>();\n-    assert_freeze::<~str>();\n-    assert_freeze::<Vec<int> >();\n-\n-    // but not if they own a bad thing\n-    assert_freeze::<~&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // careful with object types, who knows what they close over...\n-    assert_freeze::<&'a Dummy>(); //~ ERROR does not fulfill `Freeze`\n-    assert_freeze::<~Dummy>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // ...unless they are properly bounded\n-    assert_freeze::<&'a Dummy:Freeze>();\n-    assert_freeze::<&'static Dummy:Freeze>();\n-    assert_freeze::<~Dummy:Freeze>();\n-\n-    // ...but even then the pointer overrides\n-    assert_freeze::<&'a mut Dummy:Freeze>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // closures are like an `&mut` object\n-    assert_freeze::<||>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // unsafe ptrs are ok unless they point at unfreezeable things\n-    assert_freeze::<*int>();\n-    assert_freeze::<*&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n-}\n-\n-fn main() {\n-}"}, {"sha": "e480ebfd3781f1406af53effbe047918c21bd9d7", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -13,11 +13,11 @@\n \n use std::kinds::marker;\n \n-enum Foo { A(marker::NoFreeze) }\n+enum Foo { A(marker::NoShare) }\n \n-fn bar<T: Freeze>(_: T) {}\n+fn bar<T: Share>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoFreeze);\n+    let x = A(marker::NoShare);\n     bar(&x); //~ ERROR type parameter with an incompatible type\n }"}, {"sha": "e4d2c801070b9ee93a293d95fc30834d5d0c38e6", "filename": "src/test/compile-fail/proc-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn is_send<T: Send>() {}\n-fn is_freeze<T: Freeze>() {}\n+fn is_freeze<T: Share>() {}\n fn is_static<T: 'static>() {}\n \n fn main() {"}, {"sha": "958a97412bce74effa7df82697b569c98c4bc1dd", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n fn a(_x: ~Foo:Send) {\n }\n \n-fn c(x: ~Foo:Freeze+Send) {\n+fn c(x: ~Foo:Share+Send) {\n     a(x);\n }\n "}, {"sha": "988057bc7b13ce5fb0d474a10257866b03d3a437", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -18,11 +18,11 @@ fn a(_x: ~Foo) { // should be same as ~Foo:Send\n fn b(_x: &'static Foo) { // should be same as &'static Foo:'static\n }\n \n-fn c(x: ~Foo:Freeze) {\n+fn c(x: ~Foo:Share) {\n     a(x); //~ ERROR expected bounds `Send`\n }\n \n-fn d(x: &'static Foo:Freeze) {\n+fn d(x: &'static Foo:Share) {\n     b(x); //~ ERROR expected bounds `'static`\n }\n "}, {"sha": "7b09c589320999fc55d115bf823e43acdaff31f0", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -13,11 +13,11 @@\n trait Tr { }\n impl Tr for int { }\n \n-fn foo(x: ~Tr: Freeze) -> ~Tr: Freeze { x }\n+fn foo(x: ~Tr: Share) -> ~Tr: Share { x }\n \n fn main() {\n-    let x: ~Tr: Freeze;\n+    let x: ~Tr: Share;\n \n-    ~1 as ~Tr: Freeze;\n+    ~1 as ~Tr: Share;\n }\n "}, {"sha": "8c41e4f57c4bbfc0531cb57a0736842c94281261", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -16,15 +16,15 @@\n // even when using them cross-crate.\n \n extern crate trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n #[deriving(Eq)]\n struct X<T>(T);\n \n-impl <T: Freeze> RequiresFreeze for X<T> { }\n-impl <T: Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n+impl <T: Share> RequiresShare for X<T> { }\n+impl <T: Share+Send> RequiresRequiresShareAndSend for X<T> { }\n \n-fn foo<T: RequiresRequiresFreezeAndSend>(val: T, chan: Sender<T>) {\n+fn foo<T: RequiresRequiresShareAndSend>(val: T, chan: Sender<T>) {\n     chan.send(val);\n }\n "}, {"sha": "7b2977d031c13de04ed61d0c2eaa4fa668848234", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -15,14 +15,14 @@\n // Tests (correct) usage of trait super-builtin-kinds cross-crate.\n \n extern crate trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::{RequiresPod};\n \n struct X<T>(T);\n \n-impl <T:Freeze> RequiresFreeze for X<T> { }\n+impl <T:Share> RequiresShare for X<T> { }\n \n-impl <T:Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n+impl <T:Share+Send> RequiresRequiresShareAndSend for X<T> { }\n \n impl <T:Pod> RequiresPod for X<T> { }\n "}, {"sha": "900e266584bd31bf1f0d0330c3a5b93e4d66e61d", "filename": "src/test/run-pass/proc-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Fproc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Fproc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-bounds.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -12,18 +12,18 @@ fn foo<T>() {}\n fn bar<T>(_: T) {}\n \n fn is_send<T: Send>() {}\n-fn is_freeze<T: Freeze>() {}\n+fn is_freeze<T: Share>() {}\n fn is_static<T: 'static>() {}\n \n pub fn main() {\n     foo::<proc()>();\n     foo::<proc:()>();\n     foo::<proc:Send()>();\n-    foo::<proc:Send + Freeze()>();\n-    foo::<proc:'static + Send + Freeze()>();\n+    foo::<proc:Send + Share()>();\n+    foo::<proc:'static + Send + Share()>();\n \n     is_send::<proc:Send()>();\n-    is_freeze::<proc:Freeze()>();\n+    is_freeze::<proc:Share()>();\n     is_static::<proc:'static()>();\n \n "}, {"sha": "acc3ca508b2f2fed9e0ea1224be39150417e74bb", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -17,7 +17,7 @@ fn a(_x: ~Foo:) {\n fn b(_x: ~Foo:Send) {\n }\n \n-fn c(x: ~Foo:Freeze+Send) {\n+fn c(x: ~Foo:Share+Send) {\n     a(x);\n }\n "}, {"sha": "7ba36cbc0dfd8ef5a1a962246a7ddef832dc2244", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n // Tests that a heterogeneous list of existential types can be put inside an Arc\n-// and shared between tasks as long as all types fulfill Freeze+Send.\n+// and shared between tasks as long as all types fulfill Send.\n \n // ignore-fast\n "}]}