{"sha": "b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OWY4YjZiNDkyOWVjMDliZTRmOWIxM2Y4N2FkNTZiMzIzNWJkMzk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-20T18:17:18Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-20T18:17:18Z"}, "message": "Merge #580\n\n580: extend selection expands macros and can totally panic r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0cdaf64f538467c3f5a974cac51413f495250f06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cdaf64f538467c3f5a974cac51413f495250f06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "html_url": "https://github.com/rust-lang/rust/commit/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "3508ba9bc2c2180a6495238c2fafa493557f36d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3508ba9bc2c2180a6495238c2fafa493557f36d0", "html_url": "https://github.com/rust-lang/rust/commit/3508ba9bc2c2180a6495238c2fafa493557f36d0"}, {"sha": "73836cdbbc928f3512156f0bc0166e5a39ad9864", "url": "https://api.github.com/repos/rust-lang/rust/commits/73836cdbbc928f3512156f0bc0166e5a39ad9864", "html_url": "https://github.com/rust-lang/rust/commit/73836cdbbc928f3512156f0bc0166e5a39ad9864"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "718b4def557c542f327cf2996a066fa303f670ca", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "patch": "@@ -51,7 +51,7 @@ mod tests {\n             }\n         \",\n         );\n-        let r = analysis.extend_selection(frange);\n+        let r = analysis.extend_selection(frange).unwrap();\n         assert_eq!(r, TextRange::from_to(51.into(), 56.into()));\n     }\n }"}, {"sha": "919d248e2cd03ff7db87b566925390633d7a9107", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "patch": "@@ -299,7 +299,7 @@ impl Analysis {\n     }\n \n     /// Gets the syntax tree of the file.\n-    pub fn file_syntax(&self, file_id: FileId) -> TreeArc<SourceFile> {\n+    pub fn parse(&self, file_id: FileId) -> TreeArc<SourceFile> {\n         self.db.source_file(file_id).clone()\n     }\n \n@@ -310,14 +310,15 @@ impl Analysis {\n     }\n \n     /// Selects the next syntactic nodes encopasing the range.\n-    pub fn extend_selection(&self, frange: FileRange) -> TextRange {\n-        extend_selection::extend_selection(&self.db, frange)\n+    pub fn extend_selection(&self, frange: FileRange) -> Cancelable<TextRange> {\n+        self.with_db(|db| extend_selection::extend_selection(db, frange))\n     }\n \n     /// Returns position of the mathcing brace (all types of braces are\n     /// supported).\n-    pub fn matching_brace(&self, file: &SourceFile, offset: TextUnit) -> Option<TextUnit> {\n-        ra_ide_api_light::matching_brace(file, offset)\n+    pub fn matching_brace(&self, position: FilePosition) -> Option<TextUnit> {\n+        let file = self.db.source_file(position.file_id);\n+        ra_ide_api_light::matching_brace(&file, position.offset)\n     }\n \n     /// Returns a syntax tree represented as `String`, for debug purposes.\n@@ -388,8 +389,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n     ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n-        self.db\n-            .catch_canceled(|db| goto_definition::goto_definition(db, position))\n+        self.with_db(|db| goto_definition::goto_definition(db, position))\n     }\n \n     /// Finds all usages of the reference at point.\n@@ -404,8 +404,7 @@ impl Analysis {\n \n     /// Computes parameter information for the given call expression.\n     pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n-        self.db\n-            .catch_canceled(|db| call_info::call_info(db, position))\n+        self.with_db(|db| call_info::call_info(db, position))\n     }\n \n     /// Returns a `mod name;` declaration which created the current module.\n@@ -420,33 +419,28 @@ impl Analysis {\n \n     /// Returns the root file of the given crate.\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n-        Ok(self.db.crate_graph().crate_root(crate_id))\n+        self.with_db(|db| db.crate_graph().crate_root(crate_id))\n     }\n \n     /// Returns the set of possible targets to run for the current file.\n     pub fn runnables(&self, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n-        self.db\n-            .catch_canceled(|db| runnables::runnables(db, file_id))\n+        self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n     /// Computes syntax highlighting for the given file.\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        self.db\n-            .catch_canceled(|db| syntax_highlighting::highlight(db, file_id))\n+        self.with_db(|db| syntax_highlighting::highlight(db, file_id))\n     }\n \n     /// Computes completions at the given position.\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        let completions = self\n-            .db\n-            .catch_canceled(|db| completion::completions(db, position))?;\n-        Ok(completions.map(|it| it.into()))\n+        self.with_db(|db| completion::completions(db, position).map(Into::into))\n     }\n \n     /// Computes assists (aks code actons aka intentions) for the given\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<SourceChange>> {\n-        Ok(self.db.assists(frange))\n+        self.with_db(|db| db.assists(frange))\n     }\n \n     /// Computes the set of diagnostics for the given file."}, {"sha": "02393f728b1444ab259465b334bb641edacd4b4c", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89f8b6b4929ec09be4f9b13f87ad56b3235bd39/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=b89f8b6b4929ec09be4f9b13f87ad56b3235bd39", "patch": "@@ -8,7 +8,7 @@ use lsp_types::{\n     WorkspaceEdit\n };\n use ra_ide_api::{\n-    FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity,\n+    FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity, Cancelable,\n };\n use ra_syntax::{AstNode, TextUnit};\n use rustc_hash::FxHashMap;\n@@ -40,9 +40,13 @@ pub fn handle_extend_selection(\n         .into_iter()\n         .map_conv_with(&line_index)\n         .map(|range| FileRange { file_id, range })\n-        .map(|frange| world.analysis().extend_selection(frange))\n-        .map_conv_with(&line_index)\n-        .collect();\n+        .map(|frange| {\n+            world\n+                .analysis()\n+                .extend_selection(frange)\n+                .map(|it| it.conv_with(&line_index))\n+        })\n+        .collect::<Cancelable<Vec<_>>>()?;\n     Ok(req::ExtendSelectionResult { selections })\n }\n \n@@ -51,7 +55,6 @@ pub fn handle_find_matching_brace(\n     params: req::FindMatchingBraceParams,\n ) -> Result<Vec<Position>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_syntax(file_id);\n     let line_index = world.analysis().file_line_index(file_id);\n     let res = params\n         .offsets\n@@ -60,7 +63,7 @@ pub fn handle_find_matching_brace(\n         .map(|offset| {\n             world\n                 .analysis()\n-                .matching_brace(&file, offset)\n+                .matching_brace(FilePosition { file_id, offset })\n                 .unwrap_or(offset)\n         })\n         .map_conv_with(&line_index)\n@@ -315,7 +318,7 @@ pub fn handle_completion(\n         let mut res = false;\n         if let Some(ctx) = params.context {\n             if ctx.trigger_character.unwrap_or_default() == \":\" {\n-                let source_file = world.analysis().file_syntax(position.file_id);\n+                let source_file = world.analysis().parse(position.file_id);\n                 let syntax = source_file.syntax();\n                 let text = syntax.text();\n                 if let Some(next_char) = text.char_at(position.offset) {"}]}