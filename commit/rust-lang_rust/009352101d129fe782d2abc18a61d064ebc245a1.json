{"sha": "009352101d129fe782d2abc18a61d064ebc245a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOTM1MjEwMWQxMjlmZTc4MmQyYWJjMThhNjFkMDY0ZWJjMjQ1YTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-03T00:17:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-03T01:06:33Z"}, "message": "Shift writer_util to a derived impl attached to the writer trait", "tree": {"sha": "2ea2a575c8b2f3d58fd26ff2abefefa94ae09ee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ea2a575c8b2f3d58fd26ff2abefefa94ae09ee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009352101d129fe782d2abc18a61d064ebc245a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009352101d129fe782d2abc18a61d064ebc245a1", "html_url": "https://github.com/rust-lang/rust/commit/009352101d129fe782d2abc18a61d064ebc245a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009352101d129fe782d2abc18a61d064ebc245a1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff00edb7e1fd669b7a333e0b3842f3751ee6d573", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff00edb7e1fd669b7a333e0b3842f3751ee6d573", "html_url": "https://github.com/rust-lang/rust/commit/ff00edb7e1fd669b7a333e0b3842f3751ee6d573"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "c20aaf14530ec284ab968f0447aaf7fc0243f16d", "filename": "src/libcore/io.rs", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/009352101d129fe782d2abc18a61d064ebc245a1/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009352101d129fe782d2abc18a61d064ebc245a1/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=009352101d129fe782d2abc18a61d064ebc245a1", "patch": "@@ -533,7 +533,34 @@ fn u64_from_be_bytes(data: ~[u8], start: uint, size: uint) -> u64 {\n     return val;\n }\n \n-impl writer_util for writer {\n+// FIXME: #3048 combine trait+impl (or just move these to\n+// default methods on writer)\n+trait writer_util {\n+    fn write_char(ch: char);\n+    fn write_str(s: &str);\n+    fn write_line(s: &str);\n+    fn write_int(n: int);\n+    fn write_uint(n: uint);\n+    fn write_le_uint(n: uint);\n+    fn write_le_int(n: int);\n+    fn write_be_uint(n: uint);\n+    fn write_be_int(n: int);\n+    fn write_be_u64(n: u64);\n+    fn write_be_u32(n: u32);\n+    fn write_be_u16(n: u16);\n+    fn write_be_i64(n: i64);\n+    fn write_be_i32(n: i32);\n+    fn write_be_i16(n: i16);\n+    fn write_le_u64(n: u64);\n+    fn write_le_u32(n: u32);\n+    fn write_le_u16(n: u16);\n+    fn write_le_i64(n: i64);\n+    fn write_le_i32(n: i32);\n+    fn write_le_i16(n: i16);\n+    fn write_u8(n: u8);\n+}\n+\n+impl<T:writer> T : writer_util {\n     fn write_char(ch: char) {\n         if ch as uint < 128u {\n             self.write(&[ch as u8]);\n@@ -552,17 +579,17 @@ impl writer_util for writer {\n     fn write_uint(n: uint) {\n         uint::to_str_bytes(false, n, 10u, |buf| self.write(buf))\n     }\n-    fn write_le_uint(n: uint, size: uint) {\n-        u64_to_le_bytes(n as u64, size, |v| self.write(v))\n+    fn write_le_uint(n: uint) {\n+        u64_to_le_bytes(n as u64, uint::bytes, |v| self.write(v))\n     }\n-    fn write_le_int(n: int, size: uint) {\n-        u64_to_le_bytes(n as u64, size, |v| self.write(v))\n+    fn write_le_int(n: int) {\n+        u64_to_le_bytes(n as u64, int::bytes, |v| self.write(v))\n     }\n-    fn write_be_uint(n: uint, size: uint) {\n-        u64_to_be_bytes(n as u64, size, |v| self.write(v))\n+    fn write_be_uint(n: uint) {\n+        u64_to_be_bytes(n as u64, uint::bytes, |v| self.write(v))\n     }\n-    fn write_be_int(n: int, size: uint) {\n-        u64_to_be_bytes(n as u64, size, |v| self.write(v))\n+    fn write_be_int(n: int) {\n+        u64_to_be_bytes(n as u64, int::bytes, |v| self.write(v))\n     }\n     fn write_be_u64(n: u64) {\n         u64_to_be_bytes(n, 8u, |v| self.write(v))"}, {"sha": "2d1a418f8315017599ced66f5e6ee45e0305e77f", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/009352101d129fe782d2abc18a61d064ebc245a1/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009352101d129fe782d2abc18a61d064ebc245a1/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=009352101d129fe782d2abc18a61d064ebc245a1", "patch": "@@ -411,7 +411,7 @@ impl printer for printer {\n             {offset: 0, pbreak: broken(inconsistent)}\n         }\n     }\n-    fn write_str(s: ~str) {\n+    fn print_str(s: ~str) {\n         while self.pending_indentation > 0 {\n             self.out.write_str(~\" \");\n             self.pending_indentation -= 1;\n@@ -471,7 +471,7 @@ impl printer for printer {\n             assert (L == len);\n             // assert L <= space;\n             self.space -= len;\n-            self.write_str(*s);\n+            self.print_str(*s);\n           }\n           EOF {\n             // EOF should never get here."}, {"sha": "24e4c5c6586c14674538c05e0f3a58dd2419e4a9", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/009352101d129fe782d2abc18a61d064ebc245a1/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009352101d129fe782d2abc18a61d064ebc245a1/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=009352101d129fe782d2abc18a61d064ebc245a1", "patch": "@@ -955,23 +955,28 @@ fn encode_index<T>(ebml_w: ebml::writer, buckets: ~[@~[entry<T>]],\n         ebml_w.start_tag(tag_index_buckets_bucket);\n         for vec::each(*bucket) |elt| {\n             ebml_w.start_tag(tag_index_buckets_bucket_elt);\n-            writer.write_be_uint(elt.pos, 4u);\n+            assert elt.pos < (u32::max_value as uint);\n+            writer.write_be_u32(elt.pos as u32);\n             write_fn(writer, elt.val);\n             ebml_w.end_tag();\n         }\n         ebml_w.end_tag();\n     }\n     ebml_w.end_tag();\n     ebml_w.start_tag(tag_index_table);\n-    for bucket_locs.each |pos| { writer.write_be_uint(pos, 4u); }\n+    for bucket_locs.each |pos| {\n+        assert pos < (u32::max_value as uint);\n+        writer.write_be_u32(pos as u32);\n+    }\n     ebml_w.end_tag();\n     ebml_w.end_tag();\n }\n \n fn write_str(writer: io::writer, &&s: ~str) { writer.write_str(s); }\n \n fn write_int(writer: io::writer, &&n: int) {\n-    writer.write_be_uint(n as uint, 4u);\n+    assert n < (u32::max_value as int);\n+    writer.write_be_u32(n as u32);\n }\n \n fn encode_meta_item(ebml_w: ebml::writer, mi: meta_item) {"}]}