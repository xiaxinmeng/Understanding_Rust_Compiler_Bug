{"sha": "acaf284e5580c5f65489a062635f1829551bec08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYWYyODRlNTU4MGM1ZjY1NDg5YTA2MjYzNWYxODI5NTUxYmVjMDg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-27T19:40:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-27T19:46:15Z"}, "message": "Remove unused tcx and mir params", "tree": {"sha": "1cd055e74ce86fe61254709b0dc93b197c981de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd055e74ce86fe61254709b0dc93b197c981de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acaf284e5580c5f65489a062635f1829551bec08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acaf284e5580c5f65489a062635f1829551bec08", "html_url": "https://github.com/rust-lang/rust/commit/acaf284e5580c5f65489a062635f1829551bec08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acaf284e5580c5f65489a062635f1829551bec08/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbc7f96d6438b93c9274675b276cfe934164704", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbc7f96d6438b93c9274675b276cfe934164704", "html_url": "https://github.com/rust-lang/rust/commit/4dbc7f96d6438b93c9274675b276cfe934164704"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "ce35a06f86a037a4e009d69052212e7c02d97229", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/acaf284e5580c5f65489a062635f1829551bec08/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acaf284e5580c5f65489a062635f1829551bec08/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=acaf284e5580c5f65489a062635f1829551bec08", "patch": "@@ -136,10 +136,10 @@ fn check_rvalue(\n ) -> McfResult {\n     match rvalue {\n         Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n-            check_operand(tcx, mir, operand, span)\n+            check_operand(operand, span)\n         }\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n-            check_place(tcx, mir, place, span)\n+            check_place(place, span)\n         }\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n@@ -153,11 +153,11 @@ fn check_rvalue(\n                 (CastTy::RPtr(_), CastTy::Float) => bug!(),\n                 (CastTy::RPtr(_), CastTy::Int(_)) => bug!(),\n                 (CastTy::Ptr(_), CastTy::RPtr(_)) => bug!(),\n-                _ => check_operand(tcx, mir, operand, span),\n+                _ => check_operand(operand, span),\n             }\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _) => {\n-            check_operand(tcx, mir, operand, span)\n+            check_operand(operand, span)\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _) |\n         Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), _, _) |\n@@ -171,8 +171,8 @@ fn check_rvalue(\n         )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n-            check_operand(tcx, mir, lhs, span)?;\n-            check_operand(tcx, mir, rhs, span)?;\n+            check_operand(lhs, span)?;\n+            check_operand(rhs, span)?;\n             let ty = lhs.ty(mir, tcx);\n             if ty.is_integral() || ty.is_bool() || ty.is_char() {\n                 Ok(())\n@@ -191,7 +191,7 @@ fn check_rvalue(\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(mir, tcx);\n             if ty.is_integral() || ty.is_bool() {\n-                check_operand(tcx, mir, operand, span)\n+                check_operand(operand, span)\n             } else {\n                 Err((\n                     span,\n@@ -201,7 +201,7 @@ fn check_rvalue(\n         }\n         Rvalue::Aggregate(_, operands) => {\n             for operand in operands {\n-                check_operand(tcx, mir, operand, span)?;\n+                check_operand(operand, span)?;\n             }\n             Ok(())\n         }\n@@ -216,11 +216,11 @@ fn check_statement(\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(place, rval) => {\n-            check_place(tcx, mir, place, span)?;\n+            check_place(place, span)?;\n             check_rvalue(tcx, mir, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) => check_place(tcx, mir, place, span),\n+        StatementKind::FakeRead(_, place) => check_place(place, span),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),\n@@ -239,22 +239,18 @@ fn check_statement(\n }\n \n fn check_operand(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n     operand: &Operand<'tcx>,\n     span: Span,\n ) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            check_place(tcx, mir, place, span)\n+            check_place(place, span)\n         }\n         Operand::Constant(_) => Ok(()),\n     }\n }\n \n fn check_place(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir: &'a Mir<'tcx>,\n     place: &Place<'tcx>,\n     span: Span,\n ) -> McfResult {\n@@ -268,7 +264,7 @@ fn check_place(\n             match proj.elem {\n                 | ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. }\n                 | ProjectionElem::Deref | ProjectionElem::Field(..) | ProjectionElem::Index(_) => {\n-                    check_place(tcx, mir, &proj.base, span)\n+                    check_place(&proj.base, span)\n                 }\n                 | ProjectionElem::Downcast(..) => {\n                     Err((span, \"`match` or `if let` in `const fn` is unstable\".into()))\n@@ -290,11 +286,11 @@ fn check_terminator(\n         | TerminatorKind::Resume => Ok(()),\n \n         TerminatorKind::Drop { location, .. } => {\n-            check_place(tcx, mir, location, span)\n+            check_place(location, span)\n         }\n         TerminatorKind::DropAndReplace { location, value, .. } => {\n-            check_place(tcx, mir, location, span)?;\n-            check_operand(tcx, mir, value, span)\n+            check_place(location, span)?;\n+            check_operand(value, span)\n         },\n \n         TerminatorKind::FalseEdges { .. } | TerminatorKind::SwitchInt { .. } => Err((\n@@ -346,10 +342,10 @@ fn check_terminator(\n                     )),\n                 }\n \n-                check_operand(tcx, mir, func, span)?;\n+                check_operand(func, span)?;\n \n                 for arg in args {\n-                    check_operand(tcx, mir, arg, span)?;\n+                    check_operand(arg, span)?;\n                 }\n                 Ok(())\n             } else {\n@@ -363,7 +359,7 @@ fn check_terminator(\n             msg: _,\n             target: _,\n             cleanup: _,\n-        } => check_operand(tcx, mir, cond, span),\n+        } => check_operand(cond, span),\n \n         TerminatorKind::FalseUnwind { .. } => {\n             Err((span, \"loops are not allowed in const fn\".into()))"}]}