{"sha": "19c07352319e1953bdff52618a540dd915a0abbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YzA3MzUyMzE5ZTE5NTNiZGZmNTI2MThhNTQwZGQ5MTVhMGFiYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-13T00:45:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-13T00:45:45Z"}, "message": "auto merge of #9132 : catamorphism/rust/rustpkg-recursive-deps, r=catamorphism,metajack\n\nr? @metajack ...recursive dependencies\r\n\r\nCloses #8524", "tree": {"sha": "6d8d70a2d6ca411843add72b11040fe0e83f88b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8d70a2d6ca411843add72b11040fe0e83f88b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c07352319e1953bdff52618a540dd915a0abbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c07352319e1953bdff52618a540dd915a0abbd", "html_url": "https://github.com/rust-lang/rust/commit/19c07352319e1953bdff52618a540dd915a0abbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c07352319e1953bdff52618a540dd915a0abbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "761ae0035731ebc5c9e42b331fa86fb0385ad9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/761ae0035731ebc5c9e42b331fa86fb0385ad9f1", "html_url": "https://github.com/rust-lang/rust/commit/761ae0035731ebc5c9e42b331fa86fb0385ad9f1"}, {"sha": "91e64d04072110235e504e6151ddf861214b1f14", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e64d04072110235e504e6151ddf861214b1f14", "html_url": "https://github.com/rust-lang/rust/commit/91e64d04072110235e504e6151ddf861214b1f14"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "7155233cd372e3d81bd4736275616cd991ff6222", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=19c07352319e1953bdff52618a540dd915a0abbd", "patch": "@@ -55,6 +55,10 @@ pub fn workspace_contains_package_id(pkgid: &PkgId, workspace: &Path) -> bool {\n pub fn workspace_contains_package_id_(pkgid: &PkgId, workspace: &Path,\n // Returns the directory it was actually found in\n              workspace_to_src_dir: &fn(&Path) -> Path) -> Option<Path> {\n+    if !os::path_is_dir(workspace) {\n+        return None;\n+    }\n+\n     let src_dir = workspace_to_src_dir(workspace);\n \n     let mut found = None;"}, {"sha": "8212e3e279977640fa1d40d8058ec90c4b6dc0cb", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=19c07352319e1953bdff52618a540dd915a0abbd", "patch": "@@ -33,7 +33,7 @@ use rustc::metadata::filesearch::rust_path;\n use extra::{getopts};\n use syntax::{ast, diagnostic};\n use util::*;\n-use messages::*;\n+use messages::{error, warn, note};\n use path_util::build_pkg_id_in_workspace;\n use path_util::{U_RWX, in_rust_path};\n use path_util::{built_executable_in_workspace, built_library_in_workspace, default_workspace};"}, {"sha": "bf80dc14166fee15c847c11b84ef8301a6a4f7aa", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=19c07352319e1953bdff52618a540dd915a0abbd", "patch": "@@ -1581,6 +1581,28 @@ fn pkgid_pointing_to_subdir() {\n     assert_executable_exists(&workspace, \"testpkg\");\n }\n \n+fn test_recursive_deps() {\n+    let a_id = PkgId::new(\"a\");\n+    let b_id = PkgId::new(\"b\");\n+    let c_id = PkgId::new(\"c\");\n+    let b_workspace = create_local_package_with_dep(&b_id, &c_id);\n+    writeFile(&b_workspace.push(\"src\").push(\"c-0.1\").push(\"lib.rs\"),\n+               \"pub fn g() {}\");\n+    let a_workspace = create_local_package(&a_id);\n+    writeFile(&a_workspace.push(\"src\").push(\"a-0.1\").push(\"main.rs\"),\n+               \"extern mod b; use b::f; fn main() { f(); }\");\n+    writeFile(&b_workspace.push(\"src\").push(\"b-0.1\").push(\"lib.rs\"),\n+               \"extern mod c; use c::g; pub fn f() { g(); }\");\n+    let environment = Some(~[(~\"RUST_PATH\", b_workspace.to_str())]);\n+    debug!(\"RUST_PATH=%s\", b_workspace.to_str());\n+    command_line_test_with_env([~\"install\", ~\"a\"],\n+                               &a_workspace,\n+                               environment);\n+    assert_lib_exists(&a_workspace, &Path(\"a\"), NoVersion);\n+    assert_lib_exists(&b_workspace, &Path(\"b\"), NoVersion);\n+    assert_lib_exists(&b_workspace, &Path(\"c\"), NoVersion);\n+}\n+\n /// Returns true if p exists and is executable\n fn is_executable(p: &Path) -> bool {\n     use std::libc::consts::os::posix88::{S_IXUSR};"}, {"sha": "708d50bb53794e5fd64318b9cb1b73de87b8f559", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c07352319e1953bdff52618a540dd915a0abbd/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=19c07352319e1953bdff52618a540dd915a0abbd", "patch": "@@ -22,7 +22,9 @@ use rustc::driver::session::{lib_crate, bin_crate};\n use context::{in_target, StopBefore, Link, Assemble, BuildContext};\n use package_id::PkgId;\n use package_source::PkgSrc;\n-use path_util::{installed_library_in_workspace, U_RWX};\n+use workspace::pkg_parent_workspaces;\n+use path_util::{installed_library_in_workspace, U_RWX, rust_path};\n+use messages::error;\n \n pub use target::{OutputType, Main, Lib, Bench, Test};\n use workcache_support::{digest_file_with_date, digest_only_date};\n@@ -243,9 +245,7 @@ pub fn compile_input(context: &BuildContext,\n     let mut crate = driver::phase_1_parse_input(sess, cfg.clone(), &input);\n     crate = driver::phase_2_configure_and_expand(sess, cfg.clone(), crate);\n \n-    // Not really right. Should search other workspaces too, and the installed\n-    // database (which doesn't exist yet)\n-    find_and_install_dependencies(context, sess, exec, workspace, crate,\n+    find_and_install_dependencies(context, pkg_id, sess, exec, crate,\n                                   |p| {\n                                       debug!(\"a dependency: %s\", p.to_str());\n                                       // Pass the directory containing a dependency\n@@ -362,13 +362,15 @@ pub fn compile_crate(ctxt: &BuildContext,\n /// Collect all `extern mod` directives in `c`, then\n /// try to install their targets, failing if any target\n /// can't be found.\n-pub fn find_and_install_dependencies(ctxt: &BuildContext,\n+pub fn find_and_install_dependencies(context: &BuildContext,\n+                                     parent: &PkgId,\n                                      sess: session::Session,\n                                      exec: &mut workcache::Exec,\n-                                     workspace: &Path,\n                                      c: &ast::Crate,\n                                      save: @fn(Path)\n                                      ) {\n+    use conditions::nonexistent_package::cond;\n+\n     do c.each_view_item() |vi: &ast::view_item| {\n         debug!(\"A view item!\");\n         match vi.node {\n@@ -379,7 +381,7 @@ pub fn find_and_install_dependencies(ctxt: &BuildContext,\n                     None => sess.str_of(lib_ident)\n                 };\n                 debug!(\"Finding and installing... %s\", lib_name);\n-                match installed_library_in_workspace(&Path(lib_name), &ctxt.sysroot()) {\n+                match installed_library_in_workspace(&Path(lib_name), &context.sysroot()) {\n                     Some(ref installed_path) => {\n                         debug!(\"It exists: %s\", installed_path.to_str());\n                         // Say that [path for c] has a discovered dependency on\n@@ -397,8 +399,18 @@ pub fn find_and_install_dependencies(ctxt: &BuildContext,\n                                lib_name.to_str());\n                         // Try to install it\n                         let pkg_id = PkgId::new(lib_name);\n+                        let workspaces = pkg_parent_workspaces(&context.context, &pkg_id);\n+                        let dep_workspace = if workspaces.is_empty() {\n+                            error(fmt!(\"Couldn't find package %s, which is needed by %s, \\\n+                                            in any of the workspaces in the RUST_PATH (%?)\",\n+                                            lib_name, parent.to_str(), rust_path()));\n+                            cond.raise((pkg_id.clone(), ~\"Dependency not found\"))\n+                        }\n+                        else {\n+                            workspaces[0]\n+                        };\n                         let (outputs_disc, inputs_disc) =\n-                            ctxt.install(PkgSrc::new(workspace.clone(), false, pkg_id));\n+                            context.install(PkgSrc::new(dep_workspace.clone(), false, pkg_id));\n                         debug!(\"Installed %s, returned %? dependencies and \\\n                                %? transitive dependencies\",\n                                lib_name, outputs_disc.len(), inputs_disc.len());\n@@ -423,7 +435,7 @@ pub fn find_and_install_dependencies(ctxt: &BuildContext,\n                         // Also, add an additional search path\n                         debug!(\"Adding additional search path: %s\", lib_name);\n                         let installed_library =\n-                            installed_library_in_workspace(&Path(lib_name), workspace)\n+                            installed_library_in_workspace(&Path(lib_name), &dep_workspace)\n                                 .expect( fmt!(\"rustpkg failed to install dependency %s\",\n                                               lib_name));\n                         let install_dir = installed_library.pop();"}]}