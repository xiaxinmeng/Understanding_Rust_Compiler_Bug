{"sha": "45980e809f6f661230af5a92766b8fde454aee2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTgwZTgwOWY2ZjY2MTIzMGFmNWE5Mjc2NmI4ZmRlNDU0YWVlMmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-16T12:54:11Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-08-16T12:54:11Z"}, "message": "bless you nll", "tree": {"sha": "ba81d53fc24369c8705a7f97c6e048b3180bc1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba81d53fc24369c8705a7f97c6e048b3180bc1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45980e809f6f661230af5a92766b8fde454aee2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45980e809f6f661230af5a92766b8fde454aee2a", "html_url": "https://github.com/rust-lang/rust/commit/45980e809f6f661230af5a92766b8fde454aee2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45980e809f6f661230af5a92766b8fde454aee2a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ff337a8e286a5b472f71b3bbdc3d4b6b840870f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff337a8e286a5b472f71b3bbdc3d4b6b840870f", "html_url": "https://github.com/rust-lang/rust/commit/2ff337a8e286a5b472f71b3bbdc3d4b6b840870f"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "64fd1a4a78d96c3179243de951c99861dded5791", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     ) -> &dyn Foo\n    |          ^^^^^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#27r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n \n error: lifetime may not live long enough\n   --> $DIR/issue-63388-1.rs:15:5"}, {"sha": "e33001b9244da498e104e368cd59837de7041fcf", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n@@ -30,7 +30,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                                          ^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62"}, {"sha": "3e58c973019758312630e9098034f8b55054f438", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:15:47\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:21:53\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:25:62\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:29:62\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:33:71\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:37:67"}, {"sha": "b8a538088109fe1155f5e8d691f083f812932472", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:15:51\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:21:57\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:25:66\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:29:66\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:33:75\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:37:75"}, {"sha": "cee008de6671fb4347b286b2fadf77802c7faf43", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:15:61\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:19:70\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:23:70\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:27:79\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:31:79"}, {"sha": "c3c15485b229ce57cd01b9a3710b7d2ba9a45728", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:24:47\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:30:53\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:34:62\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:38:62\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:42:71\n@@ -104,7 +104,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:46:71\n@@ -124,7 +124,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                                     ^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-self-async.rs:50:73"}, {"sha": "ff50f6825bc6b01d75333dcccbc3ba75abfd2de5", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45980e809f6f661230af5a92766b8fde454aee2a/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=45980e809f6f661230af5a92766b8fde454aee2a", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:15:57\n@@ -24,7 +24,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:19:66\n@@ -44,7 +44,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:23:66\n@@ -64,7 +64,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:27:75\n@@ -84,7 +84,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n-   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:31:71"}]}