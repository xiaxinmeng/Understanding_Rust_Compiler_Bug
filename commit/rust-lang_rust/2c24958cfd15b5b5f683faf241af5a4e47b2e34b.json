{"sha": "2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "node_id": "C_kwDOAAsO6NoAKDJjMjQ5NThjZmQxNWI1YjVmNjgzZmFmMjQxYWY1YTRlNDdiMmUzNGI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-17T02:20:25Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-17T02:29:02Z"}, "message": "Remove `TraitDef::attributes`.\n\nBecause it's always empty.", "tree": {"sha": "9ff0b974df236fd907a5906a595c207df2d38dfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff0b974df236fd907a5906a595c207df2d38dfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "html_url": "https://github.com/rust-lang/rust/commit/2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5746c752f4e3f294cd252f7dd611a1908b12dd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5746c752f4e3f294cd252f7dd611a1908b12dd8e", "html_url": "https://github.com/rust-lang/rust/commit/5746c752f4e3f294cd252f7dd611a1908b12dd8e"}], "stats": {"total": 19, "additions": 2, "deletions": 17}, "files": [{"sha": "77e0b6c55a80e5a03ee4afa671ed641c7a82f858", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -15,7 +15,6 @@ pub fn expand_deriving_copy(\n ) {\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(marker::Copy),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "ee4c5aea1a3528001aaa1c93dd163134211fe751", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -71,7 +71,6 @@ pub fn expand_deriving_clone(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(clone::Clone),\n         additional_bounds: bounds,\n         generics: Bounds::empty(),"}, {"sha": "f99ee8cb2d53c1b5b7a9167ed125a1108c1753f6", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -23,7 +23,6 @@ pub fn expand_deriving_eq(\n     let attrs = vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "8aa16dfeb0f1f3e56dd4ba935e3c6a8997cb1b71", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -18,7 +18,6 @@ pub fn expand_deriving_ord(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "73be9362e4eb47eea4eedeb56ee3104c137df76a", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -98,7 +98,6 @@ pub fn expand_deriving_partial_eq(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "137c779f81b842ae83a6ed9316395e80d4d1db63", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -36,7 +36,6 @@ pub fn expand_deriving_partial_ord(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: vec![],\n         path: path_std!(cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: Bounds::empty(),"}, {"sha": "af370a7751da5dac908a54b1b32e754cf4ae99f0", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -19,7 +19,6 @@ pub fn expand_deriving_debug(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "47da0862b52fcd0306d060b91daeaa9f54f19686", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -22,7 +22,6 @@ pub fn expand_deriving_rustc_decodable(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "a431832080c0c1353eabf39d290b47c37332e43e", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -25,7 +25,6 @@ pub fn expand_deriving_default(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new(vec![kw::Default, sym::Default]),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "d43c66a5fa644c373c499616aa64b3ccadc8673e", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -106,7 +106,6 @@ pub fn expand_deriving_rustc_encodable(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "e09553be830d3d556b79ac198614258496937a0c", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -184,8 +184,6 @@ pub struct TraitDef<'a> {\n     /// The span for the current #[derive(Foo)] header.\n     pub span: Span,\n \n-    pub attributes: Vec<ast::Attribute>,\n-\n     /// Path of the trait, including any type parameters\n     pub path: Path,\n \n@@ -718,15 +716,13 @@ impl<'a> TraitDef<'a> {\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));\n+        let attrs = vec![attr];\n         let opt_trait_ref = Some(trait_ref);\n \n-        let mut a = vec![attr];\n-        a.extend(self.attributes.iter().cloned());\n-\n         cx.item(\n             self.span,\n             Ident::empty(),\n-            a,\n+            attrs,\n             ast::ItemKind::Impl(Box::new(ast::Impl {\n                 unsafety: ast::Unsafe::No,\n                 polarity: ast::ImplPolarity::Positive,"}, {"sha": "9aa170bec14d8bd8e736972fcec6d365e94f451c", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c24958cfd15b5b5f683faf241af5a4e47b2e34b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=2c24958cfd15b5b5f683faf241af5a4e47b2e34b", "patch": "@@ -21,7 +21,6 @@ pub fn expand_deriving_hash(\n     let arg = Path::new_local(typaram);\n     let hash_trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}]}