{"sha": "ac9dd1bd0cb6a2c1c86f52f3331db20768704de5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOWRkMWJkMGNiNmEyYzFjODZmNTJmMzMzMWRiMjA3Njg3MDRkZTU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-07-05T17:22:08Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-07-06T02:31:18Z"}, "message": "Fixed up a few comments.", "tree": {"sha": "ccf962d31bdadff8fada54bb26ebbe92c3aa5d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf962d31bdadff8fada54bb26ebbe92c3aa5d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5", "html_url": "https://github.com/rust-lang/rust/commit/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481068a707679257e2a738b40987246e0420e787", "url": "https://api.github.com/repos/rust-lang/rust/commits/481068a707679257e2a738b40987246e0420e787", "html_url": "https://github.com/rust-lang/rust/commit/481068a707679257e2a738b40987246e0420e787"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "4d297fa918a11d1bd2d32eb15abbcd7832da238f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ac9dd1bd0cb6a2c1c86f52f3331db20768704de5", "patch": "@@ -197,11 +197,11 @@ pub struct Compiler {\n \n #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n pub enum DocTests {\n-    // Default, run normal tests and doc tests.\n+    /// Run normal tests and doc tests (default).\n     Yes,\n-    // Do not run any doc tests.\n+    /// Do not run any doc tests.\n     No,\n-    // Only run doc tests.\n+    /// Only run doc tests.\n     Only,\n }\n \n@@ -221,10 +221,10 @@ pub enum GitRepo {\n /// methods specifically on this structure itself (to make it easier to\n /// organize).\n pub struct Build {\n-    // User-specified configuration via config.toml\n+    /// User-specified configuration from `config.toml`.\n     config: Config,\n \n-    // Derived properties from the above two configurations\n+    // Properties derived from the above configuration\n     src: PathBuf,\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n@@ -240,12 +240,12 @@ pub struct Build {\n     doc_tests: DocTests,\n     verbosity: usize,\n \n-    // Targets for which to build.\n+    // Targets for which to build\n     build: Interned<String>,\n     hosts: Vec<Interned<String>>,\n     targets: Vec<Interned<String>>,\n \n-    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents.\n+    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n \n@@ -255,7 +255,7 @@ pub struct Build {\n     cxx: HashMap<Interned<String>, cc::Tool>,\n     ar: HashMap<Interned<String>, PathBuf>,\n     ranlib: HashMap<Interned<String>, PathBuf>,\n-    // Misc\n+    // Miscellaneous\n     crates: HashMap<Interned<String>, Crate>,\n     is_sudo: bool,\n     ci_env: CiEnv,"}, {"sha": "783bccd0709a693ff7062bb867eded8fdf6a48de", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac9dd1bd0cb6a2c1c86f52f3331db20768704de5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ac9dd1bd0cb6a2c1c86f52f3331db20768704de5", "patch": "@@ -4458,7 +4458,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n         return;\n     }\n \n-    // Make a vector of booleans initially false, set to true when used.\n+    // Make a vector of booleans initially `false`; set to `true` when used.\n     let mut types_used = vec![false; own_counts.types];\n \n     for leaf_ty in ty.walk() {\n@@ -4467,7 +4467,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n             types_used[index as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit\n-            // an error for not using a type Parameter.\n+            // an error for not using a type parameter.\n             assert!(tcx.sess.has_errors());\n             return;\n         }"}]}