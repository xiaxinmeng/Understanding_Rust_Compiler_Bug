{"sha": "c10b23e2e0ef86f126a4589ac32c92f747d82eaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMGIyM2UyZTBlZjg2ZjEyNmE0NTg5YWMzMmM5MmY3NDdkODJlYWY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-24T14:20:37Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-09-24T14:21:37Z"}, "message": "encode region::Scope using fewer bytes\n\nNow that region::Scope is no longer interned, its size is more\nimportant. This PR encodes region::Scope in 8 bytes instead of 12, which\nshould speed up region inference somewhat (perf testing needed) and\nshould improve the margins on #36799 by 64MB (that's not a lot, I did\nthis PR mostly to speed up region inference).", "tree": {"sha": "61038e61ec3b5ac6a5b8e4acffeb1097ff91b8c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61038e61ec3b5ac6a5b8e4acffeb1097ff91b8c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10b23e2e0ef86f126a4589ac32c92f747d82eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10b23e2e0ef86f126a4589ac32c92f747d82eaf", "html_url": "https://github.com/rust-lang/rust/commit/c10b23e2e0ef86f126a4589ac32c92f747d82eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10b23e2e0ef86f126a4589ac32c92f747d82eaf/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8214ab1662ed71a78435589dee31d37e37d9026e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8214ab1662ed71a78435589dee31d37e37d9026e", "html_url": "https://github.com/rust-lang/rust/commit/8214ab1662ed71a78435589dee31d37e37d9026e"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "2bbf807807baddfda7ac88f21bb8186f021c081e", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c10b23e2e0ef86f126a4589ac32c92f747d82eaf/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10b23e2e0ef86f126a4589ac32c92f747d82eaf/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=c10b23e2e0ef86f126a4589ac32c92f747d82eaf", "patch": "@@ -515,22 +515,7 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n });\n \n impl_stable_hash_for!(struct ::middle::region::FirstStatementIndex { idx });\n-\n-impl<'gcx> HashStable<StableHashingContext<'gcx>> for ::middle::region::Scope {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'gcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        self.data().hash_stable(hcx, hasher)\n-    }\n-}\n-\n-impl_stable_hash_for!(enum ::middle::region::ScopeData {\n-    Node(local_id),\n-    Destruction(local_id),\n-    CallSite(local_id),\n-    Arguments(local_id),\n-    Remainder(block_remainder)\n-});\n+impl_stable_hash_for!(struct ::middle::region::Scope { id, code });\n \n impl<'gcx> ToStableHashKey<StableHashingContext<'gcx>> for region::Scope {\n     type KeyType = region::Scope;"}, {"sha": "c1793792d65bf04ba8dcaf716cdff38d02c74263", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c10b23e2e0ef86f126a4589ac32c92f747d82eaf/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10b23e2e0ef86f126a4589ac32c92f747d82eaf/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=c10b23e2e0ef86f126a4589ac32c92f747d82eaf", "patch": "@@ -98,9 +98,16 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n /// generated via deriving here.\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, RustcEncodable, RustcDecodable)]\n pub struct Scope {\n-    pub scope_data: ScopeData\n+    pub(crate) id: hir::ItemLocalId,\n+    pub(crate) code: u32\n }\n \n+const SCOPE_DATA_NODE: u32 = !0;\n+const SCOPE_DATA_CALLSITE: u32 = !1;\n+const SCOPE_DATA_ARGUMENTS: u32 = !2;\n+const SCOPE_DATA_DESTRUCTION: u32 = !3;\n+const SCOPE_DATA_REMAINDER_MAX: u32 = !4;\n+\n #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, RustcEncodable, RustcDecodable)]\n pub enum ScopeData {\n     Node(hir::ItemLocalId),\n@@ -148,11 +155,9 @@ pub struct BlockRemainder {\n          RustcDecodable, Debug, Copy)]\n pub struct FirstStatementIndex { pub idx: u32 }\n \n-pub const FIRST_STATEMENT_MAX: usize = !0u32 as usize;\n-\n impl Idx for FirstStatementIndex {\n     fn new(idx: usize) -> Self {\n-        assert!(idx <= FIRST_STATEMENT_MAX);\n+        assert!(idx <= SCOPE_DATA_REMAINDER_MAX as usize);\n         FirstStatementIndex { idx: idx as u32 }\n     }\n \n@@ -164,15 +169,31 @@ impl Idx for FirstStatementIndex {\n impl From<ScopeData> for Scope {\n     #[inline]\n     fn from(scope_data: ScopeData) -> Self {\n-        Self { scope_data }\n+        let (id, code) = match scope_data {\n+            ScopeData::Node(id) => (id, SCOPE_DATA_NODE),\n+            ScopeData::CallSite(id) => (id, SCOPE_DATA_CALLSITE),\n+            ScopeData::Arguments(id) => (id, SCOPE_DATA_ARGUMENTS),\n+            ScopeData::Destruction(id) => (id, SCOPE_DATA_DESTRUCTION),\n+            ScopeData::Remainder(r) => (r.block, r.first_statement_index.index() as u32)\n+        };\n+        Self { id, code }\n     }\n }\n \n #[allow(non_snake_case)]\n impl Scope {\n     #[inline]\n     pub fn data(self) -> ScopeData {\n-        self.scope_data\n+        match self.code {\n+            SCOPE_DATA_NODE => ScopeData::Node(self.id),\n+            SCOPE_DATA_CALLSITE => ScopeData::CallSite(self.id),\n+            SCOPE_DATA_ARGUMENTS => ScopeData::Arguments(self.id),\n+            SCOPE_DATA_DESTRUCTION => ScopeData::Destruction(self.id),\n+            idx => ScopeData::Remainder(BlockRemainder {\n+                block: self.id,\n+                first_statement_index: FirstStatementIndex { idx }\n+            })\n+        }\n     }\n \n     #[inline]\n@@ -207,17 +228,7 @@ impl Scope {\n     /// NB: likely to be replaced as API is refined; e.g. pnkfelix\n     /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.\n     pub fn item_local_id(&self) -> hir::ItemLocalId {\n-        // TODO: killme\n-        match self.data() {\n-            ScopeData::Node(id) => id,\n-\n-            // These cases all return rough approximations to the\n-            // precise scope denoted by `self`.\n-            ScopeData::Remainder(br) => br.block,\n-            ScopeData::Destruction(id) |\n-            ScopeData::CallSite(id) |\n-            ScopeData::Arguments(id) => id,\n-        }\n+        self.id\n     }\n \n     pub fn node_id(&self, tcx: TyCtxt, scope_tree: &ScopeTree) -> ast::NodeId {"}]}