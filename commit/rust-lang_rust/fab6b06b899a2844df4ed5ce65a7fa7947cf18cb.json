{"sha": "fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjZiMDZiODk5YTI4NDRkZjRlZDVjZTY1YTdmYTc5NDdjZjE4Y2I=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-13T21:00:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-13T21:00:10Z"}, "message": "Add treat-err-as-bug flag in rustdoc", "tree": {"sha": "d594cc447f39af37c68f09190fb80cc4ad2c00b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d594cc447f39af37c68f09190fb80cc4ad2c00b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "html_url": "https://github.com/rust-lang/rust/commit/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6810f5286b6b91daab06fc3dccb27d8c46f14349", "url": "https://api.github.com/repos/rust-lang/rust/commits/6810f5286b6b91daab06fc3dccb27d8c46f14349", "html_url": "https://github.com/rust-lang/rust/commit/6810f5286b6b91daab06fc3dccb27d8c46f14349"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "2feeecb388f38d0976be7f8d641930ceab98bd6e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "patch": "@@ -260,9 +260,10 @@ impl DocAccessLevels for AccessLevels<DefId> {\n ///\n /// If the given `error_format` is `ErrorOutputType::Json` and no `SourceMap` is given, a new one\n /// will be created for the handler.\n-pub fn new_handler(error_format: ErrorOutputType, source_map: Option<Lrc<source_map::SourceMap>>)\n-    -> errors::Handler\n-{\n+pub fn new_handler(error_format: ErrorOutputType,\n+                   source_map: Option<Lrc<source_map::SourceMap>>,\n+                   treat_err_as_bug: bool,\n+) -> errors::Handler {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n     // stick to the defaults\n     let sessopts = Options::default();\n@@ -299,7 +300,7 @@ pub fn new_handler(error_format: ErrorOutputType, source_map: Option<Lrc<source_\n         emitter,\n         errors::HandlerFlags {\n             can_emit_warnings: true,\n-            treat_err_as_bug: false,\n+            treat_err_as_bug,\n             report_delayed_bugs: false,\n             external_macro_backtrace: false,\n             ..Default::default()\n@@ -323,9 +324,9 @@ pub fn run_core(search_paths: SearchPaths,\n                 lint_cap: Option<lint::Level>,\n                 describe_lints: bool,\n                 mut manual_passes: Vec<String>,\n-                mut default_passes: passes::DefaultPassOption)\n-    -> (clean::Crate, RenderInfo, Vec<String>)\n-{\n+                mut default_passes: passes::DefaultPassOption,\n+                treat_err_as_bug: bool,\n+) -> (clean::Crate, RenderInfo, Vec<String>) {\n     // Parse, resolve, and typecheck the given crate.\n \n     let cpath = match input {\n@@ -388,7 +389,9 @@ pub fn run_core(search_paths: SearchPaths,\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n         let source_map = Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()));\n-        let diagnostic_handler = new_handler(error_format, Some(source_map.clone()));\n+        let diagnostic_handler = new_handler(error_format,\n+                                             Some(source_map.clone()),\n+                                             treat_err_as_bug);\n \n         let mut sess = session::build_session_(\n             sessopts, cpath, diagnostic_handler, source_map,"}, {"sha": "5f03ee5f68a0c07b5c3812f190ddff999aadf67d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "patch": "@@ -404,8 +404,11 @@ fn main_args(args: &[String]) -> isize {\n                                   `short` (instead was `{}`)\", arg));\n         }\n     };\n+    let treat_err_as_bug = matches.opt_strs(\"Z\").iter().any(|x| {\n+        *x == \"treat-err-as-bug\"\n+    });\n \n-    let diag = core::new_handler(error_format, None);\n+    let diag = core::new_handler(error_format, None, treat_err_as_bug);\n \n     // check for deprecated options\n     check_deprecated_options(&matches, &diag);\n@@ -560,7 +563,7 @@ fn main_args(args: &[String]) -> isize {\n     let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, error_format,\n                             move |out| {\n         let Output { krate, passes, renderinfo } = out;\n-        let diag = core::new_handler(error_format, None);\n+        let diag = core::new_handler(error_format, None, treat_err_as_bug);\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n             Some(\"html\") | None => {\n@@ -691,6 +694,9 @@ where R: 'static + Send,\n     let force_unstable_if_unmarked = matches.opt_strs(\"Z\").iter().any(|x| {\n         *x == \"force-unstable-if-unmarked\"\n     });\n+    let treat_err_as_bug = matches.opt_strs(\"Z\").iter().any(|x| {\n+        *x == \"treat-err-as-bug\"\n+    });\n \n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -703,7 +709,8 @@ where R: 'static + Send,\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n                            force_unstable_if_unmarked, edition, cg, error_format,\n-                           lint_opts, lint_cap, describe_lints, manual_passes, default_passes);\n+                           lint_opts, lint_cap, describe_lints, manual_passes, default_passes,\n+                           treat_err_as_bug);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "0c4c5dc316e195cd2f45dd5cf5cf5201b3d6127c", "filename": "src/test/rustdoc-ui/treat-err-as-bug.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Ftest%2Frustdoc-ui%2Ftreat-err-as-bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Ftest%2Frustdoc-ui%2Ftreat-err-as-bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftreat-err-as-bug.rs?ref=fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Ztreat-err-as-bug --error-format=human\n+\n+pub fn foo() {"}, {"sha": "d96415ed050bae3ecf285dd6d9a7508e89cbc384", "filename": "src/test/rustdoc-ui/treat-err-as-bug.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Ftest%2Frustdoc-ui%2Ftreat-err-as-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fab6b06b899a2844df4ed5ce65a7fa7947cf18cb/src%2Ftest%2Frustdoc-ui%2Ftreat-err-as-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftreat-err-as-bug.stderr?ref=fab6b06b899a2844df4ed5ce65a7fa7947cf18cb", "patch": "@@ -0,0 +1,21 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/treat-err-as-bug.rs:13:16\n+   |\n+13 | pub fn foo() {\n+   |              - ^\n+   |              |\n+   |              un-closed delimiter\n+\n+thread '<unnamed>' panicked at 'encountered error with `-Z treat_err_as_bug', librustc_errors/lib.rs:486:13\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n+\n+error: internal compiler error: unexpected panic\n+\n+note: the compiler unexpectedly panicked. this is a bug.\n+\n+note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n+\n+note: rustc 1.30.0-dev running on x86_64-apple-darwin\n+\n+note: compiler flags: -Z ui-testing -Z unstable-options -Z treat-err-as-bug\n+"}]}