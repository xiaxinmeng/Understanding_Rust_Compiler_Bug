{"sha": "f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YWExYmNlYjkyY2UyMjA3YTJmM2RiMDdjM2ZlODkyZmExOTYwODY=", "commit": {"author": {"name": "Nathan Nguyen", "email": "nathan.tm.nguyen@gmail.com", "date": "2021-02-19T05:18:20Z"}, "committer": {"name": "Nathan Nguyen", "email": "nathan.tm.nguyen@gmail.com", "date": "2021-02-20T17:46:50Z"}, "message": "nhwn: use Option<NonZeroU32> in DebugLoc", "tree": {"sha": "e2743f5d666df1f4c7de105c7315eac4108c1bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2743f5d666df1f4c7de105c7315eac4108c1bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "html_url": "https://github.com/rust-lang/rust/commit/f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/comments", "author": {"login": "nhwn", "id": 43092380, "node_id": "MDQ6VXNlcjQzMDkyMzgw", "avatar_url": "https://avatars.githubusercontent.com/u/43092380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhwn", "html_url": "https://github.com/nhwn", "followers_url": "https://api.github.com/users/nhwn/followers", "following_url": "https://api.github.com/users/nhwn/following{/other_user}", "gists_url": "https://api.github.com/users/nhwn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhwn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhwn/subscriptions", "organizations_url": "https://api.github.com/users/nhwn/orgs", "repos_url": "https://api.github.com/users/nhwn/repos", "events_url": "https://api.github.com/users/nhwn/events{/privacy}", "received_events_url": "https://api.github.com/users/nhwn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhwn", "id": 43092380, "node_id": "MDQ6VXNlcjQzMDkyMzgw", "avatar_url": "https://avatars.githubusercontent.com/u/43092380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhwn", "html_url": "https://github.com/nhwn", "followers_url": "https://api.github.com/users/nhwn/followers", "following_url": "https://api.github.com/users/nhwn/following{/other_user}", "gists_url": "https://api.github.com/users/nhwn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhwn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhwn/subscriptions", "organizations_url": "https://api.github.com/users/nhwn/orgs", "repos_url": "https://api.github.com/users/nhwn/repos", "events_url": "https://api.github.com/users/nhwn/events{/privacy}", "received_events_url": "https://api.github.com/users/nhwn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0148b971c921a0831fbf3357e5936eec724e3566", "url": "https://api.github.com/repos/rust-lang/rust/commits/0148b971c921a0831fbf3357e5936eec724e3566", "html_url": "https://github.com/rust-lang/rust/commit/0148b971c921a0831fbf3357e5936eec724e3566"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "6febfc9abd6689cc847f067f7fae3ab59b3f7894", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "patch": "@@ -102,8 +102,8 @@ fn make_mir_scope(\n                 DIB(cx),\n                 parent_scope.dbg_scope.unwrap(),\n                 file_metadata,\n-                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n-                loc.col.unwrap_or(UNKNOWN_COLUMN_NUMBER),\n+                loc.line.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n+                loc.col.map_or(UNKNOWN_COLUMN_NUMBER, |n| n.get()),\n             )\n         },\n     };"}, {"sha": "42a0db54d418d3b28093d04c886d443d66ab86b0", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "patch": "@@ -1841,7 +1841,7 @@ impl<'tcx> VariantInfo<'_, 'tcx> {\n                     let loc = cx.lookup_debug_loc(span.lo());\n                     return Some(SourceInfo {\n                         file: file_metadata(cx, &loc.file),\n-                        line: loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                        line: loc.line.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n                     });\n                 }\n             }\n@@ -2504,7 +2504,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n             linkage_name.as_ptr().cast(),\n             linkage_name.len(),\n             file_metadata,\n-            line_number.unwrap_or(UNKNOWN_LINE_NUMBER),\n+            line_number.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n             type_metadata,\n             is_local_to_unit,\n             global,"}, {"sha": "f10cc1f4f590aeaa7d8e31cf1ef0c13e0bde37a3", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5aa1bceb92ce2207a2f3db07c3fe892fa196086/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=f5aa1bceb92ce2207a2f3db07c3fe892fa196086", "patch": "@@ -38,6 +38,7 @@ use rustc_target::abi::{LayoutOf, Primitive, Size};\n use libc::c_uint;\n use smallvec::SmallVec;\n use std::cell::RefCell;\n+use std::num::NonZeroU32;\n use tracing::debug;\n \n mod create_scope_map;\n@@ -224,9 +225,9 @@ pub struct DebugLoc {\n     /// Information about the original source file.\n     pub file: Lrc<SourceFile>,\n     /// The (1-based) line number.\n-    pub line: Option<u32>,\n+    pub line: Option<NonZeroU32>,\n     /// The (1-based) column number.\n-    pub col: Option<u32>,\n+    pub col: Option<NonZeroU32>,\n }\n \n impl CodegenCx<'ll, '_> {\n@@ -243,7 +244,7 @@ impl CodegenCx<'ll, '_> {\n                 let line = (line + 1) as u32;\n                 let col = (pos - line_pos).to_u32() + 1;\n \n-                (file, Some(line), Some(col))\n+                (file, NonZeroU32::new(line), NonZeroU32::new(col))\n             }\n             Err(file) => (file, None, None),\n         };\n@@ -358,9 +359,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 linkage_name.as_ptr().cast(),\n                 linkage_name.len(),\n                 file_metadata,\n-                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                loc.line.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n                 function_type_metadata,\n-                scope_line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                scope_line.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n                 flags,\n                 spflags,\n                 maybe_definition_llfn,\n@@ -552,8 +553,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         unsafe {\n             llvm::LLVMRustDIBuilderCreateDebugLocation(\n-                line.unwrap_or(UNKNOWN_LINE_NUMBER),\n-                col.unwrap_or(UNKNOWN_COLUMN_NUMBER),\n+                line.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n+                col.map_or(UNKNOWN_COLUMN_NUMBER, |n| n.get()),\n                 scope,\n                 inlined_at,\n             )\n@@ -606,7 +607,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 name.as_ptr().cast(),\n                 name.len(),\n                 file_metadata,\n-                loc.line.unwrap_or(UNKNOWN_LINE_NUMBER),\n+                loc.line.map_or(UNKNOWN_LINE_NUMBER, |n| n.get()),\n                 type_metadata,\n                 true,\n                 DIFlags::FlagZero,"}]}