{"sha": "cd7c8182dd48b2562153324915ba236f3c33cc5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkN2M4MTgyZGQ0OGIyNTYyMTUzMzI0OTE1YmEyMzZmM2MzM2NjNWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-10T01:44:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-10T01:44:07Z"}, "message": "Add more targetting filters for arrays to rustc_on_unimplemented", "tree": {"sha": "6d438f7beb184ac854c53f9f110767ed90d95cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d438f7beb184ac854c53f9f110767ed90d95cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd7c8182dd48b2562153324915ba236f3c33cc5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7c8182dd48b2562153324915ba236f3c33cc5d", "html_url": "https://github.com/rust-lang/rust/commit/cd7c8182dd48b2562153324915ba236f3c33cc5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd7c8182dd48b2562153324915ba236f3c33cc5d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e07c4281c343e9e15a0a8fca79538ad1a8eb513", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e07c4281c343e9e15a0a8fca79538ad1a8eb513", "html_url": "https://github.com/rust-lang/rust/commit/0e07c4281c343e9e15a0a8fca79538ad1a8eb513"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "a7ebd0c8965c294eec3929b7449971724c9d0399", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cd7c8182dd48b2562153324915ba236f3c33cc5d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7c8182dd48b2562153324915ba236f3c33cc5d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cd7c8182dd48b2562153324915ba236f3c33cc5d", "patch": "@@ -349,10 +349,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn on_unimplemented_note(\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        obligation: &PredicateObligation<'tcx>) ->\n-        OnUnimplementedNote\n-    {\n-        let def_id = self.impl_similar_to(trait_ref, obligation)\n+        obligation: &PredicateObligation<'tcx>,\n+    ) -> OnUnimplementedNote {\n+    let def_id = self.impl_similar_to(trait_ref, obligation)\n             .unwrap_or(trait_ref.def_id());\n         let trait_ref = *trait_ref.skip_binder();\n \n@@ -410,6 +409,37 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((\"crate_local\".to_owned(), None));\n         }\n \n+        // Allow targetting all integers using `{integral}`, even if the exact type was resolved\n+        if self_ty.is_integral() {\n+            flags.push((\"_Self\".to_owned(), Some(\"{integral}\".to_owned())));\n+        }\n+\n+        if let ty::Array(aty, len) = self_ty.sty {\n+            flags.push((\"_Self\".to_owned(), Some(\"[]\".to_owned())));\n+            flags.push((\"_Self\".to_owned(), Some(format!(\"[{}]\", aty))));\n+            if let Some(def) = aty.ty_adt_def() {\n+                // We also want to be able to select the array's type's original\n+                // signature with no type arguments resolved\n+                flags.push((\n+                    \"_Self\".to_owned(),\n+                    Some(format!(\"[{}]\", self.tcx.type_of(def.did).to_string())),\n+                ));\n+                if let Some(len) = len.val.try_to_scalar().and_then(|scalar| {\n+                    scalar.to_u64().ok()\n+                }) {\n+                    flags.push((\n+                        \"_Self\".to_owned(),\n+                        Some(format!(\"[{}; {}]\", self.tcx.type_of(def.did).to_string(), len)),\n+                    ));\n+                } else {\n+                    flags.push((\n+                        \"_Self\".to_owned(),\n+                        Some(format!(\"[{}; _]\", self.tcx.type_of(def.did).to_string())),\n+                    ));\n+                }\n+            }\n+        }\n+\n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {"}]}