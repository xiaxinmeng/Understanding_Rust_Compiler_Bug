{"sha": "1e13a9bb33debb931d603278b7f1a706b0d11660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMTNhOWJiMzNkZWJiOTMxZDYwMzI3OGI3ZjFhNzA2YjBkMTE2NjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-02T10:47:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-02T10:47:58Z"}, "message": "Auto merge of #85892 - tmiasko:i, r=oli-obk\n\nMiscellaneous inlining improvements", "tree": {"sha": "38471598501ccdc0d3f4770259d0b2a896c9cf62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38471598501ccdc0d3f4770259d0b2a896c9cf62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e13a9bb33debb931d603278b7f1a706b0d11660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e13a9bb33debb931d603278b7f1a706b0d11660", "html_url": "https://github.com/rust-lang/rust/commit/1e13a9bb33debb931d603278b7f1a706b0d11660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e13a9bb33debb931d603278b7f1a706b0d11660/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7350f655ef7e1b00f287eca6f8c0016a8985900c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7350f655ef7e1b00f287eca6f8c0016a8985900c", "html_url": "https://github.com/rust-lang/rust/commit/7350f655ef7e1b00f287eca6f8c0016a8985900c"}, {"sha": "c1f6495b8e19325a57702a7ce016e6d5a3f25e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f6495b8e19325a57702a7ce016e6d5a3f25e26", "html_url": "https://github.com/rust-lang/rust/commit/c1f6495b8e19325a57702a7ce016e6d5a3f25e26"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "c8cf0116c641ef526a84506d039d08cd629b1d62", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -69,6 +69,7 @@ impl abi::HasDataLayout for Builder<'_, '_, '_> {\n }\n \n impl ty::layout::HasTyCtxt<'tcx> for Builder<'_, '_, 'tcx> {\n+    #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.cx.tcx\n     }\n@@ -81,6 +82,7 @@ impl ty::layout::HasParamEnv<'tcx> for Builder<'_, '_, 'tcx> {\n }\n \n impl HasTargetSpec for Builder<'_, '_, 'tcx> {\n+    #[inline]\n     fn target_spec(&self) -> &Target {\n         &self.cx.target_spec()\n     }\n@@ -98,6 +100,7 @@ impl abi::LayoutOf for Builder<'_, '_, 'tcx> {\n impl Deref for Builder<'_, 'll, 'tcx> {\n     type Target = CodegenCx<'ll, 'tcx>;\n \n+    #[inline]\n     fn deref(&self) -> &Self::Target {\n         self.cx\n     }"}, {"sha": "6aa952462fa58d50f0d20435fed58a5ba63e1c3a", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -765,18 +765,21 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n }\n \n impl HasDataLayout for CodegenCx<'ll, 'tcx> {\n+    #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }\n \n impl HasTargetSpec for CodegenCx<'ll, 'tcx> {\n+    #[inline]\n     fn target_spec(&self) -> &Target {\n         &self.tcx.sess.target\n     }\n }\n \n impl ty::layout::HasTyCtxt<'tcx> for CodegenCx<'ll, 'tcx> {\n+    #[inline]\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "324a8624dd076a2ac213e4c68f18c8402cb5f8bc", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -90,9 +90,11 @@ pub unsafe trait Tag: Copy {\n \n unsafe impl<T> Pointer for Box<T> {\n     const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         Box::into_raw(self) as usize\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         Box::from_raw(ptr as *mut T)\n     }\n@@ -104,9 +106,11 @@ unsafe impl<T> Pointer for Box<T> {\n \n unsafe impl<T> Pointer for Rc<T> {\n     const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         Rc::into_raw(self) as usize\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         Rc::from_raw(ptr as *const T)\n     }\n@@ -118,9 +122,11 @@ unsafe impl<T> Pointer for Rc<T> {\n \n unsafe impl<T> Pointer for Arc<T> {\n     const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         Arc::into_raw(self) as usize\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         Arc::from_raw(ptr as *const T)\n     }\n@@ -132,9 +138,11 @@ unsafe impl<T> Pointer for Arc<T> {\n \n unsafe impl<'a, T: 'a> Pointer for &'a T {\n     const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         self as *const T as usize\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         &*(ptr as *const T)\n     }\n@@ -145,9 +153,11 @@ unsafe impl<'a, T: 'a> Pointer for &'a T {\n \n unsafe impl<'a, T: 'a> Pointer for &'a mut T {\n     const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         self as *mut T as usize\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         &mut *(ptr as *mut T)\n     }"}, {"sha": "979f2d3b3005d3ec345cd048413fbb6b6ec6938f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -715,6 +715,7 @@ impl Handler {\n         self.inner.borrow_mut().bug(msg)\n     }\n \n+    #[inline]\n     pub fn err_count(&self) -> usize {\n         self.inner.borrow().err_count()\n     }\n@@ -924,6 +925,7 @@ impl HandlerInner {\n         }\n     }\n \n+    #[inline]\n     fn err_count(&self) -> usize {\n         self.err_count + self.stashed_diagnostics.len()\n     }"}, {"sha": "fda1ba809526c762ca4c2766aa7c6b5d9e74605b", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -305,6 +305,7 @@ impl Definitions {\n         self.table.index_to_key.len()\n     }\n \n+    #[inline]\n     pub fn def_key(&self, id: LocalDefId) -> DefKey {\n         self.table.def_key(id.local_def_index)\n     }"}, {"sha": "577d43b1c8e5e3c1f9c19671815f682deea0cdb5", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -2488,6 +2488,7 @@ pub enum FnRetTy<'hir> {\n }\n \n impl FnRetTy<'_> {\n+    #[inline]\n     pub fn span(&self) -> Span {\n         match *self {\n             Self::DefaultReturn(span) => span,"}, {"sha": "d764d45ba7e5c7dfb2c9f9daf40a3d9718684793", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -294,6 +294,7 @@ TrivialTypeFoldableImpls! {\n }\n \n impl<'tcx> CanonicalVarValues<'tcx> {\n+    #[inline]\n     pub fn len(&self) -> usize {\n         self.var_values.len()\n     }"}, {"sha": "14bdb0a5a2d506b03e1c0f91cbac59030f3e879a", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -246,6 +246,7 @@ pub struct AllocDecodingState {\n }\n \n impl AllocDecodingState {\n+    #[inline]\n     pub fn new_decoding_session(&self) -> AllocDecodingSession<'_> {\n         static DECODER_SESSION_ID: AtomicU32 = AtomicU32::new(0);\n         let counter = DECODER_SESSION_ID.fetch_add(1, Ordering::SeqCst);"}, {"sha": "7ae7eab6e5a315cda438adbea5f2007cc623b4b6", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -1249,10 +1249,12 @@ impl<'tcx> BasicBlockData<'tcx> {\n     ///\n     /// Terminator may not be None after construction of the basic block is complete. This accessor\n     /// provides a convenience way to reach the terminator.\n+    #[inline]\n     pub fn terminator(&self) -> &Terminator<'tcx> {\n         self.terminator.as_ref().expect(\"invalid terminator state\")\n     }\n \n+    #[inline]\n     pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> {\n         self.terminator.as_mut().expect(\"invalid terminator state\")\n     }\n@@ -1870,13 +1872,15 @@ impl<'tcx> PlaceRef<'tcx> {\n \n     /// If this place represents a local variable like `_X` with no\n     /// projections, return `Some(_X)`.\n+    #[inline]\n     pub fn as_local(&self) -> Option<Local> {\n         match *self {\n             PlaceRef { local, projection: [] } => Some(local),\n             _ => None,\n         }\n     }\n \n+    #[inline]\n     pub fn last_projection(&self) -> Option<(PlaceRef<'tcx>, PlaceElem<'tcx>)> {\n         if let &[ref proj_base @ .., elem] = self.projection {\n             Some((PlaceRef { local: self.local, projection: proj_base }, elem))\n@@ -2464,12 +2468,14 @@ impl Constant<'tcx> {\n             _ => None,\n         }\n     }\n+    #[inline]\n     pub fn ty(&self) -> Ty<'tcx> {\n         self.literal.ty()\n     }\n }\n \n impl From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n+    #[inline]\n     fn from(ct: &'tcx ty::Const<'tcx>) -> Self {\n         Self::Ty(ct)\n     }"}, {"sha": "c354cdd985b36df3ee1c94aaff3381444eda5dbb", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -267,6 +267,7 @@ pub enum Visibility {\n }\n \n impl<'tcx> CodegenUnit<'tcx> {\n+    #[inline]\n     pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n         CodegenUnit { name, items: Default::default(), size_estimate: None, primary: false }\n     }\n@@ -311,6 +312,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         self.size_estimate = Some(self.items.keys().map(|mi| mi.size_estimate(tcx)).sum());\n     }\n \n+    #[inline]\n     pub fn size_estimate(&self) -> usize {\n         // Should only be called if `estimate_size` has previously been called.\n         self.size_estimate.expect(\"estimate_size must be called before getting a size_estimate\")"}, {"sha": "4e3f475a915f35119c503b7eb02c2609bbf33fa1", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -93,6 +93,7 @@ pub struct Generics {\n }\n \n impl<'tcx> Generics {\n+    #[inline]\n     pub fn count(&self) -> usize {\n         self.parent_count + self.params.len()\n     }"}, {"sha": "44dfcbf1866a7a402c4248fb2b1f3c4b74e17dcb", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -37,9 +37,11 @@ pub struct List<T> {\n \n unsafe impl<'a, T: 'a> rustc_data_structures::tagged_ptr::Pointer for &'a List<T> {\n     const BITS: usize = std::mem::align_of::<usize>().trailing_zeros() as usize;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         self as *const List<T> as usize\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         &*(ptr as *const List<T>)\n     }"}, {"sha": "7f6792ac27050d6f72c406c1cf75f86baef56524", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -1097,12 +1097,14 @@ pub struct ParamEnv<'tcx> {\n \n unsafe impl rustc_data_structures::tagged_ptr::Tag for traits::Reveal {\n     const BITS: usize = 1;\n+    #[inline]\n     fn into_usize(self) -> usize {\n         match self {\n             traits::Reveal::UserFacing => 0,\n             traits::Reveal::All => 1,\n         }\n     }\n+    #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         match ptr {\n             0 => traits::Reveal::UserFacing,\n@@ -1200,6 +1202,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n \n     /// Returns this same environment but with no caller bounds.\n+    #[inline]\n     pub fn without_caller_bounds(self) -> Self {\n         Self::new(List::empty(), self.reveal())\n     }"}, {"sha": "47833dcda4f1f82a345fcef76c09f85713f8a3b4", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -452,6 +452,7 @@ impl Session {\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) {\n         err.into_diagnostic(self).emit()\n     }\n+    #[inline]\n     pub fn err_count(&self) -> usize {\n         self.diagnostic().err_count()\n     }\n@@ -524,6 +525,7 @@ impl Session {\n         self.diagnostic().struct_note_without_error(msg)\n     }\n \n+    #[inline]\n     pub fn diagnostic(&self) -> &rustc_errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }"}, {"sha": "b04a10d22a02f9540544151a8615be7621710d8f", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -20,10 +20,12 @@ rustc_index::newtype_index! {\n pub const LOCAL_CRATE: CrateNum = CrateNum::from_u32(0);\n \n impl CrateNum {\n+    #[inline]\n     pub fn new(x: usize) -> CrateNum {\n         CrateNum::from_usize(x)\n     }\n \n+    #[inline]\n     pub fn as_def_id(&self) -> DefId {\n         DefId { krate: *self, index: CRATE_DEF_INDEX }\n     }"}, {"sha": "1679d02937477bbe920c6e1571312e62d08c8f2e", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -222,6 +222,7 @@ pub trait HasDataLayout {\n }\n \n impl HasDataLayout for TargetDataLayout {\n+    #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n         self\n     }\n@@ -862,6 +863,7 @@ pub enum Abi {\n \n impl Abi {\n     /// Returns `true` if the layout corresponds to an unsized type.\n+    #[inline]\n     pub fn is_unsized(&self) -> bool {\n         match *self {\n             Abi::Uninhabited | Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } => false,\n@@ -881,11 +883,13 @@ impl Abi {\n     }\n \n     /// Returns `true` if this is an uninhabited type\n+    #[inline]\n     pub fn is_uninhabited(&self) -> bool {\n         matches!(*self, Abi::Uninhabited)\n     }\n \n     /// Returns `true` is this is a scalar type\n+    #[inline]\n     pub fn is_scalar(&self) -> bool {\n         matches!(*self, Abi::Scalar(_))\n     }"}, {"sha": "4683def94f70e2b6de5bca9e03618661e9cd3e1f", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e13a9bb33debb931d603278b7f1a706b0d11660/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1e13a9bb33debb931d603278b7f1a706b0d11660", "patch": "@@ -922,6 +922,7 @@ pub trait HasTargetSpec {\n }\n \n impl HasTargetSpec for Target {\n+    #[inline]\n     fn target_spec(&self) -> &Target {\n         self\n     }"}]}