{"sha": "4fac5c98b22faa7fce2d5d64bf34c61340883302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYWM1Yzk4YjIyZmFhN2ZjZTJkNWQ2NGJmMzRjNjEzNDA4ODMzMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-31T17:21:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-31T17:21:14Z"}, "message": "Auto merge of #59590 - Centril:rollup, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #58805 (Lint for redundant imports)\n - #59506 (Use platform dependent mcount function)\n - #59519 (rustc_target: factor out common fields of non-Single Variants.)\n - #59580 (Allow closure to unsafe fn coercion)\n - #59581 (Stabilize refcell_replace_swap feature)\n - #59583 (match match match match match)\n - #59587 (Remove #[doc(hidden)] from Error::type_id)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9c75e0759b74f210c61fcc192fdd1b05d9784df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c75e0759b74f210c61fcc192fdd1b05d9784df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fac5c98b22faa7fce2d5d64bf34c61340883302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fac5c98b22faa7fce2d5d64bf34c61340883302", "html_url": "https://github.com/rust-lang/rust/commit/4fac5c98b22faa7fce2d5d64bf34c61340883302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fac5c98b22faa7fce2d5d64bf34c61340883302/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a89c03a30a1e8f1cd190114b765d01752d3ce8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89c03a30a1e8f1cd190114b765d01752d3ce8d8", "html_url": "https://github.com/rust-lang/rust/commit/a89c03a30a1e8f1cd190114b765d01752d3ce8d8"}, {"sha": "34454451a19210341263ea32962d96f41faec2a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/34454451a19210341263ea32962d96f41faec2a5", "html_url": "https://github.com/rust-lang/rust/commit/34454451a19210341263ea32962d96f41faec2a5"}], "stats": {"total": 850, "additions": 599, "deletions": 251}, "files": [{"sha": "ee1799fad8e15c4ae09b31623b5ebb8670a82d13", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -135,7 +135,7 @@ impl<T> ToOwned for T\n /// Another example showing how to keep `Cow` in a struct:\n ///\n /// ```\n-/// use std::borrow::{Cow, ToOwned};\n+/// use std::borrow::Cow;\n ///\n /// struct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {\n ///     values: Cow<'a, [X]>,"}, {"sha": "80dd51acc9eeec1a15deed74121e857473cc9971", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -702,24 +702,21 @@ impl<T> RefCell<T> {\n     /// Replaces the wrapped value with a new one computed from `f`, returning\n     /// the old value, without deinitializing either one.\n     ///\n-    /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).\n-    ///\n     /// # Panics\n     ///\n     /// Panics if the value is currently borrowed.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(refcell_replace_swap)]\n     /// use std::cell::RefCell;\n     /// let cell = RefCell::new(5);\n     /// let old_value = cell.replace_with(|&mut old| old + 1);\n     /// assert_eq!(old_value, 5);\n     /// assert_eq!(cell, RefCell::new(6));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n+    #[stable(feature = \"refcell_replace_swap\", since=\"1.35.0\")]\n     pub fn replace_with<F: FnOnce(&mut T) -> T>(&self, f: F) -> T {\n         let mut_borrow = &mut *self.borrow_mut();\n         let replacement = f(mut_borrow);\n@@ -1421,7 +1418,6 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// ```\n /// use std::cell::UnsafeCell;\n-/// use std::marker::Sync;\n ///\n /// # #[allow(dead_code)]\n /// struct NotThreadSafe<T> {"}, {"sha": "5e0dbb7ab2f120e8730f57aba75c87a1a4f6198a", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -16,7 +16,6 @@\n #![feature(pattern)]\n #![feature(range_is_empty)]\n #![feature(raw)]\n-#![feature(refcell_replace_swap)]\n #![feature(slice_patterns)]\n #![feature(sort_internals)]\n #![feature(specialization)]"}, {"sha": "b87343b43c9f9c789930c8c05e06fe0186658bc4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -45,7 +45,6 @@\n #![feature(proc_macro_internals)]\n #![feature(optin_builtin_traits)]\n #![feature(range_is_empty)]\n-#![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]\n #![feature(slice_patterns)]"}, {"sha": "2d8a2c6321fa8e040f3994ef5140dd4f2c159fc5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -483,6 +483,7 @@ pub enum BuiltinLintDiagnostics {\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n     NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n+    RedundantImport(Vec<(Span, bool)>, ast::Ident),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -579,6 +580,15 @@ impl BuiltinLintDiagnostics {\n                 db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n                 db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n             }\n+            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n+                for (span, is_imported) in spans {\n+                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n+                    db.span_label(\n+                        span,\n+                        format!(\"the item `{}` is already {} here\", ident, introduced)\n+                    );\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "4f630fe9a3911212adad37dcc1d0c34b7299d4d0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 adjustment::Adjust::NeverToAny |\n                 adjustment::Adjust::ReifyFnPointer |\n                 adjustment::Adjust::UnsafeFnPointer |\n-                adjustment::Adjust::ClosureFnPointer |\n+                adjustment::Adjust::ClosureFnPointer(_) |\n                 adjustment::Adjust::MutToConstPointer |\n                 adjustment::Adjust::Unsize => {\n                     // Creating a closure/fn-pointer or unsizing consumes"}, {"sha": "1a3fef18404e3793c0d0b3d4ca56bd5761494cd1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -621,7 +621,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             adjustment::Adjust::NeverToAny |\n             adjustment::Adjust::ReifyFnPointer |\n             adjustment::Adjust::UnsafeFnPointer |\n-            adjustment::Adjust::ClosureFnPointer |\n+            adjustment::Adjust::ClosureFnPointer(_) |\n             adjustment::Adjust::MutToConstPointer |\n             adjustment::Adjust::Borrow(_) |\n             adjustment::Adjust::Unsize => {"}, {"sha": "7b419e306db600f6af763417ec3aea5ff5eeb4e6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -2247,8 +2247,9 @@ pub enum CastKind {\n     /// Converts unique, zero-sized type for a fn to fn()\n     ReifyFnPointer,\n \n-    /// Converts non capturing closure to fn()\n-    ClosureFnPointer,\n+    /// Converts non capturing closure to fn() or unsafe fn().\n+    /// It cannot convert a closure that requires unsafe.\n+    ClosureFnPointer(hir::Unsafety),\n \n     /// Converts safe fn() to unsafe fn()\n     UnsafeFnPointer,"}, {"sha": "c2ef08c4c40fe1ddda50ef6d4f3ec4400c588b1a", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -62,8 +62,9 @@ pub enum Adjust<'tcx> {\n     /// Go from a safe fn pointer to an unsafe fn pointer.\n     UnsafeFnPointer,\n \n-    /// Go from a non-capturing closure to an fn pointer.\n-    ClosureFnPointer,\n+    /// Go from a non-capturing closure to an fn pointer or an unsafe fn pointer.\n+    /// It cannot convert a closure that requires unsafe.\n+    ClosureFnPointer(hir::Unsafety),\n \n     /// Go from a mut raw pointer to a const raw pointer.\n     MutToConstPointer,"}, {"sha": "77330c7a9d1b26a9fcfdf11c670ae575389de900", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -2441,7 +2441,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// type with the same signature. Detuples and so forth -- so\n     /// e.g., if we have a sig with `Fn<(u32, i32)>` then you would get\n     /// a `fn(u32, i32)`.\n-    pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {\n+    /// `unsafety` determines the unsafety of the `fn` type. If you pass\n+    /// `hir::Unsafety::Unsafe` in the previous example, then you would get\n+    /// an `unsafe fn (u32, i32)`.\n+    /// It cannot convert a closure that requires unsafe.\n+    pub fn coerce_closure_fn_ty(self, sig: PolyFnSig<'tcx>, unsafety: hir::Unsafety) -> Ty<'tcx> {\n         let converted_sig = sig.map_bound(|s| {\n             let params_iter = match s.inputs()[0].sty {\n                 ty::Tuple(params) => {\n@@ -2453,7 +2457,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 params_iter,\n                 s.output(),\n                 s.c_variadic,\n-                hir::Unsafety::Normal,\n+                unsafety,\n                 abi::Abi::Rust,\n             )\n         });"}, {"sha": "e01b50113b9fefafed3a237cdc4efbee1efc8cc0", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -913,11 +913,13 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                             }\n \n                             return Ok(tcx.intern_layout(LayoutDetails {\n-                                variants: Variants::NicheFilling {\n-                                    dataful_variant: i,\n-                                    niche_variants,\n-                                    niche: niche_scalar,\n-                                    niche_start,\n+                                variants: Variants::Multiple {\n+                                    discr: niche_scalar,\n+                                    discr_kind: DiscriminantKind::Niche {\n+                                        dataful_variant: i,\n+                                        niche_variants,\n+                                        niche_start,\n+                                    },\n                                     variants: st,\n                                 },\n                                 fields: FieldPlacement::Arbitrary {\n@@ -1137,8 +1139,9 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n \n                 tcx.intern_layout(LayoutDetails {\n-                    variants: Variants::Tagged {\n-                        tag,\n+                    variants: Variants::Multiple {\n+                        discr: tag,\n+                        discr_kind: DiscriminantKind::Tag,\n                         variants: layout_variants,\n                     },\n                     fields: FieldPlacement::Arbitrary {\n@@ -1293,8 +1296,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n             }\n \n-            Variants::NicheFilling { .. } |\n-            Variants::Tagged { .. } => {\n+            Variants::Multiple { ref discr, ref discr_kind, .. } => {\n                 debug!(\"print-type-size `{:#?}` adt general variants def {}\",\n                        layout.ty, adt_def.variants.len());\n                 let variant_infos: Vec<_> =\n@@ -1306,8 +1308,8 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                                            layout.for_variant(self, i))\n                     })\n                     .collect();\n-                record(adt_kind.into(), adt_packed, match layout.variants {\n-                    Variants::Tagged { ref tag, .. } => Some(tag.value.size(self)),\n+                record(adt_kind.into(), adt_packed, match discr_kind {\n+                    DiscriminantKind::Tag => Some(discr.value.size(self)),\n                     _ => None\n                 }, variant_infos);\n             }\n@@ -1627,8 +1629,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 })\n             }\n \n-            Variants::NicheFilling { ref variants, .. } |\n-            Variants::Tagged { ref variants, .. } => {\n+            Variants::Multiple { ref variants, .. } => {\n                 &variants[variant_index]\n             }\n         };\n@@ -1735,8 +1736,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                     }\n \n                     // Discriminant field for enums (where applicable).\n-                    Variants::Tagged { tag: ref discr, .. } |\n-                    Variants::NicheFilling { niche: ref discr, .. } => {\n+                    Variants::Multiple { ref discr, .. } => {\n                         assert_eq!(i, 0);\n                         let layout = LayoutDetails::scalar(cx, discr.clone());\n                         return MaybeResult::from_ok(TyLayout {\n@@ -1881,26 +1881,37 @@ impl<'a> HashStable<StableHashingContext<'a>> for Variants {\n             Single { index } => {\n                 index.hash_stable(hcx, hasher);\n             }\n-            Tagged {\n-                ref tag,\n+            Multiple {\n+                ref discr,\n+                ref discr_kind,\n                 ref variants,\n             } => {\n-                tag.hash_stable(hcx, hasher);\n+                discr.hash_stable(hcx, hasher);\n+                discr_kind.hash_stable(hcx, hasher);\n                 variants.hash_stable(hcx, hasher);\n             }\n-            NicheFilling {\n+        }\n+    }\n+}\n+\n+impl<'a> HashStable<StableHashingContext<'a>> for DiscriminantKind {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        use crate::ty::layout::DiscriminantKind::*;\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+\n+        match *self {\n+            Tag => {}\n+            Niche {\n                 dataful_variant,\n                 ref niche_variants,\n-                ref niche,\n                 niche_start,\n-                ref variants,\n             } => {\n                 dataful_variant.hash_stable(hcx, hasher);\n                 niche_variants.start().hash_stable(hcx, hasher);\n                 niche_variants.end().hash_stable(hcx, hasher);\n-                niche.hash_stable(hcx, hasher);\n                 niche_start.hash_stable(hcx, hasher);\n-                variants.hash_stable(hcx, hasher);\n             }\n         }\n     }"}, {"sha": "05d80f9203f140cee6bff4a178686b5f41c06f9c", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -777,7 +777,6 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n                                                  value: &V)\n                                                  -> Result<(), E::Error>\n     {\n-        use crate::ty::codec::TyEncoder;\n         let start_pos = self.position();\n \n         tag.encode(self)?;"}, {"sha": "4f1fda3f4e5348679f02ee18d7aa373def13e285", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -630,8 +630,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n                 Some(ty::adjustment::Adjust::ReifyFnPointer),\n             ty::adjustment::Adjust::UnsafeFnPointer =>\n                 Some(ty::adjustment::Adjust::UnsafeFnPointer),\n-            ty::adjustment::Adjust::ClosureFnPointer =>\n-                Some(ty::adjustment::Adjust::ClosureFnPointer),\n+            ty::adjustment::Adjust::ClosureFnPointer(unsafety) =>\n+                Some(ty::adjustment::Adjust::ClosureFnPointer(unsafety)),\n             ty::adjustment::Adjust::MutToConstPointer =>\n                 Some(ty::adjustment::Adjust::MutToConstPointer),\n             ty::adjustment::Adjust::Unsize =>\n@@ -1187,7 +1187,7 @@ EnumTypeFoldableImpl! {\n         (ty::adjustment::Adjust::NeverToAny),\n         (ty::adjustment::Adjust::ReifyFnPointer),\n         (ty::adjustment::Adjust::UnsafeFnPointer),\n-        (ty::adjustment::Adjust::ClosureFnPointer),\n+        (ty::adjustment::Adjust::ClosureFnPointer)(a),\n         (ty::adjustment::Adjust::MutToConstPointer),\n         (ty::adjustment::Adjust::Unsize),\n         (ty::adjustment::Adjust::Deref)(a),"}, {"sha": "77fa34e74dd70cee88a01fbd019a6a1a2bcfe84e", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -77,9 +77,15 @@ pub fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     if cx.sess().instrument_mcount() {\n         // Similar to `clang -pg` behavior. Handled by the\n         // `post-inline-ee-instrument` LLVM pass.\n+\n+        // The function name varies on platforms.\n+        // See test/CodeGen/mcount.c in clang.\n+        let mcount_name = CString::new(\n+            cx.sess().target.target.options.target_mcount.as_str().as_bytes()).unwrap();\n+\n         llvm::AddFunctionAttrStringValue(\n             llfn, llvm::AttributePlace::Function,\n-            const_cstr!(\"instrument-function-entry-inlined\"), const_cstr!(\"mcount\"));\n+            const_cstr!(\"instrument-function-entry-inlined\"), &mcount_name);\n     }\n }\n "}, {"sha": "f6956bd5736ebf33ab8ca32545ba4a8bfa81f0aa", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -372,7 +372,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     // Returns a Value of the \"eh_unwind_resume\" lang item if one is defined,\n     // otherwise declares it as an external function.\n     fn eh_unwind_resume(&self) -> &'ll Value {\n-        use crate::attributes;\n         let unwresume = &self.eh_unwind_resume;\n         if let Some(llfn) = unwresume.get() {\n             return llfn;"}, {"sha": "e549b120da979616685b34674b019712c4604c7a", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1246,7 +1246,11 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     }\n                 ]\n             }\n-            layout::Variants::Tagged { ref variants, .. } => {\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Tag,\n+                ref variants,\n+                ..\n+            } => {\n                 let discriminant_info = if fallback {\n                     RegularDiscriminant(self.discriminant_type_metadata\n                                         .expect(\"\"))\n@@ -1288,12 +1292,14 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     }\n                 }).collect()\n             }\n-            layout::Variants::NicheFilling {\n-                ref niche_variants,\n-                niche_start,\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Niche {\n+                    ref niche_variants,\n+                    niche_start,\n+                    dataful_variant,\n+                },\n+                ref discr,\n                 ref variants,\n-                dataful_variant,\n-                ref niche,\n             } => {\n                 if fallback {\n                     let variant = self.layout.for_variant(cx, dataful_variant);\n@@ -1380,7 +1386,11 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                             let value = (i.as_u32() as u128)\n                                 .wrapping_sub(niche_variants.start().as_u32() as u128)\n                                 .wrapping_add(niche_start);\n-                            let value = truncate(value, niche.value.size(cx));\n+                            let value = truncate(value, discr.value.size(cx));\n+                            // NOTE(eddyb) do *NOT* remove this assert, until\n+                            // we pass the full 128-bit value to LLVM, otherwise\n+                            // truncation will be silent and remain undetected.\n+                            assert_eq!(value as u64 as u128, value);\n                             Some(value as u64)\n                         };\n \n@@ -1597,8 +1607,11 @@ fn prepare_enum_metadata(\n     let layout = cx.layout_of(enum_type);\n \n     match (&layout.abi, &layout.variants) {\n-        (&layout::Abi::Scalar(_), &layout::Variants::Tagged {ref tag, .. }) =>\n-            return FinalMetadata(discriminant_type_metadata(tag.value)),\n+        (&layout::Abi::Scalar(_), &layout::Variants::Multiple {\n+            discr_kind: layout::DiscriminantKind::Tag,\n+            ref discr,\n+            ..\n+        }) => return FinalMetadata(discriminant_type_metadata(discr.value)),\n         _ => {}\n     }\n \n@@ -1610,9 +1623,16 @@ fn prepare_enum_metadata(\n     if use_enum_fallback(cx) {\n         let discriminant_type_metadata = match layout.variants {\n             layout::Variants::Single { .. } |\n-            layout::Variants::NicheFilling { .. } => None,\n-            layout::Variants::Tagged { ref tag, .. } => {\n-                Some(discriminant_type_metadata(tag.value))\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Niche { .. },\n+                ..\n+            } => None,\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Tag,\n+                ref discr,\n+                ..\n+            } => {\n+                Some(discriminant_type_metadata(discr.value))\n             }\n         };\n \n@@ -1647,16 +1667,20 @@ fn prepare_enum_metadata(\n         );\n     }\n \n-    let discriminator_metadata = match &layout.variants {\n+    let discriminator_metadata = match layout.variants {\n         // A single-variant enum has no discriminant.\n-        &layout::Variants::Single { .. } => None,\n+        layout::Variants::Single { .. } => None,\n \n-        &layout::Variants::NicheFilling { ref niche, .. } => {\n+        layout::Variants::Multiple {\n+            discr_kind: layout::DiscriminantKind::Niche { .. },\n+            ref discr,\n+            ..\n+        } => {\n             // Find the integer type of the correct size.\n-            let size = niche.value.size(cx);\n-            let align = niche.value.align(cx);\n+            let size = discr.value.size(cx);\n+            let align = discr.value.align(cx);\n \n-            let discr_type = match niche.value {\n+            let discr_type = match discr.value {\n                 layout::Int(t, _) => t,\n                 layout::Float(layout::FloatTy::F32) => Integer::I32,\n                 layout::Float(layout::FloatTy::F64) => Integer::I64,\n@@ -1679,8 +1703,12 @@ fn prepare_enum_metadata(\n             }\n         },\n \n-        &layout::Variants::Tagged { ref tag, .. } => {\n-            let discr_type = tag.value.to_ty(cx.tcx);\n+        layout::Variants::Multiple {\n+            discr_kind: layout::DiscriminantKind::Tag,\n+            ref discr,\n+            ..\n+        } => {\n+            let discr_type = discr.value.to_ty(cx.tcx);\n             let (size, align) = cx.size_and_align_of(discr_type);\n \n             let discr_metadata = basic_type_metadata(cx, discr_type);"}, {"sha": "020447608eebe40d347189c6d2a23c8101f325e3", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -452,7 +452,13 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n \n             _ => {\n                 let mut data_variant = match self.variants {\n-                    layout::Variants::NicheFilling { dataful_variant, .. } => {\n+                    layout::Variants::Multiple {\n+                        discr_kind: layout::DiscriminantKind::Niche {\n+                            dataful_variant,\n+                            ..\n+                        },\n+                        ..\n+                    } => {\n                         // Only the niche itself is always initialized,\n                         // so only check for a pointer at its offset.\n                         //"}, {"sha": "9ed7e26729f532220caf1db9d8dbb1c6b2fa14be", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -216,37 +216,36 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n         if self.layout.abi.is_uninhabited() {\n             return bx.cx().const_undef(cast_to);\n         }\n-        match self.layout.variants {\n+        let (discr_scalar, discr_kind) = match self.layout.variants {\n             layout::Variants::Single { index } => {\n                 let discr_val = self.layout.ty.ty_adt_def().map_or(\n                     index.as_u32() as u128,\n                     |def| def.discriminant_for_variant(bx.cx().tcx(), index).val);\n                 return bx.cx().const_uint_big(cast_to, discr_val);\n             }\n-            layout::Variants::Tagged { .. } |\n-            layout::Variants::NicheFilling { .. } => {},\n-        }\n+            layout::Variants::Multiple { ref discr, ref discr_kind, .. } => {\n+                (discr, discr_kind)\n+            }\n+        };\n \n         let discr = self.project_field(bx, 0);\n         let lldiscr = bx.load_operand(discr).immediate();\n-        match self.layout.variants {\n-            layout::Variants::Single { .. } => bug!(),\n-            layout::Variants::Tagged { ref tag, .. } => {\n-                let signed = match tag.value {\n+        match *discr_kind {\n+            layout::DiscriminantKind::Tag => {\n+                let signed = match discr_scalar.value {\n                     // We use `i1` for bytes that are always `0` or `1`,\n                     // e.g., `#[repr(i8)] enum E { A, B }`, but we can't\n                     // let LLVM interpret the `i1` as signed, because\n                     // then `i1 1` (i.e., E::B) is effectively `i8 -1`.\n-                    layout::Int(_, signed) => !tag.is_bool() && signed,\n+                    layout::Int(_, signed) => !discr_scalar.is_bool() && signed,\n                     _ => false\n                 };\n                 bx.intcast(lldiscr, cast_to, signed)\n             }\n-            layout::Variants::NicheFilling {\n+            layout::DiscriminantKind::Niche {\n                 dataful_variant,\n                 ref niche_variants,\n                 niche_start,\n-                ..\n             } => {\n                 let niche_llty = bx.cx().immediate_backend_type(discr.layout);\n                 if niche_variants.start() == niche_variants.end() {\n@@ -291,7 +290,10 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n             layout::Variants::Single { index } => {\n                 assert_eq!(index, variant_index);\n             }\n-            layout::Variants::Tagged { .. } => {\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Tag,\n+                ..\n+            } => {\n                 let ptr = self.project_field(bx, 0);\n                 let to = self.layout.ty.ty_adt_def().unwrap()\n                     .discriminant_for_variant(bx.tcx(), variant_index)\n@@ -301,10 +303,12 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                     ptr.llval,\n                     ptr.align);\n             }\n-            layout::Variants::NicheFilling {\n-                dataful_variant,\n-                ref niche_variants,\n-                niche_start,\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Niche {\n+                    dataful_variant,\n+                    ref niche_variants,\n+                    niche_start,\n+                },\n                 ..\n             } => {\n                 if variant_index != dataful_variant {"}, {"sha": "53640284a2ca94b1f84dce4b81ecfd2e30bb792b", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::ClosureFnPointer => {\n+                    mir::CastKind::ClosureFnPointer(_) => {\n                         match operand.layout.ty.sty {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = monomorphize::resolve_closure(\n@@ -282,8 +282,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     });\n                                 }\n                             }\n-                            layout::Variants::Tagged { .. } |\n-                            layout::Variants::NicheFilling { .. } => {},\n+                            layout::Variants::Multiple { .. } => {},\n                         }\n                         let llval = operand.immediate();\n \n@@ -732,7 +731,6 @@ fn cast_int_to_float<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         // All inputs greater or equal to (f32::MAX + 0.5 ULP) are rounded to infinity,\n         // and for everything else LLVM's uitofp works just fine.\n         use rustc_apfloat::ieee::Single;\n-        use rustc_apfloat::Float;\n         const MAX_F32_PLUS_HALF_ULP: u128 = ((1 << (Single::PRECISION + 1)) - 1)\n                                             << (Single::MAX_EXP - Single::PRECISION as i16);\n         let max = bx.cx().const_uint_big(int_ty, MAX_F32_PLUS_HALF_ULP);"}, {"sha": "efc18d401c082cd6ee9e184050b8290d50f05191", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -77,7 +77,6 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n-        use syntax_pos::DUMMY_SP;\n         if ty.is_sized(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all()) {\n             return false;\n         }"}, {"sha": "ebbc5a3d3a340a30c139b2ff4a5a2cb9defffcb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -155,7 +155,7 @@ impl CodeSuggestion {\n     /// Returns the assembled code suggestions and whether they should be shown with an underline.\n     pub fn splice_lines(&self, cm: &SourceMapperDyn)\n                         -> Vec<(String, Vec<SubstitutionPart>)> {\n-        use syntax_pos::{CharPos, Loc, Pos};\n+        use syntax_pos::{CharPos, Pos};\n \n         fn push_trailing(buf: &mut String,\n                          line_opt: Option<&Cow<'_, str>>,"}, {"sha": "2e71d46f4154c6384c5f1a0768df2761b0ba0be6", "filename": "src/librustc_interface/profile/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_interface%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_interface%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fprofile%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -62,7 +62,6 @@ fn total_duration(traces: &[trace::Rec]) -> Duration {\n fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n     use self::trace::*;\n     use std::fs::File;\n-    use std::time::{Instant};\n \n     let mut profq_msgs: Vec<ProfileQueriesMsg> = vec![];\n     let mut frame: StackFrame = StackFrame { parse_st: ParseState::Clear, traces: vec![] };"}, {"sha": "494a9bb73ed4b578f0eb25828a44dd54a4b34df9", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -842,51 +842,56 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n             let item_def_id = cx.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             let t = cx.tcx.type_of(item_def_id);\n             let ty = cx.tcx.erase_regions(&t);\n-            match cx.layout_of(ty) {\n-                Ok(layout) => {\n-                    let variants = &layout.variants;\n-                    if let layout::Variants::Tagged { ref variants, ref tag, .. } = variants {\n-                        let discr_size = tag.value.size(&cx.tcx).bytes();\n-\n-                        debug!(\"enum `{}` is {} bytes large with layout:\\n{:#?}\",\n-                               t, layout.size.bytes(), layout);\n-\n-                        let (largest, slargest, largest_index) = enum_definition.variants\n-                            .iter()\n-                            .zip(variants)\n-                            .map(|(variant, variant_layout)| {\n-                                // Subtract the size of the enum discriminant.\n-                                let bytes = variant_layout.size.bytes().saturating_sub(discr_size);\n-\n-                                debug!(\"- variant `{}` is {} bytes large\",\n-                                       variant.node.ident,\n-                                       bytes);\n-                                bytes\n-                            })\n-                            .enumerate()\n-                            .fold((0, 0, 0), |(l, s, li), (idx, size)| if size > l {\n-                                (size, l, idx)\n-                            } else if size > s {\n-                                (l, size, li)\n-                            } else {\n-                                (l, s, li)\n-                            });\n-\n-                        // We only warn if the largest variant is at least thrice as large as\n-                        // the second-largest.\n-                        if largest > slargest * 3 && slargest > 0 {\n-                            cx.span_lint(VARIANT_SIZE_DIFFERENCES,\n-                                            enum_definition.variants[largest_index].span,\n-                                            &format!(\"enum variant is more than three times \\\n-                                                      larger ({} bytes) than the next largest\",\n-                                                     largest));\n-                        }\n-                    }\n-                }\n+            let layout = match cx.layout_of(ty) {\n+                Ok(layout) => layout,\n                 Err(ty::layout::LayoutError::Unknown(_)) => return,\n                 Err(err @ ty::layout::LayoutError::SizeOverflow(_)) => {\n                     bug!(\"failed to get layout for `{}`: {}\", t, err);\n                 }\n+            };\n+            let (variants, tag) = match layout.variants {\n+                layout::Variants::Multiple {\n+                    discr_kind: layout::DiscriminantKind::Tag,\n+                    ref discr,\n+                    ref variants,\n+                } => (variants, discr),\n+                _ => return,\n+            };\n+\n+            let discr_size = tag.value.size(&cx.tcx).bytes();\n+\n+            debug!(\"enum `{}` is {} bytes large with layout:\\n{:#?}\",\n+                   t, layout.size.bytes(), layout);\n+\n+            let (largest, slargest, largest_index) = enum_definition.variants\n+                .iter()\n+                .zip(variants)\n+                .map(|(variant, variant_layout)| {\n+                    // Subtract the size of the enum discriminant.\n+                    let bytes = variant_layout.size.bytes().saturating_sub(discr_size);\n+\n+                    debug!(\"- variant `{}` is {} bytes large\",\n+                           variant.node.ident,\n+                           bytes);\n+                    bytes\n+                })\n+                .enumerate()\n+                .fold((0, 0, 0), |(l, s, li), (idx, size)| if size > l {\n+                    (size, l, idx)\n+                } else if size > s {\n+                    (l, size, li)\n+                } else {\n+                    (l, s, li)\n+                });\n+\n+            // We only warn if the largest variant is at least thrice as large as\n+            // the second-largest.\n+            if largest > slargest * 3 && slargest > 0 {\n+                cx.span_lint(VARIANT_SIZE_DIFFERENCES,\n+                                enum_definition.variants[largest_index].span,\n+                                &format!(\"enum variant is more than three times \\\n+                                          larger ({} bytes) than the next largest\",\n+                                         largest));\n             }\n         }\n     }"}, {"sha": "3b559b28f12355210084bd634b180ee10563030e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1999,14 +1999,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::ClosureFnPointer => {\n+                    CastKind::ClosureFnPointer(unsafety) => {\n                         let sig = match op.ty(mir, tcx).sty {\n                             ty::Closure(def_id, substs) => {\n                                 substs.closure_sig_ty(def_id, tcx).fn_sig(tcx)\n                             }\n                             _ => bug!(),\n                         };\n-                        let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig);\n+                        let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig, *unsafety);\n \n                         if let Err(terr) = self.eq_types(\n                             ty_fn_ptr_from,"}, {"sha": "84f74484e606f2499df4f163d4c9f4b367cbd71b", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -162,9 +162,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Cast(CastKind::UnsafeFnPointer, source, expr.ty))\n             }\n-            ExprKind::ClosureFnPointer { source } => {\n+            ExprKind::ClosureFnPointer { source, unsafety } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::ClosureFnPointer, source, expr.ty))\n+                block.and(Rvalue::Cast(CastKind::ClosureFnPointer(unsafety), source, expr.ty))\n             }\n             ExprKind::MutToConstPointer { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));"}, {"sha": "91113dc2271bec57e5f8fef659a8bedbfb55b7db", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -81,8 +81,8 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         Adjust::UnsafeFnPointer => {\n             ExprKind::UnsafeFnPointer { source: expr.to_ref() }\n         }\n-        Adjust::ClosureFnPointer => {\n-            ExprKind::ClosureFnPointer { source: expr.to_ref() }\n+        Adjust::ClosureFnPointer(unsafety) => {\n+            ExprKind::ClosureFnPointer { source: expr.to_ref(), unsafety }\n         }\n         Adjust::NeverToAny => {\n             ExprKind::NeverToAny { source: expr.to_ref() }"}, {"sha": "a661649db0fd4296ed3273474a9d8fedf5e6e695", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -185,6 +185,7 @@ pub enum ExprKind<'tcx> {\n     },\n     ClosureFnPointer {\n         source: ExprRef<'tcx>,\n+        unsafety: hir::Unsafety,\n     },\n     UnsafeFnPointer {\n         source: ExprRef<'tcx>,"}, {"sha": "622cf00ed86e741458de5b7c04e9c211c7788e8b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -427,7 +427,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 let mut kind = match (lo, hi) {\n                     (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n-                        use std::cmp::Ordering;\n                         let cmp = compare_const_vals(\n                             self.tcx,\n                             lo,"}, {"sha": "fe719bff250a84471be0a12a060feb9b4291b9f8", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -64,8 +64,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                                     dest);\n                             }\n                         }\n-                        layout::Variants::Tagged { .. } |\n-                        layout::Variants::NicheFilling { .. } => {},\n+                        layout::Variants::Multiple { .. } => {},\n                     }\n \n                     let dest_val = self.cast_scalar(src.to_scalar()?, src.layout, dest.layout)?;\n@@ -105,7 +104,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            ClosureFnPointer => {\n+            ClosureFnPointer(_) => {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {"}, {"sha": "38a9371b92723ced693e6819f58bf8d2b0b22ce4", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -610,25 +610,24 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     ) -> EvalResult<'tcx, (u128, VariantIdx)> {\n         trace!(\"read_discriminant_value {:#?}\", rval.layout);\n \n-        match rval.layout.variants {\n+        let discr_kind = match rval.layout.variants {\n             layout::Variants::Single { index } => {\n                 let discr_val = rval.layout.ty.ty_adt_def().map_or(\n                     index.as_u32() as u128,\n                     |def| def.discriminant_for_variant(*self.tcx, index).val);\n                 return Ok((discr_val, index));\n             }\n-            layout::Variants::Tagged { .. } |\n-            layout::Variants::NicheFilling { .. } => {},\n-        }\n+            layout::Variants::Multiple { ref discr_kind, .. } => discr_kind,\n+        };\n+\n         // read raw discriminant value\n         let discr_op = self.operand_field(rval, 0)?;\n         let discr_val = self.read_immediate(discr_op)?;\n         let raw_discr = discr_val.to_scalar_or_undef();\n         trace!(\"discr value: {:?}\", raw_discr);\n         // post-process\n-        Ok(match rval.layout.variants {\n-            layout::Variants::Single { .. } => bug!(),\n-            layout::Variants::Tagged { .. } => {\n+        Ok(match *discr_kind {\n+            layout::DiscriminantKind::Tag => {\n                 let bits_discr = match raw_discr.to_bits(discr_val.layout.size) {\n                     Ok(raw_discr) => raw_discr,\n                     Err(_) => return err!(InvalidDiscriminant(raw_discr.erase_tag())),\n@@ -657,11 +656,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     .ok_or_else(|| EvalErrorKind::InvalidDiscriminant(raw_discr.erase_tag()))?;\n                 (real_discr, index.0)\n             },\n-            layout::Variants::NicheFilling {\n+            layout::DiscriminantKind::Niche {\n                 dataful_variant,\n                 ref niche_variants,\n                 niche_start,\n-                ..\n             } => {\n                 let variants_start = niche_variants.start().as_u32() as u128;\n                 let variants_end = niche_variants.end().as_u32() as u128;"}, {"sha": "488f81d8f740ec776ff4897ffd1620a0fe0f7299", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -331,8 +331,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         val: ImmTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Scalar<M::PointerTag>> {\n         use rustc::mir::UnOp::*;\n-        use rustc_apfloat::ieee::{Single, Double};\n-        use rustc_apfloat::Float;\n \n         let layout = val.layout;\n         let val = val.to_scalar()?;"}, {"sha": "4d51772d5ea14800baa086fdb62b56e94162b407", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -958,7 +958,11 @@ where\n             layout::Variants::Single { index } => {\n                 assert_eq!(index, variant_index);\n             }\n-            layout::Variants::Tagged { ref tag, .. } => {\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Tag,\n+                ref discr,\n+                ..\n+            } => {\n                 let adt_def = dest.layout.ty.ty_adt_def().unwrap();\n                 assert!(variant_index.as_usize() < adt_def.variants.len());\n                 let discr_val = adt_def\n@@ -968,16 +972,18 @@ where\n                 // raw discriminants for enums are isize or bigger during\n                 // their computation, but the in-memory tag is the smallest possible\n                 // representation\n-                let size = tag.value.size(self);\n+                let size = discr.value.size(self);\n                 let discr_val = truncate(discr_val, size);\n \n                 let discr_dest = self.place_field(dest, 0)?;\n                 self.write_scalar(Scalar::from_uint(discr_val, size), discr_dest)?;\n             }\n-            layout::Variants::NicheFilling {\n-                dataful_variant,\n-                ref niche_variants,\n-                niche_start,\n+            layout::Variants::Multiple {\n+                discr_kind: layout::DiscriminantKind::Niche {\n+                    dataful_variant,\n+                    ref niche_variants,\n+                    niche_start,\n+                },\n                 ..\n             } => {\n                 assert!("}, {"sha": "05343ac66d966a6c3f2c966fb8926a8162670ae0", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -241,8 +241,7 @@ macro_rules! make_value_visitor {\n                 // If this is a multi-variant layout, we have find the right one and proceed with\n                 // that.\n                 match v.layout().variants {\n-                    layout::Variants::NicheFilling { .. } |\n-                    layout::Variants::Tagged { .. } => {\n+                    layout::Variants::Multiple { .. } => {\n                         let op = v.to_op(self.ecx())?;\n                         let idx = self.ecx().read_discriminant(op)?.1;\n                         let inner = v.project_downcast(self.ecx(), idx)?;"}, {"sha": "45b346b641362fbc9915be97ecd59f6d46cce657", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -563,7 +563,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 );\n                 visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n             }\n-            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer, ref operand, _) => {\n+            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer(_), ref operand, _) => {\n                 let source_ty = operand.ty(self.mir, self.tcx);\n                 let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,"}, {"sha": "9bd5fce31f1a2e9bcb4d3e195e19601514b7f837", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1105,7 +1105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n             Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n-            Rvalue::Cast(CastKind::ClosureFnPointer, ..) |\n+            Rvalue::Cast(CastKind::ClosureFnPointer(_), ..) |\n             Rvalue::Cast(CastKind::Unsize, ..) |\n             Rvalue::Cast(CastKind::MutToConstPointer, ..) |\n             Rvalue::Discriminant(..) |"}, {"sha": "87459571b529cba42d32499fa8dcf31decd35759", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -156,7 +156,7 @@ fn check_rvalue(\n             check_operand(tcx, mir, operand, span)\n         }\n         Rvalue::Cast(CastKind::UnsafeFnPointer, _, _) |\n-        Rvalue::Cast(CastKind::ClosureFnPointer, _, _) |\n+        Rvalue::Cast(CastKind::ClosureFnPointer(_), _, _) |\n         Rvalue::Cast(CastKind::ReifyFnPointer, _, _) => Err((\n             span,\n             \"function pointer casts are not allowed in const fn\".into(),"}, {"sha": "7c37c38f2d741f6503f3442d7c8ebcfca23f82b1", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -586,7 +586,7 @@ fn check_adjustments<'a, 'tcx>(\n             Adjust::NeverToAny |\n             Adjust::ReifyFnPointer |\n             Adjust::UnsafeFnPointer |\n-            Adjust::ClosureFnPointer |\n+            Adjust::ClosureFnPointer(_) |\n             Adjust::MutToConstPointer |\n             Adjust::Borrow(_) |\n             Adjust::Unsize => {}"}, {"sha": "3703ea08b6253245d93aa1350bd61fc87b9f93a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1738,7 +1738,6 @@ impl<'a> Resolver<'a> {\n     /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<hir::Path, ()> {\n-        use std::iter;\n         let mut errored = false;\n \n         let path = if path_str.starts_with(\"::\") {"}, {"sha": "7ea07f5e0cbcb6cd47b572f38f451720332352b7", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -7,14 +7,19 @@ use crate::{NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyErro\n use crate::{Resolver, Segment};\n use crate::{names_to_string, module_to_string};\n use crate::{resolve_error, ResolutionError, Suggestion};\n+use crate::ModuleKind;\n use crate::macros::ParentScope;\n \n use errors::Applicability;\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n-use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n+use rustc::lint::builtin::{\n+    DUPLICATE_MACRO_EXPORTS,\n+    PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n+    UNUSED_IMPORTS,\n+};\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n@@ -1227,10 +1232,97 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             import[ns] = Some(PathResolution::new(def));\n         });\n \n+        self.check_for_redundant_imports(\n+            ident,\n+            directive,\n+            source_bindings,\n+            target_bindings,\n+            target,\n+        );\n+\n         debug!(\"(resolving single import) successfully resolved import\");\n         None\n     }\n \n+    fn check_for_redundant_imports(\n+        &mut self,\n+        ident: Ident,\n+        directive: &'b ImportDirective<'b>,\n+        source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,\n+        target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,\n+        target: Ident,\n+    ) {\n+        // Skip if the import was produced by a macro.\n+        if directive.parent_scope.expansion != Mark::root() {\n+            return;\n+        }\n+\n+        // Skip if we are inside a named module (in contrast to an anonymous\n+        // module defined by a block).\n+        if let ModuleKind::Def(_, _) = directive.parent_scope.module.kind {\n+            return;\n+        }\n+\n+        let mut is_redundant = PerNS {\n+            value_ns: None,\n+            type_ns: None,\n+            macro_ns: None,\n+        };\n+\n+        let mut redundant_span = PerNS {\n+            value_ns: None,\n+            type_ns: None,\n+            macro_ns: None,\n+        };\n+\n+        self.per_ns(|this, ns| if let Some(binding) = source_bindings[ns].get().ok() {\n+            if binding.def() == Def::Err {\n+                return;\n+            }\n+\n+            let orig_blacklisted_binding = mem::replace(\n+                &mut this.blacklisted_binding,\n+                target_bindings[ns].get()\n+            );\n+\n+            match this.early_resolve_ident_in_lexical_scope(\n+                target,\n+                ScopeSet::Import(ns),\n+                &directive.parent_scope,\n+                false,\n+                false,\n+                directive.span,\n+            ) {\n+                Ok(other_binding) => {\n+                    is_redundant[ns] = Some(\n+                        binding.def() == other_binding.def()\n+                        && !other_binding.is_ambiguity()\n+                    );\n+                    redundant_span[ns] =\n+                        Some((other_binding.span, other_binding.is_import()));\n+                }\n+                Err(_) => is_redundant[ns] = Some(false)\n+            }\n+\n+            this.blacklisted_binding = orig_blacklisted_binding;\n+        });\n+\n+        if !is_redundant.is_empty() &&\n+            is_redundant.present_items().all(|is_redundant| is_redundant)\n+        {\n+            self.session.buffer_lint_with_diagnostic(\n+                UNUSED_IMPORTS,\n+                directive.id,\n+                directive.span,\n+                &format!(\"the item `{}` is imported redundantly\", ident),\n+                BuiltinLintDiagnostics::RedundantImport(\n+                    redundant_span.present_items().collect(),\n+                    ident,\n+                ),\n+            );\n+        }\n+    }\n+\n     fn resolve_glob_import(&mut self, directive: &'b ImportDirective<'b>) {\n         let module = match directive.imported_module.get().unwrap() {\n             ModuleOrUniformRoot::Module(module) => module,"}, {"sha": "b68c70224c95e7a05263c582eb83cf7aa00eccaa", "filename": "src/librustc_target/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fx86_64.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -61,8 +61,7 @@ fn classify_arg<'a, Ty, C>(cx: &C, arg: &ArgType<'a, Ty>)\n                         }\n                         return Ok(());\n                     }\n-                    abi::Variants::Tagged { .. } |\n-                    abi::Variants::NicheFilling { .. } => return Err(Memory),\n+                    abi::Variants::Multiple { .. } => return Err(Memory),\n                 }\n             }\n "}, {"sha": "235b530a7ef2fd0f7173934ce4a4419c2afbebd6", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -828,29 +828,34 @@ pub enum Variants {\n         index: VariantIdx,\n     },\n \n-    /// General-case enums: for each case there is a struct, and they all have\n-    /// all space reserved for the tag, and their first field starts\n-    /// at a non-0 offset, after where the tag would go.\n-    Tagged {\n-        tag: Scalar,\n+    /// Enums with more than one inhabited variant: for each case there is\n+    /// a struct, and they all have space reserved for the discriminant,\n+    /// which is the sole field of the enum layout.\n+    Multiple {\n+        discr: Scalar,\n+        discr_kind: DiscriminantKind,\n         variants: IndexVec<VariantIdx, LayoutDetails>,\n     },\n+}\n+\n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub enum DiscriminantKind {\n+    /// Integer tag holding the discriminant value itself.\n+    Tag,\n \n-    /// Multiple cases distinguished by a niche (values invalid for a type):\n+    /// Niche (values invalid for a type) encoding the discriminant:\n     /// the variant `dataful_variant` contains a niche at an arbitrary\n     /// offset (field 0 of the enum), which for a variant with discriminant\n     /// `d` is set to `(d - niche_variants.start).wrapping_add(niche_start)`.\n     ///\n     /// For example, `Option<(usize, &T)>`  is represented such that\n     /// `None` has a null pointer for the second tuple field, and\n     /// `Some` is the identity function (with a non-null reference).\n-    NicheFilling {\n+    Niche {\n         dataful_variant: VariantIdx,\n         niche_variants: RangeInclusive<VariantIdx>,\n-        niche: Scalar,\n         niche_start: u128,\n-        variants: IndexVec<VariantIdx, LayoutDetails>,\n-    }\n+    },\n }\n \n #[derive(PartialEq, Eq, Hash, Debug)]"}, {"sha": "b9d36c09f163646563f4a545cd4250af699decd0", "filename": "src/librustc_target/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "968e82ca39fbedcaeb36e57f6da867543771e393", "filename": "src/librustc_target/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}_mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "455cbebb91e28e551217c61833776fb82ebf3809", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"__mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "2f835420148fefa1b9c55b6f196fe1ced1b1466b", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "cd4b2e1c92252cbeaca750323dd732c2274b64f8", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2\".to_string(),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "606c3f1906031fa45f2e9d1405a551f6627eee8c", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "d22156bc328e017293fde67e5f621fd7b053ec5a", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> TargetResult {\n         linker_flavor: LinkerFlavor::Gcc,\n         options: TargetOptions {\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n             .. base\n         },\n     })"}, {"sha": "e7da24843cc0598f0d991d602b7191ec3851c806", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> TargetResult {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "ea586f42c269e38a7232bee3bec3429e97eccb98", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> TargetResult {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "dae5c8c3d7504d02b75e12203ca544b23057369f", "filename": "src/librustc_target/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> TargetResult {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "a90590a39e75edd58d2146efe0a0dd96fa64453c", "filename": "src/librustc_target/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+v6,+vfp2\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "b056776bdfb8b0d85715af26f7531e6e8a3fb44c", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             features: \"+v6,+vfp2\".to_string(),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"__mcount\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "c03f4b544ed0b3ff186ae8ad9f55c1c5def36ccc", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n@@ -19,6 +19,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "ca7ab474bef88d4d53ffe7e74f3d3e1c962b518b", "filename": "src/librustc_target/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> TargetResult {\n             features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "f0952cccb2087727858c7c7667c100d4de1332c6", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -23,6 +23,7 @@ pub fn target() -> TargetResult {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "a9974f6b80c93e218345dd491104b169ebccba52", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> TargetResult {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "e2d55e9317b76ab965b6ffdc7706134875ca1907", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> TargetResult {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n+            target_mcount: \"__mcount\".to_string(),\n             .. base\n         }\n     })"}, {"sha": "58c59cc8728464dc362e26d428e2d3bedd3f9502", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n@@ -19,6 +19,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "99130e93dad6122c472a53ad7b3dc1f1875edceb", "filename": "src/librustc_target/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_netbsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n@@ -18,6 +18,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"__mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "b2ea8a6f38814878db9d96236985de0f9168afce", "filename": "src/librustc_target/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "48aea4a39b0a4f3f05dcadcd9f063994bb1c48b0", "filename": "src/librustc_target/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "e360abdb38d3fe5130c9baf900c8a3bee14f0676", "filename": "src/librustc_target/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "3f5428de9507446aa5759d93d2ff5f9ed7741650", "filename": "src/librustc_target/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "8116b8c9cc8403ea1e183efa0124345735603be2", "filename": "src/librustc_target/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "7e9d8cd942a238a702d5f3f1d22f14fc874c6646", "filename": "src/librustc_target/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "56ad2940feba81ea0744df4896cf14fc21495f9a", "filename": "src/librustc_target/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "a8152011efa7940cf601f05a0d26ec41a33acc16", "filename": "src/librustc_target/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "36b83c63fca28f1050ec095235a967ef98c85d25", "filename": "src/librustc_target/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "717ae3f1d20e19934ad735efc3e45a3858228d9d", "filename": "src/librustc_target/spec/mipsisa32r6el_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "3f7d233e55fbcd7e23ea71da36af41e027564e8f", "filename": "src/librustc_target/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),\n             max_atomic_width: Some(64),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "4f41b8323a99a5724866df8650d2ddee8ce61e6f", "filename": "src/librustc_target/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> TargetResult {\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),\n             max_atomic_width: Some(64),\n+            target_mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "46fefd78f45197632d36f219b0d07466e35cd605", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -761,7 +761,10 @@ pub struct TargetOptions {\n     /// to opt out. The default is \"aliases\".\n     ///\n     /// Workaround for: https://github.com/rust-lang/rust/issues/57356\n-    pub merge_functions: MergeFunctions\n+    pub merge_functions: MergeFunctions,\n+\n+    /// Use platform dependent mcount function\n+    pub target_mcount: String\n }\n \n impl Default for TargetOptions {\n@@ -845,6 +848,7 @@ impl Default for TargetOptions {\n             simd_types_indirect: true,\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n+            target_mcount: \"mcount\".to_string(),\n         }\n     }\n }\n@@ -1150,6 +1154,7 @@ impl Target {\n         key!(simd_types_indirect, bool);\n         key!(override_export_symbols, opt_list);\n         key!(merge_functions, MergeFunctions)?;\n+        key!(target_mcount);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1364,6 +1369,7 @@ impl ToJson for Target {\n         target_option_val!(simd_types_indirect);\n         target_option_val!(override_export_symbols);\n         target_option_val!(merge_functions);\n+        target_option_val!(target_mcount);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "fc881db6b09063d7cc863d2f9cc900c3c2720fa7", "filename": "src/librustc_target/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "89e68ab30620008ea440c7c3c73877b8599c4e82", "filename": "src/librustc_target/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult, RelroLevel};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult, RelroLevel};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n@@ -21,6 +21,9 @@ pub fn target() -> TargetResult {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "be91dc44b9357912a55b594cffc39d6a672b9adc", "filename": "src/librustc_target/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "784e3b090943caed6dc598ff43f848c51ac5565a", "filename": "src/librustc_target/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "a3cf47fc5e08229f7d7acc2d53ab691e9405e93c", "filename": "src/librustc_target/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "ff52fbc179b168d2ae3aaded592caad435fc8c0d", "filename": "src/librustc_target/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "1868c42be39d20a9b58ddd06522a74239314841e", "filename": "src/librustc_target/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "1ad2201092c3f8bf75276bcefcafd9851ba87eff", "filename": "src/librustc_target/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"_mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "6cc3a6c2ef3f2d8979c7ae94d9bb0d1d2d902920", "filename": "src/librustc_target/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n@@ -16,6 +16,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"__mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "09d1debef41e9a1ab21ae3759ba7c517dcb77020", "filename": "src/librustc_target/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"__mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "c54181741b3cca5f1955ccb949f023ef565d399a", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::apple_base::opts();\n@@ -19,6 +19,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"apple\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"\\u{1}mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "f6861f2a6872727943578fb28b8b8e4ea30702a3", "filename": "src/librustc_target/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n@@ -24,6 +24,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"rumprun\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"__mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "6f4ab4995b5dc3255d58cee0a31b003742effdf7", "filename": "src/librustc_target/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n@@ -18,6 +18,9 @@ pub fn target() -> TargetResult {\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n+        options: TargetOptions {\n+            target_mcount: \"__mcount\".to_string(),\n+            .. base\n+        },\n     })\n }"}, {"sha": "c470bc09e8cd0173d20504a4c73e551143fe006b", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -225,7 +225,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             }\n             ty::Closure(def_id_a, substs_a) => {\n                 // Non-capturing closures are coercible to\n-                // function pointers\n+                // function pointers or unsafe function pointers.\n+                // It cannot convert closures that require unsafe.\n                 self.coerce_closure_to_fn(a, def_id_a, substs_a, b)\n             }\n             _ => {\n@@ -714,16 +715,19 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let hir_id_a = self.tcx.hir().as_local_hir_id(def_id_a).unwrap();\n         match b.sty {\n-            ty::FnPtr(_) if self.tcx.with_freevars(hir_id_a, |v| v.is_empty()) => {\n+            ty::FnPtr(fn_ty) if self.tcx.with_freevars(hir_id_a, |v| v.is_empty()) => {\n                 // We coerce the closure, which has fn type\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n+                // or\n+                //     `unsafe fn(arg0,arg1,...) -> _`\n                 let sig = self.closure_sig(def_id_a, substs_a);\n-                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig);\n+                let unsafety = fn_ty.unsafety();\n+                let pointer_ty = self.tcx.coerce_closure_fn_ty(sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n                        a, b, pointer_ty);\n-                self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer))\n+                self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer(unsafety)))\n             }\n             _ => self.unify_and(a, b, identity),\n         }"}, {"sha": "3579810b8d75f68abd472aa63bb8306144d00e8d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -420,9 +420,6 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     def_id: DefId,\n     return_ty: Option<Ty<'tcx>>,\n ) {\n-    use ty::subst::Subst;\n-    use rustc::ty::TypeFoldable;\n-\n     let predicates = fcx.tcx.predicates_of(def_id);\n \n     let generics = tcx.generics_of(def_id);\n@@ -1010,8 +1007,6 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n     span: Span,\n     id: hir::HirId)\n {\n-    use rustc::ty::TypeFoldable;\n-\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);"}, {"sha": "1fa16352b867ad0609d96fc3274ca01aa624d47b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -64,7 +64,6 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(exhaustive_patterns)]\n #![feature(nll)]\n-#![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(never_type)]"}, {"sha": "f7e8cdeaeca898ce95708a610d0110da2c48305e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1069,8 +1069,6 @@ themePicker.onblur = handleThemeButtonsBlur;\n     }\n \n     if cx.shared.include_sources {\n-        use std::path::Component;\n-\n         let mut hierarchy = Hierarchy::new(OsString::new());\n         for source in cx.shared.local_sources.iter()\n                                              .filter_map(|p| p.0.strip_prefix(&cx.shared.src_root)"}, {"sha": "0bbc7c5c4b223396a0bddd2301c2a43b8726e2a6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -371,8 +371,7 @@ pub fn make_test(s: &str,\n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n     let (already_has_main, already_has_extern_crate, found_macro) = crate::syntax::with_globals(|| {\n-        use crate::syntax::{ast, parse::{self, ParseSess}, source_map::FilePathMapping};\n-        use crate::syntax_pos::FileName;\n+        use crate::syntax::{parse::{self, ParseSess}, source_map::FilePathMapping};\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n "}, {"sha": "081fff0562b162c224b66177de7f870b1aae299b", "filename": "src/libstd/error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -197,7 +197,6 @@ pub trait Error: Debug + Display {\n     fn source(&self) -> Option<&(dyn Error + 'static)> { None }\n \n     /// Gets the `TypeId` of `self`\n-    #[doc(hidden)]\n     #[stable(feature = \"error_type_id\", since = \"1.34.0\")]\n     fn type_id(&self) -> TypeId where Self: 'static {\n         TypeId::of::<Self>()"}, {"sha": "c72d09f7a03d2931f78ce0f01e6a0d44a2eeab2c", "filename": "src/test/codegen/instrument-mcount.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -0,0 +1,7 @@\n+// ignore-tidy-linelength\n+// compile-flags: -Z instrument-mcount\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK: attributes #{{.*}} \"instrument-function-entry-inlined\"=\"{{.*}}mcount{{.*}}\" \"no-frame-pointer-elim\"=\"true\"\n+pub fn foo() {}"}, {"sha": "36777693faba0cd54886175384087bbf0d78d476", "filename": "src/test/compile-fail/coerce-unsafe-closure-to-unsafe-fn-ptr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n+    //~^ ERROR E0133\n+    let _: unsafe fn() = || unsafe { ::std::pin::Pin::new_unchecked(&0_u8); }; // OK\n+}"}, {"sha": "5f7e357eeb2a9f591c03502c1a516c64512c461c", "filename": "src/test/run-pass/binding/match-arm-statics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -45,8 +45,6 @@ pub mod glfw {\n }\n \n fn issue_6533() {\n-    use glfw;\n-\n     fn action_to_str(state: glfw::InputState) -> &'static str {\n         use glfw::{RELEASE, PRESS, REPEAT};\n         match state {"}, {"sha": "8c17b01e2bd899da9bff7fe79cac7594920ea96a", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -238,7 +238,6 @@ pub fn main() {\n // Basic test to make sure that we can invoke the `write!` macro with an\n // fmt::Write instance.\n fn test_write() {\n-    use std::fmt::Write;\n     let mut buf = String::new();\n     write!(&mut buf, \"{}\", 3);\n     {\n@@ -267,7 +266,6 @@ fn test_print() {\n // Just make sure that the macros are defined, there's not really a lot that we\n // can do with them just yet (to test the output)\n fn test_format_args() {\n-    use std::fmt::Write;\n     let mut buf = String::new();\n     {\n         let w = &mut buf;"}, {"sha": "2775aac015615ed0b7fa7c4744c9a6fd1865a6ae", "filename": "src/test/run-pass/invalid_const_promotion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -25,7 +25,6 @@ fn foo() {\n #[cfg(unix)]\n fn check_status(status: std::process::ExitStatus)\n {\n-    use libc;\n     use std::os::unix::process::ExitStatusExt;\n \n     assert!(status.signal() == Some(libc::SIGILL)"}, {"sha": "63fd9db08ff2fc35797c241bac466ab03c444f5d", "filename": "src/test/run-pass/issues/issue-38556.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fissues%2Fissue-38556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fissues%2Fissue-38556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-38556.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -9,6 +9,5 @@ macro_rules! reexport {\n reexport!();\n \n fn main() {\n-    use Bar;\n     fn f(_: Bar) {}\n }"}, {"sha": "484cd782a09df6e4283b6b4f7fcb571e9f791370", "filename": "src/test/run-pass/issues/issue-39367.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -15,7 +15,6 @@ fn arena() -> &'static ArenaSet<Vec<u8>> {\n         fn require_sync<T: Sync>(_: &T) { }\n         unsafe fn __stability() -> &'static ArenaSet<Vec<u8>> {\n             use std::mem::transmute;\n-            use std::boxed::Box;\n             static mut DATA: *const ArenaSet<Vec<u8>> = 0 as *const ArenaSet<Vec<u8>>;\n \n             static mut ONCE: Once = ONCE_INIT;"}, {"sha": "9f868d6e5c3e412422c8034416685f2a61a14fc5", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -36,7 +36,6 @@ fn loud_recurse() {\n #[cfg(unix)]\n fn check_status(status: std::process::ExitStatus)\n {\n-    use libc;\n     use std::os::unix::process::ExitStatusExt;\n \n     assert!(!status.success());"}, {"sha": "566b3581046d913920637952cb163ee650f983b0", "filename": "src/test/run-pass/rfcs/rfc-2126-extern-absolute-paths/basic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -4,6 +4,8 @@\n // compile-flags:--extern xcrate\n // edition:2018\n \n+#![allow(unused_imports)]\n+\n use xcrate::Z;\n \n fn f() {"}, {"sha": "626e1ae71bc2fc7a7322ac392ead07e0d3c565a1", "filename": "src/test/run-pass/traits/traits-multidispatch-infer-convert-target.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-multidispatch-infer-convert-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-multidispatch-infer-convert-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-multidispatch-infer-convert-target.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -28,7 +28,6 @@ where T : Convert<U>\n }\n \n fn main() {\n-    use std::default::Default;\n     // T = i16, U = u32\n     test(22_i16, Default::default(),  2, 4);\n "}, {"sha": "fe15b912d6029181a7a66b6a5aa031a33d5938cc", "filename": "src/test/run-pass/typeck-closure-to-unsafe-fn-ptr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Ftypeck-closure-to-unsafe-fn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Ftypeck-closure-to-unsafe-fn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-closure-to-unsafe-fn-ptr.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -0,0 +1,7 @@\n+unsafe fn call_unsafe(func: unsafe fn() -> ()) -> () {\n+    func()\n+}\n+\n+pub fn main() {\n+    unsafe { call_unsafe(|| {}); }\n+}"}, {"sha": "ae4de92ff74881a14997f6ca35a8095ea82830f6", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -127,6 +127,21 @@ fn punch_card() -> impl std::fmt::Debug {\n     ..=.. ..=..    .. ..=..=..    ..=..=.. ..    .. ..=.. ..\n }\n \n+fn r#match() {\n+    let val = match match match match match () {\n+        () => ()\n+    } {\n+        () => ()\n+    } {\n+        () => ()\n+    } {\n+        () => ()\n+    } {\n+        () => ()\n+    };\n+    assert_eq!(val, ());\n+}\n+\n pub fn main() {\n     strange();\n     funny();\n@@ -142,4 +157,5 @@ pub fn main() {\n     union();\n     special_characters();\n     punch_card();\n+    r#match();\n }"}, {"sha": "4754d8880763aeeaa4a3b0dcdf6aebc837a4badc", "filename": "src/test/ui/lint/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -66,6 +66,7 @@ mod bar {\n \n fn g() {\n     use self::g; //~ ERROR unused import: `self::g`\n+    //~^ ERROR the item `g` is imported redundantly\n     fn f() {\n         self::g();\n     }\n@@ -75,6 +76,7 @@ fn g() {\n #[allow(unused_variables)]\n fn h() {\n     use test2::foo; //~ ERROR unused import: `test2::foo`\n+    //~^ ERROR the item `foo` is imported redundantly\n     let foo = 0;\n }\n "}, {"sha": "96d71a228a5f2a4bc80ab62fae74f7bbecc4a37a", "filename": "src/test/ui/lint/lint-unused-imports.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -34,14 +34,36 @@ error: unused import: `foo::Square`\n LL |         use foo::Square;\n    |             ^^^^^^^^^^^\n \n+error: the item `g` is imported redundantly\n+  --> $DIR/lint-unused-imports.rs:68:9\n+   |\n+LL | / fn g() {\n+LL | |     use self::g;\n+   | |         ^^^^^^^\n+LL | |\n+LL | |     fn f() {\n+LL | |         self::g();\n+LL | |     }\n+LL | | }\n+   | |_- the item `g` is already defined here\n+\n error: unused import: `self::g`\n   --> $DIR/lint-unused-imports.rs:68:9\n    |\n LL |     use self::g;\n    |         ^^^^^^^\n \n+error: the item `foo` is imported redundantly\n+  --> $DIR/lint-unused-imports.rs:78:9\n+   |\n+LL | use test2::{foo, bar};\n+   |             --- the item `foo` is already imported here\n+...\n+LL |     use test2::foo;\n+   |         ^^^^^^^^^^\n+\n error: unused import: `test2::foo`\n-  --> $DIR/lint-unused-imports.rs:77:9\n+  --> $DIR/lint-unused-imports.rs:78:9\n    |\n LL |     use test2::foo;\n    |         ^^^^^^^^^^\n@@ -52,5 +74,5 @@ error: unused import: `test::B2`\n LL | use test::B2;\n    |     ^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "328f8232bafa84fcdd13be88bf90c80a71f83abc", "filename": "src/test/ui/lint/use-redundant.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -0,0 +1,27 @@\n+// compile-pass\n+#![warn(unused_imports)]\n+\n+use crate::foo::Bar; //~ WARNING first import\n+\n+mod foo {\n+    pub type Bar = i32;\n+}\n+\n+fn baz() -> Bar {\n+    3\n+}\n+\n+mod m1 { pub struct S {} }\n+mod m2 { pub struct S {} }\n+\n+use m1::*;\n+use m2::*;\n+\n+fn main() {\n+    use crate::foo::Bar; //~ WARNING redundant import\n+    let _a: Bar = 3;\n+    baz();\n+\n+    use m1::S; //~ WARNING redundant import\n+    let _s = S {};\n+}"}, {"sha": "fbd9f81f18f8a8f5a56ea0e675dcaba997e69595", "filename": "src/test/ui/lint/use-redundant.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -0,0 +1,27 @@\n+warning: unused import: `m1::*`\n+  --> $DIR/use-redundant.rs:17:5\n+   |\n+LL | use m1::*;\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/use-redundant.rs:2:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: unused import: `m2::*`\n+  --> $DIR/use-redundant.rs:18:5\n+   |\n+LL | use m2::*;\n+   |     ^^^^^\n+\n+warning: the item `Bar` is imported redundantly\n+  --> $DIR/use-redundant.rs:21:9\n+   |\n+LL | use crate::foo::Bar;\n+   |     --------------- the item `Bar` is already imported here\n+...\n+LL |     use crate::foo::Bar;\n+   |         ^^^^^^^^^^^^^^^\n+"}, {"sha": "2c388cf3713b0c0aafc4be604803c3a9d1cd9212", "filename": "src/test/ui/rust-2018/future-proofing-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n \n #![allow(non_camel_case_types)]\n+#![allow(unused_imports)]\n \n mod T {\n     pub struct U;"}, {"sha": "7021489a6ddcfaf9e1b3e7ea33f276279a28e86b", "filename": "src/test/ui/rust-2018/future-proofing-locals.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fac5c98b22faa7fce2d5d64bf34c61340883302/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr?ref=4fac5c98b22faa7fce2d5d64bf34c61340883302", "patch": "@@ -1,53 +1,53 @@\n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:13:9\n+  --> $DIR/future-proofing-locals.rs:14:9\n    |\n LL |     use T as _;\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:14:9\n+  --> $DIR/future-proofing-locals.rs:15:9\n    |\n LL |     use T::U;\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:15:9\n+  --> $DIR/future-proofing-locals.rs:16:9\n    |\n LL |     use T::*;\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:19:9\n+  --> $DIR/future-proofing-locals.rs:20:9\n    |\n LL |     use T;\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:25:9\n+  --> $DIR/future-proofing-locals.rs:26:9\n    |\n LL |     use x as _;\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:31:9\n+  --> $DIR/future-proofing-locals.rs:32:9\n    |\n LL |     use x;\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:37:17\n+  --> $DIR/future-proofing-locals.rs:38:17\n    |\n LL |             use x;\n    |                 ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:45:10\n+  --> $DIR/future-proofing-locals.rs:46:10\n    |\n LL |     use {T as _, x};\n    |          ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:45:18\n+  --> $DIR/future-proofing-locals.rs:46:18\n    |\n LL |     use {T as _, x};\n    |                  ^"}]}