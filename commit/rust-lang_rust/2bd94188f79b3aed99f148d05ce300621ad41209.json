{"sha": "2bd94188f79b3aed99f148d05ce300621ad41209", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDk0MTg4Zjc5YjNhZWQ5OWYxNDhkMDVjZTMwMDYyMWFkNDEyMDk=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2016-10-25T05:57:33Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2016-10-25T15:16:40Z"}, "message": "Add identifier to unused import warnings", "tree": {"sha": "f870783b83422791f8131cbc8a02b5bf3464ae8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f870783b83422791f8131cbc8a02b5bf3464ae8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd94188f79b3aed99f148d05ce300621ad41209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd94188f79b3aed99f148d05ce300621ad41209", "html_url": "https://github.com/rust-lang/rust/commit/2bd94188f79b3aed99f148d05ce300621ad41209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd94188f79b3aed99f148d05ce300621ad41209/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd2427307018a68e0b77438bbe40d339a54e587", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd2427307018a68e0b77438bbe40d339a54e587", "html_url": "https://github.com/rust-lang/rust/commit/7bd2427307018a68e0b77438bbe40d339a54e587"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "e1ea40809da07c58713c887ee8bb0432eb70e073", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94188f79b3aed99f148d05ce300621ad41209/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94188f79b3aed99f148d05ce300621ad41209/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=2bd94188f79b3aed99f148d05ce300621ad41209", "patch": "@@ -59,10 +59,12 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n                 // Check later.\n                 return;\n             }\n-            self.session.add_lint(lint::builtin::UNUSED_IMPORTS,\n-                                  id,\n-                                  span,\n-                                  \"unused import\".to_string());\n+            let msg = if let Ok(snippet) = self.session.codemap().span_to_snippet(span) {\n+                format!(\"unused import: `{}`\", snippet)\n+            } else {\n+                \"unused import\".to_string()\n+            };\n+            self.session.add_lint(lint::builtin::UNUSED_IMPORTS, id, span, msg);\n         } else {\n             // This trait import is definitely used, in a way other than\n             // method resolution."}, {"sha": "7e41a672bf32541e831591b66a9f0b675913364e", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94188f79b3aed99f148d05ce300621ad41209/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94188f79b3aed99f148d05ce300621ad41209/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=2bd94188f79b3aed99f148d05ce300621ad41209", "patch": "@@ -30,10 +30,13 @@ impl<'a, 'tcx> UnusedTraitImportVisitor<'a, 'tcx> {\n         if self.tcx.used_trait_imports.borrow().contains(&id) {\n             return;\n         }\n-        self.tcx.sess.add_lint(lint::builtin::UNUSED_IMPORTS,\n-                               id,\n-                               span,\n-                               \"unused import\".to_string());\n+\n+        let msg = if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n+            format!(\"unused import: `{}`\", snippet)\n+        } else {\n+            \"unused import\".to_string()\n+        };\n+        self.tcx.sess.add_lint(lint::builtin::UNUSED_IMPORTS, id, span, msg);\n     }\n }\n "}, {"sha": "3f91c3e1e5c796fab129ac2964153ae0eb36ddf7", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94188f79b3aed99f148d05ce300621ad41209/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94188f79b3aed99f148d05ce300621ad41209/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=2bd94188f79b3aed99f148d05ce300621ad41209", "patch": "@@ -17,19 +17,19 @@ use std::mem::*;            // shouldn't get errors for not using\n                             // everything imported\n \n // Should get errors for both 'Some' and 'None'\n-use std::option::Option::{Some, None}; //~ ERROR unused import\n-                                     //~^ ERROR unused import\n+use std::option::Option::{Some, None}; //~ ERROR unused import: `Some`\n+                                    //~^ ERROR unused import: `None`\n \n-use test::A;       //~ ERROR unused import\n+use test::A;       //~ ERROR unused import: `test::A`\n // Be sure that if we just bring some methods into scope that they're also\n // counted as being used.\n use test::B;\n // But only when actually used: do not get confused by the method with the same name.\n-use test::B2; //~ ERROR unused import\n+use test::B2; //~ ERROR unused import: `test::B2`\n \n // Make sure this import is warned about when at least one of its imported names\n // is unused\n-use test2::{foo, bar}; //~ ERROR unused import\n+use test2::{foo, bar}; //~ ERROR unused import: `bar`\n \n mod test2 {\n     pub fn foo() {}\n@@ -57,7 +57,7 @@ mod bar {\n \n     pub mod c {\n         use foo::Point;\n-        use foo::Square; //~ ERROR unused import\n+        use foo::Square; //~ ERROR unused import: `foo::Square`\n         pub fn cc(_p: Point) -> super::Square {\n             fn f() -> super::Square {\n                 super::Square\n@@ -73,7 +73,7 @@ mod bar {\n }\n \n fn g() {\n-    use self::g; //~ ERROR unused import\n+    use self::g; //~ ERROR unused import: `self::g`\n     fn f() {\n         self::g();\n     }\n@@ -82,7 +82,7 @@ fn g() {\n // c.f. issue #35135\n #[allow(unused_variables)]\n fn h() {\n-    use test2::foo; //~ ERROR unused import\n+    use test2::foo; //~ ERROR unused import: `test2::foo`\n     let foo = 0;\n }\n "}]}