{"sha": "9a5d6170927547226870bbf4eb9cad62cdc405f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWQ2MTcwOTI3NTQ3MjI2ODcwYmJmNGViOWNhZDYyY2RjNDA1ZjY=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-01-03T16:45:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T07:34:33Z"}, "message": "Add is_mutbl field to arg", "tree": {"sha": "4726aaac7d69cdc4e5becae2afdd610a71dcae12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4726aaac7d69cdc4e5becae2afdd610a71dcae12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5d6170927547226870bbf4eb9cad62cdc405f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5d6170927547226870bbf4eb9cad62cdc405f6", "html_url": "https://github.com/rust-lang/rust/commit/9a5d6170927547226870bbf4eb9cad62cdc405f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5d6170927547226870bbf4eb9cad62cdc405f6/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa97c21a57f10ff1f904a81a13ad8406e8224cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa97c21a57f10ff1f904a81a13ad8406e8224cb", "html_url": "https://github.com/rust-lang/rust/commit/dfa97c21a57f10ff1f904a81a13ad8406e8224cb"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "cf3d7c362b7cb88ea29850520f85b08893eebc13", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -1845,6 +1845,7 @@ fn trans_enum_variant(ccx: @crate_ctxt,\n     let fn_args = do args.map |varg| {\n         ast::arg {\n             mode: ast::expl(ast::by_copy),\n+            is_mutbl: false,\n             ty: varg.ty,\n             pat: ast_util::ident_to_pat(\n                 ccx.tcx.sess.next_node_id(),\n@@ -1908,6 +1909,7 @@ fn trans_tuple_struct(ccx: @crate_ctxt,\n     let fn_args = do fields.map |field| {\n         ast::arg {\n             mode: ast::expl(ast::by_copy),\n+            is_mutbl: false,\n             ty: field.node.ty,\n             pat: ast_util::ident_to_pat(ccx.tcx.sess.next_node_id(),\n                                         ast_util::dummy_sp(),"}, {"sha": "81853e4875a5d7fafae29ce471f6361d7f815f2d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -1194,11 +1194,11 @@ impl Ty : to_bytes::IterBytes {\n     }\n }\n \n-\n #[auto_encode]\n #[auto_decode]\n struct arg {\n     mode: mode,\n+    is_mutbl: bool,\n     ty: @Ty,\n     pat: @pat,\n     id: node_id,"}, {"sha": "470b6e540edd6e66190eccf11cc9ded20ea8060a", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -595,6 +595,7 @@ fn mk_ser_method(\n \n     let ser_inputs = ~[ast::arg {\n         mode: ast::infer(cx.next_id()),\n+        is_mutbl: false,\n         ty: ty_s,\n         pat: @ast::pat {\n             id: cx.next_id(),\n@@ -658,6 +659,7 @@ fn mk_deser_method(\n \n     let deser_inputs = ~[ast::arg {\n         mode: ast::infer(cx.next_id()),\n+        is_mutbl: false,\n         ty: ty_d,\n         pat: @ast::pat {\n             id: cx.next_id(),\n@@ -1194,6 +1196,7 @@ fn mk_enum_deser_body(\n             ast::fn_decl {\n                 inputs: ~[ast::arg {\n                     mode: ast::infer(cx.next_id()),\n+                    is_mutbl: false,\n                     ty: @ast::Ty {\n                         id: cx.next_id(),\n                         node: ast::ty_infer,"}, {"sha": "5e3d88b8b7fcf2eee9b2a2d63b28220741a691fb", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -319,6 +319,7 @@ fn mk_arg(cx: ext_ctxt,\n     let arg_pat = mk_pat_ident(cx, span, ident);\n     ast::arg {\n         mode: ast::infer(cx.next_id()),\n+        is_mutbl: false,\n         ty: ty,\n         pat: arg_pat,\n         id: cx.next_id()"}, {"sha": "343ce4b039b51cb2ae0413395e78deefc6bdf8a2", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -200,6 +200,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     fn arg(name: ident, ty: @ast::Ty) -> ast::arg {\n         ast::arg {\n             mode: ast::infer(self.next_id()),\n+            is_mutbl: false,\n             ty: ty,\n             pat: @ast::pat {\n                 id: self.next_id(),"}, {"sha": "fc2ad0192eb4a9c15ca51e606baeddc7e8be07bb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -127,6 +127,7 @@ fn fold_attribute_(at: attribute, fld: ast_fold) -> attribute {\n fn fold_arg_(a: arg, fld: ast_fold) -> arg {\n     ast::arg {\n         mode: a.mode,\n+        is_mutbl: a.is_mutbl,\n         ty: fld.fold_ty(a.ty),\n         pat: fld.fold_pat(a.pat),\n         id: fld.new_id(a.id),"}, {"sha": "29b8528b1c9bfc4653c0a4e9890b4a2b25a61d46", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5d6170927547226870bbf4eb9cad62cdc405f6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9a5d6170927547226870bbf4eb9cad62cdc405f6", "patch": "@@ -716,6 +716,7 @@ impl Parser {\n     // identifier names.\n     fn parse_arg_general(require_name: bool) -> arg {\n         let mut m;\n+        let is_mutbl = false;\n         let pat = if require_name || self.is_named_argument() {\n             m = self.parse_arg_mode();\n             let pat = self.parse_pat(false);\n@@ -730,7 +731,8 @@ impl Parser {\n \n         let t = self.parse_ty(false);\n \n-        ast::arg { mode: m, ty: t, pat: pat, id: self.get_id() }\n+        ast::arg { mode: m, is_mutbl: is_mutbl,\n+                  ty: t, pat: pat, id: self.get_id() }\n     }\n \n     fn parse_arg() -> arg_or_capture_item {\n@@ -756,6 +758,7 @@ impl Parser {\n             };\n             either::Left(ast::arg {\n                 mode: m,\n+                is_mutbl: false,\n                 ty: t,\n                 pat: pat,\n                 id: p.get_id()"}]}