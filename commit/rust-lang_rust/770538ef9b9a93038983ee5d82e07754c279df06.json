{"sha": "770538ef9b9a93038983ee5d82e07754c279df06", "node_id": "C_kwDOAAsO6NoAKDc3MDUzOGVmOWI5YTkzMDM4OTgzZWU1ZDgyZTA3NzU0YzI3OWRmMDY", "commit": {"author": {"name": "Nicolas Barrios", "email": "nbarrios1337@gmail.com", "date": "2022-10-20T02:06:50Z"}, "committer": {"name": "Nicolas Barrios", "email": "nbarrios1337@gmail.com", "date": "2022-10-21T00:08:27Z"}, "message": "Add fix suggestions for E0199, E0200, and E0569", "tree": {"sha": "b1a8b243e0920302ee9708aea4cb6867b336fe3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1a8b243e0920302ee9708aea4cb6867b336fe3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770538ef9b9a93038983ee5d82e07754c279df06", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEcF/YC6xzUKUum7cpwd23pCnpFfcFAmNR4vsACgkQwd23pCnp\nFfdpQg/9HYcb5wTM+96z+XxwaDVLLAzmz9HgORkszHloJWi43Jr4fOje+LkF0fkv\nAD7wqP4YAd1B6agFg0gijY3VvEYQDF8vUMQZmC7qdSg6v+pSknsOyI1OxHEcOC7g\nnBsudmMoW/dMRXHUc2ecbZVMR4O+Ize78CZK6fDqkVxvRoecExpLRBO7FEHXVany\ncnKPN9GOT12bYpaUW7DoupsMGmGqVIY+dnSNwyxSNV0oqL592vOgVIgx1HvuoZvB\nuxB2g5UUnML1xknfBxt57FBqkwK38A3hz9D04y4qzFQiBdAY7nYFUmqxit4Y4Vbd\n0BTO78G2UHstqCley3ssdBVNWpgyB8ol4PEQVIkLuAQ1uBgGfqFIi1LRRsvvJnh1\nvr6IxAHk/6NcSdY8SmCxyy6ionR3iqJPsNrvjSlYTGUZHZ69oSr2dvGeMiH4mjMD\neT0AiivcBqoaCOC0oE1JJirs/R95scqbk5g58O7IYHexhJCeW2FPmTB4PPojY07u\nOyUzp6QFiyp6rKNxELXz452usntmuoDMUd9Q3rLwGqpF5vfs02NqK9xFvSHyqpPW\npFcA8zNRvxEaYeU8SL+2SOONhwUS26i1JexJLwb04K+Ajuzp1MZ03PbE4ZJRRYgj\nBHrkKIUXMI35DPGu2U8pRv9tngJkmde63b7cXFrsMggyIkiNOss=\n=YJ4p\n-----END PGP SIGNATURE-----", "payload": "tree b1a8b243e0920302ee9708aea4cb6867b336fe3f\nparent dcb376115066d111dbf5f13d5ac2a2dbe8c12add\nauthor Nicolas Barrios <nbarrios1337@gmail.com> 1666231610 -0400\ncommitter Nicolas Barrios <nbarrios1337@gmail.com> 1666310907 -0400\n\nAdd fix suggestions for E0199, E0200, and E0569\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770538ef9b9a93038983ee5d82e07754c279df06", "html_url": "https://github.com/rust-lang/rust/commit/770538ef9b9a93038983ee5d82e07754c279df06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770538ef9b9a93038983ee5d82e07754c279df06/comments", "author": {"login": "nbarrios1337", "id": 29100363, "node_id": "MDQ6VXNlcjI5MTAwMzYz", "avatar_url": "https://avatars.githubusercontent.com/u/29100363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbarrios1337", "html_url": "https://github.com/nbarrios1337", "followers_url": "https://api.github.com/users/nbarrios1337/followers", "following_url": "https://api.github.com/users/nbarrios1337/following{/other_user}", "gists_url": "https://api.github.com/users/nbarrios1337/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbarrios1337/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbarrios1337/subscriptions", "organizations_url": "https://api.github.com/users/nbarrios1337/orgs", "repos_url": "https://api.github.com/users/nbarrios1337/repos", "events_url": "https://api.github.com/users/nbarrios1337/events{/privacy}", "received_events_url": "https://api.github.com/users/nbarrios1337/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbarrios1337", "id": 29100363, "node_id": "MDQ6VXNlcjI5MTAwMzYz", "avatar_url": "https://avatars.githubusercontent.com/u/29100363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbarrios1337", "html_url": "https://github.com/nbarrios1337", "followers_url": "https://api.github.com/users/nbarrios1337/followers", "following_url": "https://api.github.com/users/nbarrios1337/following{/other_user}", "gists_url": "https://api.github.com/users/nbarrios1337/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbarrios1337/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbarrios1337/subscriptions", "organizations_url": "https://api.github.com/users/nbarrios1337/orgs", "repos_url": "https://api.github.com/users/nbarrios1337/repos", "events_url": "https://api.github.com/users/nbarrios1337/events{/privacy}", "received_events_url": "https://api.github.com/users/nbarrios1337/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb376115066d111dbf5f13d5ac2a2dbe8c12add", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb376115066d111dbf5f13d5ac2a2dbe8c12add", "html_url": "https://github.com/rust-lang/rust/commit/dcb376115066d111dbf5f13d5ac2a2dbe8c12add"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "25b2ed76adf2c41acec2332b78a2f8e530789ef4", "filename": "compiler/rustc_hir_analysis/src/coherence/unsafety.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -26,6 +26,12 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"implementing the trait `{}` is not unsafe\",\n                     trait_ref.print_only_trait_path()\n                 )\n+                .span_suggestion_verbose(\n+                    item.span.with_hi(item.span.lo() + rustc_span::BytePos(7)),\n+                    \"remove `unsafe` from this trait implementation\",\n+                    \"\",\n+                    rustc_errors::Applicability::MachineApplicable,\n+                )\n                 .emit();\n             }\n \n@@ -37,6 +43,18 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"the trait `{}` requires an `unsafe impl` declaration\",\n                     trait_ref.print_only_trait_path()\n                 )\n+                .note(format!(\n+                    \"the trait `{}` enforces invariants that the compiler can't check. \\\n+                    Review the trait documentation and make sure this implementation \\\n+                    upholds those invariants before adding the `unsafe` keyword\",\n+                    trait_ref.print_only_trait_path()\n+                ))\n+                .span_suggestion_verbose(\n+                    item.span.shrink_to_lo(),\n+                    \"add `unsafe` to this trait implementation\",\n+                    \"unsafe \",\n+                    rustc_errors::Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n             }\n \n@@ -48,6 +66,18 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n                     attr_name\n                 )\n+                .note(format!(\n+                    \"the trait `{}` enforces invariants that the compiler can't check. \\\n+                    Review the trait documentation and make sure this implementation \\\n+                    upholds those invariants before adding the `unsafe` keyword\",\n+                    trait_ref.print_only_trait_path()\n+                ))\n+                .span_suggestion_verbose(\n+                    item.span.shrink_to_lo(),\n+                    \"add `unsafe` to this trait implementation\",\n+                    \"unsafe \",\n+                    rustc_errors::Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n             }\n "}, {"sha": "6320187827256a9224b66e2b2b2454d8ad4b1534", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -3,12 +3,24 @@ error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl MySafeTrait for Foo {}\n+LL + impl MySafeTrait for Foo {}\n+   |\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n   --> $DIR/coherence-default-trait-impl.rs:13:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `MyUnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl MyUnsafeTrait for Foo {}\n+   | ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "82169ee01bedd7b76ede76f5bc29d0f5f8053391", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -8,6 +8,12 @@ LL | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n+   | ++++++\n \n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:27:1\n@@ -19,6 +25,12 @@ LL | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n+   | ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99d808c0d4b1e115947acdbf76c2e9f55f23b19c", "filename": "src/test/ui/error-codes/E0199.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -3,6 +3,12 @@ error[E0199]: implementing the trait `Bar` is not unsafe\n    |\n LL | unsafe impl Bar for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl Bar for Foo { }\n+LL + impl Bar for Foo { }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1fd86aecee177a787d507289349ce8a10106d9b5", "filename": "src/test/ui/error-codes/E0200.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -3,6 +3,12 @@ error[E0200]: the trait `Bar` requires an `unsafe impl` declaration\n    |\n LL | impl Bar for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `Bar` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl Bar for Foo { }\n+   | ++++++\n \n error: aborting due to previous error\n "}, {"sha": "0b1fb30478ff682667923f9791e7276a949f1e31", "filename": "src/test/ui/traits/safety-trait-impl-cc.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -7,6 +7,12 @@ LL | |         panic!();\n LL | |     }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Foo` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl lib::Foo for Bar {\n+   | ++++++\n \n error: aborting due to previous error\n "}, {"sha": "721e2b48b954fa3db2194291f8a1b43069260434", "filename": "src/test/ui/traits/safety-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/770538ef9b9a93038983ee5d82e07754c279df06/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr?ref=770538ef9b9a93038983ee5d82e07754c279df06", "patch": "@@ -3,12 +3,24 @@ error[E0200]: the trait `UnsafeTrait` requires an `unsafe impl` declaration\n    |\n LL | impl UnsafeTrait for u16 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `UnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl UnsafeTrait for u16 { }\n+   | ++++++\n \n error[E0199]: implementing the trait `SafeTrait` is not unsafe\n   --> $DIR/safety-trait-impl.rs:16:1\n    |\n LL | unsafe impl SafeTrait for u32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl SafeTrait for u32 { }\n+LL + impl SafeTrait for u32 { }\n+   |\n \n error: aborting due to 2 previous errors\n "}]}