{"sha": "41570f60bf268c97223a864b8aa11a339929f55a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNTcwZjYwYmYyNjhjOTcyMjNhODY0YjhhYTExYTMzOTkyOWY1NWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-17T13:04:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-17T13:04:34Z"}, "message": "extend module resolve to mod.rs", "tree": {"sha": "1eabe16612f975a0e6bfeede79dcfea98d2b3aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eabe16612f975a0e6bfeede79dcfea98d2b3aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41570f60bf268c97223a864b8aa11a339929f55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41570f60bf268c97223a864b8aa11a339929f55a", "html_url": "https://github.com/rust-lang/rust/commit/41570f60bf268c97223a864b8aa11a339929f55a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41570f60bf268c97223a864b8aa11a339929f55a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081c16c77642a5c86ed72c5fbd11deccc2edd5d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/081c16c77642a5c86ed72c5fbd11deccc2edd5d5", "html_url": "https://github.com/rust-lang/rust/commit/081c16c77642a5c86ed72c5fbd11deccc2edd5d5"}], "stats": {"total": 101, "additions": 82, "deletions": 19}, "files": [{"sha": "e122bbbebc0593744b08ace4617c94cc83109775", "filename": "crates/assert_eq_text/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Fassert_eq_text%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Fassert_eq_text%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassert_eq_text%2FCargo.toml?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -5,3 +5,4 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n difference = \"2.0.0\"\n+itertools = \"0.7.8\""}, {"sha": "26b9bfb389cfb523eab4cac25d43439d6e613ec7", "filename": "crates/assert_eq_text/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Fassert_eq_text%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Fassert_eq_text%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassert_eq_text%2Fsrc%2Flib.rs?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -1,4 +1,9 @@\n extern crate difference;\n+extern crate itertools;\n+\n+use std::fmt;\n+use itertools::Itertools;\n+\n pub use self::difference::Changeset as __Changeset;\n \n #[macro_export]\n@@ -23,3 +28,9 @@ macro_rules! assert_eq_text {\n         }\n     }};\n }\n+\n+pub fn assert_eq_dbg(expected: &str, actual: &impl fmt::Debug) {\n+    let actual = format!(\"{:?}\", actual);\n+    let expected = expected.lines().map(|l| l.trim()).join(\" \");\n+    assert_eq!(expected, actual);\n+}"}, {"sha": "fa859ff94374a0a3b9f85dc8abfde07d7a2857bd", "filename": "crates/libanalysis/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibanalysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibanalysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2FCargo.toml?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -12,3 +12,6 @@ rayon = \"1.0.2\"\n fst = { git = \"https://github.com/matklad/fst\", branch = \"subsequence\"}\n libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }\n+\n+[dev-dependencies]\n+assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "a50a0f32f055783663fb66db0187f480a92891f6", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -163,15 +163,21 @@ impl World {\n             Some(name) => name.text(),\n             None => return Vec::new(),\n         };\n-        let id = match self.resolve_relative_path(id, &PathBuf::from(format!(\"../{}.rs\", name))) {\n-            Some(id) => id,\n-            None => return Vec::new(),\n-        };\n-        vec![(id, FileSymbol {\n-            name: name.clone(),\n-            node_range: TextRange::offset_len(0.into(), 0.into()),\n-            kind: MODULE,\n-        })]\n+        let paths = &[\n+            PathBuf::from(format!(\"../{}.rs\", name)),\n+            PathBuf::from(format!(\"../{}/mod.rs\", name)),\n+        ];\n+        paths.iter()\n+            .filter_map(|path| self.resolve_relative_path(id, path))\n+            .map(|id| {\n+                let symbol = FileSymbol {\n+                    name: name.clone(),\n+                    node_range: TextRange::offset_len(0.into(), 0.into()),\n+                    kind: MODULE,\n+                };\n+                (id, symbol)\n+            })\n+            .collect()\n     }\n \n     fn resolve_relative_path(&self, id: FileId, path: &Path) -> Option<FileId> {"}, {"sha": "9ef5200af6d275b8ec810700d06e854d497fba9b", "filename": "crates/libanalysis/tests/tests.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibanalysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibanalysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Ftests%2Ftests.rs?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -0,0 +1,45 @@\n+extern crate libanalysis;\n+extern crate assert_eq_text;\n+\n+use std::path::PathBuf;\n+\n+use libanalysis::{WorldState, FileId};\n+use assert_eq_text::assert_eq_dbg;\n+\n+\n+#[test]\n+fn test_resolve_module() {\n+    let mut world = WorldState::new();\n+    world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n+    world.change_file(FileId(2), Some(\"\".to_string()));\n+\n+    let snap = world.snapshot(|id, path| {\n+        assert_eq!(id, FileId(1));\n+        if path == PathBuf::from(\"../foo/mod.rs\") {\n+            return None;\n+        }\n+        assert_eq!(path, PathBuf::from(\"../foo.rs\"));\n+        Some(FileId(2))\n+    });\n+    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into())\n+        .unwrap();\n+    assert_eq_dbg(\n+        r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n+        &symbols,\n+    );\n+\n+    let snap = world.snapshot(|id, path| {\n+        assert_eq!(id, FileId(1));\n+        if path == PathBuf::from(\"../foo.rs\") {\n+            return None;\n+        }\n+        assert_eq!(path, PathBuf::from(\"../foo/mod.rs\"));\n+        Some(FileId(2))\n+    });\n+    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into())\n+        .unwrap();\n+    assert_eq_dbg(\n+        r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n+        &symbols,\n+    );\n+}"}, {"sha": "7b39870cd83bd03d2577798ab915b03eb5c691e5", "filename": "crates/libeditor/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2FCargo.toml?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -10,4 +10,6 @@ superslice = \"0.1.0\"\n \n libsyntax2 = { path = \"../libsyntax2\" }\n smol_str = \"0.1.0\"\n+\n+[dev-dependencies]\n assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "df4cb65d1053efa75df496a30f5a29e2c174dd2b", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -6,6 +6,7 @@ extern crate assert_eq_text;\n \n use std::fmt;\n use itertools::Itertools;\n+use assert_eq_text::{assert_eq_dbg};\n use libeditor::{\n     File, TextUnit, TextRange, ActionResult, CursorPosition,\n     highlight, runnables, extend_selection, file_structure,\n@@ -33,7 +34,7 @@ fn main() {}\n     println!(\"Hello, {}!\", 92);\n \"#);\n     let hls = highlight(&file);\n-    dbg_eq(\n+    assert_eq_dbg(\n         r#\"[HighlightedRange { range: [1; 11), tag: \"comment\" },\n             HighlightedRange { range: [12; 14), tag: \"keyword\" },\n             HighlightedRange { range: [15; 19), tag: \"function\" },\n@@ -57,7 +58,7 @@ fn test_foo() {}\n fn test_foo() {}\n \"#);\n     let runnables = runnables(&file);\n-    dbg_eq(\n+    assert_eq_dbg(\n         r#\"[Runnable { range: [1; 13), kind: Bin },\n             Runnable { range: [15; 39), kind: Test { name: \"test_foo\" } },\n             Runnable { range: [41; 75), kind: Test { name: \"test_foo\" } }]\"#,\n@@ -86,7 +87,7 @@ impl E {}\n impl fmt::Debug for E {}\n \"#);\n     let symbols = file_structure(&file);\n-    dbg_eq(\n+    assert_eq_dbg(\n         r#\"[StructureNode { parent: None, label: \"Foo\", navigation_range: [8; 11), node_range: [1; 26), kind: STRUCT_DEF },\n             StructureNode { parent: Some(0), label: \"x\", navigation_range: [18; 19), node_range: [18; 24), kind: NAMED_FIELD },\n             StructureNode { parent: None, label: \"m\", navigation_range: [32; 33), node_range: [28; 53), kind: MODULE },\n@@ -147,12 +148,6 @@ fn file(text: &str) -> File {\n     File::parse(text)\n }\n \n-fn dbg_eq(expected: &str, actual: &impl fmt::Debug) {\n-    let actual = format!(\"{:?}\", actual);\n-    let expected = expected.lines().map(|l| l.trim()).join(\" \");\n-    assert_eq!(expected, actual);\n-}\n-\n fn check_action<F: Fn(&File, TextUnit) -> Option<ActionResult>>(\n     before: &str,\n     after: &str,"}, {"sha": "b55cdf48127aa3030588fd08ad198473b88aa240", "filename": "crates/libsyntax2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibsyntax2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41570f60bf268c97223a864b8aa11a339929f55a/crates%2Flibsyntax2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2FCargo.toml?ref=41570f60bf268c97223a864b8aa11a339929f55a", "patch": "@@ -7,7 +7,7 @@ license = \"MIT OR Apache-2.0\"\n [dependencies]\n unicode-xid = \"0.1.0\"\n text_unit = \"0.1.2\"\n-itertools = \"0.7.5\"\n+itertools = \"0.7.8\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\"\n smol_str = \"0.1.0\""}]}