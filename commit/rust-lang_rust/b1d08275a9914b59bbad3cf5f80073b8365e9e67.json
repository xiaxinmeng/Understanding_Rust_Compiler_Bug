{"sha": "b1d08275a9914b59bbad3cf5f80073b8365e9e67", "node_id": "C_kwDOAAsO6NoAKGIxZDA4Mjc1YTk5MTRiNTliYmFkM2NmNWY4MDA3M2I4MzY1ZTllNjc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-21T01:08:06Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-29T23:53:02Z"}, "message": "rustdoc: catch and don't blow up on impl Trait cycles\n\nAn odd feature of Rust is that `Foo` is invalid, but `Bar` is okay:\n\n    type Foo<'a, 'b> = Box<dyn PartialEq<Foo<'a, 'b>>>;\n    type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>>;\n\nTo get it right, track every time rustdoc descends into a type alias,\nso if it shows up twice, it can be write the path instead of\ninfinitely expanding it.", "tree": {"sha": "7faaffc6f6692b47ab7d49d3d655cb34f34750b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7faaffc6f6692b47ab7d49d3d655cb34f34750b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d08275a9914b59bbad3cf5f80073b8365e9e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d08275a9914b59bbad3cf5f80073b8365e9e67", "html_url": "https://github.com/rust-lang/rust/commit/b1d08275a9914b59bbad3cf5f80073b8365e9e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d08275a9914b59bbad3cf5f80073b8365e9e67/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b1f891ea76713462cfc5a15137a8fe2b24ecc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b1f891ea76713462cfc5a15137a8fe2b24ecc2", "html_url": "https://github.com/rust-lang/rust/commit/87b1f891ea76713462cfc5a15137a8fe2b24ecc2"}], "stats": {"total": 146, "additions": 127, "deletions": 19}, "files": [{"sha": "1531e7fc7b91df3ff5db420f1edd3215a051e452", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b1d08275a9914b59bbad3cf5f80073b8365e9e67/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d08275a9914b59bbad3cf5f80073b8365e9e67/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b1d08275a9914b59bbad3cf5f80073b8365e9e67", "patch": "@@ -1529,7 +1529,9 @@ fn maybe_expand_private_type_alias<'tcx>(\n     let Res::Def(DefKind::TyAlias, def_id) = path.res else { return None };\n     // Substitute private type aliases\n     let def_id = def_id.as_local()?;\n-    let alias = if !cx.cache.effective_visibilities.is_exported(cx.tcx, def_id.to_def_id()) {\n+    let alias = if !cx.cache.effective_visibilities.is_exported(cx.tcx, def_id.to_def_id())\n+        && !cx.current_type_aliases.contains_key(&def_id.to_def_id())\n+    {\n         &cx.tcx.hir().expect_item(def_id).kind\n     } else {\n         return None;\n@@ -1609,7 +1611,7 @@ fn maybe_expand_private_type_alias<'tcx>(\n         }\n     }\n \n-    Some(cx.enter_alias(substs, |cx| clean_ty(ty, cx)))\n+    Some(cx.enter_alias(substs, def_id.to_def_id(), |cx| clean_ty(ty, cx)))\n }\n \n pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type {\n@@ -1700,7 +1702,7 @@ fn normalize<'tcx>(\n pub(crate) fn clean_middle_ty<'tcx>(\n     bound_ty: ty::Binder<'tcx, Ty<'tcx>>,\n     cx: &mut DocContext<'tcx>,\n-    def_id: Option<DefId>,\n+    parent_def_id: Option<DefId>,\n ) -> Type {\n     let bound_ty = normalize(cx, bound_ty).unwrap_or(bound_ty);\n     match *bound_ty.skip_binder().kind() {\n@@ -1830,7 +1832,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n             Tuple(t.iter().map(|t| clean_middle_ty(bound_ty.rebind(t), cx, None)).collect())\n         }\n \n-        ty::Alias(ty::Projection, ref data) => clean_projection(bound_ty.rebind(*data), cx, def_id),\n+        ty::Alias(ty::Projection, ref data) => {\n+            clean_projection(bound_ty.rebind(*data), cx, parent_def_id)\n+        }\n \n         ty::Param(ref p) => {\n             if let Some(bounds) = cx.impl_trait_bounds.remove(&p.index.into()) {\n@@ -1841,15 +1845,30 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         }\n \n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-            // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n-            // by looking up the bounds associated with the def_id.\n-            let bounds = cx\n-                .tcx\n-                .explicit_item_bounds(def_id)\n-                .subst_iter_copied(cx.tcx, substs)\n-                .map(|(bound, _)| bound)\n-                .collect::<Vec<_>>();\n-            clean_middle_opaque_bounds(cx, bounds)\n+            // If it's already in the same alias, don't get an infinite loop.\n+            if cx.current_type_aliases.contains_key(&def_id) {\n+                let path =\n+                    external_path(cx, def_id, false, ThinVec::new(), bound_ty.rebind(substs));\n+                Type::Path { path }\n+            } else {\n+                *cx.current_type_aliases.entry(def_id).or_insert(0) += 1;\n+                // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n+                // by looking up the bounds associated with the def_id.\n+                let bounds = cx\n+                    .tcx\n+                    .explicit_item_bounds(def_id)\n+                    .subst_iter_copied(cx.tcx, substs)\n+                    .map(|(bound, _)| bound)\n+                    .collect::<Vec<_>>();\n+                let ty = clean_middle_opaque_bounds(cx, bounds);\n+                if let Some(count) = cx.current_type_aliases.get_mut(&def_id) {\n+                    *count -= 1;\n+                    if *count == 0 {\n+                        cx.current_type_aliases.remove(&def_id);\n+                    }\n+                }\n+                ty\n+            }\n         }\n \n         ty::Closure(..) => panic!(\"Closure\"),\n@@ -2229,13 +2248,17 @@ fn clean_maybe_renamed_item<'tcx>(\n                 generics: clean_generics(ty.generics, cx),\n             }),\n             ItemKind::TyAlias(hir_ty, generics) => {\n+                *cx.current_type_aliases.entry(def_id).or_insert(0) += 1;\n                 let rustdoc_ty = clean_ty(hir_ty, cx);\n                 let ty = clean_middle_ty(ty::Binder::dummy(hir_ty_to_ty(cx.tcx, hir_ty)), cx, None);\n-                TypedefItem(Box::new(Typedef {\n-                    type_: rustdoc_ty,\n-                    generics: clean_generics(generics, cx),\n-                    item_type: Some(ty),\n-                }))\n+                let generics = clean_generics(generics, cx);\n+                if let Some(count) = cx.current_type_aliases.get_mut(&def_id) {\n+                    *count -= 1;\n+                    if *count == 0 {\n+                        cx.current_type_aliases.remove(&def_id);\n+                    }\n+                }\n+                TypedefItem(Box::new(Typedef { type_: rustdoc_ty, generics, item_type: Some(ty) }))\n             }\n             ItemKind::Enum(ref def, generics) => EnumItem(Enum {\n                 variants: def.variants.iter().map(|v| clean_variant(v, cx)).collect(),"}, {"sha": "3a0c2ab02975ac018c252f976ea01f7da4ea677f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1d08275a9914b59bbad3cf5f80073b8365e9e67/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d08275a9914b59bbad3cf5f80073b8365e9e67/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b1d08275a9914b59bbad3cf5f80073b8365e9e67", "patch": "@@ -46,6 +46,7 @@ pub(crate) struct DocContext<'tcx> {\n     // for expanding type aliases at the HIR level:\n     /// Table `DefId` of type, lifetime, or const parameter -> substituted type, lifetime, or const\n     pub(crate) substs: DefIdMap<clean::SubstParam>,\n+    pub(crate) current_type_aliases: DefIdMap<usize>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     pub(crate) impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -82,13 +83,25 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Call the closure with the given parameters set as\n     /// the substitutions for a type alias' RHS.\n-    pub(crate) fn enter_alias<F, R>(&mut self, substs: DefIdMap<clean::SubstParam>, f: F) -> R\n+    pub(crate) fn enter_alias<F, R>(\n+        &mut self,\n+        substs: DefIdMap<clean::SubstParam>,\n+        def_id: DefId,\n+        f: F,\n+    ) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n     {\n         let old_substs = mem::replace(&mut self.substs, substs);\n+        *self.current_type_aliases.entry(def_id).or_insert(0) += 1;\n         let r = f(self);\n         self.substs = old_substs;\n+        if let Some(count) = self.current_type_aliases.get_mut(&def_id) {\n+            *count -= 1;\n+            if *count == 0 {\n+                self.current_type_aliases.remove(&def_id);\n+            }\n+        }\n         r\n     }\n \n@@ -327,6 +340,7 @@ pub(crate) fn run_global_ctxt(\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n         substs: Default::default(),\n+        current_type_aliases: Default::default(),\n         impl_trait_bounds: Default::default(),\n         generated_synthetics: Default::default(),\n         auto_traits,"}, {"sha": "c920a815fda756d80955d3e111b95cc4e99b9d9a", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle-dyn.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.rs?ref=b1d08275a9914b59bbad3cf5f80073b8365e9e67", "patch": "@@ -0,0 +1,12 @@\n+type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+//~^ ERROR cycle detected when expanding type alias\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    Box::new(i)\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert!(bar(&meh) == bar(&muh));\n+}"}, {"sha": "79e1b753112b843b71cfae486e35541eae35ec42", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle-dyn.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle-dyn.stderr?ref=b1d08275a9914b59bbad3cf5f80073b8365e9e67", "patch": "@@ -0,0 +1,25 @@\n+error[E0391]: cycle detected when expanding type alias `Bar`\n+  --> $DIR/issue-110629-private-type-cycle-dyn.rs:1:38\n+   |\n+LL | type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+   |                                      ^^^^^^^^^^^\n+   |\n+   = note: ...which immediately requires expanding type alias `Bar` again\n+   = note: type aliases cannot be recursive\n+   = help: consider using a struct, enum, or union instead to break the cycle\n+   = help: see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-110629-private-type-cycle-dyn.rs:1:1\n+   |\n+LL | / type Bar<'a, 'b> = Box<dyn PartialEq<Bar<'a, 'b>>>;\n+LL | |\n+LL | |\n+LL | | fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+...  |\n+LL | |     assert!(bar(&meh) == bar(&muh));\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "2d46ddbfa6e5296799353981ad48c3b78135089d", "filename": "tests/rustdoc-ui/issue-110629-private-type-cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-110629-private-type-cycle.rs?ref=b1d08275a9914b59bbad3cf5f80073b8365e9e67", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert_eq!(bar(&meh), bar(&muh));\n+}"}, {"sha": "a4efbb098f74e222fb59a5ecff875b7f8fce738d", "filename": "tests/rustdoc/issue-110629-private-type-cycle.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc%2Fissue-110629-private-type-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d08275a9914b59bbad3cf5f80073b8365e9e67/tests%2Frustdoc%2Fissue-110629-private-type-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-110629-private-type-cycle.rs?ref=b1d08275a9914b59bbad3cf5f80073b8365e9e67", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: --document-private-items\n+\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + std::fmt::Debug;\n+\n+// @has issue_110629_private_type_cycle/type.Bar.html\n+// @has - '//pre[@class=\"rust item-decl\"]' \\\n+//     \"pub(crate) type Bar<'a, 'b> = impl PartialEq<Bar<'a, 'b>> + Debug;\"\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 42;\n+    assert_eq!(bar(&meh), bar(&muh));\n+}"}]}