{"sha": "f4516e738b1e697aa940706ff32ca4bd96bf763a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTE2ZTczOGIxZTY5N2FhOTQwNzA2ZmYzMmNhNGJkOTZiZjc2M2E=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T15:02:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-27T15:02:04Z"}, "message": "be able to find statics in other crates", "tree": {"sha": "813602eac632d5f02657ba1edae428f101d25f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/813602eac632d5f02657ba1edae428f101d25f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4516e738b1e697aa940706ff32ca4bd96bf763a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX6onsAAoJEFbW7qD8Z6xGaxYP/R4fvgzGi3RsdMg1mHG33b+I\nBLYdE1wKXrH+lN3Pm6Py+lvk8QEO1MDtScnhCeDuFJDHje8GWnGukD9ImfMhVy73\nmtV5JS55So9Mft8Ov+qQHShGOritEOSC5WH0MEcQFYhcCJDhbULKPxkpZclwjDWk\nnL0Ah1y40eGMHcb6oxDLS+DUs5U2wn2NiD0kPOlwVDkYpf+EA9MU2LkaDCUcWF3e\n6RYe4YfIZ+FUAR8f/5FXOiugr25LHHpDvIMHSwuHjIT9GGYR5X6ed1yfbSsnOjB4\nO3drSbqgw1zloxdgDU+pJZLtssTjkD+zC0xpGdXdi4EcMrpacaCuDe+m/jaolT7W\nMFCLf7HYdNjj84pJxo6UmNaHSMNaWCdFmr1uih8TGBm/s3V+zKu3KlG3VH1ia8mq\ny46RxXyMeTHcUWWYEWBsaAUX6lyg96u5i2fGKdEhH55ONPmCCFW7lClQsE1Julg1\nJwHXZWlP6u9MSk3O62TqBkzDdAbVBS1nqv1qBcAlShKR68BvEp9RZE7NmTY6NmY+\nA6GbPMtb5nMDsV2MSYRQbOnPkN0CJLcNx6u4hGB68Sdga08J42jv8u8ExrWeqAWj\naSgUiYVEFwx0r6/i7g186OrfSwStE+ZtUadubiOQOVI9Fa21l4eWLL9rPpm1edjG\nKm2Q9obIY0oAlVomie72\n=MKEN\n-----END PGP SIGNATURE-----", "payload": "tree 813602eac632d5f02657ba1edae428f101d25f34\nparent db8185e4398f8ae1adfb97c325eb5d2769b1ee2f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474988524 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474988524 +0200\n\nbe able to find statics in other crates"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4516e738b1e697aa940706ff32ca4bd96bf763a", "html_url": "https://github.com/rust-lang/rust/commit/f4516e738b1e697aa940706ff32ca4bd96bf763a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4516e738b1e697aa940706ff32ca4bd96bf763a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f", "html_url": "https://github.com/rust-lang/rust/commit/db8185e4398f8ae1adfb97c325eb5d2769b1ee2f"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "ff4087cb14abdc2d1babbf5fc9a96c693e090dc8", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4516e738b1e697aa940706ff32ca4bd96bf763a/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4516e738b1e697aa940706ff32ca4bd96bf763a/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=f4516e738b1e697aa940706ff32ca4bd96bf763a", "patch": "@@ -58,7 +58,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n \n             let mut mir_map = MirMap { map: mir_map.map.clone() };\n             run_mir_passes(tcx, &mut mir_map);\n-            bencher.borrow_mut().iter(|| { eval_main(tcx, &mir_map, node_id); });\n+            bencher.borrow_mut().iter(|| { eval_main(tcx, &mir_map, node_id, state.session); });\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "8bf6adde14b1d77fca18f90a0c31a21163f5045f", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4516e738b1e697aa940706ff32ca4bd96bf763a/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4516e738b1e697aa940706ff32ca4bd96bf763a/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=f4516e738b1e697aa940706ff32ca4bd96bf763a", "patch": "@@ -75,7 +75,7 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n                 mir_map_copy.map.insert(def_id, mir_map.map.get(&def_id).unwrap().clone());\n             }\n             run_mir_passes(tcx, &mut mir_map_copy);\n-            eval_main(tcx, &mir_map_copy, entry_def_id, memory_size, step_limit, stack_limit);\n+            eval_main(tcx, &mir_map_copy, entry_def_id, memory_size, step_limit, stack_limit, state.session);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "e27ea18e2f4999182ff459dc8a8c2b70cc029e00", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4516e738b1e697aa940706ff32ca4bd96bf763a/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4516e738b1e697aa940706ff32ca4bd96bf763a/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=f4516e738b1e697aa940706ff32ca4bd96bf763a", "patch": "@@ -6,6 +6,7 @@ use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::session::Session;\n use rustc::util::nodemap::DefIdMap;\n use rustc_data_structures::indexed_vec::Idx;\n use std::cell::RefCell;\n@@ -31,6 +32,10 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n+    /// The Session, from rustc.\n+    /// Used to extract info from other crates\n+    session: &'a Session,\n+\n     /// A mapping from NodeIds to Mir, from rustc. Only contains MIR for crate-local items.\n     mir_map: &'a MirMap<'tcx>,\n \n@@ -154,7 +159,7 @@ pub enum StackPopCleanup {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: usize, stack_limit: usize) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: usize, stack_limit: usize, session: &'a Session) -> Self {\n         EvalContext {\n             tcx: tcx,\n             mir_map: mir_map,\n@@ -163,6 +168,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             statics: HashMap::new(),\n             stack: Vec::new(),\n             stack_limit: stack_limit,\n+            session: session,\n         }\n     }\n \n@@ -522,7 +528,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                     .chain(nonnull.offset_after_field.iter().map(|s| s.bytes()));\n                                 try!(self.assign_fields(dest, offsets, operands));\n                             } else {\n-                                assert_eq!(operands.len(), 0);\n+                                for operand in operands {\n+                                    let operand_ty = self.operand_ty(operand);\n+                                    assert_eq!(self.type_size(operand_ty), 0);\n+                                }\n                                 let offset = self.nonnull_offset(dest_ty, nndiscr, discrfield)?;\n                                 let dest = dest.offset(offset.bytes() as isize);\n                                 try!(self.memory.write_isize(dest, 0));\n@@ -1146,9 +1155,10 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     memory_size: usize,\n     step_limit: u64,\n     stack_limit: usize,\n+    session: &'a Session,\n ) {\n     let mir = mir_map.map.get(&def_id).expect(\"no mir for main function\");\n-    let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit);\n+    let mut ecx = EvalContext::new(tcx, mir_map, memory_size, stack_limit, session);\n     let substs = subst::Substs::empty(tcx);\n     let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs)\n         .expect(\"should at least be able to allocate space for the main function's return value\");"}, {"sha": "cd1e9a18117437f6c4b7c2cfdbf5837b0a07354d", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4516e738b1e697aa940706ff32ca4bd96bf763a/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4516e738b1e697aa940706ff32ca4bd96bf763a/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=f4516e738b1e697aa940706ff32ca4bd96bf763a", "patch": "@@ -200,18 +200,25 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n         if let mir::Lvalue::Static(def_id) = *lvalue {\n             let substs = subst::Substs::empty(self.ecx.tcx);\n             let span = self.span;\n-            let node_item = self.ecx.tcx.map.get_if_local(def_id).expect(\"static not found\");\n-            if let hir::map::Node::NodeItem(&hir::Item { ref node, .. }) = node_item {\n-                if let hir::ItemStatic(_, m, _) = *node {\n-                    self.global_item(def_id, substs, span, m == hir::MutImmutable);\n-                    return;\n+            if let Some(node_item) = self.ecx.tcx.map.get_if_local(def_id) {\n+                if let hir::map::Node::NodeItem(&hir::Item { ref node, .. }) = node_item {\n+                    if let hir::ItemStatic(_, m, _) = *node {\n+                        self.global_item(def_id, substs, span, m == hir::MutImmutable);\n+                        return;\n+                    } else {\n+                        bug!(\"static def id doesn't point to static\");\n+                    }\n                 } else {\n-                    bug!(\"static def id doesn't point to static\");\n+                    bug!(\"static def id doesn't point to item\");\n                 }\n             } else {\n-                bug!(\"static def id doesn't point to item\");\n+                let def = self.ecx.session.cstore.describe_def(def_id).expect(\"static not found\");\n+                if let hir::def::Def::Static(_, mutable) = def {\n+                    self.global_item(def_id, substs, span, !mutable);\n+                } else {\n+                    bug!(\"static found but isn't a static: {:?}\", def);\n+                }\n             }\n-            self.global_item(def_id, substs, span, false);\n         }\n     }\n }"}, {"sha": "001dec5b4274736b83fd7f6070253b87b0315ea1", "filename": "tests/compile-fail/rc.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4516e738b1e697aa940706ff32ca4bd96bf763a/tests%2Fcompile-fail%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4516e738b1e697aa940706ff32ca4bd96bf763a/tests%2Fcompile-fail%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frc.rs?ref=f4516e738b1e697aa940706ff32ca4bd96bf763a", "patch": "@@ -0,0 +1,15 @@\n+//error-pattern: no mir for `std::result::unwrap_failed::__STATIC_FMTSTR`\n+\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+\n+fn rc_refcell() -> i32 {\n+    let r = Rc::new(RefCell::new(42));\n+    *r.borrow_mut() += 10;\n+    let x = *r.borrow();\n+    x\n+}\n+\n+fn main() {\n+    rc_refcell();\n+}"}]}