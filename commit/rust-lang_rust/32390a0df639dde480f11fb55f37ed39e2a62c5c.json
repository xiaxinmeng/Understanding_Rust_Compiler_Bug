{"sha": "32390a0df639dde480f11fb55f37ed39e2a62c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMzkwYTBkZjYzOWRkZTQ4MGYxMWZiNTVmMzdlZDM5ZTJhNjJjNWM=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-22T13:56:07Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:26:33Z"}, "message": "move Constness into TraitPredicate", "tree": {"sha": "407adcbfd71218c02eed48b7e2aa73cfa6ae7535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407adcbfd71218c02eed48b7e2aa73cfa6ae7535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32390a0df639dde480f11fb55f37ed39e2a62c5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWOskACgkQAn35M4hi\nrd3e/xAAiCQPyVS7IwrgW7Y06lu7khP4ELHReV01mrzcmdY4CFl5ettbA4guUmLO\nGRJ4394mQ9ky5NIqAUvu4s1S2VNebEKoj5zZob+lIMkhh9jIjtQsvVmX9O7aMLdN\nB6zvzQC97kuZCTQWXNKoXMmBmy1SjlGYlzQO7CHszKreTVB4XDwo0Eyhm3nPBaXJ\nXZpO4sdAezL7D7clVfsFAoUTU5yu05JZZpngFoi6GQ8X8nUznmkvrIW6MkBg/m3U\nY9L/wULM1IXIWAHiBn/7eBAekwlPA0TxDUIqEFY6G9MzDS7g9yKKuA2wMigQULyr\nIc/8WJzIi9cHgA9qKnKoe8pi6TiBd0xCv+t9mhVkweCvC1Z6iXjq/Oii39MGi6Ns\nR0Dx8XXpb8rvTiCsebsihdL5fYHO/5P5YeQVWmUyC/C3LABlp/To94p5B9d3V5GI\ngiwkBRkK3AU9hIAL7PkKu25xNtPkSdf9PUX6C1HZjwoXesUrXx5TcQ6a12KytOri\nubBCl5GCuvMRmtux0tR2jwDYPwTg2Ifn5fT2AJC/L5Bk2V+kxZ+bHyJNm3sEzzUH\nbpdbtJFNPrwHFu8CUbgqn3UPp40jqeuswQ+FjEO9IFPMbwuwCHEMXvogBTF1egOt\n6F4uDwzm2F2mGZk2svwKiSBgJtoApNmlVnrB2XjfsQuXFLqxjck=\n=ODWg\n-----END PGP SIGNATURE-----", "payload": "tree 407adcbfd71218c02eed48b7e2aa73cfa6ae7535\nparent 04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7\nauthor Deadbeef <ent3rm4n@gmail.com> 1626962167 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846793 +0000\n\nmove Constness into TraitPredicate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32390a0df639dde480f11fb55f37ed39e2a62c5c", "html_url": "https://github.com/rust-lang/rust/commit/32390a0df639dde480f11fb55f37ed39e2a62c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32390a0df639dde480f11fb55f37ed39e2a62c5c/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7", "html_url": "https://github.com/rust-lang/rust/commit/04c9901a0838d20e6ac0bcda94ea1a8c239bb0d7"}], "stats": {"total": 281, "additions": 157, "deletions": 124}, "files": [{"sha": "9e655bc4a7e3eb94df393a527af4144be67236ee", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -2751,6 +2751,15 @@ pub enum Constness {\n     NotConst,\n }\n \n+impl fmt::Display for Constness {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(match *self {\n+            Self::Const => \"const\",\n+            Self::NotConst => \"non-const\",\n+        })\n+    }\n+}\n+\n #[derive(Copy, Clone, Encodable, Debug, HashStable_Generic)]\n pub struct FnHeader {\n     pub unsafety: Unsafety,"}, {"sha": "3139e12116373ee37c012baaba36a206892691f6", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -124,7 +124,7 @@ impl Elaborator<'tcx> {\n \n         let bound_predicate = obligation.predicate.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(data, _) => {\n+            ty::PredicateKind::Trait(data) => {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());\n "}, {"sha": "2c039b6d05d29a44ba6d451f051688442fba0585", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n         let predicates = cx.tcx.explicit_predicates_of(item.def_id);\n         for &(predicate, span) in predicates.predicates {\n             let trait_predicate = match predicate.kind().skip_binder() {\n-                Trait(trait_predicate, _constness) => trait_predicate,\n+                Trait(trait_predicate) => trait_predicate,\n                 _ => continue,\n             };\n             let def_id = trait_predicate.trait_ref.def_id;"}, {"sha": "2d2897f3f9899bb1716cc4676e1c763e318d7469", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                     let mut has_emitted = false;\n                     for &(predicate, _) in cx.tcx.explicit_item_bounds(def) {\n                         // We only look at the `DefId`, so it is safe to skip the binder here.\n-                        if let ty::PredicateKind::Trait(ref poly_trait_predicate, _) =\n+                        if let ty::PredicateKind::Trait(ref poly_trait_predicate) =\n                             predicate.kind().skip_binder()\n                         {\n                             let def_id = poly_trait_predicate.trait_ref.def_id;"}, {"sha": "106b443ee3c1486d126a474efa7584603c8fd4f3", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -2169,7 +2169,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             let generic_predicates = self.super_predicates_of(trait_did);\n \n             for (predicate, _) in generic_predicates.predicates {\n-                if let ty::PredicateKind::Trait(data, _) = predicate.kind().skip_binder() {\n+                if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {\n                     if set.insert(data.def_id()) {\n                         stack.push(data.def_id());\n                     }"}, {"sha": "3846d9ffdbae573f5aa8e02c6fb71e470fd859bc", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -33,6 +33,7 @@ impl<T> ExpectedFound<T> {\n #[derive(Clone, Debug, TypeFoldable)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n+    ConstnessMismatch(ExpectedFound<hir::Constness>),\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n@@ -106,6 +107,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n             CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n             Mismatch => write!(f, \"types differ\"),\n+            ConstnessMismatch(values) => {\n+                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+            }\n             UnsafetyMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n             }\n@@ -213,9 +217,11 @@ impl<'tcx> TypeError<'tcx> {\n     pub fn must_include_note(&self) -> bool {\n         use self::TypeError::*;\n         match self {\n-            CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_)\n-            | FixedArraySize(_) | ArgumentSorts(..) | Sorts(_) | IntMismatch(_)\n-            | FloatMismatch(_) | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n+            CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | ConstnessMismatch(_)\n+            | Mismatch | AbiMismatch(_) | FixedArraySize(_) | ArgumentSorts(..) | Sorts(_)\n+            | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_) | TargetFeatureCast(_) => {\n+                false\n+            }\n \n             Mutability\n             | ArgumentMutability(_)"}, {"sha": "391c8292bd542d1e820b8e17544f72d069d7a94c", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -216,7 +216,7 @@ impl FlagComputation {\n \n     fn add_predicate_atom(&mut self, atom: ty::PredicateKind<'_>) {\n         match atom {\n-            ty::PredicateKind::Trait(trait_pred, _constness) => {\n+            ty::PredicateKind::Trait(trait_pred) => {\n                 self.add_substs(trait_pred.trait_ref.substs);\n             }\n             ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => {"}, {"sha": "6ea44789c7a38e1c5c22eb649c2f625e1c6d2ed0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -456,7 +456,7 @@ pub enum PredicateKind<'tcx> {\n     /// A trait predicate will have `Constness::Const` if it originates\n     /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n     /// `const fn foobar<Foo: Bar>() {}`).\n-    Trait(TraitPredicate<'tcx>, Constness),\n+    Trait(TraitPredicate<'tcx>),\n \n     /// `where 'a: 'b`\n     RegionOutlives(RegionOutlivesPredicate<'tcx>),\n@@ -612,6 +612,11 @@ impl<'tcx> Predicate<'tcx> {\n #[derive(HashStable, TypeFoldable)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n+\n+    /// A trait predicate will have `Constness::Const` if it originates\n+    /// from a bound on a `const fn` without the `?const` opt-out (e.g.,\n+    /// `const fn foobar<Foo: Bar>() {}`).\n+    pub constness: hir::Constness,\n }\n \n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n@@ -745,24 +750,27 @@ impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::Trait(ty::TraitPredicate { trait_ref: self.value }, self.constness)\n-            .to_predicate(tcx)\n+        PredicateKind::Trait(ty::TraitPredicate {\n+            trait_ref: self.value,\n+            constness: self.constness,\n+        })\n+        .to_predicate(tcx)\n     }\n }\n \n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.value\n             .map_bound(|trait_ref| {\n-                PredicateKind::Trait(ty::TraitPredicate { trait_ref }, self.constness)\n+                PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: self.constness })\n             })\n             .to_predicate(tcx)\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitPredicate<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        self.value.map_bound(|value| PredicateKind::Trait(value, self.constness)).to_predicate(tcx)\n+        self.map_bound(PredicateKind::Trait).to_predicate(tcx)\n     }\n }\n \n@@ -788,8 +796,8 @@ impl<'tcx> Predicate<'tcx> {\n     pub fn to_opt_poly_trait_ref(self) -> Option<ConstnessAnd<PolyTraitRef<'tcx>>> {\n         let predicate = self.kind();\n         match predicate.skip_binder() {\n-            PredicateKind::Trait(t, constness) => {\n-                Some(ConstnessAnd { constness, value: predicate.rebind(t.trait_ref) })\n+            PredicateKind::Trait(t) => {\n+                Some(ConstnessAnd { constness: t.constness, value: predicate.rebind(t.trait_ref) })\n             }\n             PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)"}, {"sha": "c96621338f574f65c5cba6b74866d6c207d39c01", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -630,7 +630,7 @@ pub trait PrettyPrinter<'tcx>:\n                     for (predicate, _) in bounds {\n                         let predicate = predicate.subst(self.tcx(), substs);\n                         let bound_predicate = predicate.kind();\n-                        if let ty::PredicateKind::Trait(pred, _) = bound_predicate.skip_binder() {\n+                        if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {\n                             let trait_ref = bound_predicate.rebind(pred.trait_ref);\n                             // Don't print +Sized, but rather +?Sized if absent.\n                             if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait() {\n@@ -2264,10 +2264,7 @@ define_print_and_forward_display! {\n \n     ty::PredicateKind<'tcx> {\n         match *self {\n-            ty::PredicateKind::Trait(ref data, constness) => {\n-                if let hir::Constness::Const = constness {\n-                    p!(\"const \");\n-                }\n+            ty::PredicateKind::Trait(ref data) => {\n                 p!(print(data))\n             }\n             ty::PredicateKind::Subtype(predicate) => p!(print(predicate)),"}, {"sha": "8efb88d4040637ad6323a44034a6abf93dfec2fd", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -200,6 +200,20 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n     }\n }\n \n+impl<'tcx> Relate<'tcx> for ast::Constness {\n+    fn relate<R: TypeRelation<'tcx>>(\n+        relation: &mut R,\n+        a: ast::Constness,\n+        b: ast::Constness,\n+    ) -> RelateResult<'tcx, ast::Constness> {\n+        if a != b {\n+            Err(TypeError::ConstnessMismatch(expected_found(relation, a, b)))\n+        } else {\n+            Ok(a)\n+        }\n+    }\n+}\n+\n impl<'tcx> Relate<'tcx> for ast::Unsafety {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n@@ -767,7 +781,10 @@ impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {\n         a: ty::TraitPredicate<'tcx>,\n         b: ty::TraitPredicate<'tcx>,\n     ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {\n-        Ok(ty::TraitPredicate { trait_ref: relation.relate(a.trait_ref, b.trait_ref)? })\n+        Ok(ty::TraitPredicate {\n+            trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,\n+            constness: relation.relate(a.constness, b.constness)?,\n+        })\n     }\n }\n "}, {"sha": "62397752db2fcdebd9c40982ac867f3f6d6d4176", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -155,6 +155,9 @@ impl fmt::Debug for ty::ParamConst {\n \n impl fmt::Debug for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if let hir::Constness::Const = self.constness {\n+            write!(f, \"const \")?;\n+        }\n         write!(f, \"TraitPredicate({:?})\", self.trait_ref)\n     }\n }\n@@ -174,12 +177,7 @@ impl fmt::Debug for ty::Predicate<'tcx> {\n impl fmt::Debug for ty::PredicateKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            ty::PredicateKind::Trait(ref a, constness) => {\n-                if let hir::Constness::Const = constness {\n-                    write!(f, \"const \")?;\n-                }\n-                a.fmt(f)\n-            }\n+            ty::PredicateKind::Trait(ref a) => a.fmt(f),\n             ty::PredicateKind::Subtype(ref pair) => pair.fmt(f),\n             ty::PredicateKind::RegionOutlives(ref pair) => pair.fmt(f),\n             ty::PredicateKind::TypeOutlives(ref pair) => pair.fmt(f),\n@@ -366,7 +364,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     type Lifted = ty::TraitPredicate<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ty::TraitPredicate<'tcx>> {\n-        tcx.lift(self.trait_ref).map(|trait_ref| ty::TraitPredicate { trait_ref })\n+        tcx.lift(self.trait_ref)\n+            .map(|trait_ref| ty::TraitPredicate { trait_ref, constness: self.constness })\n     }\n }\n \n@@ -419,9 +418,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n     type Lifted = ty::PredicateKind<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         match self {\n-            ty::PredicateKind::Trait(data, constness) => {\n-                tcx.lift(data).map(|data| ty::PredicateKind::Trait(data, constness))\n-            }\n+            ty::PredicateKind::Trait(data) => tcx.lift(data).map(ty::PredicateKind::Trait),\n             ty::PredicateKind::Subtype(data) => tcx.lift(data).map(ty::PredicateKind::Subtype),\n             ty::PredicateKind::RegionOutlives(data) => {\n                 tcx.lift(data).map(ty::PredicateKind::RegionOutlives)\n@@ -584,6 +581,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n \n         Some(match self {\n             Mismatch => Mismatch,\n+            ConstnessMismatch(x) => ConstnessMismatch(x),\n             UnsafetyMismatch(x) => UnsafetyMismatch(x),\n             AbiMismatch(x) => AbiMismatch(x),\n             Mutability => Mutability,"}, {"sha": "a1edb8071c459eb32bd21db381be33e6afadadb9", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -876,7 +876,10 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n \n     pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n-        self.map_bound(|trait_ref| ty::TraitPredicate { trait_ref })\n+        self.map_bound(|trait_ref| ty::TraitPredicate {\n+            trait_ref,\n+            constness: hir::Constness::NotConst,\n+        })\n     }\n }\n "}, {"sha": "51a6f5bf1abfb5d8f60ffdba82d57e184b30023c", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -2688,10 +2688,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n     ) {\n         self.prove_predicates(\n-            Some(ty::PredicateKind::Trait(\n-                ty::TraitPredicate { trait_ref },\n-                hir::Constness::NotConst,\n-            )),\n+            Some(ty::PredicateKind::Trait(ty::TraitPredicate {\n+                trait_ref,\n+                constness: hir::Constness::NotConst,\n+            })),\n             locations,\n             category,\n         );"}, {"sha": "48fd63b258ca739f66934f7aeb0332374a07c19a", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -423,7 +423,7 @@ impl Checker<'mir, 'tcx> {\n                     ty::PredicateKind::Subtype(_) => {\n                         bug!(\"subtype predicate on function: {:#?}\", predicate)\n                     }\n-                    ty::PredicateKind::Trait(pred, _constness) => {\n+                    ty::PredicateKind::Trait(pred) => {\n                         if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                             continue;\n                         }\n@@ -817,7 +817,10 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     let obligation = Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        Binder::dummy(TraitPredicate { trait_ref }),\n+                        Binder::dummy(TraitPredicate {\n+                            trait_ref,\n+                            constness: hir::Constness::Const,\n+                        }),\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {"}, {"sha": "26fe796cb916ffdce81e967fd6c27d1c36a88872", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n \n     /// If the given predicate is the trait `fmt::Pointer`, returns the bound parameter type.\n     fn is_pointer_trait(&self, bound: &PredicateKind<'tcx>) -> Option<Ty<'tcx>> {\n-        if let ty::PredicateKind::Trait(predicate, _) = bound {\n+        if let ty::PredicateKind::Trait(predicate) = bound {\n             if self.tcx.is_diagnostic_item(sym::pointer_trait, predicate.def_id()) {\n                 Some(predicate.trait_ref.self_ty())\n             } else {"}, {"sha": "3df8ade216925edc5546a1082a07080a467ebe1c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -122,7 +122,7 @@ where\n \n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {\n         match predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref }, _) => {\n+            ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: _ }) => {\n                 self.visit_trait(trait_ref)\n             }\n             ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {"}, {"sha": "d79fd910b7e78687b67e1e999633dd978759b7c7", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -2657,7 +2657,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             let obligations = predicates.predicates.iter().filter_map(|&(pred, _)| {\n                 let bound_predicate = pred.kind();\n                 match bound_predicate.skip_binder() {\n-                    ty::PredicateKind::Trait(data, _) => {\n+                    ty::PredicateKind::Trait(data) => {\n                         // The order here needs to match what we would get from `subst_supertrait`\n                         let pred_bound_vars = bound_predicate.bound_vars();\n                         let mut all_bound_vars = bound_vars.clone();"}, {"sha": "282502cfa0d3d8d73f2ed0ccc7871a6a84092387", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -285,6 +285,7 @@ impl AutoTraitFinder<'tcx> {\n                 def_id: trait_did,\n                 substs: infcx.tcx.mk_substs_trait(ty, &[]),\n             },\n+            constness: hir::Constness::NotConst,\n         }));\n \n         let computed_preds = param_env.caller_bounds().iter();\n@@ -344,10 +345,7 @@ impl AutoTraitFinder<'tcx> {\n                 Err(SelectionError::Unimplemented) => {\n                     if self.is_param_no_infer(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n-                        self.add_user_pred(\n-                            &mut user_computed_preds,\n-                            pred.without_const().to_predicate(self.tcx),\n-                        );\n+                        self.add_user_pred(&mut user_computed_preds, pred.to_predicate(self.tcx));\n                         predicates.push_back(pred);\n                     } else {\n                         debug!(\n@@ -414,10 +412,8 @@ impl AutoTraitFinder<'tcx> {\n     ) {\n         let mut should_add_new = true;\n         user_computed_preds.retain(|&old_pred| {\n-            if let (\n-                ty::PredicateKind::Trait(new_trait, _),\n-                ty::PredicateKind::Trait(old_trait, _),\n-            ) = (new_pred.kind().skip_binder(), old_pred.kind().skip_binder())\n+            if let (ty::PredicateKind::Trait(new_trait), ty::PredicateKind::Trait(old_trait)) =\n+                (new_pred.kind().skip_binder(), old_pred.kind().skip_binder())\n             {\n                 if new_trait.def_id() == old_trait.def_id() {\n                     let new_substs = new_trait.trait_ref.substs;\n@@ -638,7 +634,7 @@ impl AutoTraitFinder<'tcx> {\n \n             let bound_predicate = predicate.kind();\n             match bound_predicate.skip_binder() {\n-                ty::PredicateKind::Trait(p, _) => {\n+                ty::PredicateKind::Trait(p) => {\n                     // Add this to `predicates` so that we end up calling `select`\n                     // with it. If this predicate ends up being unimplemented,\n                     // then `evaluate_predicates` will handle adding it the `ParamEnv`"}, {"sha": "2f91666ca641dd081427be274074dadac673469c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -277,7 +277,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let bound_predicate = obligation.predicate.kind();\n                 match bound_predicate.skip_binder() {\n-                    ty::PredicateKind::Trait(trait_predicate, _) => {\n+                    ty::PredicateKind::Trait(trait_predicate) => {\n                         let trait_predicate = bound_predicate.rebind(trait_predicate);\n                         let trait_predicate = self.resolve_vars_if_possible(trait_predicate);\n \n@@ -518,8 +518,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 );\n                                 trait_pred\n                             });\n-                            let unit_obligation =\n-                                obligation.with(predicate.without_const().to_predicate(tcx));\n+                            let unit_obligation = obligation.with(predicate.to_predicate(tcx));\n                             if self.predicate_may_hold(&unit_obligation) {\n                                 err.note(\"this trait is implemented for `()`.\");\n                                 err.note(\n@@ -1148,7 +1147,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // FIXME: It should be possible to deal with `ForAll` in a cleaner way.\n         let bound_error = error.kind();\n         let (cond, error) = match (cond.kind().skip_binder(), bound_error.skip_binder()) {\n-            (ty::PredicateKind::Trait(..), ty::PredicateKind::Trait(error, _)) => {\n+            (ty::PredicateKind::Trait(..), ty::PredicateKind::Trait(error)) => {\n                 (cond, bound_error.rebind(error))\n             }\n             _ => {\n@@ -1159,7 +1158,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         for obligation in super::elaborate_predicates(self.tcx, std::iter::once(cond)) {\n             let bound_predicate = obligation.predicate.kind();\n-            if let ty::PredicateKind::Trait(implication, _) = bound_predicate.skip_binder() {\n+            if let ty::PredicateKind::Trait(implication) = bound_predicate.skip_binder() {\n                 let error = error.to_poly_trait_ref();\n                 let implication = bound_predicate.rebind(implication.trait_ref);\n                 // FIXME: I'm just not taking associated types at all here.\n@@ -1536,7 +1535,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let bound_predicate = predicate.kind();\n         let mut err = match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(data, _) => {\n+            ty::PredicateKind::Trait(data) => {\n                 let trait_ref = bound_predicate.rebind(data.trait_ref);\n                 debug!(\"trait_ref {:?}\", trait_ref);\n \n@@ -1803,7 +1802,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             match (obligation.predicate.kind().skip_binder(), obligation.cause.code.peel_derives())\n             {\n                 (\n-                    ty::PredicateKind::Trait(pred, _),\n+                    ty::PredicateKind::Trait(pred),\n                     &ObligationCauseCode::BindingObligation(item_def_id, span),\n                 ) => (pred, item_def_id, span),\n                 _ => return,"}, {"sha": "269560843657dbdf5c8dd43598373f152fd4b4ca", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -1386,7 +1386,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // bound was introduced. At least one generator should be present for this diagnostic to be\n         // modified.\n         let (mut trait_ref, mut target_ty) = match obligation.predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(p, _) => (Some(p.trait_ref), Some(p.self_ty())),\n+            ty::PredicateKind::Trait(p) => (Some(p.trait_ref), Some(p.self_ty())),\n             _ => (None, None),\n         };\n         let mut generator = None;"}, {"sha": "cf50c34530ed2afac3df71dc8442e4cd2aec4852", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 // Evaluation will discard candidates using the leak check.\n                 // This means we need to pass it the bound version of our\n                 // predicate.\n-                ty::PredicateKind::Trait(trait_ref, _constness) => {\n+                ty::PredicateKind::Trait(trait_ref) => {\n                     let trait_obligation = obligation.with(binder.rebind(trait_ref));\n \n                     self.process_trait_obligation(\n@@ -388,7 +388,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             },\n             Some(pred) => match pred {\n-                ty::PredicateKind::Trait(data, _) => {\n+                ty::PredicateKind::Trait(data) => {\n                     let trait_obligation = obligation.with(Binder::dummy(data));\n \n                     self.process_trait_obligation("}, {"sha": "04bc689d5116196b9b7abac42151cdaa67c6ac83", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -280,7 +280,7 @@ fn predicate_references_self(\n     let self_ty = tcx.types.self_param;\n     let has_self_ty = |arg: &GenericArg<'_>| arg.walk().any(|arg| arg == self_ty.into());\n     match predicate.kind().skip_binder() {\n-        ty::PredicateKind::Trait(ref data, _) => {\n+        ty::PredicateKind::Trait(ref data) => {\n             // In the case of a trait predicate, we can skip the \"self\" type.\n             if data.trait_ref.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n         }\n@@ -331,7 +331,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let predicates = predicates.instantiate_identity(tcx).predicates;\n     elaborate_predicates(tcx, predicates.into_iter()).any(|obligation| {\n         match obligation.predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ref trait_pred, _) => {\n+            ty::PredicateKind::Trait(ref trait_pred) => {\n                 trait_pred.def_id() == sized_def_id && trait_pred.self_ty().is_param(0)\n             }\n             ty::PredicateKind::Projection(..)"}, {"sha": "02e9b4d0f0e7272d8ee8b347359389f9c16f3d4a", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -15,7 +15,7 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n         // `&T`, accounts for about 60% percentage of the predicates\n         // we have to prove. No need to canonicalize and all that for\n         // such cases.\n-        if let ty::PredicateKind::Trait(trait_ref, _) = key.value.predicate.kind().skip_binder() {\n+        if let ty::PredicateKind::Trait(trait_ref) = key.value.predicate.kind().skip_binder() {\n             if let Some(sized_def_id) = tcx.lang_items().sized_trait() {\n                 if trait_ref.def_id() == sized_def_id {\n                     if trait_ref.self_ty().is_trivially_sized(tcx) {"}, {"sha": "1aa4bc0a412ce0e222c4b82a458f6746f9eee98f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -42,7 +42,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use rustc_middle::ty::{self, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::sym;\n \n use std::cell::{Cell, RefCell};\n@@ -454,7 +454,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let result = ensure_sufficient_stack(|| {\n             let bound_predicate = obligation.predicate.kind();\n             match bound_predicate.skip_binder() {\n-                ty::PredicateKind::Trait(t, _) => {\n+                ty::PredicateKind::Trait(t) => {\n                     let t = bound_predicate.rebind(t);\n                     debug_assert!(!t.has_escaping_bound_vars());\n                     let obligation = obligation.with(t);\n@@ -762,8 +762,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // if the regions match exactly.\n             let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);\n             let tcx = self.tcx();\n-            let cycle =\n-                cycle.map(|stack| stack.obligation.predicate.without_const().to_predicate(tcx));\n+            let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));\n             if self.coinductive_match(cycle) {\n                 debug!(\"evaluate_stack --> recursive, coinductive\");\n                 Some(EvaluatedToOk)\n@@ -873,7 +872,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n         let result = match predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ref data, _) => self.tcx().trait_is_auto(data.def_id()),\n+            ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),\n             _ => false,\n         };\n         debug!(?predicate, ?result, \"coinductive_predicate\");\n@@ -1213,7 +1212,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .enumerate()\n             .filter_map(|(idx, bound)| {\n                 let bound_predicate = bound.kind();\n-                if let ty::PredicateKind::Trait(pred, _) = bound_predicate.skip_binder() {\n+                if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {\n                     let bound = bound_predicate.rebind(pred.trait_ref);\n                     if self.infcx.probe(|_| {\n                         match self.match_normalize_trait_ref("}, {"sha": "9c9664d7b5e846b82f6f3adeb246fded6d4297b7", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -108,7 +108,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n \n     // It's ok to skip the binder here because wf code is prepared for it\n     match predicate.kind().skip_binder() {\n-        ty::PredicateKind::Trait(t, _) => {\n+        ty::PredicateKind::Trait(t) => {\n             wf.compute_trait_ref(&t.trait_ref, Elaborate::None);\n         }\n         ty::PredicateKind::RegionOutlives(..) => {}\n@@ -226,7 +226,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n                 }\n             }\n         }\n-        ty::PredicateKind::Trait(pred, _) => {\n+        ty::PredicateKind::Trait(pred) => {\n             // An associated item obligation born out of the `trait` failed to be met. An example\n             // can be seen in `ui/associated-types/point-at-type-on-obligation-failure-2.rs`.\n             debug!(\"extended_cause_with_original_assoc_item_obligation trait proj {:?}\", pred);"}, {"sha": "974755e9e266934c6fa7faaf761f16cc6b309d64", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 ty::PredicateKind::TypeWellFormedFromEnv(ty) => {\n                     chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(ty.lower_into(interner)))\n                 }\n-                ty::PredicateKind::Trait(predicate, _) => chalk_ir::DomainGoal::FromEnv(\n+                ty::PredicateKind::Trait(predicate) => chalk_ir::DomainGoal::FromEnv(\n                     chalk_ir::FromEnv::Trait(predicate.trait_ref.lower_into(interner)),\n                 ),\n                 ty::PredicateKind::RegionOutlives(predicate) => chalk_ir::DomainGoal::Holds(\n@@ -137,7 +137,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             collect_bound_vars(interner, interner.tcx, self.kind());\n \n         let value = match predicate {\n-            ty::PredicateKind::Trait(predicate, _) => {\n+            ty::PredicateKind::Trait(predicate) => {\n                 chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::Holds(\n                     chalk_ir::WhereClause::Implemented(predicate.trait_ref.lower_into(interner)),\n                 ))\n@@ -569,7 +569,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n         let (predicate, binders, _named_regions) =\n             collect_bound_vars(interner, interner.tcx, self.kind());\n         let value = match predicate {\n-            ty::PredicateKind::Trait(predicate, _) => {\n+            ty::PredicateKind::Trait(predicate) => {\n                 Some(chalk_ir::WhereClause::Implemented(predicate.trait_ref.lower_into(interner)))\n             }\n             ty::PredicateKind::RegionOutlives(predicate) => {\n@@ -702,7 +702,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n         let (predicate, binders, _named_regions) =\n             collect_bound_vars(interner, interner.tcx, self.kind());\n         match predicate {\n-            ty::PredicateKind::Trait(predicate, _) => Some(chalk_ir::Binders::new(\n+            ty::PredicateKind::Trait(predicate) => Some(chalk_ir::Binders::new(\n                 binders,\n                 chalk_solve::rust_ir::InlineBound::TraitBound(\n                     predicate.trait_ref.lower_into(interner),"}, {"sha": "3f72a431bd15561effa89281e2554159f866e0fe", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -1340,7 +1340,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 let bound_predicate = obligation.predicate.kind();\n                 match bound_predicate.skip_binder() {\n-                    ty::PredicateKind::Trait(pred, _) => {\n+                    ty::PredicateKind::Trait(pred) => {\n                         let pred = bound_predicate.rebind(pred);\n                         associated_types.entry(span).or_default().extend(\n                             tcx.associated_items(pred.def_id())"}, {"sha": "4f8c8ca899f9008da93a43ea0234565f977d1179", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -606,16 +606,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut suggest_box = !obligations.is_empty();\n                 for o in obligations {\n                     match o.predicate.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(t, constness) => {\n-                            let pred = ty::PredicateKind::Trait(\n-                                ty::TraitPredicate {\n-                                    trait_ref: ty::TraitRef {\n-                                        def_id: t.def_id(),\n-                                        substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n-                                    },\n+                        ty::PredicateKind::Trait(t) => {\n+                            let pred = ty::PredicateKind::Trait(ty::TraitPredicate {\n+                                trait_ref: ty::TraitRef {\n+                                    def_id: t.def_id(),\n+                                    substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n                                 },\n-                                constness,\n-                            );\n+                                constness: t.constness,\n+                            });\n                             let obl = Obligation::new(\n                                 o.cause.clone(),\n                                 self.param_env,"}, {"sha": "208eb27c84406f7ebdf67a13b414d1e1a3444de5", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -587,9 +587,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let bound_predicate = obligation.predicate.kind();\n             let trait_pred = match bound_predicate.skip_binder() {\n-                ty::PredicateKind::Trait(trait_pred, _)\n-                    if traits.contains(&trait_pred.def_id()) =>\n-                {\n+                ty::PredicateKind::Trait(trait_pred) if traits.contains(&trait_pred.def_id()) => {\n                     if unsize_did == trait_pred.def_id() {\n                         let self_ty = trait_pred.self_ty();\n                         let unsize_ty = trait_pred.trait_ref.substs[1].expect_ty();"}, {"sha": "c34dd705bef7b148c25737d6abc8251c752f2ec4", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -229,7 +229,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             let predicate = predicate.kind();\n             let p = p.kind();\n             match (predicate.skip_binder(), p.skip_binder()) {\n-                (ty::PredicateKind::Trait(a, _), ty::PredicateKind::Trait(b, _)) => {\n+                (ty::PredicateKind::Trait(a), ty::PredicateKind::Trait(b)) => {\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {"}, {"sha": "ee226aa82c665fc0f1b7b4513760340401bd99e8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -796,7 +796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         bound_predicate.rebind(data).required_poly_trait_ref(self.tcx),\n                         obligation,\n                     )),\n-                    ty::PredicateKind::Trait(data, _) => {\n+                    ty::PredicateKind::Trait(data) => {\n                         Some((bound_predicate.rebind(data).to_poly_trait_ref(), obligation))\n                     }\n                     ty::PredicateKind::Subtype(..) => None,"}, {"sha": "9952413353fa9ca04328d40131abbc67c75756af", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -923,7 +923,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 continue;\n             }\n \n-            if let ty::PredicateKind::Trait(predicate, _) =\n+            if let ty::PredicateKind::Trait(predicate) =\n                 error.obligation.predicate.kind().skip_binder()\n             {\n                 // Collect the argument position for all arguments that could have caused this\n@@ -974,7 +974,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let hir::ExprKind::Path(qpath) = &path.kind {\n                 if let hir::QPath::Resolved(_, path) = &qpath {\n                     for error in errors {\n-                        if let ty::PredicateKind::Trait(predicate, _) =\n+                        if let ty::PredicateKind::Trait(predicate) =\n                             error.obligation.predicate.kind().skip_binder()\n                         {\n                             // If any of the type arguments in this path segment caused the"}, {"sha": "75705e92e54bccde237d4c00b522a625952d5427", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n             predicates: tcx.arena.alloc_from_iter(\n                 self.param_env.caller_bounds().iter().filter_map(|predicate| {\n                     match predicate.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(data, _) if data.self_ty().is_param(index) => {\n+                        ty::PredicateKind::Trait(data) if data.self_ty().is_param(index) => {\n                             // HACK(eddyb) should get the original `Span`.\n                             let span = tcx.def_span(def_id);\n                             Some((predicate, span))"}, {"sha": "88be49e96e7be3f7da39723e20bc383cd32d0efa", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -507,7 +507,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         traits::elaborate_predicates(self.tcx, predicates.predicates.iter().copied())\n             // We don't care about regions here.\n             .filter_map(|obligation| match obligation.predicate.kind().skip_binder() {\n-                ty::PredicateKind::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n+                ty::PredicateKind::Trait(trait_pred) if trait_pred.def_id() == sized_def_id => {\n                     let span = iter::zip(&predicates.predicates, &predicates.spans)\n                         .find_map(\n                             |(p, span)| {"}, {"sha": "c6e6c8c5d70e2f7d6dd8a686855b6adae62a43f6", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -832,7 +832,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let bounds = self.param_env.caller_bounds().iter().filter_map(|predicate| {\n             let bound_predicate = predicate.kind();\n             match bound_predicate.skip_binder() {\n-                ty::PredicateKind::Trait(trait_predicate, _) => {\n+                ty::PredicateKind::Trait(trait_predicate) => {\n                     match *trait_predicate.trait_ref.self_ty().kind() {\n                         ty::Param(p) if p == param_ty => {\n                             Some(bound_predicate.rebind(trait_predicate.trait_ref))"}, {"sha": "1d5a9e3e1f968fed8efab7a6820e5467af12da6f", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -683,7 +683,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let mut collect_type_param_suggestions =\n                         |self_ty: Ty<'tcx>, parent_pred: &ty::Predicate<'tcx>, obligation: &str| {\n                             // We don't care about regions here, so it's fine to skip the binder here.\n-                            if let (ty::Param(_), ty::PredicateKind::Trait(p, _)) =\n+                            if let (ty::Param(_), ty::PredicateKind::Trait(p)) =\n                                 (self_ty.kind(), parent_pred.kind().skip_binder())\n                             {\n                                 if let ty::Adt(def, _) = p.trait_ref.self_ty().kind() {\n@@ -763,7 +763,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 bound_span_label(projection_ty.self_ty(), &obligation, &quiet);\n                                 Some((obligation, projection_ty.self_ty()))\n                             }\n-                            ty::PredicateKind::Trait(poly_trait_ref, _) => {\n+                            ty::PredicateKind::Trait(poly_trait_ref) => {\n                                 let p = poly_trait_ref.trait_ref;\n                                 let self_ty = p.self_ty();\n                                 let path = p.print_only_trait_path();\n@@ -1200,7 +1200,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     match p.kind().skip_binder() {\n                         // Hide traits if they are present in predicates as they can be fixed without\n                         // having to implement them.\n-                        ty::PredicateKind::Trait(t, _) => t.def_id() == info.def_id,\n+                        ty::PredicateKind::Trait(t) => t.def_id() == info.def_id,\n                         ty::PredicateKind::Projection(p) => {\n                             p.projection_ty.item_def_id == info.def_id\n                         }"}, {"sha": "d1e583ed1845a991ba32a964f69898228fa3e089", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -689,7 +689,7 @@ fn bounds_from_generic_predicates<'tcx>(\n         debug!(\"predicate {:?}\", predicate);\n         let bound_predicate = predicate.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(trait_predicate, _) => {\n+            ty::PredicateKind::Trait(trait_predicate) => {\n                 let entry = types.entry(trait_predicate.self_ty()).or_default();\n                 let def_id = trait_predicate.def_id();\n                 if Some(def_id) != tcx.lang_items().sized_trait() {"}, {"sha": "c16b7bab3a3efe38635ae0a416e3e0144c3a87b5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -640,7 +640,7 @@ fn type_param_predicates(\n         )\n         .into_iter()\n         .filter(|(predicate, _)| match predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(data, _) => data.self_ty().is_param(index),\n+            ty::PredicateKind::Trait(data) => data.self_ty().is_param(index),\n             _ => false,\n         }),\n     );\n@@ -1198,7 +1198,7 @@ fn super_predicates_that_define_assoc_type(\n             // which will, in turn, reach indirect supertraits.\n             for &(pred, span) in superbounds {\n                 debug!(\"superbound: {:?}\", pred);\n-                if let ty::PredicateKind::Trait(bound, _) = pred.kind().skip_binder() {\n+                if let ty::PredicateKind::Trait(bound) = pred.kind().skip_binder() {\n                     tcx.at(span).super_predicates_of(bound.def_id());\n                 }\n             }\n@@ -2439,7 +2439,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             .iter()\n             .copied()\n             .filter(|(pred, _)| match pred.kind().skip_binder() {\n-                ty::PredicateKind::Trait(tr, _) => !is_assoc_item_ty(tr.self_ty()),\n+                ty::PredicateKind::Trait(tr) => !is_assoc_item_ty(tr.self_ty()),\n                 ty::PredicateKind::Projection(proj) => {\n                     !is_assoc_item_ty(proj.projection_ty.self_ty())\n                 }"}, {"sha": "1d08c4450afcfcb1595ab811ede3fc914ebdf411", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -38,7 +38,7 @@ fn associated_type_bounds<'tcx>(\n \n     let bounds_from_parent = trait_predicates.predicates.iter().copied().filter(|(pred, _)| {\n         match pred.kind().skip_binder() {\n-            ty::PredicateKind::Trait(tr, _) => tr.self_ty() == item_ty,\n+            ty::PredicateKind::Trait(tr) => tr.self_ty() == item_ty,\n             ty::PredicateKind::Projection(proj) => proj.projection_ty.self_ty() == item_ty,\n             ty::PredicateKind::TypeOutlives(outlives) => outlives.0 == item_ty,\n             _ => false,"}, {"sha": "d5d81603fc5167239a6579d68d267f3dfd5d415b", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -366,7 +366,10 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n         _ if predicate.is_global() => (),\n         // We allow specializing on explicitly marked traits with no associated\n         // items.\n-        ty::PredicateKind::Trait(pred, hir::Constness::NotConst) => {\n+        ty::PredicateKind::Trait(ty::TraitPredicate {\n+            trait_ref,\n+            constness: hir::Constness::NotConst,\n+        }) => {\n             if !matches!(\n                 trait_predicate_kind(tcx, predicate),\n                 Some(TraitSpecializationKind::Marker)\n@@ -376,7 +379,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n                         span,\n                         &format!(\n                             \"cannot specialize on trait `{}`\",\n-                            tcx.def_path_str(pred.def_id()),\n+                            tcx.def_path_str(trait_ref.def_id),\n                         ),\n                     )\n                     .emit()\n@@ -394,10 +397,11 @@ fn trait_predicate_kind<'tcx>(\n     predicate: ty::Predicate<'tcx>,\n ) -> Option<TraitSpecializationKind> {\n     match predicate.kind().skip_binder() {\n-        ty::PredicateKind::Trait(pred, hir::Constness::NotConst) => {\n-            Some(tcx.trait_def(pred.def_id()).specialization_kind)\n-        }\n-        ty::PredicateKind::Trait(_, hir::Constness::Const)\n+        ty::PredicateKind::Trait(ty::TraitPredicate {\n+            trait_ref,\n+            constness: hir::Constness::NotConst,\n+        }) => Some(tcx.trait_def(trait_ref.def_id).specialization_kind),\n+        ty::PredicateKind::Trait(_)\n         | ty::PredicateKind::RegionOutlives(_)\n         | ty::PredicateKind::TypeOutlives(_)\n         | ty::PredicateKind::Projection(_)"}, {"sha": "58a87673241f58ff07597906f3e04b0f111ec028", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         let bound_predicate = pred.kind();\n         let tcx = self.cx.tcx;\n         let regions = match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(poly_trait_pred, _) => {\n+            ty::PredicateKind::Trait(poly_trait_pred) => {\n                 tcx.collect_referenced_late_bound_regions(&bound_predicate.rebind(poly_trait_pred))\n             }\n             ty::PredicateKind::Projection(poly_proj_pred) => {\n@@ -463,7 +463,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             .filter(|p| {\n                 !orig_bounds.contains(p)\n                     || match p.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(pred, _) => pred.def_id() == sized_trait,\n+                        ty::PredicateKind::Trait(pred) => pred.def_id() == sized_trait,\n                         _ => false,\n                     }\n             })"}, {"sha": "02cfea914209bb09b6e6484f06efa91d4bd91e17", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -325,7 +325,7 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Option<WherePredicate> {\n         let bound_predicate = self.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(pred, _) => Some(bound_predicate.rebind(pred).clean(cx)),\n+            ty::PredicateKind::Trait(pred) => Some(bound_predicate.rebind(pred).clean(cx)),\n             ty::PredicateKind::RegionOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::TypeOutlives(pred) => pred.clean(cx),\n             ty::PredicateKind::Projection(pred) => Some(pred.clean(cx)),\n@@ -637,7 +637,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 let param_idx = (|| {\n                     let bound_p = p.kind();\n                     match bound_p.skip_binder() {\n-                        ty::PredicateKind::Trait(pred, _constness) => {\n+                        ty::PredicateKind::Trait(pred) => {\n                             if let ty::Param(param) = pred.self_ty().kind() {\n                                 return Some(param.index);\n                             }\n@@ -1555,9 +1555,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     .filter_map(|bound| {\n                         let bound_predicate = bound.kind();\n                         let trait_ref = match bound_predicate.skip_binder() {\n-                            ty::PredicateKind::Trait(tr, _constness) => {\n-                                bound_predicate.rebind(tr.trait_ref)\n-                            }\n+                            ty::PredicateKind::Trait(tr) => bound_predicate.rebind(tr.trait_ref),\n                             ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(_ty, reg)) => {\n                                 if let Some(r) = reg.clean(cx) {\n                                     regions.push(GenericBound::Outlives(r));"}, {"sha": "c0d52d349280f09b538503150e89e078c59d9d85", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -139,7 +139,7 @@ fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId)\n         .predicates\n         .iter()\n         .filter_map(|(pred, _)| {\n-            if let ty::PredicateKind::Trait(pred, _) = pred.kind().skip_binder() {\n+            if let ty::PredicateKind::Trait(pred) = pred.kind().skip_binder() {\n                 if pred.trait_ref.self_ty() == self_ty { Some(pred.def_id()) } else { None }\n             } else {\n                 None"}, {"sha": "fe3ad24be2a943a6bbd143ed6616e3d0c78966ba", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -1,5 +1,5 @@\n // ignore-test\n-\n+//\n // FIXME: This test should fail since, within a const impl of `Foo`, the bound on `Foo::Bar` should\n // require a const impl of `Add` for the associated type.\n "}, {"sha": "3e35ada7b2a1c909aaeb416f8e11d8be6bc85c31", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.kind().skip_binder() {\n+                                    if let Trait(trait_pred) = obligation.predicate.kind().skip_binder() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "5e559991c1697980d38fcb1798aafea3d890e2b7", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n                 match obligation.predicate.kind().no_bound_vars() {\n-                    Some(ty::PredicateKind::Trait(pred, _)) if pred.def_id() != sized_trait => Some(pred),\n+                    Some(ty::PredicateKind::Trait(pred)) if pred.def_id() != sized_trait => Some(pred),\n                     _ => None,\n                 }\n             })"}, {"sha": "ee675838c4cb3a1de9aa3d12fa1cfd90e8ed7845", "filename": "src/tools/clippy/clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -45,7 +45,7 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     let mut preds = Vec::new();\n     for (pred, _) in generics.predicates {\n         if_chain! {\n-            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind().skip_binder();\n+            if let PredicateKind::Trait(poly_trait_pred) = pred.kind().skip_binder();\n             let trait_pred = cx.tcx.erase_late_bound_regions(pred.kind().rebind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;"}, {"sha": "dee9d487c78ea28a5ec1826bbfdd5e0f61f31681", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -36,7 +36,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&Ru\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Trait(pred, _) => {\n+                ty::PredicateKind::Trait(pred) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n                     }"}, {"sha": "a2221a0b283b0425a8d8e9f3e061f4af88edfae9", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32390a0df639dde480f11fb55f37ed39e2a62c5c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=32390a0df639dde480f11fb55f37ed39e2a62c5c", "patch": "@@ -157,7 +157,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n-                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.kind().skip_binder() {\n+                if let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() {\n                     if must_use_attr(cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}