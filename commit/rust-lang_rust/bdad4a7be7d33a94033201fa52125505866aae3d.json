{"sha": "bdad4a7be7d33a94033201fa52125505866aae3d", "node_id": "C_kwDOAAsO6NoAKGJkYWQ0YTdiZTdkMzNhOTQwMzMyMDFmYTUyMTI1NTA1ODY2YWFlM2Q", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-03T00:09:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T00:09:08Z"}, "message": "Rollup merge of #93072 - m-ou-se:compatible-variants-suggestion-with-desugaring, r=estebank\n\nCompatible variants suggestion with desugaring\n\nThis fixes #90553 for `for` loops and other desugarings.\n\nr? ```@estebank```", "tree": {"sha": "9b5695d8c3cbfc89664853e649451bf689e9d074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b5695d8c3cbfc89664853e649451bf689e9d074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdad4a7be7d33a94033201fa52125505866aae3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIAckCRBK7hj4Ov3rIwAA3PEIABZUOcgDBot3ir5Kvdj4fEQ7\nvlyy9idHMKFbdn+1Pazye0tAorA+YFcLUllo7OkiV9D3ZyTYSLez9yv06oQPNm8N\nxMCb3wINXCTqzYL4WV8Fh/kvCI3R3RUGgr30VqIw+1jRMxVqiigrEPOrwKYKhcA4\nvxdrEe3dI1vS4ECFHXOgrc+Lsnr7RgsnLvkWpMAVy/Egf5AEpWg45FfyOMi4z23q\nLqwp4CWDVwQ6ise52ts8AgSS4jDohGE6aUuSsCWtd6UyyvJqg8zYF+rg+DfXV4d8\nV67ufjjqx+MVWrcwOuJnFDa2xElPqe/siKp7zShG3BGHqLRTliGcevdReQEaqqw=\n=UHge\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b5695d8c3cbfc89664853e649451bf689e9d074\nparent a83021bda9835cef580364dbb72ca7fde488a6c3\nparent b32cabf458a67bdf6b511d385a315d23547dd157\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646266148 +0100\ncommitter GitHub <noreply@github.com> 1646266148 +0100\n\nRollup merge of #93072 - m-ou-se:compatible-variants-suggestion-with-desugaring, r=estebank\n\nCompatible variants suggestion with desugaring\n\nThis fixes #90553 for `for` loops and other desugarings.\n\nr? ```@estebank```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdad4a7be7d33a94033201fa52125505866aae3d", "html_url": "https://github.com/rust-lang/rust/commit/bdad4a7be7d33a94033201fa52125505866aae3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdad4a7be7d33a94033201fa52125505866aae3d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83021bda9835cef580364dbb72ca7fde488a6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83021bda9835cef580364dbb72ca7fde488a6c3", "html_url": "https://github.com/rust-lang/rust/commit/a83021bda9835cef580364dbb72ca7fde488a6c3"}, {"sha": "b32cabf458a67bdf6b511d385a315d23547dd157", "url": "https://api.github.com/repos/rust-lang/rust/commits/b32cabf458a67bdf6b511d385a315d23547dd157", "html_url": "https://github.com/rust-lang/rust/commit/b32cabf458a67bdf6b511d385a315d23547dd157"}], "stats": {"total": 107, "additions": 93, "deletions": 14}, "files": [{"sha": "f01843ebabacf75e3c6fd87a315f014339658567", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bdad4a7be7d33a94033201fa52125505866aae3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdad4a7be7d33a94033201fa52125505866aae3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=bdad4a7be7d33a94033201fa52125505866aae3d", "patch": "@@ -276,11 +276,28 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // we suggest adding a separate return expression instead.\n             // (To avoid things like suggesting `Ok(while .. { .. })`.)\n             if expr_ty.is_unit() {\n+                let mut id = expr.hir_id;\n+                let mut parent;\n+\n+                // Unroll desugaring, to make sure this works for `for` loops etc.\n+                loop {\n+                    parent = self.tcx.hir().get_parent_node(id);\n+                    if let Some(parent_span) = self.tcx.hir().opt_span(parent) {\n+                        if parent_span.find_ancestor_inside(expr.span).is_some() {\n+                            // The parent node is part of the same span, so is the result of the\n+                            // same expansion/desugaring and not the 'real' parent node.\n+                            id = parent;\n+                            continue;\n+                        }\n+                    }\n+                    break;\n+                }\n+\n                 if let Some(hir::Node::Block(&hir::Block {\n                     span: block_span, expr: Some(e), ..\n-                })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+                })) = self.tcx.hir().find(parent)\n                 {\n-                    if e.hir_id == expr.hir_id {\n+                    if e.hir_id == id {\n                         if let Some(span) = expr.span.find_ancestor_inside(block_span) {\n                             let return_suggestions =\n                                 if self.tcx.is_diagnostic_item(sym::Result, expected_adt.did) {"}, {"sha": "7d43b575d2f66611eaf1c9c81a499a30122db121", "filename": "src/test/ui/async-await/proper-span-for-type-error.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed?ref=bdad4a7be7d33a94033201fa52125505866aae3d", "patch": "@@ -5,7 +5,8 @@\n async fn a() {}\n \n async fn foo() -> Result<(), i32> {\n-    Ok(a().await) //~ ERROR mismatched types\n+    a().await;\n+    Ok(()) //~ ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "25f05156ce2bc57b4d60a55443a3dac2e8107b6c", "filename": "src/test/ui/async-await/proper-span-for-type-error.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr?ref=bdad4a7be7d33a94033201fa52125505866aae3d", "patch": "@@ -6,10 +6,11 @@ LL |     a().await\n    |\n    = note:   expected enum `Result<(), i32>`\n            found unit type `()`\n-help: try wrapping the expression in `Ok`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     a().await;\n+LL ~     Ok(())\n    |\n-LL |     Ok(a().await)\n-   |     +++         +\n \n error: aborting due to previous error\n "}, {"sha": "b078064b26745c6835dd24319219c027d6e69b18", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=bdad4a7be7d33a94033201fa52125505866aae3d", "patch": "@@ -23,6 +23,21 @@ fn b() -> Result<(), ()> {\n     //~| HELP try adding an expression\n }\n \n+fn c() -> Option<()> {\n+    for _ in [1, 2] {\n+        //~^ ERROR mismatched types\n+        f();\n+    }\n+    //~^ HELP try adding an expression\n+}\n+\n+fn d() -> Option<()> {\n+    c()?\n+    //~^ ERROR incompatible types\n+    //~| HELP try removing this `?`\n+    //~| HELP try adding an expression\n+}\n+\n fn main() {\n     let _: Option<()> = while false {};\n     //~^ ERROR mismatched types"}, {"sha": "51c1bf97c4e2c5c91df8b341fac1ec8b2e778bbf", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdad4a7be7d33a94033201fa52125505866aae3d/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=bdad4a7be7d33a94033201fa52125505866aae3d", "patch": "@@ -37,7 +37,52 @@ LL +     Ok(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:27:25\n+  --> $DIR/compatible-variants.rs:27:5\n+   |\n+LL |   fn c() -> Option<()> {\n+   |             ---------- expected `Option<()>` because of return type\n+LL | /     for _ in [1, 2] {\n+LL | |\n+LL | |         f();\n+LL | |     }\n+   | |_____^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     }\n+LL +     None\n+   |\n+LL ~     }\n+LL +     Some(())\n+   |\n+\n+error[E0308]: `?` operator has incompatible types\n+  --> $DIR/compatible-variants.rs:35:5\n+   |\n+LL |     c()?\n+   |     ^^^^ expected enum `Option`, found `()`\n+   |\n+   = note: `?` operator cannot convert from `()` to `Option<()>`\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try removing this `?`\n+   |\n+LL -     c()?\n+LL +     c()\n+   | \n+help: try adding an expression at the end of the block\n+   |\n+LL ~     c()?;\n+LL +     None\n+   |\n+LL ~     c()?;\n+LL +     Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:42:25\n    |\n LL |     let _: Option<()> = while false {};\n    |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n@@ -52,7 +97,7 @@ LL |     let _: Option<()> = Some(while false {});\n    |                         +++++              +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:31:9\n+  --> $DIR/compatible-variants.rs:46:9\n    |\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n@@ -69,7 +114,7 @@ LL +         Some(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:35:31\n+  --> $DIR/compatible-variants.rs:50:31\n    |\n LL |     let _: Result<i32, i32> = 1;\n    |            ----------------   ^ expected enum `Result`, found integer\n@@ -86,7 +131,7 @@ LL |     let _: Result<i32, i32> = Err(1);\n    |                               ++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:38:26\n+  --> $DIR/compatible-variants.rs:53:26\n    |\n LL |     let _: Option<i32> = 1;\n    |            -----------   ^ expected enum `Option`, found integer\n@@ -101,7 +146,7 @@ LL |     let _: Option<i32> = Some(1);\n    |                          +++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:41:28\n+  --> $DIR/compatible-variants.rs:56:28\n    |\n LL |     let _: Hey<i32, i32> = 1;\n    |            -------------   ^ expected enum `Hey`, found integer\n@@ -118,7 +163,7 @@ LL |     let _: Hey<i32, i32> = Hey::B(1);\n    |                            +++++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:44:29\n+  --> $DIR/compatible-variants.rs:59:29\n    |\n LL |     let _: Hey<i32, bool> = false;\n    |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n@@ -133,7 +178,7 @@ LL |     let _: Hey<i32, bool> = Hey::B(false);\n    |                             +++++++     +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:48:19\n+  --> $DIR/compatible-variants.rs:63:19\n    |\n LL |     let _ = Foo { bar };\n    |                   ^^^ expected enum `Option`, found `i32`\n@@ -145,6 +190,6 @@ help: try wrapping the expression in `Some`\n LL |     let _ = Foo { bar: Some(bar) };\n    |                   ++++++++++   +\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}