{"sha": "96b819a456672e50444dcccbfed2435f6b212225", "node_id": "C_kwDOAAsO6NoAKDk2YjgxOWE0NTY2NzJlNTA0NDRkY2NjYmZlZDI0MzVmNmIyMTIyMjU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-18T15:09:14Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T12:51:33Z"}, "message": "Inline a trivial function", "tree": {"sha": "c946b354171e49c2f45dbc10fbd20e4c0a02f8ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c946b354171e49c2f45dbc10fbd20e4c0a02f8ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b819a456672e50444dcccbfed2435f6b212225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b819a456672e50444dcccbfed2435f6b212225", "html_url": "https://github.com/rust-lang/rust/commit/96b819a456672e50444dcccbfed2435f6b212225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b819a456672e50444dcccbfed2435f6b212225/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "759c04a00b46d4a86d71ab69b072b956dfacabf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/759c04a00b46d4a86d71ab69b072b956dfacabf9", "html_url": "https://github.com/rust-lang/rust/commit/759c04a00b46d4a86d71ab69b072b956dfacabf9"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "3f98168e2573a38fb78c5f10a8ac826914dc57ba", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96b819a456672e50444dcccbfed2435f6b212225/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b819a456672e50444dcccbfed2435f6b212225/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=96b819a456672e50444dcccbfed2435f6b212225", "patch": "@@ -343,7 +343,7 @@ where\n         // These are guaranteed to apply, no matter the inference\n         // results.\n         let trait_bounds: Vec<_> =\n-            self.verify_bound.projection_declared_bounds_from_trait(projection_ty).collect();\n+            self.verify_bound.bounds(projection_ty.item_def_id, projection_ty.substs).collect();\n \n         debug!(?trait_bounds);\n \n@@ -369,7 +369,7 @@ where\n             match *bound.0.kind() {\n                 ty::Projection(projection_ty) => self\n                     .verify_bound\n-                    .projection_declared_bounds_from_trait(projection_ty)\n+                    .bounds(projection_ty.item_def_id, projection_ty.substs)\n                     .all(|r| r != bound.1),\n \n                 _ => panic!(\"expected only projection types from env, not {:?}\", bound.0),"}, {"sha": "30ee1229faec1d08bd9ae209f952d8cc5379b62e", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/96b819a456672e50444dcccbfed2435f6b212225/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b819a456672e50444dcccbfed2435f6b212225/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=96b819a456672e50444dcccbfed2435f6b212225", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::GenericArg;\n-use rustc_middle::ty::{self, EarlyBinder, OutlivesPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, OutlivesPredicate, SubstsRef, Ty, TyCtxt};\n \n use smallvec::smallvec;\n \n@@ -114,16 +114,6 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         self.declared_generic_bounds_from_env_for_erased_ty(erased_projection_ty)\n     }\n \n-    /// Searches the where-clauses in scope for regions that\n-    /// `projection_ty` is known to outlive. Currently requires an\n-    /// exact match.\n-    pub fn projection_declared_bounds_from_trait(\n-        &self,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n-    ) -> impl Iterator<Item = ty::Region<'tcx>> + 'cx + Captures<'tcx> {\n-        self.declared_projection_bounds_from_trait(projection_ty)\n-    }\n-\n     #[instrument(level = \"debug\", skip(self, visited))]\n     fn projection_bound(\n         &self,\n@@ -151,7 +141,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n \n         // Extend with bounds that we can find from the trait.\n         let trait_bounds = self\n-            .projection_declared_bounds_from_trait(projection_ty)\n+            .bounds(projection_ty.item_def_id, projection_ty.substs)\n             .map(|r| VerifyBound::OutlivedBy(r));\n \n         // see the extensive comment in projection_must_outlive\n@@ -294,15 +284,15 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     ///\n     /// then this function would return `'x`. This is subject to the\n     /// limitations around higher-ranked bounds described in\n-    /// `region_bounds_declared_on_associated_item`.\n-    fn declared_projection_bounds_from_trait(\n+    /// `declared_region_bounds`.\n+    #[instrument(level = \"debug\", skip(self))]\n+    pub fn bounds(\n         &self,\n-        projection_ty: ty::ProjectionTy<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = ty::Region<'tcx>> + 'cx + Captures<'tcx> {\n-        debug!(\"projection_bounds(projection_ty={:?})\", projection_ty);\n         let tcx = self.tcx;\n-        self.region_bounds_declared_on_associated_item(projection_ty.item_def_id)\n-            .map(move |r| EarlyBinder(r).subst(tcx, projection_ty.substs))\n+        self.declared_region_bounds(def_id).map(move |r| EarlyBinder(r).subst(tcx, substs))\n     }\n \n     /// Given the `DefId` of an associated item, returns any region\n@@ -335,12 +325,10 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     ///\n     /// This is for simplicity, and because we are not really smart\n     /// enough to cope with such bounds anywhere.\n-    fn region_bounds_declared_on_associated_item(\n-        &self,\n-        assoc_item_def_id: DefId,\n-    ) -> impl Iterator<Item = ty::Region<'tcx>> {\n+    fn declared_region_bounds(&self, def_id: DefId) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n-        let bounds = tcx.item_bounds(assoc_item_def_id);\n+        let bounds = tcx.item_bounds(def_id);\n+        trace!(\"{:#?}\", bounds);\n         bounds\n             .into_iter()\n             .filter_map(|p| p.to_opt_type_outlives())"}]}