{"sha": "1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMGZiMDM5MWNhZjIzMmRhY2FiZGY3M2ZiYmI4NGYyNDUyYjI1YzE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-04T11:07:04Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-05-10T16:52:13Z"}, "message": "Add a bunch more tests.", "tree": {"sha": "8eda3d3e00d6e4440fa875c86fcaccad9c72c099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eda3d3e00d6e4440fa875c86fcaccad9c72c099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlzVrD0ACgkQAXYLT59T\n8VRQYw//Xpc87bpD5PigzEwg8wJ1RMQjfWU2l76fs91TdWNsJlDhdi3b/Srh6Bru\n6MT81PNp7L9wvJ29SBF+DiLSdpxTpdiNJoON7Qmffwk79iy65o0w5JtshvQDZ4sC\nYK7eyxGBt0xXlrtqoQ1uEeWxC28eGNTPHWWi8z5CbEoTpl0byxEYEkVX7ECh423e\nDJ+vnl/M+drP8UYm5UdHsIbByFNaRxl9NI+3Tj3ug5D68zFSkQ2VL3h7Hp5z72vB\nyZKL8wuLeST9Hr3hURF6wREwhgZhOB4DQIF1reExedyut5tGOK50L95r+vWdh8qP\nZo/fXO5kOes/rN8BS81n1dHaIXunarA2Y/tg0ReXnpZeRS9JWEy5slEzyK8DAU29\nfd4FRNakrlKYPvHSlpbRlPnBHtwU4xnoZ7UjUCp4Ec+jc2HZc1dUYg+NuHWPe758\ncRmWCNurkdgCddiudc6O9j5pE3R5SL3fvf6i9lzkdzUHcLjhElXv3heZKSPJUHRo\nwlj23E7jZMop1MdovDii2EX8RaBYKOooaKkCins38Di+JczAYGkfCbfLzkmJHShP\n8TT8SlTNsUquZNnDrf7/gF1hY6gPMLnlKrJ2LKOz76s6nz+K/vLQGqmvqCNFW/SQ\neJujT2miNBpXqJsymK9gd8jEDyakQv1QFAzK0ArhY9vGcxFTbrQ=\n=POPQ\n-----END PGP SIGNATURE-----", "payload": "tree 8eda3d3e00d6e4440fa875c86fcaccad9c72c099\nparent 214f977fee19aeeb4f5ab4df8e0b5d37e611cb48\nauthor David Wood <david@davidtw.co> 1556968024 +0100\ncommitter David Wood <david@davidtw.co> 1557507133 +0100\n\nAdd a bunch more tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "html_url": "https://github.com/rust-lang/rust/commit/1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214f977fee19aeeb4f5ab4df8e0b5d37e611cb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/214f977fee19aeeb4f5ab4df8e0b5d37e611cb48", "html_url": "https://github.com/rust-lang/rust/commit/214f977fee19aeeb4f5ab4df8e0b5d37e611cb48"}], "stats": {"total": 511, "additions": 506, "deletions": 5}, "files": [{"sha": "8cb9a8cf1f6133463e5a318a387d6301b4181f8e", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/auxiliary/uninhabited.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -23,3 +23,11 @@ pub enum PartiallyInhabitedVariants {\n     Tuple(u8),\n     #[non_exhaustive] Struct { x: ! }\n }\n+\n+pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n+\n+pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n+\n+pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n+\n+pub struct IndirectUninhabitedVariants(UninhabitedVariants);"}, {"sha": "98a7fdbc5049abe48cf39a87ded6105a243d1ab5", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,36 @@\n+// aux-build:uninhabited.rs\n+#![feature(never_type)]\n+\n+extern crate uninhabited;\n+\n+use uninhabited::{\n+    IndirectUninhabitedEnum,\n+    IndirectUninhabitedStruct,\n+    IndirectUninhabitedTupleStruct,\n+    IndirectUninhabitedVariants,\n+};\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type through a level of\n+// indirection from an extern crate will not compile.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: IndirectUninhabitedEnum) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_struct_to_anything(x: IndirectUninhabitedStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: IndirectUninhabitedTupleStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(\n+    x: IndirectUninhabitedVariants,\n+) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn main() {}"}, {"sha": "af82022e1da99d39b005897809fda741ac2608fc", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match.stderr?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,35 @@\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `uninhabited::IndirectUninhabitedEnum` is not handled\n+  --> $DIR/indirect_match.rs:19:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `uninhabited::IndirectUninhabitedStruct` is not handled\n+  --> $DIR/indirect_match.rs:23:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `uninhabited::IndirectUninhabitedTupleStruct` is not handled\n+  --> $DIR/indirect_match.rs:27:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `uninhabited::IndirectUninhabitedVariants` is not handled\n+  --> $DIR/indirect_match.rs:33:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "3c8d495e12cb6ef35528cc3e306c3391e3170654", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,52 @@\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n+\n+pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n+\n+pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n+\n+pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type through a level of\n+// indirection from the defining crate will not compile without `#![feature(exhaustive_patterns)]`.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: IndirectUninhabitedEnum) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_struct_to_anything(x: IndirectUninhabitedStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: IndirectUninhabitedTupleStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(\n+    x: IndirectUninhabitedVariants,\n+) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn main() {}"}, {"sha": "27b120792d6d1ee89c55f1fd9cb4f16216fb3ae3", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,59 @@\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `IndirectUninhabitedEnum` is not handled\n+  --> $DIR/indirect_match_same_crate.rs:35:11\n+   |\n+LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n+   | ----------------------------------------------------\n+   | |          |\n+   | |          variant not covered\n+   | `IndirectUninhabitedEnum` defined here\n+...\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `IndirectUninhabitedStruct` is not handled\n+  --> $DIR/indirect_match_same_crate.rs:39:11\n+   |\n+LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n+   | --------------------------------------------------------\n+   | |          |\n+   | |          variant not covered\n+   | `IndirectUninhabitedStruct` defined here\n+...\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `IndirectUninhabitedTupleStruct` is not handled\n+  --> $DIR/indirect_match_same_crate.rs:43:11\n+   |\n+LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n+   | ------------------------------------------------------------------\n+   | |          |\n+   | |          variant not covered\n+   | `IndirectUninhabitedTupleStruct` defined here\n+...\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `IndirectUninhabitedVariants` is not handled\n+  --> $DIR/indirect_match_same_crate.rs:49:11\n+   |\n+LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n+   | ------------------------------------------------------------\n+   | |          |\n+   | |          variant not covered\n+   | `IndirectUninhabitedVariants` defined here\n+...\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "be86519ecb159cdf961f06dfeb856d4d906dc0dc", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,40 @@\n+// aux-build:uninhabited.rs\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+\n+extern crate uninhabited;\n+\n+use uninhabited::{\n+    IndirectUninhabitedEnum,\n+    IndirectUninhabitedStruct,\n+    IndirectUninhabitedTupleStruct,\n+    IndirectUninhabitedVariants,\n+};\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type through a level of\n+// indirection from an extern crate will not compile. In particular, this enables the\n+// `exhaustive_patterns` feature as this can change the branch used in the compiler to determine\n+// this.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: IndirectUninhabitedEnum) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_struct_to_anything(x: IndirectUninhabitedStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: IndirectUninhabitedTupleStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(\n+    x: IndirectUninhabitedVariants,\n+) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn main() {}"}, {"sha": "17a8d01007205972ccf42cdfa594a23907d7b9ad", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns.stderr?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,35 @@\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedEnum` is non-empty\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:23:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedStruct` is non-empty\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:27:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedTupleStruct` is non-empty\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:31:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `uninhabited::IndirectUninhabitedVariants` is non-empty\n+  --> $DIR/indirect_match_with_exhaustive_patterns.rs:37:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "5dbd38e07df0251945c22899f348b0c5aa85ede9", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,58 @@\n+// compile-pass\n+// skip-codegen\n+#![deny(unreachable_patterns)]\n+#![feature(exhaustive_patterns)]\n+#![feature(never_type)]\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+pub enum UninhabitedEnum {\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n+pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n+\n+pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n+\n+pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n+\n+pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n+\n+struct A;\n+\n+// This test checks that an empty match on a non-exhaustive uninhabited type from the defining crate\n+// will compile. In particular, this enables the `exhaustive_patterns` feature as this can\n+// change the branch used in the compiler to determine this.\n+// Codegen is skipped because tests with long names can cause issues on Windows CI, see #60648.\n+\n+fn cannot_empty_match_on_empty_enum_to_anything(x: IndirectUninhabitedEnum) -> A {\n+    match x {}\n+}\n+\n+fn cannot_empty_match_on_empty_struct_to_anything(x: IndirectUninhabitedStruct) -> A {\n+    match x {}\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: IndirectUninhabitedTupleStruct) -> A {\n+    match x {}\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(\n+    x: IndirectUninhabitedVariants,\n+) -> A {\n+    match x {}\n+}\n+\n+fn main() {}"}, {"sha": "e54098d4d48b958fae8839616e29b6b9460b1bcb", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -5,6 +5,9 @@ extern crate uninhabited;\n \n use uninhabited::{\n     UninhabitedEnum,\n+    UninhabitedStruct,\n+    UninhabitedTupleStruct,\n+    UninhabitedVariants,\n };\n \n struct A;\n@@ -16,4 +19,16 @@ fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n     match x {} //~ ERROR non-exhaustive patterns\n }\n \n+fn cannot_empty_match_on_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(x: UninhabitedVariants) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n fn main() {}"}, {"sha": "de39688f45a4de2500f9b1a190f41426adbc7bed", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch.stderr?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -1,11 +1,35 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match.rs:16:11\n+  --> $DIR/match.rs:19:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to previous error\n+error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `uninhabited::UninhabitedStruct` is not handled\n+  --> $DIR/match.rs:23:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `uninhabited::UninhabitedTupleStruct` is not handled\n+  --> $DIR/match.rs:27:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `uninhabited::UninhabitedVariants` are not handled\n+  --> $DIR/match.rs:31:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "6405dd3bd65b73048d0d63be75d0a94f068e4f87", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -1,11 +1,23 @@\n-// compile-pass\n #![feature(never_type)]\n #![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {\n }\n \n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n struct A;\n \n // This test checks that an empty match on a non-exhaustive uninhabited type from the defining crate\n@@ -15,4 +27,16 @@ fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n     match x {}\n }\n \n+fn cannot_empty_match_on_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(x: UninhabitedVariants) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n fn main() {}"}, {"sha": "410285a39a945eba9687ed7c4953af30c9255fad", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -0,0 +1,49 @@\n+error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `UninhabitedStruct` is not handled\n+  --> $DIR/match_same_crate.rs:31:11\n+   |\n+LL |   pub struct UninhabitedStruct {\n+   |   -          ----------------- variant not covered\n+   |  _|\n+   | |\n+LL | |     _priv: !,\n+LL | | }\n+   | |_- `UninhabitedStruct` defined here\n+...\n+LL |       match x {}\n+   |             ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `UninhabitedTupleStruct` is not handled\n+  --> $DIR/match_same_crate.rs:35:11\n+   |\n+LL | pub struct UninhabitedTupleStruct(!);\n+   | -------------------------------------\n+   | |          |\n+   | |          variant not covered\n+   | `UninhabitedTupleStruct` defined here\n+...\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: multiple patterns of type `UninhabitedVariants` are not handled\n+  --> $DIR/match_same_crate.rs:39:11\n+   |\n+LL | / pub enum UninhabitedVariants {\n+LL | |     #[non_exhaustive] Tuple(!),\n+   | |                       ----- variant not covered\n+LL | |     #[non_exhaustive] Struct { x: ! }\n+   | |                       ------ variant not covered\n+LL | | }\n+   | |_- `UninhabitedVariants` defined here\n+...\n+LL |       match x {}\n+   |             ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "900dfff652ea6db465a898b8aa5088dabf79d4b2", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -7,6 +7,9 @@ extern crate uninhabited;\n \n use uninhabited::{\n     UninhabitedEnum,\n+    UninhabitedStruct,\n+    UninhabitedTupleStruct,\n+    UninhabitedVariants,\n };\n \n struct A;\n@@ -19,4 +22,16 @@ fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n     match x {} //~ ERROR non-exhaustive patterns\n }\n \n+fn cannot_empty_match_on_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(x: UninhabitedVariants) -> A {\n+    match x {} //~ ERROR non-exhaustive patterns\n+}\n+\n fn main() {}"}, {"sha": "48a888bc50be0b2f4fa91904eb9e31f87433e199", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns.stderr?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -1,11 +1,35 @@\n error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedEnum` is non-empty\n-  --> $DIR/match_with_exhaustive_patterns.rs:19:11\n+  --> $DIR/match_with_exhaustive_patterns.rs:22:11\n    |\n LL |     match x {}\n    |           ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to previous error\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedStruct` is non-empty\n+  --> $DIR/match_with_exhaustive_patterns.rs:26:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedTupleStruct` is non-empty\n+  --> $DIR/match_with_exhaustive_patterns.rs:30:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error[E0004]: non-exhaustive patterns: type `uninhabited::UninhabitedVariants` is non-empty\n+  --> $DIR/match_with_exhaustive_patterns.rs:34:11\n+   |\n+LL |     match x {}\n+   |           ^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "74922d4bcb5d546f274e71533f955174af2d20c1", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0fb0391caf232dacabdf73fbbb84f2452b25c1/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs?ref=1f0fb0391caf232dacabdf73fbbb84f2452b25c1", "patch": "@@ -1,4 +1,5 @@\n // compile-pass\n+// skip-codegen\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]\n@@ -8,14 +9,40 @@\n pub enum UninhabitedEnum {\n }\n \n+#[non_exhaustive]\n+pub struct UninhabitedStruct {\n+    _priv: !,\n+}\n+\n+#[non_exhaustive]\n+pub struct UninhabitedTupleStruct(!);\n+\n+pub enum UninhabitedVariants {\n+    #[non_exhaustive] Tuple(!),\n+    #[non_exhaustive] Struct { x: ! }\n+}\n+\n struct A;\n \n // This test checks that an empty match on a non-exhaustive uninhabited type from the defining crate\n // will compile. In particular, this enables the `exhaustive_patterns` feature as this can\n // change the branch used in the compiler to determine this.\n+// Codegen is skipped because tests with long names can cause issues on Windows CI, see #60648.\n \n fn cannot_empty_match_on_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n     match x {}\n }\n \n+fn cannot_empty_match_on_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n+    match x {}\n+}\n+\n+fn cannot_empty_match_on_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n+    match x {}\n+}\n+\n+fn cannot_empty_match_on_enum_with_empty_variants_struct_to_anything(x: UninhabitedVariants) -> A {\n+    match x {}\n+}\n+\n fn main() {}"}]}