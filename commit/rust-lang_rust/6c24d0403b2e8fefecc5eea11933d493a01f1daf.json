{"sha": "6c24d0403b2e8fefecc5eea11933d493a01f1daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjRkMDQwM2IyZThmZWZlY2M1ZWVhMTE5MzNkNDkzYTAxZjFkYWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-25T23:49:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-25T23:49:35Z"}, "message": "Revert \"rustc: Push type parameters down through alt tag patterns; add a test\" due to valgrind failures\n\nThis reverts commit 7a1d01effcfa5763bc62aefba40f67ad2130d28d.", "tree": {"sha": "9aa52ab73cc0c2f2bc9dfbfe4e403c2d742095ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aa52ab73cc0c2f2bc9dfbfe4e403c2d742095ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c24d0403b2e8fefecc5eea11933d493a01f1daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c24d0403b2e8fefecc5eea11933d493a01f1daf", "html_url": "https://github.com/rust-lang/rust/commit/6c24d0403b2e8fefecc5eea11933d493a01f1daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c24d0403b2e8fefecc5eea11933d493a01f1daf/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6ac1c00041fc8043e240c8fb7255251fea63f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6ac1c00041fc8043e240c8fb7255251fea63f4", "html_url": "https://github.com/rust-lang/rust/commit/7a6ac1c00041fc8043e240c8fb7255251fea63f4"}], "stats": {"total": 79, "additions": 11, "deletions": 68}, "files": [{"sha": "ce1c59ec01f787bdf08bf8ee7049ca8e3a245231", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 49, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6c24d0403b2e8fefecc5eea11933d493a01f1daf/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c24d0403b2e8fefecc5eea11933d493a01f1daf/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6c24d0403b2e8fefecc5eea11933d493a01f1daf", "patch": "@@ -913,43 +913,15 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n             // of the variant, which is either a tag type in the case of\n             // nullary variants or a function type in the case of n-ary\n             // variants.\n+            //\n+            // TODO: When we have type-parametric tags, this will get a little\n+            // trickier. Basically, we have to instantiate the variant type we\n+            // acquire here with the type parameters provided to us by\n+            // \"expected\".\n \n-            // Grab the values for the type parameters of the tag from the\n-            // expected type.\n-            let vec[@ty.t] typaram_bindings = vec(); // FIXME: typestate botch\n-            alt (expected.struct) {\n-                case (ty.ty_tag(_, ?tps)) { typaram_bindings = tps; }\n-                case (_) {\n-                    log \"tag pattern didn't have tag type?!\";\n-                    fail;\n-                }\n-            }\n-\n-            // Get the item corresponding to the tag and its type.\n             auto vdef = option.get[ast.variant_def](vdef_opt);\n             auto variant_ty = fcx.ccx.item_types.get(vdef._1);\n \n-            // FIXME: typestate botch\n-            let option.t[@ast.item] item_opt = none[@ast.item];\n-            alt (fcx.ccx.item_items.get(vdef._0)) {\n-                case (any_item_rust(?it)) { item_opt = some[@ast.item](it); }\n-                case (_) {\n-                    log \"tag item isn't a Rust item?!\";\n-                    fail;\n-                }\n-            }\n-            let @ast.item item = option.get[@ast.item](item_opt);\n-\n-            // Get the IDs of the type parameters from that item.\n-            let vec[ast.ty_param] ty_params = vec(); // FIXME: typestate botch\n-            alt (item.node) {\n-                case (ast.item_tag(_, _, ?tps, _)) { ty_params = tps; }\n-                case (_) {\n-                    log \"tag's corresponding item isn't a tag?!\";\n-                    fail;\n-                }\n-            }\n-\n             auto subpats_len = _vec.len[@ast.pat](subpats);\n             alt (variant_ty.struct) {\n                 case (ty.ty_tag(_, _)) {\n@@ -958,14 +930,10 @@ fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n                     p_1 = ast.pat_tag(id, subpats, vdef_opt, ast.ann_type(t));\n                 }\n                 case (ty.ty_fn(_, ?args, ?tag_ty)) {\n-                    // N-ary tag variant.\n                     let vec[@ast.pat] new_subpats = vec();\n                     auto i = 0u;\n                     for (arg a in args) {\n-                        auto arg_ty = ty.substitute_ty_params(ty_params,\n-                            typaram_bindings, a.ty);\n-                        auto new_subpat = demand_pat(fcx, arg_ty,\n-                                                     subpats.(i));\n+                        auto new_subpat = demand_pat(fcx, a.ty, subpats.(i));\n                         new_subpats += vec(new_subpat);\n                         i += 1u;\n                     }\n@@ -1292,13 +1260,14 @@ fn check_pat(&@fn_ctxt fcx, @ast.pat pat) -> @ast.pat {\n                         new_subpats += vec(check_pat(fcx, subpat));\n                     }\n \n-                    auto tag_ty_g = generalize_ty(fcx.ccx, tag_ty);\n-                    auto ann = ast.ann_type(tag_ty_g);\n+                    auto ann = ast.ann_type(tag_ty);\n                     new_pat = ast.pat_tag(p, new_subpats, vdef_opt, ann);\n                 }\n \n                 // Nullary variants have tag types.\n-                case (ty.ty_tag(?tid, ?tps)) {\n+                case (ty.ty_tag(?tid, _)) {\n+                    // TODO: ty params\n+\n                     auto subpats_len = _vec.len[@ast.pat](subpats);\n                     if (subpats_len > 0u) {\n                         // TODO: pluralize properly\n@@ -1312,14 +1281,7 @@ fn check_pat(&@fn_ctxt fcx, @ast.pat pat) -> @ast.pat {\n                         fail;   // TODO: recover\n                     }\n \n-                    // Add the appropriate number of type variables.\n-                    let vec[@ty.t] tys = vec();\n-                    auto i = 0u;\n-                    while (i < _vec.len[@ty.t](tps)) {\n-                        tys += vec(next_ty_var(fcx.ccx));\n-                        i += 1u;\n-                    }\n-\n+                    let vec[@ty.t] tys = vec(); // FIXME\n                     auto ann = ast.ann_type(plain_ty(ty.ty_tag(tid, tys)));\n                     new_pat = ast.pat_tag(p, subpats, vdef_opt, ann);\n                 }"}, {"sha": "2727885a161f0570ef6fbd33b921b42b1f07f0ad", "filename": "src/test/run-pass/generic-tag-box-alt.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a6ac1c00041fc8043e240c8fb7255251fea63f4/src%2Ftest%2Frun-pass%2Fgeneric-tag-box-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6ac1c00041fc8043e240c8fb7255251fea63f4/src%2Ftest%2Frun-pass%2Fgeneric-tag-box-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-box-alt.rs?ref=7a6ac1c00041fc8043e240c8fb7255251fea63f4", "patch": "@@ -1,19 +0,0 @@\n-tag foo[T] {\n-  arm(@T);\n-}\n-\n-fn altfoo[T](foo[T] f) {\n-  auto hit = false;\n-  alt (f) {\n-    case (arm[T](?x)) {\n-      log \"in arm\";\n-      hit = true;\n-    }\n-  }\n-  check (hit);\n-}\n-\n-fn main() {\n-  altfoo[int](arm[int](@10));\n-}\n-"}]}