{"sha": "3201c6fe3f39fa4123ae373b1d7d09b68eca772b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMDFjNmZlM2YzOWZhNDEyM2FlMzczYjFkN2QwOWI2OGVjYTc3MmI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-15T02:37:25Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-15T07:08:18Z"}, "message": "rustc: De-XXX resolve and borrowck...\n\nand remove an un-needed hashmap from resolve", "tree": {"sha": "9024059b6ac1511f0aed7e50c1d4decde718e085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9024059b6ac1511f0aed7e50c1d4decde718e085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3201c6fe3f39fa4123ae373b1d7d09b68eca772b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3201c6fe3f39fa4123ae373b1d7d09b68eca772b", "html_url": "https://github.com/rust-lang/rust/commit/3201c6fe3f39fa4123ae373b1d7d09b68eca772b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3201c6fe3f39fa4123ae373b1d7d09b68eca772b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb98f4097240ade472aea8b33b19dd3ecb4fd51", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb98f4097240ade472aea8b33b19dd3ecb4fd51", "html_url": "https://github.com/rust-lang/rust/commit/dcb98f4097240ade472aea8b33b19dd3ecb4fd51"}], "stats": {"total": 56, "additions": 17, "deletions": 39}, "files": [{"sha": "c39f2455c2f8fd25010d2f5a867d647d21bba04e", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3201c6fe3f39fa4123ae373b1d7d09b68eca772b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3201c6fe3f39fa4123ae373b1d7d09b68eca772b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=3201c6fe3f39fa4123ae373b1d7d09b68eca772b", "patch": "@@ -73,7 +73,7 @@ pub fn loan(bccx: @BorrowckCtxt,\n         Err(ref e) => return Err((*e)),\n         Ok(()) => {}\n     }\n-    // XXX: Workaround for borrow check bug.\n+    // FIXME #4945: Workaround for borrow check bug.\n     Ok(copy lc.loans)\n }\n "}, {"sha": "45838efad708e46f8b04d6bcfd9156c17acd9085", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3201c6fe3f39fa4123ae373b1d7d09b68eca772b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3201c6fe3f39fa4123ae373b1d7d09b68eca772b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3201c6fe3f39fa4123ae373b1d7d09b68eca772b", "patch": "@@ -96,8 +96,8 @@ pub type BindingMap = HashMap<ident,binding_info>;\n \n // Implementation resolution\n //\n-// XXX: This kind of duplicates information kept in ty::method. Maybe it\n-// should go away.\n+// FIXME #4946: This kind of duplicates information kept in\n+// ty::method. Maybe it should go away.\n \n pub type MethodInfo = {\n     did: def_id,\n@@ -268,8 +268,8 @@ pub enum MethodSort {\n // allows it to reference private names. Currently, this is used for the test\n // runner.\n //\n-// XXX: The X-ray flag is kind of questionable in the first place. It might\n-// be better to introduce an expr_xray_path instead.\n+// FIXME #4947: The X-ray flag is kind of questionable in the first\n+// place. It might be better to introduce an expr_xray_path instead.\n \n #[deriving_eq]\n pub enum XrayFlag {\n@@ -469,14 +469,6 @@ pub struct Module {\n \n     anonymous_children: HashMap<node_id,@Module>,\n \n-    // XXX: This is about to be reworked so that exports are on individual\n-    // items, not names.\n-    //\n-    // The ident is the name of the exported item, while the node ID is the\n-    // ID of the export path.\n-\n-    exported_names: HashMap<ident,node_id>,\n-\n     // The status of resolving each import in this module.\n     import_resolutions: HashMap<ident,@mut ImportResolution>,\n \n@@ -498,7 +490,6 @@ pub fn Module(parent_link: ParentLink,\n         children: HashMap(),\n         imports: DVec(),\n         anonymous_children: HashMap(),\n-        exported_names: HashMap(),\n         import_resolutions: HashMap(),\n         glob_count: 0,\n         resolved_import_count: 0\n@@ -831,7 +822,7 @@ pub struct Resolver {\n     mut current_module: @Module,\n \n     // The current set of local scopes, for values.\n-    // XXX: Reuse ribs to avoid allocation.\n+    // FIXME #4948: Reuse ribs to avoid allocation.\n     value_ribs: @DVec<@Rib>,\n \n     // The current set of local scopes, for types.\n@@ -2137,8 +2128,9 @@ pub impl Resolver {\n \n         // We need to resolve both namespaces for this to succeed.\n         //\n-        // XXX: See if there's some way of handling namespaces in a more\n-        // generic way. We have two of them; it seems worth doing...\n+        // FIXME #4949: See if there's some way of handling namespaces in\n+        // a more generic way. We have two of them; it seems worth\n+        // doing...\n \n         let mut value_result = UnknownResult;\n         let mut type_result = UnknownResult;\n@@ -3206,8 +3198,8 @@ pub impl Resolver {\n     // This pass simply determines what all \"export\" keywords refer to and\n     // writes the results into the export map.\n     //\n-    // XXX: This pass will be removed once exports change to per-item. Then\n-    // this operation can simply be performed as part of item (or import)\n+    // FIXME #4953 This pass will be removed once exports change to per-item.\n+    // Then this operation can simply be performed as part of item (or import)\n     // processing.\n \n     fn record_exports() {\n@@ -3507,8 +3499,8 @@ pub impl Resolver {\n                    allow_capturing_self: AllowCapturingSelfFlag)\n                 -> Option<def_like> {\n \n-        // XXX: This should not use a while loop.\n-        // XXX: Try caching?\n+        // FIXME #4950: This should not use a while loop.\n+        // FIXME #4950: Try caching?\n \n         let mut i = (*ribs).len();\n         while i != 0 {\n@@ -3649,7 +3641,7 @@ pub impl Resolver {\n                         // Create a new rib for the method-specific type\n                         // parameters.\n                         //\n-                        // XXX: Do we need a node ID here?\n+                        // FIXME #4951: Do we need a node ID here?\n \n                         match *method {\n                           required(ref ty_m) => {\n@@ -4555,7 +4547,7 @@ pub impl Resolver {\n                                                                 namespace);\n     }\n \n-    // XXX: Merge me with resolve_name_in_module?\n+    // FIXME #4952: Merge me with resolve_name_in_module?\n     fn resolve_definition_of_name_in_module(containing_module: @Module,\n                                             name: ident,\n                                             namespace: Namespace,\n@@ -4873,20 +4865,6 @@ pub impl Resolver {\n \n             expr_struct(path, _, _) => {\n                 // Resolve the path to the structure it goes to.\n-                //\n-                // XXX: We might want to support explicit type parameters in\n-                // the path, in which case this gets a little more\n-                // complicated:\n-                //\n-                // 1. Should we go through the ast_path_to_ty() path, which\n-                //    handles typedefs and the like?\n-                //\n-                // 2. If so, should programmers be able to write this?\n-                //\n-                //    class Foo<A> { ... }\n-                //    type Bar<A> = Foo<A>;\n-                //    let bar = Bar { ... } // no type parameters\n-\n                 match self.resolve_path(path, TypeNS, false, visitor) {\n                     Some(def_ty(class_id)) | Some(def_struct(class_id))\n                             if self.structs.contains_key(&class_id) => {\n@@ -5320,7 +5298,7 @@ pub impl Resolver {\n                 None => { value_repr = ~\"\"; }\n                 Some(_) => {\n                     value_repr = ~\" value:?\";\n-                    // XXX\n+                    // FIXME #4954\n                 }\n             }\n \n@@ -5329,7 +5307,7 @@ pub impl Resolver {\n                 None => { type_repr = ~\"\"; }\n                 Some(_) => {\n                     type_repr = ~\" type:?\";\n-                    // XXX\n+                    // FIXME #4954\n                 }\n             }\n "}]}