{"sha": "970b5d189af48dd6ec26e90bb8d6d236824edf4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MGI1ZDE4OWFmNDhkZDZlYzI2ZTkwYmI4ZDZkMjM2ODI0ZWRmNGI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:18:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-05T04:18:29Z"}, "message": "Various improvements in `Folder` impls.", "tree": {"sha": "d2e00ee9e14277c62a121b8a5c1755639f48c4f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e00ee9e14277c62a121b8a5c1755639f48c4f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970b5d189af48dd6ec26e90bb8d6d236824edf4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970b5d189af48dd6ec26e90bb8d6d236824edf4b", "html_url": "https://github.com/rust-lang/rust/commit/970b5d189af48dd6ec26e90bb8d6d236824edf4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970b5d189af48dd6ec26e90bb8d6d236824edf4b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "372fe84a8349ab4a8693d656bd786a5a47e22a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/372fe84a8349ab4a8693d656bd786a5a47e22a56", "html_url": "https://github.com/rust-lang/rust/commit/372fe84a8349ab4a8693d656bd786a5a47e22a56"}], "stats": {"total": 64, "additions": 18, "deletions": 46}, "files": [{"sha": "b35730bf2381ba85d895bc059eebbc6dfbb31496", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/970b5d189af48dd6ec26e90bb8d6d236824edf4b/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970b5d189af48dd6ec26e90bb8d6d236824edf4b/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=970b5d189af48dd6ec26e90bb8d6d236824edf4b", "patch": "@@ -13,6 +13,7 @@ use edition::Edition;\n use parse::{token, ParseSess};\n use smallvec::SmallVec;\n use errors::Applicability;\n+use util::move_map::MoveMap;\n \n use ptr::P;\n \n@@ -220,19 +221,19 @@ impl<'a> StripUnconfigured<'a> {\n     pub fn configure_foreign_mod(&mut self, foreign_mod: ast::ForeignMod) -> ast::ForeignMod {\n         ast::ForeignMod {\n             abi: foreign_mod.abi,\n-            items: foreign_mod.items.into_iter().filter_map(|item| self.configure(item)).collect(),\n+            items: foreign_mod.items.move_flat_map(|item| self.configure(item)),\n         }\n     }\n \n     fn configure_variant_data(&mut self, vdata: ast::VariantData) -> ast::VariantData {\n         match vdata {\n             ast::VariantData::Struct(fields, id) => {\n-                let fields = fields.into_iter().filter_map(|field| self.configure(field));\n-                ast::VariantData::Struct(fields.collect(), id)\n+                let fields = fields.move_flat_map(|field| self.configure(field));\n+                ast::VariantData::Struct(fields, id)\n             }\n             ast::VariantData::Tuple(fields, id) => {\n-                let fields = fields.into_iter().filter_map(|field| self.configure(field));\n-                ast::VariantData::Tuple(fields.collect(), id)\n+                let fields = fields.move_flat_map(|field| self.configure(field));\n+                ast::VariantData::Tuple(fields, id)\n             }\n             ast::VariantData::Unit(id) => ast::VariantData::Unit(id)\n         }\n@@ -247,7 +248,7 @@ impl<'a> StripUnconfigured<'a> {\n                 ast::ItemKind::Union(self.configure_variant_data(def), generics)\n             }\n             ast::ItemKind::Enum(def, generics) => {\n-                let variants = def.variants.into_iter().filter_map(|v| {\n+                let variants = def.variants.move_flat_map(|v| {\n                     self.configure(v).map(|v| {\n                         Spanned {\n                             node: ast::Variant_ {\n@@ -260,9 +261,7 @@ impl<'a> StripUnconfigured<'a> {\n                         }\n                     })\n                 });\n-                ast::ItemKind::Enum(ast::EnumDef {\n-                    variants: variants.collect(),\n-                }, generics)\n+                ast::ItemKind::Enum(ast::EnumDef { variants }, generics)\n             }\n             item => item,\n         }\n@@ -271,15 +270,11 @@ impl<'a> StripUnconfigured<'a> {\n     pub fn configure_expr_kind(&mut self, expr_kind: ast::ExprKind) -> ast::ExprKind {\n         match expr_kind {\n             ast::ExprKind::Match(m, arms) => {\n-                let arms = arms.into_iter().filter_map(|a| self.configure(a)).collect();\n+                let arms = arms.move_flat_map(|a| self.configure(a));\n                 ast::ExprKind::Match(m, arms)\n             }\n             ast::ExprKind::Struct(path, fields, base) => {\n-                let fields = fields.into_iter()\n-                    .filter_map(|field| {\n-                        self.configure(field)\n-                    })\n-                    .collect();\n+                let fields = fields.move_flat_map(|field| self.configure(field));\n                 ast::ExprKind::Struct(path, fields, base)\n             }\n             _ => expr_kind,\n@@ -304,22 +299,10 @@ impl<'a> StripUnconfigured<'a> {\n         self.process_cfg_attrs(expr)\n     }\n \n-    pub fn configure_stmt(&mut self, stmt: ast::Stmt) -> Option<ast::Stmt> {\n-        self.configure(stmt)\n-    }\n-\n-    pub fn configure_struct_expr_field(&mut self, field: ast::Field) -> Option<ast::Field> {\n-        self.configure(field)\n-    }\n-\n     pub fn configure_pat(&mut self, pattern: P<ast::Pat>) -> P<ast::Pat> {\n         pattern.map(|mut pattern| {\n             if let ast::PatKind::Struct(path, fields, etc) = pattern.node {\n-                let fields = fields.into_iter()\n-                    .filter_map(|field| {\n-                        self.configure(field)\n-                    })\n-                    .collect();\n+                let fields = fields.move_flat_map(|field| self.configure(field));\n                 pattern.node = ast::PatKind::Struct(path, fields, etc);\n             }\n             pattern\n@@ -367,10 +350,7 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n     }\n \n     fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n-        match self.configure_stmt(stmt) {\n-            Some(stmt) => fold::noop_fold_stmt(stmt, self),\n-            None => return SmallVec::new(),\n-        }\n+        fold::noop_fold_stmt(configure!(self, stmt), self)\n     }\n \n     fn fold_item(&mut self, item: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {"}, {"sha": "2effd910e85458d749c3b28067912a64b7e1ea06", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/970b5d189af48dd6ec26e90bb8d6d236824edf4b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970b5d189af48dd6ec26e90bb8d6d236824edf4b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=970b5d189af48dd6ec26e90bb8d6d236824edf4b", "patch": "@@ -1247,10 +1247,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n-        let mut stmt = match self.cfg.configure_stmt(stmt) {\n-            Some(stmt) => stmt,\n-            None => return SmallVec::new(),\n-        };\n+        let mut stmt = configure!(self, stmt);\n \n         // we'll expand attributes on expressions separately\n         if !stmt.is_expr() {"}, {"sha": "0928bc804041d99dcc90459d2fd5a0403f8e9b37", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/970b5d189af48dd6ec26e90bb8d6d236824edf4b/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970b5d189af48dd6ec26e90bb8d6d236824edf4b/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=970b5d189af48dd6ec26e90bb8d6d236824edf4b", "patch": "@@ -181,17 +181,12 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n \n     fn fold_block(&mut self, block: P<ast::Block>) -> P<ast::Block> {\n         noop_fold_block(block, self).map(|mut block| {\n-            let mut remaining_stmts = block.stmts.len();\n-\n-            block.stmts = block.stmts.move_flat_map(|mut stmt| {\n-                remaining_stmts -= 1;\n-\n+            block.stmts = block.stmts.move_map(|mut stmt| {\n                 if self.monotonic {\n                     assert_eq!(stmt.id, ast::DUMMY_NODE_ID);\n                     stmt.id = self.cx.resolver.next_node_id();\n                 }\n-\n-                Some(stmt)\n+                stmt\n             });\n \n             block\n@@ -200,9 +195,9 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n \n     fn fold_mod(&mut self, module: ast::Mod) -> ast::Mod {\n         let mut module = noop_fold_mod(module, self);\n-        module.items = module.items.move_flat_map(|item| match item.node {\n-            ast::ItemKind::Mac(_) if !self.cx.ecfg.keep_macs => None, // remove macro definitions\n-            _ => Some(item),\n+        module.items.retain(|item| match item.node {\n+            ast::ItemKind::Mac(_) if !self.cx.ecfg.keep_macs => false, // remove macro definitions\n+            _ => true,\n         });\n         module\n     }"}]}