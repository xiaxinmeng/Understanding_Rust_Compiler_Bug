{"sha": "f688f8aedffcd802012b355c182dafbdf5e819f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODhmOGFlZGZmY2Q4MDIwMTJiMzU1YzE4MmRhZmJkZjVlODE5ZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T23:57:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T02:36:57Z"}, "message": "syntax refactor `parse_self_param` (2)", "tree": {"sha": "279c7a4a942567769a313e70968e88870a61479f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279c7a4a942567769a313e70968e88870a61479f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f688f8aedffcd802012b355c182dafbdf5e819f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f688f8aedffcd802012b355c182dafbdf5e819f5", "html_url": "https://github.com/rust-lang/rust/commit/f688f8aedffcd802012b355c182dafbdf5e819f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f688f8aedffcd802012b355c182dafbdf5e819f5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40dc9da44c146cb959a34700426d29d7037cfee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/40dc9da44c146cb959a34700426d29d7037cfee6", "html_url": "https://github.com/rust-lang/rust/commit/40dc9da44c146cb959a34700426d29d7037cfee6"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "70a7b4b01d8a05ccfc44787a6483d86b61707c45", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f688f8aedffcd802012b355c182dafbdf5e819f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f688f8aedffcd802012b355c182dafbdf5e819f5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f688f8aedffcd802012b355c182dafbdf5e819f5", "patch": "@@ -1264,17 +1264,22 @@ impl<'a> Parser<'a> {\n         && self.look_ahead(n + 1, |t| t != &token::ModSep)\n     }\n \n+    fn expect_self_ident(&mut self) -> Ident {\n+        match self.token.kind {\n+            // Preserve hygienic context.\n+            token::Ident(name, _) => {\n+                let span = self.token.span;\n+                self.bump();\n+                Ident::new(name, span)\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+\n     /// Returns the parsed optional self parameter and whether a self shortcut was used.\n     ///\n     /// See `parse_self_param_with_attrs` to collect attributes.\n     fn parse_self_param(&mut self) -> PResult<'a, Option<Param>> {\n-        let expect_ident = |this: &mut Self| match this.token.kind {\n-            // Preserve hygienic context.\n-            token::Ident(name, _) =>\n-                { let span = this.token.span; this.bump(); Ident::new(name, span) }\n-            _ => unreachable!()\n-        };\n-\n         // Parse optional `self` parameter of a method.\n         // Only a limited set of initial token sequences is considered `self` parameters; anything\n         // else is parsed as a normal function parameter list, so some lookahead is required.\n@@ -1308,7 +1313,7 @@ impl<'a> Parser<'a> {\n                     SelfKind::Region(Some(lt), Mutability::Mutable)\n                 } else {\n                     return Ok(None);\n-                }, expect_ident(self), self.prev_span)\n+                }, self.expect_self_ident(), self.prev_span)\n             }\n             token::BinOp(token::Star) => {\n                 // `*self`\n@@ -1333,13 +1338,13 @@ impl<'a> Parser<'a> {\n                     SelfKind::Value(Mutability::Immutable)\n                 } else {\n                     return Ok(None);\n-                }, expect_ident(self), self.prev_span)\n+                }, self.expect_self_ident(), self.prev_span)\n             }\n             token::Ident(..) => {\n                 if self.is_isolated_self(0) {\n                     // `self`\n                     // `self: TYPE`\n-                    let eself_ident = expect_ident(self);\n+                    let eself_ident = self.expect_self_ident();\n                     let eself_hi = self.prev_span;\n                     (if self.eat(&token::Colon) {\n                         let ty = self.parse_ty()?;\n@@ -1352,7 +1357,7 @@ impl<'a> Parser<'a> {\n                     // `mut self`\n                     // `mut self: TYPE`\n                     self.bump();\n-                    let eself_ident = expect_ident(self);\n+                    let eself_ident = self.expect_self_ident();\n                     let eself_hi = self.prev_span;\n                     (if self.eat(&token::Colon) {\n                         let ty = self.parse_ty()?;"}]}