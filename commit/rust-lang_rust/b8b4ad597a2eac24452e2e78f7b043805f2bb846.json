{"sha": "b8b4ad597a2eac24452e2e78f7b043805f2bb846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YjRhZDU5N2EyZWFjMjQ0NTJlMmU3OGY3YjA0MzgwNWYyYmI4NDY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-30T16:38:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-25T16:23:32Z"}, "message": "Update region_scope_tree", "tree": {"sha": "b5e2f2c750047caff15c435c574fc329031d653c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5e2f2c750047caff15c435c574fc329031d653c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b4ad597a2eac24452e2e78f7b043805f2bb846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b4ad597a2eac24452e2e78f7b043805f2bb846", "html_url": "https://github.com/rust-lang/rust/commit/b8b4ad597a2eac24452e2e78f7b043805f2bb846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b4ad597a2eac24452e2e78f7b043805f2bb846/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d67618d4cd325263619b1af704d8929765993b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d67618d4cd325263619b1af704d8929765993b0", "html_url": "https://github.com/rust-lang/rust/commit/5d67618d4cd325263619b1af704d8929765993b0"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "2c975f17dcaa5ddd44c481d94226dfad3ddc0ca1", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -16,6 +16,7 @@ macro_rules! arena_types {\n             )>,\n             [few] mir_keys: rustc::util::nodemap::DefIdSet,\n             [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n+            [] region_scope_tree: rustc::middle::region::ScopeTree,\n         ], $tcx);\n     )\n }"}, {"sha": "a97b4d73542129f31f90559917aa97a31cf70e31", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -12,7 +12,6 @@ use crate::ty;\n \n use std::mem;\n use std::fmt;\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n use syntax::source_map;\n use syntax::ast;\n@@ -1323,7 +1322,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionResolutionVisitor<'a, 'tcx> {\n }\n \n fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n-    -> Lrc<ScopeTree>\n+    -> &'tcx ScopeTree\n {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);\n     if closure_base_def_id != def_id {\n@@ -1365,7 +1364,7 @@ fn region_scope_tree<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n         ScopeTree::default()\n     };\n \n-    Lrc::new(scope_tree)\n+    tcx.arena.alloc(scope_tree)\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "4311cfbe2b1d5e064223945631f77701c13e6632", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -456,7 +456,7 @@ rustc_queries! {\n \n         /// Per-body `region::ScopeTree`. The `DefId` should be the owner `DefId` for the body;\n         /// in the case of closures, this will be redirected to the enclosing function.\n-        query region_scope_tree(_: DefId) -> Lrc<region::ScopeTree> {}\n+        query region_scope_tree(_: DefId) -> &'tcx region::ScopeTree {}\n \n         query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Mir<'tcx> {\n             no_force"}, {"sha": "65a550b1b8914a821534615834e3eaa9b1febcae", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -228,7 +228,7 @@ pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n     // Some in `borrowck_fn` and cleared later\n     tables: &'a ty::TypeckTables<'tcx>,\n \n-    region_scope_tree: Lrc<region::ScopeTree>,\n+    region_scope_tree: &'tcx region::ScopeTree,\n \n     owner_def_id: DefId,\n "}, {"sha": "54fecb4ad60d96eec724711c7ac31170311ba330", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -17,7 +17,6 @@ use rustc::ty::layout::VariantIdx;\n use rustc::ty::print::Print;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n use syntax::source_map::CompilerDesugaringKind;\n@@ -811,7 +810,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         &mut self,\n         context: Context,\n         name: &str,\n-        scope_tree: &Lrc<ScopeTree>,\n+        scope_tree: &'tcx ScopeTree,\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans,\n@@ -1000,7 +999,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn report_temporary_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n-        scope_tree: &Lrc<ScopeTree>,\n+        scope_tree: &'tcx ScopeTree,\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n         borrow_spans: UseSpans,"}, {"sha": "7aed0bace8c0b0e0be6e3847de355a6927df8e35", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -18,7 +18,6 @@ use syntax::ast;\n use syntax::attr;\n use syntax::symbol::Symbol;\n use rustc::hir;\n-use rustc_data_structures::sync::Lrc;\n use crate::hair::constant::{lit_to_const, LitToConstError};\n \n #[derive(Clone)]\n@@ -32,7 +31,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// Identity `InternalSubsts` for use with const-evaluation.\n     pub identity_substs: &'gcx InternalSubsts<'gcx>,\n \n-    pub region_scope_tree: Lrc<region::ScopeTree>,\n+    pub region_scope_tree: &'gcx region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'gcx>,\n \n     /// This is `Constness::Const` if we are compiling a `static`,"}, {"sha": "df3623ea6fbd16977325459bd278963259fd76e5", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -8,15 +8,14 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind, Expr};\n use rustc::middle::region;\n use rustc::ty::{self, Ty};\n-use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n use super::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n \n struct InteriorVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     types: FxHashMap<Ty<'tcx>, usize>,\n-    region_scope_tree: Lrc<region::ScopeTree>,\n+    region_scope_tree: &'gcx region::ScopeTree,\n     expr_count: usize,\n }\n "}, {"sha": "353b9ac6cc30c53e5dbe2643b9f1506c3ec6e990", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b4ad597a2eac24452e2e78f7b043805f2bb846/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b8b4ad597a2eac24452e2e78f7b043805f2bb846", "patch": "@@ -86,7 +86,6 @@ use rustc::ty::{self, Ty};\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::{self, PatKind};\n-use rustc_data_structures::sync::Lrc;\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -195,7 +194,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n pub struct RegionCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     pub fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n \n-    pub region_scope_tree: Lrc<region::ScopeTree>,\n+    pub region_scope_tree: &'gcx region::ScopeTree,\n \n     outlives_environment: OutlivesEnvironment<'tcx>,\n "}]}