{"sha": "23a1ebb3fca8dc77340dd94400255722260991e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYTFlYmIzZmNhOGRjNzczNDBkZDk0NDAwMjU1NzIyMjYwOTkxZTk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T13:58:51Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T13:58:51Z"}, "message": "Remove the `AllocId` from `ByRef` values\n\n`ByRef` const values have no identity beyond their value, we should not treat them as having identity. The `AllocId` often differed between equal constants, because of the way that the miri-engine evaluates constants.", "tree": {"sha": "af5d49fb4b1329f3b6acd2b9c715b613eacce5d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5d49fb4b1329f3b6acd2b9c715b613eacce5d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23a1ebb3fca8dc77340dd94400255722260991e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23a1ebb3fca8dc77340dd94400255722260991e9", "html_url": "https://github.com/rust-lang/rust/commit/23a1ebb3fca8dc77340dd94400255722260991e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23a1ebb3fca8dc77340dd94400255722260991e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e951d8ec0b9055c333485c0f68024b8371f4fa61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e951d8ec0b9055c333485c0f68024b8371f4fa61", "html_url": "https://github.com/rust-lang/rust/commit/e951d8ec0b9055c333485c0f68024b8371f4fa61"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "0f08c40bff1b25dfbac138bd4500378fe929412a", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -43,14 +43,13 @@ pub enum ConstValue<'tcx> {\n         end: usize,\n     },\n \n-    /// An allocation together with a pointer into the allocation.\n-    /// Invariant: the pointer's `AllocId` resolves to the allocation.\n+    /// An allocation together with an offset into the allocation.\n     /// The alignment exists to allow `const_field` to have `ByRef` access to nonprimitive fields\n     /// of `repr(packed)` structs. The alignment may be lower than the type of this constant.\n     /// This permits reads with lower alignment than what the type would normally require.\n     /// FIXME(RalfJ,oli-obk): The alignment checks are part of miri, but const eval doesn't really\n     /// need them. Disabling them may be too hard though.\n-    ByRef(Pointer, Align, &'tcx Allocation),\n+    ByRef(Size, Align, &'tcx Allocation),\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that."}, {"sha": "22c178b9cb04d281e52a92908f9f02fdf8badf65", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -1335,7 +1335,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n-            ConstValue::ByRef(ptr, align, alloc) => ConstValue::ByRef(ptr, align, alloc),\n+            ConstValue::ByRef(offset, align, alloc) => ConstValue::ByRef(offset, align, alloc),\n             ConstValue::Infer(ic) => ConstValue::Infer(ic.fold_with(folder)),\n             ConstValue::Param(p) => ConstValue::Param(p.fold_with(folder)),\n             ConstValue::Placeholder(p) => ConstValue::Placeholder(p),"}, {"sha": "3f10773f85b41e19813e845b22760fa1081fb679", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -71,7 +71,7 @@ pub fn codegen_static_initializer(\n     let static_ = cx.tcx.const_eval(param_env.and(cid))?;\n \n     let alloc = match static_.val {\n-        ConstValue::ByRef(ptr, align, alloc) if ptr.offset.bytes() == 0 && align == alloc.align => {\n+        ConstValue::ByRef(offset, align, alloc) if offset.bytes() == 0 && align == alloc.align => {\n             alloc\n         },\n         _ => bug!(\"static const eval returned {:#?}\", static_),"}, {"sha": "dc288c2f0f343b2bb795d8aa9c93d696244d63d9", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -109,8 +109,8 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n                 let b_llval = bx.const_usize((end - start) as u64);\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n-            ConstValue::ByRef(ptr, align, alloc) => {\n-                return bx.load_operand(bx.from_const_alloc(layout, align, alloc, ptr.offset));\n+            ConstValue::ByRef(offset, align, alloc) => {\n+                return bx.load_operand(bx.from_const_alloc(layout, align, alloc, offset));\n             },\n         };\n "}, {"sha": "4993f4559f777378dddf021634d7031f77876c98", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -424,8 +424,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n                     Ok(val) => match val.val {\n-                        mir::interpret::ConstValue::ByRef(ptr, align, alloc) => {\n-                            bx.cx().from_const_alloc(layout, align, alloc, ptr.offset)\n+                        mir::interpret::ConstValue::ByRef(offset, align, alloc) => {\n+                            bx.cx().from_const_alloc(layout, align, alloc, offset)\n                         }\n                         _ => bug!(\"promoteds should have an allocation: {:?}\", val),\n                     },"}, {"sha": "126f1a12f399cda6f23a7527110bdd89a578ceec", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -99,7 +99,7 @@ fn op_to_const<'tcx>(\n         Ok(mplace) => {\n             let ptr = mplace.ptr.to_ptr().unwrap();\n             let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-            ConstValue::ByRef(ptr, mplace.align, alloc)\n+            ConstValue::ByRef(ptr.offset, mplace.align, alloc)\n         },\n         // see comment on `let try_as_immediate` above\n         Err(ImmTy { imm: Immediate::Scalar(x), .. }) => match x {\n@@ -113,7 +113,7 @@ fn op_to_const<'tcx>(\n                 let mplace = op.to_mem_place();\n                 let ptr = mplace.ptr.to_ptr().unwrap();\n                 let alloc = ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n-                ConstValue::ByRef(ptr, mplace.align, alloc)\n+                ConstValue::ByRef(ptr.offset, mplace.align, alloc)\n             },\n         },\n         Err(ImmTy { imm: Immediate::ScalarPair(a, b), .. }) => {\n@@ -542,7 +542,7 @@ fn validate_and_turn_into_const<'tcx>(\n             let ptr = mplace.ptr.to_ptr()?;\n             Ok(tcx.mk_const(ty::Const {\n                 val: ConstValue::ByRef(\n-                    ptr,\n+                    ptr.offset,\n                     mplace.align,\n                     ecx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n                 ),"}, {"sha": "6e3f8da4807a16faefe46654ac41811d391371d2", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -218,7 +218,7 @@ impl LiteralExpander<'tcx> {\n             (ConstValue::Scalar(Scalar::Ptr(p)), x, y) if x == y => {\n                 let alloc = self.tcx.alloc_map.lock().unwrap_memory(p.alloc_id);\n                 ConstValue::ByRef(\n-                    p,\n+                    p.offset,\n                     // FIXME(oli-obk): this should be the type's layout\n                     alloc.align,\n                     alloc,\n@@ -1436,9 +1436,10 @@ fn slice_pat_covered_by_const<'tcx>(\n     suffix: &[Pattern<'tcx>],\n ) -> Result<bool, ErrorReported> {\n     let data: &[u8] = match (const_val.val, &const_val.ty.sty) {\n-        (ConstValue::ByRef(ptr, _, alloc), ty::Array(t, n)) => {\n+        (ConstValue::ByRef(offset, _, alloc), ty::Array(t, n)) => {\n             assert_eq!(*t, tcx.types.u8);\n             let n = n.assert_usize(tcx).unwrap();\n+            let ptr = Pointer::new(AllocId(0), offset);\n             alloc.get_bytes(&tcx, ptr, Size::from_bytes(n)).unwrap()\n         },\n         (ConstValue::Slice { data, start, end }, ty::Slice(t)) => {\n@@ -1758,9 +1759,9 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n                     let (alloc, offset, n, ty) = match value.ty.sty {\n                         ty::Array(t, n) => {\n                             match value.val {\n-                                ConstValue::ByRef(ptr, _, alloc) => (\n+                                ConstValue::ByRef(offset, _, alloc) => (\n                                     alloc,\n-                                    ptr.offset,\n+                                    offset,\n                                     n.unwrap_usize(cx.tcx),\n                                     t,\n                                 ),"}, {"sha": "96e9a416a72c72a0e778004d5eca07f3d74fa3d1", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -538,10 +538,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n             self.layout_of(self.monomorphize(val.ty)?)\n         })?;\n         let op = match val.val {\n-            ConstValue::ByRef(ptr, align, _alloc) => {\n+            ConstValue::ByRef(offset, align, alloc) => {\n+                let id = self.tcx.alloc_map.lock().create_memory_alloc(alloc);\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n                 // where none should happen.\n-                let ptr = self.tag_static_base_pointer(ptr);\n+                let ptr = self.tag_static_base_pointer(Pointer::new(id, offset));\n                 Operand::Indirect(MemPlace::from_ptr(ptr, align))\n             },\n             ConstValue::Scalar(x) =>"}, {"sha": "06b2957ac62c9778512404b61cc2680332627abb", "filename": "src/test/incremental/simd_intrinsic_ice.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Ftest%2Fincremental%2Fsimd_intrinsic_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23a1ebb3fca8dc77340dd94400255722260991e9/src%2Ftest%2Fincremental%2Fsimd_intrinsic_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsimd_intrinsic_ice.rs?ref=23a1ebb3fca8dc77340dd94400255722260991e9", "patch": "@@ -0,0 +1,17 @@\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+// revisions:rpass1 rpass2\n+\n+#[repr(simd)]\n+struct I32x2(i32, i32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+}\n+\n+fn main() {\n+    unsafe {\n+        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), [0, 0]);\n+        let _: I32x2 = simd_shuffle2(I32x2(1, 2), I32x2(3, 4), [0, 0]);\n+    }\n+}"}]}