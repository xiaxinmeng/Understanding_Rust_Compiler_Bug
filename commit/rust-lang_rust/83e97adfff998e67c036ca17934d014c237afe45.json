{"sha": "83e97adfff998e67c036ca17934d014c237afe45", "node_id": "C_kwDOAAsO6NoAKDgzZTk3YWRmZmY5OThlNjdjMDM2Y2ExNzkzNGQwMTRjMjM3YWZlNDU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-21T14:15:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-21T14:15:30Z"}, "message": "Simplify", "tree": {"sha": "80717fdcb726977c2e798c093c699b52816f873e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80717fdcb726977c2e798c093c699b52816f873e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e97adfff998e67c036ca17934d014c237afe45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e97adfff998e67c036ca17934d014c237afe45", "html_url": "https://github.com/rust-lang/rust/commit/83e97adfff998e67c036ca17934d014c237afe45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e97adfff998e67c036ca17934d014c237afe45/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b36f12dba5413ca73bf351657fff2f52700e0c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b36f12dba5413ca73bf351657fff2f52700e0c0e", "html_url": "https://github.com/rust-lang/rust/commit/b36f12dba5413ca73bf351657fff2f52700e0c0e"}], "stats": {"total": 119, "additions": 9, "deletions": 110}, "files": [{"sha": "547e7546364e6a92881ec553c7cfda865a2e080d", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 8, "deletions": 105, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/83e97adfff998e67c036ca17934d014c237afe45/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e97adfff998e67c036ca17934d014c237afe45/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=83e97adfff998e67c036ca17934d014c237afe45", "patch": "@@ -3618,10 +3618,7 @@ impl AstNode for DynArgListOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            CALL_EXPR | METHOD_CALL_EXPR => Some(DynArgListOwner { syntax }),\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynArgListOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3703,74 +3700,7 @@ impl AstNode for DynAttrsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            MACRO_CALL\n-            | SOURCE_FILE\n-            | CONST\n-            | ENUM\n-            | EXTERN_BLOCK\n-            | EXTERN_CRATE\n-            | FN\n-            | IMPL\n-            | MACRO_RULES\n-            | MACRO_DEF\n-            | MODULE\n-            | STATIC\n-            | STRUCT\n-            | TRAIT\n-            | TYPE_ALIAS\n-            | UNION\n-            | USE\n-            | ITEM_LIST\n-            | BLOCK_EXPR\n-            | SELF_PARAM\n-            | PARAM\n-            | RECORD_FIELD\n-            | TUPLE_FIELD\n-            | VARIANT\n-            | ASSOC_ITEM_LIST\n-            | EXTERN_ITEM_LIST\n-            | CONST_PARAM\n-            | LIFETIME_PARAM\n-            | TYPE_PARAM\n-            | EXPR_STMT\n-            | LET_STMT\n-            | ARRAY_EXPR\n-            | AWAIT_EXPR\n-            | BIN_EXPR\n-            | BOX_EXPR\n-            | BREAK_EXPR\n-            | CALL_EXPR\n-            | CAST_EXPR\n-            | CLOSURE_EXPR\n-            | CONTINUE_EXPR\n-            | EFFECT_EXPR\n-            | FIELD_EXPR\n-            | FOR_EXPR\n-            | IF_EXPR\n-            | INDEX_EXPR\n-            | LITERAL\n-            | LOOP_EXPR\n-            | MATCH_EXPR\n-            | METHOD_CALL_EXPR\n-            | PAREN_EXPR\n-            | PATH_EXPR\n-            | PREFIX_EXPR\n-            | RANGE_EXPR\n-            | REF_EXPR\n-            | RETURN_EXPR\n-            | TRY_EXPR\n-            | TUPLE_EXPR\n-            | WHILE_EXPR\n-            | YIELD_EXPR\n-            | RECORD_EXPR_FIELD_LIST\n-            | RECORD_EXPR_FIELD\n-            | MATCH_ARM_LIST\n-            | MATCH_ARM\n-            | IDENT_PAT\n-            | RECORD_PAT_FIELD => Some(DynAttrsOwner { syntax }),\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynAttrsOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3788,12 +3718,7 @@ impl AstNode for DynGenericParamsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION => {\n-                Some(DynGenericParamsOwner { syntax })\n-            }\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynGenericParamsOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3811,10 +3736,7 @@ impl AstNode for DynLoopBodyOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            FOR_EXPR | LOOP_EXPR | WHILE_EXPR => Some(DynLoopBodyOwner { syntax }),\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynLoopBodyOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3832,10 +3754,7 @@ impl AstNode for DynModuleItemOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            MACRO_ITEMS | SOURCE_FILE | ITEM_LIST => Some(DynModuleItemOwner { syntax }),\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynModuleItemOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3855,12 +3774,7 @@ impl AstNode for DynNameOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            CONST | ENUM | FN | MACRO_RULES | MACRO_DEF | MODULE | STATIC | STRUCT | TRAIT\n-            | TYPE_ALIAS | UNION | RENAME | SELF_PARAM | RECORD_FIELD | VARIANT | CONST_PARAM\n-            | TYPE_PARAM | IDENT_PAT => Some(DynNameOwner { syntax }),\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynNameOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3878,12 +3792,7 @@ impl AstNode for DynTypeBoundsOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED => {\n-                Some(DynTypeBoundsOwner { syntax })\n-            }\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynTypeBoundsOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n@@ -3904,13 +3813,7 @@ impl AstNode for DynVisibilityOwner {\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        match syntax.kind() {\n-            CONST | ENUM | EXTERN_CRATE | FN | IMPL | MACRO_RULES | MACRO_DEF | MODULE | STATIC\n-            | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE | RECORD_FIELD | TUPLE_FIELD | VARIANT => {\n-                Some(DynVisibilityOwner { syntax })\n-            }\n-            _ => None,\n-        }\n+        Self::can_cast(syntax.kind()).then(|| DynVisibilityOwner { syntax })\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }"}, {"sha": "1a0377830be1f345e6f152e251579874186c7377", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83e97adfff998e67c036ca17934d014c237afe45/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e97adfff998e67c036ca17934d014c237afe45/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=83e97adfff998e67c036ca17934d014c237afe45", "patch": "@@ -250,11 +250,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                             }\n                         }\n                         fn cast(syntax: SyntaxNode) -> Option<Self> {\n-                            match syntax.kind() {\n-                                #(#kinds)|* => Some(#name { syntax }),\n-                                _ => None,\n-                            }\n-\n+                            Self::can_cast(syntax.kind()).then(|| #name { syntax })\n                         }\n                         fn syntax(&self) -> &SyntaxNode {\n                             &self.syntax"}]}