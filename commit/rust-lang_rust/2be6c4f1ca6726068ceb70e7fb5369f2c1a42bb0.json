{"sha": "2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTZjNGYxY2E2NzI2MDY4Y2ViNzBlN2ZiNTM2OWYyYzFhNDJiYjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-06T06:30:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-13T01:24:34Z"}, "message": "Write code for registering region obligations (but don't use it yet).", "tree": {"sha": "a7e0eb2c4abc6dcd09a584d988bf1e8a7ca29afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7e0eb2c4abc6dcd09a584d988bf1e8a7ca29afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "html_url": "https://github.com/rust-lang/rust/commit/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9409bd9ff87941fcdddb5af7cb3b22c0e7a29c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/9409bd9ff87941fcdddb5af7cb3b22c0e7a29c30", "html_url": "https://github.com/rust-lang/rust/commit/9409bd9ff87941fcdddb5af7cb3b22c0e7a29c30"}], "stats": {"total": 168, "additions": 122, "deletions": 46}, "files": [{"sha": "e2a57629d7eb9c39befcc1ef2f1cadf776958066", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -366,6 +366,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             infer::MatchExpressionArm(_, _) => \"match arms have incompatible types\",\n             infer::IfExpression(_) => \"if and else have incompatible types\",\n             infer::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n+            infer::EquatePredicate(_) => \"equality predicate not satisfied\",\n         };\n \n         self.tcx.sess.span_err(\n@@ -1523,6 +1524,9 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                     infer::IfExpressionWithNoElse(_) => {\n                         format!(\"if may be missing an else clause\")\n                     }\n+                    infer::EquatePredicate(_) => {\n+                        format!(\"equality where clause is satisfied\")\n+                    }\n                 };\n \n                 match self.values_str(&trace.values) {"}, {"sha": "3b62b96a3e9b1f34187ea56bb7fca0270c8981da", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -129,7 +129,10 @@ pub enum TypeOrigin {\n     IfExpression(Span),\n \n     // Computing common supertype of an if expression with no else counter-part\n-    IfExpressionWithNoElse(Span)\n+    IfExpressionWithNoElse(Span),\n+\n+    // `where a == b`\n+    EquatePredicate(Span),\n }\n \n impl Copy for TypeOrigin {}\n@@ -1017,7 +1020,8 @@ impl TypeOrigin {\n             RelateOutputImplTypes(span) => span,\n             MatchExpressionArm(match_span, _) => match_span,\n             IfExpression(span) => span,\n-            IfExpressionWithNoElse(span) => span\n+            IfExpressionWithNoElse(span) => span,\n+            EquatePredicate(span) => span,\n         }\n     }\n }\n@@ -1050,6 +1054,9 @@ impl<'tcx> Repr<'tcx> for TypeOrigin {\n             IfExpressionWithNoElse(a) => {\n                 format!(\"IfExpressionWithNoElse({})\", a.repr(tcx))\n             }\n+            EquatePredicate(a) => {\n+                format!(\"EquatePredicate({})\", a.repr(tcx))\n+            }\n         }\n     }\n }"}, {"sha": "28f92089ce9e04eb6184ec6ee0262af88ee2e07c", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -10,7 +10,7 @@\n \n use middle::mem_categorization::Typer;\n use middle::ty::{mod, Ty};\n-use middle::infer::{mod, InferCtxt};\n+use middle::infer::{mod, InferCtxt, ures};\n use std::collections::HashSet;\n use std::collections::hash_map::{Occupied, Vacant};\n use std::default::Default;\n@@ -20,6 +20,8 @@ use util::ppaux::Repr;\n use util::nodemap::NodeMap;\n \n use super::CodeAmbiguity;\n+use super::Obligation;\n+use super::ObligationCause;\n use super::TraitObligation;\n use super::FulfillmentError;\n use super::CodeSelectionError;\n@@ -82,7 +84,7 @@ pub struct FulfillmentContext<'tcx> {\n pub struct RegionObligation<'tcx> {\n     pub sub_region: ty::Region,\n     pub sup_type: Ty<'tcx>,\n-    pub origin: infer::SubregionOrigin<'tcx>,\n+    pub cause: ObligationCause<'tcx>,\n }\n \n impl<'tcx> FulfillmentContext<'tcx> {\n@@ -95,6 +97,32 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         }\n     }\n \n+    pub fn register_predicate<'a>(&mut self,\n+                                  infcx: &InferCtxt<'a,'tcx>,\n+                                  predicate: &Obligation<'tcx, ty::Predicate<'tcx>>)\n+                                  -> ures<'tcx>\n+    {\n+        match predicate.trait_ref {\n+            ty::Predicate::Trait(ref trait_ref) => {\n+                let trait_obligation = Obligation { cause: predicate.cause,\n+                                                    recursion_depth: predicate.recursion_depth,\n+                                                    trait_ref: (*trait_ref).clone() };\n+                Ok(self.register_obligation(infcx.tcx, trait_obligation))\n+            }\n+            ty::Predicate::Equate(a, b) => {\n+                let origin = infer::EquatePredicate(predicate.cause.span);\n+                infer::mk_eqty(infcx, false, origin, a, b) // `a == b` ==> ``\n+            }\n+            ty::Predicate::RegionOutlives(r_a, r_b) => {\n+                let origin = infer::RelateRegionParamBound(predicate.cause.span);\n+                Ok(infer::mk_subr(infcx, origin, r_b, r_a)) // `b : a` ==> `a <= b`\n+            }\n+            ty::Predicate::TypeOutlives(t_a, r_b) => {\n+                Ok(self.register_region_obligation(t_a, r_b, predicate.cause))\n+            }\n+        }\n+    }\n+\n     pub fn register_obligation(&mut self,\n                                tcx: &ty::ctxt<'tcx>,\n                                obligation: TraitObligation<'tcx>)\n@@ -109,10 +137,14 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     }\n \n     pub fn register_region_obligation(&mut self,\n-                                      body_id: ast::NodeId,\n-                                      region_obligation: RegionObligation<'tcx>)\n+                                      sup_type: Ty<'tcx>,\n+                                      sub_region: ty::Region,\n+                                      cause: ObligationCause<'tcx>)\n     {\n-        match self.region_obligations.entry(body_id) {\n+        let region_obligation = RegionObligation { sup_type: sup_type,\n+                                                   sub_region: sub_region,\n+                                                   cause: cause };\n+        match self.region_obligations.entry(cause.body_id) {\n             Vacant(entry) => { entry.set(vec![region_obligation]); },\n             Occupied(mut entry) => { entry.get_mut().push(region_obligation); },\n         }\n@@ -268,9 +300,8 @@ impl<'tcx> FulfillmentContext<'tcx> {\n \n impl<'tcx> Repr<'tcx> for RegionObligation<'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        format!(\"RegionObligation(sub_region={}, sup_type={}, origin={})\",\n+        format!(\"RegionObligation(sub_region={}, sup_type={})\",\n                 self.sub_region.repr(tcx),\n-                self.sup_type.repr(tcx),\n-                self.origin.repr(tcx))\n+                self.sup_type.repr(tcx))\n     }\n }"}, {"sha": "37da82891deb6c7c30fe7ad139109c318bde7e41", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -31,9 +31,10 @@ pub use self::select::SelectionCache;\n pub use self::select::{MethodMatchResult, MethodMatched, MethodAmbiguous, MethodDidNotMatch};\n pub use self::select::{MethodMatchedData}; // intentionally don't export variants\n pub use self::util::supertraits;\n-pub use self::util::transitive_bounds;\n pub use self::util::Supertraits;\n pub use self::util::search_trait_and_supertraits_from_bound;\n+pub use self::util::transitive_bounds;\n+pub use self::util::trait_ref_for_builtin_bound;\n \n mod coherence;\n mod fulfill;\n@@ -61,7 +62,7 @@ pub struct ObligationCause<'tcx> {\n     pub span: Span,\n \n     // the id of XXX\n-    pub scope_id: ast::NodeId,\n+    pub body_id: ast::NodeId,\n \n     pub code: ObligationCauseCode<'tcx>\n }\n@@ -307,8 +308,8 @@ impl<'tcx,O> Obligation<'tcx,O> {\n                      trait_ref: trait_ref }\n     }\n \n-    pub fn misc(span: Span, scope_id: ast::NodeId, trait_ref: O) -> Obligation<'tcx, O> {\n-        Obligation::new(ObligationCause::misc(span, scope_id), trait_ref)\n+    pub fn misc(span: Span, body_id: ast::NodeId, trait_ref: O) -> Obligation<'tcx, O> {\n+        Obligation::new(ObligationCause::misc(span, body_id), trait_ref)\n     }\n }\n \n@@ -320,18 +321,18 @@ impl<'tcx> Obligation<'tcx,Rc<ty::TraitRef<'tcx>>> {\n \n impl<'tcx> ObligationCause<'tcx> {\n     pub fn new(span: Span,\n-               scope_id: ast::NodeId,\n+               body_id: ast::NodeId,\n                code: ObligationCauseCode<'tcx>)\n                -> ObligationCause<'tcx> {\n-        ObligationCause { span: span, scope_id: scope_id, code: code }\n+        ObligationCause { span: span, body_id: body_id, code: code }\n     }\n \n-    pub fn misc(span: Span, scope_id: ast::NodeId) -> ObligationCause<'tcx> {\n-        ObligationCause { span: span, scope_id: scope_id, code: MiscObligation }\n+    pub fn misc(span: Span, body_id: ast::NodeId) -> ObligationCause<'tcx> {\n+        ObligationCause { span: span, body_id: body_id, code: MiscObligation }\n     }\n \n     pub fn dummy() -> ObligationCause<'tcx> {\n-        ObligationCause { span: DUMMY_SP, scope_id: 0, code: MiscObligation }\n+        ObligationCause { span: DUMMY_SP, body_id: 0, code: MiscObligation }\n     }\n }\n "}, {"sha": "360298feab79a669d9b199380693dc4391c72f73", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -81,7 +81,10 @@ impl<'cx, 'tcx> Supertraits<'cx, 'tcx> {\n             let bound_trait_ref = trait_ref_for_builtin_bound(self.tcx,\n                                                               builtin_bound,\n                                                               trait_ref.self_ty());\n-            bound_trait_ref.map(|trait_ref| trait_bounds.push(trait_ref));\n+            match bound_trait_ref {\n+                Ok(trait_ref) => { trait_bounds.push(trait_ref); }\n+                Err(ErrorReported) => { }\n+            }\n         }\n \n         // Only keep those bounds that we haven't already seen.  This\n@@ -240,18 +243,18 @@ pub fn trait_ref_for_builtin_bound<'tcx>(\n     tcx: &ty::ctxt<'tcx>,\n     builtin_bound: ty::BuiltinBound,\n     param_ty: Ty<'tcx>)\n-    -> Option<Rc<ty::TraitRef<'tcx>>>\n+    -> Result<Rc<ty::TraitRef<'tcx>>, ErrorReported>\n {\n     match tcx.lang_items.from_builtin_kind(builtin_bound) {\n         Ok(def_id) => {\n-            Some(Rc::new(ty::TraitRef {\n+            Ok(Rc::new(ty::TraitRef {\n                 def_id: def_id,\n                 substs: Substs::empty().with_self_ty(param_ty)\n             }))\n         }\n         Err(e) => {\n             tcx.sess.err(e.as_slice());\n-            None\n+            Err(ErrorReported)\n         }\n     }\n }\n@@ -264,15 +267,12 @@ pub fn obligation_for_builtin_bound<'tcx>(\n     param_ty: Ty<'tcx>)\n     -> Result<TraitObligation<'tcx>, ErrorReported>\n {\n-    let trait_ref = trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty);\n-    match trait_ref {\n-        Some(trait_ref) => Ok(Obligation {\n-                cause: cause,\n-                recursion_depth: recursion_depth,\n-                trait_ref: trait_ref\n-            }),\n-        None => Err(ErrorReported)\n-    }\n+    let trait_ref = try!(trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty));\n+    Ok(Obligation {\n+        cause: cause,\n+        recursion_depth: recursion_depth,\n+        trait_ref: trait_ref\n+    })\n }\n \n /// Starting from a caller obligation `caller_bound` (which has coordinates `space`/`i` in the list"}, {"sha": "cd5cade78db78ad8c7054f791569174e9750a7a4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -1729,8 +1729,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` outlives `'a`:\n-                let origin = infer::RelateObjectBound(span);\n-                self.register_region_obligation(origin, self_ty, ty_trait.bounds.region_bound);\n+                let cause = traits::ObligationCause { span: span,\n+                                                      body_id: self.body_id,\n+                                                      code: traits::ObjectCastObligation(self_ty) };\n+                self.register_region_obligation(self_ty, ty_trait.bounds.region_bound, cause);\n             }\n         }\n     }\n@@ -1951,15 +1953,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Registers an obligation for checking later, during regionck, that the type `ty` must\n     /// outlive the region `r`.\n     pub fn register_region_obligation(&self,\n-                                      origin: infer::SubregionOrigin<'tcx>,\n                                       ty: Ty<'tcx>,\n-                                      r: ty::Region)\n+                                      region: ty::Region,\n+                                      cause: traits::ObligationCause<'tcx>)\n     {\n         let mut fulfillment_cx = self.inh.fulfillment_cx.borrow_mut();\n-        let region_obligation = traits::RegionObligation { sub_region: r,\n-                                                           sup_type: ty,\n-                                                           origin: origin };\n-        fulfillment_cx.register_region_obligation(self.body_id, region_obligation);\n+        fulfillment_cx.register_region_obligation(ty, region, cause);\n     }\n \n     pub fn add_default_region_param_bounds(&self,\n@@ -1968,8 +1967,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     {\n         for &ty in substs.types.iter() {\n             let default_bound = ty::ReScope(CodeExtent::from_node_id(expr.id));\n-            let origin = infer::RelateDefaultParamBound(expr.span, ty);\n-            self.register_region_obligation(origin, ty, default_bound);\n+            let cause = traits::ObligationCause::new(expr.span, self.body_id,\n+                                                     traits::MiscObligation);\n+            self.register_region_obligation(ty, default_bound, cause);\n         }\n     }\n \n@@ -2061,8 +2061,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 param_bound.builtin_bounds,\n                 param_bound.trait_bounds.as_slice());\n         for &r in region_bounds.iter() {\n-            let origin = infer::RelateParamBound(span, ty);\n-            self.register_region_obligation(origin, ty, r);\n+            let cause = traits::ObligationCause::new(span, self.body_id, traits::MiscObligation);\n+            self.register_region_obligation(ty, r, cause);\n         }\n     }\n "}, {"sha": "328c1eafae5cd791d7a13e4659524f638aecd39a", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -358,8 +358,8 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n             debug!(\"visit_region_obligations: r_o={}\",\n                    r_o.repr(self.tcx()));\n             let sup_type = self.resolve_type(r_o.sup_type);\n-            type_must_outlive(self, r_o.origin.clone(),\n-                              sup_type, r_o.sub_region);\n+            let origin = infer::RelateRegionParamBound(r_o.cause.span);\n+            type_must_outlive(self, origin, sup_type, r_o.sub_region);\n         }\n     }\n "}, {"sha": "9cfb56fbf8cbc40ebe588cbfc26b48bc7138c2b4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2be6c4f1ca6726068ceb70e7fb5369f2c1a42bb0", "patch": "@@ -42,13 +42,15 @@ use middle::region;\n use middle::resolve_lifetime;\n use middle::subst;\n use middle::subst::{Substs};\n+use middle::traits;\n use middle::ty::{ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{Polytype};\n use middle::ty::{mod, Ty};\n use middle::ty_fold::TypeFolder;\n use middle::infer;\n use rscope::*;\n use {CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n+use util::common::ErrorReported;\n use util::nodemap::{FnvHashMap, FnvHashSet};\n use util::ppaux;\n use util::ppaux::{Repr,UserString};\n@@ -1806,6 +1808,10 @@ fn ty_generics<'tcx,AC>(this: &AC,\n         result.types.push(space, (*associated_type_param).clone());\n     }\n \n+    // Just for fun, also push the bounds from the type parameters\n+    // into the predicates list. This is currently kind of non-DRY.\n+    create_predicates(this.tcx(), &mut result, space);\n+\n     return result;\n \n     fn create_type_parameters_for_associated_types<'tcx, AC>(\n@@ -1892,6 +1898,33 @@ fn ty_generics<'tcx,AC>(this: &AC,\n             }\n         }\n     }\n+\n+    fn create_predicates<'tcx>(\n+        tcx: &ty::ctxt<'tcx>,\n+        result: &mut ty::Generics<'tcx>,\n+        space: subst::ParamSpace)\n+    {\n+        for (index, type_param_def) in result.types.get_slice(space).iter().enumerate() {\n+            let param_ty = ty::mk_param(tcx, space, index, type_param_def.def_id);\n+\n+            for builtin_bound in type_param_def.bounds.builtin_bounds.iter() {\n+                match traits::trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty) {\n+                    Ok(trait_ref) => {\n+                        result.predicates.push(space, ty::Predicate::Trait(trait_ref));\n+                    }\n+                    Err(ErrorReported) => { }\n+                }\n+            }\n+\n+            for &region_bound in type_param_def.bounds.region_bounds.iter() {\n+                result.predicates.push(space, ty::Predicate::TypeOutlives(param_ty, region_bound));\n+            }\n+\n+            for bound_trait_ref in type_param_def.bounds.trait_bounds.iter() {\n+                result.predicates.push(space, ty::Predicate::Trait((*bound_trait_ref).clone()));\n+            }\n+        }\n+    }\n }\n \n fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,"}]}