{"sha": "0442be8e1c5d64e694bf220cf42ee531293b321c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDJiZThlMWM1ZDY0ZTY5NGJmMjIwY2Y0MmVlNTMxMjkzYjMyMWM=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-12-15T21:34:06Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-12-19T06:26:53Z"}, "message": "Add PNaCl target info to the makefile target cfgs and initialize the PNaCl target\nmachine if available.", "tree": {"sha": "309c3054ceda3c8f82b2885ac2655967fb46ae68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/309c3054ceda3c8f82b2885ac2655967fb46ae68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0442be8e1c5d64e694bf220cf42ee531293b321c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0442be8e1c5d64e694bf220cf42ee531293b321c", "html_url": "https://github.com/rust-lang/rust/commit/0442be8e1c5d64e694bf220cf42ee531293b321c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0442be8e1c5d64e694bf220cf42ee531293b321c/comments", "author": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "html_url": "https://github.com/rust-lang/rust/commit/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe"}], "stats": {"total": 138, "additions": 110, "deletions": 28}, "files": [{"sha": "6e2d3060bc3c0d66d091cd3fc473322346e93a89", "filename": "configure", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0442be8e1c5d64e694bf220cf42ee531293b321c/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0442be8e1c5d64e694bf220cf42ee531293b321c/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0442be8e1c5d64e694bf220cf42ee531293b321c", "patch": "@@ -616,6 +616,7 @@ valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path (de\n valopt i686-linux-android-ndk \"\" \"i686-linux-android NDK standalone path\"\n valopt arm-linux-androideabi-ndk \"\" \"arm-linux-androideabi NDK standalone path\"\n valopt aarch64-linux-android-ndk \"\" \"aarch64-linux-android NDK standalone path\"\n+valopt nacl-cross-path  \"\" \"NaCl SDK path (Pepper Canary is recommended). Must be absolute!\"\n valopt release-channel \"dev\" \"the name of the release channel to build\"\n valopt musl-root \"/usr/local\" \"MUSL root installation directory\"\n \n@@ -1147,7 +1148,12 @@ do\n                 fi\n             done\n             ;;\n-\n+        *-unknown-nacl)\n+\t    if [ -z \"$CFG_NACL_CROSS_PATH\" ]\n+\t    then\n+\t\terr \"I need the NaCl SDK path! (use --nacl-cross-path)\"\n+\t    fi\n+\t    ;;\n         arm-apple-darwin)\n             if [ $CFG_OSTYPE != apple-darwin ]\n             then\n@@ -1749,6 +1755,7 @@ putvar CFG_DISABLE_MANAGE_SUBMODULES\n putvar CFG_AARCH64_LINUX_ANDROID_NDK\n putvar CFG_ARM_LINUX_ANDROIDEABI_NDK\n putvar CFG_I686_LINUX_ANDROID_NDK\n+putvar CFG_NACL_CROSS_PATH\n putvar CFG_MANDIR\n putvar CFG_USING_LIBCPP\n "}, {"sha": "a73367291746f5b7d84da643727fee49abf7cef3", "filename": "mk/cfg/le32-unknown-nacl.mk", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0442be8e1c5d64e694bf220cf42ee531293b321c/mk%2Fcfg%2Fle32-unknown-nacl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0442be8e1c5d64e694bf220cf42ee531293b321c/mk%2Fcfg%2Fle32-unknown-nacl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fle32-unknown-nacl.mk?ref=0442be8e1c5d64e694bf220cf42ee531293b321c", "patch": "@@ -0,0 +1,40 @@\n+# le32-unknown-nacl (portable, PNaCl)\n+ifneq ($(CFG_NACL_CROSS_PATH),)\n+\n+CC_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool cc)\n+CXX_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool c++)\n+CPP_le32-unknown-nacl=$(CXX_le32-unknown-nacl) -E\n+AR_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool ar)\n+\n+CFG_PNACL_TOOLCHAIN := $(abspath $(dir $(AR_le32-unknown-nacl)/../))\n+\n+# Note: pso's aren't supported by PNaCl.\n+CFG_LIB_NAME_le32-unknown-nacl=lib$(1).pso\n+CFG_STATIC_LIB_NAME_le32-unknown-nacl=lib$(1).a\n+CFG_LIB_GLOB_le32-unknown-nacl=lib$(1)-*.pso\n+CFG_LIB_DSYM_GLOB_le32-unknown-nacl=lib$(1)-*.dylib.dSYM\n+CFG_GCCISH_CFLAGS_le32-unknown-nacl := -Wall -Wno-unused-variable -Wno-unused-value $(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --cflags) -D_YUGA_LITTLE_ENDIAN=1 -D_YUGA_BIG_ENDIAN=0\n+CFG_GCCISH_CXXFLAGS_le32-unknown-nacl := -stdlib=libc++ $(CFG_GCCISH_CFLAGS_le32-unknown-nacl)\n+CFG_GCCISH_LINK_FLAGS_le32-unknown-nacl := -static -pthread -lm\n+CFG_GCCISH_DEF_FLAG_le32-unknown-nacl := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_le32-unknown-nacl := -Wl,-no-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_le32-unknown-nacl :=\n+CFG_DEF_SUFFIX_le32-unknown-nacl := .le32.nacl.def\n+CFG_INSTALL_NAME_le32-unknown-nacl =\n+CFG_EXE_SUFFIX_le32-unknown-nacl = .pexe\n+CFG_WINDOWSY_le32-unknown-nacl :=\n+CFG_UNIXY_le32-unknown-nacl := 1\n+CFG_NACLY_le32-unknown-nacl := 1\n+CFG_PATH_MUNGE_le32-unknown-nacl := true\n+CFG_LDPATH_le32-unknown-nacl :=\n+CFG_RUN_le32-unknown-nacl=$(2)\n+CFG_RUN_TARG_le32-unknown-nacl=$(call CFG_RUN_le32-unknown-nacl,,$(2))\n+RUSTC_FLAGS_le32-unknown-nacl:=\n+RUSTC_CROSS_FLAGS_le32-unknown-nacl=-L $(CFG_NACL_CROSS_PATH)/lib/pnacl/Release -L $(CFG_PNACL_TOOLCHAIN)/lib/clang/3.7.0/lib/le32-nacl -L $(CFG_PNACL_TOOLCHAIN)/le32-nacl/usr/lib -L $(CFG_PNACL_TOOLCHAIN)/le32-nacl/lib\n+CFG_GNU_TRIPLE_le32-unknown-nacl := le32-unknown-nacl\n+\n+# strdup isn't defined unless -std=gnu++11 is used :/\n+LLVM_FILTER_CXXFLAGS_le32-unknown-nacl := -std=c++11\n+LLVM_EXTRA_CXXFLAGS_le32-unknown-nacl := -std=gnu++11\n+\n+endif"}, {"sha": "110bf0408d63c1966df6d44edbaac2599b8733ca", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0442be8e1c5d64e694bf220cf42ee531293b321c/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0442be8e1c5d64e694bf220cf42ee531293b321c/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=0442be8e1c5d64e694bf220cf42ee531293b321c", "patch": "@@ -276,7 +276,7 @@ endif\n # LLVM macros\n ######################################################################\n \n-LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc\n+LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl\n LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n "}, {"sha": "50539f35b7461b2619c25fc2a4aa3eb2bc95057b", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 61, "deletions": 26, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/0442be8e1c5d64e694bf220cf42ee531293b321c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0442be8e1c5d64e694bf220cf42ee531293b321c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=0442be8e1c5d64e694bf220cf42ee531293b321c", "patch": "@@ -2011,32 +2011,6 @@ extern {\n     pub fn LLVMIsAAllocaInst(value_ref: ValueRef) -> ValueRef;\n     pub fn LLVMIsAConstantInt(value_ref: ValueRef) -> ValueRef;\n \n-    pub fn LLVMInitializeX86TargetInfo();\n-    pub fn LLVMInitializeX86Target();\n-    pub fn LLVMInitializeX86TargetMC();\n-    pub fn LLVMInitializeX86AsmPrinter();\n-    pub fn LLVMInitializeX86AsmParser();\n-    pub fn LLVMInitializeARMTargetInfo();\n-    pub fn LLVMInitializeARMTarget();\n-    pub fn LLVMInitializeARMTargetMC();\n-    pub fn LLVMInitializeARMAsmPrinter();\n-    pub fn LLVMInitializeARMAsmParser();\n-    pub fn LLVMInitializeAArch64TargetInfo();\n-    pub fn LLVMInitializeAArch64Target();\n-    pub fn LLVMInitializeAArch64TargetMC();\n-    pub fn LLVMInitializeAArch64AsmPrinter();\n-    pub fn LLVMInitializeAArch64AsmParser();\n-    pub fn LLVMInitializeMipsTargetInfo();\n-    pub fn LLVMInitializeMipsTarget();\n-    pub fn LLVMInitializeMipsTargetMC();\n-    pub fn LLVMInitializeMipsAsmPrinter();\n-    pub fn LLVMInitializeMipsAsmParser();\n-    pub fn LLVMInitializePowerPCTargetInfo();\n-    pub fn LLVMInitializePowerPCTarget();\n-    pub fn LLVMInitializePowerPCTargetMC();\n-    pub fn LLVMInitializePowerPCAsmPrinter();\n-    pub fn LLVMInitializePowerPCAsmParser();\n-\n     pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: *const c_char) -> bool;\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n@@ -2144,6 +2118,53 @@ extern {\n     pub fn LLVMRustGetModuleDataLayout(M: ModuleRef) -> TargetDataRef;\n }\n \n+#[cfg(have_component_x86)]\n+extern {\n+    pub fn LLVMInitializeX86TargetInfo();\n+    pub fn LLVMInitializeX86Target();\n+    pub fn LLVMInitializeX86TargetMC();\n+    pub fn LLVMInitializeX86AsmPrinter();\n+    pub fn LLVMInitializeX86AsmParser();\n+}\n+#[cfg(have_component_arm)]\n+extern {\n+    pub fn LLVMInitializeARMTargetInfo();\n+    pub fn LLVMInitializeARMTarget();\n+    pub fn LLVMInitializeARMTargetMC();\n+    pub fn LLVMInitializeARMAsmPrinter();\n+    pub fn LLVMInitializeARMAsmParser();\n+}\n+#[cfg(have_component_aarch64)]\n+extern {\n+    pub fn LLVMInitializeAArch64TargetInfo();\n+    pub fn LLVMInitializeAArch64Target();\n+    pub fn LLVMInitializeAArch64TargetMC();\n+    pub fn LLVMInitializeAArch64AsmPrinter();\n+    pub fn LLVMInitializeAArch64AsmParser();\n+}\n+#[cfg(have_component_mips)]\n+extern {\n+    pub fn LLVMInitializeMipsTargetInfo();\n+    pub fn LLVMInitializeMipsTarget();\n+    pub fn LLVMInitializeMipsTargetMC();\n+    pub fn LLVMInitializeMipsAsmPrinter();\n+    pub fn LLVMInitializeMipsAsmParser();\n+}\n+#[cfg(have_component_powerpc)]\n+extern {\n+    pub fn LLVMInitializePowerPCTargetInfo();\n+    pub fn LLVMInitializePowerPCTarget();\n+    pub fn LLVMInitializePowerPCTargetMC();\n+    pub fn LLVMInitializePowerPCAsmPrinter();\n+    pub fn LLVMInitializePowerPCAsmParser();\n+}\n+#[cfg(have_component_pnacl)]\n+extern {\n+    pub fn LLVMInitializePNaClTargetInfo();\n+    pub fn LLVMInitializePNaClTarget();\n+    pub fn LLVMInitializePNaClTargetMC();\n+}\n+\n // LLVM requires symbols from this library, but apparently they're not printed\n // during llvm-config?\n #[cfg(windows)]\n@@ -2357,6 +2378,20 @@ pub fn initialize_available_targets() {\n     init_target!(have_component_aarch64 AArch64);\n     init_target!(have_component_arm ARM);\n     init_target!(have_component_x86 X86);\n+\n+    // PNaCl doesn't provide some of the optional target components, so we\n+    // manually initialize it here.\n+    #[cfg(have_component_pnacl)]\n+    fn init_pnacl() {\n+        unsafe {\n+            LLVMInitializePNaClTargetInfo();\n+            LLVMInitializePNaClTarget();\n+            LLVMInitializePNaClTargetMC();\n+        }\n+    }\n+    #[cfg(not(have_component_pnacl))]\n+    fn init_pnacl() { }\n+    init_pnacl();\n }\n \n // The module containing the native LLVM dependencies, generated by the build system"}]}