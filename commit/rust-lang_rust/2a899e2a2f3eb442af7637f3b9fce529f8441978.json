{"sha": "2a899e2a2f3eb442af7637f3b9fce529f8441978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODk5ZTJhMmYzZWI0NDJhZjc2MzdmM2I5ZmNlNTI5Zjg0NDE5Nzg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-13T15:47:51Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-13T15:47:51Z"}, "message": "Make TraitCandidate generic.", "tree": {"sha": "c9a12c0990670a6602cc8f7195e73595db11e76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a12c0990670a6602cc8f7195e73595db11e76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a899e2a2f3eb442af7637f3b9fce529f8441978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a899e2a2f3eb442af7637f3b9fce529f8441978", "html_url": "https://github.com/rust-lang/rust/commit/2a899e2a2f3eb442af7637f3b9fce529f8441978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a899e2a2f3eb442af7637f3b9fce529f8441978/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4706c38e17349793b2713947f81cfa1fd1f75ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4706c38e17349793b2713947f81cfa1fd1f75ba3", "html_url": "https://github.com/rust-lang/rust/commit/4706c38e17349793b2713947f81cfa1fd1f75ba3"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "b2eb122bfeeade2e4916f9c8e9e7465b4940eb74", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2a899e2a2f3eb442af7637f3b9fce529f8441978", "patch": "@@ -1161,7 +1161,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         for (k, v) in resolutions.trait_map {\n             let hir_id = hir.node_to_hir_id(k);\n             let map = trait_map.entry(hir_id.owner).or_default();\n-            let v = v.into_iter().map(|tc| tc.node_to_hir_id(&hir.definitions())).collect();\n+            let v = v\n+                .into_iter()\n+                .map(|tc| tc.map_import_ids(|id| hir.definitions().node_to_hir_id(id)))\n+                .collect();\n             map.insert(hir_id.local_id, StableVec::new(v));\n         }\n "}, {"sha": "ad51c60ab017874a627720aca95c6796a5e60569", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2a899e2a2f3eb442af7637f3b9fce529f8441978", "patch": "@@ -35,7 +35,7 @@ use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::{Constness, GlobMap, Node};\n+use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n@@ -46,7 +46,6 @@ use rustc_target::abi::Align;\n use syntax::ast::{self, Ident, Name};\n use syntax::node_id::{NodeId, NodeMap, NodeSet};\n \n-use smallvec::SmallVec;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -123,28 +122,11 @@ mod sty;\n \n // Data types\n \n-#[derive(Clone, Debug)]\n-pub struct TraitCandidate {\n-    pub def_id: DefId,\n-    pub import_ids: SmallVec<[NodeId; 1]>,\n-}\n-\n-impl TraitCandidate {\n-    fn node_to_hir_id(self, definitions: &hir_map::Definitions) -> hir::TraitCandidate {\n-        let TraitCandidate { def_id, import_ids } = self;\n-        let import_ids =\n-            import_ids.into_iter().map(|node_id| definitions.node_to_hir_id(node_id)).collect();\n-        hir::TraitCandidate { def_id, import_ids }\n-    }\n-}\n-\n-pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n-\n pub struct ResolverOutputs {\n     pub definitions: hir_map::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub extern_crate_map: NodeMap<CrateNum>,\n-    pub trait_map: TraitMap,\n+    pub trait_map: TraitMap<NodeId>,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap<NodeId>,"}, {"sha": "80b379218a5d50d0fd79735a3d8bc65742c23de1", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=2a899e2a2f3eb442af7637f3b9fce529f8441978", "patch": "@@ -2608,13 +2608,24 @@ pub type CaptureModeMap = NodeMap<CaptureBy>;\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n #[derive(Clone, Debug)]\n-pub struct TraitCandidate {\n+pub struct TraitCandidate<ID = HirId> {\n     pub def_id: DefId,\n-    pub import_ids: SmallVec<[HirId; 1]>,\n+    pub import_ids: SmallVec<[ID; 1]>,\n+}\n+\n+impl<ID> TraitCandidate<ID> {\n+    pub fn map_import_ids<F, T>(self, f: F) -> TraitCandidate<T>\n+    where\n+        F: Fn(ID) -> T,\n+    {\n+        let TraitCandidate { def_id, import_ids } = self;\n+        let import_ids = import_ids.into_iter().map(f).collect();\n+        TraitCandidate { def_id, import_ids }\n+    }\n }\n \n // Trait method resolution\n-pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n+pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n \n // Map from the NodeId of a glob import to a list of items which are actually\n // imported."}, {"sha": "bcf558d1563edd66d2bb522e6c25d86378534d27", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=2a899e2a2f3eb442af7637f3b9fce529f8441978", "patch": "@@ -11,13 +11,13 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n-use rustc::ty::TraitCandidate;\n use rustc::{bug, lint, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::TraitCandidate;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n@@ -2078,7 +2078,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         mut ident: Ident,\n         ns: Namespace,\n-    ) -> Vec<TraitCandidate> {\n+    ) -> Vec<TraitCandidate<NodeId>> {\n         debug!(\"(getting traits containing item) looking for '{}'\", ident.name);\n \n         let mut found_traits = Vec::new();\n@@ -2123,7 +2123,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ident: Ident,\n         ns: Namespace,\n         module: Module<'a>,\n-        found_traits: &mut Vec<TraitCandidate>,\n+        found_traits: &mut Vec<TraitCandidate<NodeId>>,\n     ) {\n         assert!(ns == TypeNS || ns == ValueNS);\n         let mut traits = module.traits.borrow_mut();"}, {"sha": "4278bf867f305a4a1616b284d3ef95ce61eaec73", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a899e2a2f3eb442af7637f3b9fce529f8441978/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2a899e2a2f3eb442af7637f3b9fce529f8441978", "patch": "@@ -22,7 +22,7 @@ use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n-use rustc::ty::{self, DefIdTree, ResolverOutputs, TraitMap};\n+use rustc::ty::{self, DefIdTree, ResolverOutputs};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n@@ -32,8 +32,8 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::GlobMap;\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n+use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n@@ -865,7 +865,7 @@ pub struct Resolver<'a> {\n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: NodeMap<CrateNum>,\n     export_map: ExportMap<NodeId>,\n-    trait_map: TraitMap,\n+    trait_map: TraitMap<NodeId>,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items"}]}