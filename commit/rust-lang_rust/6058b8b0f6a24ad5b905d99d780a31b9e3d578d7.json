{"sha": "6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNThiOGIwZjZhMjRhZDViOTA1ZDk5ZDc4MGEzMWI5ZTNkNTc4ZDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T10:02:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-25T10:14:44Z"}, "message": "Flatten commands.ts", "tree": {"sha": "cb0ab7180b97dfdf8347c15d6e445628f7802367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0ab7180b97dfdf8347c15d6e445628f7802367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "html_url": "https://github.com/rust-lang/rust/commit/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021b3da6721df7eaad2eb87024d2b0da28d60ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/021b3da6721df7eaad2eb87024d2b0da28d60ade", "html_url": "https://github.com/rust-lang/rust/commit/021b3da6721df7eaad2eb87024d2b0da28d60ade"}], "stats": {"total": 212, "additions": 103, "deletions": 109}, "files": [{"sha": "4fdd167bd5f70bd0769807fa886d4c25612dea8d", "filename": "editors/code/src/ast_inspector.ts", "status": "renamed", "additions": 5, "deletions": 83, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fast_inspector.ts?ref=6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "patch": "@@ -1,93 +1,15 @@\n import * as vscode from 'vscode';\n-import * as ra from '../rust-analyzer-api';\n-\n-import { Ctx, Cmd, Disposable } from '../ctx';\n-import { isRustDocument, RustEditor, isRustEditor, sleep } from '../util';\n-\n-const AST_FILE_SCHEME = \"rust-analyzer\";\n-\n-// Opens the virtual file that will show the syntax tree\n-//\n-// The contents of the file come from the `TextDocumentContentProvider`\n-export function syntaxTree(ctx: Ctx): Cmd {\n-    const tdcp = new TextDocumentContentProvider(ctx);\n-\n-    void new AstInspector(ctx);\n-\n-    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(AST_FILE_SCHEME, tdcp));\n-    ctx.pushCleanup(vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n-        brackets: [[\"[\", \")\"]],\n-    }));\n-\n-    return async () => {\n-        const editor = vscode.window.activeTextEditor;\n-        const rangeEnabled = !!editor && !editor.selection.isEmpty;\n-\n-        const uri = rangeEnabled\n-            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n-            : tdcp.uri;\n-\n-        const document = await vscode.workspace.openTextDocument(uri);\n-\n-        tdcp.eventEmitter.fire(uri);\n-\n-        void await vscode.window.showTextDocument(document, {\n-            viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n-    };\n-}\n-\n-class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n-    readonly uri = vscode.Uri.parse('rust-analyzer://syntaxtree/tree.rast');\n-    readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-\n-    constructor(private readonly ctx: Ctx) {\n-        vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-        vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n-    }\n-\n-    private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n-        if (isRustDocument(event.document)) {\n-            // We need to order this after language server updates, but there's no API for that.\n-            // Hence, good old sleep().\n-            void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n-        }\n-    }\n-    private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n-        if (editor && isRustEditor(editor)) {\n-            this.eventEmitter.fire(this.uri);\n-        }\n-    }\n-\n-    provideTextDocumentContent(uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n-        const rustEditor = this.ctx.activeRustEditor;\n-        if (!rustEditor) return '';\n-\n-        // When the range based query is enabled we take the range of the selection\n-        const range = uri.query === 'range=true' && !rustEditor.selection.isEmpty\n-            ? this.ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n-            : null;\n-\n-        const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range, };\n-        return this.ctx.client.sendRequest(ra.syntaxTree, params, ct);\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}\n \n+import { Ctx, Disposable } from './ctx';\n+import { RustEditor, isRustEditor } from './util';\n \n // FIXME: consider implementing this via the Tree View API?\n // https://code.visualstudio.com/api/extension-guides/tree-view\n-class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, Disposable {\n+export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, Disposable {\n     private readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n         borderColor: new vscode.ThemeColor('rust_analyzer.syntaxTreeBorder'),\n         borderStyle: \"solid\",\n         borderWidth: \"2px\",\n-\n     });\n     private rustEditor: undefined | RustEditor;\n \n@@ -113,7 +35,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n     });\n \n     constructor(ctx: Ctx) {\n-        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: AST_FILE_SCHEME }, this));\n+        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: 'rust-analyzer' }, this));\n         ctx.pushCleanup(vscode.languages.registerDefinitionProvider({ language: \"rust\" }, this));\n         vscode.workspace.onDidCloseTextDocument(this.onDidCloseTextDocument, this, ctx.subscriptions);\n         vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n@@ -146,7 +68,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n     }\n \n     private findAstTextEditor(): undefined | vscode.TextEditor {\n-        return vscode.window.visibleTextEditors.find(it => it.document.uri.scheme === AST_FILE_SCHEME);\n+        return vscode.window.visibleTextEditors.find(it => it.document.uri.scheme === 'rust-analyzer');\n     }\n \n     private setRustEditor(newRustEditor: undefined | RustEditor) {", "previous_filename": "editors/code/src/commands/syntax_tree.ts"}, {"sha": "573af5aa580d4cae26208756d8242605747681c0", "filename": "editors/code/src/commands.ts", "status": "renamed", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "patch": "@@ -1,13 +1,16 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import * as ra from '../rust-analyzer-api';\n+import * as ra from './rust-analyzer-api';\n \n-import { Ctx, Cmd } from '../ctx';\n-import { applySnippetWorkspaceEdit } from '../snippets';\n+import { Ctx, Cmd } from './ctx';\n+import { applySnippetWorkspaceEdit } from './snippets';\n import { spawnSync } from 'child_process';\n+import { RunnableQuickPick, selectRunnable, createTask } from './run';\n+import { AstInspector } from './ast_inspector';\n+import { isRustDocument, sleep, isRustEditor } from './util';\n \n-export * from './syntax_tree';\n-export * from './runnables';\n+export * from './ast_inspector';\n+export * from './run';\n \n export function analyzerStatus(ctx: Ctx): Cmd {\n     const tdcp = new class implements vscode.TextDocumentContentProvider {\n@@ -194,6 +197,90 @@ export function toggleInlayHints(ctx: Ctx): Cmd {\n     };\n }\n \n+export function run(ctx: Ctx): Cmd {\n+    let prevRunnable: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const item = await selectRunnable(ctx, prevRunnable);\n+        if (!item) return;\n+\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n+    };\n+}\n+\n+// Opens the virtual file that will show the syntax tree\n+//\n+// The contents of the file come from the `TextDocumentContentProvider`\n+export function syntaxTree(ctx: Ctx): Cmd {\n+    const tdcp = new class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse('rust-analyzer://syntaxtree/tree.rast');\n+        readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+        constructor() {\n+            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n+            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+        }\n+\n+        private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n+            if (isRustDocument(event.document)) {\n+                // We need to order this after language server updates, but there's no API for that.\n+                // Hence, good old sleep().\n+                void sleep(10).then(() => this.eventEmitter.fire(this.uri));\n+            }\n+        }\n+        private onDidChangeActiveTextEditor(editor: vscode.TextEditor | undefined) {\n+            if (editor && isRustEditor(editor)) {\n+                this.eventEmitter.fire(this.uri);\n+            }\n+        }\n+\n+        provideTextDocumentContent(uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+            const rustEditor = ctx.activeRustEditor;\n+            if (!rustEditor) return '';\n+\n+            // When the range based query is enabled we take the range of the selection\n+            const range = uri.query === 'range=true' && !rustEditor.selection.isEmpty\n+                ? ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n+                : null;\n+\n+            const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range, };\n+            return ctx.client.sendRequest(ra.syntaxTree, params, ct);\n+        }\n+\n+        get onDidChange(): vscode.Event<vscode.Uri> {\n+            return this.eventEmitter.event;\n+        }\n+    };\n+\n+    void new AstInspector(ctx);\n+\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+    ctx.pushCleanup(vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n+        brackets: [[\"[\", \")\"]],\n+    }));\n+\n+    return async () => {\n+        const editor = vscode.window.activeTextEditor;\n+        const rangeEnabled = !!editor && !editor.selection.isEmpty;\n+\n+        const uri = rangeEnabled\n+            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n+            : tdcp.uri;\n+\n+        const document = await vscode.workspace.openTextDocument(uri);\n+\n+        tdcp.eventEmitter.fire(uri);\n+\n+        void await vscode.window.showTextDocument(document, {\n+            viewColumn: vscode.ViewColumn.Two,\n+            preserveFocus: true\n+        });\n+    };\n+}\n+\n+\n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`", "previous_filename": "editors/code/src/commands/index.ts"}, {"sha": "31ac81ee88d2ae056b6410bba0a89d9c79605e98", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "patch": "@@ -92,7 +92,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('runSingle', commands.runSingle);\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n-    ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n "}, {"sha": "8f0487d74a1ec99c5755b85d16e4295235753088", "filename": "editors/code/src/run.ts", "status": "renamed", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6058b8b0f6a24ad5b905d99d780a31b9e3d578d7/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=6058b8b0f6a24ad5b905d99d780a31b9e3d578d7", "patch": "@@ -1,13 +1,13 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import * as ra from '../rust-analyzer-api';\n+import * as ra from './rust-analyzer-api';\n \n-import { Ctx, Cmd } from '../ctx';\n-import { startDebugSession, getDebugConfiguration } from '../debug';\n+import { Ctx, Cmd } from './ctx';\n+import { startDebugSession, getDebugConfiguration } from './debug';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n-async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debuggeeOnly = false, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n+export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debuggeeOnly = false, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n     const editor = ctx.activeRustEditor;\n     const client = ctx.client;\n     if (!editor || !client) return;\n@@ -83,20 +83,6 @@ async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debugg\n     });\n }\n \n-export function run(ctx: Ctx): Cmd {\n-    let prevRunnable: RunnableQuickPick | undefined;\n-\n-    return async () => {\n-        const item = await selectRunnable(ctx, prevRunnable);\n-        if (!item) return;\n-\n-        item.detail = 'rerun';\n-        prevRunnable = item;\n-        const task = createTask(item.runnable);\n-        return await vscode.tasks.executeTask(task);\n-    };\n-}\n-\n export function runSingle(ctx: Ctx): Cmd {\n     return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n@@ -165,7 +151,7 @@ export function newDebugConfig(ctx: Ctx): Cmd {\n     };\n }\n \n-class RunnableQuickPick implements vscode.QuickPickItem {\n+export class RunnableQuickPick implements vscode.QuickPickItem {\n     public label: string;\n     public description?: string | undefined;\n     public detail?: string | undefined;\n@@ -184,7 +170,7 @@ interface CargoTaskDefinition extends vscode.TaskDefinition {\n     env?: { [key: string]: string };\n }\n \n-function createTask(spec: ra.Runnable): vscode.Task {\n+export function createTask(spec: ra.Runnable): vscode.Task {\n     const TASK_SOURCE = 'Rust';\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',", "previous_filename": "editors/code/src/commands/runnables.ts"}]}