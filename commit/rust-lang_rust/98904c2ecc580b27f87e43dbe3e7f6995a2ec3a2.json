{"sha": "98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTA0YzJlY2M1ODBiMjdmODdlNDNkYmUzZTdmNjk5NWEyZWMzYTI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-02-14T18:14:31Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-02-14T20:12:28Z"}, "message": "Normalizing associated types when checking borrows in drops.", "tree": {"sha": "8f4a32ec8fcded9f2fc27dd336528171724b595e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4a32ec8fcded9f2fc27dd336528171724b595e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlqEmCwACgkQAXYLT59T\n8VSlChAApzJwbocrNoZOYWiasM1Lx+izICumkeXo/LbuIyBGOT1hLKmPrePZK8Cn\nsWgq2xpr3+LuvobQONZDwK66vcEUeNsjq7VMBd+4qRM4aqac1ThV7q9AAvQHNIfb\nBNzCoNtlh0vJKTh3rwMXgoUkDdNQPJkrpBOz1tpB/pfIuWGpfkS+j4ecipfPg03E\n2M/L7/XvQsQtLpDYF67Jnm/QmnmJHFxDraWZ5meYarAim5vqf8bfZlZBZ6lz/sIy\n6mFVduyHmQyzB0wAmAIkVdf7u6uicURi31XvNgE+5miAGIq/DFEYODOLqqkZGivB\ng/+XCTZPD67AtzB2P8ZeWvGtfxm+z138Lgrn9HCO9jSHXM9EvdZAJNHiHwt1TEAg\nzAwQ7Uexsfx3Jc1beDd6yCcvLd3fo5QZEiBMzDh71H5F9P4TbpF3lXNEhB6HelSe\ncx2+DW9mWibmeCSiGTHBJoPzl6qYkPTTuYl59oYqXKcKrTH7izcg5V/NjgRNHBzo\nQ6BLrJwMCmXdH6ZcoXP/YngWA49i4Ug9x/rlHcG4+9MhxsR7ta7XSxoC6KIsMSX5\nw0iZbeEvOoLACH2w2PH0TnagkxBACRq6WVObZa2jjAnuD5XwYVTLGEWl8UhOxJnZ\nESXsl2cfizj10MJDWKo/qU4uOmQrwnxQHaYQYDrhtNOG8tMa6jU=\n=LUIu\n-----END PGP SIGNATURE-----", "payload": "tree 8f4a32ec8fcded9f2fc27dd336528171724b595e\nparent 552024a52eb17b2542e87f9fc97b7b643707d759\nauthor David Wood <david@davidtw.co> 1518632071 +0000\ncommitter David Wood <david@davidtw.co> 1518639148 +0000\n\nNormalizing associated types when checking borrows in drops.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "html_url": "https://github.com/rust-lang/rust/commit/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552024a52eb17b2542e87f9fc97b7b643707d759", "url": "https://api.github.com/repos/rust-lang/rust/commits/552024a52eb17b2542e87f9fc97b7b643707d759", "html_url": "https://github.com/rust-lang/rust/commit/552024a52eb17b2542e87f9fc97b7b643707d759"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "650f99828ae483592fc4b4fb9ab4f5158183be70", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "patch": "@@ -463,7 +463,20 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 target: _,\n                 unwind: _,\n             } => {\n-                self.visit_terminator_drop(loc, term, flow_state, drop_place, span);\n+                let gcx = self.tcx.global_tcx();\n+\n+                // Compute the type with accurate region information.\n+                let drop_place_ty = drop_place.ty(self.mir, self.tcx);\n+\n+                // Erase the regions.\n+                let drop_place_ty = self.tcx.erase_regions(&drop_place_ty).to_ty(self.tcx);\n+\n+                // \"Lift\" into the gcx -- once regions are erased, this type should be in the\n+                // global arenas; this \"lift\" operation basically just asserts that is true, but\n+                // that is useful later.\n+                let drop_place_ty = gcx.lift(&drop_place_ty).unwrap();\n+\n+                self.visit_terminator_drop(loc, term, flow_state, drop_place, drop_place_ty, span);\n             }\n             TerminatorKind::DropAndReplace {\n                 location: ref drop_place,\n@@ -723,10 +736,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         term: &Terminator<'tcx>,\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n         drop_place: &Place<'tcx>,\n+        erased_drop_place_ty: ty::Ty<'gcx>,\n         span: Span,\n     ) {\n-        let ty = drop_place.ty(self.mir, self.tcx).to_ty(self.tcx);\n-        match ty.sty {\n+        match erased_drop_place_ty.sty {\n             // When a struct is being dropped, we need to check\n             // whether it has a destructor, if it does, then we can\n             // call it, if it does not then we need to check the\n@@ -735,14 +748,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             // borrows of `x.foo` and not `x.bar`. See #47703.\n             ty::TyAdt(def, substs) if def.is_struct() && !def.has_dtor(self.tcx) => {\n                 for (index, field) in def.all_fields().enumerate() {\n-                    let place = drop_place.clone();\n-                    let place = place.field(Field::new(index), field.ty(self.tcx, substs));\n+                    let gcx = self.tcx.global_tcx();\n+                    let field_ty = field.ty(gcx, substs);\n+                    let field_ty = gcx.normalize_associated_type_in_env(&field_ty, self.param_env);\n+                    let place = drop_place.clone().field(Field::new(index), field_ty);\n \n                     self.visit_terminator_drop(\n                         loc,\n                         term,\n                         flow_state,\n                         &place,\n+                        field_ty,\n                         span,\n                     );\n                 }\n@@ -754,8 +770,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // \"needs drop\". If so, we assume that the destructor\n                 // may access any data it likes (i.e., a Deep Write).\n                 let gcx = self.tcx.global_tcx();\n-                let erased_ty = gcx.lift(&self.tcx.erase_regions(&ty)).unwrap();\n-                if erased_ty.needs_drop(gcx, self.param_env) {\n+                if erased_drop_place_ty.needs_drop(gcx, self.param_env) {\n                     self.access_place(\n                         ContextKind::Drop.new(loc),\n                         (drop_place, span),\n@@ -2144,7 +2159,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         while let Some(i) = elems_incoming.next() {\n             let borrowed = &data[i.borrow_index()];\n \n-            if self.places_conflict(&borrowed.borrowed_place, &place, access) {\n+            if self.places_conflict(&borrowed.borrowed_place, place, access) {\n                 debug!(\"each_borrow_involving_path: {:?} @ {:?} vs. {:?}/{:?}\",\n                        i, borrowed, place, access);\n                 let ctrl = op(self, i, borrowed);"}]}