{"sha": "ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "node_id": "C_kwDOAAsO6NoAKGJhODY2MDBjOTQ1MjUwOGEwYWIwNWNkNGJkYzlhZjRjOTZmN2Q0YmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T22:54:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T22:54:35Z"}, "message": "Auto merge of #109448 - ozkanonur:download-beta-compiler-toolchain, r=Mark-Simulacrum\n\nDownload beta compiler toolchain in bootstrap if it doesn't yet exist\n\nBlocker for #107812 and #99989\n\nSee: https://github.com/rust-lang/rust/pull/107812#discussion_r1143492202\n\nr? `@jyn514`", "tree": {"sha": "00620af61228afc14ae7477076860b6b3cb90648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00620af61228afc14ae7477076860b6b3cb90648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "html_url": "https://github.com/rust-lang/rust/commit/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a", "html_url": "https://github.com/rust-lang/rust/commit/23ee2af2f7669d521ad39ef8a506a4fa3d37ea5a"}, {"sha": "eeec73244d2ab68e23b17b13f1163b254e597718", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeec73244d2ab68e23b17b13f1163b254e597718", "html_url": "https://github.com/rust-lang/rust/commit/eeec73244d2ab68e23b17b13f1163b254e597718"}], "stats": {"total": 87, "additions": 70, "deletions": 17}, "files": [{"sha": "f038aceb34caab9a4ac8ea89e0405b44d63c507a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "patch": "@@ -227,25 +227,34 @@ pub struct Config {\n     pub reuse: Option<PathBuf>,\n     pub cargo_native_static: bool,\n     pub configure_args: Vec<String>,\n+    pub out: PathBuf,\n+    pub rust_info: channel::GitInfo,\n \n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n+\n     #[cfg(not(test))]\n     initial_rustfmt: RefCell<RustfmtState>,\n     #[cfg(test)]\n     pub initial_rustfmt: RefCell<RustfmtState>,\n-    pub out: PathBuf,\n-    pub rust_info: channel::GitInfo,\n }\n \n #[derive(Default, Deserialize)]\n #[cfg_attr(test, derive(Clone))]\n pub struct Stage0Metadata {\n+    pub compiler: CompilerMetadata,\n     pub config: Stage0Config,\n     pub checksums_sha256: HashMap<String, String>,\n     pub rustfmt: Option<RustfmtMetadata>,\n }\n+#[derive(Default, Deserialize)]\n+#[cfg_attr(test, derive(Clone))]\n+pub struct CompilerMetadata {\n+    pub date: String,\n+    pub version: String,\n+}\n+\n #[derive(Default, Deserialize)]\n #[cfg_attr(test, derive(Clone))]\n pub struct Stage0Config {\n@@ -1000,10 +1009,10 @@ impl Config {\n             config.out = crate::util::absolute(&config.out);\n         }\n \n-        config.initial_rustc = build\n-            .rustc\n-            .map(PathBuf::from)\n-            .unwrap_or_else(|| config.out.join(config.build.triple).join(\"stage0/bin/rustc\"));\n+        config.initial_rustc = build.rustc.map(PathBuf::from).unwrap_or_else(|| {\n+            config.download_beta_toolchain();\n+            config.out.join(config.build.triple).join(\"stage0/bin/rustc\")\n+        });\n         config.initial_cargo = build\n             .cargo\n             .map(PathBuf::from)"}, {"sha": "2425155658429617b24a4e4dd36400864306bf3a", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "patch": "@@ -367,26 +367,70 @@ impl Config {\n \n     pub(crate) fn download_ci_rustc(&self, commit: &str) {\n         self.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n+\n         let version = self.artifact_version_part(commit);\n+        // download-rustc doesn't need its own cargo, it can just use beta's. But it does need the\n+        // `rustc_private` crates for tools.\n+        let extra_components = [\"rustc-dev\"];\n+\n+        self.download_toolchain(\n+            &version,\n+            \"ci-rustc\",\n+            commit,\n+            &extra_components,\n+            Self::download_ci_component,\n+        );\n+    }\n+\n+    pub(crate) fn download_beta_toolchain(&self) {\n+        self.verbose(&format!(\"downloading stage0 beta artifacts\"));\n+\n+        let date = &self.stage0_metadata.compiler.date;\n+        let version = &self.stage0_metadata.compiler.version;\n+        let extra_components = [\"cargo\"];\n+\n+        let download_beta_component = |config: &Config, filename, prefix: &_, date: &_| {\n+            config.download_component(DownloadSource::Dist, filename, prefix, date, \"stage0\")\n+        };\n+\n+        self.download_toolchain(\n+            version,\n+            \"stage0\",\n+            date,\n+            &extra_components,\n+            download_beta_component,\n+        );\n+    }\n+\n+    fn download_toolchain(\n+        &self,\n+        // FIXME(ozkanonur) use CompilerMetadata instead of `version: &str`\n+        version: &str,\n+        sysroot: &str,\n+        stamp_key: &str,\n+        extra_components: &[&str],\n+        download_component: fn(&Config, String, &str, &str),\n+    ) {\n         let host = self.build.triple;\n-        let bin_root = self.out.join(host).join(\"ci-rustc\");\n+        let bin_root = self.out.join(host).join(sysroot);\n         let rustc_stamp = bin_root.join(\".rustc-stamp\");\n \n-        if !bin_root.join(\"bin\").join(\"rustc\").exists() || program_out_of_date(&rustc_stamp, commit)\n+        if !bin_root.join(\"bin\").join(exe(\"rustc\", self.build)).exists()\n+            || program_out_of_date(&rustc_stamp, stamp_key)\n         {\n             if bin_root.exists() {\n                 t!(fs::remove_dir_all(&bin_root));\n             }\n             let filename = format!(\"rust-std-{version}-{host}.tar.xz\");\n             let pattern = format!(\"rust-std-{host}\");\n-            self.download_ci_component(filename, &pattern, commit);\n+            download_component(self, filename, &pattern, stamp_key);\n             let filename = format!(\"rustc-{version}-{host}.tar.xz\");\n-            self.download_ci_component(filename, \"rustc\", commit);\n-            // download-rustc doesn't need its own cargo, it can just use beta's.\n-            let filename = format!(\"rustc-dev-{version}-{host}.tar.xz\");\n-            self.download_ci_component(filename, \"rustc-dev\", commit);\n-            let filename = format!(\"rust-src-{version}.tar.xz\");\n-            self.download_ci_component(filename, \"rust-src\", commit);\n+            download_component(self, filename, \"rustc\", stamp_key);\n+\n+            for component in extra_components {\n+                let filename = format!(\"{component}-{version}-{host}.tar.xz\");\n+                download_component(self, filename, component, stamp_key);\n+            }\n \n             if self.should_fix_bins_and_dylibs() {\n                 self.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n@@ -403,7 +447,7 @@ impl Config {\n                 }\n             }\n \n-            t!(fs::write(rustc_stamp, commit));\n+            t!(fs::write(rustc_stamp, stamp_key));\n         }\n     }\n "}, {"sha": "058ff429e80f1222196d61f924cec18bbd0bebe1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ba86600c9452508a0ab05cd4bdc9af4c96f7d4ba", "patch": "@@ -1133,7 +1133,7 @@ impl Step for Tidy {\n         if builder.config.channel == \"dev\" || builder.config.channel == \"nightly\" {\n             builder.info(\"fmt check\");\n             if builder.initial_rustfmt().is_none() {\n-                let inferred_rustfmt_dir = builder.config.initial_rustc.parent().unwrap();\n+                let inferred_rustfmt_dir = builder.initial_rustc.parent().unwrap();\n                 eprintln!(\n                     \"\\\n error: no `rustfmt` binary found in {PATH}"}]}