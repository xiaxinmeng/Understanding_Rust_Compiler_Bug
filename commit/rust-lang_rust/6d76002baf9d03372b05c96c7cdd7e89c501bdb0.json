{"sha": "6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNzYwMDJiYWY5ZDAzMzcyYjA1Yzk2YzdjZGQ3ZTg5YzUwMWJkYjA=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-19T16:50:43Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-22T11:20:29Z"}, "message": "Make mir borrowck's use of opaque types independent of the typeck query's result", "tree": {"sha": "4d15995244a33d5ccc000d4b1f6132599a3e4635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d15995244a33d5ccc000d4b1f6132599a3e4635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "html_url": "https://github.com/rust-lang/rust/commit/6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d693a98f4ef508299c7c6550d9fb79d81f818d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/d693a98f4ef508299c7c6550d9fb79d81f818d84", "html_url": "https://github.com/rust-lang/rust/commit/d693a98f4ef508299c7c6550d9fb79d81f818d84"}], "stats": {"total": 423, "additions": 162, "deletions": 261}, "files": [{"sha": "e3fa587985df0f12afecc8282e99450e2553b763", "filename": "compiler/rustc_data_structures/src/vec_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_map.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -70,6 +70,10 @@ where\n     pub fn iter_mut(&mut self) -> impl Iterator<Item = (&K, &mut V)> {\n         self.into_iter()\n     }\n+\n+    pub fn retain(&mut self, f: impl Fn(&(K, V)) -> bool) {\n+        self.0.retain(f)\n+    }\n }\n \n impl<K, V> Default for VecMap<K, V> {"}, {"sha": "de327047a872ae66b13462b18e6bb68a16ec9ed0", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 62, "deletions": 87, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef, UserSubsts};\n+use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueTypeKey, RegionVid,\n     ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex, WithConstness,\n@@ -60,7 +60,6 @@ use crate::borrow_check::{\n         LivenessValues, PlaceholderIndex, PlaceholderIndices, RegionValueElements,\n     },\n     region_infer::{ClosureRegionRequirementsExt, TypeTest},\n-    renumber,\n     type_check::free_region_relations::{CreateResult, UniversalRegionRelations},\n     universal_regions::{DefiningTy, UniversalRegions},\n     Upvar,\n@@ -180,7 +179,66 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);\n \n             translate_outlives_facts(&mut cx);\n-            cx.opaque_type_values\n+            let mut opaque_type_values = cx.opaque_type_values;\n+\n+            for (_, revealed_ty) in &mut opaque_type_values {\n+                // FIXME(oli-obk): Instead of looping, implement a visitor like\n+                // FullTypeResolver. We can't use FullTypeResolver here, as that will\n+                // resolve lifetimes lexically, which it can't because we didn't do old\n+                // borrowck stuff. We want to use MIR borrowck information instead.\n+\n+                while revealed_ty.has_infer_types_or_consts() {\n+                    let prev = *revealed_ty;\n+                    trace!(prev=?prev.kind());\n+                    let type_resolved = infcx.shallow_resolve(prev);\n+                    trace!(type_resolved=?type_resolved.kind());\n+                    if prev == type_resolved {\n+                        infcx.tcx.sess.delay_span_bug(\n+                            body.span,\n+                            &format!(\"could not resolve {:#?}\", type_resolved.kind()),\n+                        );\n+                        *revealed_ty = infcx.tcx.ty_error();\n+                        break;\n+                    }\n+                    *revealed_ty = type_resolved;\n+                }\n+            }\n+\n+            opaque_type_values.retain(|(opaque_type_key, resolved_ty)| {\n+                let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n+                    *def_id == opaque_type_key.def_id\n+                } else {\n+                    false\n+                };\n+\n+                if concrete_is_opaque {\n+                    // We're using an opaque `impl Trait` type without\n+                    // 'revealing' it. For example, code like this:\n+                    //\n+                    // type Foo = impl Debug;\n+                    // fn foo1() -> Foo { ... }\n+                    // fn foo2() -> Foo { foo1() }\n+                    //\n+                    // In `foo2`, we're not revealing the type of `Foo` - we're\n+                    // just treating it as the opaque type.\n+                    //\n+                    // When this occurs, we do *not* want to try to equate\n+                    // the concrete type with the underlying defining type\n+                    // of the opaque type - this will always fail, since\n+                    // the defining type of an opaque type is always\n+                    // some other type (e.g. not itself)\n+                    // Essentially, none of the normal obligations apply here -\n+                    // we're just passing around some unknown opaque type,\n+                    // without actually looking at the underlying type it\n+                    // gets 'revealed' into\n+                    debug!(\n+                        \"eq_opaque_type_and_type: non-defining use of {:?}\",\n+                        opaque_type_key.def_id,\n+                    );\n+                }\n+                !concrete_is_opaque\n+            });\n+            opaque_type_values\n         },\n     );\n \n@@ -1240,13 +1298,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n \n         let infcx = self.infcx;\n-        let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n         let mir_def_id = body.source.def_id().expect_local();\n \n-        // the \"concrete opaque types\" maps\n-        let concrete_opaque_types = &tcx.typeck(mir_def_id).concrete_opaque_types;\n         let mut opaque_type_values = VecMap::new();\n \n         debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", mir_def_id);\n@@ -1296,88 +1351,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             .eq(output_ty, revealed_ty)?,\n                     );\n \n-                    // For each opaque type `Foo<T>` inferred by this value, we want to equate\n-                    // the inference variable `?T` with the revealed type that was computed\n-                    // earlier by type check.\n                     for &(opaque_type_key, opaque_decl) in &opaque_type_map {\n-                        let resolved_ty = infcx.resolve_vars_if_possible(opaque_decl.concrete_ty);\n-                        let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n-                            *def_id == opaque_type_key.def_id\n-                        } else {\n-                            false\n-                        };\n-\n-                        // The revealed type computed by the earlier phase of type check.\n-                        // In our example, this would be `(U, u32)`. Note that this references\n-                        // the type parameter `U` from the definition of `Foo`.\n-                        let concrete_ty = match concrete_opaque_types\n-                            .get_by(|(key, _)| key.def_id == opaque_type_key.def_id)\n-                        {\n-                            None => {\n-                                if !concrete_is_opaque {\n-                                    tcx.sess.delay_span_bug(\n-                                        body.span,\n-                                        &format!(\n-                                            \"Non-defining use of {:?} with revealed type\",\n-                                            opaque_type_key.def_id,\n-                                        ),\n-                                    );\n-                                }\n-                                continue;\n-                            }\n-                            Some(concrete_ty) => concrete_ty,\n-                        };\n-                        debug!(\"concrete_ty = {:?}\", concrete_ty);\n-\n-                        // Apply the substitution, in this case `[U -> T]`, so that the\n-                        // concrete type becomes `Foo<(T, u32)>`\n-                        let subst_opaque_defn_ty = concrete_ty.subst(tcx, opaque_type_key.substs);\n-\n-                        // \"Renumber\" this, meaning that we replace all the regions\n-                        // with fresh inference variables. Not relevant to our example.\n-                        let renumbered_opaque_defn_ty =\n-                            renumber::renumber_regions(infcx, subst_opaque_defn_ty);\n-\n-                        debug!(\n-                            \"eq_opaque_type_and_type: concrete_ty={:?}={:?} opaque_defn_ty={:?}\",\n-                            concrete_ty, resolved_ty, renumbered_opaque_defn_ty,\n-                        );\n-\n-                        if !concrete_is_opaque {\n-                            // Equate the instantiated opaque type `opaque_decl.concrete_ty` (`?T`,\n-                            // in our example) with the renumbered version that we took from\n-                            // the type check results (`Foo<(T, u32)>`).\n-                            obligations.add(\n-                                infcx\n-                                    .at(&ObligationCause::dummy(), param_env)\n-                                    .eq(opaque_decl.concrete_ty, renumbered_opaque_defn_ty)?,\n-                            );\n-                            opaque_type_values.insert(opaque_type_key, renumbered_opaque_defn_ty);\n-                        } else {\n-                            // We're using an opaque `impl Trait` type without\n-                            // 'revealing' it. For example, code like this:\n-                            //\n-                            // type Foo = impl Debug;\n-                            // fn foo1() -> Foo { ... }\n-                            // fn foo2() -> Foo { foo1() }\n-                            //\n-                            // In `foo2`, we're not revealing the type of `Foo` - we're\n-                            // just treating it as the opaque type.\n-                            //\n-                            // When this occurs, we do *not* want to try to equate\n-                            // the concrete type with the underlying defining type\n-                            // of the opaque type - this will always fail, since\n-                            // the defining type of an opaque type is always\n-                            // some other type (e.g. not itself)\n-                            // Essentially, none of the normal obligations apply here -\n-                            // we're just passing around some unknown opaque type,\n-                            // without actually looking at the underlying type it\n-                            // gets 'revealed' into\n-                            debug!(\n-                                \"eq_opaque_type_and_type: non-defining use of {:?}\",\n-                                opaque_type_key.def_id,\n-                            );\n-                        }\n+                        opaque_type_values.insert(opaque_type_key, opaque_decl.concrete_ty);\n                     }\n \n                     debug!(\"eq_opaque_type_and_type: equated\");"}, {"sha": "7950dd3e99e29b11b14606560844698b27d16aa9", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -29,7 +29,6 @@ impl Bar for AssocNoCopy {\n impl Thing for AssocNoCopy {\n     type Out = Box<dyn Bar<Assoc: Copy>>;\n     //~^ ERROR the trait bound `String: Copy` is not satisfied\n-    //~| ERROR the trait bound `String: Copy` is not satisfied\n \n     fn func() -> Self::Out {\n         Box::new(AssocNoCopy)"}, {"sha": "0f1d35be0eb7a19c970be8f52f1de83e30c6dd7c", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -4,12 +4,6 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n    |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n \n-error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:30:28\n-   |\n-LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n-   |                            ^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "c2fbbf94fd66623678df17d392e4507993b2330e", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -12,7 +12,6 @@ fn main() {\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n     send(cycle2().clone());\n-    //~^ ERROR cannot be sent between threads safely\n \n     Rc::new(Cell::new(5))\n }"}, {"sha": "3eb141cc2bb55276341e1b22549c3aa553c0fb74", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -36,37 +36,37 @@ LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires computing type of `cycle2::{opaque#0}`...\n-  --> $DIR/auto-trait-leak.rs:20:16\n+  --> $DIR/auto-trait-leak.rs:19:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires borrow-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires unsafety-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires building MIR for `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires type-checking `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:20:1\n+  --> $DIR/auto-trait-leak.rs:19:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -84,22 +84,6 @@ LL | |     Rc::new(String::from(\"foo\"))\n LL | | }\n    | |_^\n \n-error[E0277]: `Rc<String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:14:5\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   |            ---- required by this bound in `send`\n-...\n-LL |     send(cycle2().clone());\n-   |     ^^^^ `Rc<String>` cannot be sent between threads safely\n-...\n-LL | fn cycle2() -> impl Clone {\n-   |                ---------- within this `impl Clone`\n-   |\n-   = help: within `impl Clone`, the trait `Send` is not implemented for `Rc<String>`\n-   = note: required because it appears within the type `impl Clone`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0391.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "90a753b5a6de16d58995cd5f7433fff64ab5d17a", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.full_tait.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -36,16 +36,7 @@ LL | type WrongGeneric<T> = impl 'static;\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "e50282201074ecb98c291816f2adac9d038e3d40", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.min_tait.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -27,16 +27,7 @@ LL | type WrongGeneric<T> = impl 'static;\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:12:24\n-   |\n-LL | type WrongGeneric<T> = impl 'static;\n-   |                        ^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-   = note: ...so that the type `T` will meet its required lifetime bounds\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0308, E0310.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "9f647d9e737fecbdb14fcf2a99fcaec1761e0e2a", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -11,7 +11,6 @@ fn main() {\n \n type WrongGeneric<T> = impl 'static;\n //~^ ERROR the parameter type `T` may not live long enough\n-//~| ERROR the parameter type `T` may not live long enough\n //~| ERROR: at least one trait must be specified\n \n fn wrong_generic<T>(t: T) -> WrongGeneric<T> {"}, {"sha": "61e8da91bbaa98d26c237bfd75488ec993c5297a", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.full_tait.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -16,52 +16,5 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 5 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "f65e91e52c7132b90589e3c7e19b9cbefc222f4c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.min_tait.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -7,52 +7,5 @@ LL |     type Bar = impl Baz<Self, Self>;\n    = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected type `for<'r> Fn<(&'r X,)>`\n-              found type `Fn<(&'<empty> X,)>`\n-note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/issue-57611-trait-alias.rs:28:9\n-   |\n-LL |         |x| x\n-   |         ^^^^^\n-\n-error: implementation of `FnOnce` is not general enough\n-  --> $DIR/issue-57611-trait-alias.rs:20:16\n-   |\n-LL |     type Bar = impl Baz<Self, Self>;\n-   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n-   |\n-   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n-   = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "508ecdd88a482b4c2a7cb569228199459368ce6c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -19,10 +19,6 @@ struct X;\n impl Foo for X {\n     type Bar = impl Baz<Self, Self>;\n     //~^ ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR mismatched types\n-    //~| ERROR mismatched types\n \n     fn bar(&self) -> Self::Bar {\n         |x| x"}, {"sha": "cee5e5a01cc2a5aefc6fb6df8065ac87865bc863", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -9,7 +9,6 @@ trait Bug {\n impl Bug for &() {\n     type Item = impl Bug; //~ ERROR `impl Trait` in type aliases is unstable\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n-    //~^^ ERROR the trait bound `(): Bug` is not satisfied\n \n     const FUN: fn() -> Self::Item = || ();\n     //~^ ERROR type alias impl trait is not permitted here"}, {"sha": "a9df74689df295b76bb0c60c79771bf18817c75f", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -8,7 +8,7 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60371.rs:14:40\n+  --> $DIR/issue-60371.rs:13:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n    |                                        ^\n@@ -25,16 +25,7 @@ LL |     type Item = impl Bug;\n    = help: the following implementations were found:\n              <&() as Bug>\n \n-error[E0277]: the trait bound `(): Bug` is not satisfied\n-  --> $DIR/issue-60371.rs:10:17\n-   |\n-LL |     type Item = impl Bug;\n-   |                 ^^^^^^^^ the trait `Bug` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <&() as Bug>\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "4b0f2afee54845a29c1c8224bc2c2ea452c48be2", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -0,0 +1,19 @@\n+#![feature(member_constraints)]\n+#![feature(type_alias_impl_trait)]\n+//~^ WARN incomplete\n+\n+pub trait A {\n+    type B;\n+    fn f(&self) -> Self::B;\n+}\n+impl<'a, 'b> A for () {\n+    //~^ ERROR the lifetime parameter `'a` is not constrained\n+    //~| ERROR the lifetime parameter `'b` is not constrained\n+    type B = impl core::fmt::Debug;\n+    //~^ ERROR is unstable\n+\n+\n+    fn f(&self) -> Self::B {}\n+}\n+\n+fn main() {}"}, {"sha": "4506a6e23d5c0c3f57e117f92b04f9a4cda9c8f7", "filename": "src/test/ui/type-alias-impl-trait/issue-74761-2.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761-2.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -0,0 +1,34 @@\n+error[E0658]: `impl Trait` in type aliases is unstable\n+  --> $DIR/issue-74761-2.rs:12:14\n+   |\n+LL |     type B = impl core::fmt::Debug;\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n+\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74761-2.rs:2:12\n+   |\n+LL | #![feature(type_alias_impl_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761-2.rs:9:6\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74761-2.rs:9:10\n+   |\n+LL | impl<'a, 'b> A for () {\n+   |          ^^ unconstrained lifetime parameter\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0207, E0658.\n+For more information about an error, try `rustc --explain E0207`."}, {"sha": "11756017ad846538f7dbdc74ec5760573655d71d", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -5,9 +5,9 @@\n #![feature(min_type_alias_impl_trait)]\n \n type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n-//~^ ERROR could not find defining uses\n \n fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+    //~^ ERROR concrete type differs from previous defining opaque type\n     (a.clone(), a)\n }\n "}, {"sha": "52b0462de988c28d21c987efc822a0adbae587eb", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn2.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn2.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -1,8 +1,14 @@\n-error: could not find defining uses\n-  --> $DIR/multiple-def-uses-in-one-fn2.rs:7:52\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:9:1\n    |\n-LL | type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n-   |                                                    ^^^^^^^^^^^^^\n+LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A`, got `B`\n+   |\n+note: previous use here\n+  --> $DIR/multiple-def-uses-in-one-fn2.rs:9:1\n+   |\n+LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5f25365666c7f9d5b78a1d6899f3840dc5beafb6", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.rs?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -11,6 +11,7 @@ fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>)\n }\n \n fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+    //~^ ERROR concrete type differs from previous defining opaque type\n     (a, b)\n     //~^ ERROR mismatched types\n }"}, {"sha": "3d943b77af57da8a7586a1d5a5ba97514ae8886c", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d76002baf9d03372b05c96c7cdd7e89c501bdb0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr?ref=6d76002baf9d03372b05c96c7cdd7e89c501bdb0", "patch": "@@ -1,10 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/multiple-def-uses-in-one-fn3.rs:14:9\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:15:9\n    |\n LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n    |      -                    - found type parameter\n    |      |\n    |      expected type parameter\n+LL |\n LL |     (a, b)\n    |         ^ expected type parameter `A`, found type parameter `B`\n    |\n@@ -13,6 +14,18 @@ LL |     (a, b)\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error: aborting due to previous error\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:13:1\n+   |\n+LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A`, got `[type error]`\n+   |\n+note: previous use here\n+  --> $DIR/multiple-def-uses-in-one-fn3.rs:9:1\n+   |\n+LL | fn f<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<B, A>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}