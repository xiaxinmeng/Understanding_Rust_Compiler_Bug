{"sha": "051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "node_id": "C_kwDOAAsO6NoAKDA1MWU5OGI3YmY3YTJhYjA5NTUxNmE5YjM5MTJkNjEyMGI1YjhjOTE", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-25T13:40:00Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-25T13:40:00Z"}, "message": "avoid `&str`/`Symbol` to `String` conversions", "tree": {"sha": "23b1ed311fc131a40bc4fddb82644af18b67a1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23b1ed311fc131a40bc4fddb82644af18b67a1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "html_url": "https://github.com/rust-lang/rust/commit/051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1a5e72f4b3bdb749e6df4f770c44e4f7973963", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1a5e72f4b3bdb749e6df4f770c44e4f7973963", "html_url": "https://github.com/rust-lang/rust/commit/bf1a5e72f4b3bdb749e6df4f770c44e4f7973963"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "1d66153734c782f36d0217ecf35e29615ff5379f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "patch": "@@ -850,13 +850,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             debug!(\"trait spans found: {:?}\", traits);\n             for span in &traits {\n                 let mut multi_span: MultiSpan = vec![*span].into();\n-                multi_span.push_span_label(\n-                    *span,\n-                    \"this has an implicit `'static` lifetime requirement\".to_string(),\n-                );\n+                multi_span\n+                    .push_span_label(*span, \"this has an implicit `'static` lifetime requirement\");\n                 multi_span.push_span_label(\n                     ident.span,\n-                    \"calling this method introduces the `impl`'s 'static` requirement\".to_string(),\n+                    \"calling this method introduces the `impl`'s 'static` requirement\",\n                 );\n                 err.span_note(multi_span, \"the used `impl` has a `'static` requirement\");\n                 err.span_suggestion_verbose("}, {"sha": "3435f127c72e2420306ef0895b5cdf9dbd7ee30a", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "patch": "@@ -951,7 +951,7 @@ fn adt_defined_here<'p, 'tcx>(\n         let mut span: MultiSpan =\n             if spans.is_empty() { def_span.into() } else { spans.clone().into() };\n \n-        span.push_span_label(def_span, String::new());\n+        span.push_span_label(def_span, \"\");\n         for pat in spans {\n             span.push_span_label(pat, \"not covered\");\n         }"}, {"sha": "8a655cbf3845ad68a182ec1578b86f1e4a48cd1c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "patch": "@@ -565,8 +565,7 @@ impl<'a> Resolver<'a> {\n                     } else if let Some(sp) = sm.generate_fn_name_span(span) {\n                         err.span_label(\n                             sp,\n-                            \"try adding a local generic parameter in this method instead\"\n-                                .to_string(),\n+                            \"try adding a local generic parameter in this method instead\",\n                         );\n                     } else {\n                         err.help(\"try using a local generic parameter instead\");"}, {"sha": "99a8101dc96ba3b60239fc167345fed08b70ab67", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty;\n use rustc_session::parse::feature_err;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::{Span, Symbol, DUMMY_SP};\n \n use std::collections::BTreeSet;\n \n@@ -17,7 +17,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// the type parameter's name as a placeholder.\n     pub(crate) fn complain_about_missing_type_params(\n         &self,\n-        missing_type_params: Vec<String>,\n+        missing_type_params: Vec<Symbol>,\n         def_id: DefId,\n         span: Span,\n         empty_generic_args: bool,"}, {"sha": "eacc9df8da7980efb872c82c7a6af20a2fe10ad2", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "patch": "@@ -382,7 +382,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             def_id: DefId,\n             generic_args: &'a GenericArgs<'a>,\n             span: Span,\n-            missing_type_params: Vec<String>,\n+            missing_type_params: Vec<Symbol>,\n             inferred_params: Vec<Span>,\n             infer_args: bool,\n             is_object: bool,\n@@ -514,7 +514,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             // defaults. This will lead to an ICE if we are not\n                             // careful!\n                             if self.default_needs_object_self(param) {\n-                                self.missing_type_params.push(param.name.to_string());\n+                                self.missing_type_params.push(param.name);\n                                 tcx.ty_error().into()\n                             } else {\n                                 // This is a default type parameter."}, {"sha": "0438ac02ea91a75fed88aa5e83d42b617667afa2", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051e98b7bf7a2ab095516a9b3912d6120b5b8c91/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=051e98b7bf7a2ab095516a9b3912d6120b5b8c91", "patch": "@@ -244,7 +244,7 @@ pub struct UnconstrainedOpaqueType {\n pub struct MissingTypeParams {\n     pub span: Span,\n     pub def_span: Span,\n-    pub missing_type_params: Vec<String>,\n+    pub missing_type_params: Vec<Symbol>,\n     pub empty_generic_args: bool,\n }\n \n@@ -285,7 +285,15 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 err.span_suggestion(\n                     self.span,\n                     rustc_errors::fluent::typeck::suggestion,\n-                    format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n+                    format!(\n+                        \"{}<{}>\",\n+                        snippet,\n+                        self.missing_type_params\n+                            .iter()\n+                            .map(|n| n.to_string())\n+                            .collect::<Vec<_>>()\n+                            .join(\", \")\n+                    ),\n                     Applicability::HasPlaceholders,\n                 );\n                 suggested = true;"}]}