{"sha": "1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZDU4ZDRkZDZmYjQwZTA4MzNhMDk0Nzk5NzE3Y2MyYjE3ZmVmYzY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-14T04:48:51Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-14T04:48:51Z"}, "message": "rustllvm: Free TargetMachine in LLVMRustWriteOutputFile", "tree": {"sha": "18f56b43adfbf6267b185432dbdb21db600dbeed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f56b43adfbf6267b185432dbdb21db600dbeed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "html_url": "https://github.com/rust-lang/rust/commit/1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ad58d4dd6fb40e0833a094799717cc2b17fefc6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf41815b1bd9d9474307f0b7e1d553500a63ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf41815b1bd9d9474307f0b7e1d553500a63ecc", "html_url": "https://github.com/rust-lang/rust/commit/aaf41815b1bd9d9474307f0b7e1d553500a63ecc"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "2c50a6ccfa7325ffb9862db2ebbd838b5b25f372", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ad58d4dd6fb40e0833a094799717cc2b17fefc6/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ad58d4dd6fb40e0833a094799717cc2b17fefc6/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1ad58d4dd6fb40e0833a094799717cc2b17fefc6", "patch": "@@ -90,7 +90,7 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   std::string Err;\n   const Target *TheTarget = TargetRegistry::lookupTarget(triple, Err);\n   std::string FeaturesStr;\n-  TargetMachine &Target = *TheTarget->createTargetMachine(triple, FeaturesStr);\n+  TargetMachine *Target = TheTarget->createTargetMachine(triple, FeaturesStr);\n   bool NoVerify = false;\n   CodeGenOpt::Level OLvl = CodeGenOpt::Default;\n   PassManager *PM = unwrap<PassManager>(PMR);\n@@ -101,10 +101,11 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   TargetMachine::CodeGenFileType FileType2 =\n     static_cast<TargetMachine::CodeGenFileType>(FileType);\n \n-  bool foo = Target.addPassesToEmitFile(*PM, FOS, FileType2, OLvl, NoVerify);\n+  bool foo = Target->addPassesToEmitFile(*PM, FOS, FileType2, OLvl, NoVerify);\n   assert(!foo);\n   (void)foo;\n   PM->run(*unwrap(M));\n+  delete Target;\n }\n \n extern \"C\" LLVMModuleRef LLVMRustParseBitcode(LLVMMemoryBufferRef MemBuf) {"}]}