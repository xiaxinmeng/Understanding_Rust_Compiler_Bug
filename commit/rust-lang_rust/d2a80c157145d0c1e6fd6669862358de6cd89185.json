{"sha": "d2a80c157145d0c1e6fd6669862358de6cd89185", "node_id": "C_kwDOAAsO6NoAKGQyYTgwYzE1NzE0NWQwYzFlNmZkNjY2OTg2MjM1OGRlNmNkODkxODU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-06T00:19:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-06T00:19:55Z"}, "message": "Avoid noting cause code (which is usually misc, b/c codegen) for opaque type reveal overflow", "tree": {"sha": "d0d3735ccf14b3801d280362745d7d5aec820a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d3735ccf14b3801d280362745d7d5aec820a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a80c157145d0c1e6fd6669862358de6cd89185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a80c157145d0c1e6fd6669862358de6cd89185", "html_url": "https://github.com/rust-lang/rust/commit/d2a80c157145d0c1e6fd6669862358de6cd89185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a80c157145d0c1e6fd6669862358de6cd89185/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e940f845be13ff37d4ba28df5f40d74e5b0895a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e940f845be13ff37d4ba28df5f40d74e5b0895a0", "html_url": "https://github.com/rust-lang/rust/commit/e940f845be13ff37d4ba28df5f40d74e5b0895a0"}], "stats": {"total": 129, "additions": 80, "deletions": 49}, "files": [{"sha": "0102d268b42e18b51e558247d042f9120092fabd", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=d2a80c157145d0c1e6fd6669862358de6cd89185", "patch": "@@ -70,7 +70,7 @@ pub fn codegen_select_candidate<'tcx>(\n         // `rustc_ty_utils::resolve_associated_item` doesn't return `None` post-monomorphization.\n         for err in errors {\n             if let FulfillmentErrorCode::CodeCycle(cycle) = err.code {\n-                infcx.err_ctxt().report_overflow_error_cycle(&cycle);\n+                infcx.err_ctxt().report_overflow_obligation_cycle(&cycle);\n             }\n         }\n         return Err(CodegenObligationError::FulfillmentError);"}, {"sha": "80870d871d163240f4712caac35722e7ae4c2190", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 63, "deletions": 21, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d2a80c157145d0c1e6fd6669862358de6cd89185", "patch": "@@ -99,26 +99,36 @@ pub trait InferCtxtExt<'tcx> {\n }\n \n pub trait TypeErrCtxtExt<'tcx> {\n+    fn report_overflow_error<T>(\n+        &self,\n+        predicate: &T,\n+        span: Span,\n+        suggest_increasing_limit: bool,\n+        mutate: impl FnOnce(&mut Diagnostic),\n+    ) -> !\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n+\n     fn report_fulfillment_errors(\n         &self,\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n     ) -> ErrorGuaranteed;\n \n-    fn report_overflow_error<T>(\n+    fn report_overflow_obligation<T>(\n         &self,\n         obligation: &Obligation<'tcx, T>,\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display\n-            + TypeFoldable<'tcx>\n-            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n-        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n+        T: ToPredicate<'tcx> + Clone;\n \n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic);\n \n-    fn report_overflow_error_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> !;\n+    fn report_overflow_obligation_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> !;\n \n     /// The `root_obligation` parameter should be the `root_obligation` field\n     /// from a `FulfillmentError`. If no `FulfillmentError` is available,\n@@ -458,17 +468,20 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     /// occurrences in any case.\n     fn report_overflow_error<T>(\n         &self,\n-        obligation: &Obligation<'tcx, T>,\n+        predicate: &T,\n+        span: Span,\n         suggest_increasing_limit: bool,\n+        mutate: impl FnOnce(&mut Diagnostic),\n     ) -> !\n     where\n         T: fmt::Display\n             + TypeFoldable<'tcx>\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n-        let predicate = self.resolve_vars_if_possible(obligation.predicate.clone());\n+        let predicate = self.resolve_vars_if_possible(predicate.clone());\n         let mut pred_str = predicate.to_string();\n+\n         if pred_str.len() > 50 {\n             // We don't need to save the type to a file, we will be talking about this type already\n             // in a separate note when we explain the obligation, so it will be available that way.\n@@ -483,7 +496,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n-            obligation.cause.span,\n+            span,\n             E0275,\n             \"overflow evaluating the requirement `{}`\",\n             pred_str,\n@@ -493,20 +506,46 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             self.suggest_new_overflow_limit(&mut err);\n         }\n \n-        self.note_obligation_cause_code(\n-            &mut err,\n-            &obligation.predicate,\n-            obligation.param_env,\n-            obligation.cause.code(),\n-            &mut vec![],\n-            &mut Default::default(),\n-        );\n+        mutate(&mut err);\n \n         err.emit();\n         self.tcx.sess.abort_if_errors();\n         bug!();\n     }\n \n+    /// Reports that an overflow has occurred and halts compilation. We\n+    /// halt compilation unconditionally because it is important that\n+    /// overflows never be masked -- they basically represent computations\n+    /// whose result could not be truly determined and thus we can't say\n+    /// if the program type checks or not -- and they are unusual\n+    /// occurrences in any case.\n+    fn report_overflow_obligation<T>(\n+        &self,\n+        obligation: &Obligation<'tcx, T>,\n+        suggest_increasing_limit: bool,\n+    ) -> !\n+    where\n+        T: ToPredicate<'tcx> + Clone,\n+    {\n+        let predicate = obligation.predicate.clone().to_predicate(self.tcx);\n+        let predicate = self.resolve_vars_if_possible(predicate);\n+        self.report_overflow_error(\n+            &predicate,\n+            obligation.cause.span,\n+            suggest_increasing_limit,\n+            |err| {\n+                self.note_obligation_cause_code(\n+                    err,\n+                    &predicate,\n+                    obligation.param_env,\n+                    obligation.cause.code(),\n+                    &mut vec![],\n+                    &mut Default::default(),\n+                );\n+            },\n+        );\n+    }\n+\n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic) {\n         let suggested_limit = match self.tcx.recursion_limit() {\n             Limit(0) => Limit(2),\n@@ -521,19 +560,22 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     /// Reports that a cycle was detected which led to overflow and halts\n-    /// compilation. This is equivalent to `report_overflow_error` except\n+    /// compilation. This is equivalent to `report_overflow_obligation` except\n     /// that we can give a more helpful error message (and, in particular,\n     /// we do not suggest increasing the overflow limit, which is not\n     /// going to help).\n-    fn report_overflow_error_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> ! {\n+    fn report_overflow_obligation_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> ! {\n         let cycle = self.resolve_vars_if_possible(cycle.to_owned());\n         assert!(!cycle.is_empty());\n \n         debug!(?cycle, \"report_overflow_error_cycle\");\n \n         // The 'deepest' obligation is most likely to have a useful\n         // cause 'backtrace'\n-        self.report_overflow_error(cycle.iter().max_by_key(|p| p.recursion_depth).unwrap(), false);\n+        self.report_overflow_obligation(\n+            cycle.iter().max_by_key(|p| p.recursion_depth).unwrap(),\n+            false,\n+        );\n     }\n \n     fn report_selection_error(\n@@ -1554,7 +1596,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 diag.emit();\n             }\n             FulfillmentErrorCode::CodeCycle(ref cycle) => {\n-                self.report_overflow_error_cycle(cycle);\n+                self.report_overflow_obligation_cycle(cycle);\n             }\n         }\n     }"}, {"sha": "6ea54b625bbc0f8e533de1fabf88c6ad5f9dcdbc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d2a80c157145d0c1e6fd6669862358de6cd89185", "patch": "@@ -298,7 +298,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         seen_requirements: &mut FxHashSet<DefId>,\n     ) where\n-        T: fmt::Display + ToPredicate<'tcx, T>;\n+        T: fmt::Display + ToPredicate<'tcx>;\n \n     /// Suggest to await before try: future? => future.await?\n     fn suggest_await_before_try(\n@@ -2353,7 +2353,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         seen_requirements: &mut FxHashSet<DefId>,\n     ) where\n-        T: fmt::Display,\n+        T: fmt::Display + ToPredicate<'tcx>,\n     {\n         let tcx = self.tcx;\n         match *cause_code {"}, {"sha": "1790ef5b4814e7e9268edca3427adb7129e8ff3a", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d2a80c157145d0c1e6fd6669862358de6cd89185", "patch": "@@ -504,14 +504,12 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     Reveal::All => {\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.depth) {\n-                            let obligation = Obligation::with_depth(\n-                                self.tcx(),\n-                                self.cause.clone(),\n-                                recursion_limit.0,\n-                                self.param_env,\n-                                ty,\n+                            self.selcx.infcx.err_ctxt().report_overflow_error(\n+                                &ty,\n+                                self.cause.span,\n+                                true,\n+                                |_| {},\n                             );\n-                            self.selcx.infcx.err_ctxt().report_overflow_error(&obligation, true);\n                         }\n \n                         let substs = substs.fold_with(self);"}, {"sha": "7ad532d8a34645544996dd1930fbf45284d9d1b7", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d2a80c157145d0c1e6fd6669862358de6cd89185", "patch": "@@ -7,7 +7,7 @@ use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::TypeErrCtxtExt;\n use crate::traits::project::{needs_normalization, BoundVarReplacer, PlaceholderReplacer};\n-use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use crate::traits::{ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n@@ -214,14 +214,12 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let substs = substs.try_fold_with(self)?;\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n-                            let obligation = Obligation::with_depth(\n-                                self.tcx(),\n-                                self.cause.clone(),\n-                                recursion_limit.0,\n-                                self.param_env,\n-                                ty,\n+                            self.infcx.err_ctxt().report_overflow_error(\n+                                &ty,\n+                                self.cause.span,\n+                                true,\n+                                |_| {},\n                             );\n-                            self.infcx.err_ctxt().report_overflow_error(&obligation, true);\n                         }\n \n                         let generic_ty = self.tcx().bound_type_of(def_id);"}, {"sha": "035deb61639817c57d897a9ffdcb75db304aacaa", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a80c157145d0c1e6fd6669862358de6cd89185/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d2a80c157145d0c1e6fd6669862358de6cd89185", "patch": "@@ -43,7 +43,6 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n-use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -1313,18 +1312,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         error_obligation: &Obligation<'tcx, T>,\n     ) -> Result<(), OverflowError>\n     where\n-        T: fmt::Display\n-            + TypeFoldable<'tcx>\n-            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n-        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+        T: ToPredicate<'tcx> + Clone,\n     {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n                     if let Some(e) = self.infcx.tainted_by_errors() {\n                         return Err(OverflowError::Error(e));\n                     }\n-                    self.infcx.err_ctxt().report_overflow_error(error_obligation, true);\n+                    self.infcx.err_ctxt().report_overflow_obligation(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n                     return Err(OverflowError::Canonical);\n@@ -1345,10 +1341,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         error_obligation: &Obligation<'tcx, V>,\n     ) -> Result<(), OverflowError>\n     where\n-        V: fmt::Display\n-            + TypeFoldable<'tcx>\n-            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n-        <V as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+        V: ToPredicate<'tcx> + Clone,\n     {\n         self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n     }"}]}