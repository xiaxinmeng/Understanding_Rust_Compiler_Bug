{"sha": "b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYmZhZGI1MmM1MWIwZjczZjBiNDI1ZmI2YTQ4NmJiNjQ0ZThlYmI=", "commit": {"author": {"name": "vlakreeh", "email": "zeb@zebulon.dev", "date": "2020-09-29T23:05:17Z"}, "committer": {"name": "vlakreeh", "email": "zeb@zebulon.dev", "date": "2020-09-29T23:05:17Z"}, "message": "Add tests for convert integer literal assist", "tree": {"sha": "1eeba40684ad85eaa8d33ae88224d7985e9ab1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eeba40684ad85eaa8d33ae88224d7985e9ab1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb", "html_url": "https://github.com/rust-lang/rust/commit/b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb/comments", "author": {"login": "zebp", "id": 14242997, "node_id": "MDQ6VXNlcjE0MjQyOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/14242997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zebp", "html_url": "https://github.com/zebp", "followers_url": "https://api.github.com/users/zebp/followers", "following_url": "https://api.github.com/users/zebp/following{/other_user}", "gists_url": "https://api.github.com/users/zebp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zebp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zebp/subscriptions", "organizations_url": "https://api.github.com/users/zebp/orgs", "repos_url": "https://api.github.com/users/zebp/repos", "events_url": "https://api.github.com/users/zebp/events{/privacy}", "received_events_url": "https://api.github.com/users/zebp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zebp", "id": 14242997, "node_id": "MDQ6VXNlcjE0MjQyOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/14242997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zebp", "html_url": "https://github.com/zebp", "followers_url": "https://api.github.com/users/zebp/followers", "following_url": "https://api.github.com/users/zebp/following{/other_user}", "gists_url": "https://api.github.com/users/zebp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zebp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zebp/subscriptions", "organizations_url": "https://api.github.com/users/zebp/orgs", "repos_url": "https://api.github.com/users/zebp/repos", "events_url": "https://api.github.com/users/zebp/events{/privacy}", "received_events_url": "https://api.github.com/users/zebp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "html_url": "https://github.com/rust-lang/rust/commit/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71"}], "stats": {"total": 574, "additions": 570, "deletions": 4}, "files": [{"sha": "ea35e833a94f79d5731110705f2f5250f5ee1024", "filename": "crates/assists/src/handlers/convert_integer_literal.rs", "status": "modified", "additions": 570, "deletions": 4, "changes": 574, "blob_url": "https://github.com/rust-lang/rust/blob/b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fconvert_integer_literal.rs?ref=b2bfadb52c51b0f73f0b425fb6a486bb644e8ebb", "patch": "@@ -86,10 +86,7 @@ impl IntegerLiteralBase {\n         };\n \n         // Checks that all characters after the base prefix are all valid digits for that base.\n-        if literal_text[base.prefix_len()..]\n-            .chars()\n-            .all(|c| c.is_digit(base.base()))\n-        {\n+        if literal_text[base.prefix_len()..].chars().all(|c| c.is_digit(base.base())) {\n             Some(base)\n         } else {\n             None\n@@ -133,3 +130,572 @@ impl IntegerLiteralBase {\n         ]\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    use super::*;\n+    use crate::tests::{check_assist_by_label, check_assist_target};\n+\n+    #[test]\n+    fn binary_target() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0b1010<|>;\", \"0b1010\");\n+    }\n+\n+    #[test]\n+    fn octal_target() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0o12<|>;\", \"0o12\");\n+    }\n+\n+    #[test]\n+    fn decimal_target() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 10<|>;\", \"10\");\n+    }\n+\n+    #[test]\n+    fn hexadecimal_target() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0xA<|>;\", \"0xA\");\n+    }\n+\n+    #[test]\n+    fn binary_target_with_underscores() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0b10_10<|>;\", \"0b10_10\");\n+    }\n+\n+    #[test]\n+    fn octal_target_with_underscores() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0o1_2<|>;\", \"0o1_2\");\n+    }\n+\n+    #[test]\n+    fn decimal_target_with_underscores() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 1_0<|>;\", \"1_0\");\n+    }\n+\n+    #[test]\n+    fn hexadecimal_target_with_underscores() {\n+        check_assist_target(convert_integer_literal, \"const _: i32 = 0x_A<|>;\", \"0x_A\");\n+    }\n+\n+    #[test]\n+    fn convert_decimal_integer() {\n+        let before = \"const _: i32 = 1000<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1111101000;\",\n+            \"Convert 1000 to 0b1111101000\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o1750;\",\n+            \"Convert 1000 to 0o1750\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0x3E8;\",\n+            \"Convert 1000 to 0x3E8\",\n+        );\n+    }\n+\n+    // Decimal numbers under 3 digits have a special case where they return early because we can't fit a\n+    // other base's prefix, so we have a separate test for that.\n+    #[test]\n+    fn convert_small_decimal_integer() {\n+        let before = \"const _: i32 = 10<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1010;\",\n+            \"Convert 10 to 0b1010\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o12;\",\n+            \"Convert 10 to 0o12\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xA;\",\n+            \"Convert 10 to 0xA\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_hexadecimal_integer() {\n+        let before = \"const _: i32 = 0xFF<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111;\",\n+            \"Convert 0xFF to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377;\",\n+            \"Convert 0xFF to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255;\",\n+            \"Convert 0xFF to 255\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_binary_integer() {\n+        let before = \"const _: i32 = 0b11111111<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377;\",\n+            \"Convert 0b11111111 to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255;\",\n+            \"Convert 0b11111111 to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFF;\",\n+            \"Convert 0b11111111 to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_octal_integer() {\n+        let before = \"const _: i32 = 0o377<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111;\",\n+            \"Convert 0o377 to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255;\",\n+            \"Convert 0o377 to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFF;\",\n+            \"Convert 0o377 to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_decimal_integer_with_underscores() {\n+        let before = \"const _: i32 = 1_00_0<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1111101000;\",\n+            \"Convert 1000 to 0b1111101000\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o1750;\",\n+            \"Convert 1000 to 0o1750\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0x3E8;\",\n+            \"Convert 1000 to 0x3E8\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_small_decimal_integer_with_underscores() {\n+        let before = \"const _: i32 = 1_0<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1010;\",\n+            \"Convert 10 to 0b1010\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o12;\",\n+            \"Convert 10 to 0o12\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xA;\",\n+            \"Convert 10 to 0xA\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_hexadecimal_integer_with_underscores() {\n+        let before = \"const _: i32 = 0x_F_F<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111;\",\n+            \"Convert 0xFF to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377;\",\n+            \"Convert 0xFF to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255;\",\n+            \"Convert 0xFF to 255\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_binary_integer_with_underscores() {\n+        let before = \"const _: i32 = 0b1111_1111<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377;\",\n+            \"Convert 0b11111111 to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255;\",\n+            \"Convert 0b11111111 to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFF;\",\n+            \"Convert 0b11111111 to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_octal_integer_with_underscores() {\n+        let before = \"const _: i32 = 0o3_77<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111;\",\n+            \"Convert 0o377 to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255;\",\n+            \"Convert 0o377 to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFF;\",\n+            \"Convert 0o377 to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_decimal_integer_with_suffix() {\n+        let before = \"const _: i32 = 1000i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1111101000i32;\",\n+            \"Convert 1000 (i32) to 0b1111101000\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o1750i32;\",\n+            \"Convert 1000 (i32) to 0o1750\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0x3E8i32;\",\n+            \"Convert 1000 (i32) to 0x3E8\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_small_decimal_integer_with_suffix() {\n+        let before = \"const _: i32 = 10i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1010i32;\",\n+            \"Convert 10 (i32) to 0b1010\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o12i32;\",\n+            \"Convert 10 (i32) to 0o12\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xAi32;\",\n+            \"Convert 10 (i32) to 0xA\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_hexadecimal_integer_with_suffix() {\n+        let before = \"const _: i32 = 0xFFi32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111i32;\",\n+            \"Convert 0xFF (i32) to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377i32;\",\n+            \"Convert 0xFF (i32) to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255i32;\",\n+            \"Convert 0xFF (i32) to 255\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_binary_integer_with_suffix() {\n+        let before = \"const _: i32 = 0b11111111i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377i32;\",\n+            \"Convert 0b11111111 (i32) to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255i32;\",\n+            \"Convert 0b11111111 (i32) to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFFi32;\",\n+            \"Convert 0b11111111 (i32) to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_octal_integer_with_suffix() {\n+        let before = \"const _: i32 = 0o377i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111i32;\",\n+            \"Convert 0o377 (i32) to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255i32;\",\n+            \"Convert 0o377 (i32) to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFFi32;\",\n+            \"Convert 0o377 (i32) to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_decimal_integer_with_underscores_and_suffix() {\n+        let before = \"const _: i32 = 1_00_0i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1111101000i32;\",\n+            \"Convert 1000 (i32) to 0b1111101000\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o1750i32;\",\n+            \"Convert 1000 (i32) to 0o1750\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0x3E8i32;\",\n+            \"Convert 1000 (i32) to 0x3E8\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_small_decimal_integer_with_underscores_and_suffix() {\n+        let before = \"const _: i32 = 1_0i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b1010i32;\",\n+            \"Convert 10 (i32) to 0b1010\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o12i32;\",\n+            \"Convert 10 (i32) to 0o12\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xAi32;\",\n+            \"Convert 10 (i32) to 0xA\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_hexadecimal_integer_with_underscores_and_suffix() {\n+        let before = \"const _: i32 = 0x_F_Fi32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111i32;\",\n+            \"Convert 0xFF (i32) to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377i32;\",\n+            \"Convert 0xFF (i32) to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255i32;\",\n+            \"Convert 0xFF (i32) to 255\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_binary_integer_with_underscores_and_suffix() {\n+        let before = \"const _: i32 = 0b1111_1111i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0o377i32;\",\n+            \"Convert 0b11111111 (i32) to 0o377\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255i32;\",\n+            \"Convert 0b11111111 (i32) to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFFi32;\",\n+            \"Convert 0b11111111 (i32) to 0xFF\",\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_octal_integer_with_underscores_and_suffix() {\n+        let before = \"const _: i32 = 0o3_77i32<|>;\";\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0b11111111i32;\",\n+            \"Convert 0o377 (i32) to 0b11111111\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 255i32;\",\n+            \"Convert 0o377 (i32) to 255\",\n+        );\n+\n+        check_assist_by_label(\n+            convert_integer_literal,\n+            before,\n+            \"const _: i32 = 0xFFi32;\",\n+            \"Convert 0o377 (i32) to 0xFF\",\n+        );\n+    }\n+}"}]}