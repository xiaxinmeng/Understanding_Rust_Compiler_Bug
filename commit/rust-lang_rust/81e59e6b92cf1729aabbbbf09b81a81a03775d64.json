{"sha": "81e59e6b92cf1729aabbbbf09b81a81a03775d64", "node_id": "C_kwDOAAsO6NoAKDgxZTU5ZTZiOTJjZjE3MjlhYWJiYmJmMDliODFhODFhMDM3NzVkNjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T01:33:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T01:33:55Z"}, "message": "Auto merge of #1930 - tavianator:avoid-adjacent-allocations, r=RalfJung\n\nintptrcast: Never allocate two objects directly adjecent\n\nWhen two objects directly follow each other in memory, what is the\nprovenance of an integer cast to a pointer that points directly between\nthem?  For a zero-size region, it could point into the end of the first\nobject, or the start of the second.\n\nWe can avoid answering this difficult question by simply never\nallocating two objects directly beside each other.  This fixes some of\nthe false positives from #1866.", "tree": {"sha": "3f87cde5107ee3ed401f4be95413c0cae2ab56cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f87cde5107ee3ed401f4be95413c0cae2ab56cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e59e6b92cf1729aabbbbf09b81a81a03775d64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e59e6b92cf1729aabbbbf09b81a81a03775d64", "html_url": "https://github.com/rust-lang/rust/commit/81e59e6b92cf1729aabbbbf09b81a81a03775d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e59e6b92cf1729aabbbbf09b81a81a03775d64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eadf666d3b96a66a53a91fc700c13884549d1c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eadf666d3b96a66a53a91fc700c13884549d1c6", "html_url": "https://github.com/rust-lang/rust/commit/4eadf666d3b96a66a53a91fc700c13884549d1c6"}, {"sha": "6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe", "html_url": "https://github.com/rust-lang/rust/commit/6a98c64c8b684ad12ae1a11fc7ad55a176b45bfe"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "6f4169e950a94cf4a6c960e4e90683e67f4445d1", "filename": "src/intptrcast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81e59e6b92cf1729aabbbbf09b81a81a03775d64/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e59e6b92cf1729aabbbbf09b81a81a03775d64/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=81e59e6b92cf1729aabbbbf09b81a81a03775d64", "patch": "@@ -1,5 +1,4 @@\n use std::cell::RefCell;\n-use std::cmp::max;\n use std::collections::hash_map::Entry;\n \n use log::trace;\n@@ -107,9 +106,11 @@ impl<'mir, 'tcx> GlobalState {\n                     slack,\n                 );\n \n-                // Remember next base address.  If this allocation is zero-sized, leave a gap\n-                // of at least 1 to avoid two allocations having the same base address.\n-                global_state.next_base_addr = base_addr.checked_add(max(size.bytes(), 1)).unwrap();\n+                // Remember next base address.  Leave a gap of at least 1 to avoid two zero-sized allocations\n+                // having the same base address, and to avoid ambiguous provenance for the address between two\n+                // allocations (also see https://github.com/rust-lang/unsafe-code-guidelines/issues/313).\n+                let size_plus_1 = size.bytes().checked_add(1).unwrap();\n+                global_state.next_base_addr = base_addr.checked_add(size_plus_1).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n                 global_state.int_to_ptr_map.push((base_addr, alloc_id));"}, {"sha": "509965fe4fa97d7d0f735451b1bd8e0f6e3c21a5", "filename": "tests/run-pass/adjacent-allocs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/81e59e6b92cf1729aabbbbf09b81a81a03775d64/tests%2Frun-pass%2Fadjacent-allocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e59e6b92cf1729aabbbbf09b81a81a03775d64/tests%2Frun-pass%2Fadjacent-allocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fadjacent-allocs.rs?ref=81e59e6b92cf1729aabbbbf09b81a81a03775d64", "patch": "@@ -0,0 +1,22 @@\n+fn main() {\n+    // The slack between allocations is random.\n+    // Loop a few times to hit the zero-slack case.\n+    for _ in 0..1024 {\n+        let n = 0u64;\n+        let ptr: *const u64 = &n;\n+\n+        // Allocate a new stack variable whose lifetime quickly ends.\n+        // If there's a chance that &m == ptr.add(1), then an int-to-ptr cast of\n+        // that value will have ambiguous provenance between n and m.\n+        // See https://github.com/rust-lang/miri/issues/1866#issuecomment-985770125\n+        {\n+            let m = 0u64;\n+            let _ = &m as *const u64;\n+        }\n+\n+        let iptr = ptr as usize;\n+        let zst = (iptr + 8) as *const ();\n+        // This is a ZST ptr just at the end of `n`, so it should be valid to deref.\n+        unsafe { *zst }\n+    }\n+}"}]}