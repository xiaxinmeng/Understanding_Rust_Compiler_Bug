{"sha": "89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzU4ZWFjNjgyNmJmNjA2N2Q0YTFjYjlkNzRiOWI5MjgyZDQ2ODg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-05-11T09:40:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-05-13T09:58:21Z"}, "message": "have on_completion record subcycles\n\nRework `on_completion` method so that it removes all\nprovisional cache entries that are \"below\" a completed\nnode (while leaving those entries that are not below\nthe node).\n\nThis corrects an imprecise result that could in turn lead\nto an incremental compilation failure. Under the old\nscheme, if you had:\n\n* A depends on...\n     * B depends on A\n     * C depends on...\n         * D depends on C\n     * T: 'static\n\nthen the provisional results for A, B, C, and D would all\nbe entangled. Thus, if A was `EvaluatedToOkModuloRegions`\n(because of that final condition), then the result for C and\nD would also be demoted to \"ok modulo regions\".\n\nIn reality, though, the result for C depends only on C and itself,\nand is not dependent on regions. If we happen to evaluate the\ncycle starting from C, we would never reach A, and hence the\nresult would be \"ok\".\n\nUnder the new scheme, the provisional results for C and D\nare moved to the permanent cache immediately and are not affected\nby the result of A.", "tree": {"sha": "8bf452f133ecdddac998b13a8cfa095cd64883f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bf452f133ecdddac998b13a8cfa095cd64883f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "html_url": "https://github.com/rust-lang/rust/commit/89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "html_url": "https://github.com/rust-lang/rust/commit/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5"}], "stats": {"total": 206, "additions": 122, "deletions": 84}, "files": [{"sha": "bf3c8643f0d6b0c7fb788ba010b1ac12a4c22240", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "patch": "@@ -14,6 +14,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(hash_drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(never_type)]"}, {"sha": "a292de148a67aaa231e0fb44b5f7713d5dc15915", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 60, "deletions": 48, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "patch": "@@ -636,8 +636,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         if let Some(result) = stack.cache().get_provisional(fresh_trait_ref) {\n             debug!(?result, \"PROVISIONAL CACHE HIT\");\n-            stack.update_reached_depth(stack.cache().current_reached_depth());\n-            return Ok(result);\n+            stack.update_reached_depth(result.reached_depth);\n+            return Ok(result.result);\n         }\n \n         // Check if this is a match for something already on the\n@@ -661,7 +661,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             debug!(?result, \"CACHE MISS\");\n             self.insert_evaluation_cache(obligation.param_env, fresh_trait_ref, dep_node, result);\n \n-            stack.cache().on_completion(stack.depth, |fresh_trait_ref, provisional_result| {\n+            stack.cache().on_completion(stack.dfn, |fresh_trait_ref, provisional_result| {\n                 self.insert_evaluation_cache(\n                     obligation.param_env,\n                     fresh_trait_ref,\n@@ -2162,7 +2162,7 @@ impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n     /// required accessing something from the stack at depth `reached_depth`.\n     fn update_reached_depth(&self, reached_depth: usize) {\n         assert!(\n-            self.depth > reached_depth,\n+            self.depth >= reached_depth,\n             \"invoked `update_reached_depth` with something under this stack: \\\n              self.depth={} reached_depth={}\",\n             self.depth,\n@@ -2235,23 +2235,6 @@ struct ProvisionalEvaluationCache<'tcx> {\n     /// next \"depth first number\" to issue -- just a counter\n     dfn: Cell<usize>,\n \n-    /// Stores the \"coldest\" depth (bottom of stack) reached by any of\n-    /// the evaluation entries. The idea here is that all things in the provisional\n-    /// cache are always dependent on *something* that is colder in the stack:\n-    /// therefore, if we add a new entry that is dependent on something *colder still*,\n-    /// we have to modify the depth for all entries at once.\n-    ///\n-    /// Example:\n-    ///\n-    /// Imagine we have a stack `A B C D E` (with `E` being the top of\n-    /// the stack).  We cache something with depth 2, which means that\n-    /// it was dependent on C.  Then we pop E but go on and process a\n-    /// new node F: A B C D F.  Now F adds something to the cache with\n-    /// depth 1, meaning it is dependent on B.  Our original cache\n-    /// entry is also dependent on B, because there is a path from E\n-    /// to C and then from C to F and from F to B.\n-    reached_depth: Cell<usize>,\n-\n     /// Map from cache key to the provisionally evaluated thing.\n     /// The cache entries contain the result but also the DFN in which they\n     /// were added. The DFN is used to clear out values on failure.\n@@ -2275,12 +2258,13 @@ struct ProvisionalEvaluationCache<'tcx> {\n #[derive(Copy, Clone, Debug)]\n struct ProvisionalEvaluation {\n     from_dfn: usize,\n+    reached_depth: usize,\n     result: EvaluationResult,\n }\n \n impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {\n     fn default() -> Self {\n-        Self { dfn: Cell::new(0), reached_depth: Cell::new(usize::MAX), map: Default::default() }\n+        Self { dfn: Cell::new(0), map: Default::default() }\n     }\n }\n \n@@ -2295,22 +2279,17 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// Check the provisional cache for any result for\n     /// `fresh_trait_ref`. If there is a hit, then you must consider\n     /// it an access to the stack slots at depth\n-    /// `self.current_reached_depth()` and above.\n-    fn get_provisional(&self, fresh_trait_ref: ty::PolyTraitRef<'tcx>) -> Option<EvaluationResult> {\n+    /// `reached_depth` (from the returned value).\n+    fn get_provisional(\n+        &self,\n+        fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n+    ) -> Option<ProvisionalEvaluation> {\n         debug!(\n             ?fresh_trait_ref,\n-            reached_depth = ?self.reached_depth.get(),\n             \"get_provisional = {:#?}\",\n             self.map.borrow().get(&fresh_trait_ref),\n         );\n-        Some(self.map.borrow().get(&fresh_trait_ref)?.result)\n-    }\n-\n-    /// Current value of the `reached_depth` counter -- all the\n-    /// provisional cache entries are dependent on the item at this\n-    /// depth.\n-    fn current_reached_depth(&self) -> usize {\n-        self.reached_depth.get()\n+        Some(self.map.borrow().get(&fresh_trait_ref)?.clone())\n     }\n \n     /// Insert a provisional result into the cache. The result came\n@@ -2324,13 +2303,31 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n         fresh_trait_ref: ty::PolyTraitRef<'tcx>,\n         result: EvaluationResult,\n     ) {\n-        debug!(?from_dfn, ?reached_depth, ?fresh_trait_ref, ?result, \"insert_provisional\");\n-        let r_d = self.reached_depth.get();\n-        self.reached_depth.set(r_d.min(reached_depth));\n+        debug!(?from_dfn, ?fresh_trait_ref, ?result, \"insert_provisional\");\n \n-        debug!(reached_depth = self.reached_depth.get());\n+        let mut map = self.map.borrow_mut();\n+\n+        // Subtle: when we complete working on the DFN `from_dfn`, anything\n+        // that remains in the provisional cache must be dependent on some older\n+        // stack entry than `from_dfn`. We have to update their depth with our transitive\n+        // depth in that case or else it would be referring to some popped note.\n+        //\n+        // Example:\n+        // A (reached depth 0)\n+        //   ...\n+        //      B // depth 1 -- reached depth = 0\n+        //          C // depth 2 -- reached depth = 1 (should be 0)\n+        //              B\n+        //          A // depth 0\n+        //   D (reached depth 1)\n+        //      C (cache -- reached depth = 2)\n+        for (_k, v) in &mut *map {\n+            if v.from_dfn >= from_dfn {\n+                v.reached_depth = reached_depth.min(v.reached_depth);\n+            }\n+        }\n \n-        self.map.borrow_mut().insert(fresh_trait_ref, ProvisionalEvaluation { from_dfn, result });\n+        map.insert(fresh_trait_ref, ProvisionalEvaluation { from_dfn, reached_depth, result });\n     }\n \n     /// Invoked when the node with dfn `dfn` does not get a successful\n@@ -2358,25 +2355,40 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// was a failure, then `on_failure` should have been invoked\n     /// already). The callback `op` will be invoked for each\n     /// provisional entry that we can now confirm.\n+    ///\n+    /// Note that we may still have provisional cache items remaining\n+    /// in the cache when this is done. For example, if there is a\n+    /// cycle:\n+    ///\n+    /// * A depends on...\n+    ///     * B depends on A\n+    ///     * C depends on...\n+    ///         * D depends on C\n+    ///     * ...\n+    ///\n+    /// Then as we complete the C node we will have a provisional cache\n+    /// with results for A, B, C, and D. This method would clear out\n+    /// the C and D results, but leave A and B provisional.\n+    ///\n+    /// This is determined based on the DFN: we remove any provisional\n+    /// results created since `dfn` started (e.g., in our example, dfn\n+    /// would be 2, representing the C node, and hence we would\n+    /// remove the result for D, which has DFN 3, but not the results for\n+    /// A and B, which have DFNs 0 and 1 respectively).\n     fn on_completion(\n         &self,\n-        depth: usize,\n+        dfn: usize,\n         mut op: impl FnMut(ty::PolyTraitRef<'tcx>, EvaluationResult),\n     ) {\n-        debug!(?depth, reached_depth = ?self.reached_depth.get(), \"on_completion\");\n+        debug!(?dfn, \"on_completion\");\n \n-        if self.reached_depth.get() < depth {\n-            debug!(\"on_completion: did not yet reach depth to complete\");\n-            return;\n-        }\n-\n-        for (fresh_trait_ref, eval) in self.map.borrow_mut().drain() {\n+        for (fresh_trait_ref, eval) in\n+            self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)\n+        {\n             debug!(?fresh_trait_ref, ?eval, \"on_completion\");\n \n             op(fresh_trait_ref, eval.result);\n         }\n-\n-        self.reached_depth.set(usize::MAX);\n     }\n }\n "}, {"sha": "eb1ffe51ffcdda9186ff8551a15403447d3dc4c4", "filename": "src/test/ui/cycle-me.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Fcycle-me.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Fcycle-me.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-me.rs?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -1,31 +0,0 @@\n-#![feature(rustc_attrs)]\n-\n-// A (reached depth 0)\n-//   ...\n-//      B // depth 1 -- reached depth = 0\n-//          C // depth 2 -- reached depth = 1 (should be 0)\n-//              B\n-//          A // depth 0\n-//   D (reached depth 1)\n-//      C (cache -- reached depth = 2)\n-\n-struct A {\n-    b: B,\n-    c: C,\n-}\n-\n-struct B {\n-    c: C,\n-    a: Option<Box<A>>,\n-}\n-\n-struct C {\n-    b: Option<Box<B>>,\n-}\n-\n-#[rustc_evaluate_where_clauses]\n-fn test<X: Send>() {}\n-\n-fn main() {\n-    test::<A>();\n-}"}, {"sha": "4318e07d07a1819e54c9c2cceff064811734bb44", "filename": "src/test/ui/traits/cache-reached-depth-ice.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fcache-reached-depth-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fcache-reached-depth-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcache-reached-depth-ice.rs?ref=89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "patch": "@@ -0,0 +1,45 @@\n+#![feature(rustc_attrs)]\n+\n+// Test for a particular corner case where the evaluation\n+// cache can get out of date. The problem here is that\n+// when we cache C, we have observed that it reaches\n+// to depth 2 (the node for B), but we later realize\n+// that B itself depends on A (reached depth 0). We\n+// failed to update the depth for C transitively, which\n+// resulted in an assertion failure when it was referenced\n+// from D.\n+//\n+// A (reached depth 0)\n+//   E\n+//      B // depth 2 -- reached depth = 0\n+//          C // depth 3 -- reached depth = 2 (should be 0)\n+//              B\n+//          A // depth 0\n+//   D (depth 1)\n+//      C (cache -- reached depth = 2)\n+\n+struct A {\n+    e: E,\n+    d: C,\n+}\n+\n+struct E {\n+    b: B,\n+}\n+\n+struct B {\n+    a: Option<Box<A>>,\n+    c: C,\n+}\n+\n+struct C {\n+    b: Option<Box<B>>,\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn test<X: ?Sized + Send>() {}\n+\n+fn main() {\n+    test::<A>();\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<A as std::marker::Send>), [])) = Ok(EvaluatedToOk)\n+}"}, {"sha": "5e662970bb94c481fa10542331195cd8a84ec6c4", "filename": "src/test/ui/traits/cache-reached-depth-ice.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fcache-reached-depth-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fcache-reached-depth-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcache-reached-depth-ice.stderr?ref=89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "patch": "@@ -0,0 +1,11 @@\n+error: evaluate(Binder(TraitPredicate(<A as std::marker::Send>), [])) = Ok(EvaluatedToOk)\n+  --> $DIR/cache-reached-depth-ice.rs:43:5\n+   |\n+LL | fn test<X: ?Sized + Send>() {}\n+   |                     ---- predicate\n+...\n+LL |     test::<A>();\n+   |     ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "e186570167d76e8b32efee96b4c747cca17923a1", "filename": "src/test/ui/traits/issue-83538-tainted-cache-after-cycle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs?ref=89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "patch": "@@ -54,13 +54,13 @@ where\n }\n \n fn main() {\n-    // The only ERROR included here is the one that is totally wrong:\n+    // Key is that Vec<First> is \"ok\" and Third<Ty> is \"ok modulo regions\":\n \n     forward();\n-    //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOk)\n     //~| ERROR evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n \n     reverse();\n-    //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOk)\n     //~| ERROR evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n }"}, {"sha": "bfe3e76b214b0c3ba930880cdbae41b7bf021cc5", "filename": "src/test/ui/traits/issue-83538-tainted-cache-after-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89c58eac6826bf6067d4a1cb9d74b9b9282d4688/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr?ref=89c58eac6826bf6067d4a1cb9d74b9b9282d4688", "patch": "@@ -1,4 +1,4 @@\n-error: evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+error: evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOk)\n   --> $DIR/issue-83538-tainted-cache-after-cycle.rs:59:5\n    |\n LL |     Vec<First>: Unpin,\n@@ -25,7 +25,7 @@ LL |     Third<Ty>: Unpin,\n LL |     reverse();\n    |     ^^^^^^^\n \n-error: evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+error: evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOk)\n   --> $DIR/issue-83538-tainted-cache-after-cycle.rs:63:5\n    |\n LL |     Vec<First>: Unpin,"}]}