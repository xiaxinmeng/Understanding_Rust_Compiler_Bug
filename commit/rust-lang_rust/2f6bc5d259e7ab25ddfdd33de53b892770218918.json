{"sha": "2f6bc5d259e7ab25ddfdd33de53b892770218918", "node_id": "C_kwDOAAsO6NoAKDJmNmJjNWQyNTllN2FiMjVkZGZkZDMzZGU1M2I4OTI3NzAyMTg5MTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T19:10:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-09T19:10:05Z"}, "message": "Auto merge of #111402 - matthiaskrgr:rollup-28cqfz5, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #97320 (Stabilize const_ptr_read)\n - #110770 (Limit lifetime of format_args!() with inlined args.)\n - #111021 (Move some tests)\n - #111215 (Various changes to name resolution of anon consts)\n - #111242 (support set `rpath` option  for each target independently)\n - #111282 (Remove some `assume`s from slice iterators that don't do anything)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "44252c48cec0cb053be8a426c95685d93a223104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44252c48cec0cb053be8a426c95685d93a223104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6bc5d259e7ab25ddfdd33de53b892770218918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6bc5d259e7ab25ddfdd33de53b892770218918", "html_url": "https://github.com/rust-lang/rust/commit/2f6bc5d259e7ab25ddfdd33de53b892770218918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6bc5d259e7ab25ddfdd33de53b892770218918/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "html_url": "https://github.com/rust-lang/rust/commit/3a37c2f0523c87147b64f1b8099fc9df22e8c53e"}, {"sha": "273fbf47ab1615f2cae416ba397f5b5a531eac65", "url": "https://api.github.com/repos/rust-lang/rust/commits/273fbf47ab1615f2cae416ba397f5b5a531eac65", "html_url": "https://github.com/rust-lang/rust/commit/273fbf47ab1615f2cae416ba397f5b5a531eac65"}], "stats": {"total": 1669, "additions": 983, "deletions": 686}, "files": [{"sha": "43b429f6947ec2f2f436ed371c1430ed1f63b713", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -120,6 +120,12 @@ impl Path {\n     pub fn is_global(&self) -> bool {\n         !self.segments.is_empty() && self.segments[0].ident.name == kw::PathRoot\n     }\n+\n+    /// If this path is a single identifier with no arguments, does not ensure\n+    /// that the path resolves to a const param, the caller should check this.\n+    pub fn is_potential_trivial_const_arg(&self) -> bool {\n+        self.segments.len() == 1 && self.segments[0].args.is_none()\n+    }\n }\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of types.\n@@ -1154,7 +1160,9 @@ impl Expr {\n     ///\n     /// If this is not the case, name resolution does not resolve `N` when using\n     /// `min_const_generics` as more complex expressions are not supported.\n-    pub fn is_potential_trivial_const_param(&self) -> bool {\n+    ///\n+    /// Does not ensure that the path resolves to a const param, the caller should check this.\n+    pub fn is_potential_trivial_const_arg(&self) -> bool {\n         let this = if let ExprKind::Block(block, None) = &self.kind\n             && block.stmts.len() == 1\n             && let StmtKind::Expr(expr) = &block.stmts[0].kind\n@@ -1165,8 +1173,7 @@ impl Expr {\n         };\n \n         if let ExprKind::Path(None, path) = &this.kind\n-            && path.segments.len() == 1\n-            && path.segments[0].args.is_none()\n+            && path.is_potential_trivial_const_arg()\n         {\n             true\n         } else {"}, {"sha": "275692ad5dda7f54a2341fccfc9df7e7ee6fd058", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -188,6 +188,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_variant(&mut self, v: &'ast Variant) {\n         walk_variant(self, v)\n     }\n+    fn visit_variant_discr(&mut self, discr: &'ast AnonConst) {\n+        self.visit_anon_const(discr);\n+    }\n     fn visit_label(&mut self, label: &'ast Label) {\n         walk_label(self, label)\n     }\n@@ -380,7 +383,7 @@ where\n     visitor.visit_ident(variant.ident);\n     visitor.visit_vis(&variant.vis);\n     visitor.visit_variant_data(&variant.data);\n-    walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n+    walk_list!(visitor, visit_variant_discr, &variant.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.attrs);\n }\n "}, {"sha": "afcf8b15cd80053910711345b36d6a8542f80fa5", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -446,7 +446,30 @@ fn expand_format_args<'hir>(\n         && argmap.iter().enumerate().all(|(i, (&(j, _), _))| i == j)\n         && arguments.iter().skip(1).all(|arg| !may_contain_yield_point(&arg.expr));\n \n-    let args = if use_simple_array {\n+    let args = if arguments.is_empty() {\n+        // Generate:\n+        //    &<core::fmt::Argument>::none()\n+        //\n+        // Note:\n+        //     `none()` just returns `[]`. We use `none()` rather than `[]` to limit the lifetime.\n+        //\n+        //     This makes sure that this still fails to compile, even when the argument is inlined:\n+        //\n+        //     ```\n+        //     let f = format_args!(\"{}\", \"a\");\n+        //     println!(\"{f}\"); // error E0716\n+        //     ```\n+        //\n+        //     Cases where keeping the object around is allowed, such as `format_args!(\"a\")`,\n+        //     are handled above by the `allow_const` case.\n+        let none_fn = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n+            macsp,\n+            hir::LangItem::FormatArgument,\n+            sym::none,\n+        ));\n+        let none = ctx.expr_call(macsp, none_fn, &[]);\n+        ctx.expr(macsp, hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, none))\n+    } else if use_simple_array {\n         // Generate:\n         //     &[\n         //         <core::fmt::Argument>::new_display(&arg0),"}, {"sha": "1fd7cc6647037e847019a90d57afaec5da76ba02", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1190,13 +1190,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // parsing. We try to resolve that ambiguity by attempting resolution in both the\n                     // type and value namespaces. If we resolved the path in the value namespace, we\n                     // transform it into a generic const argument.\n-                    TyKind::Path(qself, path) => {\n+                    TyKind::Path(None, path) => {\n                         if let Some(res) = self\n                             .resolver\n                             .get_partial_res(ty.id)\n                             .and_then(|partial_res| partial_res.full_res())\n                         {\n-                            if !res.matches_ns(Namespace::TypeNS) {\n+                            if !res.matches_ns(Namespace::TypeNS)\n+                                && path.is_potential_trivial_const_arg()\n+                            {\n                                 debug!(\n                                     \"lower_generic_arg: Lowering type argument as const argument: {:?}\",\n                                     ty,\n@@ -1218,7 +1220,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                                 let path_expr = Expr {\n                                     id: ty.id,\n-                                    kind: ExprKind::Path(qself.clone(), path.clone()),\n+                                    kind: ExprKind::Path(None, path.clone()),\n                                     span,\n                                     attrs: AttrVec::new(),\n                                     tokens: None,"}, {"sha": "4f36590025bae4e6d66001a524e7730c203cc2d4", "filename": "compiler/rustc_error_codes/src/error_codes/E0771.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,9 +1,11 @@\n+#### Note: this error code is no longer emitted by the compiler\n+\n A non-`'static` lifetime was used in a const generic. This is currently not\n allowed.\n \n Erroneous code example:\n \n-```compile_fail,E0771\n+```compile_fail,E0770\n #![feature(adt_const_params)]\n \n fn function_with_str<'a, const STRING: &'a str>() {} // error!"}, {"sha": "ab2932bf969ad9c0980bc08c4a993ff86890bbed", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -51,7 +51,15 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n-                if let Some(param_id) = tcx.hir().opt_const_param_default_param_def_id(hir_id) {\n+                let parent_node = tcx.hir().get_parent(hir_id);\n+                if let Node::Variant(Variant { disr_expr: Some(constant), .. }) = parent_node\n+                    && constant.hir_id == hir_id\n+                {\n+                    // enum variant discriminants are not allowed to use any kind of generics\n+                    None\n+                } else if let Some(param_id) =\n+                    tcx.hir().opt_const_param_default_param_def_id(hir_id)\n+                {\n                     // If the def_id we are calling generics_of on is an anon ct default i.e:\n                     //\n                     // struct Foo<const N: usize = { .. }>;\n@@ -94,15 +102,15 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                         has_self: generics.has_self,\n                         has_late_bound_regions: generics.has_late_bound_regions,\n                     };\n+                } else {\n+                    // HACK(eddyb) this provides the correct generics when\n+                    // `feature(generic_const_expressions)` is enabled, so that const expressions\n+                    // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n+                    //\n+                    // Note that we do not supply the parent generics when using\n+                    // `min_const_generics`.\n+                    Some(parent_def_id.to_def_id())\n                 }\n-\n-                // HACK(eddyb) this provides the correct generics when\n-                // `feature(generic_const_expressions)` is enabled, so that const expressions\n-                // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-                //\n-                // Note that we do not supply the parent generics when using\n-                // `min_const_generics`.\n-                Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get_parent(hir_id);\n                 match parent_node {\n@@ -115,11 +123,6 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                     {\n                         Some(parent_def_id.to_def_id())\n                     }\n-                    Node::Variant(Variant { disr_expr: Some(constant), .. })\n-                        if constant.hir_id == hir_id =>\n-                    {\n-                        Some(parent_def_id.to_def_id())\n-                    }\n                     Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n                         Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n                     }"}, {"sha": "ff8bd462dd8d8277fbdd34c7bf32dc0f8b9dda2e", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -145,6 +145,15 @@ resolve_param_in_ty_of_const_param =\n     the type of const parameters must not depend on other generic parameters\n     .label = the type must not depend on the parameter `{$name}`\n \n+resolve_type_param_in_ty_of_const_param =\n+    type parameters may not be used in the type of const parameters\n+\n+resolve_const_param_in_ty_of_const_param =\n+    const parameters may not be used in the type of const parameters\n+\n+resolve_lifetime_param_in_ty_of_const_param =\n+    lifetime parameters may not be used in the type of const parameters\n+\n resolve_self_in_generic_param_default =\n     generic parameters cannot use `Self` in their defaults\n     .label = `Self` in generic parameter default\n@@ -156,12 +165,15 @@ resolve_param_in_non_trivial_anon_const =\n resolve_param_in_non_trivial_anon_const_help =\n     use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-resolve_param_in_non_trivial_anon_const_sub_type =\n+resolve_type_param_in_non_trivial_anon_const =\n     type parameters may not be used in const expressions\n \n-resolve_param_in_non_trivial_anon_const_sub_non_type =\n+resolve_const_param_in_non_trivial_anon_const =\n     const parameters may only be used as standalone arguments, i.e. `{$name}`\n \n+resolve_lifetime_param_in_non_trivial_anon_const =\n+    lifetime parameters may not be used in const expressions\n+\n resolve_unreachable_label =\n     use of unreachable label `{$name}`\n     .label = unreachable label `{$name}`\n@@ -233,3 +245,16 @@ resolve_macro_use_extern_crate_self = `#[macro_use]` is not supported on `extern\n \n resolve_accessible_unsure = not sure whether the path is accessible or not\n     .note = the type may have associated items, but we are currently not checking them\n+\n+resolve_param_in_enum_discriminant =\n+    generic parameters may not be used in enum discriminant values\n+    .label = cannot perform const operation using `{$name}`\n+\n+resolve_type_param_in_enum_discriminant =\n+    type parameters may not be used in enum discriminant values\n+\n+resolve_const_param_in_enum_discriminant =\n+    const parameters may not be used in enum discriminant values\n+\n+resolve_lifetime_param_in_enum_discriminant =\n+    lifetime parameters may not be used in enum discriminant values"}, {"sha": "72cdce5c8f05e2a1dea05a73f0faab0dfdf9f0be", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -864,25 +864,26 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             ResolutionError::ForwardDeclaredGenericParam => {\n                 self.tcx.sess.create_err(errs::ForwardDeclaredGenericParam { span })\n             }\n-            ResolutionError::ParamInTyOfConstParam(name) => {\n-                self.tcx.sess.create_err(errs::ParamInTyOfConstParam { span, name })\n-            }\n-            ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n+            ResolutionError::ParamInTyOfConstParam { name, param_kind: is_type } => self\n+                .tcx\n+                .sess\n+                .create_err(errs::ParamInTyOfConstParam { span, name, param_kind: is_type }),\n+            ResolutionError::ParamInNonTrivialAnonConst { name, param_kind: is_type } => {\n                 self.tcx.sess.create_err(errs::ParamInNonTrivialAnonConst {\n                     span,\n                     name,\n-                    sub_is_type: if is_type {\n-                        errs::ParamInNonTrivialAnonConstIsType::AType\n-                    } else {\n-                        errs::ParamInNonTrivialAnonConstIsType::NotAType { name }\n-                    },\n+                    param_kind: is_type,\n                     help: self\n                         .tcx\n                         .sess\n                         .is_nightly_build()\n                         .then_some(errs::ParamInNonTrivialAnonConstHelp),\n                 })\n             }\n+            ResolutionError::ParamInEnumDiscriminant { name, param_kind: is_type } => self\n+                .tcx\n+                .sess\n+                .create_err(errs::ParamInEnumDiscriminant { span, name, param_kind: is_type }),\n             ResolutionError::SelfInGenericParamDefault => {\n                 self.tcx.sess.create_err(errs::SelfInGenericParamDefault { span })\n             }"}, {"sha": "f6d7e8b4c873d932c5afbc5852642eaa25986253", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -326,6 +326,18 @@ pub(crate) struct ParamInTyOfConstParam {\n     #[label]\n     pub(crate) span: Span,\n     pub(crate) name: Symbol,\n+    #[subdiagnostic]\n+    pub(crate) param_kind: Option<ParamKindInTyOfConstParam>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ParamKindInTyOfConstParam {\n+    #[note(resolve_type_param_in_ty_of_const_param)]\n+    Type,\n+    #[note(resolve_const_param_in_ty_of_const_param)]\n+    Const,\n+    #[note(resolve_lifetime_param_in_ty_of_const_param)]\n+    Lifetime,\n }\n \n #[derive(Diagnostic)]\n@@ -344,7 +356,7 @@ pub(crate) struct ParamInNonTrivialAnonConst {\n     pub(crate) span: Span,\n     pub(crate) name: Symbol,\n     #[subdiagnostic]\n-    pub(crate) sub_is_type: ParamInNonTrivialAnonConstIsType,\n+    pub(crate) param_kind: ParamKindInNonTrivialAnonConst,\n     #[subdiagnostic]\n     pub(crate) help: Option<ParamInNonTrivialAnonConstHelp>,\n }\n@@ -354,11 +366,13 @@ pub(crate) struct ParamInNonTrivialAnonConst {\n pub(crate) struct ParamInNonTrivialAnonConstHelp;\n \n #[derive(Subdiagnostic)]\n-pub(crate) enum ParamInNonTrivialAnonConstIsType {\n-    #[note(resolve_param_in_non_trivial_anon_const_sub_type)]\n-    AType,\n-    #[help(resolve_param_in_non_trivial_anon_const_sub_non_type)]\n-    NotAType { name: Symbol },\n+pub(crate) enum ParamKindInNonTrivialAnonConst {\n+    #[note(resolve_type_param_in_non_trivial_anon_const)]\n+    Type,\n+    #[help(resolve_const_param_in_non_trivial_anon_const)]\n+    Const { name: Symbol },\n+    #[note(resolve_lifetime_param_in_non_trivial_anon_const)]\n+    Lifetime,\n }\n \n #[derive(Diagnostic)]\n@@ -539,3 +553,24 @@ pub(crate) struct CfgAccessibleUnsure {\n     #[primary_span]\n     pub(crate) span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_param_in_enum_discriminant)]\n+pub(crate) struct ParamInEnumDiscriminant {\n+    #[primary_span]\n+    #[label]\n+    pub(crate) span: Span,\n+    pub(crate) name: Symbol,\n+    #[subdiagnostic]\n+    pub(crate) param_kind: ParamKindInEnumDiscriminant,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum ParamKindInEnumDiscriminant {\n+    #[note(resolve_type_param_in_enum_discriminant)]\n+    Type,\n+    #[note(resolve_const_param_in_enum_discriminant)]\n+    Const,\n+    #[note(resolve_lifetime_param_in_enum_discriminant)]\n+    Lifetime,\n+}"}, {"sha": "5a3ae656ad459c1943906d793a4f99b2ff4fe961", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 53, "deletions": 29, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -13,8 +13,10 @@ use rustc_span::{Span, DUMMY_SP};\n \n use std::ptr;\n \n+use crate::errors::{ParamKindInEnumDiscriminant, ParamKindInNonTrivialAnonConst};\n use crate::late::{\n-    ConstantHasGenerics, ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind,\n+    ConstantHasGenerics, ConstantItemKind, HasGenericParams, NoConstantGenericsReason, PathSource,\n+    Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n@@ -1153,7 +1155,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n                         RibKind::ConstParamTy => {\n                             if let Some(span) = finalize {\n-                                self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n+                                self.report_error(\n+                                    span,\n+                                    ParamInTyOfConstParam {\n+                                        name: rib_ident.name,\n+                                        param_kind: None,\n+                                    },\n+                                );\n                             }\n                             return Res::Err;\n                         }\n@@ -1188,11 +1196,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n \n                         RibKind::ConstantItem(trivial, _) => {\n-                            let features = self.tcx.sess.features_untracked();\n-                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial == ConstantHasGenerics::Yes\n-                                || features.generic_const_exprs)\n-                            {\n+                            if let ConstantHasGenerics::No(cause) = trivial {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous\n                                 // constant we can't easily tell if it's generic at this stage, so\n                                 // we instead remember this and then enforce the self type to be\n@@ -1210,13 +1214,22 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     }\n                                 } else {\n                                     if let Some(span) = finalize {\n-                                        self.report_error(\n-                                            span,\n-                                            ResolutionError::ParamInNonTrivialAnonConst {\n-                                                name: rib_ident.name,\n-                                                is_type: true,\n-                                            },\n-                                        );\n+                                        let error = match cause {\n+                                            NoConstantGenericsReason::IsEnumDiscriminant => {\n+                                                ResolutionError::ParamInEnumDiscriminant {\n+                                                    name: rib_ident.name,\n+                                                    param_kind: ParamKindInEnumDiscriminant::Type,\n+                                                }\n+                                            }\n+                                            NoConstantGenericsReason::NonTrivialConstArg => {\n+                                                ResolutionError::ParamInNonTrivialAnonConst {\n+                                                    name: rib_ident.name,\n+                                                    param_kind:\n+                                                        ParamKindInNonTrivialAnonConst::Type,\n+                                                }\n+                                            }\n+                                        };\n+                                        self.report_error(span, error);\n                                         self.tcx.sess.delay_span_bug(span, CG_BUG_STR);\n                                     }\n \n@@ -1233,7 +1246,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam {\n+                                        name: rib_ident.name,\n+                                        param_kind: Some(errors::ParamKindInTyOfConstParam::Type),\n+                                    },\n                                 );\n                             }\n                             return Res::Err;\n@@ -1264,20 +1280,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         | RibKind::ForwardGenericParamBan => continue,\n \n                         RibKind::ConstantItem(trivial, _) => {\n-                            let features = self.tcx.sess.features_untracked();\n-                            // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial == ConstantHasGenerics::Yes\n-                                || features.generic_const_exprs)\n-                            {\n+                            if let ConstantHasGenerics::No(cause) = trivial {\n                                 if let Some(span) = finalize {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst {\n-                                            name: rib_ident.name,\n-                                            is_type: false,\n-                                        },\n-                                    );\n-                                    self.tcx.sess.delay_span_bug(span, CG_BUG_STR);\n+                                    let error = match cause {\n+                                        NoConstantGenericsReason::IsEnumDiscriminant => {\n+                                            ResolutionError::ParamInEnumDiscriminant {\n+                                                name: rib_ident.name,\n+                                                param_kind: ParamKindInEnumDiscriminant::Const,\n+                                            }\n+                                        }\n+                                        NoConstantGenericsReason::NonTrivialConstArg => {\n+                                            ResolutionError::ParamInNonTrivialAnonConst {\n+                                                name: rib_ident.name,\n+                                                param_kind: ParamKindInNonTrivialAnonConst::Const {\n+                                                    name: rib_ident.name,\n+                                                },\n+                                            }\n+                                        }\n+                                    };\n+                                    self.report_error(span, error);\n                                 }\n \n                                 return Res::Err;\n@@ -1291,7 +1312,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam {\n+                                        name: rib_ident.name,\n+                                        param_kind: Some(errors::ParamKindInTyOfConstParam::Const),\n+                                    },\n                                 );\n                             }\n                             return Res::Err;"}, {"sha": "2a8287d5554f874f8b6d9fbbb458721165ff61fc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 163, "deletions": 103, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -66,6 +66,15 @@ enum IsRepeatExpr {\n     Yes,\n }\n \n+/// Describes whether an `AnonConst` is a type level const arg or\n+/// some other form of anon const (i.e. inline consts or enum discriminants)\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum AnonConstKind {\n+    EnumDiscriminant,\n+    InlineConst,\n+    ConstArg(IsRepeatExpr),\n+}\n+\n impl PatternSource {\n     fn descr(self) -> &'static str {\n         match self {\n@@ -105,7 +114,7 @@ pub(crate) enum HasGenericParams {\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum ConstantHasGenerics {\n     Yes,\n-    No,\n+    No(NoConstantGenericsReason),\n }\n \n impl ConstantHasGenerics {\n@@ -114,6 +123,27 @@ impl ConstantHasGenerics {\n     }\n }\n \n+/// Reason for why an anon const is not allowed to reference generic parameters\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub(crate) enum NoConstantGenericsReason {\n+    /// Const arguments are only allowed to use generic parameters when:\n+    /// - `feature(generic_const_exprs)` is enabled\n+    /// or\n+    /// - the const argument is a sole const generic paramater, i.e. `foo::<{ N }>()`\n+    ///\n+    /// If neither of the above are true then this is used as the cause.\n+    NonTrivialConstArg,\n+    /// Enum discriminants are not allowed to reference generic parameters ever, this\n+    /// is used when an anon const is in the following position:\n+    ///\n+    /// ```rust,compile_fail\n+    /// enum Foo<const N: isize> {\n+    ///     Variant = { N }, // this anon const is not allowed to use generics\n+    /// }\n+    /// ```\n+    IsEnumDiscriminant,\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum ConstantItemKind {\n     Const,\n@@ -273,15 +303,18 @@ enum LifetimeRibKind {\n     /// Signal we cannot find which should be the anonymous lifetime.\n     ElisionFailure,\n \n-    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n-    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n-    /// lifetimes in const generics. See issue #74052 for discussion.\n-    ConstGeneric,\n+    /// This rib forbids usage of generic parameters inside of const parameter types.\n+    ///\n+    /// While this is desirable to support eventually, it is difficult to do and so is\n+    /// currently forbidden. See rust-lang/project-const-generics#28 for more info.\n+    ConstParamTy,\n \n-    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n-    /// This function will emit an error if `generic_const_exprs` is not enabled, the body\n-    /// identified by `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    AnonConst,\n+    /// Usage of generic parameters is forbidden in various positions for anon consts:\n+    /// - const arguments when `generic_const_exprs` is not enabled\n+    /// - enum discriminant values\n+    ///\n+    /// This rib emits an error when a lifetime would resolve to a lifetime parameter.\n+    ConcreteAnonConst(NoConstantGenericsReason),\n \n     /// This rib acts as a barrier to forbid reference to lifetimes of a parent item.\n     Item,\n@@ -648,13 +681,8 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         self.resolve_block(block);\n         self.parent_scope.macro_rules = old_macro_rules;\n     }\n-    fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n-        // We deal with repeat expressions explicitly in `resolve_expr`.\n-        self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n-            this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n-                this.resolve_anon_const(constant, IsRepeatExpr::No);\n-            })\n-        })\n+    fn visit_anon_const(&mut self, _constant: &'ast AnonConst) {\n+        bug!(\"encountered anon const without a manual call to `resolve_anon_const`\");\n     }\n     fn visit_expr(&mut self, expr: &'ast Expr) {\n         self.resolve_expr(expr, None);\n@@ -676,7 +704,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n     fn visit_ty(&mut self, ty: &'ast Ty) {\n         let prev = self.diagnostic_metadata.current_trait_object;\n         let prev_ty = self.diagnostic_metadata.current_type_path;\n-        match ty.kind {\n+        match &ty.kind {\n             TyKind::Ref(None, _) => {\n                 // Elided lifetime in reference: we resolve as if there was some lifetime `'_` with\n                 // NodeId `ty.id`.\n@@ -685,7 +713,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 self.resolve_elided_lifetime(ty.id, span);\n                 visit::walk_ty(self, ty);\n             }\n-            TyKind::Path(ref qself, ref path) => {\n+            TyKind::Path(qself, path) => {\n                 self.diagnostic_metadata.current_type_path = Some(ty);\n                 self.smart_resolve_path(ty.id, &qself, path, PathSource::Type);\n \n@@ -730,11 +758,11 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 visit::walk_ty(self, ty);\n                 self.lifetime_elision_candidates = candidates;\n             }\n-            TyKind::TraitObject(ref bounds, ..) => {\n+            TyKind::TraitObject(bounds, ..) => {\n                 self.diagnostic_metadata.current_trait_object = Some(&bounds[..]);\n                 visit::walk_ty(self, ty)\n             }\n-            TyKind::BareFn(ref bare_fn) => {\n+            TyKind::BareFn(bare_fn) => {\n                 let span = ty.span.shrink_to_lo().to(bare_fn.decl_span.shrink_to_lo());\n                 self.with_generic_param_rib(\n                     &bare_fn.generic_params,\n@@ -769,6 +797,13 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                     },\n                 )\n             }\n+            TyKind::Array(element_ty, length) => {\n+                self.visit_ty(element_ty);\n+                self.resolve_anon_const(length, AnonConstKind::ConstArg(IsRepeatExpr::No));\n+            }\n+            TyKind::Typeof(ct) => {\n+                self.resolve_anon_const(ct, AnonConstKind::ConstArg(IsRepeatExpr::No))\n+            }\n             _ => visit::walk_ty(self, ty),\n         }\n         self.diagnostic_metadata.current_trait_object = prev;\n@@ -994,36 +1029,25 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 // namespace first, and if that fails we try again in the value namespace. If\n                 // resolution in the value namespace succeeds, we have an generic const argument on\n                 // our hands.\n-                if let TyKind::Path(ref qself, ref path) = ty.kind {\n+                if let TyKind::Path(None, ref path) = ty.kind {\n                     // We cannot disambiguate multi-segment paths right now as that requires type\n                     // checking.\n-                    if path.segments.len() == 1 && path.segments[0].args.is_none() {\n+                    if path.is_potential_trivial_const_arg() {\n                         let mut check_ns = |ns| {\n                             self.maybe_resolve_ident_in_lexical_scope(path.segments[0].ident, ns)\n                                 .is_some()\n                         };\n                         if !check_ns(TypeNS) && check_ns(ValueNS) {\n-                            // This must be equivalent to `visit_anon_const`, but we cannot call it\n-                            // directly due to visitor lifetimes so we have to copy-paste some code.\n-                            //\n-                            // Note that we might not be inside of an repeat expression here,\n-                            // but considering that `IsRepeatExpr` is only relevant for\n-                            // non-trivial constants this is doesn't matter.\n-                            self.with_constant_rib(\n-                                IsRepeatExpr::No,\n-                                ConstantHasGenerics::Yes,\n-                                None,\n+                            self.resolve_anon_const_manual(\n+                                true,\n+                                AnonConstKind::ConstArg(IsRepeatExpr::No),\n                                 |this| {\n                                     this.smart_resolve_path(\n                                         ty.id,\n-                                        qself,\n+                                        &None,\n                                         path,\n                                         PathSource::Expr(None),\n                                     );\n-\n-                                    if let Some(ref qself) = *qself {\n-                                        this.visit_ty(&qself.ty);\n-                                    }\n                                     this.visit_path(path, ty.id);\n                                 },\n                             );\n@@ -1037,7 +1061,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 self.visit_ty(ty);\n             }\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt, visit::LifetimeCtxt::GenericArg),\n-            GenericArg::Const(ct) => self.visit_anon_const(ct),\n+            GenericArg::Const(ct) => {\n+                self.resolve_anon_const(ct, AnonConstKind::ConstArg(IsRepeatExpr::No))\n+            }\n         }\n         self.diagnostic_metadata.currently_processing_generics = prev;\n     }\n@@ -1053,7 +1079,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         match constraint.kind {\n             AssocConstraintKind::Equality { ref term } => match term {\n                 Term::Ty(ty) => self.visit_ty(ty),\n-                Term::Const(c) => self.visit_anon_const(c),\n+                Term::Const(c) => {\n+                    self.resolve_anon_const(c, AnonConstKind::ConstArg(IsRepeatExpr::No))\n+                }\n             },\n             AssocConstraintKind::Bound { ref bounds } => {\n                 walk_list!(self, visit_param_bound, bounds, BoundKind::Bound);\n@@ -1102,8 +1130,8 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                             | LifetimeRibKind::AnonymousReportError\n                             | LifetimeRibKind::Elided(_)\n                             | LifetimeRibKind::ElisionFailure\n-                            | LifetimeRibKind::AnonConst\n-                            | LifetimeRibKind::ConstGeneric => {}\n+                            | LifetimeRibKind::ConcreteAnonConst(_)\n+                            | LifetimeRibKind::ConstParamTy => {}\n                         }\n                     }\n                 }\n@@ -1164,7 +1192,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 InlineAsmOperand::Const { anon_const, .. } => {\n                     // Although this is `DefKind::AnonConst`, it is allowed to reference outer\n                     // generic parameters like an inline const.\n-                    self.resolve_inline_const(anon_const);\n+                    self.resolve_anon_const(anon_const, AnonConstKind::InlineConst);\n                 }\n                 InlineAsmOperand::Sym { sym } => self.visit_inline_asm_sym(sym),\n             }\n@@ -1188,6 +1216,10 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         visit::walk_variant(self, v)\n     }\n \n+    fn visit_variant_discr(&mut self, discr: &'ast AnonConst) {\n+        self.resolve_anon_const(discr, AnonConstKind::EnumDiscriminant);\n+    }\n+\n     fn visit_field_def(&mut self, f: &'ast FieldDef) {\n         self.resolve_doc_links(&f.attrs, MaybeExported::Ok(f.id));\n         visit::walk_field_def(self, f)\n@@ -1386,7 +1418,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n                         this.ribs[TypeNS].push(Rib::new(RibKind::ConstParamTy));\n                         this.ribs[ValueNS].push(Rib::new(RibKind::ConstParamTy));\n-                        this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n+                        this.with_lifetime_rib(LifetimeRibKind::ConstParamTy, |this| {\n                             this.visit_ty(ty)\n                         });\n                         this.ribs[TypeNS].pop().unwrap();\n@@ -1395,9 +1427,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         if let Some(ref expr) = default {\n                             this.ribs[TypeNS].push(forward_ty_ban_rib);\n                             this.ribs[ValueNS].push(forward_const_ban_rib);\n-                            this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n-                                this.resolve_anon_const(expr, IsRepeatExpr::No)\n-                            });\n+                            this.resolve_anon_const(\n+                                expr,\n+                                AnonConstKind::ConstArg(IsRepeatExpr::No),\n+                            );\n                             forward_const_ban_rib = this.ribs[ValueNS].pop().unwrap();\n                             forward_ty_ban_rib = this.ribs[TypeNS].pop().unwrap();\n                         }\n@@ -1475,8 +1508,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                                         LifetimeUseSet::Many\n                                     }),\n                                     LifetimeRibKind::Generics { .. }\n-                                    | LifetimeRibKind::ConstGeneric => None,\n-                                    LifetimeRibKind::AnonConst => {\n+                                    | LifetimeRibKind::ConstParamTy => None,\n+                                    LifetimeRibKind::ConcreteAnonConst(_) => {\n                                         span_bug!(ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n                                     }\n                                 })\n@@ -1495,17 +1528,17 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             match rib.kind {\n                 LifetimeRibKind::Item => break,\n-                LifetimeRibKind::ConstGeneric => {\n-                    self.emit_non_static_lt_in_const_generic_error(lifetime);\n+                LifetimeRibKind::ConstParamTy => {\n+                    self.emit_non_static_lt_in_const_param_ty_error(lifetime);\n                     self.record_lifetime_res(\n                         lifetime.id,\n                         LifetimeRes::Error,\n                         LifetimeElisionCandidate::Ignore,\n                     );\n                     return;\n                 }\n-                LifetimeRibKind::AnonConst => {\n-                    self.maybe_emit_forbidden_non_static_lifetime_error(lifetime);\n+                LifetimeRibKind::ConcreteAnonConst(cause) => {\n+                    self.emit_forbidden_non_static_lifetime_error(cause, lifetime);\n                     self.record_lifetime_res(\n                         lifetime.id,\n                         LifetimeRes::Error,\n@@ -1604,9 +1637,9 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     return;\n                 }\n                 LifetimeRibKind::Item => break,\n-                LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstGeneric => {}\n-                LifetimeRibKind::AnonConst => {\n-                    // There is always an `Elided(LifetimeRes::Static)` inside an `AnonConst`.\n+                LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstParamTy => {}\n+                LifetimeRibKind::ConcreteAnonConst(_) => {\n+                    // There is always an `Elided(LifetimeRes::Infer)` inside an `AnonConst`.\n                     span_bug!(lifetime.ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n                 }\n             }\n@@ -1826,9 +1859,9 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         self.report_missing_lifetime_specifiers(vec![missing_lifetime], None);\n                         break;\n                     }\n-                    LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstGeneric => {}\n-                    LifetimeRibKind::AnonConst => {\n-                        // There is always an `Elided(LifetimeRes::Static)` inside an `AnonConst`.\n+                    LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstParamTy => {}\n+                    LifetimeRibKind::ConcreteAnonConst(_) => {\n+                        // There is always an `Elided(LifetimeRes::Infer)` inside an `AnonConst`.\n                         span_bug!(elided_lifetime_span, \"unexpected rib kind: {:?}\", rib.kind)\n                     }\n                 }\n@@ -2560,7 +2593,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n-    // HACK(min_const_generics,const_evaluatable_unchecked): We\n+    // HACK(min_const_generics, generic_const_exprs): We\n     // want to keep allowing `[0; std::mem::size_of::<*mut T>()]`\n     // with a future compat lint for now. We do this by adding an\n     // additional special case for repeat expressions.\n@@ -2576,18 +2609,26 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n-        self.with_rib(ValueNS, RibKind::ConstantItem(may_use_generics, item), |this| {\n-            this.with_rib(\n-                TypeNS,\n-                RibKind::ConstantItem(\n-                    may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n-                    item,\n-                ),\n-                |this| {\n-                    this.with_label_rib(RibKind::ConstantItem(may_use_generics, item), f);\n-                },\n-            )\n-        });\n+        let f = |this: &mut Self| {\n+            this.with_rib(ValueNS, RibKind::ConstantItem(may_use_generics, item), |this| {\n+                this.with_rib(\n+                    TypeNS,\n+                    RibKind::ConstantItem(\n+                        may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n+                        item,\n+                    ),\n+                    |this| {\n+                        this.with_label_rib(RibKind::ConstantItem(may_use_generics, item), f);\n+                    },\n+                )\n+            })\n+        };\n+\n+        if let ConstantHasGenerics::No(cause) = may_use_generics {\n+            self.with_lifetime_rib(LifetimeRibKind::ConcreteAnonConst(cause), f)\n+        } else {\n+            f(self)\n+        }\n     }\n \n     fn with_current_self_type<T>(&mut self, self_type: &Ty, f: impl FnOnce(&mut Self) -> T) -> T {\n@@ -3924,24 +3965,54 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         debug!(\"(resolving block) leaving block\");\n     }\n \n-    fn resolve_anon_const(&mut self, constant: &'ast AnonConst, is_repeat: IsRepeatExpr) {\n-        debug!(\"resolve_anon_const {:?} is_repeat: {:?}\", constant, is_repeat);\n-        self.with_constant_rib(\n-            is_repeat,\n-            if constant.value.is_potential_trivial_const_param() {\n-                ConstantHasGenerics::Yes\n-            } else {\n-                ConstantHasGenerics::No\n-            },\n-            None,\n-            |this| visit::walk_anon_const(this, constant),\n+    fn resolve_anon_const(&mut self, constant: &'ast AnonConst, anon_const_kind: AnonConstKind) {\n+        debug!(\n+            \"resolve_anon_const(constant: {:?}, anon_const_kind: {:?})\",\n+            constant, anon_const_kind\n         );\n+\n+        self.resolve_anon_const_manual(\n+            constant.value.is_potential_trivial_const_arg(),\n+            anon_const_kind,\n+            |this| this.resolve_expr(&constant.value, None),\n+        )\n     }\n \n-    fn resolve_inline_const(&mut self, constant: &'ast AnonConst) {\n-        debug!(\"resolve_anon_const {constant:?}\");\n-        self.with_constant_rib(IsRepeatExpr::No, ConstantHasGenerics::Yes, None, |this| {\n-            visit::walk_anon_const(this, constant)\n+    /// There are a few places that we need to resolve an anon const but we did not parse an\n+    /// anon const so cannot provide an `&'ast AnonConst`. Right now this is just unbraced\n+    /// const arguments that were parsed as type arguments, and `legact_const_generics` which\n+    /// parse as normal function argument expressions. To avoid duplicating the code for resolving\n+    /// an anon const we have this function which lets the caller manually call `resolve_expr` or\n+    /// `smart_resolve_path`.\n+    fn resolve_anon_const_manual(\n+        &mut self,\n+        is_trivial_const_arg: bool,\n+        anon_const_kind: AnonConstKind,\n+        resolve_expr: impl FnOnce(&mut Self),\n+    ) {\n+        let is_repeat_expr = match anon_const_kind {\n+            AnonConstKind::ConstArg(is_repeat_expr) => is_repeat_expr,\n+            _ => IsRepeatExpr::No,\n+        };\n+\n+        let may_use_generics = match anon_const_kind {\n+            AnonConstKind::EnumDiscriminant => {\n+                ConstantHasGenerics::No(NoConstantGenericsReason::IsEnumDiscriminant)\n+            }\n+            AnonConstKind::InlineConst => ConstantHasGenerics::Yes,\n+            AnonConstKind::ConstArg(_) => {\n+                if self.r.tcx.features().generic_const_exprs || is_trivial_const_arg {\n+                    ConstantHasGenerics::Yes\n+                } else {\n+                    ConstantHasGenerics::No(NoConstantGenericsReason::NonTrivialConstArg)\n+                }\n+            }\n+        };\n+\n+        self.with_constant_rib(is_repeat_expr, may_use_generics, None, |this| {\n+            this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n+                resolve_expr(this);\n+            });\n         });\n     }\n \n@@ -4046,17 +4117,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     // Constant arguments need to be treated as AnonConst since\n                     // that is how they will be later lowered to HIR.\n                     if const_args.contains(&idx) {\n-                        self.with_constant_rib(\n-                            IsRepeatExpr::No,\n-                            if argument.is_potential_trivial_const_param() {\n-                                ConstantHasGenerics::Yes\n-                            } else {\n-                                ConstantHasGenerics::No\n-                            },\n-                            None,\n-                            |this| {\n-                                this.resolve_expr(argument, None);\n-                            },\n+                        self.resolve_anon_const_manual(\n+                            argument.is_potential_trivial_const_arg(),\n+                            AnonConstKind::ConstArg(IsRepeatExpr::No),\n+                            |this| this.resolve_expr(argument, None),\n                         );\n                     } else {\n                         self.resolve_expr(argument, None);\n@@ -4115,14 +4179,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);\n-                self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n-                    this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Infer), |this| {\n-                        this.resolve_anon_const(ct, IsRepeatExpr::Yes)\n-                    })\n-                });\n+                self.resolve_anon_const(ct, AnonConstKind::ConstArg(IsRepeatExpr::Yes));\n             }\n             ExprKind::ConstBlock(ref ct) => {\n-                self.resolve_inline_const(ct);\n+                self.resolve_anon_const(ct, AnonConstKind::InlineConst);\n             }\n             ExprKind::Index(ref elem, ref idx) => {\n                 self.resolve_expr(elem, Some(expr));"}, {"sha": "c9131d8c8a917d181e9c3a8bfb109a1d25d01f27", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,7 +1,7 @@\n use crate::diagnostics::{ImportSuggestion, LabelSuggestion, TypoSuggestion};\n use crate::late::{AliasPossibility, LateResolutionVisitor, RibKind};\n use crate::late::{LifetimeBinderKind, LifetimeRes, LifetimeRibKind, LifetimeUseSet};\n-use crate::path_names_to_string;\n+use crate::{errors, path_names_to_string};\n use crate::{Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n@@ -22,7 +22,6 @@ use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID};\n use rustc_hir::PrimTy;\n use rustc_session::lint;\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n@@ -35,6 +34,8 @@ use std::ops::Deref;\n \n use thin_vec::ThinVec;\n \n+use super::NoConstantGenericsReason;\n+\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure.\n@@ -2316,37 +2317,56 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         }\n     }\n \n-    pub(crate) fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &ast::Lifetime) {\n-        struct_span_err!(\n-            self.r.tcx.sess,\n-            lifetime_ref.ident.span,\n-            E0771,\n-            \"use of non-static lifetime `{}` in const generic\",\n-            lifetime_ref.ident\n-        )\n-        .note(\n-            \"for more information, see issue #74052 \\\n-            <https://github.com/rust-lang/rust/issues/74052>\",\n-        )\n-        .emit();\n+    pub(crate) fn emit_non_static_lt_in_const_param_ty_error(&self, lifetime_ref: &ast::Lifetime) {\n+        self.r\n+            .tcx\n+            .sess\n+            .create_err(errors::ParamInTyOfConstParam {\n+                span: lifetime_ref.ident.span,\n+                name: lifetime_ref.ident.name,\n+                param_kind: Some(errors::ParamKindInTyOfConstParam::Lifetime),\n+            })\n+            .emit();\n     }\n \n     /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n     /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n     /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    pub(crate) fn maybe_emit_forbidden_non_static_lifetime_error(\n+    pub(crate) fn emit_forbidden_non_static_lifetime_error(\n         &self,\n+        cause: NoConstantGenericsReason,\n         lifetime_ref: &ast::Lifetime,\n     ) {\n-        let feature_active = self.r.tcx.sess.features_untracked().generic_const_exprs;\n-        if !feature_active {\n-            feature_err(\n-                &self.r.tcx.sess.parse_sess,\n-                sym::generic_const_exprs,\n-                lifetime_ref.ident.span,\n-                \"a non-static lifetime is not allowed in a `const`\",\n-            )\n-            .emit();\n+        match cause {\n+            NoConstantGenericsReason::IsEnumDiscriminant => {\n+                self.r\n+                    .tcx\n+                    .sess\n+                    .create_err(errors::ParamInEnumDiscriminant {\n+                        span: lifetime_ref.ident.span,\n+                        name: lifetime_ref.ident.name,\n+                        param_kind: errors::ParamKindInEnumDiscriminant::Lifetime,\n+                    })\n+                    .emit();\n+            }\n+            NoConstantGenericsReason::NonTrivialConstArg => {\n+                assert!(!self.r.tcx.features().generic_const_exprs);\n+                self.r\n+                    .tcx\n+                    .sess\n+                    .create_err(errors::ParamInNonTrivialAnonConst {\n+                        span: lifetime_ref.ident.span,\n+                        name: lifetime_ref.ident.name,\n+                        param_kind: errors::ParamKindInNonTrivialAnonConst::Lifetime,\n+                        help: self\n+                            .r\n+                            .tcx\n+                            .sess\n+                            .is_nightly_build()\n+                            .then_some(errors::ParamInNonTrivialAnonConstHelp),\n+                    })\n+                    .emit();\n+            }\n         }\n     }\n "}, {"sha": "590609f9ed3dbfe4d268a25c41bee942959f67ab", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -21,6 +21,9 @@\n #[macro_use]\n extern crate tracing;\n \n+use errors::{\n+    ParamKindInEnumDiscriminant, ParamKindInNonTrivialAnonConst, ParamKindInTyOfConstParam,\n+};\n use rustc_arena::{DroplessArena, TypedArena};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::{self as ast, attr, NodeId, CRATE_NODE_ID};\n@@ -223,11 +226,15 @@ enum ResolutionError<'a> {\n     /// Error E0128: generic parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredGenericParam,\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n-    ParamInTyOfConstParam(Symbol),\n+    ParamInTyOfConstParam { name: Symbol, param_kind: Option<ParamKindInTyOfConstParam> },\n     /// generic parameters must not be used inside const evaluations.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n-    ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n+    ParamInNonTrivialAnonConst { name: Symbol, param_kind: ParamKindInNonTrivialAnonConst },\n+    /// generic parameters must not be used inside enum discriminants.\n+    ///\n+    /// This error is emitted even with `generic_const_exprs`.\n+    ParamInEnumDiscriminant { name: Symbol, param_kind: ParamKindInEnumDiscriminant },\n     /// Error E0735: generic parameters with a default cannot use `Self`\n     SelfInGenericParamDefault,\n     /// Error E0767: use of unreachable label"}, {"sha": "60efcb768cb076b7e18513ddff42738ca6201bc1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1033,6 +1033,7 @@ symbols! {\n         non_exhaustive_omitted_patterns_lint,\n         non_lifetime_binders,\n         non_modrs_mods,\n+        none,\n         nontemporal_store,\n         noop_method_borrow,\n         noop_method_clone,"}, {"sha": "d0eaa9fd7ffac3dd33bdc810e37abba949d829a1", "filename": "config.example.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -750,6 +750,10 @@ changelog-seen = 2\n # This option will override the same option under [build] section.\n #profiler = build.profiler (bool)\n \n+# This option supports enable `rpath` in each target independently, \n+# and will override the same option under [rust] section. It only works on Unix platforms\n+#rpath = rust.rpath (bool)\n+\n # Force static or dynamic linkage of the standard library for this target. If\n # this target is a host for rustc, this will also affect the linkage of the\n # compiler itself. This is useful for building rustc on targets that normally"}, {"sha": "59fa91c1066dc4ef4f225e5eca569848dd335941", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -113,7 +113,6 @@\n #![feature(const_maybe_uninit_write)]\n #![feature(const_maybe_uninit_zeroed)]\n #![feature(const_pin)]\n-#![feature(const_ptr_read)]\n #![feature(const_refs_to_cell)]\n #![feature(const_size_of_val)]\n #![feature(const_waker)]"}, {"sha": "d37888c27bde3644d087812acc285722e2186835", "filename": "library/core/src/fmt/rt.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -152,6 +152,21 @@ impl<'a> Argument<'a> {\n             None\n         }\n     }\n+\n+    /// Used by `format_args` when all arguments are gone after inlining,\n+    /// when using `&[]` would incorrectly allow for a bigger lifetime.\n+    ///\n+    /// This fails without format argument inlining, and that shouldn't be different\n+    /// when the argument is inlined:\n+    ///\n+    /// ```compile_fail,E0716\n+    /// let f = format_args!(\"{}\", \"a\");\n+    /// println!(\"{f}\");\n+    /// ```\n+    #[inline(always)]\n+    pub fn none() -> [Self; 0] {\n+        []\n+    }\n }\n \n /// This struct represents the unsafety of constructing an `Arguments`."}, {"sha": "9c02029f93513ba8f7791a4fe0d43461522ded19", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -2260,7 +2260,7 @@ extern \"rust-intrinsic\" {\n     /// This intrinsic can *only* be called where the pointer is a local without\n     /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n     /// trivially obeys runtime-MIR rules about derefs in operands.\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[rustc_nounwind]\n     pub fn read_via_copy<T>(ptr: *const T) -> T;\n "}, {"sha": "26c51e840352212456a04d57a0e13d1253b24499", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -140,7 +140,6 @@\n #![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]\n-#![feature(const_ptr_read)]\n #![feature(const_ptr_sub_ptr)]\n #![feature(const_ptr_write)]\n #![feature(const_raw_ptr_comparison)]"}, {"sha": "5ee1b5e4afc785c713c72ca229de7bcadd0dbec5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1195,7 +1195,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1236,7 +1236,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "ecbf4e66fa4897847e438d9efe1ece01d56d4a87", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1133,7 +1133,8 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// [valid]: self#safety\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read<T>(src: *const T) -> T {\n     // It would be semantically correct to implement this via `copy_nonoverlapping`\n@@ -1249,7 +1250,8 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+#[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_allow_const_fn_unstable(const_mut_refs, const_maybe_uninit_as_mut_ptr)]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n     let mut tmp = MaybeUninit::<T>::uninit();"}, {"sha": "5edd291fb76aa5384c9ac7e4d599b61d33b2479c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1305,7 +1305,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n@@ -1346,7 +1346,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[inline(always)]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T"}, {"sha": "d2d0dd3387fbc890569da3f3289048e1934f7093", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -124,12 +124,10 @@ macro_rules! iterator {\n             fn next(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer\n-                // must be non-null, and slices over non-ZSTs must also have a\n-                // non-null end pointer. The call to `next_unchecked!` is safe\n-                // since we check if the iterator is empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_unchecked!` is\n+                // safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }\n@@ -339,12 +337,10 @@ macro_rules! iterator {\n             fn next_back(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,\n-                // and slices over non-ZSTs must also have a non-null end pointer.\n-                // The call to `next_back_unchecked!` is safe since we check if the iterator is\n-                // empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_back_unchecked!`\n+                // is safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }"}, {"sha": "3c49d1705e5ca60a381d95f0babb3a4736d81621", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -18,7 +18,6 @@\n #![feature(const_pointer_byte_offsets)]\n #![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]\n-#![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_trait_impl)]\n #![feature(const_likely)]"}, {"sha": "d6924cf2cfb23c3d8ed7716b32e242ac5e5028bd", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -27,6 +27,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n   from the default rust toolchain. [#78513](https://github.com/rust-lang/rust/pull/78513)\n - Add options for enabling overflow checks, one for std (`overflow-checks-std`) and one for everything else (`overflow-checks`). Both default to false.\n - Add llvm option `enable-warnings` to have control on llvm compilation warnings. Default to false.\n+- Add `rpath` option in `target` section to support set rpath option for each target independently. [#111242](https://github.com/rust-lang/rust/pull/111242)\n \n \n ## [Version 2] - 2020-09-25"}, {"sha": "237f65b039f824aa6827c6133de4b54d89451b34", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1623,7 +1623,7 @@ impl<'a> Builder<'a> {\n         // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n         // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n         // to change a flag in a binary?\n-        if self.config.rust_rpath && util::use_host_linker(target) {\n+        if self.config.rpath_enabled(target) && util::use_host_linker(target) {\n             let rpath = if target.contains(\"apple\") {\n                 // Note that we need to take one extra step on macOS to also pass\n                 // `-Wl,-instal_name,@rpath/...` to get things to work right. To"}, {"sha": "bf3bc3247acafa780936e377f1a1f81d7045e88e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -467,6 +467,7 @@ pub struct Target {\n     pub ndk: Option<PathBuf>,\n     pub sanitizers: Option<bool>,\n     pub profiler: Option<bool>,\n+    pub rpath: Option<bool>,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub musl_libdir: Option<PathBuf>,\n@@ -812,6 +813,7 @@ define_config! {\n         android_ndk: Option<String> = \"android-ndk\",\n         sanitizers: Option<bool> = \"sanitizers\",\n         profiler: Option<bool> = \"profiler\",\n+        rpath: Option<bool> = \"rpath\",\n         crt_static: Option<bool> = \"crt-static\",\n         musl_root: Option<String> = \"musl-root\",\n         musl_libdir: Option<String> = \"musl-libdir\",\n@@ -1318,6 +1320,7 @@ impl Config {\n                 target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);\n                 target.sanitizers = cfg.sanitizers;\n                 target.profiler = cfg.profiler;\n+                target.rpath = cfg.rpath;\n \n                 config.target_config.insert(TargetSelection::from_user(&triple), target);\n             }\n@@ -1649,6 +1652,10 @@ impl Config {\n         self.target_config.values().any(|t| t.profiler == Some(true)) || self.profiler\n     }\n \n+    pub fn rpath_enabled(&self, target: TargetSelection) -> bool {\n+        self.target_config.get(&target).map(|t| t.rpath).flatten().unwrap_or(self.rust_rpath)\n+    }\n+\n     pub fn llvm_enabled(&self) -> bool {\n         self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n     }"}, {"sha": "ff265fba6e2fec760b3581f5acce5495fe61707d", "filename": "src/tools/miri/tests/fail/const-ub-checks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconst-ub-checks.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_ptr_read)]\n \n const UNALIGNED_READ: () = unsafe {\n     let x = &[0u8; 4];"}, {"sha": "9473eabe442ce2380a0c642909e845c1ccb7aca5", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -9,7 +9,7 @@ use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n-const ISSUES_ENTRY_LIMIT: usize = 1953;\n+const ISSUES_ENTRY_LIMIT: usize = 1920;\n const ROOT_ENTRY_LIMIT: usize = 895;\n \n fn check_entries(tests_path: &Path, bad: &mut bool) {"}, {"sha": "392e433807640102b60e20dd3c5ce9c2a9e6a66a", "filename": "tests/codegen/slice-iter-nonnull.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-iter-nonnull.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,42 @@\n+// no-system-llvm\n+// compile-flags: -O\n+// ignore-debug (these add extra checks that make it hard to verify)\n+#![crate_type = \"lib\"]\n+\n+// The slice iterator used to `assume` that the `start` pointer was non-null.\n+// That ought to be unneeded, though, since the type is `NonNull`, so this test\n+// confirms that the appropriate metadata is included to denote that.\n+\n+// CHECK-LABEL: @slice_iter_next(\n+#[no_mangle]\n+pub fn slice_iter_next<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %it,\n+\n+    it.next()\n+}\n+\n+// CHECK-LABEL: @slice_iter_next_back(\n+#[no_mangle]\n+pub fn slice_iter_next_back<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %[[ENDP]],\n+\n+    it.next_back()\n+}"}, {"sha": "ce0a3c7ca526cdf9d45fff79b85ae84bd795b55a", "filename": "tests/ui/closures/issue-868.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fclosures%2Fissue-868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fclosures%2Fissue-868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-868.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-868.rs"}, {"sha": "ffc7f116a94ef584380d2740621758ff74c0913e", "filename": "tests/ui/const-generics/assoc_const_as_type_argument.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,13 @@\n+trait Trait {\n+    const ASSOC: usize;\n+}\n+\n+fn bar<const N: usize>() {}\n+\n+fn foo<T: Trait>() {\n+    bar::<<T as Trait>::ASSOC>();\n+    //~^ ERROR: expected associated type, found associated constant `Trait::ASSOC`\n+    //~| ERROR: unresolved item provided when a constant was expected\n+}\n+\n+fn main() {}"}, {"sha": "ac009546135060e5acda79b0baa1e921c7104998", "filename": "tests/ui/const-generics/assoc_const_as_type_argument.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fassoc_const_as_type_argument.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,21 @@\n+error[E0575]: expected associated type, found associated constant `Trait::ASSOC`\n+  --> $DIR/assoc_const_as_type_argument.rs:8:11\n+   |\n+LL |     bar::<<T as Trait>::ASSOC>();\n+   |           ^^^^^^^^^^^^^^^^^^^ not a associated type\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/assoc_const_as_type_argument.rs:8:11\n+   |\n+LL |     bar::<<T as Trait>::ASSOC>();\n+   |           ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     bar::<{ <T as Trait>::ASSOC }>();\n+   |           +                     +\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0575, E0747.\n+For more information about an error, try `rustc --explain E0575`."}, {"sha": "463a37d7e3d1357f3c4d6d8d63c9ff8a3c15aa11", "filename": "tests/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "patch": "@@ -1,163 +0,0 @@\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n-   |\n-LL |     let _: [u8; faz::<'a>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:21:23\n-   |\n-LL |     let _: [u8; faz::<'b>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n-   |\n-LL |     let _: Foo<{ faz::<'a>(&()) }>;\n-   |                        ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n-   |\n-LL |     let _: Foo<{ faz::<'b>(&()) }>;\n-   |                        ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:13:12\n-   |\n-LL |     let _: [u8; foo::<T>()];\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:15:12\n-   |\n-LL |     let _: [u8; bar::<N>()];\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:36:12\n-   |\n-LL |     let _: Foo<{ foo::<T>() }>;\n-   |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:38:12\n-   |\n-LL |     let _: Foo<{ bar::<N>() }>;\n-   |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:25:17\n-   |\n-LL |     let _ = [0; foo::<T>()];\n-   |                 ^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:27:17\n-   |\n-LL |     let _ = [0; bar::<N>()];\n-   |                 ^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n-   |\n-LL |     let _ = [0; faz::<'a>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n-   |\n-LL |     let _ = [0; faz::<'b>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:47:19\n-   |\n-LL |     let _ = Foo::<{ foo::<T>() }>;\n-   |                   ^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n-\n-error: unconstrained generic constant\n-  --> $DIR/const-arg-in-const-arg.rs:49:19\n-   |\n-LL |     let _ = Foo::<{ bar::<N>() }>;\n-   |                   ^^^^^^^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:52:27\n-   |\n-LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n-   |                           ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:55:27\n-   |\n-LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n-   |                           ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: aborting due to 16 previous errors\n-\n-For more information about this error, try `rustc --explain E0794`."}, {"sha": "f1f22e2342d4dfc45be03c140475d40a26d9ea39", "filename": "tests/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 103, "deletions": 103, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:13:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n@@ -8,97 +8,97 @@ LL |     let _: [u8; foo::<T>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:20:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:23:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:32:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:31:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:35:23\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:36:24\n+  --> $DIR/const-arg-in-const-arg.rs:34:24\n    |\n LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n@@ -107,52 +107,52 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:37:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:43:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:39:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:40:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:46:24\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:42:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n-   |                        ^^\n+   |                        ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:47:27\n+  --> $DIR/const-arg-in-const-arg.rs:43:27\n    |\n LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n@@ -161,52 +161,52 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:49:27\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:52:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:46:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:54:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:48:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:55:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:57:27\n+error: generic parameters may not be used in const operations\n+  --> $DIR/const-arg-in-const-arg.rs:51:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n-   |                           ^^\n+   |                           ^^ cannot perform const operation using `'b`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:15:23\n+  --> $DIR/const-arg-in-const-arg.rs:16:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^\n@@ -223,7 +223,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n@@ -235,13 +235,13 @@ LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:35:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^\n@@ -252,25 +252,25 @@ LL |     let _: Foo<{ bar::<{ N }>() }>;\n    |                        +   +\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n+  --> $DIR/const-arg-in-const-arg.rs:37:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n+  --> $DIR/const-arg-in-const-arg.rs:40:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n@@ -284,7 +284,7 @@ LL |     let _ = [0; foo::<T>()];\n    = note: this may fail depending on what value the parameter takes\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:26:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^\n@@ -295,31 +295,31 @@ LL |     let _ = [0; bar::<{ N }>()];\n    |                       +   +\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n+  --> $DIR/const-arg-in-const-arg.rs:28:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n+  --> $DIR/const-arg-in-const-arg.rs:31:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:49:27\n+  --> $DIR/const-arg-in-const-arg.rs:44:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^\n@@ -330,30 +330,30 @@ LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n    |                           +   +\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:52:27\n+  --> $DIR/const-arg-in-const-arg.rs:46:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0794]: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:55:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n    |\n note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n+  --> $DIR/const-arg-in-const-arg.rs:10:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: aborting due to 36 previous errors\n \n-Some errors have detailed explanations: E0658, E0747, E0794.\n-For more information about an error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0747, E0794.\n+For more information about an error, try `rustc --explain E0747`."}, {"sha": "9eaa54347f18e46b6191b51a87a720261b31889c", "filename": "tests/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,4 +1,6 @@\n-// revisions: full min\n+// revisions: min\n+// we use a single revision because t his shoudl have a `full` revision\n+// but right now that ICEs and I(@BoxyUwU) could not get stderr normalization to work\n \n #![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n@@ -11,50 +13,42 @@ const fn baz<'a>(_: &'a ()) -> usize where &'a (): Sized { 13 }\n struct Foo<const N: usize>;\n fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n     let _: [u8; foo::<T>()]; //[min]~ ERROR generic parameters may not\n-                             //[full]~^ ERROR unconstrained generic constant\n     let _: [u8; bar::<N>()]; //[min]~ ERROR generic parameters may not\n                              //[min]~^ ERROR unresolved item provided when a constant was expected\n-                             //[full]~^^ ERROR unconstrained generic constant\n-    let _: [u8; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-    let _: [u8; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _: [u8; faz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: [u8; baz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+    let _: [u8; faz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: [u8; baz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n \n     let _ = [0; foo::<T>()]; //[min]~ ERROR constant expression depends on a generic parameter\n-                             //[full]~^ ERROR unconstrained generic constant\n     let _ = [0; bar::<N>()]; //[min]~ ERROR generic parameters may not\n                              //[min]~^ ERROR unresolved item provided when a constant was expected\n-                             //[full]~^^ ERROR unconstrained generic constant\n-    let _ = [0; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n-    let _ = [0; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n-                                 //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _ = [0; faz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = [0; baz::<'a>(&())]; //[min]~ ERROR generic parameters may not\n+    let _ = [0; faz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n+                                 //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = [0; baz::<'b>(&())]; //[min]~ ERROR generic parameters may not\n     let _: Foo<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n-                                //[full]~^ ERROR unconstrained generic constant\n     let _: Foo<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n                                 //[min]~^ ERROR unresolved item provided when a constant was expected\n-                                //[full]~^^ ERROR unconstrained generic constant\n-    let _: Foo<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                    //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-    let _: Foo<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                    //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _: Foo<{ faz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                    //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: Foo<{ baz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+    let _: Foo<{ faz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                    //[min]~^ ERROR cannot specify lifetime arguments\n+    let _: Foo<{ baz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n     let _ = Foo::<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n-                                   //[full]~^ ERROR unconstrained generic constant\n     let _ = Foo::<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n                                    //[min]~^ ERROR unresolved item provided when a constant was expected\n-                                   //[full]~^^ ERROR unconstrained generic constant\n-    let _ = Foo::<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                       //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n-    let _ = Foo::<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n-                                       //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _ = Foo::<{ faz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                       //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = Foo::<{ baz::<'a>(&()) }>; //[min]~ ERROR generic parameters may not\n+    let _ = Foo::<{ faz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n+                                       //[min]~^ ERROR cannot specify lifetime arguments\n+    let _ = Foo::<{ baz::<'b>(&()) }>; //[min]~ ERROR generic parameters may not\n }\n \n fn main() {}"}, {"sha": "310ca75fdc90c0e7930d24914160de0971263775", "filename": "tests/ui/const-generics/const-argument-non-static-lifetime.min.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,12 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-argument-non-static-lifetime.rs:14:17\n    |\n LL |         let _: &'a ();\n-   |                 ^^\n+   |                 ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "df2f3b7918cf948af96304137d2801927cd021cb", "filename": "tests/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -11,7 +11,7 @@ fn test<const N: usize>() {}\n \n fn wow<'a>() -> &'a () {\n     test::<{\n-        let _: &'a (); //[min]~ ERROR a non-static lifetime\n+        let _: &'a (); //[min]~ ERROR generic parameters may not be used in const operations\n         3\n     }>();\n     &()"}, {"sha": "539d840f0a80301a880e7c2732152f959240b25b", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.full.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f829526ca1dc8e8c8848c4cfe665c7a03f6c611d", "filename": "tests/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                                    ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:40\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:11:47"}, {"sha": "c5160d1c3848d23690343eef28b84caaeb4e69a9", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    |                      ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "938fb08b7956ef3135374b7248647a02ed60caeb", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/const-param-type-depends-on-type-param.rs:11:22"}, {"sha": "938fb08b7956ef3135374b7248647a02ed60caeb", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                                  ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/const-param-type-depends-on-type-param.rs:11:22"}, {"sha": "205d031d4a31047b586f3824e672eb035194e90e", "filename": "tests/ui/const-generics/generic_const_exprs/issue-74713.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,7 +1,7 @@\n fn bug<'a>()\n where\n     [(); { //~ ERROR mismatched types\n-        let _: &'a (); //~ ERROR a non-static lifetime is not allowed in a `const`\n+        let _: &'a (); //~ ERROR generic parameters may not be used in const operations\n     }]:\n {}\n "}, {"sha": "f0e0a4b971106da69983c74e0f7106bf08f59628", "filename": "tests/ui/const-generics/generic_const_exprs/issue-74713.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-74713.rs:4:17\n    |\n LL |         let _: &'a ();\n-   |                 ^^\n+   |                 ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0308]: mismatched types\n   --> $DIR/issue-74713.rs:3:10\n@@ -18,5 +18,4 @@ LL | |     }]:\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "96aeec77c13007a22a52ddbbe5d81f7db7063f82", "filename": "tests/ui/const-generics/generic_const_exprs/unresolved_lifetimes_error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo() -> [(); {\n+    let a: &'a ();\n+    //~^ ERROR: use of undeclared lifetime name `'a`\n+    10_usize\n+}] {\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "976f037062dd9a45cdc34bff3e6b18a226b3d36d", "filename": "tests/ui/const-generics/generic_const_exprs/unresolved_lifetimes_error.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funresolved_lifetimes_error.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,11 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/unresolved_lifetimes_error.rs:5:13\n+   |\n+LL | fn foo() -> [(); {\n+   |       - help: consider introducing lifetime `'a` here: `<'a>`\n+LL |     let a: &'a ();\n+   |             ^^ undeclared lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "78baba818ad765975758264bfb389eb43ede278c", "filename": "tests/ui/const-generics/issue-46511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissue-46511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissue-46511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-46511.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -2,7 +2,7 @@\n \n struct Foo<'a> //~ ERROR parameter `'a` is never used [E0392]\n {\n-    _a: [u8; std::mem::size_of::<&'a mut u8>()] //~ ERROR  a non-static lifetime is not allowed in a `const`\n+    _a: [u8; std::mem::size_of::<&'a mut u8>()] //~ ERROR generic parameters may not be used in const operations\n }\n \n pub fn main() {}"}, {"sha": "58c93a1fab49cce3acfbb8927199c7b02b4a4f5c", "filename": "tests/ui/const-generics/issue-46511.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissue-46511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissue-46511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-46511.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-46511.rs:5:35\n    |\n LL |     _a: [u8; std::mem::size_of::<&'a mut u8>()]\n-   |                                   ^^\n+   |                                   ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/issue-46511.rs:3:12\n@@ -17,5 +17,4 @@ LL | struct Foo<'a>\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0392, E0658.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "6cfabb65efb25325b4657f12525d7f88b9adb75a", "filename": "tests/ui/const-generics/issues/issue-105821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-105821.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n #![allow(incomplete_features)]\n-#![feature(adt_const_params, const_ptr_read, generic_const_exprs)]\n+#![feature(adt_const_params, generic_const_exprs)]\n #![allow(dead_code)]\n \n const fn catone<const M: usize>(_a: &[u8; M]) -> [u8; M + 1]"}, {"sha": "5fc0ec260474cd300746b2b42aab681e807008a2", "filename": "tests/ui/const-generics/issues/issue-56445-1.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,11 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-56445-1.rs:9:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-   |                          ^^\n+   |                          ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0771`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "71a7051f25bfa7f94dbf40a9ee2d1546af26a6c5", "filename": "tests/ui/const-generics/issues/issue-56445-1.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,10 +1,10 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-56445-1.rs:9:26\n    |\n LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-   |                          ^^\n+   |                          ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n error: `&str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-56445-1.rs:9:25\n@@ -17,4 +17,4 @@ LL | struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0771`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "d862bf24aef7bef5c3e01c031b7f92de0411643c", "filename": "tests/ui/const-generics/issues/issue-56445-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -7,7 +7,7 @@\n use std::marker::PhantomData;\n \n struct Bug<'a, const S: &'a str>(PhantomData<&'a ()>);\n-//~^ ERROR: use of non-static lifetime `'a` in const generic\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n //[min]~| ERROR: `&str` is forbidden as the type of a const generic parameter\n \n impl Bug<'_, \"\"> {}"}, {"sha": "c658b5a6e686683f3787685fa016a226b3d656e9", "filename": "tests/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "9c0e5179cc4c2daca7e8bfe06ff3ffcbcfecb1fb", "filename": "tests/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: `[u8; N]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-62878.rs:5:33"}, {"sha": "ccdfbbd54cfbbf684697a8e7a56cb76e2e3ce5d4", "filename": "tests/ui/const-generics/issues/issue-71169.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "ebfb24bec28df2bbf78d98874c09c752ed318196", "filename": "tests/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n+   |\n+   = note: const parameters may not be used in the type of const parameters\n \n error: `[u8; LEN]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71169.rs:5:38"}, {"sha": "962eaf75b98f54aa18798b602075cb0f1b5a2051", "filename": "tests/ui/const-generics/issues/issue-71381.full.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-71381.rs:23:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:14:61"}, {"sha": "e1e140071fc1353bbb69ed4f34b2977ade8f440e", "filename": "tests/ui/const-generics/issues/issue-71381.min.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-71381.rs:23:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:14:61"}, {"sha": "e109459f2be6f883930af3775395ad8353c71216", "filename": "tests/ui/const-generics/issues/issue-71611.full.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:5:21"}, {"sha": "b33d7cf9850faa140a5aa6caa63d1e195d46cb8d", "filename": "tests/ui/const-generics/issues/issue-71611.min.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:5:21"}, {"sha": "3cb8d3846ab7c62096ece221024c778fe366d6cb", "filename": "tests/ui/const-generics/issues/issue-77357.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs?ref=3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "patch": "@@ -1,11 +0,0 @@\n-#![feature(generic_const_exprs)]\n-#![allow(incomplete_features)]\n-\n-trait MyTrait<T> {}\n-\n-fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-    //~^ ERROR overly complex generic constant\n-    todo!()\n-}\n-\n-fn main() {}"}, {"sha": "68b35a38b0f8ada52a5a18342d537854369fe012", "filename": "tests/ui/const-generics/issues/issue-77357.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr?ref=3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "patch": "@@ -1,11 +0,0 @@\n-error: overly complex generic constant\n-  --> $DIR/issue-77357.rs:6:46\n-   |\n-LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n-   |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n-\n-error: aborting due to previous error\n-"}, {"sha": "f2f05d9526bc5f898516a4c6b3ca909432496c1c", "filename": "tests/ui/const-generics/issues/issue-83993.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs?ref=3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "patch": "@@ -1,14 +0,0 @@\n-// check-pass\n-\n-#![feature(generic_const_exprs)]\n-#![allow(incomplete_features)]\n-\n-fn bug<'a>()\n-where\n-    for<'b> [(); {\n-        let x: &'b ();\n-        0\n-    }]:\n-{}\n-\n-fn main() {}"}, {"sha": "b49d52dd0babcff951009f2c1352a1b377a6cac6", "filename": "tests/ui/const-generics/issues/issue-88997.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-88997.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,12 +3,16 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n    |                                        ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/issue-88997.rs:8:54\n    |\n LL | struct Range<T: PartialOrd, const MIN: T, const MAX: T>(T)\n    |                                                      ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: aborting due to 2 previous errors\n "}, {"sha": "23424d7b919b62112bb546c087af6c6c9a3bf0e9", "filename": "tests/ui/const-generics/issues/issue-90364.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-90364.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,6 +3,8 @@ error[E0770]: the type of const parameters must not depend on other generic para\n    |\n LL | pub struct Foo<T, const H: T>(T)\n    |                            ^ the type must not depend on the parameter `T`\n+   |\n+   = note: type parameters may not be used in the type of const parameters\n \n error: aborting due to previous error\n "}, {"sha": "00fb535f048795a8f9328bc316f127b361fbe983", "filename": "tests/ui/const-generics/late-bound-vars/in_closure.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,4 +1,22 @@\n-// run-pass\n+// failure-status: 101\n+// known-bug: unknown\n+// error-pattern:internal compiler error\n+// normalize-stderr-test \"internal compiler error.*\" -> \"\"\n+// normalize-stderr-test \"DefId\\([^)]*\\)\" -> \"...\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"stack backtrace:\\n\" -> \"\"\n+// normalize-stderr-test \"\\s\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\n\\n[ ]*\\n\" -> \"\"\n+// normalize-stderr-test \"compiler/.*: projection\" -> \"projection\"\n+// this should run-pass\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n "}, {"sha": "557fbea2e056eb938900dbb6292b071ef0ec0a6a", "filename": "tests/ui/const-generics/late-bound-vars/in_closure.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,13 @@\n+error: query stack during panic:\n+#0 [mir_borrowck] borrow-checking `test::{closure#0}::{constant#1}`\n+#1 [mir_drops_elaborated_and_const_checked] elaborating drops for `test::{closure#0}::{constant#1}`\n+#2 [mir_for_ctfe] caching mir of `test::{closure#0}::{constant#1}` for CTFE\n+#3 [eval_to_allocation_raw] const-evaluating + checking `test::{closure#0}::{constant#1}`\n+#4 [eval_to_allocation_raw] const-evaluating + checking `test::{closure#0}::{constant#1}`\n+#5 [eval_to_valtree] evaluating type-level constant\n+#6 [typeck] type-checking `test`\n+#7 [used_trait_imports] finding used_trait_imports `test`\n+#8 [analysis] running analysis passes on this crate\n+end of query stack\n+error: aborting due to previous error\n+"}, {"sha": "5d19aaf0b9555032621c4120b644a3515ed95bc3", "filename": "tests/ui/const-generics/late-bound-vars/simple.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,4 +1,21 @@\n-// run-pass\n+// failure-status: 101\n+// known-bug: unknown\n+// error-pattern:internal compiler error\n+// normalize-stderr-test \"internal compiler error.*\" -> \"\"\n+// normalize-stderr-test \"DefId\\([^)]*\\)\" -> \"...\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread.*panicked.*\\n\" -> \"\"\n+// normalize-stderr-test \"stack backtrace:\\n\" -> \"\"\n+// normalize-stderr-test \"\\s\\d{1,}: .*\\n\" -> \"\"\n+// normalize-stderr-test \"\\s at .*\\n\" -> \"\"\n+// normalize-stderr-test \".*note: Some details.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\n\\n[ ]*\\n\" -> \"\"\n+// normalize-stderr-test \"compiler/.*: projection\" -> \"projection\"\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n "}, {"sha": "c0568f5a5cfa32d2bcf1acdfaa13bcf52b6a72f7", "filename": "tests/ui/const-generics/late-bound-vars/simple.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,13 @@\n+error: query stack during panic:\n+#0 [mir_borrowck] borrow-checking `test::{constant#1}`\n+#1 [mir_drops_elaborated_and_const_checked] elaborating drops for `test::{constant#1}`\n+#2 [mir_for_ctfe] caching mir of `test::{constant#1}` for CTFE\n+#3 [eval_to_allocation_raw] const-evaluating + checking `test::{constant#1}`\n+#4 [eval_to_allocation_raw] const-evaluating + checking `test::{constant#1}`\n+#5 [eval_to_valtree] evaluating type-level constant\n+#6 [typeck] type-checking `test`\n+#7 [used_trait_imports] finding used_trait_imports `test`\n+#8 [analysis] running analysis passes on this crate\n+end of query stack\n+error: aborting due to previous error\n+"}, {"sha": "86f2bc9c74b93d3aced5b6499865110e7ab72a60", "filename": "tests/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -5,7 +5,7 @@ fn test<const N: usize>() {}\n \n fn issue_75323_and_74447_1<'a>() -> &'a () {\n     test::<{ let _: &'a (); 3 },>();\n-   //~^ ERROR a non-static lifetime is not allowed in a `const`\n+   //~^ ERROR generic parameters may not be used in const operations\n     &()\n }\n \n@@ -19,7 +19,7 @@ fn issue_75323_and_74447_3() {\n \n fn issue_73375<'a>() {\n     [(); (|_: &'a u8| (), 0).1];\n-    //~^ ERROR a non-static lifetime is not allowed in a `const`\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "7726016eb835f36a646f10b3ff3626a712b2b5ca", "filename": "tests/ui/const-generics/min_const_generics/forbid-non-static-lifetimes.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fmin_const_generics%2Fforbid-non-static-lifetimes.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,21 +1,20 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/forbid-non-static-lifetimes.rs:7:22\n    |\n LL |     test::<{ let _: &'a (); 3 },>();\n-   |                      ^^\n+   |                      ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/forbid-non-static-lifetimes.rs:21:16\n    |\n LL |     [(); (|_: &'a u8| (), 0).1];\n-   |                ^^\n+   |                ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "de710b0e37d3222411db707e6cab3d3f851effea", "filename": "tests/ui/const-generics/outer-lifetime-in-const-generic-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -2,7 +2,7 @@ struct Foo<\n     'a,\n     const N: usize = {\n         let x: &'a ();\n-        //~^ ERROR use of non-static lifetime `'a` in const generic\n+        //~^ ERROR generic parameters may not be used in const operations\n         3\n     },\n >(&'a ());"}, {"sha": "6b0d18f1989aa5182c5891b33651471766dabba8", "filename": "tests/ui/const-generics/outer-lifetime-in-const-generic-default.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,11 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error: generic parameters may not be used in const operations\n   --> $DIR/outer-lifetime-in-const-generic-default.rs:4:17\n    |\n LL |         let x: &'a ();\n-   |                 ^^\n+   |                 ^^ cannot perform const operation using `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0771`."}, {"sha": "2f03b8e1f66413cf14f7404967f266506f32ac09", "filename": "tests/ui/const-generics/variant-discrimiant-no-generics.full.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.full.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,34 @@\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:7:15\n+   |\n+LL |     Variant = N,\n+   |               ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:12:17\n+   |\n+LL |     Variant = { N + 1 },\n+   |                 ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:18:37\n+   |\n+LL |     Variant = { std::mem::size_of::<T>() as isize },\n+   |                                     ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:25:17\n+   |\n+LL |         let a: &'a ();\n+   |                 ^^ cannot perform const operation using `'a`\n+   |\n+   = note: lifetime parameters may not be used in enum discriminant values\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "2f03b8e1f66413cf14f7404967f266506f32ac09", "filename": "tests/ui/const-generics/variant-discrimiant-no-generics.min.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.min.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,34 @@\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:7:15\n+   |\n+LL |     Variant = N,\n+   |               ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:12:17\n+   |\n+LL |     Variant = { N + 1 },\n+   |                 ^ cannot perform const operation using `N`\n+   |\n+   = note: const parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:18:37\n+   |\n+LL |     Variant = { std::mem::size_of::<T>() as isize },\n+   |                                     ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in enum discriminant values\n+\n+error: generic parameters may not be used in enum discriminant values\n+  --> $DIR/variant-discrimiant-no-generics.rs:25:17\n+   |\n+LL |         let a: &'a ();\n+   |                 ^^ cannot perform const operation using `'a`\n+   |\n+   = note: lifetime parameters may not be used in enum discriminant values\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e286aa9a6139fdc0388523f4de66ea8a81cd80b2", "filename": "tests/ui/const-generics/variant-discrimiant-no-generics.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fvariant-discrimiant-no-generics.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -0,0 +1,32 @@\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(generic_const_exprs))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+\n+enum Foo<const N: isize> {\n+    Variant = N,\n+    //~^ ERROR: generic parameters may not be used in enum discriminant values\n+}\n+\n+enum Owo<const N: isize> {\n+    Variant = { N + 1 },\n+    //~^ ERROR: generic parameters may not be used in enum discriminant values\n+}\n+\n+#[repr(isize)]\n+enum Bar<T> {\n+    Variant = { std::mem::size_of::<T>() as isize },\n+    Other(T), //~^ ERROR: generic parameters may not be used in enum discriminant values\n+}\n+\n+#[repr(isize)]\n+enum UwU<'a> {\n+    Variant = {\n+        let a: &'a ();\n+        //~^ ERROR: generic parameters may not be used in enum discriminant values\n+        10_isize\n+    },\n+    Other(&'a ()),\n+}\n+\n+fn main() {}"}, {"sha": "a371aa93c5ee2a61d8725eb2ddf0ffac074e5c58", "filename": "tests/ui/const-ptr/out_of_bounds_read.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,7 +1,5 @@\n // error-pattern: evaluation of constant value failed\n \n-#![feature(const_ptr_read)]\n-\n fn main() {\n     use std::ptr;\n "}, {"sha": "c5c0a1cdefcb4d7c9577e1fe622758851587bcbc", "filename": "tests/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -6,7 +6,7 @@ error[E0080]: evaluation of constant value failed\n note: inside `std::ptr::read::<u32>`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n note: inside `_READ`\n-  --> $DIR/out_of_bounds_read.rs:12:33\n+  --> $DIR/out_of_bounds_read.rs:10:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -21,7 +21,7 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `_CONST_READ`\n-  --> $DIR/out_of_bounds_read.rs:13:39\n+  --> $DIR/out_of_bounds_read.rs:11:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n    |                                       ^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::mut_ptr::<impl *mut u32>::read`\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n note: inside `_MUT_READ`\n-  --> $DIR/out_of_bounds_read.rs:14:37\n+  --> $DIR/out_of_bounds_read.rs:12:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a5d2ea0148659dfad99d034c35a2f857ec11235a", "filename": "tests/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -3,7 +3,6 @@\n // normalize-stderr-test \"(the raw bytes of the constant) \\(size: [0-9]*, align: [0-9]*\\)\" -> \"$1 (size: $$SIZE, align: $$ALIGN)\"\n // normalize-stderr-test \"([0-9a-f][0-9a-f] |\u257e\u2500*a(lloc)?[0-9]+(\\+[a-z0-9]+)?\u2500*\u257c )+ *\u2502.*\" -> \"HEX_DUMP\"\n #![allow(invalid_value)]\n-#![feature(const_ptr_read)]\n \n use std::mem;\n "}, {"sha": "1d19dfff50b367de53c57e974bcd0af2c89d3243", "filename": "tests/ui/consts/const-eval/ub-ref-ptr.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:16:1\n+  --> $DIR/ub-ref-ptr.rs:15:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -10,7 +10,7 @@ LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:20:1\n+  --> $DIR/ub-ref-ptr.rs:19:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned box (required 2 byte alignment but found 1)\n@@ -21,7 +21,7 @@ LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:24:1\n+  --> $DIR/ub-ref-ptr.rs:23:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null reference\n@@ -32,7 +32,7 @@ LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:27:1\n+  --> $DIR/ub-ref-ptr.rs:26:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a null box\n@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:34:1\n+  --> $DIR/ub-ref-ptr.rs:33:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -52,7 +52,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:37:39\n+  --> $DIR/ub-ref-ptr.rs:36:39\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -61,13 +61,13 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n note: erroneous constant used\n-  --> $DIR/ub-ref-ptr.rs:37:38\n+  --> $DIR/ub-ref-ptr.rs:36:38\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:40:86\n+  --> $DIR/ub-ref-ptr.rs:39:86\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    |                                                                                      ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -76,13 +76,13 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n note: erroneous constant used\n-  --> $DIR/ub-ref-ptr.rs:40:85\n+  --> $DIR/ub-ref-ptr.rs:39:85\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:43:1\n+  --> $DIR/ub-ref-ptr.rs:42:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling reference (0x539[noalloc] has no provenance)\n@@ -93,7 +93,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:46:1\n+  --> $DIR/ub-ref-ptr.rs:45:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a dangling box (0x539[noalloc] has no provenance)\n@@ -104,13 +104,13 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:49:41\n+  --> $DIR/ub-ref-ptr.rs:48:41\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:53:1\n+  --> $DIR/ub-ref-ptr.rs:52:1\n    |\n LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered null pointer, but expected a function pointer\n@@ -121,13 +121,13 @@ LL | const NULL_FN_PTR: fn() = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/ub-ref-ptr.rs:55:38\n+  --> $DIR/ub-ref-ptr.rs:54:38\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:58:1\n+  --> $DIR/ub-ref-ptr.rs:57:1\n    |\n LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered 0xd[noalloc], but expected a function pointer\n@@ -138,7 +138,7 @@ LL | const DANGLING_FN_PTR: fn() = unsafe { mem::transmute(13usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:60:1\n+  --> $DIR/ub-ref-ptr.rs:59:1\n    |\n LL | const DATA_FN_PTR: fn() = unsafe { mem::transmute(&13) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered alloc41, but expected a function pointer\n@@ -158,7 +158,7 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `UNALIGNED_READ`\n-  --> $DIR/ub-ref-ptr.rs:67:5\n+  --> $DIR/ub-ref-ptr.rs:66:5\n    |\n LL |     ptr.read();\n    |     ^^^^^^^^^^"}, {"sha": "6a3c93ce7a6745d4708c0da089f7baeccdf284ac", "filename": "tests/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,7 +1,6 @@\n // revisions: no_flag with_flag\n // [no_flag] check-pass\n // [with_flag] compile-flags: -Zextra-const-ub-checks\n-#![feature(const_ptr_read)]\n \n use std::mem::transmute;\n "}, {"sha": "3970baefcb354540d16794a632d8dcc59cad8bd5", "filename": "tests/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:9:20\n+  --> $DIR/detect-extra-ub.rs:8:20\n    |\n LL |     let _x: bool = transmute(3u8);\n    |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:15:21\n+  --> $DIR/detect-extra-ub.rs:14:21\n    |\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -14,7 +14,7 @@ LL |     let _x: usize = transmute(&3u8);\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:21:30\n+  --> $DIR/detect-extra-ub.rs:20:30\n    |\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -23,7 +23,7 @@ LL |     let _x: (usize, usize) = transmute(x);\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:26:20\n+  --> $DIR/detect-extra-ub.rs:25:20\n    |\n LL |     let _x: &u32 = transmute(&[0u8; 4]);\n    |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)"}, {"sha": "3798332dfd788830a2ececc7f7678c7ab73dd923", "filename": "tests/ui/consts/issue-miri-1910.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fissue-miri-1910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fissue-miri-1910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-miri-1910.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,6 +1,5 @@\n // error-pattern unable to turn pointer into raw bytes\n // normalize-stderr-test: \"alloc[0-9]+\\+0x[a-z0-9]+\" -> \"ALLOC\"\n-#![feature(const_ptr_read)]\n \n const C: () = unsafe {\n     let foo = Some(&42 as *const i32);"}, {"sha": "fb758d406b550d80284e62b419a5b64a4843d813", "filename": "tests/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -10,7 +10,7 @@ note: inside `std::ptr::read::<u8>`\n note: inside `ptr::const_ptr::<impl *const u8>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `C`\n-  --> $DIR/issue-miri-1910.rs:8:5\n+  --> $DIR/issue-miri-1910.rs:7:5\n    |\n LL |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ea83e3fd9dc2f4d39cbb9f10d85efba4d3809cd5", "filename": "tests/ui/cycle-trait/issue-12511.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fcycle-trait%2Fissue-12511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fcycle-trait%2Fissue-12511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcycle-trait%2Fissue-12511.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-12511.rs"}, {"sha": "558aad10946eca0c407253013f239032333e8dd3", "filename": "tests/ui/cycle-trait/issue-12511.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fcycle-trait%2Fissue-12511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fcycle-trait%2Fissue-12511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcycle-trait%2Fissue-12511.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-12511.stderr"}, {"sha": "d143926b2819ecbc501e87879030076e37b2fbe2", "filename": "tests/ui/deriving/issue-15689-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fderiving%2Fissue-15689-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fderiving%2Fissue-15689-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fissue-15689-1.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-15689-1.rs"}, {"sha": "83dcb1406f89f589a447e32ef6f8504c7a7e7443", "filename": "tests/ui/deriving/issue-15689-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fderiving%2Fissue-15689-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fderiving%2Fissue-15689-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fissue-15689-2.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-15689-2.rs"}, {"sha": "57a99b325ad8ea0df021bcbdef057e9856aab66a", "filename": "tests/ui/drop/issue-979.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fdrop%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fdrop%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop%2Fissue-979.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-979.rs"}, {"sha": "62137c0c8d340d9c037ba9fa19556cdec7984b1c", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -7,7 +7,7 @@ use core::intrinsics::discriminant_value;\n enum MyWeirdOption<T> {\n     None = 0,\n     Some(T) = std::mem::size_of::<T>(),\n-    //~^ ERROR generic parameters may not be used in const operations\n+    //~^ ERROR generic parameters may not be used in enum discriminant values\n }\n \n fn main() {"}, {"sha": "2cb159ee291023def40cd9f5265804616361e225", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-70453-generics-in-discr-ice-2.rs:9:35\n    |\n LL |     Some(T) = std::mem::size_of::<T>(),\n    |                                   ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error: aborting due to previous error\n "}, {"sha": "093c57534a4c52e7d9e1e1494857c2a32a72f197", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -8,7 +8,7 @@ enum MyWeirdOption<T> {\n //~^ ERROR parameter `T` is never used\n     None = 0,\n     Some = std::mem::size_of::<T>(),\n-    //~^ ERROR generic parameters may not be used in const operations\n+    //~^ ERROR generic parameters may not be used in enum discriminant values\n }\n \n fn main() {"}, {"sha": "fac3ce07aeb927d077a2bc476ffbccc91d2e837b", "filename": "tests/ui/enum-discriminant/issue-70453-generics-in-discr-ice.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-70453-generics-in-discr-ice.rs:10:32\n    |\n LL |     Some = std::mem::size_of::<T>(),\n    |                                ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-70453-generics-in-discr-ice.rs:7:20"}, {"sha": "15cd6d30364b91ed741c55a926f08efb3caa357b", "filename": "tests/ui/enum-discriminant/issue-70453-polymorphic-ctfe.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-70453-polymorphic-ctfe.rs:9:41\n    |\n LL |     Some(T) = core::mem::size_of::<*mut T>(),\n    |                                         ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error: aborting due to previous error\n "}, {"sha": "76ee9c3edb0c2c115f5eaa53bf55e944ddcfe939", "filename": "tests/ui/enum/issue-1821.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum%2Fissue-1821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum%2Fissue-1821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum%2Fissue-1821.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-1821.rs"}, {"sha": "878fa322f02d503f14f05ffb85d1f95d55890af9", "filename": "tests/ui/enum/issue-67945-1.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum%2Fissue-67945-1.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-67945-1.rs:3:16\n    |\n LL |         let x: S = 0;\n    |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:1:10"}, {"sha": "f8ec12d470acfe415a0e32beaf219c8a82234ab9", "filename": "tests/ui/enum/issue-67945-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fenum%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum%2Fissue-67945-2.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,10 @@\n-error: generic parameters may not be used in const operations\n+error: generic parameters may not be used in enum discriminant values\n   --> $DIR/issue-67945-2.rs:4:28\n    |\n LL |     Var = type_ascribe!(0, S),\n    |                            ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+   = note: type parameters may not be used in enum discriminant values\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:3:10"}, {"sha": "c0a2e98a7df60bcb7597ad34f50c56bfc8eb1976", "filename": "tests/ui/error-codes/E0771.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ferror-codes%2FE0771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ferror-codes%2FE0771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0771.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,7 +1,7 @@\n #![feature(adt_const_params)]\n //~^ WARN the feature `adt_const_params` is incomplete\n \n-fn function_with_str<'a, const STRING: &'a str>() {} //~ ERROR E0771\n+fn function_with_str<'a, const STRING: &'a str>() {} //~ ERROR E0770\n \n fn main() {\n     function_with_str::<\"Hello, world!\">()"}, {"sha": "9450c61c27be05d50666accd1dd752955bf51da0", "filename": "tests/ui/error-codes/E0771.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0771.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,10 +1,10 @@\n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/E0771.rs:4:41\n    |\n LL | fn function_with_str<'a, const STRING: &'a str>() {}\n-   |                                         ^^\n+   |                                         ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/E0771.rs:1:12\n@@ -17,4 +17,4 @@ LL | #![feature(adt_const_params)]\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0771`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "ee75b359388f3f9316b66f92e824120bbe53d7df", "filename": "tests/ui/fn/issue-3099.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ffn%2Fissue-3099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ffn%2Fissue-3099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fissue-3099.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-3099.rs"}, {"sha": "32ee2e1d20736dfdb619ccfb7f1b93463a64bd8a", "filename": "tests/ui/fn/issue-3099.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ffn%2Fissue-3099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ffn%2Fissue-3099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fissue-3099.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-3099.stderr"}, {"sha": "7bf3ed60ec104e83e8e83d74d824dadee0d3d4ee", "filename": "tests/ui/inference/issue-71584.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Finference%2Fissue-71584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Finference%2Fissue-71584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-71584.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-71584.rs"}, {"sha": "6ddb7657301cd29fdd8ca59007d13042d39093df", "filename": "tests/ui/inference/issue-71584.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Finference%2Fissue-71584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Finference%2Fissue-71584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-71584.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-71584.stderr"}, {"sha": "cbb9bcc28ac8b21f37be7296bc39e96116d51aa9", "filename": "tests/ui/issues/issue-2748-a.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fissues%2Fissue-2748-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a37c2f0523c87147b64f1b8099fc9df22e8c53e/tests%2Fui%2Fissues%2Fissue-2748-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-2748-a.rs?ref=3a37c2f0523c87147b64f1b8099fc9df22e8c53e", "patch": "@@ -1,17 +0,0 @@\n-// build-pass\n-#![allow(dead_code)]\n-#![allow(non_snake_case)]\n-\n-// pretty-expanded FIXME #23616\n-\n-struct CMap<'a> {\n-    buf: &'a [u8],\n-}\n-\n-fn CMap(buf: &[u8]) -> CMap {\n-    CMap {\n-        buf: buf\n-    }\n-}\n-\n-pub fn main() { }"}, {"sha": "3879784d0b0f1d9ed5f510721e1500189b6bd421", "filename": "tests/ui/lifetimes/issue-64173-unused-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -13,7 +13,7 @@ const fn foo<T>() -> usize {\n }\n \n struct Bar<'a> { //~ ERROR: parameter `'a` is never used\n-    beta: [(); foo::<&'a ()>()], //~ ERROR: a non-static lifetime is not allowed in a `const`\n+    beta: [(); foo::<&'a ()>()], //~ ERROR: generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "02ca10b2eb67cfdf02baafa0568f7738591ebf02", "filename": "tests/ui/lifetimes/issue-64173-unused-lifetimes.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-64173-unused-lifetimes.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: a non-static lifetime is not allowed in a `const`\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-64173-unused-lifetimes.rs:16:23\n    |\n LL |     beta: [(); foo::<&'a ()>()],\n-   |                       ^^\n+   |                       ^^ cannot perform const operation using `'a`\n    |\n-   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n-   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+   = note: lifetime parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/issue-64173-unused-lifetimes.rs:4:28\n@@ -31,5 +31,4 @@ LL | struct Bar<'a> {\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0392, E0658.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "2f5ba98445bdc8d086b5c99a55a96256836abead", "filename": "tests/ui/lifetimes/unusual-rib-combinations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -27,7 +27,7 @@ fn d<const C: S>() {}\n \n trait Foo<'a> {}\n struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n-//~^ ERROR use of non-static lifetime `'a` in const generic\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n //~| ERROR `&dyn for<'a> Foo<'a>` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "4994e4dc444ee47e9c902c7b46fc7df1c6b51387", "filename": "tests/ui/lifetimes/unusual-rib-combinations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "patch": "@@ -9,13 +9,13 @@ help: consider introducing a named lifetime parameter\n LL | fn d<'a, const C: S<'a>>() {}\n    |      +++           ++++\n \n-error[E0771]: use of non-static lifetime `'a` in const generic\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n   --> $DIR/unusual-rib-combinations.rs:29:22\n    |\n LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n-   |                      ^^\n+   |                      ^^ the type must not depend on the parameter `'a`\n    |\n-   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+   = note: lifetime parameters may not be used in the type of const parameters\n \n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/unusual-rib-combinations.rs:7:16\n@@ -74,5 +74,5 @@ LL | struct Bar<const N: &'a (dyn for<'a> Foo<'a>)>;\n \n error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0106, E0214, E0308, E0771.\n+Some errors have detailed explanations: E0106, E0214, E0308, E0770.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "d02725505ac1965483a54a4865f1adf3bfc31c47", "filename": "tests/ui/macros/issue-2804-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fmacros%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fmacros%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-2804-2.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-2804-2.rs"}, {"sha": "0d4eb796ad9b02417de1ffcffbf103b133947bab", "filename": "tests/ui/nll/issue-30438-a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-30438-a.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-30438-a.rs"}, {"sha": "53845af82fb115e4d779f1dce711a8f26a2fd332", "filename": "tests/ui/nll/issue-30438-a.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-30438-a.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-30438-a.stderr"}, {"sha": "79510cdb66366759c703ff32615005ea81f7f7df", "filename": "tests/ui/nll/issue-30438-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-30438-b.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-30438-b.rs"}, {"sha": "fd6bd25b1da16944e204bee29dca2aefec3643c0", "filename": "tests/ui/nll/issue-30438-b.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-30438-b.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-30438-b.stderr"}, {"sha": "813c1d3e2cccd9410c86a683bb6ec0b53533adbc", "filename": "tests/ui/nll/issue-30438-c.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-30438-c.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-30438-c.rs"}, {"sha": "7c001088097ab54618608442b4772da575b36b7e", "filename": "tests/ui/nll/issue-30438-c.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-30438-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-30438-c.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-30438-c.stderr"}, {"sha": "faa116269ee96f5d017951dbe290c33ae492f75f", "filename": "tests/ui/nll/issue-54302-cases.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54302-cases.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-54302-cases.rs"}, {"sha": "6e8b69c4beebb2bfbfefb11ab6b43ba18d580a83", "filename": "tests/ui/nll/issue-54302-cases.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54302-cases.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-54302-cases.stderr"}, {"sha": "1bfaebc3895d96dc00c72719055d66cafcaffcfd", "filename": "tests/ui/nll/issue-54302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54302.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-54302.rs"}, {"sha": "26c46571f9cb232d8155abcfc30a47d74d98a216", "filename": "tests/ui/nll/issue-54302.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fnll%2Fissue-54302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-54302.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-54302.stderr"}, {"sha": "b9bbeb3951e4750dd52e787583f3e7c5da6e5699", "filename": "tests/ui/reachable/issue-948.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Freachable%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Freachable%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freachable%2Fissue-948.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-948.rs"}, {"sha": "9c3d8cf5a55f0c8bb67317f60452874e3fc41ccc", "filename": "tests/ui/resolve/issue-3099-a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-3099-a.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-3099-a.rs"}, {"sha": "e3733cebba58ed7ad14dc1b37fef5a515e9e9ac9", "filename": "tests/ui/resolve/issue-3099-a.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-3099-a.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-3099-a.stderr"}, {"sha": "71952c3b060804d98060a150bf16fae8b95f4ed9", "filename": "tests/ui/resolve/issue-3099-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-3099-b.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-3099-b.rs"}, {"sha": "c0cfefeb940f492d1c2b37a645392442e913cdd3", "filename": "tests/ui/resolve/issue-3099-b.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Fresolve%2Fissue-3099-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-3099-b.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-3099-b.stderr"}, {"sha": "9f808dac362783acb3fa651c525ec10fc028d7e5", "filename": "tests/ui/test-attrs/issue-12997-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-12997-1.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-12997-1.rs"}, {"sha": "00c605174fbb51133054059465c2888091a6fc06", "filename": "tests/ui/test-attrs/issue-12997-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-12997-1.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-12997-1.stderr"}, {"sha": "9df965315ab38ed93c67941a52b62ef5c1aa1ad9", "filename": "tests/ui/test-attrs/issue-12997-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-12997-2.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-12997-2.rs"}, {"sha": "2a3d0e3457b031ca24c92378fa01b94a6054a7d1", "filename": "tests/ui/test-attrs/issue-12997-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-12997-2.stderr?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-12997-2.stderr"}, {"sha": "ab568fd01efc5811d8f9e257fa7df387e180ec37", "filename": "tests/ui/test-attrs/issue-34932.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-34932.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6bc5d259e7ab25ddfdd33de53b892770218918/tests%2Fui%2Ftest-attrs%2Fissue-34932.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-34932.rs?ref=2f6bc5d259e7ab25ddfdd33de53b892770218918", "previous_filename": "tests/ui/issues/issue-34932.rs"}]}