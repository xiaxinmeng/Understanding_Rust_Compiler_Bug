{"sha": "ffbbf241868588c5ca3880ed023e97aa806ea1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYmJmMjQxODY4NTg4YzVjYTM4ODBlZDAyM2U5N2FhODA2ZWExZDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T00:35:59Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-07T04:23:32Z"}, "message": "Refactor away `hir::Visibility::inherit_from`", "tree": {"sha": "f6c777b601ea0df4a5d6f608ca047a30d9addc18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c777b601ea0df4a5d6f608ca047a30d9addc18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffbbf241868588c5ca3880ed023e97aa806ea1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffbbf241868588c5ca3880ed023e97aa806ea1d3", "html_url": "https://github.com/rust-lang/rust/commit/ffbbf241868588c5ca3880ed023e97aa806ea1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffbbf241868588c5ca3880ed023e97aa806ea1d3/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f34c86a4dd43efa20c673688529516524f23c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f34c86a4dd43efa20c673688529516524f23c5", "html_url": "https://github.com/rust-lang/rust/commit/a9f34c86a4dd43efa20c673688529516524f23c5"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "2bf279601c860fa1b68b55e8f4555bc31e54e8cc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ffbbf241868588c5ca3880ed023e97aa806ea1d3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbbf241868588c5ca3880ed023e97aa806ea1d3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ffbbf241868588c5ca3880ed023e97aa806ea1d3", "patch": "@@ -1437,15 +1437,6 @@ pub enum Visibility {\n     Inherited,\n }\n \n-impl Visibility {\n-    pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n-        match self {\n-            &Inherited => parent_visibility,\n-            &Public => *self,\n-        }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField {\n     pub span: Span,"}, {"sha": "a27f507170bb4bbedd692cd27b2eb537fe480744", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ffbbf241868588c5ca3880ed023e97aa806ea1d3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffbbf241868588c5ca3880ed023e97aa806ea1d3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ffbbf241868588c5ca3880ed023e97aa806ea1d3", "patch": "@@ -738,17 +738,6 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             tcx.predicates.borrow_mut().insert(def_id, ty_predicates.clone());\n \n \n-            // If there is a trait reference, treat the methods as always public.\n-            // This is to work around some incorrect behavior in privacy checking:\n-            // when the method belongs to a trait, it should acquire the privacy\n-            // from the trait, not the impl. Forcing the visibility to be public\n-            // makes things sorta work.\n-            let parent_visibility = if opt_trait_ref.is_some() {\n-                hir::Public\n-            } else {\n-                it.vis\n-            };\n-\n             // Convert all the associated consts.\n             // Also, check if there are any duplicate associated items\n             let mut seen_type_items = FnvHashSet();\n@@ -771,9 +760,12 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                                                generics: ty_generics.clone(),\n                                                ty: ty,\n                                            });\n+                    // Trait-associated constants are always public.\n+                    let visibility =\n+                        if opt_trait_ref.is_some() { hir::Public } else { impl_item.vis };\n                     convert_associated_const(ccx, ImplContainer(def_id),\n                                              impl_item.name, impl_item.id,\n-                                             impl_item.vis.inherit_from(parent_visibility),\n+                                             visibility,\n                                              impl_item.defaultness,\n                                              ty, true /* has_value */);\n                 }\n@@ -797,11 +789,9 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             for impl_item in impl_items {\n                 if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n-                    // if the method specifies a visibility, use that, otherwise\n-                    // inherit the visibility from the impl (so `foo` in `pub impl\n-                    // { fn foo(); }` is public, but private in `impl { fn\n-                    // foo(); }`).\n-                    let method_vis = impl_item.vis.inherit_from(parent_visibility);\n+                    // Trait methods are always public.\n+                    let method_vis =\n+                        if opt_trait_ref.is_some() { hir::Public } else { impl_item.vis };\n \n                     convert_method(ccx, ImplContainer(def_id),\n                                    impl_item.name, impl_item.id, method_vis,"}]}