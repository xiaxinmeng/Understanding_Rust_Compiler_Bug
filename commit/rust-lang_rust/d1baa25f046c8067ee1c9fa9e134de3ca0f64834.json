{"sha": "d1baa25f046c8067ee1c9fa9e134de3ca0f64834", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYmFhMjVmMDQ2YzgwNjdlZTFjOWZhOWUxMzRkZTNjYTBmNjQ4MzQ=", "commit": {"author": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-13T12:16:33Z"}, "committer": {"name": "dvermd", "email": "315743+dvermd@users.noreply.github.com", "date": "2020-10-26T21:34:42Z"}, "message": "clippy_lint: Add 'ref_option_ref' refactor code", "tree": {"sha": "51f59d35612c4d347026e30432dfabacb330c3af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51f59d35612c4d347026e30432dfabacb330c3af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1baa25f046c8067ee1c9fa9e134de3ca0f64834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1baa25f046c8067ee1c9fa9e134de3ca0f64834", "html_url": "https://github.com/rust-lang/rust/commit/d1baa25f046c8067ee1c9fa9e134de3ca0f64834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1baa25f046c8067ee1c9fa9e134de3ca0f64834/comments", "author": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dvermd", "id": 315743, "node_id": "MDQ6VXNlcjMxNTc0Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/315743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvermd", "html_url": "https://github.com/dvermd", "followers_url": "https://api.github.com/users/dvermd/followers", "following_url": "https://api.github.com/users/dvermd/following{/other_user}", "gists_url": "https://api.github.com/users/dvermd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvermd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvermd/subscriptions", "organizations_url": "https://api.github.com/users/dvermd/orgs", "repos_url": "https://api.github.com/users/dvermd/repos", "events_url": "https://api.github.com/users/dvermd/events{/privacy}", "received_events_url": "https://api.github.com/users/dvermd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "213dbf7aacb01cc4d05d47f010833aa6e9c2a7d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/213dbf7aacb01cc4d05d47f010833aa6e9c2a7d0", "html_url": "https://github.com/rust-lang/rust/commit/213dbf7aacb01cc4d05d47f010833aa6e9c2a7d0"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "40ac2b3f4f1e43bc31945c33c2e411de71cdfa42", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1baa25f046c8067ee1c9fa9e134de3ca0f64834/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1baa25f046c8067ee1c9fa9e134de3ca0f64834/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=d1baa25f046c8067ee1c9fa9e134de3ca0f64834", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint_and_sugg};\n-use rustc_hir::{GenericArg, Local, Mutability, TyKind};\n+use rustc_hir::{GenericArg, Local, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -34,12 +34,20 @@ declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n \n impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n+\n+        if let Some(ref ty) = local.ty {\n+            self.check_ref_option_ref(cx, ty);\n+        }\n+    }\n+}\n+\n+impl RefOptionRef {\n+    fn check_ref_option_ref(&self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n         if_chain! {\n-            if let Some(ref ty) = local.ty;\n             if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind ;\n-            if let Some(def_id) = cx.typeck_results().qpath_res(qpath, local.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.typeck_results().qpath_res(qpath, ty.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::OPTION);\n             if let Some(ref params) = last_path_segment(qpath).args ;\n             if !params.parenthesized;\n@@ -57,9 +65,9 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n                     \"since & implements Copy trait, &Option<&T> can be simplifyied into Option<&T>\",\n                     \"try\",\n                     format!(\"Option<{}>\", &snippet(cx, inner_ty.span, \"..\")),\n-                    Applicability::MachineApplicable,\n+                    Applicability::Unspecified,\n                 );\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file"}]}