{"sha": "120789804d5483f14c9682b2b777adf6d2992547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMDc4OTgwNGQ1NDgzZjE0Yzk2ODJiMmI3NzdhZGY2ZDI5OTI1NDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T18:13:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T18:13:39Z"}, "message": "Add line index", "tree": {"sha": "bccbe4a72e648516f838499b91e5158484b5cbcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bccbe4a72e648516f838499b91e5158484b5cbcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120789804d5483f14c9682b2b777adf6d2992547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120789804d5483f14c9682b2b777adf6d2992547", "html_url": "https://github.com/rust-lang/rust/commit/120789804d5483f14c9682b2b777adf6d2992547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120789804d5483f14c9682b2b777adf6d2992547/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "html_url": "https://github.com/rust-lang/rust/commit/1be7af26a83b79863efb0d66a77b1fb7c0235bd2"}], "stats": {"total": 302, "additions": 269, "deletions": 33}, "files": [{"sha": "3d89c64a9fb3fac46653924b4957a4f34cc45462", "filename": "codeless/server/src/caps.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fcaps.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -1,7 +1,20 @@\n-use languageserver_types::ServerCapabilities;\n+use languageserver_types::{\n+    ServerCapabilities,\n+    TextDocumentSyncCapability,\n+    TextDocumentSyncOptions,\n+    TextDocumentSyncKind,\n+};\n \n pub const SERVER_CAPABILITIES: ServerCapabilities = ServerCapabilities {\n-    text_document_sync: None,\n+    text_document_sync: Some(TextDocumentSyncCapability::Options(\n+        TextDocumentSyncOptions {\n+            open_close: Some(true),\n+            change: Some(TextDocumentSyncKind::Full),\n+            will_save: None,\n+            will_save_wait_until: None,\n+            save: None,\n+        }\n+    )),\n     hover_provider: None,\n     completion_provider: None,\n     signature_help_provider: None,"}, {"sha": "41437b62a97895526ce23be44140479281620ff3", "filename": "codeless/server/src/dispatch.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fdispatch.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -9,8 +9,8 @@ use drop_bomb::DropBomb;\n \n use ::{\n     Result,\n-    req::Request,\n-    io::{Io, RawMsg, RawResponse, RawRequest},\n+    req::{Request, Notification},\n+    io::{Io, RawMsg, RawResponse, RawRequest, RawNotification},\n };\n \n pub struct Responder<R: Request> {\n@@ -52,7 +52,7 @@ impl<R: Request> Responder<R>\n }\n \n \n-pub fn parse_as<R>(raw: RawRequest) -> Result<::std::result::Result<(R::Params, Responder<R>), RawRequest>>\n+pub fn parse_request_as<R>(raw: RawRequest) -> Result<::std::result::Result<(R::Params, Responder<R>), RawRequest>>\n     where\n         R: Request,\n         R::Params: DeserializeOwned,\n@@ -71,13 +71,13 @@ pub fn parse_as<R>(raw: RawRequest) -> Result<::std::result::Result<(R::Params,\n     Ok(Ok((params, responder)))\n }\n \n-pub fn expect<R>(io: &mut Io, raw: RawRequest) -> Result<Option<(R::Params, Responder<R>)>>\n+pub fn expect_request<R>(io: &mut Io, raw: RawRequest) -> Result<Option<(R::Params, Responder<R>)>>\n     where\n         R: Request,\n         R::Params: DeserializeOwned,\n         R::Result: Serialize,\n {\n-    let ret = match parse_as::<R>(raw)? {\n+    let ret = match parse_request_as::<R>(raw)? {\n         Ok(x) => Some(x),\n         Err(raw) => {\n             unknown_method(io, raw)?;\n@@ -87,6 +87,37 @@ pub fn expect<R>(io: &mut Io, raw: RawRequest) -> Result<Option<(R::Params, Resp\n     Ok(ret)\n }\n \n+pub fn parse_notification_as<N>(raw: RawNotification) -> Result<::std::result::Result<N::Params, RawNotification>>\n+    where\n+        N: Notification,\n+        N::Params: DeserializeOwned,\n+{\n+    if raw.method != N::METHOD {\n+        return Ok(Err(raw));\n+    }\n+    let params: N::Params = serde_json::from_value(raw.params)?;\n+    Ok(Ok(params))\n+}\n+\n+pub fn handle_notification<N, F>(not: &mut Option<RawNotification>, f: F) -> Result<()>\n+    where\n+        N: Notification,\n+        N::Params: DeserializeOwned,\n+        F: FnOnce(N::Params) -> Result<()>\n+{\n+    match not.take() {\n+        None => Ok(()),\n+        Some(n) => match parse_notification_as::<N>(n)? {\n+            Ok(params) => f(params),\n+            Err(n) => {\n+                *not = Some(n);\n+                Ok(())\n+            },\n+        }\n+    }\n+}\n+\n+\n pub fn unknown_method(io: &mut Io, raw: RawRequest) -> Result<()> {\n     error(io, raw.id, ErrorCode::MethodNotFound, \"unknown method\")\n }"}, {"sha": "3f257941add7eb8a70f870bb0e87a1356670df30", "filename": "codeless/server/src/handlers.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fhandlers.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -0,0 +1,13 @@\n+use libanalysis::World;\n+use libeditor;\n+use {req, Result};\n+\n+pub fn handle_syntax_tree(\n+    world: World,\n+    params: req::SyntaxTreeParams\n+) -> Result<String> {\n+    let path = params.text_document.uri.to_file_path()\n+        .map_err(|()| format_err!(\"invalid path\"))?;\n+    let file = world.file_syntax(&path)?;\n+    Ok(libeditor::syntax_tree(&file))\n+}"}, {"sha": "287d650fa4f66d243952d33810b025262135f68e", "filename": "codeless/server/src/main.rs", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fmain.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -19,20 +19,25 @@ mod io;\n mod caps;\n mod req;\n mod dispatch;\n+mod handlers;\n+\n+use std::path::PathBuf;\n \n use threadpool::ThreadPool;\n use crossbeam_channel::{bounded, Sender, Receiver};\n use flexi_logger::Logger;\n use libanalysis::WorldState;\n+use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier, TextDocumentIdentifier};\n \n use ::{\n     io::{Io, RawMsg},\n+    handlers::handle_syntax_tree,\n };\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n \n fn main() -> Result<()> {\n-    Logger::with_env_or_str(\"m=trace\")\n+    Logger::with_env_or_str(\"m=trace, libanalysis=trace\")\n         .log_to_file()\n         .directory(\"log\")\n         .start()?;\n@@ -70,7 +75,7 @@ fn initialize(io: &mut Io) -> Result<()> {\n     loop {\n         match io.recv()? {\n             RawMsg::Request(req) => {\n-                if let Some((_params, resp)) = dispatch::expect::<req::Initialize>(io, req)? {\n+                if let Some((_params, resp)) = dispatch::expect_request::<req::Initialize>(io, req)? {\n                     resp.result(io, req::InitializeResult {\n                         capabilities: caps::SERVER_CAPABILITIES\n                     })?;\n@@ -148,39 +153,58 @@ fn main_loop(\n \n         match msg {\n             RawMsg::Request(req) => {\n-                let req = match dispatch::parse_as::<req::SyntaxTree>(req)? {\n+                let req = match dispatch::parse_request_as::<req::SyntaxTree>(req)? {\n                     Ok((params, resp)) => {\n                         let world = world.snapshot();\n                         let sender = sender.clone();\n                         pool.execute(move || {\n-                            let res: Result<String> = (|| {\n-                                let path = params.text_document.uri.to_file_path()\n-                                    .map_err(|()| format_err!(\"invalid path\"))?;\n-                                let file = world.file_syntax(&path)?;\n-                                Ok(libeditor::syntax_tree(&file))\n-                            })();\n-\n+                            let res: Result<String> = handle_syntax_tree(world, params);\n                             sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n                         });\n                         continue;\n                     }\n                     Err(req) => req,\n                 };\n \n-                if let Some(((), resp)) = dispatch::expect::<req::Shutdown>(io, req)? {\n-                    info!(\"shutdown request\");\n+                if let Some(((), resp)) = dispatch::expect_request::<req::Shutdown>(io, req)? {\n+                    info!(\"clean shutdown started\");\n                     resp.result(io, ())?;\n                     return Ok(());\n                 }\n             }\n+            RawMsg::Notification(not) => {\n+                use dispatch::handle_notification as h;\n+                let mut not = Some(not);\n+                h::<req::DidOpenTextDocument, _>(&mut not, |params| {\n+                    let path = params.text_document.file_path()?;\n+                    world.change_overlay(path, Some(params.text_document.text));\n+                    Ok(())\n+                })?;\n+                h::<req::DidChangeTextDocument, _>(&mut not, |mut params| {\n+                    let path = params.text_document.file_path()?;\n+                    let text = params.content_changes.pop()\n+                        .ok_or_else(|| format_err!(\"empty changes\"))?\n+                        .text;\n+                    world.change_overlay(path, Some(text));\n+                    Ok(())\n+                })?;\n+                h::<req::DidCloseTextDocument, _>(&mut not, |params| {\n+                    let path = params.text_document.file_path()?;\n+                    world.change_overlay(path, None);\n+                    Ok(())\n+                })?;\n+\n+                if let Some(not) = not {\n+                    error!(\"unhandled notification: {:?}\", not)\n+                }\n+            }\n             msg => {\n                 eprintln!(\"msg = {:?}\", msg);\n             }\n         }\n     }\n }\n \n-\n trait FnBox<A, R>: Send {\n     fn call_box(self: Box<Self>, a: A) -> R;\n }\n@@ -190,3 +214,28 @@ impl<A, R, F: FnOnce(A) -> R + Send> FnBox<A, R> for F {\n         (*self)(a)\n     }\n }\n+\n+trait FilePath {\n+    fn file_path(&self) -> Result<PathBuf>;\n+}\n+\n+impl FilePath for TextDocumentItem {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.uri.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", self.uri))\n+    }\n+}\n+\n+impl FilePath for VersionedTextDocumentIdentifier {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.uri.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", self.uri))\n+    }\n+}\n+\n+impl FilePath for TextDocumentIdentifier {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.uri.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", self.uri))\n+    }\n+}"}, {"sha": "ee4a786c745a859c4816be18d9d6477771b6d915", "filename": "codeless/server/src/req.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Freq.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -1,6 +1,9 @@\n-use languageserver_types::TextDocumentIdentifier;\n-pub use languageserver_types::request::*;\n-pub use languageserver_types::{InitializeResult};\n+use languageserver_types::{TextDocumentIdentifier, Range};\n+\n+pub use languageserver_types::{\n+    request::*, notification::*,\n+    InitializeResult,\n+};\n \n pub enum SyntaxTree {}\n \n@@ -11,7 +14,21 @@ impl Request for SyntaxTree {\n }\n \n #[derive(Deserialize, Debug)]\n-#[serde(rename_all=\"camelCase\")]\n+#[serde(rename_all = \"camelCase\")]\n pub struct SyntaxTreeParams {\n     pub text_document: TextDocumentIdentifier\n }\n+\n+pub enum ExtendSelection {}\n+\n+#[derive(Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExtendSelectionParams {\n+    pub text_document: TextDocumentIdentifier,\n+    pub selections: Vec<Range>,\n+}\n+\n+\n+pub struct ExtendSelectionResult {\n+    pub selections: Vec<Range>,\n+}"}, {"sha": "792af5a735d6e22ec07ac0c25988b6da8b0499ee", "filename": "codeless/src/extension.ts", "status": "modified", "additions": 51, "deletions": 4, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/codeless%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fsrc%2Fextension.ts?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -6,7 +6,8 @@ import {\n     ServerOptions,\n     TransportKind,\n     Executable,\n-    TextDocumentIdentifier\n+    TextDocumentIdentifier,\n+    Range\n } from 'vscode-languageclient';\n \n \n@@ -18,6 +19,7 @@ let uris = {\n \n \n export function activate(context: vscode.ExtensionContext) {\n+    let textDocumentContentProvider = new TextDocumentContentProvider()\n     let dispose = (disposable) => {\n         context.subscriptions.push(disposable);\n     }\n@@ -26,11 +28,39 @@ export function activate(context: vscode.ExtensionContext) {\n     }\n \n     registerCommand('libsyntax-rust.syntaxTree', () => openDoc(uris.syntaxTree))\n+    registerCommand('libsyntax-rust.extendSelection', async () => {\n+        let editor = vscode.window.activeTextEditor\n+        if (editor == null || editor.document.languageId != \"rust\") return\n+        let request: ExtendSelectionParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            selections: editor.selections.map((s) => {\n+                let r: Range = { start: s.start, end: s.end }\n+                return r;\n+            })\n+        }\n+        let response = await client.sendRequest<ExtendSelectionResult>(\"m/extendSelection\", request)\n+        editor.selections = response.selections.map((range) => {\n+            return new vscode.Selection(\n+                new vscode.Position(range.start.line, range.start.character),\n+                new vscode.Position(range.end.line, range.end.character),\n+            )\n+        })\n+    })\n+\n     dispose(vscode.workspace.registerTextDocumentContentProvider(\n         'libsyntax-rust',\n-        new TextDocumentContentProvider()\n+        textDocumentContentProvider\n     ))\n     startServer()\n+    vscode.workspace.onDidChangeTextDocument((event: vscode.TextDocumentChangeEvent) => {\n+        let doc = event.document\n+        if (doc.languageId != \"rust\") return\n+        // We need to order this after LS updates, but there's no API for that.\n+        // Hence, good old setTimeout.\n+        setTimeout(() => {\n+            textDocumentContentProvider.eventEmitter.fire(uris.syntaxTree)\n+        }, 10)\n+    }, null, context.subscriptions)\n }\n \n export function deactivate(): Thenable<void> {\n@@ -76,11 +106,28 @@ class TextDocumentContentProvider implements vscode.TextDocumentContentProvider\n     public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n         let editor = vscode.window.activeTextEditor;\n         if (editor == null) return \"\"\n-        let textDocument: TextDocumentIdentifier = { uri: editor.document.uri.toString() };\n-        return client.sendRequest(\"m/syntaxTree\", { textDocument })\n+        let request: SyntaxTreeParams = {\n+            textDocument: { uri: editor.document.uri.toString() }\n+        };\n+        return client.sendRequest<SyntaxTreeResult>(\"m/syntaxTree\", request);\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {\n         return this.eventEmitter.event\n     }\n }\n+\n+interface SyntaxTreeParams {\n+    textDocument: TextDocumentIdentifier;\n+}\n+\n+type SyntaxTreeResult = string\n+\n+interface ExtendSelectionParams {\n+    textDocument: TextDocumentIdentifier;\n+    selections: Range[];\n+}\n+\n+interface ExtendSelectionResult {\n+    selections: Range[];\n+}"}, {"sha": "737463258e9260117e0e0f44e6ba43e820199c35", "filename": "libanalysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/libanalysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/libanalysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libanalysis%2FCargo.toml?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -4,6 +4,7 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n+log = \"0.4.2\"\n failure = \"0.1.2\"\n parking_lot = \"0.6.3\"\n libsyntax2 = { path = \"../\" }"}, {"sha": "417a544cae6a3ca8836a90b7e641f912b7de0c96", "filename": "libanalysis/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/libanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/libanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libanalysis%2Fsrc%2Flib.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -1,6 +1,10 @@\n extern crate failure;\n-extern crate libsyntax2;\n extern crate parking_lot;\n+#[macro_use]\n+extern crate log;\n+extern crate libsyntax2;\n+\n+mod arena;\n \n use std::{\n     fs,\n@@ -66,8 +70,10 @@ impl World {\n                 return Ok(file.clone());\n             }\n         }\n-\n-        let file = self.with_file_text(path, ast::File::parse)?;\n+        let file = self.with_file_text(path, |text| {\n+            trace!(\"parsing file: {}\", path.display());\n+            ast::File::parse(text)\n+        })?;\n         let mut guard = self.data.file_map.write();\n         let file = guard.entry(path.to_owned())\n             .or_insert(file)\n@@ -86,7 +92,7 @@ impl World {\n                 return Ok(f(&*text));\n             }\n         }\n-\n+        trace!(\"loading file from disk: {}\", path.display());\n         let text = fs::read_to_string(path)?;\n         {\n             let mut guard = self.data.fs_map.write();"}, {"sha": "fedcf790a53ef31bf87d4e221572fef6826a90c7", "filename": "libeditor/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/libeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/libeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2FCargo.toml?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -5,5 +5,6 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n publish = false\n \n [dependencies]\n-libsyntax2 = { path = \"../\" }\n itertools = \"0.7.8\"\n+superslice = \"0.1.0\"\n+libsyntax2 = { path = \"../\" }"}, {"sha": "9da71743f3d5de314934bf60c277d09752b66304", "filename": "libeditor/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/libeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/libeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Flib.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -1,6 +1,8 @@\n extern crate libsyntax2;\n+extern crate superslice;\n \n mod extend_selection;\n+mod line_index;\n \n use libsyntax2::{\n     SyntaxNodeRef, AstNode,"}, {"sha": "feb482b3279331d7b3872cd753ab791314b31ddc", "filename": "libeditor/src/line_index.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/120789804d5483f14c9682b2b777adf6d2992547/libeditor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120789804d5483f14c9682b2b777adf6d2992547/libeditor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Fline_index.rs?ref=120789804d5483f14c9682b2b777adf6d2992547", "patch": "@@ -0,0 +1,56 @@\n+use superslice::Ext;\n+use ::{TextUnit};\n+\n+pub struct LineIndex {\n+    newlines: Vec<TextUnit>,\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct LineCol {\n+    pub line: u32,\n+    pub col: TextUnit,\n+}\n+\n+impl LineIndex {\n+    pub fn new(text: &str) -> LineIndex {\n+        let mut newlines = vec![0.into()];\n+        let mut curr = 0.into();\n+        for c in text.chars() {\n+            curr += TextUnit::of_char(c);\n+            if c == '\\n' {\n+                newlines.push(curr);\n+            }\n+        }\n+        LineIndex { newlines }\n+    }\n+\n+    pub fn translate(&self, offset: TextUnit) -> LineCol {\n+        let line = self.newlines.upper_bound(&offset) - 1;\n+        let line_start_offset = self.newlines[line];\n+        let col = offset - line_start_offset;\n+        return LineCol { line: line as u32, col }\n+    }\n+}\n+\n+#[test]\n+fn test_line_index() {\n+    let text = \"hello\\nworld\";\n+    let index = LineIndex::new(text);\n+    assert_eq!(index.translate(0.into()), LineCol { line: 0, col: 0.into()});\n+    assert_eq!(index.translate(1.into()), LineCol { line: 0, col: 1.into()});\n+    assert_eq!(index.translate(5.into()), LineCol { line: 0, col: 5.into()});\n+    assert_eq!(index.translate(6.into()), LineCol { line: 1, col: 0.into()});\n+    assert_eq!(index.translate(7.into()), LineCol { line: 1, col: 1.into()});\n+    assert_eq!(index.translate(8.into()), LineCol { line: 1, col: 2.into()});\n+    assert_eq!(index.translate(10.into()), LineCol { line: 1, col: 4.into()});\n+    assert_eq!(index.translate(11.into()), LineCol { line: 1, col: 5.into()});\n+    assert_eq!(index.translate(12.into()), LineCol { line: 1, col: 6.into()});\n+\n+    let text = \"\\nhello\\nworld\";\n+    let index = LineIndex::new(text);\n+    assert_eq!(index.translate(0.into()), LineCol { line: 0, col: 0.into()});\n+    assert_eq!(index.translate(1.into()), LineCol { line: 1, col: 0.into()});\n+    assert_eq!(index.translate(2.into()), LineCol { line: 1, col: 1.into()});\n+    assert_eq!(index.translate(6.into()), LineCol { line: 1, col: 5.into()});\n+    assert_eq!(index.translate(7.into()), LineCol { line: 2, col: 0.into()});\n+}"}]}