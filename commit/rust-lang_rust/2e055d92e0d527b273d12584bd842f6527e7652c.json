{"sha": "2e055d92e0d527b273d12584bd842f6527e7652c", "node_id": "C_kwDOAAsO6NoAKDJlMDU1ZDkyZTBkNTI3YjI3M2QxMjU4NGJkODQyZjY1MjdlNzY1MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-23T03:13:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-23T03:13:26Z"}, "message": "Auto merge of #91094 - inquisitivecrystal:rustdoc-top-mod, r=jyn514\n\nAvoid documenting top-level private imports\n\nPR #88447 aimed to make rustdoc's `--document-private-items` mode only document imports that are visible outside the importing module. Unfortunately, I inadvertently set things up so that imports at the crate top-level are always documented, regardless of their visibility. This behavior was unintended and is [not desirable](https://github.com/rust-lang/rust/issues/90865#issuecomment-971172649).\n\nThis PR treats top-level imports as never being visible outside their parent module. In practice, the only way a top-level import can be visible externally is if it's fully public, and there's a seperate check for that.\n\nIt's worth calling attention to the fact that this change means that `pub(crate)` imports will be visible in lower level modules, but not at the top-level. This is because, at the top level of the crate, `pub(crate)` means the same thing as `pub(self)`.\n\nIt turned out that there were existing tests checking for the only behavior, which I didn't notice at the time of my previous PR. I have updated them to check for the new behavior and substantially extended them to handle differences between the top-level module and lower level modules. I may have gone overboard, so please tell me if there's anything I should cut.\n\nr? `@jyn514`\n\nFixes #90865.", "tree": {"sha": "c080a888a183d63a7bcfd4d0210e54e89dfcd415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c080a888a183d63a7bcfd4d0210e54e89dfcd415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e055d92e0d527b273d12584bd842f6527e7652c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e055d92e0d527b273d12584bd842f6527e7652c", "html_url": "https://github.com/rust-lang/rust/commit/2e055d92e0d527b273d12584bd842f6527e7652c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e055d92e0d527b273d12584bd842f6527e7652c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d0c79d26995a973c6f33c32ffb0c827d78bb213", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0c79d26995a973c6f33c32ffb0c827d78bb213", "html_url": "https://github.com/rust-lang/rust/commit/8d0c79d26995a973c6f33c32ffb0c827d78bb213"}, {"sha": "3c510383c4149411ea23b18a7d0048fc3c5a17cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c510383c4149411ea23b18a7d0048fc3c5a17cc", "html_url": "https://github.com/rust-lang/rust/commit/3c510383c4149411ea23b18a7d0048fc3c5a17cc"}], "stats": {"total": 245, "additions": 222, "deletions": 23}, "files": [{"sha": "de1293cd96dfc0160a4c419ae380627bb8a500ff", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2e055d92e0d527b273d12584bd842f6527e7652c", "patch": "@@ -1919,8 +1919,20 @@ fn clean_use_statement(\n     let inline_attr = attrs.lists(sym::doc).get_word_attr(sym::inline);\n     let pub_underscore = visibility.is_public() && name == kw::Underscore;\n     let current_mod = cx.tcx.parent_module_from_def_id(import.def_id);\n+\n+    // The parent of the module in which this import resides. This\n+    // is the same as `current_mod` if that's already the top\n+    // level module.\n     let parent_mod = cx.tcx.parent_module_from_def_id(current_mod);\n \n+    // This checks if the import can be seen from a higher level module.\n+    // In other words, it checks if the visibility is the equivalent of\n+    // `pub(super)` or higher. If the current module is the top level\n+    // module, there isn't really a parent module, which makes the results\n+    // meaningless. In this case, we make sure the answer is `false`.\n+    let is_visible_from_parent_mod = visibility.is_accessible_from(parent_mod.to_def_id(), cx.tcx)\n+        && !current_mod.is_top_level_module();\n+\n     if pub_underscore {\n         if let Some(ref inline) = inline_attr {\n             rustc_errors::struct_span_err!(\n@@ -1939,8 +1951,7 @@ fn clean_use_statement(\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n     let mut denied = !(visibility.is_public()\n-        || (cx.render_options.document_private\n-            && visibility.is_accessible_from(parent_mod.to_def_id(), cx.tcx)))\n+        || (cx.render_options.document_private && is_visible_from_parent_mod))\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)"}, {"sha": "4336993a36eb1ccdeef6ba1dc612f903dd60f5a9", "filename": "src/test/rustdoc/auxiliary/reexports.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexports.rs?ref=2e055d92e0d527b273d12584bd842f6527e7652c", "patch": "@@ -4,39 +4,63 @@ pub macro addr_of($place:expr) {\n     &raw const $place\n }\n \n+pub macro addr_of_crate($place:expr) {\n+    &raw const $place\n+}\n+\n+pub macro addr_of_super($place:expr) {\n+    &raw const $place\n+}\n+\n pub macro addr_of_self($place:expr) {\n     &raw const $place\n }\n \n-pub macro addr_of_crate($place:expr) {\n+pub macro addr_of_local($place:expr) {\n     &raw const $place\n }\n \n pub struct Foo;\n-pub struct FooSelf;\n pub struct FooCrate;\n+pub struct FooSuper;\n+pub struct FooSelf;\n+pub struct FooLocal;\n \n pub enum Bar { Foo, }\n-pub enum BarSelf { Foo, }\n pub enum BarCrate { Foo, }\n+pub enum BarSuper { Foo, }\n+pub enum BarSelf { Foo, }\n+pub enum BarLocal { Foo, }\n \n pub fn foo() {}\n-pub fn foo_self() {}\n pub fn foo_crate() {}\n+pub fn foo_super() {}\n+pub fn foo_self() {}\n+pub fn foo_local() {}\n \n pub type Type = i32;\n-pub type TypeSelf = i32;\n pub type TypeCrate = i32;\n+pub type TypeSuper = i32;\n+pub type TypeSelf = i32;\n+pub type TypeLocal = i32;\n \n pub union Union {\n     a: i8,\n     b: i8,\n }\n+pub union UnionCrate {\n+    a: i8,\n+    b: i8,\n+}\n+pub union UnionSuper {\n+    a: i8,\n+    b: i8,\n+}\n pub union UnionSelf {\n     a: i8,\n     b: i8,\n }\n-pub union UnionCrate {\n+pub union UnionLocal {\n     a: i8,\n     b: i8,\n }"}, {"sha": "95f741807494cf8e8ba7b780ab2fb7d0783ecbd4", "filename": "src/test/rustdoc/reexports-priv.rs", "status": "modified", "additions": 97, "deletions": 15, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports-priv.rs?ref=2e055d92e0d527b273d12584bd842f6527e7652c", "patch": "@@ -7,47 +7,129 @@ extern crate reexports;\n \n // @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n pub use reexports::addr_of;\n-// @has 'foo/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+// @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n-// @has 'foo/macro.addr_of_self.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_self($place : expr) {'\n+// @!has 'foo/macro.addr_of_self.html'\n pub(self) use reexports::addr_of_self;\n+// @!has 'foo/macro.addr_of_local.html'\n+use reexports::addr_of_local;\n \n // @has 'foo/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n-// @has 'foo/struct.FooCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooCrate;'\n+// @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n-// @has 'foo/struct.FooSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooSelf;'\n+// @!has 'foo/struct.FooSelf.html'\n pub(self) use reexports::FooSelf;\n+// @!has 'foo/struct.FooLocal.html'\n+use reexports::FooLocal;\n \n // @has 'foo/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n-// @has 'foo/enum.BarCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarCrate {'\n+// @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n-// @has 'foo/enum.BarSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarSelf {'\n+// @!has 'foo/enum.BarSelf.html'\n pub(self) use reexports::BarSelf;\n+// @!has 'foo/enum.BarLocal.html'\n+use reexports::BarLocal;\n \n // @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n pub use reexports::foo;\n-// @has 'foo/fn.foo_crate.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_crate()'\n+// @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n-// @has 'foo/fn.foo_self.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_self()'\n+// @!has 'foo/fn.foo_self.html'\n pub(self) use reexports::foo_self;\n+// @!has 'foo/fn.foo_local.html'\n+use reexports::foo_local;\n \n // @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n pub use reexports::Type;\n-// @has 'foo/type.TypeCrate.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeCrate ='\n+// @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n-// @has 'foo/type.TypeSelf.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeSelf ='\n+// @!has 'foo/type.TypeSelf.html'\n pub(self) use reexports::TypeSelf;\n+// @!has 'foo/type.TypeLocal.html'\n+use reexports::TypeLocal;\n \n // @has 'foo/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n-// @has 'foo/union.UnionCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionCrate {'\n+// @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;\n-// @has 'foo/union.UnionSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionSelf {'\n+// @!has 'foo/union.UnionSelf.html'\n pub(self) use reexports::UnionSelf;\n+// @!has 'foo/union.UnionLocal.html'\n+use reexports::UnionLocal;\n \n-pub mod foo {\n-    // @!has 'foo/foo/union.Union.html'\n-    use crate::reexports::Union;\n+pub mod outer {\n+    pub mod inner {\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+        pub use reexports::addr_of;\n+        // @has 'foo/outer/inner/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+        pub(crate) use reexports::addr_of_crate;\n+        // @has 'foo/outer/inner/macro.addr_of_super.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) macro addr_of_super($place : expr) {'\n+        pub(super) use reexports::addr_of_super;\n+        // @!has 'foo/outer/inner/macro.addr_of_self.html'\n+        pub(self) use reexports::addr_of_self;\n+        // @!has 'foo/outer/inner/macro.addr_of_local.html'\n+        use reexports::addr_of_local;\n+\n+        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n+        pub use reexports::Foo;\n+        // @has 'foo/outer/inner/struct.FooCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooCrate;'\n+        pub(crate) use reexports::FooCrate;\n+        // @has 'foo/outer/inner/struct.FooSuper.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) struct FooSuper;'\n+        pub(super) use reexports::FooSuper;\n+        // @!has 'foo/outer/inner/struct.FooSelf.html'\n+        pub(self) use reexports::FooSelf;\n+        // @!has 'foo/outer/inner/struct.FooLocal.html'\n+        use reexports::FooLocal;\n+\n+        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n+        pub use reexports::Bar;\n+        // @has 'foo/outer/inner/enum.BarCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarCrate {'\n+        pub(crate) use reexports::BarCrate;\n+        // @has 'foo/outer/inner/enum.BarSuper.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) enum BarSuper {'\n+        pub(super) use reexports::BarSuper;\n+        // @!has 'foo/outer/inner/enum.BarSelf.html'\n+        pub(self) use reexports::BarSelf;\n+        // @!has 'foo/outer/inner/enum.BarLocal.html'\n+        use reexports::BarLocal;\n+\n+        // @has 'foo/outer/inner/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+        pub use reexports::foo;\n+        // @has 'foo/outer/inner/fn.foo_crate.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_crate()'\n+        pub(crate) use reexports::foo_crate;\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//*[@class=\"rust fn\"]' 'pub(in outer) fn foo_super()'\n+        pub(super) use::reexports::foo_super;\n+        // @!has 'foo/outer/inner/fn.foo_self.html'\n+        pub(self) use reexports::foo_self;\n+        // @!has 'foo/outer/inner/fn.foo_local.html'\n+        use reexports::foo_local;\n+\n+        // @has 'foo/outer/inner/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+        pub use reexports::Type;\n+        // @has 'foo/outer/inner/type.TypeCrate.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeCrate ='\n+        pub(crate) use reexports::TypeCrate;\n+        // @has 'foo/outer/inner/type.TypeSuper.html' '//*[@class=\"rust typedef\"]' 'pub(in outer) type TypeSuper ='\n+        pub(super) use reexports::TypeSuper;\n+        // @!has 'foo/outer/inner/type.TypeSelf.html'\n+        pub(self) use reexports::TypeSelf;\n+        // @!has 'foo/outer/inner/type.TypeLocal.html'\n+        use reexports::TypeLocal;\n+\n+        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n+        pub use reexports::Union;\n+        // @has 'foo/outer/inner/union.UnionCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionCrate {'\n+        pub(crate) use reexports::UnionCrate;\n+        // @has 'foo/outer/inner/union.UnionSuper.html' '//*[@class=\"docblock item-decl\"]' 'pub(in outer) union UnionSuper {'\n+        pub(super) use reexports::UnionSuper;\n+        // @!has 'foo/outer/inner/union.UnionSelf.html'\n+        pub(self) use reexports::UnionSelf;\n+        // @!has 'foo/outer/inner/union.UnionLocal.html'\n+        use reexports::UnionLocal;\n+    }\n+}\n+\n+mod re_re_exports {\n+        // @!has 'foo/re_re_exports/union.Union.html'\n+        use crate::reexports::Union;\n }"}, {"sha": "3b315308470356e4eae661fd59da051143927ad3", "filename": "src/test/rustdoc/reexports.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Ftest%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e055d92e0d527b273d12584bd842f6527e7652c/src%2Ftest%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports.rs?ref=2e055d92e0d527b273d12584bd842f6527e7652c", "patch": "@@ -10,38 +10,120 @@ pub use reexports::addr_of;\n pub(crate) use reexports::addr_of_crate;\n // @!has 'foo/macro.addr_of_self.html'\n pub(self) use reexports::addr_of_self;\n+// @!has 'foo/macro.addr_of_local.html'\n+use reexports::addr_of_local;\n \n // @has 'foo/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n // @!has 'foo/struct.FooSelf.html'\n pub(self) use reexports::FooSelf;\n+// @!has 'foo/struct.FooLocal.html'\n+use reexports::FooLocal;\n \n // @has 'foo/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n // @!has 'foo/enum.BarSelf.html'\n pub(self) use reexports::BarSelf;\n+// @!has 'foo/enum.BarLocal.html'\n+use reexports::BarLocal;\n \n // @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n // @!has 'foo/fn.foo_self.html'\n pub(self) use reexports::foo_self;\n+// @!has 'foo/fn.foo_local.html'\n+use reexports::foo_local;\n \n // @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n // @!has 'foo/type.TypeSelf.html'\n pub(self) use reexports::TypeSelf;\n+// @!has 'foo/type.TypeLocal.html'\n+use reexports::TypeLocal;\n \n // @has 'foo/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;\n // @!has 'foo/union.UnionSelf.html'\n pub(self) use reexports::UnionSelf;\n+// @!has 'foo/union.UnionLocal.html'\n+use reexports::UnionLocal;\n+\n+pub mod outer {\n+    pub mod inner {\n+        // @has 'foo/outer/inner/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n+        pub use reexports::addr_of;\n+        // @!has 'foo/outer/inner/macro.addr_of_crate.html'\n+        pub(crate) use reexports::addr_of_crate;\n+        // @!has 'foo/outer/inner/macro.addr_of_super.html'\n+        pub(super) use reexports::addr_of_super;\n+        // @!has 'foo/outer/inner/macro.addr_of_self.html'\n+        pub(self) use reexports::addr_of_self;\n+        // @!has 'foo/outer/inner/macro.addr_of_local.html'\n+        use reexports::addr_of_local;\n+\n+        // @has 'foo/outer/inner/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n+        pub use reexports::Foo;\n+        // @!has 'foo/outer/inner/struct.FooCrate.html'\n+        pub(crate) use reexports::FooCrate;\n+        // @!has 'foo/outer/inner/struct.FooSuper.html'\n+        pub(super) use reexports::FooSuper;\n+        // @!has 'foo/outer/inner/struct.FooSelf.html'\n+        pub(self) use reexports::FooSelf;\n+        // @!has 'foo/outer/inner/struct.FooLocal.html'\n+        use reexports::FooLocal;\n+\n+        // @has 'foo/outer/inner/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n+        pub use reexports::Bar;\n+        // @!has 'foo/outer/inner/enum.BarCrate.html'\n+        pub(crate) use reexports::BarCrate;\n+        // @!has 'foo/outer/inner/enum.BarSuper.html'\n+        pub(super) use reexports::BarSuper;\n+        // @!has 'foo/outer/inner/enum.BarSelf.html'\n+        pub(self) use reexports::BarSelf;\n+        // @!has 'foo/outer/inner/enum.BarLocal.html'\n+        use reexports::BarLocal;\n+\n+        // @has 'foo/outer/inner/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+        pub use reexports::foo;\n+        // @!has 'foo/outer/inner/fn.foo_crate.html'\n+        pub(crate) use reexports::foo_crate;\n+        // @!has 'foo/outer/inner/fn.foo_super.html'\n+        pub(super) use::reexports::foo_super;\n+        // @!has 'foo/outer/inner/fn.foo_self.html'\n+        pub(self) use reexports::foo_self;\n+        // @!has 'foo/outer/inner/fn.foo_local.html'\n+        use reexports::foo_local;\n+\n+        // @has 'foo/outer/inner/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+        pub use reexports::Type;\n+        // @!has 'foo/outer/inner/type.TypeCrate.html'\n+        pub(crate) use reexports::TypeCrate;\n+        // @!has 'foo/outer/inner/type.TypeSuper.html'\n+        pub(super) use reexports::TypeSuper;\n+        // @!has 'foo/outer/inner/type.TypeSelf.html'\n+        pub(self) use reexports::TypeSelf;\n+        // @!has 'foo/outer/inner/type.TypeLocal.html'\n+        use reexports::TypeLocal;\n+\n+        // @has 'foo/outer/inner/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n+        pub use reexports::Union;\n+        // @!has 'foo/outer/inner/union.UnionCrate.html'\n+        pub(crate) use reexports::UnionCrate;\n+        // @!has 'foo/outer/inner/union.UnionSuper.html'\n+        pub(super) use reexports::UnionSuper;\n+        // @!has 'foo/outer/inner/union.UnionSelf.html'\n+        pub(self) use reexports::UnionSelf;\n+        // @!has 'foo/outer/inner/union.UnionLocal.html'\n+        use reexports::UnionLocal;\n+    }\n+}"}]}