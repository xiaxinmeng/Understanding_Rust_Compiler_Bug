{"sha": "74dc146f4296c209bf688d7cddff51eab48e8496", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGMxNDZmNDI5NmMyMDliZjY4OGQ3Y2RkZmY1MWVhYjQ4ZTg0OTY=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T14:09:23Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T14:09:23Z"}, "message": "Explain explicit slicing in slice cmp and partial_cmp methods\n\nThe explicit slicing is needed in order to enable additional range\ncheck optimizations in the compiler.", "tree": {"sha": "3dc25b4a17a0c17125ec20c7aba541d15ef73a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dc25b4a17a0c17125ec20c7aba541d15ef73a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74dc146f4296c209bf688d7cddff51eab48e8496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74dc146f4296c209bf688d7cddff51eab48e8496", "html_url": "https://github.com/rust-lang/rust/commit/74dc146f4296c209bf688d7cddff51eab48e8496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74dc146f4296c209bf688d7cddff51eab48e8496/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08b9edfe94c2680bde224b9dc6dd4a0de6616a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b9edfe94c2680bde224b9dc6dd4a0de6616a07", "html_url": "https://github.com/rust-lang/rust/commit/08b9edfe94c2680bde224b9dc6dd4a0de6616a07"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "5518bacb019e880abf82222582875bfe8f66d516", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74dc146f4296c209bf688d7cddff51eab48e8496/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dc146f4296c209bf688d7cddff51eab48e8496/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=74dc146f4296c209bf688d7cddff51eab48e8496", "patch": "@@ -1560,6 +1560,9 @@ impl<T: Eq> Eq for [T] {}\n impl<T: Ord> Ord for [T] {\n     fn cmp(&self, other: &[T]) -> Ordering {\n         let l = cmp::min(self.len(), other.len());\n+\n+        // Slice to the loop iteration range to enable bound check\n+        // elimination in the compiler\n         let lhs = &self[..l];\n         let rhs = &other[..l];\n \n@@ -1578,6 +1581,9 @@ impl<T: Ord> Ord for [T] {\n impl<T: PartialOrd> PartialOrd for [T] {\n     fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {\n         let l = cmp::min(self.len(), other.len());\n+\n+        // Slice to the loop iteration range to enable bound check\n+        // elimination in the compiler\n         let lhs = &self[..l];\n         let rhs = &other[..l];\n "}]}