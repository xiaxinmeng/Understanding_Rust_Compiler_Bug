{"sha": "6145051eeebeba030cef3aa01a99683b84ff24fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNDUwNTFlZWViZWJhMDMwY2VmM2FhMDFhOTk2ODNiODRmZjI0ZmM=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-29T14:10:32Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-19T13:05:35Z"}, "message": "Replace `sys_common::util::dumb_print` with `rterr!`", "tree": {"sha": "c77a2295b9da5097280dea573b05156909722fad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77a2295b9da5097280dea573b05156909722fad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6145051eeebeba030cef3aa01a99683b84ff24fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6145051eeebeba030cef3aa01a99683b84ff24fc", "html_url": "https://github.com/rust-lang/rust/commit/6145051eeebeba030cef3aa01a99683b84ff24fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6145051eeebeba030cef3aa01a99683b84ff24fc/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "236705f3c30905623f97dc8887c83db520eb27c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/236705f3c30905623f97dc8887c83db520eb27c1", "html_url": "https://github.com/rust-lang/rust/commit/236705f3c30905623f97dc8887c83db520eb27c1"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "9e9052ff92e1bcdeb5ddc4cf643cad6d57e564ba", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6145051eeebeba030cef3aa01a99683b84ff24fc/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6145051eeebeba030cef3aa01a99683b84ff24fc/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=6145051eeebeba030cef3aa01a99683b84ff24fc", "patch": "@@ -63,8 +63,6 @@ use core::ptr::NonNull;\n use core::sync::atomic::{AtomicPtr, Ordering};\n use core::{mem, ptr};\n \n-use crate::sys_common::util::dumb_print;\n-\n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n pub use alloc_crate::alloc::*;\n@@ -317,7 +315,7 @@ pub fn take_alloc_error_hook() -> fn(Layout) {\n }\n \n fn default_alloc_error_hook(layout: Layout) {\n-    dumb_print(format_args!(\"memory allocation of {} bytes failed\\n\", layout.size()));\n+    rterr!(\"memory allocation of {} bytes failed\\n\", layout.size());\n }\n \n #[cfg(not(test))]"}, {"sha": "90911515185799750d965923e9e0d07867f0116b", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6145051eeebeba030cef3aa01a99683b84ff24fc/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6145051eeebeba030cef3aa01a99683b84ff24fc/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=6145051eeebeba030cef3aa01a99683b84ff24fc", "patch": "@@ -20,7 +20,7 @@ use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::backtrace::{self, RustBacktrace};\n use crate::sys_common::rwlock::RWLock;\n-use crate::sys_common::{thread_info, util};\n+use crate::sys_common::thread_info;\n use crate::thread;\n \n #[cfg(not(test))]\n@@ -596,15 +596,15 @@ fn rust_panic_with_hook(\n         if panics > 2 {\n             // Don't try to print the message in this case\n             // - perhaps that is causing the recursive panics.\n-            util::dumb_print(format_args!(\"thread panicked while processing panic. aborting.\\n\"));\n+            rterr!(\"thread panicked while processing panic. aborting.\\n\");\n         } else {\n             // Unfortunately, this does not print a backtrace, because creating\n             // a `Backtrace` will allocate, which we must to avoid here.\n             let panicinfo = PanicInfo::internal_constructor(message, location);\n-            util::dumb_print(format_args!(\n+            rterr!(\n                 \"{}\\npanicked after panic::always_abort(), aborting.\\n\",\n                 panicinfo\n-            ));\n+            );\n         }\n         intrinsics::abort()\n     }\n@@ -637,7 +637,7 @@ fn rust_panic_with_hook(\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n-        util::dumb_print(format_args!(\"thread panicked while panicking. aborting.\\n\"));\n+        rterr!(\"thread panicked while panicking. aborting.\\n\");\n         intrinsics::abort()\n     }\n "}, {"sha": "4ef0e72adf020a0143a472b6d1e6836952f474e9", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6145051eeebeba030cef3aa01a99683b84ff24fc/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6145051eeebeba030cef3aa01a99683b84ff24fc/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=6145051eeebeba030cef3aa01a99683b84ff24fc", "patch": "@@ -40,7 +40,6 @@ pub mod thread_info;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod thread_parker;\n-pub mod util;\n pub mod wtf8;\n \n cfg_if::cfg_if! {"}, {"sha": "f7072cc501103f23aa4b7698e09378877fbbd07e", "filename": "library/std/src/sys_common/util.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/236705f3c30905623f97dc8887c83db520eb27c1/library%2Fstd%2Fsrc%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236705f3c30905623f97dc8887c83db520eb27c1/library%2Fstd%2Fsrc%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Futil.rs?ref=236705f3c30905623f97dc8887c83db520eb27c1", "patch": "@@ -1,9 +0,0 @@\n-use crate::fmt;\n-use crate::io::prelude::*;\n-use crate::sys::stdio::panic_output;\n-\n-pub fn dumb_print(args: fmt::Arguments<'_>) {\n-    if let Some(mut out) = panic_output() {\n-        let _ = out.write_fmt(args);\n-    }\n-}"}]}