{"sha": "760b93adc0976121149105db19acf2ad5f631e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MGI5M2FkYzA5NzYxMjExNDkxMDVkYjE5YWNmMmFkNWY2MzFlNWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-30T02:03:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-05T20:55:11Z"}, "message": "Fallout from the libcollections movement", "tree": {"sha": "6c20eba4139bfdd332187122315f7802367d7d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c20eba4139bfdd332187122315f7802367d7d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760b93adc0976121149105db19acf2ad5f631e5d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760b93adc0976121149105db19acf2ad5f631e5d", "html_url": "https://github.com/rust-lang/rust/commit/760b93adc0976121149105db19acf2ad5f631e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760b93adc0976121149105db19acf2ad5f631e5d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a585375a01b7c6b52ad93f764220bcb18027ef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a585375a01b7c6b52ad93f764220bcb18027ef6", "html_url": "https://github.com/rust-lang/rust/commit/6a585375a01b7c6b52ad93f764220bcb18027ef6"}], "stats": {"total": 671, "additions": 331, "deletions": 340}, "files": [{"sha": "917704a2faacd1e61c3b421039a70483b7746560", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -2058,8 +2058,7 @@ illegal to copy and pass by value.\n Generic `type`, `struct`, and `enum` declarations follow the same pattern:\n \n ~~~~\n-extern crate collections;\n-type Set<T> = collections::HashMap<T, ()>;\n+type Set<T> = std::collections::HashMap<T, ()>;\n \n struct Stack<T> {\n     elements: Vec<T>"}, {"sha": "7e0cda26014a5298d8293e6180aba590245d02a1", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -28,8 +28,6 @@\n        html_root_url = \"http://doc.rust-lang.org/\")]\n #![allow(missing_doc)]\n \n-extern crate collections;\n-\n use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::intrinsics::{TyDesc, get_tydesc};"}, {"sha": "11c777034fe6e00ca21415094ae9a25e07b006b7", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,7 +19,6 @@ use core::ops;\n use core::slice;\n use core::uint;\n \n-use string::String;\n use vec::Vec;\n \n #[deriving(Clone)]\n@@ -980,26 +979,26 @@ impl<'a> Iterator<uint> for BitPositions<'a> {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-    use self::test::Bencher;\n+    use std::prelude::*;\n+    use std::uint;\n+    use std::rand;\n+    use std::rand::Rng;\n+    use test::Bencher;\n \n     use bitv::{Bitv, SmallBitv, BigBitv, BitvSet, from_bools, from_fn,\n                from_bytes};\n     use bitv;\n-\n-    use std::uint;\n-    use std::rand;\n-    use std::rand::Rng;\n+    use vec::Vec;\n \n     static BENCH_BITS : uint = 1 << 14;\n \n     #[test]\n     fn test_to_str() {\n         let zerolen = Bitv::new(0u, false);\n-        assert_eq!(zerolen.to_str(), \"\".to_string());\n+        assert_eq!(zerolen.to_str().as_slice(), \"\");\n \n         let eightbits = Bitv::new(8u, false);\n-        assert_eq!(eightbits.to_str(), \"00000000\".to_string());\n+        assert_eq!(eightbits.to_str().as_slice(), \"00000000\")\n     }\n \n     #[test]\n@@ -1022,7 +1021,7 @@ mod tests {\n         let mut b = bitv::Bitv::new(2, false);\n         b.set(0, true);\n         b.set(1, false);\n-        assert_eq!(b.to_str(), \"10\".to_string());\n+        assert_eq!(b.to_str().as_slice(), \"10\");\n     }\n \n     #[test]\n@@ -1333,7 +1332,7 @@ mod tests {\n     fn test_from_bytes() {\n         let bitv = from_bytes([0b10110110, 0b00000000, 0b11111111]);\n         let str = format!(\"{}{}{}\", \"10110110\", \"00000000\", \"11111111\");\n-        assert_eq!(bitv.to_str(), str);\n+        assert_eq!(bitv.to_str().as_slice(), str.as_slice());\n     }\n \n     #[test]\n@@ -1350,8 +1349,8 @@ mod tests {\n \n     #[test]\n     fn test_from_bools() {\n-        assert!(from_bools([true, false, true, true]).to_str() ==\n-            \"1011\".to_string());\n+        assert!(from_bools([true, false, true, true]).to_str().as_slice() ==\n+                \"1011\");\n     }\n \n     #[test]"}, {"sha": "ebca0157da40be19d728e74ce87f758485ae8480", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -777,6 +777,7 @@ impl<K: fmt::Show + Ord, V: fmt::Show> fmt::Show for BranchElt<K, V> {\n \n #[cfg(test)]\n mod test_btree {\n+    use std::prelude::*;\n \n     use super::{BTree, Node, LeafElt};\n "}, {"sha": "5624c67f1084089da0583545b17c269e5f5acd1d", "filename": "src/libcollections/deque.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdeque.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -41,11 +41,10 @@ pub trait Deque<T> : Mutable {\n \n #[cfg(test)]\n pub mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n-    use std::container::MutableMap;\n+    use std::prelude::*;\n     use std::rand;\n     use std::rand::Rng;\n+    use test::Bencher;\n \n     pub fn insert_rand_n<M:MutableMap<uint,uint>>(n: uint,\n                                                   map: &mut M,"}, {"sha": "8e3a49eecf3396340458bd70dddd5528a13a4e57", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -610,11 +610,14 @@ impl<A: Clone> Clone for DList<A> {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-    use self::test::Bencher;\n-    use deque::Deque;\n+    use std::prelude::*;\n     use std::rand;\n+    use test::Bencher;\n+    use test;\n+\n+    use deque::Deque;\n     use super::{DList, Node, ListInsertion};\n+    use vec::Vec;\n \n     pub fn check_links<T>(list: &DList<T>) {\n         let mut len = 0u;"}, {"sha": "34514fde9dbd1456c8e55465a3860d2c5de7ac11", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -138,7 +138,7 @@ impl<E:CLike> Iterator<E> for Items<E> {\n \n #[cfg(test)]\n mod test {\n-\n+    use std::prelude::*;\n     use std::mem;\n \n     use enum_set::{EnumSet, CLike};"}, {"sha": "4220c0b5559b35f7d588255e4791a729ff7cf0f3", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -68,6 +68,7 @@ use core::prelude::*;\n use alloc::owned::Box;\n use alloc::rc::Rc;\n use core::intrinsics::TypeId;\n+use core::mem;\n \n use vec::Vec;\n \n@@ -97,14 +98,16 @@ pub trait Writer {\n \n //////////////////////////////////////////////////////////////////////////////\n \n+fn id<T>(t: T) -> T { t }\n+\n macro_rules! impl_hash(\n-    ( $($ty:ident)* ) => (\n+    ( $($ty:ident, $uty:ident, $f:path;)* ) => (\n         $(\n             impl<S: Writer> Hash<S> for $ty {\n                 #[inline]\n                 fn hash(&self, state: &mut S) {\n                     let a: [u8, ..::core::$ty::BYTES] = unsafe {\n-                        ::core::mem::transmute(*self)\n+                        mem::transmute($f(*self as $uty) as $ty)\n                     };\n                     state.write(a.as_slice())\n                 }\n@@ -113,7 +116,28 @@ macro_rules! impl_hash(\n     )\n )\n \n-impl_hash!( u8 u16 u32 u64 uint i8 i16 i32 i64 int )\n+impl_hash!(\n+    u8, u8, id;\n+    u16, u16, mem::to_le16;\n+    u32, u32, mem::to_le32;\n+    u64, u64, mem::to_le64;\n+    i8, u8, id;\n+    i16, u16, mem::to_le16;\n+    i32, u32, mem::to_le32;\n+    i64, u64, mem::to_le64;\n+)\n+\n+#[cfg(target_word_size = \"32\")]\n+impl_hash!(\n+    uint, u32, mem::to_le32;\n+    int, u32, mem::to_le32;\n+)\n+\n+#[cfg(target_word_size = \"64\")]\n+impl_hash!(\n+    uint, u64, mem::to_le64;\n+    int, u64, mem::to_le64;\n+)\n \n impl<S: Writer> Hash<S> for bool {\n     #[inline]\n@@ -292,14 +316,11 @@ impl<S: Writer, T: Hash<S>, U: Hash<S>> Hash<S> for Result<T, U> {\n \n #[cfg(test)]\n mod tests {\n-    use mem;\n-    use io::{IoResult, Writer};\n-    use iter::{Iterator};\n-    use option::{Some, None};\n-    use result::Ok;\n-    use slice::ImmutableVector;\n+    use std::prelude::*;\n+    use std::mem;\n \n-    use super::{Hash, Hasher};\n+    use slice::ImmutableVector;\n+    use super::{Hash, Hasher, Writer};\n \n     struct MyWriterHasher;\n \n@@ -317,11 +338,10 @@ mod tests {\n \n     impl Writer for MyWriter {\n         // Most things we'll just add up the bytes.\n-        fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n+        fn write(&mut self, buf: &[u8]) {\n             for byte in buf.iter() {\n                 self.hash += *byte as u64;\n             }\n-            Ok(())\n         }\n     }\n "}, {"sha": "74e93284d2ac4ff67d6ee222eeac98a86f0896d5", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -269,16 +269,15 @@ pub fn hash_with_keys<T: Hash<SipState>>(k0: u64, k1: u64, value: &T) -> u64 {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-    use prelude::*;\n-    use num::ToStrRadix;\n-    use option::{Some, None};\n+    use test::Bencher;\n+    use std::prelude::*;\n+    use std::num::ToStrRadix;\n+\n     use str::Str;\n     use string::String;\n     use slice::{Vector, ImmutableVector};\n-    use self::test::Bencher;\n \n-    use super::super::Hash;\n+    use super::super::{Hash, Writer};\n     use super::{SipState, hash, hash_with_keys};\n \n     // Hash just the bytes of the slice, without length prefix\n@@ -399,7 +398,7 @@ mod tests {\n         }\n \n         while t < 64 {\n-            debug!(\"siphash test {}\", t);\n+            debug!(\"siphash test {}: {}\", t, buf);\n             let vec = u8to64_le!(vecs[t], 0);\n             let out = hash_with_keys(k0, k1, &Bytes(buf.as_slice()));\n             debug!(\"got {:?}, expected {:?}\", out, vec);\n@@ -412,10 +411,14 @@ mod tests {\n             let v = to_hex_str(&vecs[t]);\n             debug!(\"{}: ({}) => inc={} full={}\", t, v, i, f);\n \n-            assert!(f == i && f == v);\n+            debug!(\"full state {:?}\", state_full);\n+            debug!(\"inc  state {:?}\", state_inc);\n+\n+            assert_eq!(f, i);\n+            assert_eq!(f, v);\n \n             buf.push(t as u8);\n-            state_inc.write_u8(t as u8);\n+            state_inc.write([t as u8]);\n \n             t += 1;\n         }\n@@ -542,21 +545,4 @@ officia deserunt mollit anim id est laborum.\";\n             assert_eq!(hash(&u), 5254097107239593357);\n         })\n     }\n-\n-    #[deriving(Hash)]\n-    struct Compound {\n-        x: u8,\n-        y: u64,\n-    }\n-\n-    #[bench]\n-    fn bench_compound_1(b: &mut Bencher) {\n-        let compound = Compound {\n-            x: 1,\n-            y: 2,\n-        };\n-        b.iter(|| {\n-            assert_eq!(hash(&compound), 12506681940457338191);\n-        })\n-    }\n }"}, {"sha": "2004285ecb91bec27f873fc6b603708a58fdb906", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -26,8 +26,9 @@\n extern crate alloc;\n \n #[cfg(test)] extern crate native;\n-#[cfg(test)] extern crate std;\n #[cfg(test)] extern crate test;\n+#[cfg(test)] extern crate debug;\n+#[cfg(test)] #[phase(syntax, link)] extern crate std;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n pub use bitv::{Bitv, BitvSet};\n@@ -66,10 +67,11 @@ mod unicode;\n fn expect<T>(a: core::option::Option<T>, b: &str) -> T {\n     match a {\n         core::option::Some(a) => a,\n-        core::option::None => fail!(b),\n+        core::option::None => fail!(\"{}\", b),\n     }\n }\n \n+#[cfg(not(test))]\n mod std {\n     pub use core::fmt;      // necessary for fail!()\n     pub use core::option;   // necessary for fail!()"}, {"sha": "34d6bbbb66567d93ba9f69258ac3d4196b4aa5e5", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,8 @@\n \n use core::prelude::*;\n \n-use core::mem::{overwrite, zeroed, replace, swap};\n+use core::mem::{zeroed, replace, swap};\n+use core::ptr;\n \n use slice;\n use vec::Vec;\n@@ -240,7 +241,10 @@ impl<T: Ord> Extendable<T> for PriorityQueue<T> {\n \n #[cfg(test)]\n mod tests {\n+    use std::prelude::*;\n+\n     use priority_queue::PriorityQueue;\n+    use vec::Vec;\n \n     #[test]\n     fn test_iterator() {\n@@ -344,8 +348,8 @@ mod tests {\n         v.sort();\n         data.sort();\n \n-        assert_eq!(v, data);\n-        assert_eq!(heap.into_sorted_vec(), data);\n+        assert_eq!(v.as_slice(), data.as_slice());\n+        assert_eq!(heap.into_sorted_vec().as_slice(), data.as_slice());\n     }\n \n     #[test]"}, {"sha": "ce4195789fab6a24060acb2aef6cae6910c45da1", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -410,13 +410,14 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-    use self::test::Bencher;\n-    use deque::Deque;\n-    use std::clone::Clone;\n-    use std::cmp::PartialEq;\n     use std::fmt::Show;\n+    use std::prelude::*;\n+    use test::Bencher;\n+    use test;\n+\n+    use deque::Deque;\n     use super::RingBuf;\n+    use vec::Vec;\n \n     #[test]\n     fn test_simple() {"}, {"sha": "0b339a9726294f624ca25499bd8abddcaa1b8dfe", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -292,6 +292,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     fn to_owned(&self) -> ~[T] {\n         use RawVec = core::raw::Vec;\n         use core::num::{CheckedAdd, CheckedMul};\n+        use core::ptr;\n \n         let len = self.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());\n@@ -317,7 +318,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n             try_finally(\n                 &mut i, (),\n                 |i, ()| while *i < len {\n-                    mem::overwrite(\n+                    ptr::write(\n                         &mut(*p.offset(*i as int)),\n                         self.unsafe_ref(*i).clone());\n                     *i += 1;\n@@ -855,13 +856,17 @@ impl<T> Drop for MoveItems<T> {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use cmp::*;\n-    use mem;\n-    use owned::Box;\n-    use rand::{Rng, task_rng};\n+    use std::cell::Cell;\n+    use std::default::Default;\n+    use std::mem;\n+    use std::prelude::*;\n+    use std::rand::{Rng, task_rng};\n+    use std::rc::Rc;\n+    use std::unstable;\n     use slice::*;\n \n+    use vec::Vec;\n+\n     fn square(n: uint) -> uint { n * n }\n \n     fn is_odd(n: &uint) -> bool { *n % 2u == 1u }\n@@ -1099,9 +1104,9 @@ mod tests {\n     #[test]\n     fn test_swap_remove_noncopyable() {\n         // Tests that we don't accidentally run destructors twice.\n-        let mut v = vec![::unstable::sync::Exclusive::new(()),\n-                         ::unstable::sync::Exclusive::new(()),\n-                         ::unstable::sync::Exclusive::new(())];\n+        let mut v = vec![unstable::sync::Exclusive::new(()),\n+                         unstable::sync::Exclusive::new(()),\n+                         unstable::sync::Exclusive::new(())];\n         let mut _e = v.swap_remove(0);\n         assert_eq!(v.len(), 2);\n         _e = v.swap_remove(1);\n@@ -1438,8 +1443,6 @@ mod tests {\n \n     #[test]\n     fn test_sort() {\n-        use realstd::slice::Vector;\n-        use realstd::clone::Clone;\n         for len in range(4u, 25) {\n             for _ in range(0, 100) {\n                 let mut v = task_rng().gen_iter::<uint>().take(len)\n@@ -1632,8 +1635,6 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_from_elem_fail() {\n-        use cell::Cell;\n-        use rc::Rc;\n \n         struct S {\n             f: Cell<int>,\n@@ -1655,7 +1656,6 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_grow_fn_fail() {\n-        use rc::Rc;\n         let mut v = vec![];\n         v.grow_fn(100, |i| {\n             if i == 50 {\n@@ -1668,7 +1668,6 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_permute_fail() {\n-        use rc::Rc;\n         let v = [(box 0, Rc::new(0)), (box 0, Rc::new(0)),\n                  (box 0, Rc::new(0)), (box 0, Rc::new(0))];\n         let mut i = 0;\n@@ -1701,7 +1700,6 @@ mod tests {\n \n     #[test]\n     fn test_iterator() {\n-        use iter::*;\n         let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n         assert_eq!(it.size_hint(), (5, Some(5)));\n@@ -1720,7 +1718,6 @@ mod tests {\n \n     #[test]\n     fn test_random_access_iterator() {\n-        use iter::*;\n         let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n \n@@ -1759,7 +1756,6 @@ mod tests {\n \n     #[test]\n     fn test_iter_size_hints() {\n-        use iter::*;\n         let mut xs = [1, 2, 5, 10, 11];\n         assert_eq!(xs.iter().size_hint(), (5, Some(5)));\n         assert_eq!(xs.mut_iter().size_hint(), (5, Some(5)));\n@@ -1778,7 +1774,6 @@ mod tests {\n \n     #[test]\n     fn test_mut_iterator() {\n-        use iter::*;\n         let mut xs = [1, 2, 3, 4, 5];\n         for x in xs.mut_iter() {\n             *x += 1;\n@@ -1788,7 +1783,6 @@ mod tests {\n \n     #[test]\n     fn test_rev_iterator() {\n-        use iter::*;\n \n         let xs = [1, 2, 5, 10, 11];\n         let ys = [11, 10, 5, 2, 1];\n@@ -1802,7 +1796,6 @@ mod tests {\n \n     #[test]\n     fn test_mut_rev_iterator() {\n-        use iter::*;\n         let mut xs = [1u, 2, 3, 4, 5];\n         for (i,x) in xs.mut_iter().rev().enumerate() {\n             *x += i;\n@@ -1812,14 +1805,12 @@ mod tests {\n \n     #[test]\n     fn test_move_iterator() {\n-        use iter::*;\n         let xs = box [1u,2,3,4,5];\n         assert_eq!(xs.move_iter().fold(0, |a: uint, b: uint| 10*a + b), 12345);\n     }\n \n     #[test]\n     fn test_move_rev_iterator() {\n-        use iter::*;\n         let xs = box [1u,2,3,4,5];\n         assert_eq!(xs.move_iter().rev().fold(0, |a: uint, b: uint| 10*a + b), 54321);\n     }\n@@ -1995,7 +1986,6 @@ mod tests {\n \n     #[test]\n     fn test_vec_default() {\n-        use default::Default;\n         macro_rules! t (\n             ($ty:ty) => {{\n                 let v: $ty = Default::default();\n@@ -2030,7 +2020,6 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_overflow_does_not_cause_segfault_managed() {\n-        use rc::Rc;\n         let mut v = vec![Rc::new(1)];\n         v.reserve_exact(-1);\n         v.push(Rc::new(2));\n@@ -2258,12 +2247,13 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n-    use mem;\n-    use prelude::*;\n-    use ptr;\n-    use rand::{weak_rng, Rng};\n+    use std::prelude::*;\n+    use std::rand::{weak_rng, Rng};\n+    use std::mem;\n+    use std::ptr;\n+    use test::Bencher;\n+\n+    use vec::Vec;\n \n     #[bench]\n     fn iterator(b: &mut Bencher) {"}, {"sha": "829986e64ee66b5dfb8f95e22a29d94a7355988e", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -249,6 +249,7 @@ double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n \n #[cfg(test)]\n mod test_map {\n+    use std::prelude::*;\n \n     use super::SmallIntMap;\n "}, {"sha": "ab1b1d1bd816b24cf87e112d56b527af4383112e", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -77,7 +77,6 @@ use core::iter::AdditiveIterator;\n use core::mem;\n \n use hash;\n-use slice::CloneableVector;\n use string::String;\n use vec::Vec;\n \n@@ -917,11 +916,13 @@ impl OwnedStr for String {\n \n #[cfg(test)]\n mod tests {\n-    use iter::AdditiveIterator;\n-    use default::Default;\n-    use prelude::*;\n+    use std::prelude::*;\n+    use std::iter::AdditiveIterator;\n+    use std::default::Default;\n+\n     use str::*;\n     use string::String;\n+    use vec::Vec;\n \n     #[test]\n     fn test_eq_slice() {\n@@ -1042,7 +1043,7 @@ mod tests {\n     #[test]\n     fn test_concat() {\n         fn t(v: &[String], s: &str) {\n-            assert_eq!(v.concat(), s.to_str().into_string());\n+            assert_eq!(v.concat().as_slice(), s);\n         }\n         t([\"you\".to_string(), \"know\".to_string(), \"I'm\".to_string(),\n           \"no\".to_string(), \"good\".to_string()], \"youknowI'mnogood\");\n@@ -1054,7 +1055,7 @@ mod tests {\n     #[test]\n     fn test_connect() {\n         fn t(v: &[String], sep: &str, s: &str) {\n-            assert_eq!(v.connect(sep), s.to_str().into_string());\n+            assert_eq!(v.connect(sep).as_slice(), s);\n         }\n         t([\"you\".to_string(), \"know\".to_string(), \"I'm\".to_string(),\n            \"no\".to_string(), \"good\".to_string()],\n@@ -1067,7 +1068,7 @@ mod tests {\n     #[test]\n     fn test_concat_slices() {\n         fn t(v: &[&str], s: &str) {\n-            assert_eq!(v.concat(), s.to_str().into_string());\n+            assert_eq!(v.concat().as_slice(), s);\n         }\n         t([\"you\", \"know\", \"I'm\", \"no\", \"good\"], \"youknowI'mnogood\");\n         let v: &[&str] = [];\n@@ -1078,7 +1079,7 @@ mod tests {\n     #[test]\n     fn test_connect_slices() {\n         fn t(v: &[&str], sep: &str, s: &str) {\n-            assert_eq!(v.connect(sep), s.to_str().into_string());\n+            assert_eq!(v.connect(sep).as_slice(), s);\n         }\n         t([\"you\", \"know\", \"I'm\", \"no\", \"good\"],\n           \" \", \"you know I'm no good\");\n@@ -1753,7 +1754,6 @@ mod tests {\n \n     #[test]\n     fn test_iterator() {\n-        use iter::*;\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let v = box ['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n \n@@ -1769,7 +1769,6 @@ mod tests {\n \n     #[test]\n     fn test_rev_iterator() {\n-        use iter::*;\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let v = box ['m', 'a', 'N', ' ', 't', '\u1ec7','i','V','\u534e','\u4e2d','\u0e22','\u0e17','\u0e44','\u0e28'];\n \n@@ -1825,7 +1824,6 @@ mod tests {\n \n     #[test]\n     fn test_char_indicesator() {\n-        use iter::*;\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let p = [0, 3, 6, 9, 12, 15, 18, 19, 20, 23, 24, 25, 26, 27];\n         let v = ['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n@@ -1843,7 +1841,6 @@ mod tests {\n \n     #[test]\n     fn test_char_indices_revator() {\n-        use iter::*;\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let p = [27, 26, 25, 24, 23, 20, 19, 18, 15, 12, 9, 6, 3, 0];\n         let v = ['m', 'a', 'N', ' ', 't', '\u1ec7','i','V','\u534e','\u4e2d','\u0e22','\u0e17','\u0e44','\u0e28'];\n@@ -2027,7 +2024,7 @@ mod tests {\n \n     #[test]\n     fn test_str_default() {\n-        use default::Default;\n+        use std::default::Default;\n         fn t<S: Default + Str>() {\n             let s: S = Default::default();\n             assert_eq!(s.as_slice(), \"\");\n@@ -2110,25 +2107,25 @@ mod tests {\n \n     #[test]\n     fn test_from_str() {\n-      let owned: Option<String> = from_str(\"string\");\n-      assert_eq!(owned, Some(\"string\".to_string()));\n+      let owned: Option<::std::string::String> = from_str(\"string\");\n+      assert_eq!(owned.as_ref().map(|s| s.as_slice()), Some(\"string\"));\n     }\n \n     #[test]\n     fn test_maybe_owned_traits() {\n         let s = Slice(\"abcde\");\n         assert_eq!(s.len(), 5);\n         assert_eq!(s.as_slice(), \"abcde\");\n-        assert_eq!(s.to_str(), \"abcde\".to_string());\n-        assert_eq!(format!(\"{}\", s), \"abcde\".to_string());\n+        assert_eq!(s.to_str().as_slice(), \"abcde\");\n+        assert_eq!(format!(\"{}\", s).as_slice(), \"abcde\");\n         assert!(s.lt(&Owned(\"bcdef\".to_string())));\n         assert_eq!(Slice(\"\"), Default::default());\n \n         let o = Owned(\"abcde\".to_string());\n         assert_eq!(o.len(), 5);\n         assert_eq!(o.as_slice(), \"abcde\");\n-        assert_eq!(o.to_str(), \"abcde\".to_string());\n-        assert_eq!(format!(\"{}\", o), \"abcde\".to_string());\n+        assert_eq!(o.to_str().as_slice(), \"abcde\");\n+        assert_eq!(format!(\"{}\", o).as_slice(), \"abcde\");\n         assert!(o.lt(&Slice(\"bcdef\")));\n         assert_eq!(Owned(\"\".to_string()), Default::default());\n \n@@ -2175,10 +2172,9 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n     use super::*;\n-    use prelude::*;\n+    use std::prelude::*;\n \n     #[bench]\n     fn char_iterator(b: &mut Bencher) {"}, {"sha": "bd39c74aa840b97c4cb74907c8be13e404c06cf5", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -353,9 +353,9 @@ impl<'a, S: Str> Equiv<S> for String {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-    use container::{Container, Mutable};\n-    use self::test::Bencher;\n+    use std::prelude::*;\n+    use test::Bencher;\n+\n     use str::{Str, StrSlice};\n     use super::String;\n "}, {"sha": "def1c353bc1324e3ea41100f96e9f96b0e7f7b0b", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -1002,11 +1002,12 @@ impl<T: Ord> Extendable<T> for TreeSet<T> {\n \n #[cfg(test)]\n mod test_treemap {\n-    use super::{TreeMap, TreeNode};\n-\n+    use std::prelude::*;\n     use std::rand::Rng;\n     use std::rand;\n \n+    use super::{TreeMap, TreeNode};\n+\n     #[test]\n     fn find_empty() {\n         let m: TreeMap<int,int> = TreeMap::new();\n@@ -1436,8 +1437,9 @@ mod test_treemap {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n+    use std::prelude::*;\n+    use test::Bencher;\n+\n     use super::TreeMap;\n     use deque::bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n@@ -1496,6 +1498,7 @@ mod bench {\n \n #[cfg(test)]\n mod test_set {\n+    use std::prelude::*;\n \n     use super::{TreeMap, TreeSet};\n "}, {"sha": "c15a6e9e5bf48fae118e367c551d05a9e44796ea", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -641,10 +641,12 @@ impl<'a> Iterator<uint> for SetItems<'a> {\n \n #[cfg(test)]\n mod test_map {\n-    use super::{TrieMap, TrieNode, Internal, External, Nothing};\n+    use std::prelude::*;\n     use std::iter::range_step;\n     use std::uint;\n \n+    use super::{TrieMap, TrieNode, Internal, External, Nothing};\n+\n     fn check_integrity<T>(trie: &TrieNode<T>) {\n         assert!(trie.count != 0);\n \n@@ -917,10 +919,11 @@ mod test_map {\n \n #[cfg(test)]\n mod bench_map {\n-    extern crate test;\n-    use super::TrieMap;\n+    use std::prelude::*;\n     use std::rand::{weak_rng, Rng};\n-    use self::test::Bencher;\n+    use test::Bencher;\n+\n+    use super::TrieMap;\n \n     #[bench]\n     fn bench_iter_small(b: &mut Bencher) {\n@@ -1025,9 +1028,11 @@ mod bench_map {\n \n #[cfg(test)]\n mod test_set {\n-    use super::TrieSet;\n+    use std::prelude::*;\n     use std::uint;\n \n+    use super::TrieSet;\n+\n     #[test]\n     fn test_sane_chunk() {\n         let x = 1;"}, {"sha": "1f2d176ab9b22098a74eefb6d74a1cbdc286bd05", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -24,7 +24,7 @@ use core::num;\n use core::ptr;\n use core::uint;\n \n-use slice::{MutableTotalOrdVector, OwnedVector, MutableVectorAllocating};\n+use slice::{MutableOrdVector, OwnedVector, MutableVectorAllocating};\n use slice::{Items, MutItems};\n \n /// An owned, growable vector.\n@@ -114,8 +114,7 @@ impl<T> Vec<T> {\n         unsafe {\n             let mut xs = Vec::with_capacity(length);\n             while xs.len < length {\n-                mem::overwrite(xs.as_mut_slice().unsafe_mut_ref(xs.len),\n-                                   op(xs.len));\n+                ptr::write(xs.as_mut_slice().unsafe_mut_ref(xs.len), op(xs.len));\n                 xs.len += 1;\n             }\n             xs\n@@ -211,8 +210,8 @@ impl<T: Clone> Vec<T> {\n         unsafe {\n             let mut xs = Vec::with_capacity(length);\n             while xs.len < length {\n-                mem::overwrite(xs.as_mut_slice().unsafe_mut_ref(xs.len),\n-                                   value.clone());\n+                ptr::write(xs.as_mut_slice().unsafe_mut_ref(xs.len),\n+                           value.clone());\n                 xs.len += 1;\n             }\n             xs\n@@ -322,7 +321,7 @@ impl<T:Clone> Clone for Vec<T> {\n             let this_slice = self.as_slice();\n             while vector.len < len {\n                 unsafe {\n-                    mem::overwrite(\n+                    ptr::write(\n                         vector.as_mut_slice().unsafe_mut_ref(vector.len),\n                         this_slice.unsafe_ref(vector.len).clone());\n                 }\n@@ -597,7 +596,7 @@ impl<T> Vec<T> {\n \n         unsafe {\n             let end = (self.ptr as *T).offset(self.len as int) as *mut T;\n-            mem::overwrite(&mut *end, value);\n+            ptr::write(&mut *end, value);\n             self.len += 1;\n         }\n     }\n@@ -961,7 +960,7 @@ impl<T> Vec<T> {\n                 ptr::copy_memory(p.offset(1), &*p, len - index);\n                 // Write it in, overwriting the first copy of the `index`th\n                 // element.\n-                mem::overwrite(&mut *p, element);\n+                ptr::write(&mut *p, element);\n             }\n             self.set_len(len + 1);\n         }\n@@ -1578,10 +1577,10 @@ pub mod raw {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use mem::size_of;\n-    use kinds::marker;\n-    use super::{unzip, raw, FromVec};\n+    use std::prelude::*;\n+    use std::mem::size_of;\n+    use std::kinds::marker;\n+    use super::{unzip, raw, FromVec, Vec};\n \n     #[test]\n     fn test_small_vec_struct() {"}, {"sha": "4b75e1b73599de0763fc6db272291489808d0276", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -921,19 +921,22 @@ fn waitpid(pid: pid_t, deadline: u64) -> IoResult<p::ProcessExit> {\n \n     // Register a new SIGCHLD handler, returning the reading half of the\n     // self-pipe plus the old handler registered (return value of sigaction).\n+    //\n+    // Be sure to set up the self-pipe first because as soon as we reigster a\n+    // handler we're going to start receiving signals.\n     fn register_sigchld() -> (libc::c_int, c::sigaction) {\n         unsafe {\n-            let mut old: c::sigaction = mem::zeroed();\n-            let mut new: c::sigaction = mem::zeroed();\n-            new.sa_handler = sigchld_handler;\n-            new.sa_flags = c::SA_NOCLDSTOP;\n-            assert_eq!(c::sigaction(c::SIGCHLD, &new, &mut old), 0);\n-\n             let mut pipes = [0, ..2];\n             assert_eq!(libc::pipe(pipes.as_mut_ptr()), 0);\n             util::set_nonblocking(pipes[0], true).unwrap();\n             util::set_nonblocking(pipes[1], true).unwrap();\n             WRITE_FD = pipes[1];\n+\n+            let mut old: c::sigaction = mem::zeroed();\n+            let mut new: c::sigaction = mem::zeroed();\n+            new.sa_handler = sigchld_handler;\n+            new.sa_flags = c::SA_NOCLDSTOP;\n+            assert_eq!(c::sigaction(c::SIGCHLD, &new, &mut old), 0);\n             (pipes[0], old)\n         }\n     }"}, {"sha": "a48760913c161e600e31e4239b9b4cd4b189ffa1", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -365,7 +365,6 @@\n #![feature(macro_rules, phase)]\n #![deny(missing_doc, deprecated_owned_vector)]\n \n-extern crate collections;\n #[cfg(test)]\n extern crate stdtest = \"test\";\n #[cfg(test)]"}, {"sha": "fbe0359ff6fa2001f7fedc0efd1ff582372cce4e", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::fmt;\n use std::from_str::from_str;\n use std::str::{MaybeOwned, Owned, Slice};"}, {"sha": "cdf49304f9a752a5255f3d372339f17041fd1623", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,7 @@ use metadata::cstore;\n use metadata::filesearch;\n use util::fs;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use std::os;\n use syntax::abi;\n "}, {"sha": "186db839e33d861e6f0f65c76f164de83ae45dec", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -31,7 +31,7 @@ use syntax::diagnostic::{ColorConfig, Auto, Always, Never};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use lib::llvm::llvm;"}, {"sha": "17e659e53912f7e13a66ce9b1eead8272a4eb281", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -32,7 +32,6 @@ This API is completely unstable and subject to change.\n            default_type_params, phase)]\n \n extern crate arena;\n-extern crate collections;\n extern crate debug;\n extern crate flate;\n extern crate getopts;"}, {"sha": "75445a317ecfb6c34fc41b2c8e7a1c5576528363", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -15,7 +15,7 @@\n \n use std::c_str::ToCStr;\n use std::cell::RefCell;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use libc::{c_uint, c_ushort, c_void, free, uint64_t};\n use std::str::raw::from_c_str;\n "}, {"sha": "38d2b7a67a0e17e5afd36228de48822e630d7a32", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -23,7 +23,7 @@ use metadata::loader;\n use metadata::loader::CratePaths;\n \n use std::rc::Rc;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use syntax::ast;\n use syntax::abi;\n use syntax::attr;"}, {"sha": "aa8d695465a117628ae29c0566200128a29c0a68", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -20,7 +20,7 @@ use metadata::loader;\n use std::cell::RefCell;\n use std::c_vec::CVec;\n use std::rc::Rc;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use syntax::ast;\n use syntax::crateid::CrateId;\n use syntax::codemap::Span;"}, {"sha": "61dfde38c28a4514686a70a2c12b9cf8a60b7299", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -33,7 +33,7 @@ use std::hash;\n use std::hash::Hash;\n use std::io::MemWriter;\n use std::str;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use syntax::abi;\n use syntax::ast::*;\n use syntax::ast;"}, {"sha": "9033b83d47420cacf22e2d3c6088f5cc8efb9cd9", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n use std::os;\n use std::io::fs;\n use std::unstable::dynamic_lib::DynamicLibrary;\n-use collections::HashSet;\n+use std::collections::HashSet;\n \n use myfs = util::fs;\n "}, {"sha": "acd96b94f315e3e4def4ba6fbf8cd7f25dc40f5e", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -32,7 +32,7 @@ use std::ptr;\n use std::slice;\n use std::str;\n \n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use flate;\n use time;\n "}, {"sha": "5d2d6ed58153478def5cd0441693bf853d750b16", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,7 @@\n #![allow(non_camel_case_types)]\n \n use std::cell::RefCell;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::io::MemWriter;\n \n use middle::ty::param_ty;"}, {"sha": "5a4ec36befcc12635278dcc0162d104340a6ae12", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -18,7 +18,7 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::uint;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use middle::borrowck::*;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;"}, {"sha": "d3d5eb3f8fd8299fcc8c49c8a8599583849c9315", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -18,7 +18,7 @@ use middle::ty;\n use middle::typeck;\n use util::nodemap::NodeSet;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{local_def, def_id_of_def, is_local};"}, {"sha": "38e4426e4c878f6608c22207a46acc1aa9e50249", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -61,7 +61,7 @@\n //! Additionally, the algorithm is geared towards finding *any* solution rather\n //! than finding a number of solutions (there are normally quite a few).\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use syntax::ast;\n \n use driver::session;"}, {"sha": "2e00c4d12ffbf933b69938d645df7070ca4d5447", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -31,7 +31,7 @@ use syntax::parse::token::InternedString;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::iter::Enumerate;\n use std::slice;\n "}, {"sha": "871a336479df19c939405c5d37b43f6cce6a8061", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -49,7 +49,7 @@ use util::ppaux::{ty_to_str};\n use util::nodemap::NodeSet;\n \n use std::cmp;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::i16;\n use std::i32;\n use std::i64;\n@@ -60,7 +60,7 @@ use std::u16;\n use std::u32;\n use std::u64;\n use std::u8;\n-use collections::SmallIntMap;\n+use std::collections::SmallIntMap;\n use syntax::abi;\n use syntax::ast_map;\n use syntax::ast_util::IdVisitingOperation;"}, {"sha": "49437a90e3f8403f7fb4d8ebf5625aec2c23778d", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,7 +11,7 @@\n \n use middle::resolve;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use syntax::ast::*;\n use syntax::ast_util::{path_to_ident, walk_pat};\n use syntax::codemap::Span;"}, {"sha": "a725ac960f838a1586d2d241ef81ba54b3d23def", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -21,7 +21,7 @@ use middle::typeck;\n use middle::privacy;\n use util::nodemap::NodeSet;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "e22462efaa44a82a3e481dd1dacb6212d668c9b0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -27,7 +27,7 @@ use middle::ty;\n use util::nodemap::NodeMap;\n \n use std::cell::RefCell;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use syntax::codemap::Span;\n use syntax::{ast, visit};\n use syntax::visit::{Visitor, FnKind};"}, {"sha": "2228c21b2391751b98a64f3fda57aa7a5f6ffeea", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -31,7 +31,7 @@ use syntax::owned_slice::OwnedSlice;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use std::cell::{Cell, RefCell};\n use std::mem::replace;\n use std::rc::{Rc, Weak};"}, {"sha": "1cf8a301d804e5e7f5a740396cf5df03f56255bd", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -222,7 +222,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::{Repr, vec_map_to_str};\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::cell::Cell;\n use std::rc::Rc;\n use syntax::ast;"}, {"sha": "c40666561f39b31c541d76b974bfb10cdd3796cd", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,7 +19,7 @@ use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::machine::llalign_of_pref;\n use middle::trans::type_::Type;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use libc::{c_uint, c_ulonglong, c_char};\n use std::string::String;\n use syntax::codemap::Span;"}, {"sha": "5b6815dbb6bb740b3ce237c9f041a4cdf9443fbe", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -30,7 +30,7 @@ use util::ppaux::Repr;\n use util::nodemap::NodeMap;\n \n use arena::TypedArena;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};"}, {"sha": "8607d52b6241fa8f9acbc0e05b915d148a1c3ccf", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -31,7 +31,7 @@ use std::cell::{Cell, RefCell};\n use std::c_str::ToCStr;\n use std::ptr;\n use std::rc::Rc;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::parse::token::InternedString;\n "}, {"sha": "6e0d6d491a5292504958b3c7a7400f271de201ce", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -145,8 +145,8 @@ use util::ppaux;\n use std::c_str::{CString, ToCStr};\n use std::cell::{Cell, RefCell};\n use std::rc::{Rc, Weak};\n-use collections::HashMap;\n-use collections::HashSet;\n+use std::collections::HashMap;\n+use std::collections::HashSet;\n use libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::string::String;"}, {"sha": "9ecd6d48e1231f2a4be7ecd9909e77ae53b33362", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -39,12 +39,12 @@ use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::fmt::Show;\n use std::fmt;\n-use std::hash::{Hash, sip};\n+use std::hash::{Hash, sip, Writer};\n use std::iter::AdditiveIterator;\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use syntax::abi;\n use syntax::ast::*;\n use syntax::ast_util::{is_local, lit_is_str};\n@@ -57,7 +57,7 @@ use syntax::parse::token::InternedString;\n use syntax::{ast, ast_map};\n use syntax::owned_slice::OwnedSlice;\n use syntax::util::small_vector::SmallVector;\n-use collections::enum_set::{EnumSet, CLike};\n+use std::collections::enum_set::{EnumSet, CLike};\n \n pub type Disr = u64;\n "}, {"sha": "62c4e92997c12e90300b88f2dae80f1622c36bcd", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,7 +19,7 @@ use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::infer;\n use middle::typeck::require_same_types;\n \n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use syntax::ast;\n use syntax::ast_util;\n use syntax::parse::token;"}, {"sha": "b32875b06ee764377dccd827f32a66af9c655c96", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -96,7 +96,7 @@ use util::common::indenter;\n use util::ppaux;\n use util::ppaux::Repr;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use std::rc::Rc;\n use syntax::ast::{DefId, SelfValue, SelfRegion};\n use syntax::ast::{SelfUniq, SelfStatic};"}, {"sha": "4ec6de9e4d2c39ad193893215456c5a63e3e6f05", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -116,7 +116,7 @@ use util::ppaux::{UserString, Repr};\n use util::nodemap::{FnvHashMap, NodeMap};\n \n use std::cell::{Cell, RefCell};\n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::mem::replace;\n use std::rc::Rc;\n use std::vec::Vec;"}, {"sha": "146b42a00ffafe191df5e4aa002c8c694f9481ba", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,7 @@ use middle::ty;\n use middle::ty_fold;\n use middle::ty_fold::TypeFolder;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use util::ppaux::Repr;\n use util::ppaux;\n "}, {"sha": "7ad18ddfe5ce96295c30abbcc393ab247f8134bc", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -29,7 +29,7 @@ use util::ppaux;\n use util::ppaux::Repr;\n \n use std::rc::Rc;\n-use collections::HashSet;\n+use std::collections::HashSet;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;"}, {"sha": "e4b2d2da2e8d528d6747a3addc6d6577992be2e5", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -45,7 +45,7 @@ use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::visit;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use std::cell::RefCell;\n use std::rc::Rc;\n "}, {"sha": "c32aa2dd31c04181d1f7b36b03ec18e1936495e9", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -47,7 +47,7 @@ use util::ppaux;\n use util::ppaux::Repr;\n \n use std::rc::Rc;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n \n use syntax::abi;\n use syntax::ast::{StaticRegionTyParamBound, OtherRegionTyParamBound,"}, {"sha": "5853de005748a60cde3d3a6f872e31d6ae185c08", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -59,7 +59,7 @@ time of error detection.\n \n */\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use middle::ty;\n use middle::ty::{Region, ReFree};\n use middle::typeck::infer;"}, {"sha": "18cfd2595139fecca3626de2ee5a09fbbe1a717c", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -24,7 +24,7 @@ use middle::typeck::infer::fold_regions_in_sig;\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n use syntax::ast::{NormalFn, UnsafeFn, NodeId};\n use syntax::ast::{Onceness, FnStyle};\n-use collections::HashMap;\n+use std::collections::HashMap;\n use util::common::{indenter};\n use util::ppaux::mt_to_str;\n "}, {"sha": "5f2378bf422a42dc073a385dc630a7238507746c", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -45,7 +45,7 @@ use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::to_str::InferStr;\n use util::common::indenter;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n trait LatticeValue {\n     fn sub(cf: CombineFields, a: &Self, b: &Self) -> ures;"}, {"sha": "41784c9b8d94455fd3d3b1ff45a507fbb4c820ad", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -20,7 +20,7 @@ use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::infer::{TypeTrace, Subtype};\n-use collections::HashMap;\n+use std::collections::HashMap;\n use syntax::ast::{Many, Once, NodeId};\n use syntax::ast::{NormalFn, UnsafeFn};\n use syntax::ast::{Onceness, FnStyle};"}, {"sha": "9462094e1a6e1e1cc70b1e5f075b9f5d0daeefda", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -21,7 +21,7 @@ pub use middle::typeck::infer::resolve::{resolve_ivar, resolve_all};\n pub use middle::typeck::infer::resolve::{resolve_nested_tvar};\n pub use middle::typeck::infer::resolve::{resolve_rvar};\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, Vid};\n use middle::ty;\n use middle::ty_fold;"}, {"sha": "465a8dbd229398e5f4fa03e03d1c972a7685655f", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -26,7 +26,7 @@ use util::ppaux::{Repr};\n \n use std::cell::{Cell, RefCell};\n use std::uint;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use syntax::ast;\n \n mod doc;"}, {"sha": "78c841afa609bbf318e8e86904fc6e48cb71d664", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use collections::SmallIntMap;\n+use std::collections::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};\n use middle::ty;"}, {"sha": "8ee6aef33863f660e99ad904e9cf3819177697d0", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -192,7 +192,7 @@ represents the \"variance transform\" as defined in the paper:\n \n */\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use arena;\n use arena::Arena;\n use middle::ty;"}, {"sha": "7a36c423add04ecde310ba0669de6dafd7d96c88", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -21,7 +21,7 @@ use syntax::parse::token::InternedString;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n \n macro_rules! weak_lang_items( ($($name:ident, $item:ident, $sym:ident;)*) => (\n "}, {"sha": "34a2faa581c5ec28400f814d5987712fd680109c", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,9 +10,8 @@\n \n //! An efficient hash map for node IDs\n \n-use collections::{HashMap, HashSet};\n-use std::hash::{Hasher, Hash};\n-use std::io;\n+use std::collections::{HashMap, HashSet};\n+use std::hash::{Hasher, Hash, Writer};\n use syntax::ast;\n \n pub type FnvHashMap<K, V> = HashMap<K, V, FnvHasher>;\n@@ -27,14 +26,14 @@ pub type DefIdSet = FnvHashSet<ast::DefId>;\n // Hacks to get good names\n pub mod FnvHashMap {\n     use std::hash::Hash;\n-    use collections::HashMap;\n+    use std::collections::HashMap;\n     pub fn new<K: Hash<super::FnvState> + Eq, V>() -> super::FnvHashMap<K, V> {\n         HashMap::with_hasher(super::FnvHasher)\n     }\n }\n pub mod FnvHashSet {\n     use std::hash::Hash;\n-    use collections::HashSet;\n+    use std::collections::HashSet;\n     pub fn new<V: Hash<super::FnvState> + Eq>() -> super::FnvHashSet<V> {\n         HashSet::with_hasher(super::FnvHasher)\n     }\n@@ -82,13 +81,12 @@ impl Hasher<FnvState> for FnvHasher {\n }\n \n impl Writer for FnvState {\n-    fn write(&mut self, bytes: &[u8]) -> io::IoResult<()> {\n+    fn write(&mut self, bytes: &[u8]) {\n         let FnvState(mut hash) = *self;\n         for byte in bytes.iter() {\n             hash = hash ^ (*byte as u64);\n             hash = hash * 0x100000001b3;\n         }\n         *self = FnvState(hash);\n-        Ok(())\n     }\n }"}, {"sha": "1786e5b3fd24998471b5b1fb8f71e0b47a64e8d6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -20,7 +20,7 @@ use syntax;\n \n use std::cell::RefCell;\n use std::os;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n \n use visit_ast::RustdocVisitor;\n use clean;"}, {"sha": "373c5220161bd2b42db9aa5afccdeb05a1bd60a4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -31,7 +31,7 @@ use std::cell::RefCell;\n use std::fmt;\n use std::slice;\n use std::str;\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n use html::toc::TocBuilder;\n use html::highlight;\n@@ -412,4 +412,4 @@ mod tests {\n         assert_eq!(parse_lang_string(\"{.sh .should_fail}\"), (true,false,false,false))\n         assert_eq!(parse_lang_string(\"{.example .rust}\"), (false,false,false,false))\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4ef3297912f9efc8e18e8445134402ca94911f8d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -33,7 +33,7 @@\n //! These tasks are not parallelized (they haven't been a bottleneck yet), and\n //! both occur before the crate is rendered.\n \n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n use std::fmt;\n use std::io::{fs, File, BufferedWriter, MemWriter, BufferedReader};\n use std::io;"}, {"sha": "b3a0ade0624f395383ea439c396367275710a154", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -16,7 +16,6 @@\n \n #![feature(globs, struct_variant, managed_boxes, macro_rules, phase)]\n \n-extern crate collections;\n extern crate debug;\n extern crate getopts;\n extern crate libc;\n@@ -403,7 +402,7 @@ fn json_output(krate: clean::Crate, res: Vec<plugins::PluginJson> ,\n     //   \"crate\": { parsed crate ... },\n     //   \"plugins\": { output of plugins ... }\n     // }\n-    let mut json = box collections::TreeMap::new();\n+    let mut json = box std::collections::TreeMap::new();\n     json.insert(\"schema\".to_string(),\n                 json::String(SCHEMA_VERSION.to_string()));\n     let plugins_json = box res.move_iter()"}, {"sha": "961c92940be816a49d8a6c375accf11da6db7ebc", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use std::{str, io};\n use std::string::String;\n "}, {"sha": "727258bec8fa1f722afd8b5502c478cd64988449", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use rustc::util::nodemap::NodeSet;\n use std::cmp;\n use std::string::String;"}, {"sha": "ed53b2ac314a8b5fbcee4cebe8cc8dc91a5637f4", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -17,7 +17,7 @@ use std::str;\n use std::string::String;\n use std::unstable::dynamic_lib::DynamicLibrary;\n \n-use collections::{HashSet, HashMap};\n+use std::collections::{HashSet, HashMap};\n use testing;\n use rustc::back::link;\n use rustc::driver::config;"}, {"sha": "b74d20ffc54fa282962d07f2eb6ab80538ebb9d0", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -15,9 +15,9 @@ use std::default::Default;\n use std::hash::{Hash, Hasher};\n \n use {Decodable, Encodable, Decoder, Encoder};\n-use collections::{DList, RingBuf, TreeMap, TreeSet, Deque, HashMap, HashSet,\n-                  TrieMap, TrieSet};\n-use collections::enum_set::{EnumSet, CLike};\n+use std::collections::{DList, RingBuf, TreeMap, TreeSet, Deque, HashMap, HashSet,\n+                       TrieMap, TrieSet};\n+use std::collections::enum_set::{EnumSet, CLike};\n \n impl<\n     E,"}, {"sha": "046d25f98e43a9f1a2003ddfc4308524ca5ef584", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -99,12 +99,9 @@ A basic `ToJson` example using a TreeMap of attribute name / attribute value:\n \n \n ```rust\n-extern crate collections;\n-extern crate serialize;\n-\n+use std::collections::TreeMap;\n use serialize::json;\n use serialize::json::ToJson;\n-use collections::TreeMap;\n \n pub struct MyStruct  {\n     attr1: u8,\n@@ -190,12 +187,9 @@ This example use the ToJson impl to deserialize the JSON string.\n Example of `ToJson` trait implementation for TestStruct1.\n \n ```rust\n-extern crate serialize;\n-extern crate collections;\n-\n+use std::collections::TreeMap;\n use serialize::json::ToJson;\n use serialize::{json, Encodable, Decodable};\n-use collections::TreeMap;\n \n #[deriving(Decodable, Encodable)] // generate Decodable, Encodable impl.\n pub struct TestStruct1  {\n@@ -234,6 +228,7 @@ fn main() {\n */\n \n use std::char;\n+use std::collections::{HashMap, TreeMap};\n use std::f64;\n use std::fmt;\n use std::io::MemWriter;\n@@ -246,7 +241,6 @@ use std::string::String;\n use std::vec::Vec;\n \n use Encodable;\n-use collections::{HashMap, TreeMap};\n \n /// Represents a json value\n #[deriving(Clone, PartialEq)]\n@@ -2290,7 +2284,7 @@ mod tests {\n                 EOFWhileParsingValue, EOFWhileParsingString, KeyMustBeAString, ExpectedColon,\n                 TrailingCharacters};\n     use std::io;\n-    use collections::TreeMap;\n+    use std::collections::TreeMap;\n \n     #[deriving(PartialEq, Encodable, Decodable, Show)]\n     enum Animal {\n@@ -3006,7 +3000,7 @@ mod tests {\n         use std::str::from_utf8;\n         use std::io::Writer;\n         use std::io::MemWriter;\n-        use collections::HashMap;\n+        use std::collections::HashMap;\n         let mut hm: HashMap<uint, bool> = HashMap::new();\n         hm.insert(1, true);\n         let mut mem_buf = MemWriter::new();\n@@ -3026,7 +3020,7 @@ mod tests {\n         use std::str::from_utf8;\n         use std::io::Writer;\n         use std::io::MemWriter;\n-        use collections::HashMap;\n+        use std::collections::HashMap;\n         let mut hm: HashMap<uint, bool> = HashMap::new();\n         hm.insert(1, true);\n         let mut mem_buf = MemWriter::new();\n@@ -3043,7 +3037,7 @@ mod tests {\n     }\n     #[test]\n     fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() {\n-        use collections::HashMap;\n+        use std::collections::HashMap;\n         use Decodable;\n         let json_str = \"{\\\"1\\\":true}\";\n         let json_obj = match from_str(json_str) {\n@@ -3340,7 +3334,7 @@ mod tests {\n \n     #[test]\n     fn test_to_json() {\n-        use collections::{HashMap,TreeMap};\n+        use std::collections::{HashMap,TreeMap};\n         use super::ToJson;\n \n         let list2 = List(vec!(Number(1.0_f64), Number(2.0_f64)));"}, {"sha": "904c7da4da2e949cd3f6148f7477547626d86471", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -29,8 +29,6 @@ extern crate test;\n #[phase(syntax, link)]\n extern crate log;\n \n-extern crate collections;\n-\n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable,\n                           DecoderHelpers, EncoderHelpers};\n "}, {"sha": "5dba7a533a1db78e146dafbf86bc848a6a2bbf74", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -38,7 +38,7 @@ mod table {\n     use mem::{overwrite, transmute};\n     use num::{CheckedMul, is_power_of_two};\n     use ops::Drop;\n-    use option::{Some, None, Option, Expect};\n+    use option::{Some, None, Option};\n     use ptr::RawPtr;\n     use ptr::set_memory;\n     use ptr;\n@@ -254,6 +254,7 @@ mod table {\n \n         /// Creates a new raw table from a given capacity. All buckets are\n         /// initially empty.\n+        #[allow(experimental)]\n         pub fn new(capacity: uint) -> RawTable<K, V> {\n             unsafe {\n                 let ret = RawTable::new_uninitialized(capacity);\n@@ -410,18 +411,21 @@ mod table {\n         assert_eq!(size_of::<SafeHash>(), size_of::<u64>())\n     }\n \n+    /// Iterator over shared references to entries in a table.\n     pub struct Entries<'a, K, V> {\n         table: &'a RawTable<K, V>,\n         idx: uint,\n         elems_seen: uint,\n     }\n \n+    /// Iterator over mutable references to entries in a table.\n     pub struct MutEntries<'a, K, V> {\n         table: &'a mut RawTable<K, V>,\n         idx: uint,\n         elems_seen: uint,\n     }\n \n+    /// Iterator over the entries in a table, consuming the table.\n     pub struct MoveEntries<K, V> {\n         table: RawTable<K, V>,\n         idx: uint,\n@@ -694,7 +698,7 @@ impl DefaultResizePolicy {\n /// # Example\n ///\n /// ```rust\n-/// use collections::HashMap;\n+/// use std::collections::HashMap;\n ///\n /// // type inference lets us omit an explicit type signature (which\n /// // would be `HashMap<&str, &str>` in this example).\n@@ -1274,7 +1278,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use collections::HashMap;\n+    /// use std::collections::HashMap;\n     ///\n     /// // map some strings to vectors of strings\n     /// let mut map = HashMap::new();\n@@ -1639,7 +1643,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extendable<T> for HashSet<T, H>\n     }\n }\n \n-impl<T: TotalEq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n+impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n     fn default() -> HashSet<T, H> {\n         HashSet::with_hasher(Default::default())\n     }\n@@ -1654,11 +1658,13 @@ pub type SetAlgebraItems<'a, T, H> =\n \n #[cfg(test)]\n mod test_map {\n+    use prelude::*;\n+\n     use super::HashMap;\n-    use std::cmp::Equiv;\n-    use std::hash::Hash;\n-    use std::iter::{Iterator,range_inclusive,range_step_inclusive};\n-    use std::cell::RefCell;\n+    use cmp::Equiv;\n+    use hash;\n+    use iter::{Iterator,range_inclusive,range_step_inclusive};\n+    use cell::RefCell;\n \n     struct KindaIntLike(int);\n \n@@ -1668,7 +1674,7 @@ mod test_map {\n             this == *other\n         }\n     }\n-    impl<S: Writer> Hash<S> for KindaIntLike {\n+    impl<S: hash::Writer> hash::Hash<S> for KindaIntLike {\n         fn hash(&self, state: &mut S) {\n             let KindaIntLike(this) = *self;\n             this.hash(state)\n@@ -2146,9 +2152,11 @@ mod test_map {\n \n #[cfg(test)]\n mod test_set {\n+    use prelude::*;\n+\n     use super::HashSet;\n-    use std::container::Container;\n-    use std::slice::ImmutableEqVector;\n+    use container::Container;\n+    use slice::ImmutableEqVector;\n \n     #[test]\n     fn test_disjoint() {\n@@ -2389,8 +2397,10 @@ mod test_set {\n #[cfg(test)]\n mod bench {\n     extern crate test;\n+    use prelude::*;\n+\n     use self::test::Bencher;\n-    use std::iter::{range_inclusive};\n+    use iter::{range_inclusive};\n \n     #[bench]\n     fn new_drop(b : &mut Bencher) {"}, {"sha": "a12b00f34dc4a01fd48fd8d852d4bcf37ab2acce", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -17,7 +17,7 @@\n //! # Example\n //!\n //! ```rust\n-//! use collections::LruCache;\n+//! use std::collections::LruCache;\n //!\n //! let mut cache: LruCache<int, int> = LruCache::new(2);\n //! cache.put(1, 10);\n@@ -37,7 +37,7 @@\n //! assert!(cache.get(&2).is_none());\n //! ```\n \n-use cmp::{Eq, TotalEq};\n+use cmp::{PartialEq, Eq};\n use collections::HashMap;\n use container::{Container, Mutable, MutableMap};\n use fmt;\n@@ -256,6 +256,7 @@ impl<K, V> Drop for LruCache<K, V> {\n \n #[cfg(test)]\n mod tests {\n+    use prelude::*;\n     use super::LruCache;\n \n     fn assert_opt_eq<V: PartialEq>(opt: Option<&V>, v: V) {"}, {"sha": "a8f30c0514b80a2e193531d203700133c7460023", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -20,8 +20,8 @@ use parse::token::InternedString;\n use parse::token;\n use crateid::CrateId;\n \n-use collections::HashSet;\n-use collections::bitv::BitvSet;\n+use std::collections::HashSet;\n+use std::collections::BitvSet;\n \n local_data_key!(used_attrs: BitvSet)\n "}, {"sha": "521b7ee00631c6cb369d8b410506a0ee7cf5b993", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,7 +19,7 @@ use parse::token;\n use parse::token::{InternedString, intern, str_to_ident};\n use util::small_vector::SmallVector;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n // new-style macro! tt code:\n //"}, {"sha": "1124cf6d7cb9a7aa1a3fc7a4cbf7c757d9eeabb4", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -18,7 +18,7 @@ use ext::deriving::generic::*;\n use ext::deriving::generic::ty::*;\n use parse::token;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::string::String;\n \n pub fn expand_deriving_show(cx: &mut ExtCtxt,"}, {"sha": "2db0d047942c1aa4d255a0b7907c9671655e59b8", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,7 +19,7 @@ use parse::token;\n use rsparse = parse;\n \n use parse = fmt_macros;\n-use collections::{HashMap, HashSet};\n+use std::collections::{HashMap, HashSet};\n \n #[deriving(PartialEq)]\n enum ArgumentType {"}, {"sha": "6c97a8aed1f55a19df8baffb7a80702a3b6d918a", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,8 +19,7 @@ use ast::{Ident, Mrk, Name, SyntaxContext};\n \n use std::cell::RefCell;\n use std::rc::Rc;\n-\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n // the SCTable contains a table of SyntaxContext_'s. It\n // represents a flattened tree structure, to avoid having\n@@ -267,7 +266,7 @@ mod tests {\n     use super::{resolve, xor_push, new_mark_internal, new_sctable_internal};\n     use super::{new_rename_internal, marksof_internal, resolve_internal};\n     use super::{SCTable, EmptyCtxt, Mark, Rename, IllegalCtxt};\n-    use collections::HashMap;\n+    use std::collections::HashMap;\n \n     #[test]\n     fn xorpush_test () {"}, {"sha": "e74861f6efe047abb8f44129e3c610dfde9264a2", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -22,7 +22,7 @@ use parse::token::{Token, EOF, Nonterminal};\n use parse::token;\n \n use std::rc::Rc;\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "748ba6b19da60ead4ef329d9a8367a774bbd9539", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -18,7 +18,7 @@ use parse::token;\n use parse::lexer::TokenAndSpan;\n \n use std::rc::Rc;\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n ///an unzipping of `TokenTree`s\n #[deriving(Clone)]"}, {"sha": "1ab420eb69be68bce61aa0a4e3f21a804745d481", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -32,7 +32,6 @@ This API is completely unstable and subject to change.\n \n extern crate serialize;\n extern crate term;\n-extern crate collections;\n #[phase(syntax, link)]\n extern crate log;\n extern crate fmt_macros;"}, {"sha": "28d63ea071a757c02721a9c57e9883de4b9d6ec9", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::default::Default;\n-use std::hash::Hash;\n+use std::hash;\n use std::{mem, raw, ptr, slice};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -107,7 +107,7 @@ impl<T: Clone> Clone for OwnedSlice<T> {\n     }\n }\n \n-impl<S: Writer, T: Hash<S>> Hash<S> for OwnedSlice<T> {\n+impl<S: hash::Writer, T: hash::Hash<S>> hash::Hash<S> for OwnedSlice<T> {\n     fn hash(&self, state: &mut S) {\n         self.as_slice().hash(state)\n     }"}, {"sha": "4af4385e3c1da3bc05ef14ab47f02b5574155079", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -76,7 +76,7 @@ use parse::token;\n use parse::{new_sub_parser_from_file, ParseSess};\n use owned_slice::OwnedSlice;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n use std::mem::replace;\n use std::rc::Rc;\n use std::string::String;"}, {"sha": "4d88aaca7486be7994efdb6938fe0e130dfedd08", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,7 @@\n \n use ast::Name;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::cell::RefCell;\n use std::cmp::Equiv;\n use std::fmt;"}, {"sha": "f2ae0c15860ab5cf4ecd4b66e7097d7b51d59d62", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -52,7 +52,6 @@\n #![deny(missing_doc)]\n \n #[phase(syntax, link)] extern crate log;\n-extern crate collections;\n \n pub use terminfo::TerminfoTerminal;\n #[cfg(windows)]"}, {"sha": "36883c8fcf4f244a0a9bff76d7d8aef991a7a1c5", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n \n //! Terminfo database interface.\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::io::IoResult;\n use std::os;\n "}, {"sha": "b373753613d7694f1f1b78fbebec1e9dcf3b8303", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -12,7 +12,7 @@\n \n //! ncurses-compatible compiled terminfo format parsing (term(5))\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::io;\n use std::str;\n use super::super::TermInfo;"}, {"sha": "eba80ba17837872693e8fe10d4db8e85e26870d8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -35,14 +35,13 @@\n #![feature(asm, macro_rules, phase)]\n #![deny(deprecated_owned_vector)]\n \n-extern crate collections;\n extern crate getopts;\n extern crate regex;\n extern crate serialize;\n extern crate term;\n extern crate time;\n \n-use collections::TreeMap;\n+use std::collections::TreeMap;\n use stats::Stats;\n use time::precise_time_ns;\n use getopts::{OptGroup, optflag, optopt};"}, {"sha": "c6a45b651ef936e2f9c70d69b92de537d4d076b3", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,13 +10,13 @@\n \n #![allow(missing_doc)]\n \n+use std::collections::hashmap;\n+use std::fmt::Show;\n use std::hash::Hash;\n use std::io;\n use std::mem;\n-use std::num;\n use std::num::Zero;\n-use collections::hashmap;\n-use std::fmt::Show;\n+use std::num;\n \n fn local_cmp<T:Float>(x: T, y: T) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything."}, {"sha": "3511b554aea89e0af5fbab09407e78eca27a194d", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -19,13 +19,10 @@\n        html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(default_type_params)]\n \n-extern crate collections;\n-\n-use collections::HashMap;\n-use std::cmp::PartialEq;\n+use std::collections::HashMap;\n use std::fmt;\n use std::from_str::FromStr;\n-use std::hash::Hash;\n+use std::hash;\n use std::io::BufReader;\n use std::string::String;\n use std::uint;\n@@ -870,13 +867,13 @@ impl fmt::Show for Path {\n     }\n }\n \n-impl<S: Writer> Hash<S> for Url {\n+impl<S: hash::Writer> hash::Hash<S> for Url {\n     fn hash(&self, state: &mut S) {\n         self.to_str().hash(state)\n     }\n }\n \n-impl<S: Writer> Hash<S> for Path {\n+impl<S: hash::Writer> hash::Hash<S> for Path {\n     fn hash(&self, state: &mut S) {\n         self.to_str().hash(state)\n     }\n@@ -973,7 +970,7 @@ mod tests {\n          decode, encode, from_str, encode_component, decode_component,\n          path_from_str, UserInfo, get_scheme};\n \n-    use collections::HashMap;\n+    use std::collections::HashMap;\n \n     #[test]\n     fn test_url_parse() {"}, {"sha": "68c545802adb7bf4c25b7aaa382337c5f58ab6f5", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -73,7 +73,7 @@ use std::char::Char;\n use std::default::Default;\n use std::fmt;\n use std::from_str::FromStr;\n-use std::hash::Hash;\n+use std::hash;\n use std::mem::{transmute,transmute_copy};\n use std::num::FromStrRadix;\n use std::rand;\n@@ -120,7 +120,7 @@ pub struct Uuid {\n     bytes: UuidBytes\n }\n \n-impl<S: Writer> Hash<S> for Uuid {\n+impl<S: hash::Writer> hash::Hash<S> for Uuid {\n     fn hash(&self, state: &mut S) {\n         self.bytes.hash(state)\n     }\n@@ -519,8 +519,6 @@ impl rand::Rand for Uuid {\n \n #[cfg(test)]\n mod test {\n-    extern crate collections;\n-\n     use super::{Uuid, VariantMicrosoft, VariantNCS, VariantRFC4122,\n                 Version1Mac, Version2Dce, Version3Md5, Version4Random,\n                 Version5Sha1};\n@@ -810,7 +808,7 @@ mod test {\n \n     #[test]\n     fn test_iterbytes_impl_for_uuid() {\n-        use self::collections::HashSet;\n+        use std::collections::HashSet;\n         let mut set = HashSet::new();\n         let id1 = Uuid::new_v4();\n         let id2 = Uuid::new_v4();"}, {"sha": "4491adc74bd65d9f8610e7d76d125ec1265253b2", "filename": "src/test/auxiliary/issue-11908-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11908-1.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,5 +10,5 @@\n \n // no-prefer-dynamic\n \n-#![crate_id = \"collections#0.11.0-pre\"]\n+#![crate_id = \"url#0.11.0-pre\"]\n #![crate_type = \"dylib\"]"}, {"sha": "d921aeda3e01a99195b832228055e64570dcaaa5", "filename": "src/test/auxiliary/issue-11908-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11908-2.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,5 +10,5 @@\n \n // no-prefer-dynamic\n \n-#![crate_id = \"collections#0.11.0-pre\"]\n+#![crate_id = \"url#0.11.0-pre\"]\n #![crate_type = \"rlib\"]"}, {"sha": "ad1b58f34477a5fa282628fb8871461111a03298", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -12,10 +12,8 @@\n #![crate_id=\"req\"]\n #![crate_type = \"lib\"]\n \n-extern crate collections;\n-\n use std::cell::RefCell;\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n pub type header_map = HashMap<String, @RefCell<Vec<@String>>>;\n "}, {"sha": "5e10ff516ccb627876adc71a2d7e19c79a728885", "filename": "src/test/auxiliary/issue-5521.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fauxiliary%2Fissue-5521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-5521.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(managed_boxes)]\n \n-extern crate collections;\n-\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n pub type map = @HashMap<uint, uint>;"}, {"sha": "5044d82a6eabb5519cb875af2aff72c5eb111899", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate collections;\n-extern crate rand;\n extern crate time;\n \n-use collections::{TrieMap, TreeMap, HashMap, HashSet};\n+use std::collections::{TrieMap, TreeMap, HashMap, HashSet};\n use std::os;\n-use rand::{Rng, IsaacRng, SeedableRng};\n+use std::rand::{Rng, IsaacRng, SeedableRng};\n use std::uint;\n \n fn timed(label: &str, f: ||) {"}, {"sha": "4b63d5095e19ef350547345447957fe06805d12f", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,9 +14,9 @@ extern crate collections;\n extern crate rand;\n extern crate time;\n \n-use collections::bitv::BitvSet;\n-use collections::TreeSet;\n-use collections::HashSet;\n+use std::collections::bitv::BitvSet;\n+use std::collections::TreeSet;\n+use std::collections::HashSet;\n use std::os;\n use std::uint;\n "}, {"sha": "67be7d121a454049b709f6a7ad3f61e9935e34b0", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -15,7 +15,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::mem::replace;\n use std::option;\n use std::os;"}, {"sha": "ae05466eb9cb8192b731144327c42b68cf9408f4", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -14,7 +14,7 @@ extern crate collections;\n extern crate time;\n extern crate debug;\n \n-use collections::SmallIntMap;\n+use std::collections::SmallIntMap;\n use std::os;\n use std::uint;\n "}, {"sha": "144b02e9b3bf005ad7de738119fa999d44063aaf", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `std::string::String` but found `int`\n+// error-pattern:expected `collections::string::String` but found `int`\n \n static i: String = 10i;\n fn main() { println!(\"{}\", i); }"}, {"sha": "58cacc0b9f3338fe88b8b825dd99a14ef19739c0", "filename": "src/test/compile-fail/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-bitxor-str.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:`^` cannot be applied to type `std::string::String`\n+// error-pattern:`^` cannot be applied to type `collections::string::String`\n \n fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }"}, {"sha": "f2ff5f86f63930227d6620ce24c7765621f94256", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,7 +11,7 @@\n //buggy.rs\n \n extern crate collections;\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n fn main() {\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new();"}, {"sha": "a84a025d8a8ee9d89dcd4323be6ad169781dd34c", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n extern crate collections;\n-use collections::HashSet;\n+use std::collections::HashSet;\n \n struct Foo {\n   n: HashSet<int>,"}, {"sha": "6114c5958e095979aa83a0f7e408b81ce809a062", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -29,9 +29,9 @@ fn main() {\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, int> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<std::string::String,int>` but found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>` but found `()`\n     let _: HashMap<String, int, Hash<String>> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<std::string::String,int>` but found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>` but found `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, int, C> = ();"}, {"sha": "dbedf355a56cb2f799f8517ee237cc347c6d28fd", "filename": "src/test/compile-fail/issue-11908-1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fissue-11908-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fissue-11908-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11908-1.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,15 +10,15 @@\n \n // aux-build:issue-11908-1.rs\n // ignore-android this test is incompatible with the android test runner\n-// error-pattern: multiple dylib candidates for `collections` found\n+// error-pattern: multiple dylib candidates for `url` found\n \n // This test ensures that if you have the same rlib or dylib at two locations\n // in the same path that you don't hit an assertion in the compiler.\n //\n-// Note that this relies on `libcollections` to be in the path somewhere else,\n-// and then our aux-built libraries will collide with libcollections (they have\n+// Note that this relies on `liburl` to be in the path somewhere else,\n+// and then our aux-built libraries will collide with liburl (they have\n // the same version listed)\n \n-extern crate collections;\n+extern crate url;\n \n fn main() {}"}, {"sha": "8b916aad6535495b905d58d68cf2a50598e5ee5d", "filename": "src/test/compile-fail/issue-11908-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fissue-11908-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fissue-11908-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11908-2.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,11 +11,11 @@\n // aux-build:issue-11908-2.rs\n // no-prefer-dynamic\n // ignore-android this test is incompatible with the android test runner\n-// error-pattern: multiple rlib candidates for `collections` found\n+// error-pattern: multiple rlib candidates for `url` found\n \n // see comments in issue-11908-1 for what's going on here\n \n-extern crate collections;\n+extern crate url;\n \n fn main() {}\n "}, {"sha": "0c9a7cc8bde4fbf691c00f97b24a4a3b5325b40e", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n // Test that trait types printed in error msgs include the type arguments.\n "}, {"sha": "9a89424c61f343e3f72a28ffa66af73ad2e3347d", "filename": "src/test/compile-fail/minus-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Fminus-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fminus-string.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:cannot apply unary operator `-` to type `std::string::String`\n+// error-pattern:cannot apply unary operator `-` to type `collections::string::String`\n \n fn main() { -\"foo\".to_string(); }"}, {"sha": "62066eb29d0bf536211e2d2350764998aafd60c4", "filename": "src/test/compile-fail/unresolved-extern-mod-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate collections;\n-use collections; //~ ERROR unresolved import (maybe you meant `collections::*`?)\n+extern crate url;\n+use url; //~ ERROR unresolved import (maybe you meant `url::*`?)\n \n fn main() {}"}, {"sha": "b62755f13b51272def17da084436514b4b4c590c", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -13,9 +13,8 @@\n \n #![feature(managed_boxes)]\n \n-extern crate collections;\n-\n use std::vec;\n+use std::collections;\n \n fn main() {\n     let _count = @0u;"}, {"sha": "38384c7789c612618049dfee10bfdfbbbfb8f9dc", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n // except according to those terms.\n \n extern crate collections;\n-use collections::Bitv;\n+use std::collections::Bitv;\n \n fn bitv_test() {\n     let mut v1 = box Bitv::new(31, false);"}, {"sha": "d16a964ea798cb2bbfae1a1ba9c58f7e67b38e9a", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n // This is a fancy one: it uses an external iterator established\n // outside the loop, breaks, then _picks back up_ and continues"}, {"sha": "1878997de5ab76d7c202640a92febb898bf39582", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n pub fn main() {\n     let mut h = HashMap::new();"}, {"sha": "61e5c28010d0c32d8d2bf6373916b9f707873d7d", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -25,7 +25,7 @@ pub fn map(filename: String, emit: map_reduce::putter) {\n }\n \n mod map_reduce {\n-    use collections::HashMap;\n+    use std::collections::HashMap;\n     use std::str;\n     use std::task;\n "}, {"sha": "c300b8c93359d9ce87f5e58f797d0eae34939e39", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,7 +11,7 @@\n extern crate collections;\n extern crate std;\n \n-use collections::Bitv;\n+use std::collections::Bitv;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6"}, {"sha": "4496a921e24485c6d7662b012c24c9a44f2477b0", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,7 +11,7 @@\n \n extern crate collections;\n \n-use collections::HashSet;\n+use std::collections::HashSet;\n \n #[deriving(PartialEq, Eq, Hash)]\n struct XYZ {"}, {"sha": "c05e84b6e69f58964caee33907d020778eeca8ad", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,7 +11,7 @@\n extern crate collections;\n extern crate debug;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n pub fn main() {\n     let mut m = HashMap::new();"}, {"sha": "5cdda4e5548c3bcd80d79e19922d10a61d854106", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,8 +10,8 @@\n // except according to those terms.\n \n extern crate collections;\n-use collections::RingBuf;\n-use collections::Deque;\n+use std::collections::RingBuf;\n+use std::collections::Deque;\n \n pub fn main() {\n     let mut q = RingBuf::new();"}, {"sha": "5f2f2c4b1b5057cb5d3883bb85a69585535a5a6b", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -17,7 +17,7 @@ extern crate req;\n \n use req::request;\n use std::cell::RefCell;\n-use collections::HashMap;\n+use std::collections::HashMap;\n \n pub fn main() {\n   let v = vec!(@\"hi\".to_string());"}, {"sha": "4b6b3ef8136aad9932d031cc57b392f38ce067d1", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -15,7 +15,7 @@\n extern crate collections;\n extern crate debug;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n fn add_interfaces(managed_ip: String, device: HashMap<String, int>)  {\n      println!(\"{}, {:?}\", managed_ip, device.get(&\"interfaces\".to_string()));"}, {"sha": "beba39602dedba6298e2fddbe662b381141b765f", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -13,7 +13,7 @@ extern crate collections;\n extern crate serialize;\n extern crate debug;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n use serialize::json;\n use std::option;\n "}, {"sha": "b30c0a117a805468d398f1bdade32059688c441c", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -11,7 +11,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n pub fn main() {\n     let mut buggy_map: HashMap<uint, &uint> = HashMap::new();"}, {"sha": "3220c8d0c69c4fbdefe4e907f370e37ed0ba5cb8", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n fn check_strs(actual: &str, expected: &str) -> bool {\n     if actual != expected {"}, {"sha": "29775e4a69921ef873a3aaea1d4e8f113d0a9100", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -10,7 +10,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n trait Graph<Node, Edge> {\n     fn f(&self, Edge);"}, {"sha": "9a4b3bf0e54b0f8101f0b378c3c5f799971fa3b5", "filename": "src/test/run-pass/issue-7660.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-7660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fissue-7660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7660.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -13,7 +13,7 @@\n \n extern crate collections;\n \n-use collections::HashMap;\n+use std::collections::HashMap;\n \n struct A(int, int);\n "}, {"sha": "ece5faeb2f152ee702c3b2699515eb672450cf76", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -20,7 +20,7 @@ extern crate collections;\n extern crate libc;\n \n use arena::Arena;\n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;"}, {"sha": "750235ce6afedaa33caf6755081e157e76330071", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760b93adc0976121149105db19acf2ad5f631e5d/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=760b93adc0976121149105db19acf2ad5f631e5d", "patch": "@@ -12,7 +12,7 @@ extern crate collections;\n \n use std::container::{Map, MutableMap};\n use std::str::{SendStr, Owned, Slice};\n-use collections::HashMap;\n+use std::collections::HashMap;\n use std::option::Some;\n \n pub fn main() {"}]}