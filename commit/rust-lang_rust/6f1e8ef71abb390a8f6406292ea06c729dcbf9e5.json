{"sha": "6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMWU4ZWY3MWFiYjM5MGE4ZjY0MDYyOTJlYTA2YzcyOWRjYmY5ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-16T03:15:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-16T03:15:44Z"}, "message": "auto merge of #5404 : bstrie/rust/decopy, r=pcwalton\n\nAlso turn `copy` into `.clone()` in much of run-pass.", "tree": {"sha": "eacbc64a864bd47298bdf1f2e678f096b1ea02b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eacbc64a864bd47298bdf1f2e678f096b1ea02b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "html_url": "https://github.com/rust-lang/rust/commit/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "html_url": "https://github.com/rust-lang/rust/commit/5a77a1048897a12c9031d3e0b3867f0c6e3673ea"}, {"sha": "ee5842494a9170d6e1079a671695fcfc32ceb920", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5842494a9170d6e1079a671695fcfc32ceb920", "html_url": "https://github.com/rust-lang/rust/commit/ee5842494a9170d6e1079a671695fcfc32ceb920"}], "stats": {"total": 201, "additions": 115, "deletions": 86}, "files": [{"sha": "af44f68601bc24b6c197eb13450c2262c0c29756", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -20,6 +20,11 @@ impl Clone for () {\n     fn clone(&self) -> () { () }\n }\n \n+impl<T:Clone> Clone for ~T {\n+    #[inline(always)]\n+    fn clone(&self) -> ~T { ~(**self).clone() }\n+}\n+\n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {"}, {"sha": "23b14e243b8f8c627e7c1147900b757082fb4c3e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -20,6 +20,7 @@\n use at_vec;\n use cast;\n use char;\n+use clone::Clone;\n use cmp::{Equiv, TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n use option::{None, Option, Some};\n@@ -2436,6 +2437,13 @@ impl OwnedStr for ~str {\n     }\n }\n \n+impl Clone for ~str {\n+    #[inline(always)]\n+    fn clone(&self) -> ~str {\n+        self.to_str()  // hilarious\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use char;"}, {"sha": "d8ded635291dce89cd7690f2144334ff553b9452", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -68,11 +68,11 @@ unsafe fn global_data_clone_create_<T:Owned + Clone>(\n         match value {\n             None => {\n                 let value = create();\n-                clone_value = Some(value.clone());\n+                clone_value = Some((*value).clone());\n                 Some(value)\n             }\n             Some(value) => {\n-                clone_value = Some(value.clone());\n+                clone_value = Some((*value).clone());\n                 Some(value)\n             }\n         }\n@@ -193,7 +193,7 @@ fn get_global_state() -> Exclusive<GlobalState> {\n             // Successfully installed the global pointer\n \n             // Take a handle to return\n-            let clone = state.clone();\n+            let clone = (*state).clone();\n \n             // Install a runtime exit function to destroy the global object\n             do at_exit {"}, {"sha": "f11a63a787d7c5d6115b2a2fe9ac3801c09591e2", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -15,6 +15,7 @@\n use container::{Container, Mutable};\n use cast;\n use cmp::{Eq, Equiv, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n+use clone::Clone;\n use iter::BaseIter;\n use iter;\n use kinds::Copy;\n@@ -2501,6 +2502,18 @@ impl<A:Copy> iter::CopyableNonstrictIter<A> for @[A] {\n     }\n }\n \n+impl<A:Clone> Clone for ~[A] {\n+    #[inline]\n+    fn clone(&self) -> ~[A] {\n+        let mut dolly = ~[];\n+        vec::reserve(&mut dolly, self.len());\n+        for self.each |item| {\n+            dolly.push(item.clone());\n+        }\n+        return dolly;\n+    }\n+}\n+\n // ___________________________________________________________________________\n \n #[cfg(test)]"}, {"sha": "bd2f641c017f1f5d94ba0dc068ac0516c796f2b7", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -572,7 +572,7 @@ mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_wr() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write |one| {\n                 fail_unless!(*one == 2);\n@@ -585,7 +585,7 @@ mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_ww() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write |one| {\n                 fail_unless!(*one == 2);\n@@ -598,7 +598,7 @@ mod tests {\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_poison_dw() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write_downgrade |write_mode| {\n                 do (&write_mode).write |one| {\n@@ -613,7 +613,7 @@ mod tests {\n     #[test] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_no_poison_rr() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.read |one| {\n                 fail_unless!(*one == 2);\n@@ -626,7 +626,7 @@ mod tests {\n     #[test] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_no_poison_rw() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.read |one| {\n                 fail_unless!(*one == 2);\n@@ -639,7 +639,7 @@ mod tests {\n     #[test] #[ignore(cfg(windows))]\n     pub fn test_rw_arc_no_poison_dr() {\n         let arc = ~RWARC(1);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         do task::try || {\n             do arc2.write_downgrade |write_mode| {\n                 let read_mode = arc2.downgrade(write_mode);\n@@ -655,7 +655,7 @@ mod tests {\n     #[test]\n     pub fn test_rw_arc() {\n         let arc = ~RWARC(0);\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         let (p,c) = comm::stream();\n \n         do task::spawn || {\n@@ -673,7 +673,7 @@ mod tests {\n         // Readers try to catch the writer in the act\n         let mut children = ~[];\n         for 5.times {\n-            let arc3 = ~arc.clone();\n+            let arc3 = (*arc).clone();\n             do task::task().future_result(|+r| children.push(r)).spawn\n                 || {\n                 do arc3.read |num| {\n@@ -704,7 +704,7 @@ mod tests {\n         for 10.times {\n             let ((rp1,rc1),(rp2,rc2)) = (comm::stream(),comm::stream());\n             reader_convos.push((rc1, rp2));\n-            let arcn = ~arc.clone();\n+            let arcn = (*arc).clone();\n             do task::spawn || {\n                 rp1.recv(); // wait for downgrader to give go-ahead\n                 do arcn.read |state| {\n@@ -715,7 +715,7 @@ mod tests {\n         }\n \n         // Writer task\n-        let arc2 = ~arc.clone();\n+        let arc2 = (*arc).clone();\n         let ((wp1,wc1),(wp2,wc2)) = (comm::stream(),comm::stream());\n         do task::spawn || {\n             wp1.recv();"}, {"sha": "1d1ec0e11f7fa0fe689b6381d7a5f53239845f30", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -827,7 +827,7 @@ mod tests {\n         // \"load tmp = move ptr; inc tmp; store ptr <- tmp\" dance.\n         let (p,c) = comm::stream();\n         let m = ~Mutex();\n-        let m2 = ~m.clone();\n+        let m2 = m.clone();\n         let mut sharedstate = ~0;\n         let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn || {\n@@ -1105,13 +1105,13 @@ mod tests {\n         // Test mutual exclusion between readers and writers. Just like the\n         // mutex mutual exclusion test, a ways above.\n         let (p,c) = comm::stream();\n-        let x2 = ~x.clone();\n+        let x2 = (*x).clone();\n         let mut sharedstate = ~0;\n         let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn || {\n             let sharedstate: &mut int =\n                 unsafe { cast::reinterpret_cast(&ptr) };\n-            access_shared(sharedstate, x2, mode1, 10);\n+            access_shared(sharedstate, &x2, mode1, 10);\n             c.send(());\n         }\n         access_shared(sharedstate, x, mode2, 10);\n@@ -1150,14 +1150,14 @@ mod tests {\n                                  mode2: RWlockMode,\n                                  make_mode2_go_first: bool) {\n         // Much like sem_multi_resource.\n-        let x2 = ~x.clone();\n+        let x2 = (*x).clone();\n         let (p1,c1) = comm::stream();\n         let (p2,c2) = comm::stream();\n         do task::spawn || {\n             if !make_mode2_go_first {\n                 let _ = p2.recv(); // parent sends to us once it locks, or ...\n             }\n-            do lock_rwlock_in_mode(x2, mode2) {\n+            do lock_rwlock_in_mode(&x2, mode2) {\n                 if make_mode2_go_first {\n                     c1.send(()); // ... we send to it once we lock\n                 }\n@@ -1207,7 +1207,7 @@ mod tests {\n \n         // Child wakes up parent\n         do x.write_cond |cond| {\n-            let x2 = ~x.clone();\n+            let x2 = (*x).clone();\n             do task::spawn || {\n                 do x2.write_cond |cond| {\n                     let woken = cond.signal();\n@@ -1218,7 +1218,7 @@ mod tests {\n         }\n         // Parent wakes up child\n         let (port,chan) = comm::stream();\n-        let x3 = ~x.clone();\n+        let x3 = (*x).clone();\n         do task::spawn || {\n             do x3.write_cond |cond| {\n                 chan.send(());\n@@ -1253,11 +1253,11 @@ mod tests {\n         let mut ports = ~[];\n \n         for num_waiters.times {\n-            let xi = ~x.clone();\n+            let xi = (*x).clone();\n             let (port, chan) = comm::stream();\n             ports.push(port);\n             do task::spawn || {\n-                do lock_cond(xi, dg1) |cond| {\n+                do lock_cond(&xi, dg1) |cond| {\n                     chan.send(());\n                     cond.wait();\n                     chan.send(());\n@@ -1289,10 +1289,10 @@ mod tests {\n     pub fn rwlock_kill_helper(mode1: RWlockMode, mode2: RWlockMode) {\n         // Mutex must get automatically unlocked if failed/killed within.\n         let x = ~RWlock();\n-        let x2 = ~x.clone();\n+        let x2 = (*x).clone();\n \n         let result: result::Result<(),()> = do task::try || {\n-            do lock_rwlock_in_mode(x2, mode1) {\n+            do lock_rwlock_in_mode(&x2, mode1) {\n                 fail!();\n             }\n         };"}, {"sha": "15ba7f95538fa478da763b01b6e04bf0175b7524", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -63,7 +63,7 @@ pub fn analyze(proto: protocol, _cx: @ext_ctxt) {\n         debug!(\"colive iteration %?\", i);\n         let mut new_colive = ~[];\n         for colive.eachi |i, this_colive| {\n-            let mut result = ~this_colive.clone();\n+            let mut result = this_colive.clone();\n             let this = proto.get_state_by_id(i);\n             for this_colive.ones |j| {\n                 let next = proto.get_state_by_id(j);"}, {"sha": "33785b2fbb0966423b1dc41950e9e3b1bd6d5054", "filename": "src/test/run-pass/alt-value-binding-in-guard-3291.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Falt-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Falt-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-value-binding-in-guard-3291.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -11,7 +11,7 @@\n fn foo(x: Option<~int>, b: bool) -> int {\n     match x {\n       None => { 1 }\n-      Some(copy x) if b => { *x }\n+      Some(ref x) if b => { *x.clone() }\n       Some(_) => { 0 }\n     }\n }"}, {"sha": "16cd51c8f275deebff55884c0456ba9c2df721c0", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -43,7 +43,7 @@ pub fn main() {\n     // Call a method\n     for x.iterate() |y| { fail_unless!(x[*y] == *y); }\n     // Call a parameterized function\n-    fail_unless!(length(copy x) == vec::len(x));\n+    fail_unless!(length(x.clone()) == vec::len(x));\n     // Call a parameterized function, with type arguments that require\n     // a borrow\n     fail_unless!(length::<int, &[int]>(x) == vec::len(x));"}, {"sha": "96336f5569c1915ab0af62850edc135db82e3bc6", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -15,8 +15,8 @@ fn iter_vec<T>(v: ~[T], f: &fn(&T)) { for v.each |x| { f(x); } }\n pub fn main() {\n     let v = ~[1, 2, 3, 4, 5];\n     let mut sum = 0;\n-    iter_vec(copy v, |i| {\n-        iter_vec(copy v, |j| {\n+    iter_vec(v.clone(), |i| {\n+        iter_vec(v.clone(), |j| {\n             sum += *i * *j;\n         });\n     });"}, {"sha": "28875da25a64340072165d4888261cfc77abc37a", "filename": "src/test/run-pass/block-vec-map2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -15,6 +15,6 @@ pub fn main() {\n         vec::map2(~[1, 2, 3, 4, 5],\n                   ~[true, false, false, true, true],\n                   |i, b| if *b { -(*i) } else { *i } );\n-    error!(copy v);\n+    error!(v.clone());\n     fail_unless!((v == ~[-1, 2, 3, -4, -5]));\n }"}, {"sha": "f2e0b6c9ca0f444a84cd9479b82f11e28fda673e", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -13,7 +13,7 @@ fn borrow(x: &int, f: &fn(x: &int)) {\n }\n \n fn test1(x: @~int) {\n-    do borrow(copy *x) |p| {\n+    do borrow(&*x.clone()) |p| {\n         let x_a = ptr::addr_of(&(**x));\n         fail_unless!((x_a as uint) != ptr::to_uint(p));\n         fail_unless!(unsafe{*x_a} == *p);"}, {"sha": "e3f8f98f4b6b1fdb1bb130a7e79b62838ccee0f6", "filename": "src/test/run-pass/borrowck-preserve-box-sometimes-needed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -13,7 +13,7 @@\n fn switcher(x: Option<@int>) {\n     let mut x = x;\n     match x {\n-      Some(@y) => { copy y; x = None; }\n+      Some(@y) => { y.clone(); x = None; }\n       None => { }\n     }\n }"}, {"sha": "6a665f770ffddc03e7e9b798e8f1a4fa85c81e45", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -22,7 +22,7 @@ mod kitty {\n     }\n \n     pub impl cat {\n-        fn get_name(&self) -> ~str { copy self.name }\n+        fn get_name(&self) -> ~str { self.name.clone() }\n     }\n \n     pub fn cat(in_name: ~str) -> cat {"}, {"sha": "7cd2753ee1548bf377ac32da53266d77f9c28980", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -53,7 +53,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,\n-        name: copy in_name\n+        name: in_name.clone()\n     }\n }\n "}, {"sha": "bb07597a1887ccc83f573598737e60a7cf89f6f2", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n // xfail-fast\n-use core::to_str::*;\n-\n struct cat {\n     priv meows : uint,\n \n@@ -53,7 +51,12 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n impl ToStr for cat {\n-  pure fn to_str(&self) -> ~str { copy self.name }\n+    pure fn to_str(&self) -> ~str {\n+        // FIXME #5384: this unsafe block is to work around purity\n+        unsafe {\n+            self.name.clone()\n+        }\n+    }\n }\n \n fn print_out(thing: @ToStr, expected: ~str) {"}, {"sha": "74a88bb5c8769d2efcfcc6771e4d94455a9d8583", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -13,9 +13,9 @@\n // -*- rust -*-\n type compare<T> = @fn(~T, ~T) -> bool;\n \n-fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n+fn test_generic<T:Copy+Clone>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {\n-        true => { copy expected },\n+        true => { expected.clone() },\n         _ => fail!(~\"wat\")\n     };\n     fail_unless!((eq(expected, actual)));"}, {"sha": "c9efe753f5757d524c65dab3f92cd9abc013f930", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -13,9 +13,9 @@\n \n type compare<T> = @fn(T, T) -> bool;\n \n-fn test_generic<T:Copy>(expected: T, eq: compare<T>) {\n+fn test_generic<T:Copy+Clone>(expected: T, eq: compare<T>) {\n     let actual: T = match true {\n-        true => copy expected,\n+        true => expected.clone(),\n         _ => fail!(~\"wat\")\n     };\n     fail_unless!((eq(expected, actual)));"}, {"sha": "a9fe128661dc70c586d4e0fb9e1714fc855d33e6", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -13,8 +13,8 @@\n // -*- rust -*-\n type compare<T> = @fn(~T, ~T) -> bool;\n \n-fn test_generic<T:Copy>(expected: ~T, eq: compare<T>) {\n-    let actual: ~T = { copy expected };\n+fn test_generic<T:Copy+Clone>(expected: ~T, eq: compare<T>) {\n+    let actual: ~T = { expected.clone() };\n     fail_unless!((eq(expected, actual)));\n }\n "}, {"sha": "287fc260bf86f528a63f0e6afc12d16a2de184f8", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -14,7 +14,7 @@ fn id<T:Copy + Owned>(t: T) -> T { return t; }\n \n pub fn main() {\n     let expected = ~100;\n-    let actual = id::<~int>(copy expected);\n+    let actual = id::<~int>(expected.clone());\n     debug!(*actual);\n     fail_unless!((*expected == *actual));\n }"}, {"sha": "5d8ac2f1ab5faa228255e5ade6a04f8516587b30", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -38,8 +38,8 @@ mod map_reduce {\n     fn start_mappers(ctrl: SharedChan<ctrl_proto>, inputs: ~[~str]) {\n         for inputs.each |i| {\n             let ctrl = ctrl.clone();\n-            let i = copy *i;\n-            task::spawn(|| map_task(ctrl.clone(), copy i) );\n+            let i = i.clone();\n+            task::spawn(|| map_task(ctrl.clone(), i.clone()) );\n         }\n     }\n \n@@ -79,7 +79,7 @@ mod map_reduce {\n \n         reducers = oldmap::HashMap();\n \n-        start_mappers(ctrl_chan, copy inputs);\n+        start_mappers(ctrl_chan, inputs.clone());\n \n         let mut num_mappers = vec::len(inputs) as int;\n "}, {"sha": "388160e538acd55733fa4e2d0a2d6ac077ac21a3", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -20,7 +20,7 @@ impl Drop for socket {\n pub impl socket {\n     fn set_identity(&self)  {\n         do closure {\n-            setsockopt_bytes(copy self.sock)\n+            setsockopt_bytes(self.sock.clone())\n         }\n     }\n }"}, {"sha": "2c3b4b71bb8e3c43cb93ea1a026ca35094586a2b", "filename": "src/test/run-pass/issue-2633-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633-2.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -14,5 +14,5 @@ fn a_val(&&x: ~int, +y: ~int) -> int {\n \n pub fn main() {\n     let z = ~22;\n-    a_val(copy z, copy z);\n+    a_val(z.clone(), z.clone());\n }"}, {"sha": "6203f14f10f2e0f2abf3e1f2969e9200787f657f", "filename": "src/test/run-pass/issue-3389.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3389.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -27,6 +27,6 @@ pub fn main() {\n     let v = ~[~\"123\", ~\"abc\"];\n     node.content = ~[~\"123\", ~\"abc\"];\n     print_str_vector(v);\n-    print_str_vector(copy node.content);\n+    print_str_vector(node.content.clone());\n \n }"}, {"sha": "fc6ceb4130fcd2eacd5efb58a7abc7e9225660f4", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -19,7 +19,7 @@ fn foo(name: ~str, samples_chan: Chan<Msg>) {\n                 for uint::range(0, buffer.len())\n                     |i| {error!(\"%?: %f\", i, buffer[i])}\n             };\n-        samples_chan.send(GetSamples(copy name, callback));\n+        samples_chan.send(GetSamples(name.clone(), callback));\n     };\n }\n "}, {"sha": "37e91cf1eb22a6e3247ac3bee273820af57c4786", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -14,7 +14,7 @@ fn parse_args() -> ~str {\n     let mut n = 0;\n \n     while n < args.len() {\n-        match copy args[n] {\n+        match args[n].clone() {\n             ~\"-v\" => (),\n             s => {\n                 return s;"}, {"sha": "a5e5b10d076421d5db149bc296fa651bf0b2b924", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -11,7 +11,7 @@\n // xfail-test\n pub fn main() {\n     for os::args().each |arg| {\n-        match copy *arg {\n+        match arg.clone() {\n             s => { }\n         }\n     }"}, {"sha": "e6e3931162695a6fee683200bafeade651e47e1e", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -10,7 +10,7 @@\n \n fn test_stack_assign() {\n     let s: ~str = ~\"a\";\n-    debug!(copy s);\n+    debug!(s.clone());\n     let t: ~str = ~\"a\";\n     fail_unless!((s == t));\n     let u: ~str = ~\"b\";\n@@ -49,7 +49,7 @@ fn test_append() {\n \n     let mut s = ~\"a\";\n     s += ~\"b\";\n-    debug!(copy s);\n+    debug!(s.clone());\n     fail_unless!((s == ~\"ab\"));\n \n     let mut s = ~\"c\";"}, {"sha": "3d121d087453c1377a7633596c164b65036b19f1", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -14,7 +14,7 @@ struct A { a: ~int }\n \n fn foo() -> @fn() -> int {\n     let k = ~22;\n-    let _u = A {a: copy k};\n+    let _u = A {a: k.clone()};\n     let result: @fn() -> int = || 22;\n     result\n }"}, {"sha": "2c62b6894d0df425be2dbb62a1131f5820f860b5", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -15,6 +15,6 @@ struct A { a: ~int }\n pub fn main() {\n     fn invoke(f: @fn()) { f(); }\n     let k = ~22;\n-    let _u = A {a: copy k};\n-    invoke(|| error!(copy k) )\n+    let _u = A {a: k.clone()};\n+    invoke(|| error!(k.clone()) )\n }"}, {"sha": "f046adc30b45617e5653ac0a10bb14a1bde9b7e4", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -43,7 +43,7 @@ pub fn main() {\n     fail_unless!(transform(Some(10)) == Some(~\"11\"));\n     fail_unless!(transform(None) == None);\n     fail_unless!((~[~\"hi\"])\n-        .bind(|x| ~[copy *x, *x + ~\"!\"] )\n-        .bind(|x| ~[copy *x, *x + ~\"?\"] ) ==\n+        .bind(|x| ~[x.clone(), *x + ~\"!\"] )\n+        .bind(|x| ~[x.clone(), *x + ~\"?\"] ) ==\n         ~[~\"hi\", ~\"hi?\", ~\"hi!\", ~\"hi!?\"]);\n }"}, {"sha": "c68771e4a949c4227d02370abaf90246065cb266", "filename": "src/test/run-pass/propagate-expected-type-through-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fpropagate-expected-type-through-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fpropagate-expected-type-through-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpropagate-expected-type-through-block.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -5,7 +5,7 @@\n pub fn main() {\n     let y = ~3;\n     let foo: @fn(&int) -> int = {\n-        let y = copy y;\n+        let y = y.clone();\n         |x| *x + *y\n     };\n     fail_unless!(foo(@22) == 25);"}, {"sha": "62cb3296f60bbaffe02bec7b3a30c4331efb0d70", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -19,6 +19,6 @@ struct X { foo: ~str, bar: ~str }\n \n pub fn main() {\n     let x = X {foo: ~\"hello\", bar: ~\"world\"};\n-    debug!(copy x.foo);\n-    debug!(copy x.bar);\n+    debug!(x.foo.clone());\n+    debug!(x.bar.clone());\n }"}, {"sha": "9f093812d8a7c08a3ebbadaf5ba89803b5bc4d3c", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -647,10 +647,10 @@ pub fn main() {\n         let v = @v as @TyVisitor;\n         visit_tydesc(td, v);\n \n-        for (copy u.vals).each |s| {\n+        for (u.vals.clone()).each |s| {\n             io::println(fmt!(\"val: %s\", *s));\n         }\n-        error!(\"%?\", copy u.vals);\n+        error!(\"%?\", u.vals.clone());\n         fail_unless!(u.vals == ~[\n             ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"\n         ]);"}, {"sha": "6576a6c3fa97536545cfcbd6e532b842eafc2ab7", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -150,7 +150,7 @@ pub fn main() {\n     visit_ty::<i16>(vv);\n     visit_ty::<~[int]>(vv);\n \n-    for (copy v.types).each {|s|\n+    for (v.types.clone()).each {|s|\n         io::println(fmt!(\"type: %s\", s));\n     }\n     fail_unless!(v.types == [\"bool\", \"int\", \"i8\", \"i16\","}, {"sha": "6fe5831644fdc14d34990ee3c5e6dd1bf06e929e", "filename": "src/test/run-pass/ret-break-cont-in-block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-break-cont-in-block.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -20,9 +20,9 @@ fn iter<T>(v: ~[T], it: &fn(&T) -> bool) {\n     }\n }\n \n-fn find_pos<T:Eq + Copy>(n: T, h: ~[T]) -> Option<uint> {\n+fn find_pos<T:Eq + Copy + Clone>(n: T, h: ~[T]) -> Option<uint> {\n     let mut i = 0u;\n-    for iter(copy h) |e| {\n+    for iter(h.clone()) |e| {\n         if *e == n { return Some(i); }\n         i += 1u;\n     }\n@@ -31,8 +31,8 @@ fn find_pos<T:Eq + Copy>(n: T, h: ~[T]) -> Option<uint> {\n \n fn bail_deep(x: ~[~[bool]]) {\n     let mut seen = false;\n-    for iter(copy x) |x| {\n-        for iter(copy *x) |x| {\n+    for iter(x.clone()) |x| {\n+        for iter(x.clone()) |x| {\n             fail_unless!(!seen);\n             if *x { seen = true; return; }\n         }"}, {"sha": "f2e12294b0988f4a2c128f0f274b30eed700cc05", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n \n     {\n         match io::file_writer(&path, [io::Create, io::Truncate]) {\n-            Err(copy e) => fail!(e),\n+            Err(ref e) => fail!(e.clone()),\n             Ok(f) => {\n                 for uint::range(0, 1000) |_i| {\n                     f.write_u8(0);"}, {"sha": "d1592c46dc9937f0b66b727562e757e33e1b2820", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -16,7 +16,7 @@ extern mod std;\n fn test1() {\n     let mut s: ~str = ~\"hello\";\n     s += ~\"world\";\n-    debug!(copy s);\n+    debug!(s.clone());\n     fail_unless!((s[9] == 'd' as u8));\n }\n \n@@ -26,8 +26,8 @@ fn test2() {\n     let ff: ~str = ~\"abc\";\n     let a: ~str = ff + ~\"ABC\" + ff;\n     let b: ~str = ~\"ABC\" + ff + ~\"ABC\";\n-    debug!(copy a);\n-    debug!(copy b);\n+    debug!(a.clone());\n+    debug!(b.clone());\n     fail_unless!((a == ~\"abcABCabc\"));\n     fail_unless!((b == ~\"ABCabcABC\"));\n }"}, {"sha": "107998d3def2f608bdff411975058369234ec098", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -16,6 +16,6 @@ pub fn main() {\n     let a: ~str = ~\"hello\";\n     let b: ~str = ~\"world\";\n     let s: ~str = a + b;\n-    debug!(copy s);\n+    debug!(s.clone());\n     fail_unless!((s[9] == 'd' as u8));\n }"}, {"sha": "3af58274bfb3c246dc60f1846d3fcc1d2e0c77ae", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -11,8 +11,8 @@\n extern mod std;\n \n fn test(actual: ~str, expected: ~str) {\n-    debug!(copy actual);\n-    debug!(copy expected);\n+    debug!(actual.clone());\n+    debug!(expected.clone());\n     fail_unless!((actual == expected));\n }\n "}, {"sha": "c11ece6281347f11ea894fb3c0a7be61bb06147d", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -17,7 +17,7 @@ impl to_str for int {\n     fn to_str(&self) -> ~str { int::to_str(*self) }\n }\n impl to_str for ~str {\n-    fn to_str(&self) -> ~str { copy *self }\n+    fn to_str(&self) -> ~str { self.clone() }\n }\n impl to_str for () {\n     fn to_str(&self) -> ~str { ~\"()\" }"}, {"sha": "8ecff0719a29cca7c72e0d56985a453139ea5eec", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -12,7 +12,7 @@ pub fn main() {\n     let mut i = ~1;\n     // Should be a copy\n     let mut j;\n-    j = copy i;\n+    j = i.clone();\n     *i = 2;\n     *j = 3;\n     fail_unless!(*i == 2);"}, {"sha": "177b3ed5c246c0438d74f85f4e4e78303141f393", "filename": "src/test/run-pass/unique-decl-init-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-init-copy.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     let mut i = ~1;\n     // Should be a copy\n-    let mut j = copy i;\n+    let mut j = i.clone();\n     *i = 2;\n     *j = 3;\n     fail_unless!(*i == 2);"}, {"sha": "1033fa1c22c79dd5ee6f2e384719dca56670a919", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let mut a = ~[~10];\n-    let b = copy a;\n+    let b = a.clone();\n \n     fail_unless!(*a[0] == 10);\n     fail_unless!(*b[0] == 10);"}, {"sha": "8b6e037e8401383f40a2e48f7767c60ed14f194b", "filename": "src/test/run-pass/vec-ivec-deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let a = ~[1, 2, 3, 4, 5];\n-    let mut b = ~[copy a, copy a];\n+    let mut b = ~[a.clone(), a.clone()];\n     b = b + b; // FIXME(#3387)---can't write b += b\n }"}, {"sha": "dfd4f025c139ffbbdb96ff8cf3239e97b45eb0fe", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1e8ef71abb390a8f6406292ea06c729dcbf9e5/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=6f1e8ef71abb390a8f6406292ea06c729dcbf9e5", "patch": "@@ -1,24 +1,24 @@\n-fn foldl<T, U: Copy>(\n+fn foldl<T, U: Copy+Clone>(\n     values: &[T],\n     initial: U,\n     function: &fn(partial: U, element: &T) -> U\n ) -> U {\n     match values {\n         [head, ..tail] =>\n             foldl(tail, function(initial, &head), function),\n-        [] => copy initial\n+        [] => initial.clone()\n     }\n }\n \n-fn foldr<T, U: Copy>(\n+fn foldr<T, U: Copy+Clone>(\n     values: &[T],\n     initial: U,\n     function: &fn(element: &T, partial: U) -> U\n ) -> U {\n     match values {\n         [..head, tail] =>\n             foldr(head, function(&tail, initial), function),\n-        [] => copy initial\n+        [] => initial.clone()\n     }\n }\n "}]}