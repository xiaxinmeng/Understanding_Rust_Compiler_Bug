{"sha": "0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjJlMmQ2ZDQ5YzdjMTQ4ZWMxOWQ3MmEyZTg0NDA4MWRlOWY2MjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-12T06:59:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-23T21:50:20Z"}, "message": "use MaybeUninit in core::ptr::{read,read_unaligned}\n\nCode by @japaric, I just split it into individual commits", "tree": {"sha": "85d92198abbd2d7fdda0614e1d0814d5e2a91318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d92198abbd2d7fdda0614e1d0814d5e2a91318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "html_url": "https://github.com/rust-lang/rust/commit/0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb2e2d6d49c7c148ec19d72a2e844081de9f623/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525e8f4368dadd1fe66468ff4c14ee889cf504f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/525e8f4368dadd1fe66468ff4c14ee889cf504f7", "html_url": "https://github.com/rust-lang/rust/commit/525e8f4368dadd1fe66468ff4c14ee889cf504f7"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "405f95acf195082e9b24823d317a531b6a2cfe2a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2e2d6d49c7c148ec19d72a2e844081de9f623/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2e2d6d49c7c148ec19d72a2e844081de9f623/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0bb2e2d6d49c7c148ec19d72a2e844081de9f623", "patch": "@@ -79,7 +79,7 @@ use ops::{CoerceUnsized, DispatchFromDyn};\n use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n-use mem;\n+use mem::{self, MaybeUninit};\n use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n@@ -575,9 +575,9 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n-    let mut tmp: T = mem::uninitialized();\n-    copy_nonoverlapping(src, &mut tmp, 1);\n-    tmp\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n+    copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n+    tmp.into_inner()\n }\n \n /// Reads the value from `src` without moving it. This leaves the\n@@ -642,11 +642,11 @@ pub unsafe fn read<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n-    let mut tmp: T = mem::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n     copy_nonoverlapping(src as *const u8,\n-                        &mut tmp as *mut T as *mut u8,\n+                        tmp.as_mut_ptr() as *mut u8,\n                         mem::size_of::<T>());\n-    tmp\n+    tmp.into_inner()\n }\n \n /// Overwrites a memory location with the given value without reading or"}]}