{"sha": "a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5M2QxNjZmMGZlY2I3NDhkOGNiMDRhYWI3ZjU0MDZiZjYzMDhjMmQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-14T13:25:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-14T13:25:10Z"}, "message": "Make documentation on hover configurable", "tree": {"sha": "ceda7b8ea1bf1c2949c75191e4faa41693f8f19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceda7b8ea1bf1c2949c75191e4faa41693f8f19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "html_url": "https://github.com/rust-lang/rust/commit/a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae", "html_url": "https://github.com/rust-lang/rust/commit/388a91c8a8d542f7a8e0ddff879cce4d4c2b20ae"}], "stats": {"total": 238, "additions": 125, "deletions": 113}, "files": [{"sha": "23f2b48b455873b504c00d4870faa1346b6e6803", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 86, "deletions": 93, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "patch": "@@ -1,8 +1,5 @@\n use either::Either;\n-use hir::{\n-    AsAssocItem, AssocItemContainer, GenericParam, HasAttrs, HasSource, HirDisplay, InFile, Module,\n-    ModuleDef, Semantics,\n-};\n+use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::{Definition, NameClass, NameRefClass},\n@@ -40,6 +37,7 @@ pub struct HoverConfig {\n     pub goto_type_def: bool,\n     pub links_in_hover: bool,\n     pub markdown: bool,\n+    pub documentation: bool,\n }\n \n impl HoverConfig {\n@@ -51,14 +49,15 @@ impl HoverConfig {\n         goto_type_def: false,\n         links_in_hover: true,\n         markdown: true,\n+        documentation: true,\n     };\n \n-    pub fn any(&self) -> bool {\n+    pub fn any_actions(&self) -> bool {\n         self.implementations || self.references || self.runnable() || self.goto_type_def\n     }\n \n-    pub fn none(&self) -> bool {\n-        !self.any()\n+    pub fn no_actions(&self) -> bool {\n+        !self.any_actions()\n     }\n \n     pub fn runnable(&self) -> bool {\n@@ -97,9 +96,10 @@ pub(crate) fn hover(\n     db: &RootDatabase,\n     position: FilePosition,\n     links_in_hover: bool,\n+    documentation: bool,\n     markdown: bool,\n ) -> Option<RangeInfo<HoverResult>> {\n-    let sema = Semantics::new(db);\n+    let sema = hir::Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best(file.token_at_offset(position.offset))?;\n     let token = sema.descend_into_macros(token);\n@@ -131,7 +131,7 @@ pub(crate) fn hover(\n                     let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n                     let (idl_range, link, ns) =\n                         extract_definitions_from_markdown(docs.as_str()).into_iter().find_map(|(range, link, ns)| {\n-                            let InFile { file_id, value: range } = doc_mapping.map(range)?;\n+                            let hir::InFile { file_id, value: range } = doc_mapping.map(range)?;\n                             if file_id == position.file_id.into() && range.contains(position.offset) {\n                                 Some((range, link, ns))\n                             } else {\n@@ -151,12 +151,14 @@ pub(crate) fn hover(\n \n     if let Some(definition) = definition {\n         let famous_defs = match &definition {\n-            Definition::ModuleDef(ModuleDef::BuiltinType(_)) => {\n+            Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)) => {\n                 Some(FamousDefs(&sema, sema.scope(&node).krate()))\n             }\n             _ => None,\n         };\n-        if let Some(markup) = hover_for_definition(db, definition, famous_defs.as_ref()) {\n+        if let Some(markup) =\n+            hover_for_definition(db, definition, famous_defs.as_ref(), documentation)\n+        {\n             res.markup = process_markup(sema.db, definition, &markup, links_in_hover, markdown);\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n@@ -261,8 +263,10 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n     }\n \n     let adt = match def {\n-        Definition::ModuleDef(ModuleDef::Trait(it)) => return it.try_to_nav(db).map(to_action),\n-        Definition::ModuleDef(ModuleDef::Adt(it)) => Some(it),\n+        Definition::ModuleDef(hir::ModuleDef::Trait(it)) => {\n+            return it.try_to_nav(db).map(to_action)\n+        }\n+        Definition::ModuleDef(hir::ModuleDef::Adt(it)) => Some(it),\n         Definition::SelfType(it) => it.self_ty(db).as_adt(),\n         _ => None,\n     }?;\n@@ -271,25 +275,27 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n \n fn show_fn_references_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     match def {\n-        Definition::ModuleDef(ModuleDef::Function(it)) => it.try_to_nav(db).map(|nav_target| {\n-            HoverAction::Reference(FilePosition {\n-                file_id: nav_target.file_id,\n-                offset: nav_target.focus_or_full_range().start(),\n+        Definition::ModuleDef(hir::ModuleDef::Function(it)) => {\n+            it.try_to_nav(db).map(|nav_target| {\n+                HoverAction::Reference(FilePosition {\n+                    file_id: nav_target.file_id,\n+                    offset: nav_target.focus_or_full_range().start(),\n+                })\n             })\n-        }),\n+        }\n         _ => None,\n     }\n }\n \n fn runnable_action(\n-    sema: &Semantics<RootDatabase>,\n+    sema: &hir::Semantics<RootDatabase>,\n     def: Definition,\n     file_id: FileId,\n ) -> Option<HoverAction> {\n     match def {\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Module(it) => runnable_mod(sema, it).map(HoverAction::Runnable),\n-            ModuleDef::Function(func) => {\n+            hir::ModuleDef::Module(it) => runnable_mod(sema, it).map(HoverAction::Runnable),\n+            hir::ModuleDef::Function(func) => {\n                 let src = func.source(sema.db)?;\n                 if src.file_id != file_id.into() {\n                     cov_mark::hit!(hover_macro_generated_struct_fn_doc_comment);\n@@ -306,19 +312,19 @@ fn runnable_action(\n }\n \n fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n-    let mut targets: Vec<ModuleDef> = Vec::new();\n-    let mut push_new_def = |item: ModuleDef| {\n+    let mut targets: Vec<hir::ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: hir::ModuleDef| {\n         if !targets.contains(&item) {\n             targets.push(item);\n         }\n     };\n \n-    if let Definition::GenericParam(GenericParam::TypeParam(it)) = def {\n+    if let Definition::GenericParam(hir::GenericParam::TypeParam(it)) = def {\n         it.trait_bounds(db).into_iter().for_each(|it| push_new_def(it.into()));\n     } else {\n         let ty = match def {\n             Definition::Local(it) => it.ty(db),\n-            Definition::GenericParam(GenericParam::ConstParam(it)) => it.ty(db),\n+            Definition::GenericParam(hir::GenericParam::ConstParam(it)) => it.ty(db),\n             _ => return None,\n         };\n \n@@ -348,29 +354,20 @@ fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     Some(HoverAction::GoToType(targets))\n }\n \n-fn hover_markup(\n-    docs: Option<String>,\n-    desc: Option<String>,\n-    mod_path: Option<String>,\n-) -> Option<Markup> {\n-    match desc {\n-        Some(desc) => {\n-            let mut buf = String::new();\n-\n-            if let Some(mod_path) = mod_path {\n-                if !mod_path.is_empty() {\n-                    format_to!(buf, \"```rust\\n{}\\n```\\n\\n\", mod_path);\n-                }\n-            }\n-            format_to!(buf, \"```rust\\n{}\\n```\", desc);\n+fn hover_markup(docs: Option<String>, desc: String, mod_path: Option<String>) -> Option<Markup> {\n+    let mut buf = String::new();\n \n-            if let Some(doc) = docs {\n-                format_to!(buf, \"\\n___\\n\\n{}\", doc);\n-            }\n-            Some(buf.into())\n+    if let Some(mod_path) = mod_path {\n+        if !mod_path.is_empty() {\n+            format_to!(buf, \"```rust\\n{}\\n```\\n\\n\", mod_path);\n         }\n-        None => docs.map(Markup::from),\n     }\n+    format_to!(buf, \"```rust\\n{}\\n```\", desc);\n+\n+    if let Some(doc) = docs {\n+        format_to!(buf, \"\\n___\\n\\n{}\", doc);\n+    }\n+    Some(buf.into())\n }\n \n fn process_markup(\n@@ -396,19 +393,19 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n         Definition::Field(f) => Some(f.parent_def(db).name(db)),\n         Definition::Local(l) => l.parent(db).name(db),\n         Definition::ModuleDef(md) => match md {\n-            ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n-                AssocItemContainer::Trait(t) => Some(t.name(db)),\n-                AssocItemContainer::Impl(i) => i.self_ty(db).as_adt().map(|adt| adt.name(db)),\n+            hir::ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n+                hir::AssocItemContainer::Trait(t) => Some(t.name(db)),\n+                hir::AssocItemContainer::Impl(i) => i.self_ty(db).as_adt().map(|adt| adt.name(db)),\n             },\n-            ModuleDef::Variant(e) => Some(e.parent_enum(db).name(db)),\n+            hir::ModuleDef::Variant(e) => Some(e.parent_enum(db).name(db)),\n             _ => None,\n         },\n         _ => None,\n     }\n     .map(|name| name.to_string())\n }\n \n-fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) -> String {\n+fn render_path(db: &RootDatabase, module: hir::Module, item_name: Option<String>) -> String {\n     let crate_name =\n         db.crate_graph()[module.krate().into()].display_name.as_ref().map(|it| it.to_string());\n     let module_path = module\n@@ -420,67 +417,63 @@ fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) ->\n }\n \n fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    if let Definition::GenericParam(_) = def {\n+        return None;\n+    }\n     def.module(db).map(|module| render_path(db, module, definition_owner_name(db, def)))\n }\n \n fn hover_for_definition(\n     db: &RootDatabase,\n     def: Definition,\n     famous_defs: Option<&FamousDefs>,\n+    documentation: bool,\n ) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n-    return match def {\n+    let (label, docs) = match def {\n         Definition::Macro(it) => match &it.source(db)?.value {\n             Either::Left(mac) => {\n                 let label = macro_label(mac);\n-                from_def_source_labeled(db, it, Some(label), mod_path)\n+                (label, it.attrs(db).docs())\n             }\n             Either::Right(_) => {\n                 // FIXME\n-                None\n+                return None;\n             }\n         },\n-        Definition::Field(def) => from_hir_fmt(db, def, mod_path),\n+        Definition::Field(def) => label_and_docs(db, def),\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Module(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Function(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Adt(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Variant(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Const(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Static(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::Trait(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::TypeAlias(it) => from_hir_fmt(db, it, mod_path),\n-            ModuleDef::BuiltinType(it) => famous_defs\n-                .and_then(|fd| hover_for_builtin(fd, it))\n-                .or_else(|| Some(Markup::fenced_block(&it.name()))),\n+            hir::ModuleDef::Module(it) => label_and_docs(db, it),\n+            hir::ModuleDef::Function(it) => label_and_docs(db, it),\n+            hir::ModuleDef::Adt(it) => label_and_docs(db, it),\n+            hir::ModuleDef::Variant(it) => label_and_docs(db, it),\n+            hir::ModuleDef::Const(it) => label_and_docs(db, it),\n+            hir::ModuleDef::Static(it) => label_and_docs(db, it),\n+            hir::ModuleDef::Trait(it) => label_and_docs(db, it),\n+            hir::ModuleDef::TypeAlias(it) => label_and_docs(db, it),\n+            hir::ModuleDef::BuiltinType(it) => {\n+                return famous_defs\n+                    .and_then(|fd| hover_for_builtin(fd, it))\n+                    .or_else(|| Some(Markup::fenced_block(&it.name())))\n+            }\n         },\n-        Definition::Local(it) => hover_for_local(it, db),\n+        Definition::Local(it) => return hover_for_local(it, db),\n         Definition::SelfType(impl_def) => {\n-            impl_def.self_ty(db).as_adt().and_then(|adt| from_hir_fmt(db, adt, mod_path))\n+            impl_def.self_ty(db).as_adt().map(|adt| label_and_docs(db, adt))?\n         }\n-        Definition::GenericParam(it) => from_hir_fmt(db, it, None),\n-        Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),\n+        Definition::GenericParam(it) => label_and_docs(db, it),\n+        Definition::Label(it) => return Some(Markup::fenced_block(&it.name(db))),\n     };\n \n-    fn from_hir_fmt<D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<Markup>\n+    return hover_markup(docs.filter(|_| documentation).map(Into::into), label, mod_path);\n+\n+    fn label_and_docs<D>(db: &RootDatabase, def: D) -> (String, Option<hir::Documentation>)\n     where\n         D: HasAttrs + HirDisplay,\n     {\n         let label = def.display(db).to_string();\n-        from_def_source_labeled(db, def, Some(label), mod_path)\n-    }\n-\n-    fn from_def_source_labeled<D>(\n-        db: &RootDatabase,\n-        def: D,\n-        short_label: Option<String>,\n-        mod_path: Option<String>,\n-    ) -> Option<Markup>\n-    where\n-        D: HasAttrs,\n-    {\n-        let docs = def.attrs(db).docs().map(Into::into);\n-        hover_markup(docs, short_label, mod_path)\n+        let docs = def.attrs(db).docs();\n+        (label, docs)\n     }\n }\n \n@@ -504,11 +497,11 @@ fn hover_for_local(it: hir::Local, db: &RootDatabase) -> Option<Markup> {\n         }\n         Either::Right(_) => format!(\"{}self: {}\", is_mut, ty),\n     };\n-    hover_markup(None, Some(desc), None)\n+    hover_markup(None, desc, None)\n }\n \n fn hover_for_keyword(\n-    sema: &Semantics<RootDatabase>,\n+    sema: &hir::Semantics<RootDatabase>,\n     links_in_hover: bool,\n     markdown: bool,\n     token: &SyntaxToken,\n@@ -524,7 +517,7 @@ fn hover_for_keyword(\n     let markup = process_markup(\n         sema.db,\n         Definition::ModuleDef(doc_owner.into()),\n-        &hover_markup(Some(docs.into()), Some(token.text().into()), None)?,\n+        &hover_markup(Some(docs.into()), token.text().into(), None)?,\n         links_in_hover,\n         markdown,\n     );\n@@ -536,7 +529,7 @@ fn hover_for_builtin(famous_defs: &FamousDefs, builtin: hir::BuiltinType) -> Opt\n     let primitive_mod = format!(\"prim_{}\", builtin.name());\n     let doc_owner = find_std_module(famous_defs, &primitive_mod)?;\n     let docs = doc_owner.attrs(famous_defs.0.db).docs()?;\n-    hover_markup(Some(docs.into()), Some(builtin.name().to_string()), None)\n+    hover_markup(Some(docs.into()), builtin.name().to_string(), None)\n }\n \n fn find_std_module(famous_defs: &FamousDefs, name: &str) -> Option<hir::Module> {\n@@ -572,12 +565,12 @@ mod tests {\n \n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        assert!(analysis.hover(position, true, true).unwrap().is_none());\n+        assert!(analysis.hover(position, true, true, true).unwrap().is_none());\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true, true).unwrap().unwrap();\n+        let hover = analysis.hover(position, true, true, true).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -588,7 +581,7 @@ mod tests {\n \n     fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, false, true).unwrap().unwrap();\n+        let hover = analysis.hover(position, false, true, true).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -599,7 +592,7 @@ mod tests {\n \n     fn check_hover_no_markdown(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true, false).unwrap().unwrap();\n+        let hover = analysis.hover(position, true, true, false).unwrap().unwrap();\n \n         let content = analysis.db.file_text(position.file_id);\n         let hovered_element = &content[hover.range];\n@@ -610,7 +603,7 @@ mod tests {\n \n     fn check_actions(ra_fixture: &str, expect: Expect) {\n         let (analysis, position) = fixture::position(ra_fixture);\n-        let hover = analysis.hover(position, true, true).unwrap().unwrap();\n+        let hover = analysis.hover(position, true, true, true).unwrap().unwrap();\n         expect.assert_debug_eq(&hover.info.actions)\n     }\n "}, {"sha": "8d027031908f316b8b15a1b4d3ebdfe8f1aacaf8", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "patch": "@@ -407,9 +407,10 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         links_in_hover: bool,\n+        documentation: bool,\n         markdown: bool,\n     ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position, links_in_hover, markdown))\n+        self.with_db(|db| hover::hover(db, position, links_in_hover, documentation, markdown))\n     }\n \n     /// Return URL(s) for the documentation of the symbol under the cursor."}, {"sha": "5d3deb232d083c6287783b7f11cffb0133aa6b66", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "patch": "@@ -141,6 +141,11 @@ config_data! {\n         /// their contents.\n         highlighting_strings: bool = \"true\",\n \n+        /// Whether to show documentation on hover.\n+        hover_documentation: bool   = \"true\",\n+        /// Use markdown syntax for links in hover.\n+        hover_linksInHover: bool    = \"true\",\n+\n         /// Whether to show `Debug` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n         hoverActions_debug: bool           = \"true\",\n@@ -158,8 +163,6 @@ config_data! {\n         /// Whether to show `Run` action. Only applies when\n         /// `#rust-analyzer.hoverActions.enable#` is set.\n         hoverActions_run: bool             = \"true\",\n-        /// Use markdown syntax for links in hover.\n-        hoverActions_linksInHover: bool    = \"true\",\n \n         /// Whether to show inlay type hints for method chains.\n         inlayHints_chainingHints: bool      = \"true\",\n@@ -726,7 +729,7 @@ impl Config {\n             run: self.data.hoverActions_enable && self.data.hoverActions_run,\n             debug: self.data.hoverActions_enable && self.data.hoverActions_debug,\n             goto_type_def: self.data.hoverActions_enable && self.data.hoverActions_gotoTypeDef,\n-            links_in_hover: self.data.hoverActions_linksInHover,\n+            links_in_hover: self.data.hover_linksInHover,\n             markdown: try_or!(\n                 self.caps\n                     .text_document\n@@ -739,6 +742,7 @@ impl Config {\n                 &[]\n             )\n             .contains(&MarkupKind::Markdown),\n+            documentation: self.data.hover_documentation,\n         }\n     }\n "}, {"sha": "eff1e6c93d805060616c1a7610e17347da348e82", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "patch": "@@ -862,11 +862,15 @@ pub(crate) fn handle_hover(\n     let _p = profile::span(\"handle_hover\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let hover_config = snap.config.hover();\n-    let info =\n-        match snap.analysis.hover(position, hover_config.links_in_hover, hover_config.markdown)? {\n-            None => return Ok(None),\n-            Some(info) => info,\n-        };\n+    let info = match snap.analysis.hover(\n+        position,\n+        hover_config.links_in_hover,\n+        hover_config.documentation,\n+        hover_config.markdown,\n+    )? {\n+        None => return Ok(None),\n+        Some(info) => info,\n+    };\n     let line_index = snap.file_line_index(position.file_id)?;\n     let range = to_proto::range(&line_index, info.range);\n     let hover = lsp_ext::Hover {\n@@ -1587,7 +1591,7 @@ fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n-    if snap.config.hover().none() || !snap.config.hover_actions() {\n+    if snap.config.hover().no_actions() || !snap.config.hover_actions() {\n         return Vec::new();\n     }\n "}, {"sha": "4105d784f2a6814220c239f67bb669e77e6ac8ff", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "patch": "@@ -205,6 +205,16 @@ In some editors (e.g. vscode) semantic tokens override other highlighting gramma\n By disabling semantic tokens for strings, other grammars can be used to highlight\n their contents.\n --\n+[[rust-analyzer.hover.documentation]]rust-analyzer.hover.documentation (default: `true`)::\n++\n+--\n+Whether to show documentation on hover.\n+--\n+[[rust-analyzer.hover.linksInHover]]rust-analyzer.hover.linksInHover (default: `true`)::\n++\n+--\n+Use markdown syntax for links in hover.\n+--\n [[rust-analyzer.hoverActions.debug]]rust-analyzer.hoverActions.debug (default: `true`)::\n +\n --\n@@ -240,11 +250,6 @@ Whether to show `References` action. Only applies when\n Whether to show `Run` action. Only applies when\n `#rust-analyzer.hoverActions.enable#` is set.\n --\n-[[rust-analyzer.hoverActions.linksInHover]]rust-analyzer.hoverActions.linksInHover (default: `true`)::\n-+\n---\n-Use markdown syntax for links in hover.\n---\n [[rust-analyzer.inlayHints.chainingHints]]rust-analyzer.inlayHints.chainingHints (default: `true`)::\n +\n --"}, {"sha": "43a5cc2b5ffbe94305c8dedee8f80a92d025fcfb", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a93d166f0fecb748d8cb04aab7f5406bf6308c2d/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=a93d166f0fecb748d8cb04aab7f5406bf6308c2d", "patch": "@@ -640,6 +640,16 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.hover.documentation\": {\n+                    \"markdownDescription\": \"Whether to show documentation on hover.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.hover.linksInHover\": {\n+                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.hoverActions.debug\": {\n                     \"markdownDescription\": \"Whether to show `Debug` action. Only applies when\\n`#rust-analyzer.hoverActions.enable#` is set.\",\n                     \"default\": true,\n@@ -670,11 +680,6 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.hoverActions.linksInHover\": {\n-                    \"markdownDescription\": \"Use markdown syntax for links in hover.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.inlayHints.chainingHints\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n                     \"default\": true,"}]}