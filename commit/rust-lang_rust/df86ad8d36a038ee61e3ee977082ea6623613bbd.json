{"sha": "df86ad8d36a038ee61e3ee977082ea6623613bbd", "node_id": "C_kwDOAAsO6NoAKGRmODZhZDhkMzZhMDM4ZWU2MWUzZWU5NzcwODJlYTY2MjM2MTNiYmQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-13T13:08:58Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-13T13:09:23Z"}, "message": "Add `delay_span_bug` to `AttrWrapper::take_for_recovery`", "tree": {"sha": "3a116efa93a1a0314ac007037a3a7c51068e3c2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a116efa93a1a0314ac007037a3a7c51068e3c2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df86ad8d36a038ee61e3ee977082ea6623613bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df86ad8d36a038ee61e3ee977082ea6623613bbd", "html_url": "https://github.com/rust-lang/rust/commit/df86ad8d36a038ee61e3ee977082ea6623613bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df86ad8d36a038ee61e3ee977082ea6623613bbd/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3be81dd0cedef3c83fba7047857418633708890f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3be81dd0cedef3c83fba7047857418633708890f", "html_url": "https://github.com/rust-lang/rust/commit/3be81dd0cedef3c83fba7047857418633708890f"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "c8160548763c88420c902f4f84f2af1ef00b069b", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df86ad8d36a038ee61e3ee977082ea6623613bbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86ad8d36a038ee61e3ee977082ea6623613bbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=df86ad8d36a038ee61e3ee977082ea6623613bbd", "patch": "@@ -5,7 +5,8 @@ use rustc_ast::tokenstream::{AttrTokenTree, DelimSpan, LazyAttrTokenStream, Spac\n use rustc_ast::{self as ast};\n use rustc_ast::{AttrVec, Attribute, HasAttrs, HasTokens};\n use rustc_errors::PResult;\n-use rustc_span::{sym, Span};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{sym, Span, DUMMY_SP};\n \n use std::convert::TryInto;\n use std::ops::Range;\n@@ -39,8 +40,13 @@ impl AttrWrapper {\n     pub fn empty() -> AttrWrapper {\n         AttrWrapper { attrs: AttrVec::new(), start_pos: usize::MAX }\n     }\n-    // FIXME: Delay span bug here?\n-    pub(crate) fn take_for_recovery(self) -> AttrVec {\n+\n+    pub(crate) fn take_for_recovery(self, sess: &ParseSess) -> AttrVec {\n+        sess.span_diagnostic.delay_span_bug(\n+            self.attrs.get(0).map(|attr| attr.span).unwrap_or(DUMMY_SP),\n+            \"AttrVec is taken for recovery but no error is produced\",\n+        );\n+\n         self.attrs\n     }\n "}, {"sha": "b072573af23f044e1e18d675984fc879697767fe", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df86ad8d36a038ee61e3ee977082ea6623613bbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86ad8d36a038ee61e3ee977082ea6623613bbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=df86ad8d36a038ee61e3ee977082ea6623613bbd", "patch": "@@ -2272,7 +2272,7 @@ impl<'a> Parser<'a> {\n                 self.mk_block_err(cond_span.shrink_to_hi())\n             }\n         } else {\n-            let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n+            let attrs = self.parse_outer_attributes()?; // For recovery.\n             let block = if self.check(&token::OpenDelim(Delimiter::Brace)) {\n                 self.parse_block()?\n             } else {\n@@ -2289,7 +2289,7 @@ impl<'a> Parser<'a> {\n                     })?\n                 }\n             };\n-            self.error_on_if_block_attrs(lo, false, block.span, &attrs);\n+            self.error_on_if_block_attrs(lo, false, block.span, attrs);\n             block\n         };\n         let els = if self.eat_keyword(kw::Else) { Some(self.parse_else_expr()?) } else { None };\n@@ -2350,7 +2350,7 @@ impl<'a> Parser<'a> {\n     /// Parses an `else { ... }` expression (`else` token already eaten).\n     fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let else_span = self.prev_token.span; // `else`\n-        let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n+        let attrs = self.parse_outer_attributes()?; // For recovery.\n         let expr = if self.eat_keyword(kw::If) {\n             self.parse_if_expr()?\n         } else if self.check(&TokenKind::OpenDelim(Delimiter::Brace)) {\n@@ -2385,7 +2385,7 @@ impl<'a> Parser<'a> {\n                 },\n             }\n         };\n-        self.error_on_if_block_attrs(else_span, true, expr.span, &attrs);\n+        self.error_on_if_block_attrs(else_span, true, expr.span, attrs);\n         Ok(expr)\n     }\n \n@@ -2394,8 +2394,13 @@ impl<'a> Parser<'a> {\n         ctx_span: Span,\n         is_ctx_else: bool,\n         branch_span: Span,\n-        attrs: &[ast::Attribute],\n+        attrs: AttrWrapper,\n     ) {\n+        if attrs.is_empty() {\n+            return;\n+        }\n+\n+        let attrs: &[ast::Attribute] = &attrs.take_for_recovery(self.sess);\n         let (attributes, last) = match attrs {\n             [] => return,\n             [x0 @ xn] | [x0, .., xn] => (x0.span.to(xn.span), xn.span),"}, {"sha": "9684145ad99482cf16b0e0b39485f63b8e37be7d", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df86ad8d36a038ee61e3ee977082ea6623613bbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df86ad8d36a038ee61e3ee977082ea6623613bbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=df86ad8d36a038ee61e3ee977082ea6623613bbd", "patch": "@@ -19,7 +19,7 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n use rustc_ast::util::classify;\n-use rustc_ast::{AttrStyle, AttrVec, Attribute, LocalKind, MacCall, MacCallStmt, MacStmtStyle};\n+use rustc_ast::{AttrStyle, AttrVec, LocalKind, MacCall, MacCallStmt, MacStmtStyle};\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, HasAttrs, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n@@ -101,7 +101,7 @@ impl<'a> Parser<'a> {\n             self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n         } else if self.eat(&token::Semi) {\n             // Do not attempt to parse an expression if we're done here.\n-            self.error_outer_attrs(&attrs.take_for_recovery());\n+            self.error_outer_attrs(attrs);\n             self.mk_stmt(lo, StmtKind::Empty)\n         } else if self.token != token::CloseDelim(Delimiter::Brace) {\n             // Remainder are line-expr stmts.\n@@ -120,7 +120,7 @@ impl<'a> Parser<'a> {\n             }\n             self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n         } else {\n-            self.error_outer_attrs(&attrs.take_for_recovery());\n+            self.error_outer_attrs(attrs);\n             return Ok(None);\n         }))\n     }\n@@ -199,8 +199,10 @@ impl<'a> Parser<'a> {\n \n     /// Error on outer attributes in this context.\n     /// Also error if the previous token was a doc comment.\n-    fn error_outer_attrs(&self, attrs: &[Attribute]) {\n-        if let [.., last] = attrs {\n+    fn error_outer_attrs(&self, attrs: AttrWrapper) {\n+        if !attrs.is_empty()\n+        && let attrs = attrs.take_for_recovery(self.sess)\n+        && let attrs @ [.., last] = &*attrs {\n             if last.is_doc_comment() {\n                 self.sess.emit_err(DocCommentDoesNotDocumentAnything {\n                     span: last.span,"}]}