{"sha": "5853399aee2495107659c2de48b18900f17d3d2c", "node_id": "C_kwDOAAsO6NoAKDU4NTMzOTlhZWUyNDk1MTA3NjU5YzJkZTQ4YjE4OTAwZjE3ZDNkMmM", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-22T18:29:33Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-25T23:05:52Z"}, "message": "Move special `&str` handling to `Constructor` and `Fields`", "tree": {"sha": "de71a044cd0be46a4d03e6e731f8c582f071c67b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de71a044cd0be46a4d03e6e731f8c582f071c67b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5853399aee2495107659c2de48b18900f17d3d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5853399aee2495107659c2de48b18900f17d3d2c", "html_url": "https://github.com/rust-lang/rust/commit/5853399aee2495107659c2de48b18900f17d3d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5853399aee2495107659c2de48b18900f17d3d2c/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035c5213aee99adde4895423591e0e076fbb5dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/035c5213aee99adde4895423591e0e076fbb5dd1", "html_url": "https://github.com/rust-lang/rust/commit/035c5213aee99adde4895423591e0e076fbb5dd1"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "96425381b6be1766aab144d9a4ae744e1c8e3d7b", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5853399aee2495107659c2de48b18900f17d3d2c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5853399aee2495107659c2de48b18900f17d3d2c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=5853399aee2495107659c2de48b18900f17d3d2c", "patch": "@@ -660,9 +660,10 @@ impl<'tcx> Constructor<'tcx> {\n                 } else {\n                     match pat.ty.kind() {\n                         ty::Float(_) => FloatRange(value, value, RangeEnd::Included),\n-                        // In `expand_pattern`, we convert string literals to `&CONST` patterns with\n-                        // `CONST` a pattern of type `str`. In truth this contains a constant of type\n-                        // `&str`.\n+                        // We make `&str` constants behave like `Deref` patterns, to be compatible\n+                        // with other `Deref` patterns. See also `Fields::extract_pattern_arguments`.\n+                        ty::Ref(_, t, _) if t.is_str() => Single,\n+                        // In truth this carries a constant of type `&str`.\n                         ty::Str => Str(value),\n                         // All constants that can be structurally matched have already been expanded\n                         // into the corresponding `Pat`s by `const_to_pat`. Constants that remain are\n@@ -1393,6 +1394,19 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                     self.fields[i] = pat\n                 }\n             }\n+            PatKind::Constant { .. } => match pat.ty.kind() {\n+                ty::Ref(_, t, _) if t.is_str() => {\n+                    assert_eq!(self.len(), 1);\n+                    // We want a `&str` constant to behave like a `Deref` pattern, to be compatible\n+                    // with other `Deref` patterns. This could have been done in `const_to_pat`,\n+                    // but that causes issues with the rest of the matching code.\n+                    // The outer constructor is `&`, and the inner one carries the str value.\n+                    let mut new_pat = pat.clone();\n+                    new_pat.ty = t; // `t` is `str`, not `&str`\n+                    self.fields[0] = &*cx.pattern_arena.alloc(new_pat);\n+                }\n+                _ => {}\n+            },\n             _ => {}\n         };\n         self"}, {"sha": "76759abca039adadc35f4741b0a5df0329dbb876", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5853399aee2495107659c2de48b18900f17d3d2c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5853399aee2495107659c2de48b18900f17d3d2c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=5853399aee2495107659c2de48b18900f17d3d2c", "patch": "@@ -365,23 +365,9 @@ struct LiteralExpander;\n impl<'tcx> PatternFolder<'tcx> for LiteralExpander {\n     fn fold_pattern(&mut self, pat: &Pat<'tcx>) -> Pat<'tcx> {\n         debug!(\"fold_pattern {:?} {:?} {:?}\", pat, pat.ty.kind(), pat.kind);\n-        match (pat.ty.kind(), pat.kind.as_ref()) {\n-            (_, PatKind::Binding { subpattern: Some(s), .. }) => s.fold_with(self),\n-            (_, PatKind::AscribeUserType { subpattern: s, .. }) => s.fold_with(self),\n-            (ty::Ref(_, t, _), PatKind::Constant { .. }) if t.is_str() => {\n-                // Treat string literal patterns as deref patterns to a `str` constant, i.e.\n-                // `&CONST`. This expands them like other const patterns. This could have been done\n-                // in `const_to_pat`, but that causes issues with the rest of the matching code.\n-                let mut new_pat = pat.super_fold_with(self);\n-                // Make a fake const pattern of type `str` (instead of `&str`). That the carried\n-                // constant value still knows it is of type `&str`.\n-                new_pat.ty = t;\n-                Pat {\n-                    kind: Box::new(PatKind::Deref { subpattern: new_pat }),\n-                    span: pat.span,\n-                    ty: pat.ty,\n-                }\n-            }\n+        match pat.kind.as_ref() {\n+            PatKind::Binding { subpattern: Some(s), .. } => s.fold_with(self),\n+            PatKind::AscribeUserType { subpattern: s, .. } => s.fold_with(self),\n             _ => pat.super_fold_with(self),\n         }\n     }\n@@ -1183,7 +1169,7 @@ fn is_useful<'p, 'tcx>(\n             let ctor_wild_subpatterns = Fields::wildcards(pcx.cx, pcx.ty, &ctor);\n             let spec_matrix =\n                 start_matrix.specialize_constructor(pcx, &ctor, &ctor_wild_subpatterns);\n-            let v = v.pop_head_constructor(pcx.cx, &ctor_wild_subpatterns);\n+            let v = v.pop_head_constructor(cx, &ctor_wild_subpatterns);\n             let usefulness =\n                 is_useful(cx, &spec_matrix, &v, witness_preference, hir_id, is_under_guard, false);\n             let usefulness ="}]}