{"sha": "9952632a2f6fc0d5c41976070ba39f57be5ede0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NTI2MzJhMmY2ZmMwZDVjNDE5NzYwNzBiYTM5ZjU3YmU1ZWRlMGM=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@sixtyfps.io", "date": "2021-01-16T09:29:21Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@sixtyfps.io", "date": "2021-01-16T09:29:21Z"}, "message": "Add sample code for Rc::new_cyclic", "tree": {"sha": "c318a07a2c46527eff4ab68555944916e377f53a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c318a07a2c46527eff4ab68555944916e377f53a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9952632a2f6fc0d5c41976070ba39f57be5ede0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9952632a2f6fc0d5c41976070ba39f57be5ede0c", "html_url": "https://github.com/rust-lang/rust/commit/9952632a2f6fc0d5c41976070ba39f57be5ede0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9952632a2f6fc0d5c41976070ba39f57be5ede0c/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1", "html_url": "https://github.com/rust-lang/rust/commit/635ccfe01c0be19d9fb0a99facbd9e06290f0ab1"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "d6f4823890003b5f14de4d9ae91420ced654a5f5", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9952632a2f6fc0d5c41976070ba39f57be5ede0c/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9952632a2f6fc0d5c41976070ba39f57be5ede0c/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=9952632a2f6fc0d5c41976070ba39f57be5ede0c", "patch": "@@ -353,6 +353,26 @@ impl<T> Rc<T> {\n     /// to upgrade the weak reference before this function returns will result\n     /// in a `None` value. However, the weak reference may be cloned freely and\n     /// stored for use at a later time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_new_cyclic)]\n+    /// #![allow(dead_code)]\n+    /// use std::rc::{Rc, Weak};\n+    ///\n+    /// struct Gadget {\n+    ///     self_weak: Weak<Self>,\n+    ///     // ... more fields\n+    /// }\n+    /// impl Gadget {\n+    ///     pub fn new() -> Rc<Self> {\n+    ///         Rc::new_cyclic(|self_weak| {\n+    ///             Gadget { self_weak: self_weak.clone(), /* ... */ }\n+    ///         })\n+    ///     }\n+    /// }\n+    /// ```\n     #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n     pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n         // Construct the inner in the \"uninitialized\" state with a single"}]}