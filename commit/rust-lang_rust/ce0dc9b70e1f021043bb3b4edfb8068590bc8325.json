{"sha": "ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMGRjOWI3MGUxZjAyMTA0M2JiM2I0ZWRmYjgwNjg1OTBiYzgzMjU=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-02-28T06:31:41Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-02-28T06:31:41Z"}, "message": "Created floating point abs lint and test, but not yet run", "tree": {"sha": "f545f38b266cf0b2920a45b40a4359319638f121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f545f38b266cf0b2920a45b40a4359319638f121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "html_url": "https://github.com/rust-lang/rust/commit/ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce0dc9b70e1f021043bb3b4edfb8068590bc8325/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610bceae716e9c68f899a56823bdd356d4c4f37e", "url": "https://api.github.com/repos/rust-lang/rust/commits/610bceae716e9c68f899a56823bdd356d4c4f37e", "html_url": "https://github.com/rust-lang/rust/commit/610bceae716e9c68f899a56823bdd356d4c4f37e"}], "stats": {"total": 134, "additions": 131, "deletions": 3}, "files": [{"sha": "810c6e1412a9cc5a26e744a10036c853a56da132", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 72, "deletions": 3, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ce0dc9b70e1f021043bb3b4edfb8068590bc8325/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0dc9b70e1f021043bb3b4edfb8068590bc8325/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "patch": "@@ -2,19 +2,19 @@ use crate::consts::{\n     constant, Constant,\n     Constant::{F32, F64},\n };\n-use crate::utils::{span_lint_and_sugg, sugg};\n+use crate::utils::{higher, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, Lit, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n use sugg::{format_numeric_literal, Sugg};\n-use syntax::ast;\n+use syntax::ast::{self, FloatTy, LitFloatType, LitKind};\n \n declare_clippy_lint! {\n     /// **What it does:** Looks for floating-point expressions that\n@@ -72,6 +72,16 @@ declare_clippy_lint! {\n     /// let _ = a.log(E);\n     /// let _ = a.powf(2.0);\n     /// let _ = a * 2.0 + 4.0;\n+    /// let _ = if a < 0.0 {\n+    ///     -a\n+    /// } else {\n+    ///     a\n+    /// }\n+    /// let _ = if a < 0.0 {\n+    ///     a\n+    /// } else {\n+    ///     -a\n+    /// }\n     /// ```\n     ///\n     /// is better expressed as\n@@ -88,6 +98,8 @@ declare_clippy_lint! {\n     /// let _ = a.ln();\n     /// let _ = a.powi(2);\n     /// let _ = a.mul_add(2.0, 4.0);\n+    /// let _ = a.abs();\n+    /// let _ = -a.abs();\n     /// ```\n     pub SUBOPTIMAL_FLOPS,\n     nursery,\n@@ -359,6 +371,62 @@ fn check_mul_add(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     }\n }\n \n+/// Returns true iff expr is an expression which tests whether or not\n+/// test is positive or an expression which tests whether or not test\n+/// is nonnegative.\n+/// Used for check-custom-abs function below\n+fn is_testing_positive(cx: &LateContext<'_, '_>, expr: &Expr<'_>, test: &Expr<'_>) -> bool {\n+    if let ExprKind::Binary(Spanned { node: op, .. }, left, right) = expr.kind {\n+        match op {\n+            BinOpKind::Gt | BinOpKind::Ge => is_zero(right) && are_exprs_equal(cx, left, test),\n+            BinOpKind::Lt | BinOpKind::Le => is_zero(left) && are_exprs_equal(cx, right, test),\n+            _ => false,\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+fn are_exprs_equal(cx: &LateContext<'_, '_>, expr1: &Expr<'_>, expr2: &Expr<'_>) -> bool {\n+    SpanlessEq::new(cx).ignore_fn().eq_expr(expr1, expr2)\n+}\n+\n+/// Returns true iff expr is some zero literal\n+fn is_zero(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Lit(Lit { node: lit, .. }) = &expr.kind {\n+        match lit {\n+            LitKind::Int(0, _) => true,\n+            LitKind::Float(symb, LitFloatType::Unsuffixed)\n+            | LitKind::Float(symb, LitFloatType::Suffixed(FloatTy::F64)) => {\n+                symb.as_str().parse::<f64>().unwrap() == 0.0\n+            },\n+            LitKind::Float(symb, LitFloatType::Suffixed(FloatTy::F32)) => symb.as_str().parse::<f32>().unwrap() == 0.0,\n+            _ => false,\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+fn check_custom_abs(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+//    if let Some((cond, body, Some(else_body))) = higher::if_block(&expr) {\n+        // Check for the positive-first variant\n+//        if let ExprKind::Unary(UnOp::UnNeg, expr) = else_body.kind {\n+//            if are_exprs_equal(cx, expr, body) && is_testing_positive(cx, cond, body) {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SUBOPTIMAL_FLOPS,\n+                    expr.span,\n+                    \"This looks like you've implemented your own absolute value function\",\n+                    \"try\",\n+                    \"a.abs()\".to_string(),//format!(\"{:?}.abs()\", body),\n+                    Applicability::MachineApplicable,\n+                );\n+//            }\n+//        }\n+//    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args) = &expr.kind {\n@@ -375,6 +443,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n         } else {\n             check_expm1(cx, expr);\n             check_mul_add(cx, expr);\n+            check_custom_abs(cx, expr);\n         }\n     }\n }"}, {"sha": "2cb1db095413b176fa75e72209cffae7b5223ace", "filename": "tests/ui/floating_point_abs.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ce0dc9b70e1f021043bb3b4edfb8068590bc8325/tests%2Fui%2Ffloating_point_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce0dc9b70e1f021043bb3b4edfb8068590bc8325/tests%2Fui%2Ffloating_point_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_abs.rs?ref=ce0dc9b70e1f021043bb3b4edfb8068590bc8325", "patch": "@@ -0,0 +1,59 @@\n+#[warn(clippy::suboptimal_flops)]\n+\n+fn fake_abs1(num: f64) -> f64 {\n+    if num >= 0.0 {\n+        num\n+    } else {\n+        -num\n+    }\n+}\n+\n+fn fake_abs2(num: f64) -> f64 {\n+    if 0.0 < num {\n+        num\n+    } else {\n+        -num\n+    }\n+}\n+\n+fn fake_nabs1(num: f64) -> f64 {\n+    if num < 0.0 {\n+        num\n+    } else {\n+        -num\n+    }\n+}\n+\n+fn fake_nabs2(num: f64) -> f64 {\n+    if 0.0 >= num {\n+        num\n+    } else {\n+        -num\n+    }\n+}\n+\n+fn not_fake_abs1(num: f64) -> f64 {\n+    if num > 0.0 {\n+        num\n+    } else {\n+        -num - 1f64\n+    }\n+}\n+\n+fn not_fake_abs2(num: f64) -> f64 {\n+    if num > 0.0 {\n+        num + 1.0\n+    } else {\n+        -(num + 1.0)\n+    }\n+}\n+\n+fn not_fake_abs3(num1: f64, num2: f64) -> f64 {\n+    if num1 > 0.0 {\n+        num2\n+    } else {\n+        -num2\n+    }\n+}\n+\n+fn main() {}"}]}