{"sha": "acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZGQ0NDFjYzNjYzAzZTdlZDJlNmU0YjI2ZGI1NmI0Y2I1ZGI3ZjM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-08-26T21:32:09Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:36Z"}, "message": "remove separate no-drop code path since it resulted in more LLVM IR", "tree": {"sha": "cb4f0e39ff0a11cf51b736841d8a753ef9338977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4f0e39ff0a11cf51b736841d8a753ef9338977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3", "html_url": "https://github.com/rust-lang/rust/commit/acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435219dd82896e9576ef3f7fbc5c2cf17bae0016", "url": "https://api.github.com/repos/rust-lang/rust/commits/435219dd82896e9576ef3f7fbc5c2cf17bae0016", "html_url": "https://github.com/rust-lang/rust/commit/435219dd82896e9576ef3f7fbc5c2cf17bae0016"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "ecc103fc98c0f090e1a77af8c4f11559b219d7d0", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=acdd441cc3cc03e7ed2e6e4b26db56b4cb5db7f3", "patch": "@@ -2174,8 +2174,10 @@ impl<T> InPlaceDrop<T> {\n impl<T> Drop for InPlaceDrop<T> {\n     #[inline]\n     fn drop(&mut self) {\n-        unsafe {\n-            ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()));\n+        if mem::needs_drop::<T>() {\n+            unsafe {\n+                ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()));\n+            }\n         }\n     }\n }\n@@ -2206,26 +2208,14 @@ impl<T> SpecFrom<T, IntoIter<T>> for Vec<T> {\n     }\n }\n \n-fn write_in_place<T>(src_end: *const T) -> impl FnMut(*mut T, T) -> Result<*mut T, !> {\n-    move |mut dst, item| {\n-        unsafe {\n-            // the InPlaceIterable contract cannot be verified precisely here since\n-            // try_fold has an exclusive reference to the source pointer\n-            // all we can do is check if it's still in range\n-            debug_assert!(dst as *const _ <= src_end, \"InPlaceIterable contract violation\");\n-            ptr::write(dst, item);\n-            dst = dst.add(1);\n-        }\n-        Ok(dst)\n-    }\n-}\n-\n fn write_in_place_with_drop<T>(\n     src_end: *const T,\n ) -> impl FnMut(InPlaceDrop<T>, T) -> Result<InPlaceDrop<T>, !> {\n     move |mut sink, item| {\n         unsafe {\n-            // same caveat as above\n+            // the InPlaceIterable contract cannot be verified precisely here since\n+            // try_fold has an exclusive reference to the source pointer\n+            // all we can do is check if it's still in range\n             debug_assert!(sink.dst as *const _ <= src_end, \"InPlaceIterable contract violation\");\n             ptr::write(sink.dst, item);\n             sink.dst = sink.dst.add(1);\n@@ -2263,23 +2253,16 @@ where\n             (inner.buf.as_ptr(), inner.buf.as_ptr() as *mut T, inner.end as *const T, inner.cap)\n         };\n \n-        // use try-fold\n+        // use try-fold since\n         // - it vectorizes better for some iterator adapters\n         // - unlike most internal iteration methods methods it only takes a &mut self\n-        // - lets us thread the write pointer through its innards and get it back in the end\n-        let dst = if mem::needs_drop::<T>() {\n-            // special-case drop handling since it forces us to lug that extra field around which\n-            // can inhibit optimizations\n-            let sink = InPlaceDrop { inner: dst_buf, dst: dst_buf };\n-            let sink = iterator\n-                .try_fold::<_, _, Result<_, !>>(sink, write_in_place_with_drop(dst_end))\n-                .unwrap();\n-            // iteration succeeded, don't drop head\n-            let sink = mem::ManuallyDrop::new(sink);\n-            sink.dst\n-        } else {\n-            iterator.try_fold::<_, _, Result<_, !>>(dst_buf, write_in_place(dst_end)).unwrap()\n-        };\n+        // - it lets us thread the write pointer through its innards and get it back in the end\n+        let sink = InPlaceDrop { inner: dst_buf, dst: dst_buf };\n+        let sink = iterator\n+            .try_fold::<_, _, Result<_, !>>(sink, write_in_place_with_drop(dst_end))\n+            .unwrap();\n+        // iteration succeeded, don't drop head\n+        let dst = mem::ManuallyDrop::new(sink).dst;\n \n         let src = unsafe { iterator.as_inner().as_into_iter() };\n         // check if SourceIter and InPlaceIterable contracts were upheld."}]}