{"sha": "43e7434120a10f86713091667258f58b6c245e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTc0MzQxMjBhMTBmODY3MTMwOTE2NjcyNThmNThiNmMyNDVlMmQ=", "commit": {"author": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-02-24T16:58:08Z"}, "committer": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-02-24T16:58:08Z"}, "message": "Simplify exclude_should_panic flag.", "tree": {"sha": "05afcec80f946c61f548e50a8e0cec9ce7306d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05afcec80f946c61f548e50a8e0cec9ce7306d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e7434120a10f86713091667258f58b6c245e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e7434120a10f86713091667258f58b6c245e2d", "html_url": "https://github.com/rust-lang/rust/commit/43e7434120a10f86713091667258f58b6c245e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e7434120a10f86713091667258f58b6c245e2d/comments", "author": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d1f100988c12dabf5a34854e9db6875b999e357", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1f100988c12dabf5a34854e9db6875b999e357", "html_url": "https://github.com/rust-lang/rust/commit/5d1f100988c12dabf5a34854e9db6875b999e357"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "ea821a1d9392c9211d9cd569ca8ceb9e1a716412", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43e7434120a10f86713091667258f58b6c245e2d/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e7434120a10f86713091667258f58b6c245e2d/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=43e7434120a10f86713091667258f58b6c245e2d", "patch": "@@ -408,7 +408,7 @@ fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"\", \"include-ignored\", \"Run ignored and not ignored tests\")\n         .optflag(\"\", \"ignored\", \"Run only ignored tests\")\n-        .optflag(\"\", \"exclude-should-panic\", \"Sets #[should_panic] tests to imply #[ignore]\")\n+        .optflag(\"\", \"exclude-should-panic\", \"Excludes tests marked as should_panic\")\n         .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n         .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n         .optflag(\"\", \"list\", \"List all tests and benchmarks\")\n@@ -1376,12 +1376,9 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     // Skip tests that match any of the skip filters\n     filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n \n-    // Set #[should_panic] tests to ignore\n+    // Excludes #[should_panic] tests\n     if opts.exclude_should_panic {\n-        filtered\n-            .iter_mut()\n-            .filter(|test| test.desc.should_panic != ShouldPanic::No)\n-            .for_each(|test| test.desc.ignore = true);\n+        filtered.retain(|test| test.desc.should_panic == ShouldPanic::No);\n     }\n \n     // maybe unignore tests\n@@ -2009,23 +2006,20 @@ mod tests {\n         opts.exclude_should_panic = true;\n \n         let mut tests = one_ignored_one_unignored_test();\n-\n         tests.push(TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"3\"),\n                 ignore: false,\n-                should_panic: ShouldPanic::YesWithMessage(\"should panic with message\"),\n+                should_panic: ShouldPanic::Yes,\n                 allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         });\n \n         let filtered = filter_tests(&opts, tests);\n \n-        assert_eq!(filtered.len(), 3);\n-        assert!(filtered[0].desc.ignore);\n-        assert!(!filtered[1].desc.ignore);\n-        assert!(filtered[2].desc.ignore);\n+        assert_eq!(filtered.len(), 2);\n+        assert!(filtered.iter().all(|test| test.desc.should_panic == ShouldPanic::No));\n     }\n \n     #[test]"}]}