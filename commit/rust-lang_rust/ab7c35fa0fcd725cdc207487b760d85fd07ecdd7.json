{"sha": "ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiN2MzNWZhMGZjZDcyNWNkYzIwNzQ4N2I3NjBkODVmZDA3ZWNkZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-27T10:56:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-27T10:56:19Z"}, "message": "Auto merge of #33900 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 10 pull requests\n\n- Successful merges: #33753, #33815, #33829, #33858, #33865, #33866, #33870, #33874, #33891, #33898\n- Failed merges:", "tree": {"sha": "374bb44d05648bb9b73998a8dc0118c96d467786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374bb44d05648bb9b73998a8dc0118c96d467786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "html_url": "https://github.com/rust-lang/rust/commit/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d5dc7c9bcfd287b5c4e4ac3e2f0ab93bdaa0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d5dc7c9bcfd287b5c4e4ac3e2f0ab93bdaa0c9", "html_url": "https://github.com/rust-lang/rust/commit/36d5dc7c9bcfd287b5c4e4ac3e2f0ab93bdaa0c9"}, {"sha": "2c4fd94636f9f495474a943b716a9ab0ac1bec99", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4fd94636f9f495474a943b716a9ab0ac1bec99", "html_url": "https://github.com/rust-lang/rust/commit/2c4fd94636f9f495474a943b716a9ab0ac1bec99"}], "stats": {"total": 730, "additions": 615, "deletions": 115}, "files": [{"sha": "495d7e46baa6ebbf4239ccd42a96f7c1658ed94d", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -122,6 +122,8 @@ To see a full list of options, run `./configure --help`.\n \n Some common make targets are:\n \n+- `make tips` - show useful targets, variables and other tips for working with\n+   the build system.\n - `make rustc-stage1` - build up to (and including) the first stage. For most\n   cases we don't need to build the stage2 compiler, so we can save time by not\n   building it. The stage1 compiler is a fully functioning compiler and"}, {"sha": "bd1bf6e9cc37591b3269d2e1ad6308ab2fd54a48", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -966,7 +966,7 @@ impl<T: Clone> Vec<T> {\n         }\n     }\n \n-    /// Appends all elements in a slice to the `Vec`.\n+    /// Clones and appends all elements in a slice to the `Vec`.\n     ///\n     /// Iterates over the slice `other`, clones each element, and then appends\n     /// it to this `Vec`. The `other` vector is traversed in-order."}, {"sha": "e8cd36f3cd70bf13d751790bcbefdb2e9a16a937", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -46,14 +46,42 @@\n \n use marker::Sized;\n \n-/// A common trait for cloning an object.\n+/// A common trait for the ability to explicitly duplicate an object.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// Differs from `Copy` in that `Copy` is implicit and extremely inexpensive, while\n+/// `Clone` is always explicit and may or may not be expensive. In order to enforce\n+/// these characteristics, Rust does not allow you to reimplement `Copy`, but you\n+/// may reimplement `Clone` and run arbitrary code.\n+///\n+/// Since `Clone` is more general than `Copy`, you can automatically make anything\n+/// `Copy` be `Clone` as well.\n+///\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]` if all fields are `Clone`. The `derive`d\n+/// implementation of `clone()` calls `clone()` on each field.\n+///\n+/// ## How can I implement `Clone`?\n ///\n /// Types that are `Copy` should have a trivial implementation of `Clone`. More formally:\n /// if `T: Copy`, `x: T`, and `y: &T`, then `let x = y.clone();` is equivalent to `let x = *y;`.\n /// Manual implementations should be careful to uphold this invariant; however, unsafe code\n /// must not rely on it to ensure memory safety.\n+///\n+/// An example is an array holding more than 32 elements of a type that is `Clone`; the standard\n+/// library only implements `Clone` up until arrays of size 32. In this case, the implementation of\n+/// `Clone` cannot be `derive`d, but can be implemented as:\n+///\n+/// ```\n+/// #[derive(Copy)]\n+/// struct Stats {\n+///    frequencies: [i32; 100],\n+/// }\n+///\n+/// impl Clone for Stats {\n+///     fn clone(&self) -> Stats { *self }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Clone : Sized {\n     /// Returns a copy of the value."}, {"sha": "8764766b2ef8675a04ea69be0b5bc3209fa162c1", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 164, "deletions": 4, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -53,12 +53,43 @@ use option::Option::{self, Some};\n /// symmetrically and transitively: if `T: PartialEq<U>` and `U: PartialEq<V>`\n /// then `U: PartialEq<T>` and `T: PartialEq<V>`.\n ///\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, two\n+/// instances are equal if all fields are equal, and not equal if any fields\n+/// are not equal. When `derive`d on enums, each variant is equal to itself\n+/// and not equal to the other variants.\n+///\n+/// ## How can I implement `PartialEq`?\n+///\n /// PartialEq only requires the `eq` method to be implemented; `ne` is defined\n /// in terms of it by default. Any manual implementation of `ne` *must* respect\n /// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n /// only if `a != b`.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// An example implementation for a domain in which two books are considered\n+/// the same book if their ISBN matches, even if the formats differ:\n+///\n+/// ```\n+/// enum BookFormat { Paperback, Hardback, Ebook }\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+///\n+/// impl PartialEq for Book {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         self.isbn == other.isbn\n+///     }\n+/// }\n+///\n+/// let b1 = Book { isbn: 3, format: BookFormat::Paperback };\n+/// let b2 = Book { isbn: 3, format: BookFormat::Ebook };\n+/// let b3 = Book { isbn: 10, format: BookFormat::Paperback };\n+///\n+/// assert!(b1 == b2);\n+/// assert!(b1 != b3);\n+/// ```\n ///\n /// # Examples\n ///\n@@ -96,7 +127,32 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n /// This property cannot be checked by the compiler, and therefore `Eq` implies\n /// `PartialEq`, and has no extra methods.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]`. When `derive`d, because `Eq` has\n+/// no extra methods, it is only informing the compiler that this is an\n+/// equivalence relation rather than a partial equivalence relation. Note that\n+/// the `derive` strategy requires all fields are `PartialEq`, which isn't\n+/// always desired.\n+///\n+/// ## How can I implement `Eq`?\n+///\n+/// If you cannot use the `derive` strategy, specify that your type implements\n+/// `Eq`, which has no methods:\n+///\n+/// ```\n+/// enum BookFormat { Paperback, Hardback, Ebook }\n+/// struct Book {\n+///     isbn: i32,\n+///     format: BookFormat,\n+/// }\n+/// impl PartialEq for Book {\n+///     fn eq(&self, other: &Book) -> bool {\n+///         self.isbn == other.isbn\n+///     }\n+/// }\n+/// impl Eq for Book {}\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // FIXME #13101: this method is used solely by #[deriving] to\n@@ -190,8 +246,49 @@ impl Ordering {\n /// - total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true; and\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n+/// ## Derivable\n+///\n /// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n /// ordering based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// ## How can I implement `Ord`?\n+///\n+/// `Ord` requires that the type also be `PartialOrd` and `Eq` (which requires `PartialEq`).\n+///\n+/// Then you must define an implementation for `cmp()`. You may find it useful to use\n+/// `cmp()` on your type's fields.\n+///\n+/// Here's an example where you want to sort people by height only, disregarding `id`\n+/// and `name`:\n+///\n+/// ```\n+/// use std::cmp::Ordering;\n+///\n+/// #[derive(Eq)]\n+/// struct Person {\n+///     id: u32,\n+///     name: String,\n+///     height: u32,\n+/// }\n+///\n+/// impl Ord for Person {\n+///     fn cmp(&self, other: &Person) -> Ordering {\n+///         self.height.cmp(&other.height)\n+///     }\n+/// }\n+///\n+/// impl PartialOrd for Person {\n+///     fn partial_cmp(&self, other: &Person) -> Option<Ordering> {\n+///         Some(self.cmp(other))\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Person {\n+///     fn eq(&self, other: &Person) -> bool {\n+///         self.height == other.height\n+///     }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -242,15 +339,78 @@ impl PartialOrd for Ordering {\n /// transitively: if `T: PartialOrd<U>` and `U: PartialOrd<V>` then `U: PartialOrd<T>` and `T:\n /// PartialOrd<V>`.\n ///\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n+/// ordering based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// ## How can I implement `Ord`?\n+///\n /// PartialOrd only requires implementation of the `partial_cmp` method, with the others generated\n /// from default implementations.\n ///\n /// However it remains possible to implement the others separately for types which do not have a\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce an ordering\n-/// based on the top-to-bottom declaration order of the struct's members.\n+/// `PartialOrd` requires your type to be `PartialEq`.\n+///\n+/// If your type is `Ord`, you can implement `partial_cmp()` by using `cmp()`:\n+///\n+/// ```\n+/// use std::cmp::Ordering;\n+///\n+/// #[derive(Eq)]\n+/// struct Person {\n+///     id: u32,\n+///     name: String,\n+///     height: u32,\n+/// }\n+///\n+/// impl PartialOrd for Person {\n+///     fn partial_cmp(&self, other: &Person) -> Option<Ordering> {\n+///         Some(self.cmp(other))\n+///     }\n+/// }\n+///\n+/// impl Ord for Person {\n+///     fn cmp(&self, other: &Person) -> Ordering {\n+///         self.height.cmp(&other.height)\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Person {\n+///     fn eq(&self, other: &Person) -> bool {\n+///         self.height == other.height\n+///     }\n+/// }\n+/// ```\n+///\n+/// You may also find it useful to use `partial_cmp()` on your type`s fields. Here\n+/// is an example of `Person` types who have a floating-point `height` field that\n+/// is the only field to be used for sorting:\n+///\n+/// ```\n+/// use std::cmp::Ordering;\n+///\n+/// struct Person {\n+///     id: u32,\n+///     name: String,\n+///     height: f64,\n+/// }\n+///\n+/// impl PartialOrd for Person {\n+///     fn partial_cmp(&self, other: &Person) -> Option<Ordering> {\n+///         self.height.partial_cmp(&other.height)\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Person {\n+///     fn eq(&self, other: &Person) -> bool {\n+///         self.height == other.height\n+///     }\n+/// }\n+/// ```\n ///\n /// # Examples\n ///"}, {"sha": "485ddae07fbff93b4723c3b9ffe8c45f93028e6c", "filename": "src/libcore/default.rs", "status": "modified", "additions": 66, "deletions": 72, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -9,85 +9,79 @@\n // except according to those terms.\n \n //! The `Default` trait for types which may have meaningful default values.\n-//!\n-//! Sometimes, you want to fall back to some kind of default value, and\n-//! don't particularly care what it is. This comes up often with `struct`s\n-//! that define a set of options:\n-//!\n-//! ```\n-//! # #[allow(dead_code)]\n-//! struct SomeOptions {\n-//!     foo: i32,\n-//!     bar: f32,\n-//! }\n-//! ```\n-//!\n-//! How can we define some default values? You can use `Default`:\n-//!\n-//! ```\n-//! # #[allow(dead_code)]\n-//! #[derive(Default)]\n-//! struct SomeOptions {\n-//!     foo: i32,\n-//!     bar: f32,\n-//! }\n-//!\n-//!\n-//! fn main() {\n-//!     let options: SomeOptions = Default::default();\n-//! }\n-//! ```\n-//!\n-//! Now, you get all of the default values. Rust implements `Default` for various primitives types.\n-//! If you have your own type, you need to implement `Default` yourself:\n-//!\n-//! ```\n-//! # #![allow(dead_code)]\n-//! enum Kind {\n-//!     A,\n-//!     B,\n-//!     C,\n-//! }\n-//!\n-//! impl Default for Kind {\n-//!     fn default() -> Kind { Kind::A }\n-//! }\n-//!\n-//! #[derive(Default)]\n-//! struct SomeOptions {\n-//!     foo: i32,\n-//!     bar: f32,\n-//!     baz: Kind,\n-//! }\n-//!\n-//!\n-//! fn main() {\n-//!     let options: SomeOptions = Default::default();\n-//! }\n-//! ```\n-//!\n-//! If you want to override a particular option, but still retain the other defaults:\n-//!\n-//! ```\n-//! # #[allow(dead_code)]\n-//! # #[derive(Default)]\n-//! # struct SomeOptions {\n-//! #     foo: i32,\n-//! #     bar: f32,\n-//! # }\n-//! fn main() {\n-//!     let options = SomeOptions { foo: 42, ..Default::default() };\n-//! }\n-//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use marker::Sized;\n \n /// A trait for giving a type a useful default value.\n ///\n-/// A struct can derive default implementations of `Default` for basic types using\n-/// `#[derive(Default)]`.\n+/// Sometimes, you want to fall back to some kind of default value, and\n+/// don't particularly care what it is. This comes up often with `struct`s\n+/// that define a set of options:\n+///\n+/// ```\n+/// # #[allow(dead_code)]\n+/// struct SomeOptions {\n+///     foo: i32,\n+///     bar: f32,\n+/// }\n+/// ```\n+///\n+/// How can we define some default values? You can use `Default`:\n+///\n+/// ```\n+/// # #[allow(dead_code)]\n+/// #[derive(Default)]\n+/// struct SomeOptions {\n+///     foo: i32,\n+///     bar: f32,\n+/// }\n+///\n+///\n+/// fn main() {\n+///     let options: SomeOptions = Default::default();\n+/// }\n+/// ```\n+///\n+/// Now, you get all of the default values. Rust implements `Default` for various primitives types.\n+///\n+/// If you want to override a particular option, but still retain the other defaults:\n+///\n+/// ```\n+/// # #[allow(dead_code)]\n+/// # #[derive(Default)]\n+/// # struct SomeOptions {\n+/// #     foo: i32,\n+/// #     bar: f32,\n+/// # }\n+/// fn main() {\n+///     let options = SomeOptions { foo: 42, ..Default::default() };\n+/// }\n+/// ```\n+///\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]` if all of the type's fields implement\n+/// `Default`. When `derive`d, it will use the default value for each field's type.\n+///\n+/// ## How can I implement `Default`?\n+///\n+/// Provide an implementation for the `default()` method that returns the value of\n+/// your type that should be the default:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// enum Kind {\n+///     A,\n+///     B,\n+///     C,\n+/// }\n+///\n+/// impl Default for Kind {\n+///     fn default() -> Kind { Kind::A }\n+/// }\n+/// ```\n ///\n /// # Examples\n ///"}, {"sha": "6579e5dab543245ccd56934ec787974880d00adf", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -318,7 +318,11 @@ impl<'a> Display for Arguments<'a> {\n ///\n /// [module]: ../../std/fmt/index.html\n ///\n-/// This trait can be used with `#[derive]`.\n+/// This trait can be used with `#[derive]` if all fields implement `Debug`. When\n+/// `derive`d for structs, it will use the name of the `struct`, then `{`, then a\n+/// comma-separated list of each field's name and `Debug` value, then `}`. For\n+/// `enum`s, it will use the name of the variant and, if applicable, `(`, then the\n+/// `Debug` values of the fields, then `)`.\n ///\n /// # Examples\n ///"}, {"sha": "051eb974895ce7a59031e36c1edd33bc677050eb", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -38,7 +38,7 @@\n //! ```\n //!\n //! If you need more control over how a value is hashed, you need to implement\n-//! the trait `Hash`:\n+//! the `Hash` trait:\n //!\n //! ```rust\n //! use std::hash::{Hash, Hasher, SipHasher};\n@@ -97,7 +97,33 @@ mod sip;\n /// In other words, if two keys are equal, their hashes should also be equal.\n /// `HashMap` and `HashSet` both rely on this behavior.\n ///\n-/// This trait can be used with `#[derive]`.\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]` if all fields implement `Hash`.\n+/// When `derive`d, the resulting hash will be the combination of the values\n+/// from calling `.hash()` on each field.\n+///\n+/// ## How can I implement `Hash`?\n+///\n+/// If you need more control over how a value is hashed, you need to implement\n+/// the `Hash` trait:\n+///\n+/// ```\n+/// use std::hash::{Hash, Hasher};\n+///\n+/// struct Person {\n+///     id: u32,\n+///     name: String,\n+///     phone: u64,\n+/// }\n+///\n+/// impl Hash for Person {\n+///     fn hash<H: Hasher>(&self, state: &mut H) {\n+///         self.id.hash(state);\n+///         self.phone.hash(state);\n+///     }\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "c18d230be31af9db758feb8e6f6de9f439d80ba3", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -136,6 +136,26 @@ pub trait Unsize<T: ?Sized> {\n /// the trait `Copy` may not be implemented for this type; field `points` does not implement `Copy`\n /// ```\n ///\n+/// ## When can my type _not_ be `Copy`?\n+///\n+/// Some types can't be copied safely. For example, copying `&mut T` would create an aliased\n+/// mutable reference, and copying `String` would result in two attempts to free the same buffer.\n+///\n+/// Generalizing the latter case, any type implementing `Drop` can't be `Copy`, because it's\n+/// managing some resource besides its own `size_of::<T>()` bytes.\n+///\n+/// ## When should my type be `Copy`?\n+///\n+/// Generally speaking, if your type _can_ implement `Copy`, it should. There's one important thing\n+/// to consider though: if you think your type may _not_ be able to implement `Copy` in the future,\n+/// then it might be prudent to not implement `Copy`. This is because removing `Copy` is a breaking\n+/// change: that second example would fail to compile if we made `Foo` non-`Copy`.\n+///\n+/// ## Derivable\n+///\n+/// This trait can be used with `#[derive]` if all of its components implement `Copy` and the type\n+/// implements `Clone`. The implementation will copy the bytes of each field using `memcpy`.\n+///\n /// ## How can I implement `Copy`?\n ///\n /// There are two ways to implement `Copy` on your type:\n@@ -155,25 +175,6 @@ pub trait Unsize<T: ?Sized> {\n ///\n /// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n /// bound on type parameters, which isn't always desired.\n-///\n-/// ## When can my type _not_ be `Copy`?\n-///\n-/// Some types can't be copied safely. For example, copying `&mut T` would create an aliased\n-/// mutable reference, and copying `String` would result in two attempts to free the same buffer.\n-///\n-/// Generalizing the latter case, any type implementing `Drop` can't be `Copy`, because it's\n-/// managing some resource besides its own `size_of::<T>()` bytes.\n-///\n-/// ## When should my type be `Copy`?\n-///\n-/// Generally speaking, if your type _can_ implement `Copy`, it should. There's one important thing\n-/// to consider though: if you think your type may _not_ be able to implement `Copy` in the future,\n-/// then it might be prudent to not implement `Copy`. This is because removing `Copy` is a breaking\n-/// change: that second example would fail to compile if we made `Foo` non-`Copy`.\n-///\n-/// # Derivable\n-///\n-/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {"}, {"sha": "517cd016e8a35ab7a9d7ad2cfe7ba4c61ceb9906", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -179,7 +179,7 @@ use std::io::prelude::*;\n use std::mem;\n use std::env;\n use std::slice;\n-use std::sync::{Once, Mutex, ONCE_INIT};\n+use std::sync::{Mutex, ONCE_INIT, Once};\n \n use directive::LOG_LEVEL_NAMES;\n \n@@ -290,9 +290,7 @@ pub fn log(level: u32, loc: &'static LogLocation, args: fmt::Arguments) {\n     // frob the slot while we're doing the logging. This will destroy any logger\n     // set during logging.\n     let logger = LOCAL_LOGGER.with(|s| s.borrow_mut().take());\n-    let mut logger = logger.unwrap_or_else(|| {\n-        Box::new(DefaultLogger { handle: io::stderr() })\n-    });\n+    let mut logger = logger.unwrap_or_else(|| Box::new(DefaultLogger { handle: io::stderr() }));\n     logger.log(&LogRecord {\n         level: LogLevel(level),\n         args: args,"}, {"sha": "7598751c8fe18c0c50d83e891d5ad6f13621510b", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -1168,12 +1168,32 @@ discriminant values so that they fit within the existing type.\n \"##,\n \n E0084: r##\"\n+An unsupported representation was attempted on a zero-variant enum.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#[repr(i32)]\n+enum NightWatch {} // error: unsupported representation for zero-variant enum\n+```\n+\n It is impossible to define an integer type to be used to represent zero-variant\n enum values because there are no zero-variant enum values. There is no way to\n-construct an instance of the following type using only safe code:\n+construct an instance of the following type using only safe code. So you have\n+two solutions. Either you add variants in your enum:\n+\n+```\n+#[repr(i32)]\n+enum NightWatch {\n+    JohnSnow,\n+    Commander,\n+}\n+```\n+\n+or you remove the integer represention of your enum:\n \n ```\n-enum Empty {}\n+enum NightWatch {}\n ```\n \"##,\n "}, {"sha": "aa08cee13ef72dfe1c17ad9ec675932407023fb5", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -30,6 +30,10 @@ h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.t\n     background-color: white;\n }\n \n+div.stability > em > code {\n+    background-color: initial;\n+}\n+\n .docblock code {\n     background-color: #F5F5F5;\n }"}, {"sha": "ba485f819f880c70eefd73c7902fa7cbe6268256", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -251,7 +251,7 @@ impl PartialOrd for Ipv4Addr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for Ipv4Addr {\n     fn cmp(&self, other: &Ipv4Addr) -> Ordering {\n-        self.octets().cmp(&other.octets())\n+        ntoh(self.inner.s_addr).cmp(&ntoh(other.inner.s_addr))\n     }\n }\n "}, {"sha": "22cc20b8f8c44cc5f26cc36fd4824935a3b3f3a5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -2683,7 +2683,10 @@ impl<'a> Parser<'a> {\n                     return Ok(TokenTree::Token(sp, SpecialVarNt(SpecialMacroVar::CrateMacroVar)));\n                 } else {\n                     sp = mk_sp(sp.lo, self.span.hi);\n-                    self.parse_ident()?\n+                    self.parse_ident().unwrap_or_else(|mut e| {\n+                        e.emit();\n+                        keywords::Invalid.ident()\n+                    })\n                 }\n             }\n             token::SubstNt(name) => {\n@@ -2788,14 +2791,14 @@ impl<'a> Parser<'a> {\n                 let span = Span { hi: close_span.hi, ..pre_span };\n \n                 match self.token {\n-                    // Correct delmiter.\n+                    // Correct delimiter.\n                     token::CloseDelim(d) if d == delim => {\n                         self.open_braces.pop().unwrap();\n \n                         // Parse the close delimiter.\n                         self.bump();\n                     }\n-                    // Incorect delimiter.\n+                    // Incorrect delimiter.\n                     token::CloseDelim(other) => {\n                         let token_str = self.this_token_to_string();\n                         let mut err = self.diagnostic().struct_span_err(self.span,\n@@ -2810,9 +2813,9 @@ impl<'a> Parser<'a> {\n \n                         self.open_braces.pop().unwrap();\n \n-                        // If the incorrect delimter matches an earlier opening\n+                        // If the incorrect delimiter matches an earlier opening\n                         // delimiter, then don't consume it (it can be used to\n-                        // close the earlier one)Otherwise, consume it.\n+                        // close the earlier one). Otherwise, consume it.\n                         // E.g., we try to recover from:\n                         // fn foo() {\n                         //     bar(baz(\n@@ -2826,7 +2829,7 @@ impl<'a> Parser<'a> {\n                         // and an error emitted then. Thus we don't pop from\n                         // self.open_braces here.\n                     },\n-                    _ => unreachable!(),\n+                    _ => {}\n                 }\n \n                 Ok(TokenTree::Delimited(span, Rc::new(Delimited {\n@@ -2840,7 +2843,7 @@ impl<'a> Parser<'a> {\n                 // invariants: the current token is not a left-delimiter,\n                 // not an EOF, and not the desired right-delimiter (if\n                 // it were, parse_seq_to_before_end would have prevented\n-                // reaching this point.\n+                // reaching this point).\n                 maybe_whole!(deref self, NtTT);\n                 match self.token {\n                     token::CloseDelim(_) => {"}, {"sha": "c579101325f5de2d49fef02dd2510f4a2b3a2d06", "filename": "src/test/compile-fail/E0084.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0084.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(i32)]\n+enum Foo {} //~ ERROR E0084\n+\n+fn main() {\n+}"}, {"sha": "ec559fc8389d25dd99d8865a8eb8ff12f9f49b79", "filename": "src/test/compile-fail/E0087.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0087.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0087.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0087.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<T>() {}\n+\n+fn main() {\n+    foo::<f64, bool>(); //~ ERROR E0087\n+}"}, {"sha": "0b235aa240c3cbd0f178188a9f4cf6043d3507ba", "filename": "src/test/compile-fail/E0088.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0088.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f() {}\n+\n+fn main() {\n+    f::<'static>(); //~ ERROR E0088\n+}"}, {"sha": "3b52f76bf09cc11a47aa42f6a80efba845c37c33", "filename": "src/test/compile-fail/E0089.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0089.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<T, U>() {}\n+\n+fn main() {\n+    foo::<f64>(); //~ ERROR E0089\n+}"}, {"sha": "da988dbf819ac8c681a28d3bd4341c112c8e7d34", "filename": "src/test/compile-fail/E0091.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0091.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Foo<T> = u32; //~ ERROR E0091\n+type Foo2<A, B> = Box<A>; //~ ERROR E0091\n+\n+fn main() {\n+}"}, {"sha": "b08164ac06d4235c0e95907f583406db6118efe9", "filename": "src/test/compile-fail/E0092.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0092.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+extern \"rust-intrinsic\" {\n+    fn atomic_foo(); //~ ERROR E0092\n+}\n+\n+fn main() {\n+}"}, {"sha": "9b23f6d984ee1c9207873fd30f0197f52869f37f", "filename": "src/test/compile-fail/E0093.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0093.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+extern \"rust-intrinsic\" {\n+    fn foo(); //~ ERROR E0093\n+}\n+\n+fn main() {\n+}"}, {"sha": "3a31874b244229c272515034a16247a2da7efcdf", "filename": "src/test/compile-fail/E0094.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0094.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(intrinsics)]\n+extern \"rust-intrinsic\" {\n+    fn size_of<T, U>() -> usize; //~ ERROR E0094\n+}\n+\n+fn main() {\n+}"}, {"sha": "7651626d44f859f44e9b5fdf4320a733c10c9487", "filename": "src/test/compile-fail/E0101.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0101.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = |_| {}; //~ ERROR E0101\n+}"}, {"sha": "c4ddbab3e861a2034ad8f36e1a047c59195db179", "filename": "src/test/compile-fail/E0102.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0102.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = []; //~ ERROR E0102\n+}"}, {"sha": "f1cd530863d341e4e291856688ed9cb7652d032d", "filename": "src/test/compile-fail/E0106.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0106.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: &bool, //~ ERROR E0106\n+}\n+enum Bar {\n+    A(u8),\n+    B(&bool), //~ ERROR E0106\n+}\n+type MyStr = &str; //~ ERROR E0106\n+\n+fn main() {\n+}"}, {"sha": "d27b70865bbfbccd7c925e6c03f1004f7de707bf", "filename": "src/test/compile-fail/E0107.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0107.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a>(&'a str);\n+\n+enum Bar {\n+    A,\n+    B,\n+    C,\n+}\n+\n+struct Baz<'a> {\n+    foo: Foo, //~ ERROR E0107\n+    bar: Bar<'a>, //~ ERROR E0107\n+}\n+\n+fn main() {\n+}"}, {"sha": "9fc478422504bbe750c2f3b230f022bdb56c61cc", "filename": "src/test/compile-fail/E0109.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0109.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type X = u32<i32>; //~ ERROR E0109\n+\n+fn main() {\n+}"}, {"sha": "fd169f4acc5eb0250ad5fae39283d51883764ee0", "filename": "src/test/compile-fail/E0110.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0110.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type X = u32<'static>; //~ ERROR E0110\n+\n+fn main() {\n+}"}, {"sha": "4020aa9475aaa3273ac0170565a91ff19d4c233e", "filename": "src/test/compile-fail/E0116.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2FE0116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0116.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+impl Vec<u8> {} //~ ERROR E0116\n+\n+fn main() {\n+}"}, {"sha": "1020a5ba8a42e4a4f6862ea5ccae50b0f1724bea", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // ignore-android\n+// ignore-arm\n+// ignore-aarch64\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "130278d778ab0a6415b78c12c42bb2b769589d62", "filename": "src/test/parse-fail/issue-33569.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fparse-fail%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab7c35fa0fcd725cdc207487b760d85fd07ecdd7/src%2Ftest%2Fparse-fail%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-33569.rs?ref=ab7c35fa0fcd725cdc207487b760d85fd07ecdd7", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z no-analysis\n+\n+macro_rules! foo {\n+    { $+ } => { //~ ERROR expected identifier, found `+`\n+        $(x)(y) //~ ERROR expected `*` or `+`\n+                //~^ ERROR no rules expected the token `y`\n+    }\n+}"}]}