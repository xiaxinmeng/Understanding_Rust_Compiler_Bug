{"sha": "af17fc969742a36cee5199860789ed0b14123240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMTdmYzk2OTc0MmEzNmNlZTUxOTk4NjA3ODllZDBiMTQxMjMyNDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T16:49:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T16:50:17Z"}, "message": "reorganize completion", "tree": {"sha": "1b0a238426ea3ab9d4b1a529a197cd959166e321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0a238426ea3ab9d4b1a529a197cd959166e321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af17fc969742a36cee5199860789ed0b14123240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af17fc969742a36cee5199860789ed0b14123240", "html_url": "https://github.com/rust-lang/rust/commit/af17fc969742a36cee5199860789ed0b14123240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af17fc969742a36cee5199860789ed0b14123240/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22949dab267bf7b8b3da73fe7745a12daca21a52", "url": "https://api.github.com/repos/rust-lang/rust/commits/22949dab267bf7b8b3da73fe7745a12daca21a52", "html_url": "https://github.com/rust-lang/rust/commit/22949dab267bf7b8b3da73fe7745a12daca21a52"}], "stats": {"total": 163, "additions": 75, "deletions": 88}, "files": [{"sha": "27566a8a1489f5c9ebada502c575928a71aff8b1", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 73, "deletions": 75, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/af17fc969742a36cee5199860789ed0b14123240/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af17fc969742a36cee5199860789ed0b14123240/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=af17fc969742a36cee5199860789ed0b14123240", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     ast::{self, AstChildren, LoopBodyOwner, ModuleItemOwner},\n     AstNode, AtomEdit, SourceFileNode,\n     SyntaxKind::*,\n-    SyntaxNodeRef, TextUnit,\n+    SyntaxNodeRef,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -14,7 +14,7 @@ use crate::{\n     descriptors::module::{ModuleId, ModuleScope, ModuleTree, ModuleSource},\n     descriptors::DescriptorDatabase,\n     input::FilesDatabase,\n-    Cancelable, FilePosition,\n+    Cancelable, FilePosition, FileId,\n };\n \n #[derive(Debug)]\n@@ -27,47 +27,87 @@ pub struct CompletionItem {\n     pub snippet: Option<String>,\n }\n \n-pub(crate) fn resolve_based_completion(\n+pub(crate) fn completions(\n     db: &db::RootDatabase,\n     position: FilePosition,\n ) -> Cancelable<Option<Vec<CompletionItem>>> {\n-    let source_root_id = db.file_source_root(position.file_id);\n-    let file = db.file_syntax(position.file_id);\n-    let module_tree = db.module_tree(source_root_id)?;\n-    let module_id =\n-        match module_tree.any_module_for_source(ModuleSource::SourceFile(position.file_id)) {\n-            None => return Ok(None),\n-            Some(it) => it,\n-        };\n+    let original_file = db.file_syntax(position.file_id);\n+    // Insert a fake ident to get a valid parse tree\n     let file = {\n         let edit = AtomEdit::insert(position.offset, \"intellijRulezz\".to_string());\n-        file.reparse(&edit)\n+        original_file.reparse(&edit)\n     };\n-    let target_module_id = match find_target_module(&module_tree, module_id, &file, position.offset)\n-    {\n-        None => return Ok(None),\n+\n+    let mut res = Vec::new();\n+    let mut has_completions = false;\n+    // First, let's try to complete a reference to some declaration.\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n+        has_completions = true;\n+        // completion from lexical scope\n+        complete_name_ref(&file, name_ref, &mut res);\n+        // special case, `trait T { fn foo(i_am_a_name_ref) {} }`\n+        if is_node::<ast::Param>(name_ref.syntax()) {\n+            param_completions(name_ref.syntax(), &mut res);\n+        }\n+        // snippet completions\n+        {\n+            let name_range = name_ref.syntax().range();\n+            let top_node = name_ref\n+                .syntax()\n+                .ancestors()\n+                .take_while(|it| it.range() == name_range)\n+                .last()\n+                .unwrap();\n+            match top_node.parent().map(|it| it.kind()) {\n+                Some(SOURCE_FILE) | Some(ITEM_LIST) => complete_mod_item_snippets(&mut res),\n+                _ => (),\n+            }\n+        }\n+        complete_path(db, position.file_id, name_ref, &mut res)?;\n+    }\n+\n+    // Otherwise, if this is a declaration, use heuristics to suggest a name.\n+    if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n+        if is_node::<ast::Param>(name.syntax()) {\n+            has_completions = true;\n+            param_completions(name.syntax(), &mut res);\n+        }\n+    }\n+    let res = if has_completions { Some(res) } else { None };\n+    Ok(res)\n+}\n+\n+fn complete_path(\n+    db: &db::RootDatabase,\n+    file_id: FileId,\n+    name_ref: ast::NameRef,\n+    acc: &mut Vec<CompletionItem>,\n+) -> Cancelable<()> {\n+    let source_root_id = db.file_source_root(file_id);\n+    let module_tree = db.module_tree(source_root_id)?;\n+    let module_id = match module_tree.any_module_for_source(ModuleSource::SourceFile(file_id)) {\n+        None => return Ok(()),\n+        Some(it) => it,\n+    };\n+    let target_module_id = match find_target_module(&module_tree, module_id, name_ref) {\n+        None => return Ok(()),\n         Some(it) => it,\n     };\n     let module_scope = db.module_scope(source_root_id, target_module_id)?;\n-    let res: Vec<_> = module_scope\n-        .entries()\n-        .iter()\n-        .map(|entry| CompletionItem {\n-            label: entry.name().to_string(),\n-            lookup: None,\n-            snippet: None,\n-        })\n-        .collect();\n-    Ok(Some(res))\n+    let completions = module_scope.entries().iter().map(|entry| CompletionItem {\n+        label: entry.name().to_string(),\n+        lookup: None,\n+        snippet: None,\n+    });\n+    acc.extend(completions);\n+    Ok(())\n }\n \n-pub(crate) fn find_target_module(\n+fn find_target_module(\n     module_tree: &ModuleTree,\n     module_id: ModuleId,\n-    file: &SourceFileNode,\n-    offset: TextUnit,\n+    name_ref: ast::NameRef,\n ) -> Option<ModuleId> {\n-    let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), offset)?;\n     let mut crate_path = crate_path(name_ref)?;\n \n     crate_path.pop();\n@@ -98,50 +138,6 @@ fn crate_path(name_ref: ast::NameRef) -> Option<Vec<ast::NameRef>> {\n     Some(res)\n }\n \n-pub(crate) fn scope_completion(\n-    db: &db::RootDatabase,\n-    position: FilePosition,\n-) -> Option<Vec<CompletionItem>> {\n-    let original_file = db.file_syntax(position.file_id);\n-    // Insert a fake ident to get a valid parse tree\n-    let file = {\n-        let edit = AtomEdit::insert(position.offset, \"intellijRulezz\".to_string());\n-        original_file.reparse(&edit)\n-    };\n-    let mut has_completions = false;\n-    let mut res = Vec::new();\n-    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n-        has_completions = true;\n-        complete_name_ref(&file, name_ref, &mut res);\n-        // special case, `trait T { fn foo(i_am_a_name_ref) {} }`\n-        if is_node::<ast::Param>(name_ref.syntax()) {\n-            param_completions(name_ref.syntax(), &mut res);\n-        }\n-        let name_range = name_ref.syntax().range();\n-        let top_node = name_ref\n-            .syntax()\n-            .ancestors()\n-            .take_while(|it| it.range() == name_range)\n-            .last()\n-            .unwrap();\n-        match top_node.parent().map(|it| it.kind()) {\n-            Some(SOURCE_FILE) | Some(ITEM_LIST) => complete_mod_item_snippets(&mut res),\n-            _ => (),\n-        }\n-    }\n-    if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        if is_node::<ast::Param>(name.syntax()) {\n-            has_completions = true;\n-            param_completions(name.syntax(), &mut res);\n-        }\n-    }\n-    if has_completions {\n-        Some(res)\n-    } else {\n-        None\n-    }\n-}\n-\n fn complete_module_items(\n     file: &SourceFileNode,\n     items: AstChildren<ast::ModuleItem>,\n@@ -383,7 +379,8 @@ mod tests {\n \n     fn check_scope_completion(code: &str, expected_completions: &str) {\n         let (analysis, position) = single_file_with_position(code);\n-        let completions = scope_completion(&analysis.imp.db, position)\n+        let completions = completions(&analysis.imp.db, position)\n+            .unwrap()\n             .unwrap()\n             .into_iter()\n             .filter(|c| c.snippet.is_none())\n@@ -393,7 +390,8 @@ mod tests {\n \n     fn check_snippet_completion(code: &str, expected_completions: &str) {\n         let (analysis, position) = single_file_with_position(code);\n-        let completions = scope_completion(&analysis.imp.db, position)\n+        let completions = completions(&analysis.imp.db, position)\n+            .unwrap()\n             .unwrap()\n             .into_iter()\n             .filter(|c| c.snippet.is_some())"}, {"sha": "74c248a96c71c1a626f56b879aaa510fc6b122d7", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af17fc969742a36cee5199860789ed0b14123240/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af17fc969742a36cee5199860789ed0b14123240/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=af17fc969742a36cee5199860789ed0b14123240", "patch": "@@ -17,7 +17,7 @@ use rustc_hash::FxHashSet;\n use salsa::{Database, ParallelDatabase};\n \n use crate::{\n-    completion::{resolve_based_completion, scope_completion, CompletionItem},\n+    completion::{completions, CompletionItem},\n     db::{self, FileSyntaxQuery, SyntaxDatabase},\n     descriptors::{\n         function::{FnDescriptor, FnId},\n@@ -267,18 +267,7 @@ impl AnalysisImpl {\n         self.db.crate_graph().crate_roots[&crate_id]\n     }\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        let mut res = Vec::new();\n-        let mut has_completions = false;\n-        if let Some(scope_based) = scope_completion(&self.db, position) {\n-            res.extend(scope_based);\n-            has_completions = true;\n-        }\n-        if let Some(scope_based) = resolve_based_completion(&self.db, position)? {\n-            res.extend(scope_based);\n-            has_completions = true;\n-        }\n-        let res = if has_completions { Some(res) } else { None };\n-        Ok(res)\n+        completions(&self.db, position)\n     }\n     pub fn approximately_resolve_symbol(\n         &self,"}]}