{"sha": "f5203d1073a774e01ae0c57ebb561648a8fd9910", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MjAzZDEwNzNhNzc0ZTAxYWUwYzU3ZWJiNTYxNjQ4YThmZDk5MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T18:04:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T18:04:51Z"}, "message": "Auto merge of #49933 - oli-obk:miri_rustup, r=eddyb\n\nFix the miri tool\n\nr? @eddyb\n\ncc @bjorn3\n\nfixes #49777", "tree": {"sha": "accb47a2343d06b9ba84227196e175784d1861c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accb47a2343d06b9ba84227196e175784d1861c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5203d1073a774e01ae0c57ebb561648a8fd9910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5203d1073a774e01ae0c57ebb561648a8fd9910", "html_url": "https://github.com/rust-lang/rust/commit/f5203d1073a774e01ae0c57ebb561648a8fd9910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5203d1073a774e01ae0c57ebb561648a8fd9910/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e251ba37231f3471a20a13f503b191ed25a499", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e251ba37231f3471a20a13f503b191ed25a499", "html_url": "https://github.com/rust-lang/rust/commit/38e251ba37231f3471a20a13f503b191ed25a499"}, {"sha": "3084c066e408f7a2921b02a16f115bb4833c71de", "url": "https://api.github.com/repos/rust-lang/rust/commits/3084c066e408f7a2921b02a16f115bb4833c71de", "html_url": "https://github.com/rust-lang/rust/commit/3084c066e408f7a2921b02a16f115bb4833c71de"}], "stats": {"total": 164, "additions": 80, "deletions": 84}, "files": [{"sha": "5fd8334e8ed9a6808f3a4b9547c6e613d382783e", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -222,16 +222,6 @@ dependencies = [\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"cargo_metadata\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.5.4\"\n@@ -1188,9 +1178,11 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"compiletest_rs 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2923,7 +2915,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n \"checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87\"\n-\"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ebd6272a2ca4fd39dbabbd6611eb03df45c2259b3b80b39a9ff8fbdcf42a4b3\"\n \"checksum cc 1.0.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b9d2900f78631a5876dc5d6c9033ede027253efcd33dd36b1309fc6cab97ee0\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\""}, {"sha": "3fed0175371a7d494ec1d1bdaf790a7e73b4588d", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -67,7 +67,7 @@ verify_status rust-by-example src/doc/rust-by-example\n verify_status rls src/tool/rls\n verify_status rustfmt src/tool/rustfmt\n verify_status clippy-driver src/tool/clippy\n-#verify_status miri src/tool/miri\n+verify_status miri src/tool/miri\n \n if [ \"$RUST_RELEASE_CHANNEL\" = nightly -a -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_set}\" ]; then\n     . \"$(dirname $0)/repo.sh\""}, {"sha": "c2da8c11d87e9382339c0eda9e0990cb7a9479cd", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -16,7 +16,7 @@ mod check_match;\n pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n-use interpret::{const_val_field, const_discr, self};\n+use interpret::{const_val_field, const_variant_index, self};\n \n use rustc::middle::const_val::ConstVal;\n use rustc::mir::{Field, BorrowKind, Mutability};\n@@ -835,38 +835,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n                 match cv.val {\n                     ConstVal::Value(val) => {\n-                        let discr_val = const_discr(\n+                        let variant_index = const_variant_index(\n                             self.tcx, self.param_env, instance, val, cv.ty\n-                        ).expect(\"const_discr failed\");\n-                        let layout = self\n-                            .tcx\n-                            .layout_of(self.param_env.and(cv.ty))\n-                            .expect(\"layout of enum not available\");\n-                        let variant_index = match layout.variants {\n-                            ty::layout::Variants::Single { index } => index,\n-                            ty::layout::Variants::Tagged { ref discr, .. } => {\n-                                // raw discriminants for enums are isize or bigger during\n-                                // their computation, but later shrunk to the smallest possible\n-                                // representation\n-                                let size = discr.value.size(self.tcx).bits();\n-                                let amt = 128 - size;\n-                                adt_def\n-                                    .discriminants(self.tcx)\n-                                    .position(|var| ((var.val << amt) >> amt) == discr_val)\n-                                    .unwrap_or_else(|| {\n-                                        bug!(\"discriminant {} not found in {:#?}\",\n-                                            discr_val,\n-                                            adt_def\n-                                                .discriminants(self.tcx)\n-                                                .collect::<Vec<_>>(),\n-                                            );\n-                                    })\n-                            }\n-                            ty::layout::Variants::NicheFilling { .. } => {\n-                                assert_eq!(discr_val as usize as u128, discr_val);\n-                                discr_val as usize\n-                            },\n-                        };\n+                        ).expect(\"const_variant_index failed\");\n                         let subpatterns = adt_subpatterns(\n                             adt_def.variants[variant_index].fields.len(),\n                             Some(variant_index),"}, {"sha": "a25331f7279fbcf11bcd36c9a0a2ea457627cb36", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -400,14 +400,14 @@ pub fn const_val_field<'a, 'tcx>(\n     }\n }\n \n-pub fn const_discr<'a, 'tcx>(\n+pub fn const_variant_index<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n     value: Value,\n     ty: Ty<'tcx>,\n-) -> EvalResult<'tcx, u128> {\n-    trace!(\"const_discr: {:?}, {:?}, {:?}\", instance, value, ty);\n+) -> EvalResult<'tcx, usize> {\n+    trace!(\"const_variant_index: {:?}, {:?}, {:?}\", instance, value, ty);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let (ptr, align) = match value {\n         Value::ByValPair(..) | Value::ByVal(_) => {\n@@ -421,7 +421,7 @@ pub fn const_discr<'a, 'tcx>(\n         Value::ByRef(ptr, align) => (ptr, align),\n     };\n     let place = Place::from_primval_ptr(ptr, align);\n-    ecx.read_discriminant_value(place, ty)\n+    ecx.read_discriminant_as_variant_index(place, ty)\n }\n \n pub fn const_eval_provider<'a, 'tcx>("}, {"sha": "b98ab218de5cb5cd7bc1a6b45cb492543d592ac7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 60, "deletions": 27, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -743,28 +743,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n             Discriminant(ref place) => {\n                 let ty = self.place_ty(place);\n-                let layout = self.layout_of(ty)?;\n                 let place = self.eval_place(place)?;\n                 let discr_val = self.read_discriminant_value(place, ty)?;\n-                match layout.variants {\n-                    layout::Variants::Single { index } => {\n-                        assert_eq!(discr_val, index as u128);\n-                    }\n-                    layout::Variants::Tagged { .. } |\n-                    layout::Variants::NicheFilling { .. } => {\n-                        if let ty::TyAdt(adt_def, _) = ty.sty {\n-                            trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n-                            if adt_def.discriminants(*self.tcx).all(|v| {\n-                                discr_val != v.val\n-                            })\n-                            {\n-                                return err!(InvalidDiscriminant);\n-                            }\n-                        } else {\n-                            bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n-                        }\n-                    }\n-                }\n                 self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n             }\n         }\n@@ -837,13 +817,39 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n+    /// reads a tag and produces the corresponding variant index\n+    pub fn read_discriminant_as_variant_index(\n+        &mut self,\n+        place: Place,\n+        ty: Ty<'tcx>,\n+    ) -> EvalResult<'tcx, usize> {\n+        let layout = self.layout_of(ty)?;\n+        match layout.variants {\n+            ty::layout::Variants::Single { index } => Ok(index),\n+            ty::layout::Variants::Tagged { .. } => {\n+                let discr_val = self.read_discriminant_value(place, ty)?;\n+                ty\n+                    .ty_adt_def()\n+                    .expect(\"tagged layout for non adt\")\n+                    .discriminants(self.tcx.tcx)\n+                    .position(|var| var.val == discr_val)\n+                    .ok_or_else(|| EvalErrorKind::InvalidDiscriminant.into())\n+            }\n+            ty::layout::Variants::NicheFilling { .. } => {\n+                let discr_val = self.read_discriminant_value(place, ty)?;\n+                assert_eq!(discr_val as usize as u128, discr_val);\n+                Ok(discr_val as usize)\n+            },\n+        }\n+    }\n+\n     pub fn read_discriminant_value(\n         &mut self,\n         place: Place,\n         ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, u128> {\n         let layout = self.layout_of(ty)?;\n-        //trace!(\"read_discriminant_value {:#?}\", layout);\n+        trace!(\"read_discriminant_value {:#?}\", layout);\n \n         match layout.variants {\n             layout::Variants::Single { index } => {\n@@ -854,13 +860,34 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n \n         let (discr_place, discr) = self.place_field(place, mir::Field::new(0), layout)?;\n+        trace!(\"discr place: {:?}, {:?}\", discr_place, discr);\n         let raw_discr = self.value_to_primval(ValTy {\n             value: self.read_place(discr_place)?,\n             ty: discr.ty\n         })?;\n         let discr_val = match layout.variants {\n             layout::Variants::Single { .. } => bug!(),\n-            layout::Variants::Tagged { .. } => raw_discr.to_bytes()?,\n+            // FIXME: should we catch invalid discriminants here?\n+            layout::Variants::Tagged { .. } => {\n+                if discr.ty.is_signed() {\n+                    let i = raw_discr.to_bytes()? as i128;\n+                    // going from layout tag type to typeck discriminant type\n+                    // requires first sign extending with the layout discriminant\n+                    let amt = 128 - discr.size.bits();\n+                    let sexted = (i << amt) >> amt;\n+                    // and then zeroing with the typeck discriminant type\n+                    let discr_ty = ty\n+                        .ty_adt_def().expect(\"tagged layout corresponds to adt\")\n+                        .repr\n+                        .discr_type();\n+                    let discr_ty = layout::Integer::from_attr(self.tcx.tcx, discr_ty);\n+                    let amt = 128 - discr_ty.size().bits();\n+                    let truncatee = sexted as u128;\n+                    (truncatee << amt) >> amt\n+                } else {\n+                    raw_discr.to_bytes()?\n+                }\n+            },\n             layout::Variants::NicheFilling {\n                 dataful_variant,\n                 ref niche_variants,\n@@ -910,11 +937,18 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                layout::Abi::Uninhabited);\n                 }\n             }\n-            layout::Variants::Tagged { .. } => {\n+            layout::Variants::Tagged { ref discr, .. } => {\n                 let discr_val = dest_ty.ty_adt_def().unwrap()\n                     .discriminant_for_variant(*self.tcx, variant_index)\n                     .val;\n \n+                // raw discriminants for enums are isize or bigger during\n+                // their computation, but the in-memory tag is the smallest possible\n+                // representation\n+                let size = discr.value.size(self.tcx.tcx).bits();\n+                let amt = 128 - size;\n+                let discr_val = (discr_val << amt) >> amt;\n+\n                 let (discr_dest, discr) = self.place_field(dest, mir::Field::new(0), layout)?;\n                 self.write_primval(discr_dest, PrimVal::Bytes(discr_val), discr.ty)?;\n             }\n@@ -1145,19 +1179,18 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     _ if primval.is_undef() => false,\n                     _ => bug!(\"write_value_to_ptr: invalid ByVal layout: {:#?}\", layout)\n                 };\n-                self.memory.write_primval(dest.to_ptr()?, dest_align, primval, layout.size.bytes(), signed)\n+                self.memory.write_primval(dest, dest_align, primval, layout.size.bytes(), signed)\n             }\n             Value::ByValPair(a_val, b_val) => {\n-                let ptr = dest.to_ptr()?;\n                 trace!(\"write_value_to_ptr valpair: {:#?}\", layout);\n                 let (a, b) = match layout.abi {\n                     layout::Abi::ScalarPair(ref a, ref b) => (&a.value, &b.value),\n                     _ => bug!(\"write_value_to_ptr: invalid ByValPair layout: {:#?}\", layout)\n                 };\n                 let (a_size, b_size) = (a.size(&self), b.size(&self));\n-                let a_ptr = ptr;\n+                let a_ptr = dest;\n                 let b_offset = a_size.abi_align(b.align(&self));\n-                let b_ptr = ptr.offset(b_offset.bytes(), &self)?.into();\n+                let b_ptr = dest.offset(b_offset.bytes(), &self)?.into();\n                 // TODO: What about signedess?\n                 self.memory.write_primval(a_ptr, dest_align, a_val, a_size.bytes(), false)?;\n                 self.memory.write_primval(b_ptr, dest_align, b_val, b_size.bytes(), false)"}, {"sha": "5e156e9271f57fd85ea69337007bf30d9255f01f", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -691,7 +691,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         self.read_primval(ptr, ptr_align, self.pointer_size())\n     }\n \n-    pub fn write_primval(&mut self, ptr: MemoryPointer, ptr_align: Align, val: PrimVal, size: u64, signed: bool) -> EvalResult<'tcx> {\n+    pub fn write_primval(&mut self, ptr: Pointer, ptr_align: Align, val: PrimVal, size: u64, signed: bool) -> EvalResult<'tcx> {\n         let endianness = self.endianness();\n \n         let bytes = match val {\n@@ -703,11 +703,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             PrimVal::Bytes(bytes) => bytes,\n \n             PrimVal::Undef => {\n-                self.mark_definedness(PrimVal::Ptr(ptr).into(), size, false)?;\n+                self.check_align(ptr.into(), ptr_align)?;\n+                self.mark_definedness(ptr, size, false)?;\n                 return Ok(());\n             }\n         };\n \n+        let ptr = ptr.to_ptr()?;\n+\n         {\n             let align = self.int_align(size);\n             let dst = self.get_bytes_mut(ptr, size, ptr_align.min(align))?;\n@@ -734,7 +737,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn write_ptr_sized_unsigned(&mut self, ptr: MemoryPointer, ptr_align: Align, val: PrimVal) -> EvalResult<'tcx> {\n         let ptr_size = self.pointer_size();\n-        self.write_primval(ptr, ptr_align, val, ptr_size, false)\n+        self.write_primval(ptr.into(), ptr_align, val, ptr_size, false)\n     }\n \n     fn int_align(&self, size: u64) -> Align {"}, {"sha": "1eb131810bdf38d9404a60a6fa16f61c4c3a9c17", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -25,7 +25,7 @@ pub use self::const_eval::{\n     CompileTimeEvaluator,\n     const_eval_provider,\n     const_val_field,\n-    const_discr,\n+    const_variant_index,\n };\n \n pub use self::machine::Machine;"}, {"sha": "3360e5b72a7c72c7afbc2a2e59171f37b00a854a", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5203d1073a774e01ae0c57ebb561648a8fd9910/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -37,16 +37,14 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 ref targets,\n                 ..\n             } => {\n-                // FIXME(CTFE): forbid branching\n                 let discr_val = self.eval_operand(discr)?;\n                 let discr_prim = self.value_to_primval(discr_val)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n \n                 for (index, &const_int) in values.iter().enumerate() {\n-                    let prim = PrimVal::Bytes(const_int);\n-                    if discr_prim.to_bytes()? == prim.to_bytes()? {\n+                    if discr_prim.to_bytes()? == const_int {\n                         target_block = targets[index];\n                         break;\n                     }"}, {"sha": "f48fed70d4447445b586a35c4ae88683542ffc72", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=f5203d1073a774e01ae0c57ebb561648a8fd9910", "patch": "@@ -1 +1 @@\n-Subproject commit d4712ca37500f26bbcbf97edcb27820717f769f7\n+Subproject commit f48fed70d4447445b586a35c4ae88683542ffc72"}]}