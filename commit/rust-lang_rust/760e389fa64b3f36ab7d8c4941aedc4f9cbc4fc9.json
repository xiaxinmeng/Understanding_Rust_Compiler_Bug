{"sha": "760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MGUzODlmYTY0YjNmMzZhYjdkOGM0OTQxYWVkYzRmOWNiYzRmYzk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-30T09:19:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-04-03T22:56:08Z"}, "message": "Add page to list all crate's items", "tree": {"sha": "6e519be43b9f8dce606f5e7ff06f3c193a3d2195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e519be43b9f8dce606f5e7ff06f3c193a3d2195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "html_url": "https://github.com/rust-lang/rust/commit/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd24c8ed4ac3e48068408fa21d491d7ffe45295", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd24c8ed4ac3e48068408fa21d491d7ffe45295", "html_url": "https://github.com/rust-lang/rust/commit/8dd24c8ed4ac3e48068408fa21d491d7ffe45295"}], "stats": {"total": 274, "additions": 238, "deletions": 36}, "files": [{"sha": "0828f324a49d95c2fd658a0d9967b09657319997", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 206, "deletions": 36, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "patch": "@@ -1087,7 +1087,8 @@ impl<'a> SourceCollector<'a> {\n             href.push_str(component);\n             href.push('/');\n         });\n-        let mut fname = p.file_name().expect(\"source has no filename\")\n+        let mut fname = p.file_name()\n+                         .expect(\"source has no filename\")\n                          .to_os_string();\n         fname.push(\".html\");\n         cur.push(&fname);\n@@ -1373,6 +1374,135 @@ impl<'a> Cache {\n     }\n }\n \n+#[derive(Debug, Eq, PartialEq, Hash)]\n+struct ItemEntry {\n+    url: String,\n+    name: String,\n+}\n+\n+impl ItemEntry {\n+    fn new(mut url: String, name: String) -> ItemEntry {\n+        while url.starts_with('/') {\n+            url.remove(0);\n+        }\n+        ItemEntry {\n+            url,\n+            name,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ItemEntry {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"<a href='{}'>{}</a>\", self.url, Escape(&self.name))\n+    }\n+}\n+\n+impl PartialOrd for ItemEntry {\n+    fn partial_cmp(&self, other: &ItemEntry) -> Option<::std::cmp::Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n+impl Ord for ItemEntry {\n+    fn cmp(&self, other: &ItemEntry) -> ::std::cmp::Ordering {\n+        self.name.cmp(&other.name)\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct AllTypes {\n+    structs: HashSet<ItemEntry>,\n+    enums: HashSet<ItemEntry>,\n+    unions: HashSet<ItemEntry>,\n+    primitives: HashSet<ItemEntry>,\n+    traits: HashSet<ItemEntry>,\n+    macros: HashSet<ItemEntry>,\n+    functions: HashSet<ItemEntry>,\n+    typedefs: HashSet<ItemEntry>,\n+    statics: HashSet<ItemEntry>,\n+    constants: HashSet<ItemEntry>,\n+}\n+\n+impl AllTypes {\n+    fn new() -> AllTypes {\n+        AllTypes {\n+            structs: HashSet::with_capacity(100),\n+            enums: HashSet::with_capacity(100),\n+            unions: HashSet::with_capacity(100),\n+            primitives: HashSet::with_capacity(26),\n+            traits: HashSet::with_capacity(100),\n+            macros: HashSet::with_capacity(100),\n+            functions: HashSet::with_capacity(100),\n+            typedefs: HashSet::with_capacity(100),\n+            statics: HashSet::with_capacity(100),\n+            constants: HashSet::with_capacity(100),\n+        }\n+    }\n+\n+    fn append(&mut self, item_name: String, item_type: &str) {\n+        let mut url: Vec<_> = item_name.split(\"::\").skip(1).collect();\n+        if let Some(name) = url.pop() {\n+            let new_url = format!(\"{}/{}.{}.html\", url.join(\"/\"), item_type, name);\n+            url.push(name);\n+            let name = url.join(\"::\");\n+            match item_type {\n+                \"struct\" => self.structs.insert(ItemEntry::new(new_url, name)),\n+                \"enum\" => self.enums.insert(ItemEntry::new(new_url, name)),\n+                \"union\" => self.unions.insert(ItemEntry::new(new_url, name)),\n+                \"primitive\" => self.primitives.insert(ItemEntry::new(new_url, name)),\n+                \"trait\" => self.traits.insert(ItemEntry::new(new_url, name)),\n+                \"macro\" => self.macros.insert(ItemEntry::new(new_url, name)),\n+                \"fn\" => self.functions.insert(ItemEntry::new(new_url, name)),\n+                \"typedef\" => self.typedefs.insert(ItemEntry::new(new_url, name)),\n+                \"static\" => self.statics.insert(ItemEntry::new(new_url, name)),\n+                \"constant\" => self.constants.insert(ItemEntry::new(new_url, name)),\n+                _ => true,\n+            };\n+        }\n+    }\n+}\n+\n+fn print_entries(f: &mut fmt::Formatter, e: &HashSet<ItemEntry>, title: &str,\n+                 class: &str) -> fmt::Result {\n+    if !e.is_empty() {\n+        let mut e: Vec<&ItemEntry> = e.iter().collect();\n+        e.sort();\n+        write!(f, \"<h3 id='{}'>{}</h3><ul class='{} docblock'>{}</ul>\",\n+               title,\n+               Escape(title),\n+               class,\n+               e.iter().map(|s| format!(\"<li>{}</li>\", s)).collect::<String>())?;\n+    }\n+    Ok(())\n+}\n+\n+impl fmt::Display for AllTypes {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f,\n+\"<h1 class='fqn'>\\\n+     <span class='in-band'>List of all items</span>\\\n+     <span class='out-of-band'>\\\n+         <span id='render-detail'>\\\n+             <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" title=\\\"collapse all docs\\\">\\\n+                 [<span class='inner'>&#x2212;</span>]\\\n+             </a>\\\n+         </span>\n+     </span>\n+</h1>\")?;\n+        print_entries(f, &self.structs, \"Structs\", \"structs\")?;\n+        print_entries(f, &self.enums, \"Enums\", \"enums\")?;\n+        print_entries(f, &self.unions, \"Unions\", \"unions\")?;\n+        print_entries(f, &self.primitives, \"Primitives\", \"primitives\")?;\n+        print_entries(f, &self.traits, \"Traits\", \"traits\")?;\n+        print_entries(f, &self.macros, \"Macros\", \"macros\")?;\n+        print_entries(f, &self.functions, \"Functions\", \"functions\")?;\n+        print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\")?;\n+        print_entries(f, &self.statics, \"Statics\", \"statics\")?;\n+        print_entries(f, &self.constants, \"Constants\", \"constants\")\n+    }\n+}\n+\n impl Context {\n     /// String representation of how to get back to the root path of the 'doc/'\n     /// folder in terms of a relative URL.\n@@ -1414,16 +1544,52 @@ impl Context {\n             Some(i) => i,\n             None => return Ok(()),\n         };\n+        let final_file = self.dst.join(&krate.name)\n+                                 .join(\"all.html\");\n+        let crate_name = krate.name.clone();\n         item.name = Some(krate.name);\n \n-        // Render the crate documentation\n-        let mut work = vec![(self, item)];\n+        let mut all = AllTypes::new();\n \n-        while let Some((mut cx, item)) = work.pop() {\n-            cx.item(item, |cx, item| {\n-                work.push((cx.clone(), item))\n-            })?\n+        {\n+            // Render the crate documentation\n+            let mut work = vec![(self.clone(), item)];\n+\n+            while let Some((mut cx, item)) = work.pop() {\n+                cx.item(item, &mut all, |cx, item| {\n+                    work.push((cx.clone(), item))\n+                })?\n+            }\n         }\n+\n+        let mut w = BufWriter::new(File::create(&final_file)\n+                                        .expect(\"failed to create all.html\"));\n+        let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n+        if !root_path.ends_with('/') {\n+            root_path.push('/');\n+        }\n+        let page = layout::Page {\n+            title: \"List of all items in this crate\",\n+            css_class: \"mod\",\n+            root_path: \"../\",\n+            description: \"List of all items in this crate\",\n+            keywords: BASIC_KEYWORDS,\n+            resource_suffix: &self.shared.resource_suffix,\n+        };\n+        let sidebar = if let Some(ref version) = cache().crate_version {\n+            format!(\"<p class='location'>Crate {}</p>\\\n+                     <div class='block version'>\\\n+                         <p>Version {}</p>\\\n+                     </div>\\\n+                     <a id='all-types' href='index.html'><p>Back to index</p></a>\",\n+                    crate_name, version)\n+        } else {\n+            String::new()\n+        };\n+        layout::render(&mut w, &self.shared.layout,\n+                       &page, &sidebar, &all,\n+                       self.shared.css_file_extension.is_some(),\n+                       &self.shared.themes).expect(\"layout rendering failed\");\n         Ok(())\n     }\n \n@@ -1496,8 +1662,8 @@ impl Context {\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item<F>(&mut self, item: clean::Item, mut f: F) -> Result<(), Error> where\n-        F: FnMut(&mut Context, clean::Item),\n+    fn item<F>(&mut self, item: clean::Item, all: &mut AllTypes, mut f: F) -> Result<(), Error>\n+        where F: FnMut(&mut Context, clean::Item),\n     {\n         // Stripped modules survive the rustdoc passes (i.e. `strip-private`)\n         // if they contain impls for public types. These modules can also\n@@ -1544,7 +1710,7 @@ impl Context {\n                 }\n \n                 for item in m.items {\n-                    f(this,item);\n+                    f(this, item);\n                 }\n \n                 Ok(())\n@@ -1562,13 +1728,14 @@ impl Context {\n                 let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n                 try_err!(dst.write_all(&buf), &joint_dst);\n \n+                all.append(full_path(self, &item), item_type.css_class());\n                 // Redirect from a sane URL using the namespace to Rustdoc's\n                 // URL for the page.\n                 let redir_name = format!(\"{}.{}.html\", name, item_type.name_space());\n                 let redir_dst = self.dst.join(redir_name);\n                 if let Ok(redirect_out) = OpenOptions::new().create_new(true)\n-                                                                .write(true)\n-                                                                .open(&redir_dst) {\n+                                                            .write(true)\n+                                                            .open(&redir_dst) {\n                     let mut redirect_out = BufWriter::new(redirect_out);\n                     try_err!(layout::redirect(&mut redirect_out, file_name), &redir_dst);\n                 }\n@@ -1730,11 +1897,12 @@ impl<'a> fmt::Display for Item<'a> {\n                    version)?;\n         }\n         write!(fmt,\n-               r##\"<span id='render-detail'>\n-                   <a id=\"toggle-all-docs\" href=\"javascript:void(0)\" title=\"collapse all docs\">\n-                       [<span class='inner'>&#x2212;</span>]\n-                   </a>\n-               </span>\"##)?;\n+               \"<span id='render-detail'>\\\n+                   <a id=\\\"toggle-all-docs\\\" href=\\\"javascript:void(0)\\\" \\\n+                      title=\\\"collapse all docs\\\">\\\n+                       [<span class='inner'>&#x2212;</span>]\\\n+                   </a>\\\n+               </span>\")?;\n \n         // Write `src` tag\n         //\n@@ -3540,33 +3708,35 @@ impl<'a> fmt::Display for Sidebar<'a> {\n \n         if it.is_struct() || it.is_trait() || it.is_primitive() || it.is_union()\n             || it.is_enum() || it.is_mod() || it.is_typedef() {\n-            write!(fmt, \"<p class='location'>\")?;\n-            match it.inner {\n-                clean::StructItem(..) => write!(fmt, \"Struct \")?,\n-                clean::TraitItem(..) => write!(fmt, \"Trait \")?,\n-                clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n-                clean::UnionItem(..) => write!(fmt, \"Union \")?,\n-                clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n-                clean::TypedefItem(..) => write!(fmt, \"Type Definition \")?,\n-                clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n-                clean::ModuleItem(..) => if it.is_crate() {\n-                    write!(fmt, \"Crate \")?;\n-                } else {\n-                    write!(fmt, \"Module \")?;\n+            write!(fmt, \"<p class='location'>{}{}</p>\",\n+                match it.inner {\n+                    clean::StructItem(..) => \"Struct \",\n+                    clean::TraitItem(..) => \"Trait \",\n+                    clean::PrimitiveItem(..) => \"Primitive Type \",\n+                    clean::UnionItem(..) => \"Union \",\n+                    clean::EnumItem(..) => \"Enum \",\n+                    clean::TypedefItem(..) => \"Type Definition \",\n+                    clean::ForeignTypeItem => \"Foreign Type \",\n+                    clean::ModuleItem(..) => if it.is_crate() {\n+                        \"Crate \"\n+                    } else {\n+                        \"Module \"\n+                    },\n+                    _ => \"\",\n                 },\n-                _ => (),\n-            }\n-            write!(fmt, \"{}\", it.name.as_ref().unwrap())?;\n-            write!(fmt, \"</p>\")?;\n+                it.name.as_ref().unwrap())?;\n         }\n \n         if it.is_crate() {\n             if let Some(ref version) = cache().crate_version {\n                 write!(fmt,\n                        \"<div class='block version'>\\\n                         <p>Version {}</p>\\\n-                        </div>\",\n-                       version)?;\n+                        </div>\n+                        <a id='all-types' href='all{}.html'><p>See all {}'s items</p></a>\",\n+                       version,\n+                       cx.shared.resource_suffix,\n+                       it.name.as_ref().unwrap())?;\n             }\n         }\n "}, {"sha": "cea1e89363216ba9d16a34b7aaa43cdd0abbed9c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "patch": "@@ -1291,3 +1291,21 @@ kbd {\n \tfont-size: 19px;\n \tdisplay: block;\n }\n+\n+#main > ul {\n+\tpadding-left: 10px;\n+}\n+#main > ul > li {\n+\tlist-style: none;\n+}\n+#all-types {\n+\ttext-align: center;\n+\tborder: 1px solid;\n+\tmargin: 0 10px;\n+\tmargin-bottom: 10px;\n+\tdisplay: block;\n+\tborder-radius: 7px;\n+}\n+#all-types > p {\n+\tmargin: 5px 0;\n+}\n\\ No newline at end of file"}, {"sha": "f43a8598f33ed95188157815fbbdc6aa5a9aa416", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "patch": "@@ -389,3 +389,10 @@ kbd {\n \t\tbackground: #f0f0f0;\n \t}\n }\n+\n+#all-types {\n+\tbackground-color: #505050;\n+}\n+#all-types:hover {\n+\tbackground-color: #606060;\n+}"}, {"sha": "e13818b4bd27867fa9bc05f2ec8651378a6f97bd", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=760e389fa64b3f36ab7d8c4941aedc4f9cbc4fc9", "patch": "@@ -383,3 +383,10 @@ kbd {\n \t\tbackground: #fff;\n \t}\n }\n+\n+#all-types {\n+\tbackground-color: #fff;\n+}\n+#all-types:hover {\n+\tbackground-color: #f9f9f9;\n+}\n\\ No newline at end of file"}]}