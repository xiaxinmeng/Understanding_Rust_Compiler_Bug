{"sha": "111253c519adc17f5bbfa41b7368512ac7e1effd", "node_id": "C_kwDOAAsO6NoAKDExMTI1M2M1MTlhZGMxN2Y1YmJmYTQxYjczNjg1MTJhYzdlMWVmZmQ", "commit": {"author": {"name": "Jiahao XU", "email": "Jiahao_XU@outlook.com", "date": "2022-07-14T01:24:44Z"}, "committer": {"name": "Jiahao XU", "email": "Jiahao_XU@outlook.com", "date": "2022-07-14T01:24:44Z"}, "message": "Rename `std::io::Error::try_downcast_inner` to `downcast`\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>", "tree": {"sha": "a735b2d18db5009805a7766df31229a59476ea53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a735b2d18db5009805a7766df31229a59476ea53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111253c519adc17f5bbfa41b7368512ac7e1effd", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJKBAABCAA0FiEE+UH+0gCgmS2CS1eIWRwLAwQEFtYFAmLPcHMWHGppYWhhb194\ndUBvdXRsb29rLmNvbQAKCRBZHAsDBAQW1uwWD/40PTg0Cl6T7NLjfS9L8Q2KPFS0\n4jlrPWgIafHczB/MiqikNU5UBcDEH9yQmyjfrULRcbHF9PfbWRCa8nEnspsCWmlS\nxMWtnn+Vqbxs6XzigOPqVOynXl/q9mE2Y+H1fSpmDG4M6dcyctW5gGvivTytM+gA\nHaz5xDoTW+VUWuFiNxvzxUVBm8KONvGQLkEyNQgOtB1tDgPWhkrtKYj210vhSBOk\n1nSuN4ykMMaDQ/rfSGDj78g1Yubn4Go3RkVROXrNYMaIYI+9WksJNOsKNXrXYzld\nJbdBzDq7by/YuhQQHeG0NSILtirvrdwEB7iMyfGbv06FlGjAbNTW0wHS/LJ9qVb8\nuPrvIiMHU37S86C7auyWUbzrcYD+H6nGUykjnTMczJ10gHWV8Iac0G10pu0kXcNY\nWbGTtfVu98mxZHhrOh6FgmfMttd+/jpFEc7W2n4ADp8p3TaW/fqU4/+SqvtiLqiU\nBA3hXZVPXeebISI+AX/z/ARx9JO6sG1aeBMgH5lOUQyaTe4E20vxgPf8nZfNElwO\nQMKCZjyShlRgKtRmHlxHhcmlUExgsOmALO9cEeLQrz0nbxxZoqhWMo8yBCzKWkfc\n5nAxc3NLK7y18MYmxvzAdagiUePi/n/rD3XHhDLrz4TTiEvESozLIYecPz1Qy4tj\nyiDZIL1l601wlkfMPg==\n=dxc+\n-----END PGP SIGNATURE-----", "payload": "tree a735b2d18db5009805a7766df31229a59476ea53\nparent 516da4c93f804f27b1a5f664ae06b9054532f095\nauthor Jiahao XU <Jiahao_XU@outlook.com> 1657761884 +1000\ncommitter Jiahao XU <Jiahao_XU@outlook.com> 1657761884 +1000\n\nRename `std::io::Error::try_downcast_inner` to `downcast`\n\nSigned-off-by: Jiahao XU <Jiahao_XU@outlook.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111253c519adc17f5bbfa41b7368512ac7e1effd", "html_url": "https://github.com/rust-lang/rust/commit/111253c519adc17f5bbfa41b7368512ac7e1effd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111253c519adc17f5bbfa41b7368512ac7e1effd/comments", "author": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NobodyXu", "id": 30436523, "node_id": "MDQ6VXNlcjMwNDM2NTIz", "avatar_url": "https://avatars.githubusercontent.com/u/30436523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NobodyXu", "html_url": "https://github.com/NobodyXu", "followers_url": "https://api.github.com/users/NobodyXu/followers", "following_url": "https://api.github.com/users/NobodyXu/following{/other_user}", "gists_url": "https://api.github.com/users/NobodyXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/NobodyXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NobodyXu/subscriptions", "organizations_url": "https://api.github.com/users/NobodyXu/orgs", "repos_url": "https://api.github.com/users/NobodyXu/repos", "events_url": "https://api.github.com/users/NobodyXu/events{/privacy}", "received_events_url": "https://api.github.com/users/NobodyXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "516da4c93f804f27b1a5f664ae06b9054532f095", "url": "https://api.github.com/repos/rust-lang/rust/commits/516da4c93f804f27b1a5f664ae06b9054532f095", "html_url": "https://github.com/rust-lang/rust/commit/516da4c93f804f27b1a5f664ae06b9054532f095"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "8f2119425d112fcd3c97e08d33eb9256ddd42a54", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/111253c519adc17f5bbfa41b7368512ac7e1effd/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111253c519adc17f5bbfa41b7368512ac7e1effd/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=111253c519adc17f5bbfa41b7368512ac7e1effd", "patch": "@@ -808,7 +808,7 @@ impl Error {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(io_error_try_downcast_inner)]\n+    /// #![feature(io_error_downcast)]\n     ///\n     /// use std::fmt;\n     /// use std::io;\n@@ -829,14 +829,14 @@ impl Error {\n     ///\n     /// impl From<io::Error> for E {\n     ///     fn from(err: io::Error) -> E {\n-    ///         err.try_downcast_inner::<E>()\n+    ///         err.downcast::<E>()\n     ///             .map(|b| *b)\n     ///             .unwrap_or_else(E::Io)\n     ///     }\n     /// }\n     /// ```\n-    #[unstable(feature = \"io_error_try_downcast_inner\", issue = \"none\")]\n-    pub fn try_downcast_inner<E>(self) -> result::Result<Box<E>, Self>\n+    #[unstable(feature = \"io_error_downcast\", issue = \"none\")]\n+    pub fn downcast<E>(self) -> result::Result<Box<E>, Self>\n     where\n         E: error::Error + Send + Sync + 'static,\n     {"}, {"sha": "c897a5e8701c45ebad019aa86eb679e7660b71a5", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/111253c519adc17f5bbfa41b7368512ac7e1effd/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111253c519adc17f5bbfa41b7368512ac7e1effd/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=111253c519adc17f5bbfa41b7368512ac7e1effd", "patch": "@@ -154,40 +154,40 @@ impl fmt::Display for E {\n impl error::Error for E {}\n \n #[test]\n-fn test_try_downcast_inner() {\n+fn test_std_io_error_downcast() {\n     // Case 1: custom error, downcast succeeds\n     let io_error = Error::new(ErrorKind::Other, Bojji(true));\n-    let e: Box<Bojji> = io_error.try_downcast_inner().unwrap();\n+    let e: Box<Bojji> = io_error.downcast().unwrap();\n     assert!(e.0);\n \n     // Case 2: custom error, downcast fails\n     let io_error = Error::new(ErrorKind::Other, Bojji(true));\n-    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n \n     //   ensures that the custom error is intact\n     assert_eq!(ErrorKind::Other, io_error.kind());\n-    let e: Box<Bojji> = io_error.try_downcast_inner().unwrap();\n+    let e: Box<Bojji> = io_error.downcast().unwrap();\n     assert!(e.0);\n \n     // Case 3: os error\n     let errno = 20;\n     let io_error = Error::from_raw_os_error(errno);\n-    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n \n     assert_eq!(errno, io_error.raw_os_error().unwrap());\n \n     // Case 4: simple\n     let kind = ErrorKind::OutOfMemory;\n     let io_error: Error = kind.into();\n-    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n \n     assert_eq!(kind, io_error.kind());\n \n     // Case 5: simple message\n     const SIMPLE_MESSAGE: SimpleMessage =\n         SimpleMessage { kind: ErrorKind::Other, message: \"simple message error test\" };\n     let io_error = Error::from_static_message(&SIMPLE_MESSAGE);\n-    let io_error = io_error.try_downcast_inner::<E>().unwrap_err();\n+    let io_error = io_error.downcast::<E>().unwrap_err();\n \n     assert_eq!(SIMPLE_MESSAGE.kind, io_error.kind());\n     assert_eq!(SIMPLE_MESSAGE.message, &*format!(\"{io_error}\"));"}]}