{"sha": "29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "node_id": "C_kwDOAAsO6NoAKDI5ZWY4MGM3OGEwZjljNTg2MDc5NDRlNTBkMzI0MGVlZTJiN2NkYzc", "commit": {"author": {"name": "whodi", "email": "whodi@pop-os.localdomain", "date": "2022-04-15T18:25:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-04-15T21:18:09Z"}, "message": "adding spell checking", "tree": {"sha": "24003199ba08dd7043408fef8799a335c88aecfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24003199ba08dd7043408fef8799a335c88aecfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "html_url": "https://github.com/rust-lang/rust/commit/29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/comments", "author": null, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0fce5a8475927a7dc5f56f4efb2468aa87a4da0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0fce5a8475927a7dc5f56f4efb2468aa87a4da0", "html_url": "https://github.com/rust-lang/rust/commit/c0fce5a8475927a7dc5f56f4efb2468aa87a4da0"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "89884bfc85902ee4cf825d2d5130a6d5b9935d69", "filename": ".github/ISSUE_TEMPLATE/blank_issue.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2FISSUE_TEMPLATE%2Fblank_issue.yml", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2FISSUE_TEMPLATE%2Fblank_issue.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Fblank_issue.yml?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -9,7 +9,7 @@ body:\n     attributes:\n       label: Description\n       description: >\n-        Please provide a discription of the issue, along with any information\n+        Please provide a description of the issue, along with any information\n         you feel relevant to replicate it.\n     validations:\n       required: true"}, {"sha": "25e436d30b97dc42dacee379ad90f9d069c462d5", "filename": ".github/ISSUE_TEMPLATE/false_negative.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2FISSUE_TEMPLATE%2Ffalse_negative.yml", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2FISSUE_TEMPLATE%2Ffalse_negative.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Ffalse_negative.yml?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -23,7 +23,7 @@ body:\n     id: reproducer\n     attributes:\n       label: Reproducer\n-      description: Please provide the code and steps to repoduce the bug\n+      description: Please provide the code and steps to reproduce the bug\n       value: |\n         I tried this code:\n "}, {"sha": "561b65c93a7f9329799d2be796c2590b1ae215dd", "filename": ".github/ISSUE_TEMPLATE/false_positive.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2FISSUE_TEMPLATE%2Ffalse_positive.yml", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2FISSUE_TEMPLATE%2Ffalse_positive.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FISSUE_TEMPLATE%2Ffalse_positive.yml?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -24,7 +24,7 @@ body:\n     attributes:\n       label: Reproducer\n       description: >\n-        Please provide the code and steps to repoduce the bug together with the\n+        Please provide the code and steps to reproduce the bug together with the\n         output from Clippy.\n       value: |\n         I tried this code:"}, {"sha": "4292949a02dffadbcb45575cbe588dd8ff5f16a6", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -6,14 +6,14 @@ on:\n     branches-ignore:\n       - auto\n       - try\n-    # Don't run Clippy tests, when only textfiles were modified\n+    # Don't run Clippy tests, when only text files were modified\n     paths-ignore:\n     - 'COPYRIGHT'\n     - 'LICENSE-*'\n     - '**.md'\n     - '**.txt'\n   pull_request:\n-    # Don't run Clippy tests, when only textfiles were modified\n+    # Don't run Clippy tests, when only text files were modified\n     paths-ignore:\n     - 'COPYRIGHT'\n     - 'LICENSE-*'"}, {"sha": "ad4b96f7ff34739453748b7cdfac75b0ee4e4af6", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -18,7 +18,7 @@ pub fn install_hook(force_override: bool) {\n \n     // So a little bit of a funny story. Git on unix requires the pre-commit file\n     // to have the `execute` permission to be set. The Rust functions for modifying\n-    // these flags doesn't seem to work when executed with normal user permissions.\n+    // these flags doesn't seem to work when executed with normal user permissions. \n     //\n     // However, there is a little hack that is also being used by Rust itself in their\n     // setup script. Git saves the `execute` flag when syncing files. This means"}, {"sha": "f691ae4fa45da22e67d8700894b2365db3d4fad2", "filename": "clippy_dev/src/setup/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n const CLIPPY_DEV_DIR: &str = \"clippy_dev\";\n \n /// This function verifies that the tool is being executed in the clippy directory.\n-/// This is useful to ensure that setups only modify Clippys resources. The verification\n+/// This is useful to ensure that setups only modify Clippy's resources. The verification\n /// is done by checking that `clippy_dev` is a sub directory of the current directory.\n ///\n /// It will print an error message and return `false` if the directory could not be\n@@ -17,7 +17,7 @@ fn verify_inside_clippy_dir() -> bool {\n     if path.exists() && path.is_dir() {\n         true\n     } else {\n-        eprintln!(\"error: unable to verify that the working directory is clippys directory\");\n+        eprintln!(\"error: unable to verify that the working directory is clippy's directory\");\n         false\n     }\n }"}, {"sha": "f05315a7d0cdbc496b7e54b5ce7d97d4e4c01adf", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -270,7 +270,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Casting a function pointer to an integer can have surprising results and can occur\n-    /// accidentally if parantheses are omitted from a function call. If you aren't doing anything\n+    /// accidentally if parentheses are omitted from a function call. If you aren't doing anything\n     /// low-level with function pointers then you can opt-out of casting functions to integers in\n     /// order to avoid mistakes. Alternatively, you can use this lint to audit all uses of function\n     /// pointer casts in your code."}, {"sha": "8430e7b4c82713554b0107be84ef57d269c1a483", "filename": "clippy_lints/src/empty_structs_with_brackets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -66,7 +66,7 @@ fn has_no_fields(cx: &EarlyContext<'_>, var_data: &VariantData, braces_span: Spa\n     }\n \n     // there might still be field declarations hidden from the AST\n-    // (conditionaly compiled code using #[cfg(..)])\n+    // (conditionally compiled code using #[cfg(..)])\n \n     let Some(braces_span_str) = snippet_opt(cx, braces_span) else {\n         return false;"}, {"sha": "8a84513b7792fdbf0f97db326feac7cc8f2c274b", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -116,7 +116,7 @@ fn find_slice_values(cx: &LateContext<'_>, pat: &hir::Pat<'_>) -> FxIndexMap<hir\n             let bound_ty = cx.typeck_results().node_type(pat.hir_id);\n             if let ty::Slice(inner_ty) | ty::Array(inner_ty, _) = bound_ty.peel_refs().kind() {\n                 // The values need to use the `ref` keyword if they can't be copied.\n-                // This will need to be adjusted if the lint want to support multable access in the future\n+                // This will need to be adjusted if the lint want to support mutable access in the future\n                 let src_is_ref = bound_ty.is_ref() && binding != hir::BindingAnnotation::Ref;\n                 let needs_ref = !(src_is_ref || is_copy(cx, *inner_ty));\n "}, {"sha": "3349b85f1347a396519aeb5cba96c59813c93cec", "filename": "clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -24,7 +24,7 @@ declare_clippy_lint! {\n     ///     vec.push(value)\n     /// }\n     ///\n-    /// if let Some(valie) = iter.next().ok() {\n+    /// if let Some(value) = iter.next().ok() {\n     ///     vec.push(value)\n     /// }\n     /// ```\n@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n         if_chain! {\n             if let ExprKind::MethodCall(ok_path, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)\n             if let PatKind::TupleStruct(QPath::Resolved(_, x), y, _)  = let_pat.kind; //get operation\n-            if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n+            if method_chain_args(let_expr, &[\"ok\"]).is_some(); //test to see if using ok() method use std::marker::Sized;\n             if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(result_types_0), sym::Result);\n             if rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| s.print_path(x, false)) == \"Some\";\n "}, {"sha": "9b7344fb8b0b21a93d9f5a69a9d698921e6c0771", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n         .map(|a| NormalizedPat::from_pat(cx, &arena, a.pat))\n         .collect();\n \n-    // The furthast forwards a pattern can move without semantic changes\n+    // The furthest forwards a pattern can move without semantic changes\n     let forwards_blocking_idxs: Vec<_> = normalized_pats\n         .iter()\n         .enumerate()\n@@ -43,7 +43,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n         })\n         .collect();\n \n-    // The furthast backwards a pattern can move without semantic changes\n+    // The furthest backwards a pattern can move without semantic changes\n     let backwards_blocking_idxs: Vec<_> = normalized_pats\n         .iter()\n         .enumerate()"}, {"sha": "401ecef460c35cefd52f225576b5ddbd73b021ce", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -7,7 +7,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{Span, SpanData, SyntaxContext};\n \n-mod infalliable_detructuring_match;\n+mod infallible_destructuring_match;\n mod match_as_ref;\n mod match_bool;\n mod match_like_matches;\n@@ -694,7 +694,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n     }\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n-        self.infallible_destructuring_match_linted |= infalliable_detructuring_match::check(cx, local);\n+        self.infallible_destructuring_match_linted |= infallible_destructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}, {"sha": "0abe6ddda65a21fa3f6db2810d3143f405b29efd", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -118,7 +118,7 @@ fn strip_return<'hir>(expr: &'hir Expr<'hir>) -> &'hir Expr<'hir> {\n }\n \n /// Manually check for coercion casting by checking if the type of the match operand or let expr\n-/// differs with the assigned local variable or the funtion return type.\n+/// differs with the assigned local variable or the function return type.\n fn expr_ty_matches_p_ty(cx: &LateContext<'_>, expr: &Expr<'_>, p_expr: &Expr<'_>) -> bool {\n     if let Some(p_node) = get_parent_node(cx.tcx, p_expr.hir_id) {\n         match p_node {"}, {"sha": "70a2aaf78a077f6681bda35501cc351f35f482ff", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -1266,7 +1266,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.55.0\"]\n     pub EXTEND_WITH_DRAIN,\n     perf,\n-    \"using vec.append(&mut vec) to move the full range of a vecor to another\"\n+    \"using vec.append(&mut vec) to move the full range of a vector to another\"\n }\n \n declare_clippy_lint! {\n@@ -2100,7 +2100,7 @@ declare_clippy_lint! {\n     /// using `.collect::<String>()` over `.collect::<Vec<String>>().join(\"\")`\n     /// will prevent loop unrolling and will result in a negative performance impact.\n     ///\n-    /// Additionlly, differences have been observed between aarch64 and x86_64 assembly output,\n+    /// Additionally, differences have been observed between aarch64 and x86_64 assembly output,\n     /// with aarch64 tending to producing faster assembly in more cases when using `.collect::<String>()`\n     #[clippy::version = \"1.61.0\"]\n     pub UNNECESSARY_JOIN,"}, {"sha": "6e6ad1ebbcedaecaf751d7264cce21f40d29e354", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -44,7 +44,7 @@ declare_clippy_lint! {\n     /// pub struct PubBaz;\n     /// impl PubBaz {\n     ///    fn private() {} // ok\n-    ///    pub fn not_ptrivate() {} // missing #[inline]\n+    ///    pub fn not_private() {} // missing #[inline]\n     /// }\n     ///\n     /// impl Bar for PubBaz {"}, {"sha": "95395e2e136d9f18024a356d0ea7f3dc1f4f6bd9", "filename": "clippy_lints/src/needless_bitwise_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -53,7 +53,7 @@ fn is_bitwise_operation(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     false\n }\n \n-fn suggession_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n+fn suggesstion_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n     if let ExprKind::Binary(ref op, left, right) = expr.kind {\n         if let (Some(l_snippet), Some(r_snippet)) = (snippet_opt(cx, left.span), snippet_opt(cx, right.span)) {\n             let op_snippet = match op.node {\n@@ -75,7 +75,7 @@ impl LateLintPass<'_> for NeedlessBitwiseBool {\n                 expr.span,\n                 \"use of bitwise operator instead of lazy operator between booleans\",\n                 |diag| {\n-                    if let Some(sugg) = suggession_snippet(cx, expr) {\n+                    if let Some(sugg) = suggesstion_snippet(cx, expr) {\n                         diag.span_suggestion(expr.span, \"try\", sugg, Applicability::MachineApplicable);\n                     }\n                 },"}, {"sha": "bbcf7e9e3789cf2451441ff5880b9e63560e61e2", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -240,7 +240,7 @@ fn check<'tcx>(\n                 cx,\n                 NEEDLESS_LATE_INIT,\n                 local_stmt.span,\n-                \"unneeded late initalization\",\n+                \"unneeded late initialization\",\n                 |diag| {\n                     diag.tool_only_span_suggestion(\n                         local_stmt.span,\n@@ -265,7 +265,7 @@ fn check<'tcx>(\n                 cx,\n                 NEEDLESS_LATE_INIT,\n                 local_stmt.span,\n-                \"unneeded late initalization\",\n+                \"unneeded late initialization\",\n                 |diag| {\n                     diag.tool_only_span_suggestion(local_stmt.span, \"remove the local\", String::new(), applicability);\n \n@@ -296,7 +296,7 @@ fn check<'tcx>(\n                 cx,\n                 NEEDLESS_LATE_INIT,\n                 local_stmt.span,\n-                \"unneeded late initalization\",\n+                \"unneeded late initialization\",\n                 |diag| {\n                     diag.tool_only_span_suggestion(local_stmt.span, \"remove the local\", String::new(), applicability);\n "}, {"sha": "e8532db4f711dbc658d9862f8ff6b4851253b5c8", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// The actual meaning can be the intended one. `\\x00` can be used in these\n-    /// cases to be unambigious.\n+    /// cases to be unambiguous.\n     ///\n     /// The lint does not trigger for format strings in `print!()`, `write!()`\n     /// and friends since the string is already preprocessed when Clippy lints"}, {"sha": "ea5a8f0858b66aa14d084b55a585fa8ae7950be0", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -78,7 +78,7 @@ fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n \n /// A struct containing information about occurrences of the\n /// `if let Some(..) = .. else` construct that this lint detects.\n-struct OptionIfLetElseOccurence {\n+struct OptionIfLetElseOccurrence {\n     option: String,\n     method_sugg: String,\n     some_expr: String,\n@@ -100,9 +100,9 @@ fn format_option_in_sugg(cx: &LateContext<'_>, cond_expr: &Expr<'_>, as_ref: boo\n }\n \n /// If this expression is the option if let/else construct we're detecting, then\n-/// this function returns an `OptionIfLetElseOccurence` struct with details if\n+/// this function returns an `OptionIfLetElseOccurrence` struct with details if\n /// this construct is found, or None if this construct is not found.\n-fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionIfLetElseOccurence> {\n+fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Option<OptionIfLetElseOccurrence> {\n     if_chain! {\n         if !expr.span.from_expansion(); // Don't lint macros, because it behaves weirdly\n         if !in_constant(cx, expr.hir_id);\n@@ -154,7 +154,7 @@ fn detect_option_if_let_else<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) ->\n                     }\n                 }\n             }\n-            Some(OptionIfLetElseOccurence {\n+            Some(OptionIfLetElseOccurrence {\n                 option: format_option_in_sugg(cx, cond_expr, as_ref, as_mut),\n                 method_sugg: method_sugg.to_string(),\n                 some_expr: format!(\"|{}{}| {}\", capture_mut, capture_name, Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),"}, {"sha": "c4c1aa11004acbc523d2ffe22a25c4148e96f9ff", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -550,7 +550,7 @@ fn ident_difference_expr_with_base_location(\n     // IdentIter, then the output of this function will be almost always be correct\n     // in practice.\n     //\n-    // If it turns out that problematic cases are more prelavent than we assume,\n+    // If it turns out that problematic cases are more prevalent than we assume,\n     // then we should be able to change this function to do the correct traversal,\n     // without needing to change the rest of the code.\n "}, {"sha": "0cbf5ccefa6d89ea6435cfc3a7647c81fee84e9e", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -87,7 +87,7 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n             let res = check.do_check(&fn_ctxt);\n \n             // do_check's documentation says that it might return Ok and create\n-            // errors in the fcx instead of returing Err in some cases. Those cases\n+            // errors in the fcx instead of returning Err in some cases. Those cases\n             // should be filtered out before getting here.\n             assert!(\n                 !fn_ctxt.errors_reported_since_creation(),"}, {"sha": "b1b2addb9a1608b124d95259ead0f01cc2bd0c3a", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -432,7 +432,7 @@ impl Types {\n     fn check_fn_decl(&mut self, cx: &LateContext<'_>, decl: &FnDecl<'_>, context: CheckTyContext) {\n         // Ignore functions in trait implementations as they are usually forced by the trait definition.\n         //\n-        // FIXME: idially we would like to warn *if the compicated type can be simplified*, but it's hard to\n+        // FIXME: ideally we would like to warn *if the complicated type can be simplified*, but it's hard to\n         // check.\n         if context.is_in_trait_impl {\n             return;"}, {"sha": "ae431aac83b82c0ccaf7eaf3a1dfcc1317c5795d", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     /// *disjunctive normal form (DNF)* into *conjunctive normal form (CNF)*.\n     ///\n     /// ### Why is this bad?\n-    /// In the example above, `Some` is repeated, which unncessarily complicates the pattern.\n+    /// In the example above, `Some` is repeated, which unnecessarily complicates the pattern.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "138f8bccb3f5741ba14987fc31d73fa9e6d34a5f", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -30,7 +30,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// - Unaddressed false negative in fn bodies of trait implementations\n-    /// - False positive with assotiated types in traits (#4140)\n+    /// - False positive with associated types in traits (#4140)\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "ff5be825b781712030c5383b956721384f1184d6", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -70,7 +70,7 @@ macro_rules! bind {\n     };\n }\n \n-/// Transforms the given `Option<T>` varibles into `OptionPat<Binding<T>>`.\n+/// Transforms the given `Option<T>` variables into `OptionPat<Binding<T>>`.\n /// This displays as `Some($name)` or `None` when printed. The name of the inner binding\n /// is set to the name of the variable passed to the macro.\n macro_rules! opt_bind {"}, {"sha": "0e8f40e92101a053ab1d5210b761838ca2447b87", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -292,7 +292,7 @@ declare_clippy_lint! {\n     /// Checks for unnecessary conversion from Symbol to a string.\n     ///\n     /// ### Why is this bad?\n-    /// It's faster use symbols directly intead of strings.\n+    /// It's faster use symbols directly instead of strings.\n     ///\n     /// ### Example\n     /// Bad:\n@@ -823,7 +823,7 @@ fn suggest_note(\n         cx,\n         COLLAPSIBLE_SPAN_LINT_CALLS,\n         expr.span,\n-        \"this call is collspible\",\n+        \"this call is collapsible\",\n         \"collapse into\",\n         format!(\n             \"span_lint_and_note({}, {}, {}, {}, {}, {})\","}, {"sha": "526bb2f7e064b5d2503021b7c4e8a13f71506140", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -117,7 +117,7 @@ const APPLICABILITY_NAME_INDEX: usize = 2;\n /// This applicability will be set for unresolved applicability values.\n const APPLICABILITY_UNRESOLVED_STR: &str = \"Unresolved\";\n /// The version that will be displayed if none has been defined\n-const VERION_DEFAULT_STR: &str = \"Unknown\";\n+const VERSION_DEFAULT_STR: &str = \"Unknown\";\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -571,7 +571,7 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n \n fn get_lint_version(cx: &LateContext<'_>, item: &Item<'_>) -> String {\n     extract_clippy_version_value(cx, item).map_or_else(\n-        || VERION_DEFAULT_STR.to_string(),\n+        || VERSION_DEFAULT_STR.to_string(),\n         |version| version.as_str().to_string(),\n     )\n }\n@@ -872,7 +872,7 @@ impl<'a, 'hir> IsMultiSpanScanner<'a, 'hir> {\n         self.suggestion_count += 2;\n     }\n \n-    /// Checks if the suggestions include multiple spanns\n+    /// Checks if the suggestions include multiple spans\n     fn is_multi_part(&self) -> bool {\n         self.suggestion_count > 1\n     }"}, {"sha": "a268e339bb130df99138102b739e6def1d44c640", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -367,7 +367,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         expr_visitor_no_bodies(|e| {\n             // if we're still inside of the macro definition...\n             if e.span.ctxt() == expr.span.ctxt() {\n-                // ArgumnetV1::new_<format_trait>(<value>)\n+                // ArgumentV1::new_<format_trait>(<value>)\n                 if_chain! {\n                     if let ExprKind::Call(callee, [val]) = e.kind;\n                     if let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind;"}, {"sha": "c69a3d8d2a15ec4d8883fd415ba94eff3496719a", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -108,7 +108,7 @@ pub fn is_present_in_source<T: LintContext>(cx: &T, span: Span) -> bool {\n     true\n }\n \n-/// Returns the positon just before rarrow\n+/// Returns the position just before rarrow\n ///\n /// ```rust,ignore\n /// fn into(self) -> () {}"}, {"sha": "dd1d441203600cf6f3d124177a4ef29f1ea0d67c", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -66,7 +66,7 @@ fn lint_message_convention() {\n \n     // make sure that lint messages:\n     // * are not capitalized\n-    // * don't have puncuation at the end of the last sentence\n+    // * don't have punctuation at the end of the last sentence\n \n     // these directories have interesting tests\n     let test_dirs = [\"ui\", \"ui-cargo\", \"ui-internal\", \"ui-toml\"]"}, {"sha": "ed7b17651e675e8942bceb5867087398b282eff2", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ef80c78a0f9c58607944e50d3240eee2b7cdc7/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=29ef80c78a0f9c58607944e50d3240eee2b7cdc7", "patch": "@@ -13,7 +13,7 @@ use proc_macro::{quote, TokenStream};\n \n #[proc_macro_derive(DeriveSomething)]\n pub fn derive(_: TokenStream) -> TokenStream {\n-    // Shound not trigger `used_underscore_binding`\n+    // Should not trigger `used_underscore_binding`\n     let _inside_derive = 1;\n     assert_eq!(_inside_derive, _inside_derive);\n "}]}