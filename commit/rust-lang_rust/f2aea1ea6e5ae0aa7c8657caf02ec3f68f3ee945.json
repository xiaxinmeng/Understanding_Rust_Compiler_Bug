{"sha": "f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "node_id": "C_kwDOAAsO6NoAKGYyYWVhMWVhNmU1YWUwYWE3Yzg2NTdjYWYwMmVjM2Y2OGYzZWU5NDU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-11T15:12:22Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-14T06:37:15Z"}, "message": "further update `fuzzy_match_tys`", "tree": {"sha": "f71fe2c9c929e8fc8d296a4a3b525718ae5e50a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71fe2c9c929e8fc8d296a4a3b525718ae5e50a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "html_url": "https://github.com/rust-lang/rust/commit/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0efc6c02cbb0d4de6ee15ef5463958904f95c05d", "html_url": "https://github.com/rust-lang/rust/commit/0efc6c02cbb0d4de6ee15ef5463958904f95c05d"}], "stats": {"total": 177, "additions": 111, "deletions": 66}, "files": [{"sha": "cd0a62af72f322f9426ffd483730a9ee1f3118cb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 52, "deletions": 34, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -40,10 +40,13 @@ use suggestions::InferCtxtExt as _;\n pub use rustc_infer::traits::error_reporting::*;\n \n // When outputting impl candidates, prefer showing those that are more similar.\n+//\n+// We also compare candidates after skipping lifetimes, which has a lower\n+// priority than exact matches.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub enum CandidateSimilarity {\n-    Exact,\n-    Fuzzy,\n+    Exact { ignoring_lifetimes: bool },\n+    Fuzzy { ignoring_lifetimes: bool },\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -1155,7 +1158,12 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         error: &MismatchedProjectionTypes<'tcx>,\n     );\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool;\n+    fn fuzzy_match_tys(\n+        &self,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+        ignoring_lifetimes: bool,\n+    ) -> Option<CandidateSimilarity>;\n \n     fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str>;\n \n@@ -1458,24 +1466,32 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+    fn fuzzy_match_tys(\n+        &self,\n+        mut a: Ty<'tcx>,\n+        mut b: Ty<'tcx>,\n+        ignoring_lifetimes: bool,\n+    ) -> Option<CandidateSimilarity> {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n-        fn type_category(t: Ty<'_>) -> Option<u32> {\n+        fn type_category(tcx: TyCtxt<'_>, t: Ty<'_>) -> Option<u32> {\n             match t.kind() {\n                 ty::Bool => Some(0),\n                 ty::Char => Some(1),\n                 ty::Str => Some(2),\n-                ty::Int(..) | ty::Uint(..) | ty::Infer(ty::IntVar(..)) => Some(3),\n-                ty::Float(..) | ty::Infer(ty::FloatVar(..)) => Some(4),\n+                ty::Adt(def, _) if tcx.is_diagnostic_item(sym::String, def.did) => Some(2),\n+                ty::Int(..)\n+                | ty::Uint(..)\n+                | ty::Float(..)\n+                | ty::Infer(ty::IntVar(..) | ty::FloatVar(..)) => Some(4),\n                 ty::Ref(..) | ty::RawPtr(..) => Some(5),\n                 ty::Array(..) | ty::Slice(..) => Some(6),\n                 ty::FnDef(..) | ty::FnPtr(..) => Some(7),\n                 ty::Dynamic(..) => Some(8),\n                 ty::Closure(..) => Some(9),\n                 ty::Tuple(..) => Some(10),\n-                ty::Projection(..) => Some(11),\n-                ty::Param(..) => Some(12),\n+                ty::Param(..) => Some(11),\n+                ty::Projection(..) => Some(12),\n                 ty::Opaque(..) => Some(13),\n                 ty::Never => Some(14),\n                 ty::Adt(..) => Some(15),\n@@ -1497,17 +1513,33 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        match (type_category(a), type_category(b)) {\n-            (Some(cat_a), Some(cat_b)) => match (a.kind(), b.kind()) {\n+        if !ignoring_lifetimes {\n+            a = strip_references(a);\n+            b = strip_references(b);\n+        }\n+\n+        let cat_a = type_category(self.tcx, a)?;\n+        let cat_b = type_category(self.tcx, b)?;\n+        if a == b {\n+            Some(CandidateSimilarity::Exact { ignoring_lifetimes })\n+        } else if cat_a == cat_b {\n+            match (a.kind(), b.kind()) {\n                 (ty::Adt(def_a, _), ty::Adt(def_b, _)) => def_a == def_b,\n-                _ if cat_a == cat_b => true,\n-                (ty::Ref(..), _) | (_, ty::Ref(..)) => {\n-                    self.fuzzy_match_tys(strip_references(a), strip_references(b))\n+                // Matching on references results in a lot of unhelpful\n+                // suggestions, so let's just not do that for now.\n+                //\n+                // We still upgrade successful matches to `ignoring_lifetimes: true`\n+                // to prioritize that impl.\n+                (ty::Ref(..) | ty::RawPtr(..), ty::Ref(..) | ty::RawPtr(..)) => {\n+                    self.fuzzy_match_tys(a, b, true).is_some()\n                 }\n-                _ => false,\n-            },\n-            // infer and error can be equated to all types\n-            _ => true,\n+                _ => true,\n+            }\n+            .then_some(CandidateSimilarity::Fuzzy { ignoring_lifetimes })\n+        } else if ignoring_lifetimes {\n+            None\n+        } else {\n+            self.fuzzy_match_tys(a, b, true)\n         }\n     }\n \n@@ -1533,22 +1565,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n \n-                // Check for exact match.\n-                if trait_ref.skip_binder().self_ty() == imp.self_ty() {\n-                    return Some(ImplCandidate {\n-                        trait_ref: imp,\n-                        similarity: CandidateSimilarity::Exact,\n-                    });\n-                }\n-\n-                if self.fuzzy_match_tys(trait_ref.skip_binder().self_ty(), imp.self_ty()) {\n-                    return Some(ImplCandidate {\n-                        trait_ref: imp,\n-                        similarity: CandidateSimilarity::Fuzzy,\n-                    });\n-                }\n-\n-                None\n+                self.fuzzy_match_tys(trait_ref.skip_binder().self_ty(), imp.self_ty(), false)\n+                    .map(|similarity| ImplCandidate { trait_ref: imp, similarity })\n             })\n             .collect()\n     }"}, {"sha": "4b6ffa8869dbaa1214d2b6607cce702afc161570", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     trait_ref.substs.types().skip(1),\n                     impl_trait_ref.substs.types().skip(1),\n                 )\n-                .all(|(u, v)| self.fuzzy_match_tys(u, v))\n+                .all(|(u, v)| self.fuzzy_match_tys(u, v, false).is_some())\n                 {\n                     fuzzy_match_impls.push(def_id);\n                 }"}, {"sha": "ec28ca240be2b5b9a4bc30e3790d88450323e0fb", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-1.rs:3:33\n    |"}, {"sha": "e48ef8d17d1dee70af4f5adb426020fc61c97cac", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type V = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Y`\n   --> $DIR/hr-associated-type-bound-param-1.rs:4:36\n    |"}, {"sha": "2fb3af38c0d9b391dcef3b3aac6bc005b4a732e9", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n@@ -19,6 +21,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n@@ -34,6 +38,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type W = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |"}, {"sha": "775f45ca82965020718cc52863323b1fe57793c8", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-3.rs:4:33\n    |"}, {"sha": "4e9b64ba832adb19be7e4ce2c532751b2a56fed7", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-4.rs:4:36\n    |"}, {"sha": "d00abf30d3b053d0fd487fb53e6d58b90a048661", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n@@ -19,6 +21,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     type U = str;\n    |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |"}, {"sha": "397bdac60513e7f2d1a77e59bc5e9fa0f9c4bf1c", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n LL |   b + 3\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n+   = help: the following implementations were found:\n+             <f64 as Scalar>\n note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n   --> $DIR/issue-22645.rs:8:19\n    |"}, {"sha": "7b0b3f85b39158d27ffcf442e33772ab3eec2db2", "filename": "src/test/ui/chalkify/chalk_initial_program.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,9 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL |     gimme::<f32>();\n    |             ^^^ the trait `Foo` is not implemented for `f32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n+             <u32 as Foo>\n note: required by a bound in `gimme`\n   --> $DIR/chalk_initial_program.rs:9:13\n    |"}, {"sha": "2bc9f077f0285dc817d2b83e59684db0b51cb2c4", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -17,6 +17,8 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `Baz`\n   --> $DIR/impl_wf.rs:18:31\n    |"}, {"sha": "30cec80b036c629ea13bc92b043e718949de0f6a", "filename": "src/test/ui/chalkify/impl_wf_2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `f32: Foo` is not satisfied\n LL |     type Item = f32;\n    |                 ^^^ the trait `Foo` is not implemented for `f32`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `Bar::Item`\n   --> $DIR/impl_wf_2.rs:8:16\n    |"}, {"sha": "14d43c1474c575b92a3ed7ffd9655e6cca54a5a9", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -6,6 +6,9 @@ LL |     only_bar(x);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <i32 as Bar>\n+             <u32 as Bar>\n note: required by a bound in `only_bar`\n   --> $DIR/type_inference.rs:12:16\n    |"}, {"sha": "6abd8b28760d8261b2c21965a56bf57cb7eadc7f", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `{float}: Foo` is not satisfied\n LL |     let s = S {\n    |             ^ the trait `Foo` is not implemented for `{float}`\n    |\n+   = help: the following implementations were found:\n+             <i32 as Foo>\n note: required by a bound in `S`\n   --> $DIR/type_wf.rs:6:13\n    |"}, {"sha": "e147366a22410bf6e903f0639f4eae3468bdd3d4", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -5,11 +5,11 @@ LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n    = help: the following implementations were found:\n-             <&T as Copy>\n-             <*const T as Copy>\n-             <*mut T as Copy>\n+             <isize as Copy>\n+             <f32 as Copy>\n+             <f64 as Copy>\n              <i128 as Copy>\n-           and 11 others\n+           and 10 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -23,11 +23,11 @@ LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n    = help: the following implementations were found:\n-             <&T as Copy>\n-             <*const T as Copy>\n-             <*mut T as Copy>\n+             <isize as Copy>\n+             <f32 as Copy>\n+             <f64 as Copy>\n              <i128 as Copy>\n-           and 11 others\n+           and 10 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -112,10 +112,6 @@ error[E0277]: the trait bound `&'a mut (dyn Dummy + Send + 'a): Copy` is not sat\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut (dyn Dummy + Send + 'a)`\n    |\n-   = help: the following implementations were found:\n-             <&T as Copy>\n-             <*const T as Copy>\n-             <*mut T as Copy>\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "f88acfb2e793e67e5a2df449b55c317ad77e2017", "filename": "src/test/ui/specialization/default-associated-type-bound-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-1.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -14,6 +14,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     default type U = str;\n    |                      ^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `X::U`\n   --> $DIR/default-associated-type-bound-1.rs:8:13\n    |"}, {"sha": "470c0bfcf73e515e7f0c83bbd7e25528e5a08eeb", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -7,6 +7,12 @@ LL |     foo(String::new());\n    |     required by a bound introduced by this call\n    |\n    = note: to coerce a `String` into a `&str`, use `&*` as a prefix\n+   = help: the following implementations were found:\n+             <String as From<&String>>\n+             <String as From<&mut str>>\n+             <String as From<&str>>\n+             <String as From<Box<str>>>\n+           and 2 others\n    = note: required because of the requirements on the impl of `Into<&str>` for `String`\n note: required by a bound in `foo`\n   --> $DIR/into-str.rs:1:31"}, {"sha": "bacab64e2642c0e9ed554295cd25316bd9486a37", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -6,6 +6,8 @@ LL |     bar(a);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&f32 as Tr>\n note: required by a bound in `bar`\n   --> $DIR/issue-84973-negative.rs:5:11\n    |"}, {"sha": "d121932c842e35324a8a8f1060e4713f8dd8ab0c", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -6,12 +6,6 @@ LL |     let fp = BufWriter::new(fp);\n    |              |\n    |              required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <&'a UnixStream as std::io::Write>\n-             <&ChildStdin as std::io::Write>\n-             <&File as std::io::Write>\n-             <&Sink as std::io::Write>\n-           and 5 others\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter::<W>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n@@ -25,12 +19,6 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    |\n-   = help: the following implementations were found:\n-             <&'a UnixStream as std::io::Write>\n-             <&ChildStdin as std::io::Write>\n-             <&File as std::io::Write>\n-             <&Sink as std::io::Write>\n-           and 5 others\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL"}, {"sha": "907a1bd75a06448c81feff245bb30c5f5a2085bf", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-1.rs:7:9\n    |"}, {"sha": "b27f8d791a50f29d9ca246269e80cdf132b74d99", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -4,6 +4,8 @@ error[E0277]: the trait bound `str: Clone` is not satisfied\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n+   = help: the following implementations were found:\n+             <String as Clone>\n note: required by a bound in `f`\n   --> $DIR/check-trait-object-bounds-4.rs:10:9\n    |"}, {"sha": "413225d45a62ce6d6cd8d24a7e97c0c3296afb0e", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -44,6 +44,7 @@ LL |     opts.get(<String as AsRef<[u8]>>::as_ref(opt));\n    |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     opts.get(<String as AsRef<str>>::as_ref(opt));\n    |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     and 4 other candidates\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:13:44"}, {"sha": "bf9f85f1b4595ec4d2c541145af0b83ffd637068", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -8,8 +8,6 @@ LL |     foo(&baz);\n    |     |   help: consider adding dereference here: `&***baz`\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <&LDM as Happy>\n note: required by a bound in `foo`\n   --> $DIR/multiple-0.rs:30:26\n    |"}, {"sha": "040fbb3e3e699813fae132946c7076eddfcd92d2", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -6,8 +6,6 @@ LL |     foo(&mut baz);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <&mut LDM as Happy>\n note: required by a bound in `foo`\n   --> $DIR/multiple-1.rs:45:26\n    |"}, {"sha": "171051156b7f242e93a42406afd8761d3e2a5a0e", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=f2aea1ea6e5ae0aa7c8657caf02ec3f68f3ee945", "patch": "@@ -10,9 +10,9 @@ LL |     Ok(Err(123_i32)?)\n    = help: the following implementations were found:\n              <u8 as From<NonZeroU8>>\n              <u8 as From<bool>>\n-             <i128 as From<NonZeroI128>>\n-             <i128 as From<bool>>\n-           and 60 others\n+             <f32 as From<i16>>\n+             <f32 as From<i8>>\n+           and 71 others\n    = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n \n error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`"}]}