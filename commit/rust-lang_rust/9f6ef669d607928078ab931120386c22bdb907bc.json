{"sha": "9f6ef669d607928078ab931120386c22bdb907bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmVmNjY5ZDYwNzkyODA3OGFiOTMxMTIwMzg2YzIyYmRiOTA3YmM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-07-03T16:40:20Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-08-16T13:53:27Z"}, "message": "Added dataflow analysis for `Borrows`.\n\npost-rebase: addressed review comment: rename `loc_map`/`location_map` and `rgn_map`/`region_map`.\n\npost-rebase: remove now unnecessary `mut` decl.\n\npost-rebase: address comments: bind iterator expr, and alpha-rename `loc`/`location` and `idx`/`index`.", "tree": {"sha": "9b525bd3158a50631cb450989bfbc5042792b3d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b525bd3158a50631cb450989bfbc5042792b3d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6ef669d607928078ab931120386c22bdb907bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6ef669d607928078ab931120386c22bdb907bc", "html_url": "https://github.com/rust-lang/rust/commit/9f6ef669d607928078ab931120386c22bdb907bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6ef669d607928078ab931120386c22bdb907bc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff060b960b53d6f8d869be9e3823c4920dadaee", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff060b960b53d6f8d869be9e3823c4920dadaee", "html_url": "https://github.com/rust-lang/rust/commit/cff060b960b53d6f8d869be9e3823c4920dadaee"}], "stats": {"total": 188, "additions": 187, "deletions": 1}, "files": [{"sha": "ab62342e607dd07e5a68eb78d196a76bdee87826", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=9f6ef669d607928078ab931120386c22bdb907bc", "patch": "@@ -0,0 +1,180 @@\n+// Copyright 2012-2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::mir::{self, Location, Mir};\n+use rustc::mir::visit::Visitor;\n+use rustc::ty::{Region, TyCtxt};\n+use rustc::ty::RegionKind::ReScope;\n+use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+\n+use rustc_data_structures::bitslice::{BitwiseOperator};\n+use rustc_data_structures::indexed_set::{IdxSet};\n+use rustc_data_structures::indexed_vec::{IndexVec};\n+\n+use dataflow::{BitDenotation, BlockSets, DataflowOperator};\n+pub use dataflow::indexes::BorrowIndex;\n+\n+use std::fmt;\n+\n+// `Borrows` maps each dataflow bit to an `Rvalue::Ref`, which can be\n+// uniquely identified in the MIR by the `Location` of the assigment\n+// statement in which it appears on the right hand side.\n+pub struct Borrows<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    borrows: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n+    location_map: FxHashMap<Location, BorrowIndex>,\n+    region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n+}\n+\n+// temporarily allow some dead fields: `kind` and `region` will be\n+// needed by borrowck; `lvalue` will probably be a MovePathIndex when\n+// that is extended to include borrowed data paths.\n+#[allow(dead_code)]\n+#[derive(Debug)]\n+pub struct BorrowData<'tcx> {\n+    pub(crate) location: Location,\n+    pub(crate) kind: mir::BorrowKind,\n+    pub(crate) region: Region<'tcx>,\n+    pub(crate) lvalue: mir::Lvalue<'tcx>,\n+}\n+\n+impl<'tcx> fmt::Display for BorrowData<'tcx> {\n+    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+        let kind = match self.kind {\n+            mir::BorrowKind::Shared => \"\",\n+            mir::BorrowKind::Unique => \"uniq \",\n+            mir::BorrowKind::Mut => \"mut \",\n+        };\n+        let region = format!(\"{}\", self.region);\n+        let region = if region.len() > 0 { format!(\"{} \", region) } else { region };\n+        write!(w, \"&{}{}{:?}\", region, kind, self.lvalue)\n+    }\n+}\n+\n+impl<'a, 'tcx> Borrows<'a, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &'a Mir<'tcx>) -> Self {\n+        let mut visitor = GatherBorrows { idx_vec: IndexVec::new(),\n+                                          location_map: FxHashMap(),\n+                                          region_map: FxHashMap(), };\n+        visitor.visit_mir(mir);\n+        return Borrows { tcx: tcx,\n+                         mir: mir,\n+                         borrows: visitor.idx_vec,\n+                         location_map: visitor.location_map,\n+                         region_map: visitor.region_map, };\n+\n+        struct GatherBorrows<'tcx> {\n+            idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n+            location_map: FxHashMap<Location, BorrowIndex>,\n+            region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n+        }\n+        impl<'tcx> Visitor<'tcx> for GatherBorrows<'tcx> {\n+            fn visit_rvalue(&mut self,\n+                            rvalue: &mir::Rvalue<'tcx>,\n+                            location: mir::Location) {\n+                if let mir::Rvalue::Ref(region, kind, ref lvalue) = *rvalue {\n+                    let borrow = BorrowData {\n+                        location: location, kind: kind, region: region, lvalue: lvalue.clone(),\n+                    };\n+                    let idx = self.idx_vec.push(borrow);\n+                    self.location_map.insert(location, idx);\n+                    let borrows = self.region_map.entry(region).or_insert(FxHashSet());\n+                    borrows.insert(idx);\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn borrows(&self) -> &IndexVec<BorrowIndex, BorrowData<'tcx>> { &self.borrows }\n+\n+    pub fn location(&self, idx: BorrowIndex) -> &Location {\n+        &self.borrows[idx].location\n+    }\n+}\n+\n+impl<'a, 'tcx> BitDenotation for Borrows<'a, 'tcx> {\n+    type Idx = BorrowIndex;\n+    fn name() -> &'static str { \"borrows\" }\n+    fn bits_per_block(&self) -> usize {\n+        self.borrows.len()\n+    }\n+    fn start_block_effect(&self, _sets: &mut BlockSets<BorrowIndex>)  {\n+        // no borrows of code extents have been taken prior to\n+        // function execution, so this method has no effect on\n+        // `_sets`.\n+    }\n+    fn statement_effect(&self,\n+                        sets: &mut BlockSets<BorrowIndex>,\n+                        location: Location) {\n+        let block = &self.mir.basic_blocks().get(location.block).unwrap_or_else(|| {\n+            panic!(\"could not find block at location {:?}\", location);\n+        });\n+        let stmt = block.statements.get(location.statement_index).unwrap_or_else(|| {\n+            panic!(\"could not find statement at location {:?}\");\n+        });\n+        match stmt.kind {\n+            mir::StatementKind::EndRegion(extent) => {\n+                let borrow_indexes = self.region_map.get(&ReScope(extent)).unwrap_or_else(|| {\n+                    panic!(\"could not find BorrowIndexs for code-extent {:?}\", extent);\n+                });\n+\n+                for idx in borrow_indexes { sets.kill(&idx); }\n+            }\n+\n+            mir::StatementKind::Assign(_, ref rhs) => {\n+                if let mir::Rvalue::Ref(region, _, _) = *rhs {\n+                    let index = self.location_map.get(&location).unwrap_or_else(|| {\n+                        panic!(\"could not find BorrowIndex for location {:?}\", location);\n+                    });\n+                    assert!(self.region_map.get(region).unwrap_or_else(|| {\n+                        panic!(\"could not find BorrowIndexs for region {:?}\", region);\n+                    }).contains(&index));\n+                    sets.gen(&index);\n+                }\n+            }\n+\n+            mir::StatementKind::InlineAsm { .. } |\n+            mir::StatementKind::SetDiscriminant { .. } |\n+            mir::StatementKind::StorageLive(..) |\n+            mir::StatementKind::StorageDead(..) |\n+            mir::StatementKind::Validate(..) |\n+            mir::StatementKind::Nop => {}\n+\n+        }\n+    }\n+    fn terminator_effect(&self,\n+                         _sets: &mut BlockSets<BorrowIndex>,\n+                         _location: Location) {\n+        // no terminators start nor end code extents.\n+    }\n+\n+    fn propagate_call_return(&self,\n+                             _in_out: &mut IdxSet<BorrowIndex>,\n+                             _call_bb: mir::BasicBlock,\n+                             _dest_bb: mir::BasicBlock,\n+                             _dest_lval: &mir::Lvalue) {\n+        // there are no effects on the extents from method calls.\n+    }\n+}\n+\n+impl<'a, 'tcx> BitwiseOperator for Borrows<'a, 'tcx> {\n+    #[inline]\n+    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+        pred1 | pred2 // union effects of preds when computing borrows\n+    }\n+}\n+\n+impl<'a, 'tcx> DataflowOperator for Borrows<'a, 'tcx> {\n+    #[inline]\n+    fn bottom_value() -> bool {\n+        false // bottom = no Rvalue::Refs are active by default\n+    }\n+}"}, {"sha": "c7c66e1bb2b070cff15a2c6fc315027d8494183d", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=9f6ef669d607928078ab931120386c22bdb907bc", "patch": "@@ -30,6 +30,9 @@ use super::drop_flag_effects_for_function_entry;\n use super::drop_flag_effects_for_location;\n use super::on_lookup_result_bits;\n \n+#[allow(dead_code)]\n+pub(super) mod borrows;\n+\n /// `MaybeInitializedLvals` tracks all l-values that might be\n /// initialized upon reaching a particular point in the control flow\n /// for a function."}, {"sha": "6e44a36aa01e8e36fdd0f3d14ed44cc8a1a0b942", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=9f6ef669d607928078ab931120386c22bdb907bc", "patch": "@@ -25,7 +25,7 @@ use std::usize;\n \n pub use self::impls::{MaybeInitializedLvals, MaybeUninitializedLvals};\n pub use self::impls::{DefinitelyInitializedLvals, MovingOutStatements};\n-\n+pub use self::impls::borrows::{Borrows, BorrowData, BorrowIndex};\n pub(crate) use self::drop_flag_effects::*;\n \n mod drop_flag_effects;"}, {"sha": "0685b1dc256718c7c357cfa59a5f57dee30b7f92", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6ef669d607928078ab931120386c22bdb907bc/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=9f6ef669d607928078ab931120386c22bdb907bc", "patch": "@@ -63,6 +63,9 @@ pub(crate) mod indexes {\n \n     /// Index into MoveData.moves.\n     new_index!(MoveOutIndex, \"mo\");\n+\n+    /// Index into Borrows.locations\n+    new_index!(BorrowIndex, \"bw\");\n }\n \n pub use self::indexes::MovePathIndex;"}]}