{"sha": "44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Y2I0NmY3YmZiODY5Y2M0NGYwNGJjOTNlZTExYzUwMjdiZTJjMzM=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-14T01:24:55Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-14T01:24:55Z"}, "message": "Add ldexp and frexp functions", "tree": {"sha": "c5180e007f5ebb8ac85dbfdd7c32e1db234a44a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5180e007f5ebb8ac85dbfdd7c32e1db234a44a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "html_url": "https://github.com/rust-lang/rust/commit/44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4d2b00c551301348cc09583498c02fdfbd64d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4d2b00c551301348cc09583498c02fdfbd64d7", "html_url": "https://github.com/rust-lang/rust/commit/8d4d2b00c551301348cc09583498c02fdfbd64d7"}], "stats": {"total": 185, "additions": 184, "deletions": 1}, "files": [{"sha": "cb9ea94b315de87b2ae6880d14bc8774a167022b", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "patch": "@@ -10,6 +10,7 @@\n \n //! Operations and constants for `f32`\n \n+use libc::c_int;\n use num::{Zero, One, strconv};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n use prelude::*;\n@@ -672,6 +673,25 @@ impl Float for f32 {\n     #[inline(always)]\n     fn max_10_exp() -> int { 38 }\n \n+    /// Constructs a floating point number by multiplying `x` by 2 raised to the power of `exp`\n+    #[inline(always)]\n+    fn ldexp(x: f32, exp: int) -> f32 {\n+        ldexp(x, exp as c_int)\n+    }\n+\n+    ///\n+    /// Breaks the number into a normalized fraction and a base-2 exponent, satisfying:\n+    ///\n+    /// - `self = x * pow(2, exp)`\n+    /// - `0.5 <= abs(x) < 1.0`\n+    ///\n+    #[inline(always)]\n+    fn frexp(&self) -> (f32, int) {\n+        let mut exp = 0;\n+        let x = frexp(*self, &mut exp);\n+        (x, exp as int)\n+    }\n+\n     ///\n     /// Returns the exponential of the number, minus `1`, in a way that is accurate\n     /// even if the number is close to zero\n@@ -1180,4 +1200,44 @@ mod tests {\n         assert_eq!(1e-37f32.classify(), FPNormal);\n         assert_eq!(1e-38f32.classify(), FPSubnormal);\n     }\n+\n+    #[test]\n+    fn test_ldexp() {\n+        // We have to use from_str until base-2 exponents\n+        // are supported in floating-point literals\n+        let f1: f32 = from_str_hex(\"1p-123\").unwrap();\n+        let f2: f32 = from_str_hex(\"1p-111\").unwrap();\n+        assert_eq!(Float::ldexp(1f32, -123), f1);\n+        assert_eq!(Float::ldexp(1f32, -111), f2);\n+\n+        assert_eq!(Float::ldexp(0f32, -123), 0f32);\n+        assert_eq!(Float::ldexp(-0f32, -123), -0f32);\n+        assert_eq!(Float::ldexp(Float::infinity::<f32>(), -123),\n+                   Float::infinity::<f32>());\n+        assert_eq!(Float::ldexp(Float::neg_infinity::<f32>(), -123),\n+                   Float::neg_infinity::<f32>());\n+        assert!(Float::ldexp(Float::NaN::<f32>(), -123).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_frexp() {\n+        // We have to use from_str until base-2 exponents\n+        // are supported in floating-point literals\n+        let f1: f32 = from_str_hex(\"1p-123\").unwrap();\n+        let f2: f32 = from_str_hex(\"1p-111\").unwrap();\n+        let (x1, exp1) = f1.frexp();\n+        let (x2, exp2) = f2.frexp();\n+        assert_eq!((x1, exp1), (0.5f32, -122));\n+        assert_eq!((x2, exp2), (0.5f32, -110));\n+        assert_eq!(Float::ldexp(x1, exp1), f1);\n+        assert_eq!(Float::ldexp(x2, exp2), f2);\n+\n+        assert_eq!(0f32.frexp(), (0f32, 0));\n+        assert_eq!((-0f32).frexp(), (-0f32, 0));\n+        assert_eq!(match Float::infinity::<f32>().frexp() { (x, _) => x },\n+                   Float::infinity::<f32>())\n+        assert_eq!(match Float::neg_infinity::<f32>().frexp() { (x, _) => x },\n+                   Float::neg_infinity::<f32>())\n+        assert!(match Float::NaN::<f32>().frexp() { (x, _) => x.is_NaN() })\n+    }\n }"}, {"sha": "c9c1bad65f27e66486dc2ba4d1abe7c4c3d32311", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "patch": "@@ -715,6 +715,25 @@ impl Float for f64 {\n     #[inline(always)]\n     fn max_10_exp() -> int { 308 }\n \n+    /// Constructs a floating point number by multiplying `x` by 2 raised to the power of `exp`\n+    #[inline(always)]\n+    fn ldexp(x: f64, exp: int) -> f64 {\n+        ldexp(x, exp as c_int)\n+    }\n+\n+    ///\n+    /// Breaks the number into a normalized fraction and a base-2 exponent, satisfying:\n+    ///\n+    /// - `self = x * pow(2, exp)`\n+    /// - `0.5 <= abs(x) < 1.0`\n+    ///\n+    #[inline(always)]\n+    fn frexp(&self) -> (f64, int) {\n+        let mut exp = 0;\n+        let x = frexp(*self, &mut exp);\n+        (x, exp as int)\n+    }\n+\n     ///\n     /// Returns the exponential of the number, minus `1`, in a way that is accurate\n     /// even if the number is close to zero\n@@ -1226,4 +1245,44 @@ mod tests {\n         assert_eq!(1e-307f64.classify(), FPNormal);\n         assert_eq!(1e-308f64.classify(), FPSubnormal);\n     }\n+\n+    #[test]\n+    fn test_ldexp() {\n+        // We have to use from_str until base-2 exponents\n+        // are supported in floating-point literals\n+        let f1: f64 = from_str_hex(\"1p-123\").unwrap();\n+        let f2: f64 = from_str_hex(\"1p-111\").unwrap();\n+        assert_eq!(Float::ldexp(1f64, -123), f1);\n+        assert_eq!(Float::ldexp(1f64, -111), f2);\n+\n+        assert_eq!(Float::ldexp(0f64, -123), 0f64);\n+        assert_eq!(Float::ldexp(-0f64, -123), -0f64);\n+        assert_eq!(Float::ldexp(Float::infinity::<f64>(), -123),\n+                   Float::infinity::<f64>());\n+        assert_eq!(Float::ldexp(Float::neg_infinity::<f64>(), -123),\n+                   Float::neg_infinity::<f64>());\n+        assert!(Float::ldexp(Float::NaN::<f64>(), -123).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_frexp() {\n+        // We have to use from_str until base-2 exponents\n+        // are supported in floating-point literals\n+        let f1: f64 = from_str_hex(\"1p-123\").unwrap();\n+        let f2: f64 = from_str_hex(\"1p-111\").unwrap();\n+        let (x1, exp1) = f1.frexp();\n+        let (x2, exp2) = f2.frexp();\n+        assert_eq!((x1, exp1), (0.5f64, -122));\n+        assert_eq!((x2, exp2), (0.5f64, -110));\n+        assert_eq!(Float::ldexp(x1, exp1), f1);\n+        assert_eq!(Float::ldexp(x2, exp2), f2);\n+\n+        assert_eq!(0f64.frexp(), (0f64, 0));\n+        assert_eq!((-0f64).frexp(), (-0f64, 0));\n+        assert_eq!(match Float::infinity::<f64>().frexp() { (x, _) => x },\n+                   Float::infinity::<f64>())\n+        assert_eq!(match Float::neg_infinity::<f64>().frexp() { (x, _) => x },\n+                   Float::neg_infinity::<f64>())\n+        assert!(match Float::NaN::<f64>().frexp() { (x, _) => x.is_NaN() })\n+    }\n }"}, {"sha": "22abc76c3d328197918ad23fd8c7ed5275e680ce", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "patch": "@@ -881,6 +881,25 @@ impl Float for float {\n     #[inline(always)]\n     fn max_10_exp() -> int { Float::max_10_exp::<f64>() }\n \n+    /// Constructs a floating point number by multiplying `x` by 2 raised to the power of `exp`\n+    #[inline(always)]\n+    fn ldexp(x: float, exp: int) -> float {\n+        Float::ldexp(x as f64, exp) as float\n+    }\n+\n+    ///\n+    /// Breaks the number into a normalized fraction and a base-2 exponent, satisfying:\n+    ///\n+    /// - `self = x * pow(2, exp)`\n+    /// - `0.5 <= abs(x) < 1.0`\n+    ///\n+    #[inline(always)]\n+    fn frexp(&self) -> (float, int) {\n+        match (*self as f64).frexp() {\n+            (x, exp) => (x as float, exp)\n+        }\n+    }\n+\n     ///\n     /// Returns the exponential of the number, minus `1`, in a way that is accurate\n     /// even if the number is close to zero\n@@ -895,7 +914,9 @@ impl Float for float {\n     /// than if the operations were performed separately\n     ///\n     #[inline(always)]\n-    fn ln_1p(&self) -> float { (*self as f64).ln_1p() as float }\n+    fn ln_1p(&self) -> float {\n+        (*self as f64).ln_1p() as float\n+    }\n \n     ///\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This\n@@ -1174,6 +1195,46 @@ mod tests {\n         assert_eq!(1e-308f.classify(), FPSubnormal);\n     }\n \n+    #[test]\n+    fn test_ldexp() {\n+        // We have to use from_str until base-2 exponents\n+        // are supported in floating-point literals\n+        let f1: float = from_str_hex(\"1p-123\").unwrap();\n+        let f2: float = from_str_hex(\"1p-111\").unwrap();\n+        assert_eq!(Float::ldexp(1f, -123), f1);\n+        assert_eq!(Float::ldexp(1f, -111), f2);\n+\n+        assert_eq!(Float::ldexp(0f, -123), 0f);\n+        assert_eq!(Float::ldexp(-0f, -123), -0f);\n+        assert_eq!(Float::ldexp(Float::infinity::<float>(), -123),\n+                   Float::infinity::<float>());\n+        assert_eq!(Float::ldexp(Float::neg_infinity::<float>(), -123),\n+                   Float::neg_infinity::<float>());\n+        assert!(Float::ldexp(Float::NaN::<float>(), -123).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_frexp() {\n+        // We have to use from_str until base-2 exponents\n+        // are supported in floating-point literals\n+        let f1: float = from_str_hex(\"1p-123\").unwrap();\n+        let f2: float = from_str_hex(\"1p-111\").unwrap();\n+        let (x1, exp1) = f1.frexp();\n+        let (x2, exp2) = f2.frexp();\n+        assert_eq!((x1, exp1), (0.5f, -122));\n+        assert_eq!((x2, exp2), (0.5f, -110));\n+        assert_eq!(Float::ldexp(x1, exp1), f1);\n+        assert_eq!(Float::ldexp(x2, exp2), f2);\n+\n+        assert_eq!(0f.frexp(), (0f, 0));\n+        assert_eq!((-0f).frexp(), (-0f, 0));\n+        assert_eq!(match Float::infinity::<float>().frexp() { (x, _) => x },\n+                   Float::infinity::<float>())\n+        assert_eq!(match Float::neg_infinity::<float>().frexp() { (x, _) => x },\n+                   Float::neg_infinity::<float>())\n+        assert!(match Float::NaN::<float>().frexp() { (x, _) => x.is_NaN() })\n+    }\n+\n     #[test]\n     pub fn test_to_str_exact_do_decimal() {\n         let s = to_str_exact(5.0, 4u);"}, {"sha": "a15a8f1a2153eb3b924f49d84f6b8bebf6d335e9", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cb46f7bfb869cc44f04bc93ee11c5027be2c33/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=44cb46f7bfb869cc44f04bc93ee11c5027be2c33", "patch": "@@ -284,6 +284,9 @@ pub trait Float: Real\n     fn min_10_exp() -> int;\n     fn max_10_exp() -> int;\n \n+    fn ldexp(x: Self, exp: int) -> Self;\n+    fn frexp(&self) -> (Self, int);\n+\n     fn exp_m1(&self) -> Self;\n     fn ln_1p(&self) -> Self;\n     fn mul_add(&self, a: Self, b: Self) -> Self;"}]}