{"sha": "fac272688e9d561b1fff71621323682d23e4c31d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYzI3MjY4OGU5ZDU2MWIxZmZmNzE2MjEzMjM2ODJkMjNlNGMzMWQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T07:59:41Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T08:45:10Z"}, "message": "Use ops::ControlFlow in graph::iterate", "tree": {"sha": "6747b9151fd1a33ce4f6fe290c06c51db6257325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6747b9151fd1a33ce4f6fe290c06c51db6257325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac272688e9d561b1fff71621323682d23e4c31d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac272688e9d561b1fff71621323682d23e4c31d", "html_url": "https://github.com/rust-lang/rust/commit/fac272688e9d561b1fff71621323682d23e4c31d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac272688e9d561b1fff71621323682d23e4c31d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0f6b113047b2cf9afbde990cee30fd5b866469", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0f6b113047b2cf9afbde990cee30fd5b866469", "html_url": "https://github.com/rust-lang/rust/commit/0d0f6b113047b2cf9afbde990cee30fd5b866469"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "8946666d961424b356ef1b5563a254dbfdb2b496", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -87,11 +87,8 @@ where\n }\n \n /// Allows searches to terminate early with a value.\n-#[derive(Clone, Copy, Debug)]\n-pub enum ControlFlow<T> {\n-    Break(T),\n-    Continue,\n-}\n+// FIXME (#75744): remove the alias once the generics are in a better order and `C=()`.\n+pub type ControlFlow<T> = std::ops::ControlFlow<(), T>;\n \n /// The status of a node in the depth-first search.\n ///\n@@ -260,12 +257,12 @@ where\n         _node: G::Node,\n         _prior_status: Option<NodeStatus>,\n     ) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     /// Called after all nodes reachable from this one have been examined.\n     fn node_settled(&mut self, _node: G::Node) -> ControlFlow<Self::BreakVal> {\n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     /// Behave as if no edges exist from `source` to `target`.\n@@ -290,7 +287,7 @@ where\n     ) -> ControlFlow<Self::BreakVal> {\n         match prior_status {\n             Some(NodeStatus::Visited) => ControlFlow::Break(()),\n-            _ => ControlFlow::Continue,\n+            _ => ControlFlow::CONTINUE,\n         }\n     }\n }"}, {"sha": "88c160e93b66a618eed378141e8314f18aaa7ee7", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -8,6 +8,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![allow(incomplete_features)]\n+#![feature(control_flow_enum)]\n #![feature(in_band_lifetimes)]\n #![feature(unboxed_closures)]\n #![feature(generators)]"}, {"sha": "e55180ff4be526bef3c2950a5c87b5477bdb09d2", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -6,6 +6,7 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(or_patterns)]"}, {"sha": "b85ada15ed51cbdf374756aa97262b2f8e9ce6ce", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -117,7 +117,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             // A diverging InlineAsm is treated as non-recursing\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if destination.is_some() {\n-                    ControlFlow::Continue\n+                    ControlFlow::CONTINUE\n                 } else {\n                     ControlFlow::Break(NonRecursive)\n                 }\n@@ -131,7 +131,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::Goto { .. }\n-            | TerminatorKind::SwitchInt { .. } => ControlFlow::Continue,\n+            | TerminatorKind::SwitchInt { .. } => ControlFlow::CONTINUE,\n         }\n     }\n \n@@ -144,7 +144,7 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             }\n         }\n \n-        ControlFlow::Continue\n+        ControlFlow::CONTINUE\n     }\n \n     fn ignore_edge(&mut self, bb: BasicBlock, target: BasicBlock) -> bool {"}, {"sha": "d89874eb7a9132d22a7294e5daad494acdd43efc", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -1273,7 +1273,7 @@ where\n         ) -> impl FnMut((), T) -> ControlFlow<(), B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::Continue(()),\n+                None => ControlFlow::CONTINUE,\n             }\n         }\n "}, {"sha": "a025bc8b56049c5ef0f8a02585e46d176ad0ab08", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -310,7 +310,7 @@ pub trait DoubleEndedIterator: Iterator {\n             mut predicate: impl FnMut(&T) -> bool,\n         ) -> impl FnMut((), T) -> ControlFlow<(), T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n             }\n         }\n "}, {"sha": "3f0cce4e18ac97eaa93f805cb7d973337133ee97", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fac272688e9d561b1fff71621323682d23e4c31d/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac272688e9d561b1fff71621323682d23e4c31d/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=fac272688e9d561b1fff71621323682d23e4c31d", "patch": "@@ -65,3 +65,10 @@ impl<R: Try> ControlFlow<R::Ok, R> {\n         }\n     }\n }\n+\n+impl<B> ControlFlow<(), B> {\n+    /// It's frequently the case that there's no value needed with `Continue`,\n+    /// so this provides a way to avoid typing `(())`, if you prefer it.\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub const CONTINUE: Self = ControlFlow::Continue(());\n+}"}]}