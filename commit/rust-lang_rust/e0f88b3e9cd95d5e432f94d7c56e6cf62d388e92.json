{"sha": "e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "node_id": "C_kwDOAAsO6NoAKGUwZjg4YjNlOWNkOTVkNWU0MzJmOTRkN2M1NmU2Y2Y2MmQzODhlOTI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-27T10:05:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-27T10:05:36Z"}, "message": "Rollup merge of #99789 - TaKO8Ki:use-pluralize-macro, r=compiler-errors\n\nRefactor: use `pluralize!`\n\nUse `pluralize!` in more places", "tree": {"sha": "491ec344c10606fe590b2a2519b8c838c9769db6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/491ec344c10606fe590b2a2519b8c838c9769db6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4Q3wCRBK7hj4Ov3rIwAAsRsIABhsEFymE2jA3YPM3FWDwy1A\n34NZmnUEyVvp95RJEMUYR/ijcCq247/aCbH+nc2q7EYx0eewQA1K1SxqjECGittH\n7CXYp6YTyOOCLUcv1FPMw5hfqntDvq3BFsQc4wt36DtSmeBkqQY3YPdBlu0fn/Gc\nD6RXE7mEjq+fw6HvgX+/52dXwlAKmRQBtJa46qwCtZ4rZmizW1HWTDHrQiK+xPnP\nplxdxYrUQKk+Tjepj+yPR1WyQAWUSt6+rwq2mb7gOXVgIXWTKqkzgxPLe5lhgoDe\nS63kZ62sC3NCLTQr/609Cz2H6kTSU0YzM33wYx7WPKMh3XWhYUZhOBy7960syDk=\n=quzA\n-----END PGP SIGNATURE-----\n", "payload": "tree 491ec344c10606fe590b2a2519b8c838c9769db6\nparent d425979f439a4f80523f8cc9ddc30f5a8c73256d\nparent ddd326fda4358df67f1efa185e1f16e9acf3d234\nauthor Yuki Okushi <jtitor@2k36.org> 1658916336 +0900\ncommitter GitHub <noreply@github.com> 1658916336 +0900\n\nRollup merge of #99789 - TaKO8Ki:use-pluralize-macro, r=compiler-errors\n\nRefactor: use `pluralize!`\n\nUse `pluralize!` in more places\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "html_url": "https://github.com/rust-lang/rust/commit/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d425979f439a4f80523f8cc9ddc30f5a8c73256d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d425979f439a4f80523f8cc9ddc30f5a8c73256d", "html_url": "https://github.com/rust-lang/rust/commit/d425979f439a4f80523f8cc9ddc30f5a8c73256d"}, {"sha": "ddd326fda4358df67f1efa185e1f16e9acf3d234", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddd326fda4358df67f1efa185e1f16e9acf3d234", "html_url": "https://github.com/rust-lang/rust/commit/ddd326fda4358df67f1efa185e1f16e9acf3d234"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "25ba520ace2bae62ea633a7bd263cb35fdfc82b2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "patch": "@@ -631,9 +631,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                         &format!(\n                                             \"expected a closure taking {} argument{}, but one taking {} argument{} was given\",\n                                             given.len(),\n-                                            if given.len() == 1 { \"\" } else { \"s\" },\n+                                            pluralize!(given.len()),\n                                             expected.len(),\n-                                            if expected.len() == 1 { \"\" } else { \"s\" },\n+                                            pluralize!(expected.len()),\n                                         )\n                                     );\n                                 } else if !self.same_type_modulo_infer(given_ty, expected_ty) {"}, {"sha": "eb22938fb61c47299e48cbce2ae7577fc8903dd9", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "patch": "@@ -15,7 +15,7 @@ use crate::check::{\n use crate::structured_errors::StructuredDiagnostic;\n \n use rustc_ast as ast;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticId, MultiSpan};\n+use rustc_errors::{pluralize, Applicability, Diagnostic, DiagnosticId, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -645,7 +645,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     \"argument\"\n                                 ),\n                                 potentially_plural_count(provided_args.len(), \"argument\"),\n-                                if provided_args.len() == 1 { \"was\" } else { \"were\" }\n+                                pluralize!(\"was\", provided_args.len())\n                             ),\n                             DiagnosticId::Error(err_code.to_owned()),\n                         );\n@@ -770,7 +770,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if c_variadic { \"at least \" } else { \"\" },\n                     potentially_plural_count(formal_and_expected_inputs.len(), \"argument\"),\n                     potentially_plural_count(provided_args.len(), \"argument\"),\n-                    if provided_args.len() == 1 { \"was\" } else { \"were\" }\n+                    pluralize!(\"was\", provided_args.len())\n                 ),\n                 DiagnosticId::Error(err_code.to_owned()),\n             )"}, {"sha": "56fcd9e0a890743c93f6a118969957760ede4f31", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "patch": "@@ -1122,7 +1122,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                          add a `use` for {one_of_them}:\",\n                         an = if candidates.len() == 1 { \"an\" } else { \"\" },\n                         s = pluralize!(candidates.len()),\n-                        were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n+                        were = pluralize!(\"was\", candidates.len()),\n                         one_of_them = if candidates.len() == 1 { \"it\" } else { \"one_of_them\" },\n                     );\n                     self.suggest_use_candidates(&mut err, help, candidates);"}, {"sha": "e65955fe86038067ba29845b5450d7e34fe51c7a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "patch": "@@ -2,7 +2,7 @@ use crate::check::regionck::OutlivesEnvironmentExt;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n@@ -474,7 +474,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n         unsatisfied_bounds.sort();\n \n         if !unsatisfied_bounds.is_empty() {\n-            let plural = if unsatisfied_bounds.len() > 1 { \"s\" } else { \"\" };\n+            let plural = pluralize!(unsatisfied_bounds.len());\n             let mut err = tcx.sess.struct_span_err(\n                 gat_item_hir.span,\n                 &format!(\"missing required bound{} on `{}`\", plural, gat_item_hir.ident),"}, {"sha": "99729391e02b0bc367510f9fb549857c556cb765", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=e0f88b3e9cd95d5e432f94d7c56e6cf62d388e92", "patch": "@@ -420,20 +420,18 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         let provided_lt_args = self.num_provided_lifetime_args();\n         let provided_type_or_const_args = self.num_provided_type_or_const_args();\n \n-        let get_verb = |num_args| if num_args == 1 { \"was\" } else { \"were\" };\n-\n         let (provided_args_str, verb) = match self.gen_args_info {\n             MissingLifetimes { .. } | ExcessLifetimes { .. } => (\n                 format!(\"{} lifetime argument{}\", provided_lt_args, pluralize!(provided_lt_args)),\n-                get_verb(provided_lt_args),\n+                pluralize!(\"was\", provided_lt_args),\n             ),\n             MissingTypesOrConsts { .. } | ExcessTypesOrConsts { .. } => (\n                 format!(\n                     \"{} generic argument{}\",\n                     provided_type_or_const_args,\n                     pluralize!(provided_type_or_const_args)\n                 ),\n-                get_verb(provided_type_or_const_args),\n+                pluralize!(\"was\", provided_type_or_const_args),\n             ),\n         };\n "}]}