{"sha": "1f51840db0d846c2370f7d726eb8e41424431850", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNTE4NDBkYjBkODQ2YzIzNzBmN2Q3MjZlYjhlNDE0MjQ0MzE4NTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-20T22:08:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-20T22:08:04Z"}, "message": "Propose a variant if it is an enum for E0599", "tree": {"sha": "30eebc3998e1aaf0d195095ea29f8d3f2efdc861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30eebc3998e1aaf0d195095ea29f8d3f2efdc861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f51840db0d846c2370f7d726eb8e41424431850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f51840db0d846c2370f7d726eb8e41424431850", "html_url": "https://github.com/rust-lang/rust/commit/1f51840db0d846c2370f7d726eb8e41424431850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f51840db0d846c2370f7d726eb8e41424431850/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75af15ee6ca0c12b699a17984b033363cd25e9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75af15ee6ca0c12b699a17984b033363cd25e9c3", "html_url": "https://github.com/rust-lang/rust/commit/75af15ee6ca0c12b699a17984b033363cd25e9c3"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "06bec8f6ff6597b3505f9ac7b726fa7ee591b2e3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f51840db0d846c2370f7d726eb8e41424431850/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f51840db0d846c2370f7d726eb8e41424431850/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=1f51840db0d846c2370f7d726eb8e41424431850", "patch": "@@ -22,12 +22,14 @@ use rustc::traits::{Obligation, SelectionContext};\n use util::nodemap::FxHashSet;\n \n use syntax::ast;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n use rustc::hir;\n use rustc::hir::print;\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::ty::TyAdt;\n \n use std::cell;\n use std::cmp::Ordering;\n@@ -179,9 +181,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let actual = self.resolve_type_vars_if_possible(&rcvr_ty);\n                 let ty_string = self.ty_to_string(actual);\n                 let is_method = mode == Mode::MethodCall;\n+                let mut suggestion = None;\n                 let type_str = if is_method {\n                     \"method\"\n                 } else if actual.is_enum() {\n+                    if let TyAdt(ref adt_def, _) = actual.sty {\n+                        let names = adt_def.variants.iter().map(|s| &s.name);\n+                        suggestion = find_best_match_for_name(names,\n+                                                              &item_name.as_str(),\n+                                                              None);\n+                    }\n                     \"variant\"\n                 } else {\n                     match (item_name.as_str().chars().next(), actual.is_fresh_ty()) {\n@@ -256,15 +265,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         err.emit();\n                         return;\n                     } else {\n-                        struct_span_err!(\n+                        let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0599,\n                             \"no {} named `{}` found for type `{}` in the current scope\",\n                             type_str,\n                             item_name,\n                             ty_string\n-                        )\n+                        );\n+                        if let Some(suggestion) = suggestion {\n+                            err.note(&format!(\"did you mean `{}::{}`?\", type_str, suggestion));\n+                        }\n+                        err\n                     }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()"}, {"sha": "d542a10e9b605ac9378a6f888d4b7643d824ef9a", "filename": "src/test/ui/issue-23217.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f51840db0d846c2370f7d726eb8e41424431850/src%2Ftest%2Fui%2Fissue-23217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f51840db0d846c2370f7d726eb8e41424431850/src%2Ftest%2Fui%2Fissue-23217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23217.stderr?ref=1f51840db0d846c2370f7d726eb8e41424431850", "patch": "@@ -5,6 +5,8 @@ LL | pub enum SomeEnum {\n    | ----------------- variant `A` not found here\n LL |     B = SomeEnum::A,\n    |         ^^^^^^^^^^^ variant not found in `SomeEnum`\n+   |\n+   = note: did you mean `variant::B`?\n \n error: aborting due to previous error\n "}, {"sha": "df114351ff571213af5d2e96751a62c01628bdae", "filename": "src/test/ui/issue-28971.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f51840db0d846c2370f7d726eb8e41424431850/src%2Ftest%2Fui%2Fissue-28971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f51840db0d846c2370f7d726eb8e41424431850/src%2Ftest%2Fui%2Fissue-28971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28971.stderr?ref=1f51840db0d846c2370f7d726eb8e41424431850", "patch": "@@ -6,6 +6,8 @@ LL | enum Foo {\n ...\n LL |             Foo::Baz(..) => (),\n    |             ^^^^^^^^^^^^ variant not found in `Foo`\n+   |\n+   = note: did you mean `variant::Bar`?\n \n error: aborting due to previous error\n "}]}