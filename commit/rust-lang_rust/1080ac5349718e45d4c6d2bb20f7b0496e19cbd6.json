{"sha": "1080ac5349718e45d4c6d2bb20f7b0496e19cbd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODBhYzUzNDk3MThlNDVkNGM2ZDJiYjIwZjdiMDQ5NmUxOWNiZDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-20T01:31:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-20T01:31:27Z"}, "message": "rustc: Add a -noverify option", "tree": {"sha": "c4ad2ff32227bb5bc62915ae38265f932c10e113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ad2ff32227bb5bc62915ae38265f932c10e113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6", "html_url": "https://github.com/rust-lang/rust/commit/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b9ddc8d49744a4e7e478e775d02d071dbd78a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b9ddc8d49744a4e7e478e775d02d071dbd78a4", "html_url": "https://github.com/rust-lang/rust/commit/d1b9ddc8d49744a4e7e478e775d02d071dbd78a4"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "f2ace0f7f8073357e1e7fcec4cbd75a4a2df44cb", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=1080ac5349718e45d4c6d2bb20f7b0496e19cbd6", "patch": "@@ -61,6 +61,7 @@ fn compile_input(session.session sess,\n                         str input, str output,\n                         bool shared,\n                         bool optimize,\n+                        bool verify,\n                         trans.output_type ot,\n                         vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n@@ -76,7 +77,7 @@ fn compile_input(session.session sess,\n     // FIXME: uncomment once typestate_check works\n     // crate = typestate_check.check_crate(crate);\n     trans.trans_crate(sess, crate, type_cache, output, shared, optimize,\n-                      ot);\n+                      verify, ot);\n }\n \n fn pretty_print_input(session.session sess,\n@@ -106,6 +107,7 @@ options:\n     -pp                pretty-print the input instead of compiling\n     -ls                list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n+    -noverify          suppress LLVM verification step (slight speedup)\n     -h                 display this message\\n\\n\");\n }\n \n@@ -140,6 +142,7 @@ fn main(vec[str] args) {\n     let bool ls = false;\n     auto ot = trans.output_type_bitcode;\n     let bool glue = false;\n+    let bool verify = true;\n \n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n     let bool optimize = false;\n@@ -185,6 +188,8 @@ fn main(vec[str] args) {\n                     usage(sess, args.(0));\n                     sess.err(\"-L requires an argument\");\n                 }\n+            } else if (_str.eq(arg, \"-noverify\")) {\n+                verify = false;\n             } else if (_str.eq(arg, \"-h\")) {\n                 usage(sess, args.(0));\n             } else {\n@@ -212,10 +217,11 @@ fn main(vec[str] args) {\n     if (glue) {\n         alt (output_file) {\n             case (none[str]) {\n-                middle.trans.make_common_glue(\"glue.bc\", optimize, ot);\n+                middle.trans.make_common_glue(\"glue.bc\", optimize, verify,\n+                                              ot);\n             }\n             case (some[str](?s)) {\n-                middle.trans.make_common_glue(s, optimize, ot);\n+                middle.trans.make_common_glue(s, optimize, verify, ot);\n             }\n         }\n         ret;\n@@ -241,12 +247,12 @@ fn main(vec[str] args) {\n                         parts += vec(\".bc\");\n                         auto ofile = _str.concat(parts);\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, ot,\n+                                      optimize, verify, ot,\n                                       library_search_paths);\n                     }\n                     case (some[str](?ofile)) {\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, ot,\n+                                      optimize, verify, ot,\n                                       library_search_paths);\n                     }\n                 }"}, {"sha": "d329630fae73c6c3db260d1a9050a2ffccf8d060", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1080ac5349718e45d4c6d2bb20f7b0496e19cbd6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1080ac5349718e45d4c6d2bb20f7b0496e19cbd6", "patch": "@@ -6965,7 +6965,7 @@ fn is_object_or_assembly(output_type ot) -> bool {\n     ret false;\n }\n \n-fn run_passes(ModuleRef llmod, bool opt, str output,\n+fn run_passes(ModuleRef llmod, bool opt, bool verify, str output,\n               output_type ot) {\n     auto pm = mk_pass_manager();\n \n@@ -7030,7 +7030,10 @@ fn run_passes(ModuleRef llmod, bool opt, str output,\n         llvm.LLVMAddDeadTypeEliminationPass(pm.llpm);\n         llvm.LLVMAddConstantMergePass(pm.llpm);\n     }\n-    llvm.LLVMAddVerifierPass(pm.llpm);\n+\n+    if (verify) {\n+        llvm.LLVMAddVerifierPass(pm.llpm);\n+    }\n \n     if (is_object_or_assembly(ot)) {\n         let int LLVMAssemblyFile = 0;\n@@ -7385,7 +7388,7 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n              vec_append_glue = make_vec_append_glue(llmod, tn));\n }\n \n-fn make_common_glue(str output, bool optimize,\n+fn make_common_glue(str output, bool optimize, bool verify,\n                     output_type ot) {\n     // FIXME: part of this is repetitive and is probably a good idea\n     // to autogen it, but things like the memcpy implementation are not\n@@ -7412,7 +7415,7 @@ fn make_common_glue(str output, bool optimize,\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n \n-    run_passes(llmod, optimize, output, ot);\n+    run_passes(llmod, optimize, verify, output, ot);\n }\n \n fn create_module_map(@crate_ctxt ccx) -> ValueRef {\n@@ -7465,7 +7468,7 @@ fn create_crate_map(@crate_ctxt ccx) -> ValueRef {\n \n fn trans_crate(session.session sess, @ast.crate crate,\n                &ty.type_cache type_cache, str output, bool shared,\n-               bool optimize, output_type ot) {\n+               bool optimize, bool verify, output_type ot) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n@@ -7535,7 +7538,7 @@ fn trans_crate(session.session sess, @ast.crate crate,\n     // Translate the metadata.\n     middle.metadata.write_metadata(cx.ccx, crate);\n \n-    run_passes(llmod, optimize, output, ot);\n+    run_passes(llmod, optimize, verify, output, ot);\n }\n \n //"}]}