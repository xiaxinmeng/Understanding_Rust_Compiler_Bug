{"sha": "7c0fd858db331d2505ab15bc70e6c5947378f271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMGZkODU4ZGIzMzFkMjUwNWFiMTViYzcwZTZjNTk0NzM3OGYyNzE=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-08T23:53:01Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-09T00:22:19Z"}, "message": "Get rid of little-used logging fns in util::common.  Closes #2553.\n\nAlso got rid of a bunch of commented-out logging statements and\ngenerally cleaned up the logging situation, mostly in typestate.", "tree": {"sha": "fef5b340e56bd7a98ba986dfca37e94c29d53ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef5b340e56bd7a98ba986dfca37e94c29d53ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0fd858db331d2505ab15bc70e6c5947378f271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0fd858db331d2505ab15bc70e6c5947378f271", "html_url": "https://github.com/rust-lang/rust/commit/7c0fd858db331d2505ab15bc70e6c5947378f271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0fd858db331d2505ab15bc70e6c5947378f271/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a699852cb47aadeeb948491db77e1f0a1a1f1ee", "html_url": "https://github.com/rust-lang/rust/commit/7a699852cb47aadeeb948491db77e1f0a1a1f1ee"}], "stats": {"total": 158, "additions": 29, "deletions": 129}, "files": [{"sha": "7b25a0955f30e77897a2b3ffcccd3b1b9bfa2e11", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -2,6 +2,7 @@ import syntax::{ast, ast_util, ast_map};\n import ast_util::path_to_ident;\n import ast::{ident, fn_ident, node_id};\n import syntax::codemap::span;\n+import syntax::print::pprust::expr_to_str;\n import syntax::visit;\n import visit::vt;\n import std::list;\n@@ -703,7 +704,7 @@ fn expr_root(cx: ctx, ex: @ast::expr, autoderef: bool)\n                     }\n                   }\n                   ty::ty_class(did, _) {\n-                    util::common::log_expr(*base);\n+                    #debug[\"base: %s\", expr_to_str(base)];\n                     let in_self = alt ctor_self {\n                       some(selfid) {\n                         alt tcx.def_map.find(base.id) {"}, {"sha": "1eeb0b0821ec2fe7f56f4a038acc66b0c14db0e8", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -8,7 +8,7 @@ import pat_util::*;\n import syntax::attr;\n import metadata::{csearch, cstore};\n import driver::session::session;\n-import util::common::*;\n+import util::common::is_main_name;\n import std::map::{int_hash, str_hash, hashmap};\n import vec::each;\n import syntax::codemap::span;"}, {"sha": "61d0786b2152b6816cb187ec83327b85c63e480b", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -28,7 +28,7 @@ import syntax::codemap::span;\n import syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n import pat_util::*;\n import visit::vt;\n-import util::common::*;\n+import util::common::is_main_name;\n import lib::llvm::{llvm, mk_target_data, mk_type_names};\n import lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n import lib::llvm::{True, False};\n@@ -1696,7 +1696,7 @@ fn trans_eager_binop(cx: block, op: ast::binop, lhs: ValueRef,\n \n fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n                    dst: @ast::expr, src: @ast::expr) -> block {\n-    log_expr(*ex);\n+    #debug[\"%s\", expr_to_str(ex)];\n     let _icx = bcx.insn_ctxt(\"trans_assign_op\");\n     let t = expr_ty(bcx, src);\n     let lhs_res = trans_lval(bcx, dst);"}, {"sha": "dce90a51db246a39bc8af7a744e52f0e62ceeae9", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -11,7 +11,6 @@ import driver::session;\n import session::session;\n import middle::{resolve, ty};\n import back::{link, abi, upcall};\n-import util::common::*;\n import syntax::codemap::span;\n import lib::llvm::{llvm, target_data, type_names, associate_type,\n                    name_has_type};"}, {"sha": "7be5bfe2c68d91612ba8344b31c611ed1f655743", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -13,7 +13,6 @@ import middle::ty::field;\n import syntax::ast;\n import syntax::ast_util::{dummy_sp, new_def_hash};\n import syntax::util::interner;\n-import util::common;\n import util::ppaux::ty_to_str;\n import syntax::codemap::span;\n import dvec::{dvec, extensions};"}, {"sha": "0db63a4ac26dc411cf19359a9f80b341f28a3918", "filename": "src/rustc/middle/tstate/annotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -2,7 +2,7 @@\n import syntax::ast::*;\n import syntax::visit;\n import syntax::codemap::span;\n-import util::common::{log_stmt};\n+import syntax::print::pprust::stmt_to_str;\n import aux::{num_constraints, get_fn_info, crate_ctxt, add_node};\n import ann::empty_ann;\n import pat_util::pat_binding_ids;\n@@ -14,8 +14,8 @@ fn collect_ids_block(b: blk, rs: @mut [node_id]) { *rs += [b.node.id]; }\n fn collect_ids_stmt(s: @stmt, rs: @mut [node_id]) {\n     alt s.node {\n       stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) {\n-        log(debug, \"node_id \" + int::str(id));\n-        log_stmt(*s);\n+        #debug[\"node_id %s\", int::str(id)];\n+        #debug[\"%s\", stmt_to_str(*s)];\n         *rs += [id];\n       }\n     }"}, {"sha": "c3a38ac35eb54c49b579e58c377b5f5391bc7500", "filename": "src/rustc/middle/tstate/bitvectors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -10,7 +10,6 @@ import tstate::ann::{pre_and_post, precond, postcond, prestate, poststate,\n                      clear_in_poststate, clear_in_prestate,\n                      clear_in_poststate_};\n import tritv::*;\n-import util::common::*;\n import driver::session::session;\n import std::map::hashmap;\n "}, {"sha": "64936ec37e5ee6730f0d2091611cd7afd3fb911d", "filename": "src/rustc/middle/tstate/ck.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -14,6 +14,7 @@ import annotate::annotate_crate;\n import collect_locals::mk_f_to_fn_info;\n import pre_post_conditions::fn_pre_post;\n import states::find_pre_post_state_fn;\n+import syntax::print::pprust::expr_to_str;\n import driver::session::session;\n import std::map::hashmap;\n \n@@ -23,16 +24,6 @@ fn check_states_expr(e: @expr, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n     let prec: precond = expr_precond(fcx.ccx, e);\n     let pres: prestate = expr_prestate(fcx.ccx, e);\n \n-\n-    /*\n-    log_err(\"check_states_expr:\");\n-      util::common::log_expr_err(*e);\n-      log_err(\"prec = \");\n-      log_tritv_err(fcx, prec);\n-      log_err(\"pres = \");\n-      log_tritv_err(fcx, pres);\n-    */\n-\n     if !implies(pres, prec) {\n         let mut s = \"\";\n         let diff = first_difference_string(fcx, prec, pres);\n@@ -55,7 +46,6 @@ fn check_states_stmt(s: @stmt, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n     let prec: precond = ann_precond(a);\n     let pres: prestate = ann_prestate(a);\n \n-\n     #debug(\"check_states_stmt:\");\n     log(debug, print::pprust::stmt_to_str(*s));\n     #debug(\"prec = \");"}, {"sha": "a51a4f72a0e84a5ba14080845580d4fc4022eb44", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -8,9 +8,9 @@ import tritv::*;\n import pat_util::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n+import syntax::print::pprust::{expr_to_str, stmt_to_str};\n import syntax::visit;\n-import util::common::{log_expr, field_exprs,\n-                      has_nonlocal_exits, log_stmt};\n+import util::common::{field_exprs, has_nonlocal_exits};\n import syntax::codemap::span;\n import driver::session::session;\n import std::map::hashmap;\n@@ -73,8 +73,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n    be the union of all postconditions for <args> */\n fn find_pre_post_exprs(fcx: fn_ctxt, args: [@expr], id: node_id) {\n     if vec::len::<@expr>(args) > 0u {\n-        #debug(\"find_pre_post_exprs: oper =\");\n-        log_expr(*args[0]);\n+        #debug[\"find_pre_post_exprs: oper = %s\", expr_to_str(args[0])];\n     }\n     fn do_one(fcx: fn_ctxt, e: @expr) { find_pre_post_expr(fcx, e); }\n     for args.each {|e| do_one(fcx, e); }\n@@ -473,8 +472,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n }\n \n fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n-    #debug(\"stmt =\");\n-    log_stmt(s);\n+    #debug[\"stmt = %s\", stmt_to_str(s)];\n     alt s.node {\n       stmt_decl(adecl, id) {\n         alt adecl.node {\n@@ -571,12 +569,6 @@ fn find_pre_post_block(fcx: fn_ctxt, b: blk) {\n     let nv = num_constraints(fcx.enclosing);\n     fn do_one_(fcx: fn_ctxt, s: @stmt) {\n         find_pre_post_stmt(fcx, *s);\n-        /*\n-                #error(\"pre_post for stmt:\");\n-                log_stmt_err(*s);\n-                #error(\"is:\");\n-                log_pp_err(stmt_pp(fcx.ccx, *s));\n-        */\n     }\n     for b.node.stmts.each {|s| do_one_(fcx, s); }\n     fn do_inner_(fcx: fn_ctxt, &&e: @expr) { find_pre_post_expr(fcx, e); }"}, {"sha": "89932070a0c51be725e72c5f0a3ad545a0f68651", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 15, "deletions": 60, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -7,9 +7,10 @@ import bitvectors::*;\n import pat_util::*;\n import syntax::ast::*;\n import syntax::ast_util::*;\n+import syntax::print::pprust::{expr_to_str, stmt_to_str};\n import syntax::codemap::span;\n import middle::ty::{expr_ty, type_is_bot};\n-import util::common::*;\n+import util::common::{field_exprs, has_nonlocal_exits, may_break};\n import driver::session::session;\n import std::map::hashmap;\n \n@@ -204,21 +205,6 @@ fn join_then_else(fcx: fn_ctxt, antec: @expr, conseq: blk,\n         set_prestate_ann(fcx.ccx, id, pres) |\n             find_pre_post_state_expr(fcx, pres, antec);\n \n-    /*\n-    log_err(\"join_then_else:\");\n-    log_expr_err(*antec);\n-    log_bitv_err(fcx, expr_prestate(fcx.ccx, antec));\n-    log_bitv_err(fcx, expr_poststate(fcx.ccx, antec));\n-    log_block_err(conseq);\n-    log_bitv_err(fcx, block_prestate(fcx.ccx, conseq));\n-    log_bitv_err(fcx, block_poststate(fcx.ccx, conseq));\n-    log_err(\"****\");\n-    log_bitv_err(fcx, expr_precond(fcx.ccx, antec));\n-    log_bitv_err(fcx, expr_postcond(fcx.ccx, antec));\n-    log_bitv_err(fcx, block_precond(fcx.ccx, conseq));\n-    log_bitv_err(fcx, block_postcond(fcx.ccx, conseq));\n-    */\n-\n     alt maybe_alt {\n       none {\n         alt chk {\n@@ -313,8 +299,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                       return_val);\n       }\n       expr_call(operator, operands, _) {\n-          #debug(\"hey it's a call\");\n-          log_expr(*e);\n+        #debug[\"hey it's a call: %s\", expr_to_str(e)];\n         ret find_pre_post_state_call(fcx, pres, operator, e.id,\n                                      callee_arg_init_ops(fcx, operator.id),\n                                      operands,\n@@ -423,12 +408,6 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                                     oper_assign_op);\n       }\n       expr_while(test, body) {\n-        /*\n-        #error(\"in a while loop:\");\n-        log_expr_err(*e);\n-        aux::log_tritv_err(fcx, block_poststate(fcx.ccx, body));\n-        aux::log_tritv_err(fcx, pres);\n-        */\n         let loop_pres =\n             intersect_states(block_poststate(fcx.ccx, body), pres);\n \n@@ -537,13 +516,10 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n     let stmt_ann = stmt_to_ann(fcx.ccx, *s);\n \n-    log(debug, \"[\" + fcx.name + \"]\");\n-    #debug(\"*At beginning: stmt = \");\n-    log_stmt(*s);\n-    #debug(\"*prestate = \");\n-    log(debug, tritv::to_str(stmt_ann.states.prestate));\n-    #debug(\"*poststate =\");\n-    log(debug, tritv::to_str(stmt_ann.states.prestate));\n+    #debug[\"[ %s ]\", fcx.name];\n+    #debug[\"*At beginning: stmt = %s\", stmt_to_str(*s)];\n+    #debug[\"*prestate = %s\", tritv::to_str(stmt_ann.states.prestate)];\n+    #debug[\"*poststate = %s\", tritv::to_str(stmt_ann.states.prestate)];\n \n     alt s.node {\n       stmt_decl(adecl, id) {\n@@ -559,14 +535,10 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n             let mut changed =\n                 set_poststate(stmt_ann, c_and_p.post) | c_and_p.changed;\n \n-            #debug(\"Summary: stmt = \");\n-            log_stmt(*s);\n-            #debug(\"prestate = \");\n-            log(debug, tritv::to_str(stmt_ann.states.prestate));\n-            #debug(\"poststate =\");\n-            log(debug, tritv::to_str(stmt_ann.states.prestate));\n-            #debug(\"changed =\");\n-            log(debug, changed);\n+            #debug[\"Summary: stmt = %s\", stmt_to_str(*s)];\n+            #debug[\"prestate = %s\", tritv::to_str(stmt_ann.states.prestate)];\n+            #debug[\"poststate = %s\",tritv::to_str(stmt_ann.states.poststate)];\n+            #debug[\"changed = %s\", bool::to_str(changed)];\n \n             ret changed;\n           }\n@@ -583,13 +555,10 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n                 set_poststate(stmt_ann, expr_poststate(fcx.ccx, ex));\n \n \n-        #debug(\"Finally:\");\n-        log_stmt(*s);\n-        log(debug, \"prestate = \");\n-        log(debug, tritv::to_str(stmt_ann.states.prestate));\n-        #debug(\"poststate =\");\n-        log(debug, (tritv::to_str(stmt_ann.states.poststate)));\n-        #debug(\"changed =\");\n+        #debug[\"Finally: %s\", stmt_to_str(*s)];\n+        #debug[\"prestate = %s\", tritv::to_str(stmt_ann.states.prestate)];\n+        #debug[\"poststate = %s\", tritv::to_str(stmt_ann.states.poststate)];\n+        #debug[\"changed = %s\", bool::to_str(changed)];\n \n         ret changed;\n       }\n@@ -624,20 +593,6 @@ fn find_pre_post_state_block(fcx: fn_ctxt, pres0: prestate, b: blk) -> bool {\n     set_prestate_ann(fcx.ccx, b.node.id, pres0);\n     set_poststate_ann(fcx.ccx, b.node.id, post);\n \n-\n-    /*\n-        #error(\"For block:\");\n-        log_block_err(b);\n-        #error(\"poststate = \");\n-        log_states_err(block_states(fcx.ccx, b));\n-        #error(\"pres0:\");\n-        log_tritv_err(fcx, pres0);\n-        #error(\"post:\");\n-        log_tritv_err(fcx, post);\n-        #error(\"changed = \");\n-        log(error, changed);\n-    */\n-\n     ret changed;\n }\n "}, {"sha": "f8b24d004b75de0d24c46c16713b713e6c08ed3b", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -46,7 +46,7 @@ import syntax::ast_util::{local_def, respan, split_class_items};\n import syntax::visit;\n import metadata::csearch;\n import driver::session::session;\n-import util::common::*;\n+import util::common::may_break;\n import syntax::codemap::span;\n import pat_util::{pat_is_variant, pat_id_map};\n import middle::ty;"}, {"sha": "dfddbab647fc11bfd3032f6a2def9e2abcddf00c", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0fd858db331d2505ab15bc70e6c5947378f271/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=7c0fd858db331d2505ab15bc70e6c5947378f271", "patch": "@@ -33,41 +33,6 @@ fn field_exprs(fields: [ast::field]) -> [@ast::expr] {\n     ret es;\n }\n \n-fn log_expr(e: ast::expr) {\n-    log(debug, print::pprust::expr_to_str(@e));\n-}\n-\n-fn log_expr_err(e: ast::expr) {\n-    log(error, print::pprust::expr_to_str(@e));\n-}\n-\n-fn log_ty_err(t: @ty) {\n-    log(error, print::pprust::ty_to_str(t));\n-}\n-\n-fn log_pat_err(p: @pat) {\n-    log(error, print::pprust::pat_to_str(p));\n-}\n-\n-fn log_block(b: ast::blk) {\n-    log(debug, print::pprust::block_to_str(b));\n-}\n-\n-fn log_block_err(b: ast::blk) {\n-    log(error, print::pprust::block_to_str(b));\n-}\n-\n-fn log_item_err(i: @ast::item) {\n-    log(error, print::pprust::item_to_str(i));\n-}\n-fn log_stmt(st: ast::stmt) {\n-    log(debug, print::pprust::stmt_to_str(st));\n-}\n-\n-fn log_stmt_err(st: ast::stmt) {\n-    log(error, print::pprust::stmt_to_str(st));\n-}\n-\n fn has_nonlocal_exits(b: ast::blk) -> bool {\n     let has_exits = @mut false;\n     fn visit_expr(flag: @mut bool, e: @ast::expr) {"}]}