{"sha": "9457ebee550d8f77ffc9b895acddae8946ee631e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NTdlYmVlNTUwZDhmNzdmZmM5Yjg5NWFjZGRhZTg5NDZlZTYzMWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-02T21:30:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-03T04:57:59Z"}, "message": "librustc: Disallow \"unsafe\" for external functions", "tree": {"sha": "b7612d4ec3135ab61b5a02f68259943e88b87936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7612d4ec3135ab61b5a02f68259943e88b87936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9457ebee550d8f77ffc9b895acddae8946ee631e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9457ebee550d8f77ffc9b895acddae8946ee631e", "html_url": "https://github.com/rust-lang/rust/commit/9457ebee550d8f77ffc9b895acddae8946ee631e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9457ebee550d8f77ffc9b895acddae8946ee631e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887c65697056b23be69b9b11f41637d07327626e", "url": "https://api.github.com/repos/rust-lang/rust/commits/887c65697056b23be69b9b11f41637d07327626e", "html_url": "https://github.com/rust-lang/rust/commit/887c65697056b23be69b9b11f41637d07327626e"}], "stats": {"total": 3530, "additions": 1705, "deletions": 1825}, "files": [{"sha": "8024b9aa1596cddbbff48c25cf0a11ae78f06334", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -25,17 +25,17 @@ pub mod rustrt {\n \n     #[link_name = \"rustrt\"]\n     extern {\n-        pub unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n-                                                 src_buf_len: size_t,\n-                                                 pout_len: *mut size_t,\n-                                                 flags: c_int)\n-                                                 -> *c_void;\n+        pub fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n+                                          src_buf_len: size_t,\n+                                          pout_len: *mut size_t,\n+                                          flags: c_int)\n+                                          -> *c_void;\n \n-        pub unsafe fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n-                                                   src_buf_len: size_t,\n-                                                   pout_len: *mut size_t,\n-                                                   flags: c_int)\n-                                                   -> *c_void;\n+        pub fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n+                                            src_buf_len: size_t,\n+                                            pout_len: *mut size_t,\n+                                            flags: c_int)\n+                                            -> *c_void;\n     }\n }\n "}, {"sha": "8aff8d388877f367e8e042cd4b23518b8b97c83b", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -20,13 +20,13 @@ pub mod rustrt {\n     use std::libc::{c_char, c_int};\n \n     extern {\n-        pub unsafe fn linenoise(prompt: *c_char) -> *c_char;\n-        pub unsafe fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n-        pub unsafe fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n-        pub unsafe fn linenoiseHistorySave(file: *c_char) -> c_int;\n-        pub unsafe fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n-        pub unsafe fn linenoiseSetCompletionCallback(callback: *u8);\n-        pub unsafe fn linenoiseAddCompletion(completions: *(), line: *c_char);\n+        pub fn linenoise(prompt: *c_char) -> *c_char;\n+        pub fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n+        pub fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n+        pub fn linenoiseHistorySave(file: *c_char) -> c_int;\n+        pub fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n+        pub fn linenoiseSetCompletionCallback(callback: *u8);\n+        pub fn linenoiseAddCompletion(completions: *(), line: *c_char);\n     }\n }\n "}, {"sha": "d95ac6d6c25b48b6e59108118405c293cdaffe1e", "filename": "src/libextra/time.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -23,16 +23,13 @@ pub mod rustrt {\n \n     #[abi = \"cdecl\"]\n     extern {\n-        pub unsafe fn get_time(sec: &mut i64, nsec: &mut i32);\n-\n-        pub unsafe fn precise_time_ns(ns: &mut u64);\n-\n-        pub unsafe fn rust_tzset();\n-\n-        pub unsafe fn rust_gmtime(sec: i64, nsec: i32, result: &mut Tm);\n-        pub unsafe fn rust_localtime(sec: i64, nsec: i32, result: &mut Tm);\n-        pub unsafe fn rust_timegm(tm: &Tm) -> i64;\n-        pub unsafe fn rust_mktime(tm: &Tm) -> i64;\n+        pub fn get_time(sec: &mut i64, nsec: &mut i32);\n+        pub fn precise_time_ns(ns: &mut u64);\n+        pub fn rust_tzset();\n+        pub fn rust_gmtime(sec: i64, nsec: i32, result: &mut Tm);\n+        pub fn rust_localtime(sec: i64, nsec: i32, result: &mut Tm);\n+        pub fn rust_timegm(tm: &Tm) -> i64;\n+        pub fn rust_mktime(tm: &Tm) -> i64;\n     }\n }\n "}, {"sha": "4949ee79e5d80fc71aeff556c89b89699323b078", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -162,14 +162,13 @@ pub mod icu {\n         #[link_name = \"icuuc\"]\n         #[abi = \"cdecl\"]\n         extern {\n-            pub unsafe fn u_hasBinaryProperty(c: UChar32, which: UProperty)\n-                                              -> UBool;\n-            pub unsafe fn u_isdigit(c: UChar32) -> UBool;\n-            pub unsafe fn u_islower(c: UChar32) -> UBool;\n-            pub unsafe fn u_isspace(c: UChar32) -> UBool;\n-            pub unsafe fn u_isupper(c: UChar32) -> UBool;\n-            pub unsafe fn u_tolower(c: UChar32) -> UChar32;\n-            pub unsafe fn u_toupper(c: UChar32) -> UChar32;\n+            pub fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n+            pub fn u_isdigit(c: UChar32) -> UBool;\n+            pub fn u_islower(c: UChar32) -> UBool;\n+            pub fn u_isspace(c: UChar32) -> UBool;\n+            pub fn u_isupper(c: UChar32) -> UBool;\n+            pub fn u_tolower(c: UChar32) -> UChar32;\n+            pub fn u_toupper(c: UChar32) -> UChar32;\n         }\n     }\n }"}, {"sha": "6c631a104aa9f0fa3c4acb74b575b0b9893dff29", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1089, "deletions": 1144, "changes": 2233, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e"}, {"sha": "8374fe1df0d98f6b687daa398c6f7d8d8ec06ab8", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -1151,9 +1151,9 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n \n     ebml_w.start_tag(tag_items_data_item);\n     match nitem.node {\n-      foreign_item_fn(_, purity, _) => {\n+      foreign_item_fn(*) => {\n         encode_def_id(ebml_w, local_def(nitem.id));\n-        encode_family(ebml_w, purity_fn_family(purity));\n+        encode_family(ebml_w, purity_fn_family(impure_fn));\n         encode_bounds_and_type(ebml_w, ecx,\n                                &lookup_item_type(ecx.tcx,local_def(nitem.id)));\n         encode_name(ecx, ebml_w, nitem.ident);"}, {"sha": "2e9c19c85f82d6ea2f4cd09b32948808c9e84276", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -789,7 +789,7 @@ fn check_item_ctypes(cx: &Context, it: &ast::item) {\n       ast::item_foreign_mod(ref nmod) if !nmod.abis.is_intrinsic() => {\n         foreach ni in nmod.items.iter() {\n             match ni.node {\n-                ast::foreign_item_fn(ref decl, _, _) => {\n+                ast::foreign_item_fn(ref decl, _) => {\n                     check_foreign_fn(cx, decl);\n                 }\n                 ast::foreign_item_static(ref t, _) => { check_ty(cx, t); }"}, {"sha": "b564dfde3c403629ed33c76d71a45ab561aecaac", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -1523,7 +1523,7 @@ impl Resolver {\n                            foreign_item.span);\n \n         match foreign_item.node {\n-            foreign_item_fn(_, _, ref generics) => {\n+            foreign_item_fn(_, ref generics) => {\n                 let def = def_fn(local_def(foreign_item.id), unsafe_fn);\n                 name_bindings.define_value(Public, def, foreign_item.span);\n \n@@ -3606,7 +3606,7 @@ impl Resolver {\n                 do self.with_scope(Some(item.ident)) {\n                     foreach foreign_item in foreign_module.items.iter() {\n                         match foreign_item.node {\n-                            foreign_item_fn(_, _, ref generics) => {\n+                            foreign_item_fn(_, ref generics) => {\n                                 self.with_type_parameter_rib(\n                                     HasTypeParameters(\n                                         generics, foreign_item.id, 0,"}, {"sha": "e03983636a07e828643dde3f9c277bef3d058db6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -1137,7 +1137,7 @@ pub fn ty_of_foreign_item(ccx: &CrateCtxt,\n                           abis: AbiSet) -> ty::ty_param_bounds_and_ty\n {\n     match it.node {\n-        ast::foreign_item_fn(ref fn_decl, _, ref generics) => {\n+        ast::foreign_item_fn(ref fn_decl, ref generics) => {\n             ty_of_foreign_fn_decl(ccx,\n                                   fn_decl,\n                                   local_def(it.id),"}, {"sha": "abfc3517d60ebf7dc46b4a0cf905f674ab238d4e", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -69,13 +69,24 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n             ast_map::node_item(@ast::item {\n                 ident: ident,\n                 node: ast::item_fn(ref decl, purity, _, ref tys, _), _\n-            }, _) |\n+            }, _) => {\n+                Some(pprust::fun_to_str(decl,\n+                                        purity,\n+                                        ident,\n+                                        None,\n+                                        tys,\n+                                        token::get_ident_interner()))\n+            }\n             ast_map::node_foreign_item(@ast::foreign_item {\n                 ident: ident,\n-                node: ast::foreign_item_fn(ref decl, purity, ref tys), _\n+                node: ast::foreign_item_fn(ref decl, ref tys), _\n             }, _, _, _) => {\n-                Some(pprust::fun_to_str(decl, purity, ident, None, tys,\n-                                       token::get_ident_interner()))\n+                Some(pprust::fun_to_str(decl,\n+                                        ast::impure_fn,\n+                                        ident,\n+                                        None,\n+                                        tys,\n+                                        token::get_ident_interner()))\n             }\n             _ => fail!(\"get_fn_sig: fn_id not bound to a fn item\")\n         }"}, {"sha": "b9535091ed810927859f60b340fdd9fcecc3efab", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -156,6 +156,6 @@ pub mod rustrt {\n     extern {\n         #[rust_stack]\n         // FIXME (#4386): Unable to make following method private.\n-        pub unsafe fn rust_get_task() -> *c_void;\n+        pub fn rust_get_task() -> *c_void;\n     }\n }"}, {"sha": "2e27f82f6f6efccc236b34253079245906b84376", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -66,10 +66,10 @@ pub mod rustrt {\n     #[link_name = \"rustrt\"]\n     extern {\n         #[rust_stack]\n-        pub unsafe fn rust_gc_metadata() -> *Word;\n+        pub fn rust_gc_metadata() -> *Word;\n \n-        pub unsafe fn rust_get_stack_segment() -> *StackSegment;\n-        pub unsafe fn rust_get_c_stack() -> *StackSegment;\n+        pub fn rust_get_stack_segment() -> *StackSegment;\n+        pub fn rust_get_c_stack() -> *StackSegment;\n     }\n }\n "}, {"sha": "606c958b4085e6f4e9e7ffad1d82a7e1780f0c3e", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -77,9 +77,9 @@ pub mod rustrt {\n     #[abi = \"cdecl\"]\n     #[link_name = \"rustrt\"]\n     extern {\n-        pub unsafe fn rust_get_stdin() -> *libc::FILE;\n-        pub unsafe fn rust_get_stdout() -> *libc::FILE;\n-        pub unsafe fn rust_get_stderr() -> *libc::FILE;\n+        pub fn rust_get_stdin() -> *libc::FILE;\n+        pub fn rust_get_stdout() -> *libc::FILE;\n+        pub fn rust_get_stderr() -> *libc::FILE;\n     }\n }\n "}, {"sha": "f96d3ce263ec109aa5542f53c61ef184e9313099", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 371, "deletions": 452, "changes": 823, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -2400,19 +2400,19 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n             extern {\n-                pub unsafe fn isalnum(c: c_int) -> c_int;\n-                pub unsafe fn isalpha(c: c_int) -> c_int;\n-                pub unsafe fn iscntrl(c: c_int) -> c_int;\n-                pub unsafe fn isdigit(c: c_int) -> c_int;\n-                pub unsafe fn isgraph(c: c_int) -> c_int;\n-                pub unsafe fn islower(c: c_int) -> c_int;\n-                pub unsafe fn isprint(c: c_int) -> c_int;\n-                pub unsafe fn ispunct(c: c_int) -> c_int;\n-                pub unsafe fn isspace(c: c_int) -> c_int;\n-                pub unsafe fn isupper(c: c_int) -> c_int;\n-                pub unsafe fn isxdigit(c: c_int) -> c_int;\n-                pub unsafe fn tolower(c: c_char) -> c_char;\n-                pub unsafe fn toupper(c: c_char) -> c_char;\n+                pub fn isalnum(c: c_int) -> c_int;\n+                pub fn isalpha(c: c_int) -> c_int;\n+                pub fn iscntrl(c: c_int) -> c_int;\n+                pub fn isdigit(c: c_int) -> c_int;\n+                pub fn isgraph(c: c_int) -> c_int;\n+                pub fn islower(c: c_int) -> c_int;\n+                pub fn isprint(c: c_int) -> c_int;\n+                pub fn ispunct(c: c_int) -> c_int;\n+                pub fn isspace(c: c_int) -> c_int;\n+                pub fn isupper(c: c_int) -> c_int;\n+                pub fn isxdigit(c: c_int) -> c_int;\n+                pub fn tolower(c: c_char) -> c_char;\n+                pub fn toupper(c: c_char) -> c_char;\n             }\n         }\n \n@@ -2423,66 +2423,58 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n \n             extern {\n-                pub unsafe fn fopen(filename: *c_char, mode: *c_char)\n-                                    -> *FILE;\n-                pub unsafe fn freopen(filename: *c_char,\n-                                      mode: *c_char,\n-                                      file: *FILE)\n-                                      -> *FILE;\n-                pub unsafe fn fflush(file: *FILE) -> c_int;\n-                pub unsafe fn fclose(file: *FILE) -> c_int;\n-                pub unsafe fn remove(filename: *c_char) -> c_int;\n-                pub unsafe fn rename(oldname: *c_char, newname: *c_char)\n-                                     -> c_int;\n-                pub unsafe fn tmpfile() -> *FILE;\n-                pub unsafe fn setvbuf(stream: *FILE,\n-                                      buffer: *c_char,\n-                                      mode: c_int,\n-                                      size: size_t)\n-                                      -> c_int;\n-                pub unsafe fn setbuf(stream: *FILE, buf: *c_char);\n+                pub fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n+                pub fn freopen(filename: *c_char, mode: *c_char, file: *FILE)\n+                               -> *FILE;\n+                pub fn fflush(file: *FILE) -> c_int;\n+                pub fn fclose(file: *FILE) -> c_int;\n+                pub fn remove(filename: *c_char) -> c_int;\n+                pub fn rename(oldname: *c_char, newname: *c_char) -> c_int;\n+                pub fn tmpfile() -> *FILE;\n+                pub fn setvbuf(stream: *FILE,\n+                               buffer: *c_char,\n+                               mode: c_int,\n+                               size: size_t)\n+                               -> c_int;\n+                pub fn setbuf(stream: *FILE, buf: *c_char);\n                 // Omitted: printf and scanf variants.\n-                pub unsafe fn fgetc(stream: *FILE) -> c_int;\n+                pub fn fgetc(stream: *FILE) -> c_int;\n                 #[fast_ffi]\n-                pub unsafe fn fgets(buf: *mut c_char,\n-                                    n: c_int,\n-                                    stream: *FILE)\n-                                    -> *c_char;\n+                pub fn fgets(buf: *mut c_char, n: c_int, stream: *FILE)\n+                             -> *c_char;\n                 #[fast_ffi]\n-                pub unsafe fn fputc(c: c_int, stream: *FILE) -> c_int;\n+                pub fn fputc(c: c_int, stream: *FILE) -> c_int;\n                 #[fast_ffi]\n-                pub unsafe fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n+                pub fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n                 // Omitted: getc, getchar (might be macros).\n \n                 // Omitted: gets, so ridiculously unsafe that it should not\n                 // survive.\n \n                 // Omitted: putc, putchar (might be macros).\n-                pub unsafe fn puts(s: *c_char) -> c_int;\n-                pub unsafe fn ungetc(c: c_int, stream: *FILE) -> c_int;\n+                pub fn puts(s: *c_char) -> c_int;\n+                pub fn ungetc(c: c_int, stream: *FILE) -> c_int;\n                 #[fast_ffi]\n-                pub unsafe fn fread(ptr: *mut c_void,\n-                                    size: size_t,\n-                                    nobj: size_t,\n-                                    stream: *FILE)\n-                                    -> size_t;\n+                pub fn fread(ptr: *mut c_void,\n+                             size: size_t,\n+                             nobj: size_t,\n+                             stream: *FILE)\n+                             -> size_t;\n                 #[fast_ffi]\n-                pub unsafe fn fwrite(ptr: *c_void,\n-                                     size: size_t,\n-                                     nobj: size_t,\n-                                     stream: *FILE)\n-                                     -> size_t;\n-                pub unsafe fn fseek(stream: *FILE,\n-                                    offset: c_long,\n-                                    whence: c_int)\n-                                    -> c_int;\n-                pub unsafe fn ftell(stream: *FILE) -> c_long;\n-                pub unsafe fn rewind(stream: *FILE);\n-                pub unsafe fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n-                pub unsafe fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n-                pub unsafe fn feof(stream: *FILE) -> c_int;\n-                pub unsafe fn ferror(stream: *FILE) -> c_int;\n-                pub unsafe fn perror(s: *c_char);\n+                pub fn fwrite(ptr: *c_void,\n+                              size: size_t,\n+                              nobj: size_t,\n+                              stream: *FILE)\n+                              -> size_t;\n+                pub fn fseek(stream: *FILE, offset: c_long, whence: c_int)\n+                             -> c_int;\n+                pub fn ftell(stream: *FILE) -> c_long;\n+                pub fn rewind(stream: *FILE);\n+                pub fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+                pub fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+                pub fn feof(stream: *FILE) -> c_int;\n+                pub fn ferror(stream: *FILE) -> c_int;\n+                pub fn perror(s: *c_char);\n             }\n         }\n \n@@ -2495,33 +2487,32 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{size_t};\n \n             extern {\n-                pub unsafe fn abs(i: c_int) -> c_int;\n-                pub unsafe fn labs(i: c_long) -> c_long;\n+                pub fn abs(i: c_int) -> c_int;\n+                pub fn labs(i: c_long) -> c_long;\n                 // Omitted: div, ldiv (return pub type incomplete).\n-                pub unsafe fn atof(s: *c_char) -> c_double;\n-                pub unsafe fn atoi(s: *c_char) -> c_int;\n-                pub unsafe fn strtod(s: *c_char, endp: **c_char) -> c_double;\n-                pub unsafe fn strtol(s: *c_char, endp: **c_char, base: c_int)\n-                                     -> c_long;\n-                pub unsafe fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n-                                      -> c_ulong;\n+                pub fn atof(s: *c_char) -> c_double;\n+                pub fn atoi(s: *c_char) -> c_int;\n+                pub fn strtod(s: *c_char, endp: **c_char) -> c_double;\n+                pub fn strtol(s: *c_char, endp: **c_char, base: c_int)\n+                              -> c_long;\n+                pub fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n+                               -> c_ulong;\n                 #[fast_ffi]\n-                pub unsafe fn calloc(nobj: size_t, size: size_t) -> *c_void;\n+                pub fn calloc(nobj: size_t, size: size_t) -> *c_void;\n                 #[fast_ffi]\n-                pub unsafe fn malloc(size: size_t) -> *c_void;\n+                pub fn malloc(size: size_t) -> *c_void;\n                 #[fast_ffi]\n-                pub unsafe fn realloc(p: *mut c_void, size: size_t)\n-                                      -> *mut c_void;\n+                pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n                 #[fast_ffi]\n-                pub unsafe fn free(p: *c_void);\n-                pub unsafe fn abort() -> !;\n-                pub unsafe fn exit(status: c_int) -> !;\n+                pub fn free(p: *c_void);\n+                pub fn abort() -> !;\n+                pub fn exit(status: c_int) -> !;\n                 // Omitted: atexit.\n-                pub unsafe fn system(s: *c_char) -> c_int;\n-                pub unsafe fn getenv(s: *c_char) -> *c_char;\n+                pub fn system(s: *c_char) -> c_int;\n+                pub fn getenv(s: *c_char) -> *c_char;\n                 // Omitted: bsearch, qsort\n-                pub unsafe fn rand() -> c_int;\n-                pub unsafe fn srand(seed: c_uint);\n+                pub fn rand() -> c_int;\n+                pub fn srand(seed: c_uint);\n             }\n         }\n \n@@ -2533,41 +2524,36 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{wchar_t};\n \n             extern {\n-                pub unsafe fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n-                pub unsafe fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n-                                      -> *c_char;\n-                pub unsafe fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n-                pub unsafe fn strncat(s: *c_char, ct: *c_char, n: size_t)\n-                                      -> *c_char;\n-                pub unsafe fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n-                pub unsafe fn strncmp(cs: *c_char, ct: *c_char, n: size_t)\n-                                      -> c_int;\n-                pub unsafe fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n-                pub unsafe fn strchr(cs: *c_char, c: c_int) -> *c_char;\n-                pub unsafe fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n-                pub unsafe fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n-                pub unsafe fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n-                pub unsafe fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n-                pub unsafe fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n-                pub unsafe fn strlen(cs: *c_char) -> size_t;\n-                pub unsafe fn strerror(n: c_int) -> *c_char;\n-                pub unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n-                pub unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t)\n-                                      -> size_t;\n-                pub unsafe fn wcslen(buf: *wchar_t) -> size_t;\n+                pub fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n+                pub fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n+                               -> *c_char;\n+                pub fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n+                pub fn strncat(s: *c_char, ct: *c_char, n: size_t) -> *c_char;\n+                pub fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n+                pub fn strncmp(cs: *c_char, ct: *c_char, n: size_t) -> c_int;\n+                pub fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n+                pub fn strchr(cs: *c_char, c: c_int) -> *c_char;\n+                pub fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n+                pub fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n+                pub fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n+                pub fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n+                pub fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n+                pub fn strlen(cs: *c_char) -> size_t;\n+                pub fn strerror(n: c_int) -> *c_char;\n+                pub fn strtok(s: *c_char, t: *c_char) -> *c_char;\n+                pub fn strxfrm(s: *c_char, ct: *c_char, n: size_t) -> size_t;\n+                pub fn wcslen(buf: *wchar_t) -> size_t;\n \n                 // Omitted: memcpy, memmove, memset (provided by LLVM)\n \n                 // These are fine to execute on the Rust stack. They must be,\n                 // in fact, because LLVM generates calls to them!\n                 #[rust_stack]\n                 #[inline]\n-                pub unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t)\n-                                     -> c_int;\n+                pub fn memcmp(cx: *c_void, ct: *c_void, n: size_t) -> c_int;\n                 #[rust_stack]\n                 #[inline]\n-                pub unsafe fn memchr(cx: *c_void, c: c_int, n: size_t)\n-                                     -> *c_void;\n+                pub fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n             }\n         }\n     }\n@@ -2588,16 +2574,13 @@ pub mod funcs {\n \n             extern {\n                 #[link_name = \"_chmod\"]\n-                pub unsafe fn chmod(path: *c_char, mode: c_int) -> c_int;\n-\n+                pub fn chmod(path: *c_char, mode: c_int) -> c_int;\n                 #[link_name = \"_mkdir\"]\n-                pub unsafe fn mkdir(path: *c_char) -> c_int;\n-\n+                pub fn mkdir(path: *c_char) -> c_int;\n                 #[link_name = \"_fstat64\"]\n-                pub unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n-\n+                pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n                 #[link_name = \"_stat64\"]\n-                pub unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub fn stat(path: *c_char, buf: *mut stat) -> c_int;\n             }\n         }\n \n@@ -2609,17 +2592,14 @@ pub mod funcs {\n \n             extern {\n                 #[link_name = \"_popen\"]\n-                pub unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n-\n+                pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n                 #[link_name = \"_pclose\"]\n-                pub unsafe fn pclose(stream: *FILE) -> c_int;\n-\n+                pub fn pclose(stream: *FILE) -> c_int;\n                 #[link_name = \"_fdopen\"]\n                 #[fast_ffi]\n-                pub unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n-\n+                pub fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n                 #[link_name = \"_fileno\"]\n-                pub unsafe fn fileno(stream: *FILE) -> c_int;\n+                pub fn fileno(stream: *FILE) -> c_int;\n             }\n         }\n \n@@ -2629,11 +2609,10 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int, c_char};\n             extern {\n                 #[link_name = \"_open\"]\n-                pub unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n-                                   -> c_int;\n-\n+                pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n+                            -> c_int;\n                 #[link_name = \"_creat\"]\n-                pub unsafe fn creat(path: *c_char, mode: c_int) -> c_int;\n+                pub fn creat(path: *c_char, mode: c_int) -> c_int;\n             }\n         }\n \n@@ -2653,73 +2632,48 @@ pub mod funcs {\n \n             extern {\n                 #[link_name = \"_access\"]\n-                pub unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n-\n+                pub fn access(path: *c_char, amode: c_int) -> c_int;\n                 #[link_name = \"_chdir\"]\n-                pub unsafe fn chdir(dir: *c_char) -> c_int;\n-\n+                pub fn chdir(dir: *c_char) -> c_int;\n                 #[link_name = \"_close\"]\n-                pub unsafe fn close(fd: c_int) -> c_int;\n-\n+                pub fn close(fd: c_int) -> c_int;\n                 #[link_name = \"_dup\"]\n-                pub unsafe fn dup(fd: c_int) -> c_int;\n-\n+                pub fn dup(fd: c_int) -> c_int;\n                 #[link_name = \"_dup2\"]\n-                pub unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n-\n+                pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 #[link_name = \"_execv\"]\n-                pub unsafe fn execv(prog: *c_char, argv: **c_char)\n-                                    -> intptr_t;\n-\n+                pub fn execv(prog: *c_char, argv: **c_char) -> intptr_t;\n                 #[link_name = \"_execve\"]\n-                pub unsafe fn execve(prog: *c_char,\n-                                     argv: **c_char,\n-                                     envp: **c_char)\n-                                     -> c_int;\n-\n+                pub fn execve(prog: *c_char, argv: **c_char, envp: **c_char)\n+                              -> c_int;\n                 #[link_name = \"_execvp\"]\n-                pub unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n-\n+                pub fn execvp(c: *c_char, argv: **c_char) -> c_int;\n                 #[link_name = \"_execvpe\"]\n-                pub unsafe fn execvpe(c: *c_char,\n-                                      argv: **c_char,\n-                                      envp: **c_char)\n-                                      -> c_int;\n-\n+                pub fn execvpe(c: *c_char, argv: **c_char, envp: **c_char)\n+                               -> c_int;\n                 #[link_name = \"_getcwd\"]\n-                pub unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n-\n+                pub fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n                 #[link_name = \"_getpid\"]\n-                pub unsafe fn getpid() -> c_int;\n-\n+                pub fn getpid() -> c_int;\n                 #[link_name = \"_isatty\"]\n-                pub unsafe fn isatty(fd: c_int) -> c_int;\n-\n+                pub fn isatty(fd: c_int) -> c_int;\n                 #[link_name = \"_lseek\"]\n-                pub unsafe fn lseek(fd: c_int, offset: c_long, origin: c_int)\n-                                    -> c_long;\n-\n+                pub fn lseek(fd: c_int, offset: c_long, origin: c_int)\n+                             -> c_long;\n                 #[link_name = \"_pipe\"]\n-                pub unsafe fn pipe(fds: *mut c_int,\n-                                   psize: c_uint,\n-                                   textmode: c_int)\n-                                   -> c_int;\n-\n+                pub fn pipe(fds: *mut c_int, psize: c_uint, textmode: c_int)\n+                            -> c_int;\n                 #[link_name = \"_read\"]\n                 #[fast_ffi]\n-                pub unsafe fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n-                                   -> c_int;\n-\n+                pub fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n+                            -> c_int;\n                 #[link_name = \"_rmdir\"]\n-                pub unsafe fn rmdir(path: *c_char) -> c_int;\n-\n+                pub fn rmdir(path: *c_char) -> c_int;\n                 #[link_name = \"_unlink\"]\n-                pub unsafe fn unlink(c: *c_char) -> c_int;\n-\n+                pub fn unlink(c: *c_char) -> c_int;\n                 #[link_name = \"_write\"]\n                 #[fast_ffi]\n-                pub unsafe fn write(fd: c_int, buf: *c_void, count: c_uint)\n-                                    -> c_int;\n+                pub fn write(fd: c_int, buf: *c_void, count: c_uint) -> c_int;\n             }\n         }\n \n@@ -2741,29 +2695,29 @@ pub mod funcs {\n             #[nolink]\n             #[abi = \"cdecl\"]\n             extern {\n-                pub unsafe fn chmod(path: *c_char, mode: mode_t) -> c_int;\n-                pub unsafe fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n+                pub fn chmod(path: *c_char, mode: mode_t) -> c_int;\n+                pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n-                pub unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+                pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"fstat64\"]\n-                pub unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+                pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n-                pub unsafe fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n-                pub unsafe fn mkfifo(path: *c_char, mode: mode_t) -> c_int;\n+                pub fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n+                pub fn mkfifo(path: *c_char, mode: mode_t) -> c_int;\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n-                pub unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub fn stat(path: *c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"stat64\"]\n-                pub unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub fn stat(path: *c_char, buf: *mut stat) -> c_int;\n             }\n         }\n \n@@ -2774,10 +2728,10 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int};\n \n             extern {\n-                pub unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n-                pub unsafe fn pclose(stream: *FILE) -> c_int;\n-                pub unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n-                pub unsafe fn fileno(stream: *FILE) -> c_int;\n+                pub fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+                pub fn pclose(stream: *FILE) -> c_int;\n+                pub fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+                pub fn fileno(stream: *FILE) -> c_int;\n             }\n         }\n \n@@ -2788,10 +2742,10 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::mode_t;\n \n             extern {\n-                pub unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n-                                   -> c_int;\n-                pub unsafe fn creat(path: *c_char, mode: mode_t) -> c_int;\n-                pub unsafe fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n+                pub fn open(path: *c_char, oflag: c_int, mode: c_int)\n+                            -> c_int;\n+                pub fn creat(path: *c_char, mode: mode_t) -> c_int;\n+                pub fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n             }\n         }\n \n@@ -2815,15 +2769,15 @@ pub mod funcs {\n             }\n \n             extern {\n-                unsafe fn rust_opendir(dirname: *c_char) -> *DIR;\n-                unsafe fn rust_readdir(dirp: *DIR) -> *dirent_t;\n+                fn rust_opendir(dirname: *c_char) -> *DIR;\n+                fn rust_readdir(dirp: *DIR) -> *dirent_t;\n             }\n \n             extern {\n-                pub unsafe fn closedir(dirp: *DIR) -> c_int;\n-                pub unsafe fn rewinddir(dirp: *DIR);\n-                pub unsafe fn seekdir(dirp: *DIR, loc: c_long);\n-                pub unsafe fn telldir(dirp: *DIR) -> c_long;\n+                pub fn closedir(dirp: *DIR) -> c_int;\n+                pub fn rewinddir(dirp: *DIR);\n+                pub fn seekdir(dirp: *DIR, loc: c_long);\n+                pub fn telldir(dirp: *DIR) -> c_long;\n             }\n         }\n \n@@ -2837,62 +2791,55 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{ssize_t, uid_t};\n \n             extern {\n-                pub unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n-                pub unsafe fn alarm(seconds: c_uint) -> c_uint;\n-                pub unsafe fn chdir(dir: *c_char) -> c_int;\n-                pub unsafe fn chown(path: *c_char, uid: uid_t, gid: gid_t)\n-                                    -> c_int;\n-                pub unsafe fn close(fd: c_int) -> c_int;\n-                pub unsafe fn dup(fd: c_int) -> c_int;\n-                pub unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n-                pub unsafe fn execv(prog: *c_char, argv: **c_char) -> c_int;\n-                pub unsafe fn execve(prog: *c_char,\n-                                     argv: **c_char,\n-                                     envp: **c_char)\n-                                     -> c_int;\n-                pub unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n-                pub unsafe fn fork() -> pid_t;\n-                pub unsafe fn fpathconf(filedes: c_int, name: c_int)\n-                                        -> c_long;\n-                pub unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n-                pub unsafe fn getegid() -> gid_t;\n-                pub unsafe fn geteuid() -> uid_t;\n-                pub unsafe fn getgid() -> gid_t ;\n-                pub unsafe fn getgroups(ngroups_max: c_int,\n-                                        groups: *mut gid_t)\n-                                        -> c_int;\n-                pub unsafe fn getlogin() -> *c_char;\n-                pub unsafe fn getopt(argc: c_int,\n-                                     argv: **c_char,\n-                                     optstr: *c_char)\n-                                     -> c_int;\n-                pub unsafe fn getpgrp() -> pid_t;\n-                pub unsafe fn getpid() -> pid_t;\n-                pub unsafe fn getppid() -> pid_t;\n-                pub unsafe fn getuid() -> uid_t;\n-                pub unsafe fn isatty(fd: c_int) -> c_int;\n-                pub unsafe fn link(src: *c_char, dst: *c_char) -> c_int;\n-                pub unsafe fn lseek(fd: c_int, offset: off_t, whence: c_int)\n-                                    -> off_t;\n-                pub unsafe fn pathconf(path: *c_char, name: c_int) -> c_long;\n-                pub unsafe fn pause() -> c_int;\n-                pub unsafe fn pipe(fds: *mut c_int) -> c_int;\n+                pub fn access(path: *c_char, amode: c_int) -> c_int;\n+                pub fn alarm(seconds: c_uint) -> c_uint;\n+                pub fn chdir(dir: *c_char) -> c_int;\n+                pub fn chown(path: *c_char, uid: uid_t, gid: gid_t) -> c_int;\n+                pub fn close(fd: c_int) -> c_int;\n+                pub fn dup(fd: c_int) -> c_int;\n+                pub fn dup2(src: c_int, dst: c_int) -> c_int;\n+                pub fn execv(prog: *c_char, argv: **c_char) -> c_int;\n+                pub fn execve(prog: *c_char, argv: **c_char, envp: **c_char)\n+                              -> c_int;\n+                pub fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+                pub fn fork() -> pid_t;\n+                pub fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n+                pub fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                pub fn getegid() -> gid_t;\n+                pub fn geteuid() -> uid_t;\n+                pub fn getgid() -> gid_t ;\n+                pub fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n+                                 -> c_int;\n+                pub fn getlogin() -> *c_char;\n+                pub fn getopt(argc: c_int, argv: **c_char, optstr: *c_char)\n+                              -> c_int;\n+                pub fn getpgrp() -> pid_t;\n+                pub fn getpid() -> pid_t;\n+                pub fn getppid() -> pid_t;\n+                pub fn getuid() -> uid_t;\n+                pub fn isatty(fd: c_int) -> c_int;\n+                pub fn link(src: *c_char, dst: *c_char) -> c_int;\n+                pub fn lseek(fd: c_int, offset: off_t, whence: c_int)\n+                             -> off_t;\n+                pub fn pathconf(path: *c_char, name: c_int) -> c_long;\n+                pub fn pause() -> c_int;\n+                pub fn pipe(fds: *mut c_int) -> c_int;\n                 #[fast_ffi]\n-                pub unsafe fn read(fd: c_int, buf: *mut c_void, count: size_t)\n-                                   -> ssize_t;\n-                pub unsafe fn rmdir(path: *c_char) -> c_int;\n-                pub unsafe fn setgid(gid: gid_t) -> c_int;\n-                pub unsafe fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n-                pub unsafe fn setsid() -> pid_t;\n-                pub unsafe fn setuid(uid: uid_t) -> c_int;\n-                pub unsafe fn sleep(secs: c_uint) -> c_uint;\n-                pub unsafe fn sysconf(name: c_int) -> c_long;\n-                pub unsafe fn tcgetpgrp(fd: c_int) -> pid_t;\n-                pub unsafe fn ttyname(fd: c_int) -> *c_char;\n-                pub unsafe fn unlink(c: *c_char) -> c_int;\n+                pub fn read(fd: c_int, buf: *mut c_void, count: size_t)\n+                            -> ssize_t;\n+                pub fn rmdir(path: *c_char) -> c_int;\n+                pub fn setgid(gid: gid_t) -> c_int;\n+                pub fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n+                pub fn setsid() -> pid_t;\n+                pub fn setuid(uid: uid_t) -> c_int;\n+                pub fn sleep(secs: c_uint) -> c_uint;\n+                pub fn sysconf(name: c_int) -> c_long;\n+                pub fn tcgetpgrp(fd: c_int) -> pid_t;\n+                pub fn ttyname(fd: c_int) -> *c_char;\n+                pub fn unlink(c: *c_char) -> c_int;\n                 #[fast_ffi]\n-                pub unsafe fn write(fd: c_int, buf: *c_void, count: size_t)\n-                                    -> ssize_t;\n+                pub fn write(fd: c_int, buf: *c_void, count: size_t)\n+                             -> ssize_t;\n             }\n         }\n \n@@ -2903,7 +2850,7 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{pid_t};\n \n             extern {\n-                pub unsafe fn kill(pid: pid_t, sig: c_int) -> c_int;\n+                pub fn kill(pid: pid_t, sig: c_int) -> c_int;\n             }\n         }\n \n@@ -2915,32 +2862,28 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{mode_t, off_t};\n \n             extern {\n-                pub unsafe fn mlock(addr: *c_void, len: size_t) -> c_int;\n-                pub unsafe fn munlock(addr: *c_void, len: size_t) -> c_int;\n-                pub unsafe fn mlockall(flags: c_int) -> c_int;\n-                pub unsafe fn munlockall() -> c_int;\n-\n-                pub unsafe fn mmap(addr: *c_void,\n-                                   len: size_t,\n-                                   prot: c_int,\n-                                   flags: c_int,\n-                                   fd: c_int,\n-                                   offset: off_t)\n-                                   -> *mut c_void;\n-                pub unsafe fn munmap(addr: *c_void, len: size_t) -> c_int;\n-\n-                pub unsafe fn mprotect(addr: *c_void,\n-                                       len: size_t,\n-                                       prot: c_int)\n-                                       -> c_int;\n-\n-                pub unsafe fn msync(addr: *c_void, len: size_t, flags: c_int)\n-                                    -> c_int;\n-                pub unsafe fn shm_open(name: *c_char,\n-                                       oflag: c_int,\n-                                       mode: mode_t)\n-                                       -> c_int;\n-                pub unsafe fn shm_unlink(name: *c_char) -> c_int;\n+                pub fn mlock(addr: *c_void, len: size_t) -> c_int;\n+                pub fn munlock(addr: *c_void, len: size_t) -> c_int;\n+                pub fn mlockall(flags: c_int) -> c_int;\n+                pub fn munlockall() -> c_int;\n+\n+                pub fn mmap(addr: *c_void,\n+                            len: size_t,\n+                            prot: c_int,\n+                            flags: c_int,\n+                            fd: c_int,\n+                            offset: off_t)\n+                            -> *mut c_void;\n+                pub fn munmap(addr: *c_void, len: size_t) -> c_int;\n+\n+                pub fn mprotect(addr: *c_void, len: size_t, prot: c_int)\n+                                -> c_int;\n+\n+                pub fn msync(addr: *c_void, len: size_t, flags: c_int)\n+                             -> c_int;\n+                pub fn shm_open(name: *c_char, oflag: c_int, mode: mode_t)\n+                                -> c_int;\n+                pub fn shm_unlink(name: *c_char) -> c_int;\n             }\n         }\n     }\n@@ -2960,11 +2903,11 @@ pub mod funcs {\n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"freebsd\")]\n                 #[cfg(target_os = \"android\")]\n-                pub unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n \n                 #[cfg(target_os = \"macos\")]\n                 #[link_name = \"lstat64\"]\n-                pub unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+                pub fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n             }\n         }\n \n@@ -2975,26 +2918,23 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{ssize_t};\n \n             extern {\n-                pub unsafe fn readlink(path: *c_char,\n-                                       buf: *mut c_char,\n-                                       bufsz: size_t)\n-                                       -> ssize_t;\n+                pub fn readlink(path: *c_char,\n+                                buf: *mut c_char,\n+                                bufsz: size_t)\n+                                -> ssize_t;\n \n-                pub unsafe fn fsync(fd: c_int) -> c_int;\n+                pub fn fsync(fd: c_int) -> c_int;\n \n                 #[cfg(target_os = \"linux\")]\n                 #[cfg(target_os = \"android\")]\n-                pub unsafe fn fdatasync(fd: c_int) -> c_int;\n+                pub fn fdatasync(fd: c_int) -> c_int;\n \n-                pub unsafe fn setenv(name: *c_char,\n-                                     val: *c_char,\n-                                     overwrite: c_int)\n-                                     -> c_int;\n-                pub unsafe fn unsetenv(name: *c_char) -> c_int;\n-                pub unsafe fn putenv(string: *c_char) -> c_int;\n+                pub fn setenv(name: *c_char, val: *c_char, overwrite: c_int)\n+                              -> c_int;\n+                pub fn unsetenv(name: *c_char) -> c_int;\n+                pub fn putenv(string: *c_char) -> c_int;\n \n-                pub unsafe fn symlink(path1: *c_char, path2: *c_char)\n-                                      -> c_int;\n+                pub fn symlink(path1: *c_char, path2: *c_char) -> c_int;\n             }\n         }\n \n@@ -3005,10 +2945,8 @@ pub mod funcs {\n             use libc::types::os::arch::posix88::{pid_t};\n \n             extern {\n-                pub unsafe fn waitpid(pid: pid_t,\n-                                      status: *mut c_int,\n-                                      options: c_int)\n-                                      -> pid_t;\n+                pub fn waitpid(pid: pid_t, status: *mut c_int, options: c_int)\n+                               -> pid_t;\n             }\n         }\n \n@@ -3020,11 +2958,11 @@ pub mod funcs {\n             use libc::types::os::common::posix01::{glob_t};\n \n             extern {\n-                pub unsafe fn glob(pattern: *c_char,\n-                                   flags: c_int,\n-                                   errfunc: *c_void, // XXX callback\n-                                   pglob: *mut glob_t);\n-                pub unsafe fn globfree(pglob: *mut glob_t);\n+                pub fn glob(pattern: *c_char,\n+                            flags: c_int,\n+                            errfunc: *c_void, // XXX callback\n+                            pglob: *mut glob_t);\n+                pub fn globfree(pglob: *mut glob_t);\n             }\n         }\n \n@@ -3035,10 +2973,10 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_int, size_t};\n \n             extern {\n-                pub unsafe fn posix_madvise(addr: *c_void,\n-                                            len: size_t,\n-                                            advice: c_int)\n-                                            -> c_int;\n+                pub fn posix_madvise(addr: *c_void,\n+                                     len: size_t,\n+                                     advice: c_int)\n+                                     -> c_int;\n             }\n         }\n     }\n@@ -3079,33 +3017,28 @@ pub mod funcs {\n \n         #[abi = \"cdecl\"]\n         extern {\n-            pub unsafe fn sysctl(name: *c_int,\n-                                 namelen: c_uint,\n-                                 oldp: *mut c_void,\n-                                 oldlenp: *mut size_t,\n-                                 newp: *c_void,\n-                                 newlen: size_t)\n-                                 -> c_int;\n-\n-            pub unsafe fn sysctlbyname(name: *c_char,\n-                                       oldp: *mut c_void,\n-                                       oldlenp: *mut size_t,\n-                                       newp: *c_void,\n-                                       newlen: size_t)\n-                                       -> c_int;\n-\n-            pub unsafe fn sysctlnametomib(name: *c_char,\n-                                          mibp: *mut c_int,\n-                                          sizep: *mut size_t)\n-                                          -> c_int;\n-\n-            pub unsafe fn getdtablesize() -> c_int;\n-\n-            pub unsafe fn madvise(addr: *c_void, len: size_t, advice: c_int)\n-                                  -> c_int;\n-\n-            pub unsafe fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n-                                  -> c_int;\n+            pub fn sysctl(name: *c_int,\n+                          namelen: c_uint,\n+                          oldp: *mut c_void,\n+                          oldlenp: *mut size_t,\n+                          newp: *c_void,\n+                          newlen: size_t)\n+                          -> c_int;\n+            pub fn sysctlbyname(name: *c_char,\n+                                oldp: *mut c_void,\n+                                oldlenp: *mut size_t,\n+                                newp: *c_void,\n+                                newlen: size_t)\n+                                -> c_int;\n+            pub fn sysctlnametomib(name: *c_char,\n+                                   mibp: *mut c_int,\n+                                   sizep: *mut size_t)\n+                                   -> c_int;\n+            pub fn getdtablesize() -> c_int;\n+            pub fn madvise(addr: *c_void, len: size_t, advice: c_int)\n+                           -> c_int;\n+            pub fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n+                           -> c_int;\n         }\n     }\n \n@@ -3118,13 +3051,11 @@ pub mod funcs {\n \n         #[abi = \"cdecl\"]\n         extern {\n-            pub unsafe fn getdtablesize() -> c_int;\n-\n-            pub unsafe fn madvise(addr: *c_void, len: size_t, advice: c_int)\n-                                  -> c_int;\n-\n-            pub unsafe fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n-                                  -> c_int;\n+            pub fn getdtablesize() -> c_int;\n+            pub fn madvise(addr: *c_void, len: size_t, advice: c_int)\n+                           -> c_int;\n+            pub fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n+                           -> c_int;\n         }\n     }\n \n@@ -3140,9 +3071,8 @@ pub mod funcs {\n \n         #[abi = \"cdecl\"]\n         extern {\n-            pub unsafe fn _NSGetExecutablePath(buf: *mut c_char,\n-                                               bufsize: *mut u32)\n-                                               -> c_int;\n+            pub fn _NSGetExecutablePath(buf: *mut c_char, bufsize: *mut u32)\n+                                        -> c_int;\n         }\n     }\n \n@@ -3173,118 +3103,107 @@ pub mod funcs {\n \n             #[abi = \"stdcall\"]\n             extern \"stdcall\" {\n-                pub unsafe fn GetEnvironmentVariableW(n: LPCWSTR,\n-                                                      v: LPWSTR,\n-                                                      nsize: DWORD)\n-                                                      -> DWORD;\n-                pub unsafe fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n-                                                      -> BOOL;\n-                pub unsafe fn GetEnvironmentStringsA() -> LPTCH;\n-                pub unsafe fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n-\n-                pub unsafe fn GetModuleFileNameW(hModule: HMODULE,\n-                                                 lpFilename: LPWSTR,\n-                                                 nSize: DWORD)\n-                                                 -> DWORD;\n-                pub unsafe fn CreateDirectoryW(lpPathName: LPCWSTR,\n-                                               lpSecurityAttributes:\n-                                               LPSECURITY_ATTRIBUTES)\n-                                            -> BOOL;\n-                pub unsafe fn CopyFileW(lpExistingFileName: LPCWSTR,\n+                pub fn GetEnvironmentVariableW(n: LPCWSTR,\n+                                               v: LPWSTR,\n+                                               nsize: DWORD)\n+                                               -> DWORD;\n+                pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n+                                               -> BOOL;\n+                pub fn GetEnvironmentStringsA() -> LPTCH;\n+                pub fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n+                pub fn GetModuleFileNameW(hModule: HMODULE,\n+                                          lpFilename: LPWSTR,\n+                                          nSize: DWORD)\n+                                          -> DWORD;\n+                pub fn CreateDirectoryW(lpPathName: LPCWSTR,\n+                                        lpSecurityAttributes:\n+                                        LPSECURITY_ATTRIBUTES)\n+                                        -> BOOL;\n+                pub fn CopyFileW(lpExistingFileName: LPCWSTR,\n                                         lpNewFileName: LPCWSTR,\n                                         bFailIfExists: BOOL)\n                                         -> BOOL;\n-                pub unsafe fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n-                pub unsafe fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-                pub unsafe fn SetCurrentDirectoryW(lpPathName: LPCWSTR)\n-                                                   -> BOOL;\n-\n-                pub unsafe fn GetLastError() -> DWORD;\n-                pub unsafe fn FindFirstFileW(fileName: *u16,\n-                                             findFileData: HANDLE)\n-                                             -> HANDLE;\n-                pub unsafe fn FindNextFileW(findFile: HANDLE,\n-                                            findFileData: HANDLE)\n-                                            -> BOOL;\n-                pub unsafe fn FindClose(findFile: HANDLE) -> BOOL;\n-                pub unsafe fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n-                                              hSourceHandle: HANDLE,\n-                                              hTargetProcessHandle: HANDLE,\n-                                              lpTargetHandle: LPHANDLE,\n-                                              dwDesiredAccess: DWORD,\n-                                              bInheritHandle: BOOL,\n-                                              dwOptions: DWORD)\n-                                              -> BOOL;\n-                pub unsafe fn CloseHandle(hObject: HANDLE) -> BOOL;\n-                pub unsafe fn OpenProcess(dwDesiredAccess: DWORD,\n-                                          bInheritHandle: BOOL,\n-                                          dwProcessId: DWORD)\n-                                          -> HANDLE;\n-                pub unsafe fn GetCurrentProcess() -> HANDLE;\n-                pub unsafe fn CreateProcessA(lpApplicationName: LPCTSTR,\n-                                             lpCommandLine: LPTSTR,\n-                                             lpProcessAttributes:\n-                                             LPSECURITY_ATTRIBUTES,\n-                                             lpThreadAttributes:\n-                                             LPSECURITY_ATTRIBUTES,\n-                                             bInheritHandles: BOOL,\n-                                             dwCreationFlags: DWORD,\n-                                             lpEnvironment: LPVOID,\n-                                             lpCurrentDirectory: LPCTSTR,\n-                                             lpStartupInfo: LPSTARTUPINFO,\n-                                             lpProcessInformation:\n-                                             LPPROCESS_INFORMATION)\n-                                             -> BOOL;\n-                pub unsafe fn WaitForSingleObject(hHandle: HANDLE,\n-                                                  dwMilliseconds: DWORD)\n-                                                  -> DWORD;\n-                pub unsafe fn TerminateProcess(hProcess: HANDLE,\n-                                               uExitCode: c_uint)\n-                                               -> BOOL;\n-                pub unsafe fn GetExitCodeProcess(hProcess: HANDLE,\n-                                                 lpExitCode: LPDWORD)\n-                                                 -> BOOL;\n-\n-                pub unsafe fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n-                pub unsafe fn VirtualAlloc(lpAddress: LPVOID,\n-                                           dwSize: SIZE_T,\n-                                           flAllocationType: DWORD,\n-                                           flProtect: DWORD)\n-                                           -> LPVOID;\n-                pub unsafe fn VirtualFree(lpAddress: LPVOID,\n-                                          dwSize: SIZE_T,\n-                                          dwFreeType: DWORD)\n-                                          -> BOOL;\n-                pub unsafe fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T)\n+                pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn GetLastError() -> DWORD;\n+                pub fn FindFirstFileW(fileName: *u16, findFileData: HANDLE)\n+                                      -> HANDLE;\n+                pub fn FindNextFileW(findFile: HANDLE, findFileData: HANDLE)\n+                                     -> BOOL;\n+                pub fn FindClose(findFile: HANDLE) -> BOOL;\n+                pub fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n+                                       hSourceHandle: HANDLE,\n+                                       hTargetProcessHandle: HANDLE,\n+                                       lpTargetHandle: LPHANDLE,\n+                                       dwDesiredAccess: DWORD,\n+                                       bInheritHandle: BOOL,\n+                                       dwOptions: DWORD)\n+                                       -> BOOL;\n+                pub fn CloseHandle(hObject: HANDLE) -> BOOL;\n+                pub fn OpenProcess(dwDesiredAccess: DWORD,\n+                                   bInheritHandle: BOOL,\n+                                   dwProcessId: DWORD)\n+                                   -> HANDLE;\n+                pub fn GetCurrentProcess() -> HANDLE;\n+                pub fn CreateProcessA(lpApplicationName: LPCTSTR,\n+                                      lpCommandLine: LPTSTR,\n+                                      lpProcessAttributes:\n+                                      LPSECURITY_ATTRIBUTES,\n+                                      lpThreadAttributes:\n+                                      LPSECURITY_ATTRIBUTES,\n+                                      bInheritHandles: BOOL,\n+                                      dwCreationFlags: DWORD,\n+                                      lpEnvironment: LPVOID,\n+                                      lpCurrentDirectory: LPCTSTR,\n+                                      lpStartupInfo: LPSTARTUPINFO,\n+                                      lpProcessInformation:\n+                                      LPPROCESS_INFORMATION)\n+                                      -> BOOL;\n+                pub fn WaitForSingleObject(hHandle: HANDLE,\n+                                           dwMilliseconds: DWORD)\n+                                           -> DWORD;\n+                pub fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint)\n+                                        -> BOOL;\n+                pub fn GetExitCodeProcess(hProcess: HANDLE,\n+                                          lpExitCode: LPDWORD)\n                                           -> BOOL;\n-                pub unsafe fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)\n-                                            -> BOOL;\n-                pub unsafe fn VirtualProtect(lpAddress: LPVOID,\n-                                             dwSize: SIZE_T,\n-                                             flNewProtect: DWORD,\n-                                             lpflOldProtect: LPDWORD)\n-                                             -> BOOL;\n-                pub unsafe fn VirtualQuery(lpAddress: LPCVOID,\n-                                           lpBuffer:\n-                                           LPMEMORY_BASIC_INFORMATION,\n-                                           dwLength: SIZE_T)\n-                                           -> SIZE_T;\n-\n-                pub unsafe fn CreateFileMappingW(hFile: HANDLE,\n-                                                 lpAttributes:\n-                                                 LPSECURITY_ATTRIBUTES,\n-                                                 flProtect: DWORD,\n-                                                 dwMaximumSizeHigh: DWORD,\n-                                                 dwMaximumSizeLow: DWORD,\n-                                                 lpName: LPCTSTR)\n-                                                 -> HANDLE;\n-                pub unsafe fn MapViewOfFile(hFileMappingObject: HANDLE,\n-                                            dwDesiredAccess: DWORD,\n-                                            dwFileOffsetHigh: DWORD,\n-                                            dwFileOffsetLow: DWORD,\n-                                            dwNumberOfBytesToMap: SIZE_T)\n-                                            -> LPVOID;\n-                pub unsafe fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n+                pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n+                pub fn VirtualAlloc(lpAddress: LPVOID,\n+                                    dwSize: SIZE_T,\n+                                    flAllocationType: DWORD,\n+                                    flProtect: DWORD)\n+                                    -> LPVOID;\n+                pub fn VirtualFree(lpAddress: LPVOID,\n+                                   dwSize: SIZE_T,\n+                                   dwFreeType: DWORD)\n+                                   -> BOOL;\n+                pub fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n+                pub fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)\n+                                     -> BOOL;\n+                pub fn VirtualProtect(lpAddress: LPVOID,\n+                                      dwSize: SIZE_T,\n+                                      flNewProtect: DWORD,\n+                                      lpflOldProtect: LPDWORD)\n+                                      -> BOOL;\n+                pub fn VirtualQuery(lpAddress: LPCVOID,\n+                                    lpBuffer: LPMEMORY_BASIC_INFORMATION,\n+                                    dwLength: SIZE_T)\n+                                    -> SIZE_T;\n+                pub fn CreateFileMappingW(hFile: HANDLE,\n+                                          lpAttributes: LPSECURITY_ATTRIBUTES,\n+                                          flProtect: DWORD,\n+                                          dwMaximumSizeHigh: DWORD,\n+                                          dwMaximumSizeLow: DWORD,\n+                                          lpName: LPCTSTR)\n+                                          -> HANDLE;\n+                pub fn MapViewOfFile(hFileMappingObject: HANDLE,\n+                                     dwDesiredAccess: DWORD,\n+                                     dwFileOffsetHigh: DWORD,\n+                                     dwFileOffsetLow: DWORD,\n+                                     dwNumberOfBytesToMap: SIZE_T)\n+                                     -> LPVOID;\n+                pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n             }\n         }\n \n@@ -3295,10 +3214,10 @@ pub mod funcs {\n             #[nolink]\n             extern {\n                 #[link_name = \"_commit\"]\n-                pub unsafe fn commit(fd: c_int) -> c_int;\n+                pub fn commit(fd: c_int) -> c_int;\n \n                 #[link_name = \"_get_osfhandle\"]\n-                pub unsafe fn get_osfhandle(fd: c_int) -> c_long;\n+                pub fn get_osfhandle(fd: c_int) -> c_long;\n             }\n         }\n     }"}, {"sha": "6e11d14aea9a316d069403083e9e97af069a6115", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -105,10 +105,10 @@ pub mod rustrt {\n     use libc;\n \n     extern {\n-        pub unsafe fn rust_log_console_on();\n-        pub unsafe fn rust_log_console_off();\n-        pub unsafe fn rust_log_str(level: u32,\n-                                   string: *libc::c_char,\n-                                   size: libc::size_t);\n+        pub fn rust_log_console_on();\n+        pub fn rust_log_console_off();\n+        pub fn rust_log_str(level: u32,\n+                            string: *libc::c_char,\n+                            size: libc::size_t);\n     }\n }"}, {"sha": "38923c5bda45db754d92a1b0ebe560c72c540836", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 96, "deletions": 95, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -22,83 +22,84 @@ pub mod c_double_utils {\n     extern {\n         // Alpabetically sorted by link_name\n \n-        pub unsafe fn acos(n: c_double) -> c_double;\n-        pub unsafe fn asin(n: c_double) -> c_double;\n-        pub unsafe fn atan(n: c_double) -> c_double;\n-        pub unsafe fn atan2(a: c_double, b: c_double) -> c_double;\n-        pub unsafe fn cbrt(n: c_double) -> c_double;\n-        pub unsafe fn ceil(n: c_double) -> c_double;\n-        pub unsafe fn copysign(x: c_double, y: c_double) -> c_double;\n-        pub unsafe fn cos(n: c_double) -> c_double;\n-        pub unsafe fn cosh(n: c_double) -> c_double;\n-        pub unsafe fn erf(n: c_double) -> c_double;\n-        pub unsafe fn erfc(n: c_double) -> c_double;\n-        pub unsafe fn exp(n: c_double) -> c_double;\n+        pub fn acos(n: c_double) -> c_double;\n+        pub fn asin(n: c_double) -> c_double;\n+        pub fn atan(n: c_double) -> c_double;\n+        pub fn atan2(a: c_double, b: c_double) -> c_double;\n+        pub fn cbrt(n: c_double) -> c_double;\n+        pub fn ceil(n: c_double) -> c_double;\n+        pub fn copysign(x: c_double, y: c_double) -> c_double;\n+        pub fn cos(n: c_double) -> c_double;\n+        pub fn cosh(n: c_double) -> c_double;\n+        pub fn erf(n: c_double) -> c_double;\n+        pub fn erfc(n: c_double) -> c_double;\n+        pub fn exp(n: c_double) -> c_double;\n         // rename: for consistency with underscore usage elsewhere\n-        #[link_name=\"expm1\"] unsafe fn exp_m1(n: c_double) -> c_double;\n-        pub unsafe fn exp2(n: c_double) -> c_double;\n-        #[link_name=\"fabs\"] unsafe fn abs(n: c_double) -> c_double;\n+        #[link_name=\"expm1\"]\n+        fn exp_m1(n: c_double) -> c_double;\n+        pub fn exp2(n: c_double) -> c_double;\n+        #[link_name=\"fabs\"]\n+        fn abs(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n         #[link_name=\"fdim\"]\n-        pub unsafe fn abs_sub(a: c_double, b: c_double) -> c_double;\n-        pub unsafe fn floor(n: c_double) -> c_double;\n+        pub fn abs_sub(a: c_double, b: c_double) -> c_double;\n+        pub fn floor(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n         #[link_name=\"fma\"]\n-        pub unsafe fn mul_add(a: c_double, b: c_double, c: c_double)\n-                              -> c_double;\n+        pub fn mul_add(a: c_double, b: c_double, c: c_double) -> c_double;\n         #[link_name=\"fmax\"]\n-        pub unsafe fn fmax(a: c_double, b: c_double) -> c_double;\n+        pub fn fmax(a: c_double, b: c_double) -> c_double;\n         #[link_name=\"fmin\"]\n-        pub unsafe fn fmin(a: c_double, b: c_double) -> c_double;\n+        pub fn fmin(a: c_double, b: c_double) -> c_double;\n         #[link_name=\"nextafter\"]\n-        pub unsafe fn next_after(x: c_double, y: c_double) -> c_double;\n-        pub unsafe fn frexp(n: c_double, value: &mut c_int) -> c_double;\n-        pub unsafe fn hypot(x: c_double, y: c_double) -> c_double;\n-        pub unsafe fn ldexp(x: c_double, n: c_int) -> c_double;\n+        pub fn next_after(x: c_double, y: c_double) -> c_double;\n+        pub fn frexp(n: c_double, value: &mut c_int) -> c_double;\n+        pub fn hypot(x: c_double, y: c_double) -> c_double;\n+        pub fn ldexp(x: c_double, n: c_int) -> c_double;\n         #[cfg(unix)]\n         #[link_name=\"lgamma_r\"]\n-        pub unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         #[cfg(windows)]\n         #[link_name=\"__lgamma_r\"]\n-        pub unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n         // renamed: ln seems more natural\n         #[link_name=\"log\"]\n-        pub unsafe fn ln(n: c_double) -> c_double;\n+        pub fn ln(n: c_double) -> c_double;\n         // renamed: \"logb\" /often/ is confused for log2 by beginners\n         #[link_name=\"logb\"]\n-        pub unsafe fn log_radix(n: c_double) -> c_double;\n+        pub fn log_radix(n: c_double) -> c_double;\n         // renamed: to be consitent with log as ln\n         #[link_name=\"log1p\"]\n-        pub unsafe fn ln_1p(n: c_double) -> c_double;\n-        pub unsafe fn log10(n: c_double) -> c_double;\n-        pub unsafe fn log2(n: c_double) -> c_double;\n+        pub fn ln_1p(n: c_double) -> c_double;\n+        pub fn log10(n: c_double) -> c_double;\n+        pub fn log2(n: c_double) -> c_double;\n         #[link_name=\"ilogb\"]\n-        pub unsafe fn ilog_radix(n: c_double) -> c_int;\n-        pub unsafe fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n-        pub unsafe fn pow(n: c_double, e: c_double) -> c_double;\n+        pub fn ilog_radix(n: c_double) -> c_int;\n+        pub fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n+        pub fn pow(n: c_double, e: c_double) -> c_double;\n     // FIXME (#1379): enable when rounding modes become available\n-    //    unsafe fn rint(n: c_double) -> c_double;\n-        pub unsafe fn round(n: c_double) -> c_double;\n+    //    fn rint(n: c_double) -> c_double;\n+        pub fn round(n: c_double) -> c_double;\n         // rename: for consistency with logradix\n         #[link_name=\"scalbn\"]\n-        pub unsafe fn ldexp_radix(n: c_double, i: c_int) -> c_double;\n-        pub unsafe fn sin(n: c_double) -> c_double;\n-        pub unsafe fn sinh(n: c_double) -> c_double;\n-        pub unsafe fn sqrt(n: c_double) -> c_double;\n-        pub unsafe fn tan(n: c_double) -> c_double;\n-        pub unsafe fn tanh(n: c_double) -> c_double;\n-        pub unsafe fn tgamma(n: c_double) -> c_double;\n-        pub unsafe fn trunc(n: c_double) -> c_double;\n+        pub fn ldexp_radix(n: c_double, i: c_int) -> c_double;\n+        pub fn sin(n: c_double) -> c_double;\n+        pub fn sinh(n: c_double) -> c_double;\n+        pub fn sqrt(n: c_double) -> c_double;\n+        pub fn tan(n: c_double) -> c_double;\n+        pub fn tanh(n: c_double) -> c_double;\n+        pub fn tgamma(n: c_double) -> c_double;\n+        pub fn trunc(n: c_double) -> c_double;\n \n         // These are commonly only available for doubles\n \n-        pub unsafe fn j0(n: c_double) -> c_double;\n-        pub unsafe fn j1(n: c_double) -> c_double;\n-        pub unsafe fn jn(i: c_int, n: c_double) -> c_double;\n+        pub fn j0(n: c_double) -> c_double;\n+        pub fn j1(n: c_double) -> c_double;\n+        pub fn jn(i: c_int, n: c_double) -> c_double;\n \n-        pub unsafe fn y0(n: c_double) -> c_double;\n-        pub unsafe fn y1(n: c_double) -> c_double;\n-        pub unsafe fn yn(i: c_int, n: c_double) -> c_double;\n+        pub fn y0(n: c_double) -> c_double;\n+        pub fn y1(n: c_double) -> c_double;\n+        pub fn yn(i: c_int, n: c_double) -> c_double;\n     }\n }\n \n@@ -111,98 +112,98 @@ pub mod c_float_utils {\n         // Alpabetically sorted by link_name\n \n         #[link_name=\"acosf\"]\n-        pub unsafe fn acos(n: c_float) -> c_float;\n+        pub fn acos(n: c_float) -> c_float;\n         #[link_name=\"asinf\"]\n-        pub unsafe fn asin(n: c_float) -> c_float;\n+        pub fn asin(n: c_float) -> c_float;\n         #[link_name=\"atanf\"]\n-        pub unsafe fn atan(n: c_float) -> c_float;\n+        pub fn atan(n: c_float) -> c_float;\n         #[link_name=\"atan2f\"]\n-        pub unsafe fn atan2(a: c_float, b: c_float) -> c_float;\n+        pub fn atan2(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"cbrtf\"]\n-        pub unsafe fn cbrt(n: c_float) -> c_float;\n+        pub fn cbrt(n: c_float) -> c_float;\n         #[link_name=\"ceilf\"]\n-        pub unsafe fn ceil(n: c_float) -> c_float;\n+        pub fn ceil(n: c_float) -> c_float;\n         #[link_name=\"copysignf\"]\n-        pub unsafe fn copysign(x: c_float, y: c_float) -> c_float;\n+        pub fn copysign(x: c_float, y: c_float) -> c_float;\n         #[link_name=\"cosf\"]\n-        pub unsafe fn cos(n: c_float) -> c_float;\n+        pub fn cos(n: c_float) -> c_float;\n         #[link_name=\"coshf\"]\n-        pub unsafe fn cosh(n: c_float) -> c_float;\n+        pub fn cosh(n: c_float) -> c_float;\n         #[link_name=\"erff\"]\n-        pub unsafe fn erf(n: c_float) -> c_float;\n+        pub fn erf(n: c_float) -> c_float;\n         #[link_name=\"erfcf\"]\n-        pub unsafe fn erfc(n: c_float) -> c_float;\n+        pub fn erfc(n: c_float) -> c_float;\n         #[link_name=\"expf\"]\n-        pub unsafe fn exp(n: c_float) -> c_float;\n+        pub fn exp(n: c_float) -> c_float;\n         #[link_name=\"expm1f\"]\n-        pub unsafe fn exp_m1(n: c_float) -> c_float;\n+        pub fn exp_m1(n: c_float) -> c_float;\n         #[link_name=\"exp2f\"]\n-        pub unsafe fn exp2(n: c_float) -> c_float;\n+        pub fn exp2(n: c_float) -> c_float;\n         #[link_name=\"fabsf\"]\n-        pub unsafe fn abs(n: c_float) -> c_float;\n+        pub fn abs(n: c_float) -> c_float;\n         #[link_name=\"fdimf\"]\n-        pub unsafe fn abs_sub(a: c_float, b: c_float) -> c_float;\n+        pub fn abs_sub(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"floorf\"]\n-        pub unsafe fn floor(n: c_float) -> c_float;\n+        pub fn floor(n: c_float) -> c_float;\n         #[link_name=\"frexpf\"]\n-        pub unsafe fn frexp(n: c_float, value: &mut c_int) -> c_float;\n+        pub fn frexp(n: c_float, value: &mut c_int) -> c_float;\n         #[link_name=\"fmaf\"]\n-        pub unsafe fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n+        pub fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n         #[link_name=\"fmaxf\"]\n-        pub unsafe fn fmax(a: c_float, b: c_float) -> c_float;\n+        pub fn fmax(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"fminf\"]\n-        pub unsafe fn fmin(a: c_float, b: c_float) -> c_float;\n+        pub fn fmin(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"nextafterf\"]\n-        pub unsafe fn next_after(x: c_float, y: c_float) -> c_float;\n+        pub fn next_after(x: c_float, y: c_float) -> c_float;\n         #[link_name=\"hypotf\"]\n-        pub unsafe fn hypot(x: c_float, y: c_float) -> c_float;\n+        pub fn hypot(x: c_float, y: c_float) -> c_float;\n         #[link_name=\"ldexpf\"]\n-        pub unsafe fn ldexp(x: c_float, n: c_int) -> c_float;\n+        pub fn ldexp(x: c_float, n: c_int) -> c_float;\n \n         #[cfg(unix)]\n         #[link_name=\"lgammaf_r\"]\n-        pub unsafe fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n+        pub fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n \n         #[cfg(windows)]\n         #[link_name=\"__lgammaf_r\"]\n-        pub unsafe fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n+        pub fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n \n         #[link_name=\"logf\"]\n-        pub unsafe fn ln(n: c_float) -> c_float;\n+        pub fn ln(n: c_float) -> c_float;\n         #[link_name=\"logbf\"]\n-        pub unsafe fn log_radix(n: c_float) -> c_float;\n+        pub fn log_radix(n: c_float) -> c_float;\n         #[link_name=\"log1pf\"]\n-        pub unsafe fn ln_1p(n: c_float) -> c_float;\n+        pub fn ln_1p(n: c_float) -> c_float;\n         #[link_name=\"log2f\"]\n-        pub unsafe fn log2(n: c_float) -> c_float;\n+        pub fn log2(n: c_float) -> c_float;\n         #[link_name=\"log10f\"]\n-        pub unsafe fn log10(n: c_float) -> c_float;\n+        pub fn log10(n: c_float) -> c_float;\n         #[link_name=\"ilogbf\"]\n-        pub unsafe fn ilog_radix(n: c_float) -> c_int;\n+        pub fn ilog_radix(n: c_float) -> c_int;\n         #[link_name=\"modff\"]\n-        pub unsafe fn modf(n: c_float, iptr: &mut c_float) -> c_float;\n+        pub fn modf(n: c_float, iptr: &mut c_float) -> c_float;\n         #[link_name=\"powf\"]\n-        pub unsafe fn pow(n: c_float, e: c_float) -> c_float;\n+        pub fn pow(n: c_float, e: c_float) -> c_float;\n     // FIXME (#1379): enable when rounding modes become available\n-    //    #[link_name=\"rintf\"] unsafe fn rint(n: c_float) -> c_float;\n+    //    #[link_name=\"rintf\"] fn rint(n: c_float) -> c_float;\n         #[link_name=\"roundf\"]\n-        pub unsafe fn round(n: c_float) -> c_float;\n+        pub fn round(n: c_float) -> c_float;\n         #[link_name=\"scalbnf\"]\n-        pub unsafe fn ldexp_radix(n: c_float, i: c_int) -> c_float;\n+        pub fn ldexp_radix(n: c_float, i: c_int) -> c_float;\n         #[link_name=\"sinf\"]\n-        pub unsafe fn sin(n: c_float) -> c_float;\n+        pub fn sin(n: c_float) -> c_float;\n         #[link_name=\"sinhf\"]\n-        pub unsafe fn sinh(n: c_float) -> c_float;\n+        pub fn sinh(n: c_float) -> c_float;\n         #[link_name=\"sqrtf\"]\n-        pub unsafe fn sqrt(n: c_float) -> c_float;\n+        pub fn sqrt(n: c_float) -> c_float;\n         #[link_name=\"tanf\"]\n-        pub unsafe fn tan(n: c_float) -> c_float;\n+        pub fn tan(n: c_float) -> c_float;\n         #[link_name=\"tanhf\"]\n-        pub unsafe fn tanh(n: c_float) -> c_float;\n+        pub fn tanh(n: c_float) -> c_float;\n         #[link_name=\"tgammaf\"]\n-        pub unsafe fn tgamma(n: c_float) -> c_float;\n+        pub fn tgamma(n: c_float) -> c_float;\n         #[link_name=\"truncf\"]\n-        pub unsafe fn trunc(n: c_float) -> c_float;\n+        pub fn trunc(n: c_float) -> c_float;\n     }\n }\n "}, {"sha": "f78f5812863374f7eb4e85ff44dc4184cbb2aa76", "filename": "src/libstd/os.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -61,11 +61,11 @@ pub mod rustrt {\n     use libc;\n \n     extern {\n-        pub unsafe fn rust_get_argc() -> c_int;\n-        pub unsafe fn rust_get_argv() -> **c_char;\n-        pub unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n-        pub unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n-        pub unsafe fn rust_set_exit_status(code: libc::intptr_t);\n+        pub fn rust_get_argc() -> c_int;\n+        pub fn rust_get_argv() -> **c_char;\n+        pub fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n+        pub fn rust_path_exists(path: *libc::c_char) -> c_int;\n+        pub fn rust_set_exit_status(code: libc::intptr_t);\n     }\n }\n \n@@ -201,7 +201,7 @@ pub fn env() -> ~[(~str,~str)] {\n         #[cfg(unix)]\n         unsafe fn get_env_pairs() -> ~[~str] {\n             extern {\n-                unsafe fn rust_env_pairs() -> **libc::c_char;\n+                fn rust_env_pairs() -> **libc::c_char;\n             }\n             let environ = rust_env_pairs();\n             if (environ as uint == 0) {\n@@ -694,7 +694,7 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n             use libc::{dirent_t};\n             use libc::{opendir, readdir, closedir};\n             extern {\n-                unsafe fn rust_list_dir_val(ptr: *dirent_t) -> *libc::c_char;\n+                fn rust_list_dir_val(ptr: *dirent_t) -> *libc::c_char;\n             }\n             let input = p.to_str();\n             let mut strings = ~[];\n@@ -735,9 +735,8 @@ pub fn list_dir(p: &Path) -> ~[~str] {\n \n             #[nolink]\n             extern {\n-                unsafe fn rust_list_dir_wfd_size() -> libc::size_t;\n-                unsafe fn rust_list_dir_wfd_fp_buf(wfd: *libc::c_void)\n-                    -> *u16;\n+                fn rust_list_dir_wfd_size() -> libc::size_t;\n+                fn rust_list_dir_wfd_fp_buf(wfd: *libc::c_void) -> *u16;\n             }\n             fn star(p: &Path) -> Path { p.push(\"*\") }\n             do as_utf16_p(star(p).to_str()) |path_ptr| {\n@@ -964,7 +963,7 @@ pub fn errno() -> int {\n     fn errno_location() -> *c_int {\n         #[nolink]\n         extern {\n-            unsafe fn __error() -> *c_int;\n+            fn __error() -> *c_int;\n         }\n         unsafe {\n             __error()\n@@ -976,7 +975,7 @@ pub fn errno() -> int {\n     fn errno_location() -> *c_int {\n         #[nolink]\n         extern {\n-            unsafe fn __errno_location() -> *c_int;\n+            fn __errno_location() -> *c_int;\n         }\n         unsafe {\n             __errno_location()\n@@ -996,7 +995,7 @@ pub fn errno() -> uint {\n     #[link_name = \"kernel32\"]\n     #[abi = \"stdcall\"]\n     extern \"stdcall\" {\n-        unsafe fn GetLastError() -> DWORD;\n+        fn GetLastError() -> DWORD;\n     }\n \n     unsafe {\n@@ -1011,11 +1010,12 @@ pub fn last_os_error() -> ~str {\n         #[cfg(target_os = \"macos\")]\n         #[cfg(target_os = \"android\")]\n         #[cfg(target_os = \"freebsd\")]\n-        fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t) -> c_int {\n+        fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t)\n+                      -> c_int {\n             #[nolink]\n             extern {\n-                unsafe fn strerror_r(errnum: c_int, buf: *mut c_char,\n-                                     buflen: size_t) -> c_int;\n+                fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t)\n+                              -> c_int;\n             }\n             unsafe {\n                 strerror_r(errnum, buf, buflen)\n@@ -1029,8 +1029,10 @@ pub fn last_os_error() -> ~str {\n         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: size_t) -> c_int {\n             #[nolink]\n             extern {\n-                unsafe fn __xpg_strerror_r(errnum: c_int, buf: *mut c_char,\n-                                           buflen: size_t) -> c_int;\n+                fn __xpg_strerror_r(errnum: c_int,\n+                                    buf: *mut c_char,\n+                                    buflen: size_t)\n+                                    -> c_int;\n             }\n             unsafe {\n                 __xpg_strerror_r(errnum, buf, buflen)\n@@ -1058,10 +1060,14 @@ pub fn last_os_error() -> ~str {\n         #[link_name = \"kernel32\"]\n         #[abi = \"stdcall\"]\n         extern \"stdcall\" {\n-            unsafe fn FormatMessageA(flags: DWORD, lpSrc: LPVOID,\n-                                     msgId: DWORD, langId: DWORD,\n-                                     buf: LPSTR, nsize: DWORD,\n-                                     args: *c_void) -> DWORD;\n+            fn FormatMessageA(flags: DWORD,\n+                              lpSrc: LPVOID,\n+                              msgId: DWORD,\n+                              langId: DWORD,\n+                              buf: LPSTR,\n+                              nsize: DWORD,\n+                              args: *c_void)\n+                              -> DWORD;\n         }\n \n         static FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;"}, {"sha": "2819744c56036a262e0d0b200aedead8b035154c", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -258,19 +258,17 @@ pub mod rustrt {\n \n     extern {\n         #[rust_stack]\n-        pub unsafe fn rust_get_task() -> *rust_task;\n+        pub fn rust_get_task() -> *rust_task;\n         #[rust_stack]\n-        pub unsafe fn rust_task_ref(task: *rust_task);\n-        pub unsafe fn rust_task_deref(task: *rust_task);\n+        pub fn rust_task_ref(task: *rust_task);\n+        pub fn rust_task_deref(task: *rust_task);\n \n         #[rust_stack]\n-        pub unsafe fn task_clear_event_reject(task: *rust_task);\n+        pub fn task_clear_event_reject(task: *rust_task);\n \n-        pub unsafe fn task_wait_event(this: *rust_task,\n-                                      killed: &mut *libc::c_void)\n-                                   -> bool;\n-        pub unsafe fn task_signal_event(target: *rust_task,\n-                                        event: *libc::c_void);\n+        pub fn task_wait_event(this: *rust_task, killed: &mut *libc::c_void)\n+                               -> bool;\n+        pub fn task_signal_event(target: *rust_task, event: *libc::c_void);\n     }\n }\n "}, {"sha": "20686e7a251811590d747bd643863d058878537b", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -252,8 +252,8 @@ pub mod rustrt {\n     use libc::size_t;\n \n     extern {\n-        pub unsafe fn rand_seed_size() -> size_t;\n-        pub unsafe fn rand_gen_seed(buf: *mut u8, sz: size_t);\n+        pub fn rand_seed_size() -> size_t;\n+        pub fn rand_gen_seed(buf: *mut u8, sz: size_t);\n     }\n }\n \n@@ -1085,10 +1085,9 @@ mod test {\n             pub enum rust_rng {}\n \n             extern {\n-                pub unsafe fn rand_new_seeded(buf: *u8, sz: size_t)\n-                                              -> *rust_rng;\n-                pub unsafe fn rand_next(rng: *rust_rng) -> u32;\n-                pub unsafe fn rand_free(rng: *rust_rng);\n+                pub fn rand_new_seeded(buf: *u8, sz: size_t) -> *rust_rng;\n+                pub fn rand_next(rng: *rust_rng) -> u32;\n+                pub fn rand_free(rng: *rust_rng);\n             }\n         }\n "}, {"sha": "e1e7ceacc383405cbac8336f1e64effe1b25e9ab", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -92,7 +92,7 @@ pub unsafe fn local_free(ptr: *libc::c_char) {\n \n             extern {\n                 #[fast_ffi]\n-                unsafe fn rust_upcall_free_noswitch(ptr: *libc::c_char);\n+                fn rust_upcall_free_noswitch(ptr: *libc::c_char);\n             }\n         }\n         _ => {"}, {"sha": "9f6cf68245eab59d8f521c720c1f715012626d10", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -49,7 +49,7 @@ impl Drop for Thread {\n }\n \n extern {\n-    pub unsafe fn rust_raw_thread_start(f: &(~fn())) -> *raw_thread;\n-    pub unsafe fn rust_raw_thread_join(thread: *raw_thread);\n-    pub unsafe fn rust_raw_thread_delete(thread: *raw_thread);\n+    pub fn rust_raw_thread_start(f: &(~fn())) -> *raw_thread;\n+    pub fn rust_raw_thread_join(thread: *raw_thread);\n+    pub fn rust_raw_thread_delete(thread: *raw_thread);\n }"}, {"sha": "65316d4092b404052a80d0b3ac05ad24b5c26202", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -639,8 +639,8 @@ fn spawn_process_os(prog: &str, args: &[~str],\n \n         #[abi = \"cdecl\"]\n         extern {\n-            pub unsafe fn rust_unset_sigprocmask();\n-            pub unsafe fn rust_set_environ(envp: *c_void);\n+            pub fn rust_unset_sigprocmask();\n+            pub fn rust_set_environ(envp: *c_void);\n         }\n     }\n "}, {"sha": "51609709cdbcad3530e011856f96470982eca260", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -27,9 +27,7 @@ pub mod rustrt {\n \n     extern {\n         #[rust_stack]\n-        pub unsafe fn rust_upcall_fail(expr: *c_char,\n-                                       file: *c_char,\n-                                       line: size_t);\n+        pub fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n     }\n }\n "}, {"sha": "f7a943f8d2fdf0c0b4bd961f188fe9e52eb61c62", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -1078,12 +1078,12 @@ mod testrt {\n \n     #[nolink]\n     extern {\n-        pub unsafe fn rust_dbg_lock_create() -> *libc::c_void;\n-        pub unsafe fn rust_dbg_lock_destroy(lock: *libc::c_void);\n-        pub unsafe fn rust_dbg_lock_lock(lock: *libc::c_void);\n-        pub unsafe fn rust_dbg_lock_unlock(lock: *libc::c_void);\n-        pub unsafe fn rust_dbg_lock_wait(lock: *libc::c_void);\n-        pub unsafe fn rust_dbg_lock_signal(lock: *libc::c_void);\n+        pub fn rust_dbg_lock_create() -> *libc::c_void;\n+        pub fn rust_dbg_lock_destroy(lock: *libc::c_void);\n+        pub fn rust_dbg_lock_lock(lock: *libc::c_void);\n+        pub fn rust_dbg_lock_unlock(lock: *libc::c_void);\n+        pub fn rust_dbg_lock_wait(lock: *libc::c_void);\n+        pub fn rust_dbg_lock_signal(lock: *libc::c_void);\n     }\n }\n "}, {"sha": "50d9c7e4dede07ca40244ceb5fdbc15768a8a1a1", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -296,16 +296,16 @@ extern \"rust-intrinsic\" {\n     /// `init` is unsafe because it returns a zeroed-out datum,\n     /// which is unsafe unless T is POD. We don't have a POD\n     /// kind yet. (See #4074).\n-    pub unsafe fn init<T>() -> T;\n+    pub fn init<T>() -> T;\n \n     /// Create an uninitialized value.\n-    pub unsafe fn uninit<T>() -> T;\n+    pub fn uninit<T>() -> T;\n \n     /// Move a value out of scope without running drop glue.\n     ///\n     /// `forget` is unsafe because the caller is responsible for\n     /// ensuring the argument is deallocated already.\n-    pub unsafe fn forget<T>(_: T) -> ();\n+    pub fn forget<T>(_: T) -> ();\n     pub fn transmute<T,U>(e: T) -> U;\n \n     /// Returns `true` if a type requires drop glue."}, {"sha": "e0c4950b38eaa8a0cb1d4cc742838b3493486bc2", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -28,17 +28,12 @@ pub mod rustrt {\n \n     extern {\n         #[rust_stack]\n-        pub unsafe fn rust_upcall_malloc(td: *c_char, size: uintptr_t)\n-                                         -> *c_char;\n-\n+        pub fn rust_upcall_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n         #[rust_stack]\n-        pub unsafe fn rust_upcall_free(ptr: *c_char);\n-\n+        pub fn rust_upcall_free(ptr: *c_char);\n         #[fast_ffi]\n-        pub unsafe fn rust_upcall_malloc_noswitch(td: *c_char,\n-                                                  size: uintptr_t)\n-                                                  -> *c_char;\n-\n+        pub fn rust_upcall_malloc_noswitch(td: *c_char, size: uintptr_t)\n+                                           -> *c_char;\n         #[rust_stack]\n         pub fn rust_try_get_task() -> *rust_task;\n     }"}, {"sha": "11f2c7005bceeced3dd9c33c41a50c114c521b39", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -1077,7 +1077,7 @@ pub struct foreign_item {\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub enum foreign_item_ {\n-    foreign_item_fn(fn_decl, purity, Generics),\n+    foreign_item_fn(fn_decl, Generics),\n     foreign_item_static(Ty, /* is_mutbl */ bool),\n }\n "}, {"sha": "9bda1189a8eb399a79217810a9ab8c069fc40f06", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -223,15 +223,14 @@ fn noop_fold_foreign_item(ni: @foreign_item, fld: @ast_fold)\n         attrs: ni.attrs.map(|x| fold_attribute(*x)),\n         node:\n             match ni.node {\n-                foreign_item_fn(ref fdec, purity, ref generics) => {\n+                foreign_item_fn(ref fdec, ref generics) => {\n                     foreign_item_fn(\n                         ast::fn_decl {\n                             inputs: fdec.inputs.map(|a|\n                                 fold_arg(/*bad*/(*a).clone())),\n                             output: fld.fold_ty(&fdec.output),\n                             cf: fdec.cf,\n                         },\n-                        purity,\n                         fold_generics(generics, fld))\n                 }\n                 foreign_item_static(ref t, m) => {"}, {"sha": "a39dc38a85608e45ff12b69f89cdaef4460fcd47", "filename": "src/libsyntax/oldvisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Foldvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Foldvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Foldvisit.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -339,7 +339,7 @@ pub fn visit_pat<E:Clone>(p: &pat, (e, v): (E, vt<E>)) {\n \n pub fn visit_foreign_item<E:Clone>(ni: &foreign_item, (e, v): (E, vt<E>)) {\n     match ni.node {\n-        foreign_item_fn(ref fd, _, ref generics) => {\n+        foreign_item_fn(ref fd, ref generics) => {\n             visit_fn_decl(fd, (e.clone(), v));\n             (v.visit_generics)(generics, (e, v));\n         }"}, {"sha": "ec956f61863765a56b25558b174fb8d7db965b97", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -63,6 +63,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteMultipleLocalDecl,\n     ObsoleteMutWithMultipleBindings,\n     ObsoleteExternVisibility,\n+    ObsoleteUnsafeExternFn,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -246,7 +247,12 @@ impl ParserObsoleteMethods for Parser {\n                 \"`pub extern` or `priv extern`\",\n                 \"place the `pub` or `priv` on the individual external items \\\n                  instead\"\n-            )\n+            ),\n+            ObsoleteUnsafeExternFn => (\n+                \"unsafe external function\",\n+                \"external functions are always unsafe; remove the `unsafe` \\\n+                 keyword\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "386f027d6e10fa46bb804cef8045cca6c8510e1c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -84,7 +84,8 @@ use parse::obsolete::{ObsoletePurity, ObsoleteStaticMethod};\n use parse::obsolete::{ObsoleteConstItem, ObsoleteFixedLengthVectorType};\n use parse::obsolete::{ObsoleteNamedExternModule, ObsoleteMultipleLocalDecl};\n use parse::obsolete::{ObsoleteMutWithMultipleBindings};\n-use parse::obsolete::{ObsoleteExternVisibility, ParserObsoleteMethods};\n+use parse::obsolete::{ObsoleteExternVisibility, ObsoleteUnsafeExternFn};\n+use parse::obsolete::{ParserObsoleteMethods};\n use parse::token::{can_begin_expr, get_ident_interner, ident_to_str, is_ident};\n use parse::token::{is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, keywords, special_idents};\n@@ -4066,14 +4067,20 @@ impl Parser {\n     fn parse_item_foreign_fn(&self,  attrs: ~[Attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n         let vis = self.parse_visibility();\n+\n+        // Parse obsolete purity.\n         let purity = self.parse_fn_purity();\n+        if purity != impure_fn {\n+            self.obsolete(*self.last_span, ObsoleteUnsafeExternFn);\n+        }\n+\n         let (ident, generics) = self.parse_fn_header();\n         let decl = self.parse_fn_decl();\n         let hi = self.span.hi;\n         self.expect(&token::SEMI);\n         @ast::foreign_item { ident: ident,\n                              attrs: attrs,\n-                             node: foreign_item_fn(decl, purity, generics),\n+                             node: foreign_item_fn(decl, generics),\n                              id: self.get_id(),\n                              span: mk_sp(lo, hi),\n                              vis: vis }"}, {"sha": "7d885837a60655e7509eae2e5e4795c7f276dd2d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -454,8 +454,8 @@ pub fn print_foreign_item(s: @ps, item: &ast::foreign_item) {\n     maybe_print_comment(s, item.span.lo);\n     print_outer_attributes(s, item.attrs);\n     match item.node {\n-      ast::foreign_item_fn(ref decl, purity, ref generics) => {\n-        print_fn(s, decl, Some(purity), AbiSet::Rust(), item.ident, generics, None,\n+      ast::foreign_item_fn(ref decl, ref generics) => {\n+        print_fn(s, decl, None, AbiSet::Rust(), item.ident, generics, None,\n                  item.vis);\n         end(s); // end head-ibox\n         word(s.s, \";\");"}, {"sha": "6f228a9a43b984a5c9a38f28aeedf931fded6331", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -317,7 +317,7 @@ pub fn visit_foreign_item<E:Clone>(visitor: @Visitor<E>,\n                                    foreign_item: &foreign_item,\n                                    env: E) {\n     match foreign_item.node {\n-        foreign_item_fn(ref function_declaration, _, ref generics) => {\n+        foreign_item_fn(ref function_declaration, ref generics) => {\n             visit_fn_decl(visitor, function_declaration, env.clone());\n             visitor.visit_generics(generics, env)\n         }"}, {"sha": "ef6bac16d743285c38f5202e68c6ae9d0d45ab55", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -119,7 +119,7 @@ fn main() {\n \n     foreach y in range(0, 256) {\n         foreach x in range(0, 256) {\n-            print((symbols[pixels[y*256+x] / 0.2f32) as int]);\n+            print(symbols[(pixels[y*256+x] / 0.2f32) as int]);\n         }\n         println(\"\");\n     }"}, {"sha": "6c74c860a4b1df44d6060c6420303719d02cdd76", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -13,7 +13,7 @@\n mod test {\n     #[abi = \"cdecl\"]\n     extern {\n-        pub unsafe fn free();\n+        pub fn free();\n     }\n }\n "}, {"sha": "b146f32ec1ec64194d03665d1af3ef8168409a2c", "filename": "src/test/run-pass/extern-pub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9457ebee550d8f77ffc9b895acddae8946ee631e/src%2Ftest%2Frun-pass%2Fextern-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pub.rs?ref=9457ebee550d8f77ffc9b895acddae8946ee631e", "patch": "@@ -1,5 +1,5 @@\n extern {\n-    pub unsafe fn free(p: *u8);\n+    pub fn free(p: *u8);\n }\n \n pub fn main() {"}]}