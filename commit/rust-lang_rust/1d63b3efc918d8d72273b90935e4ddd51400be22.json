{"sha": "1d63b3efc918d8d72273b90935e4ddd51400be22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjNiM2VmYzkxOGQ4ZDcyMjczYjkwOTM1ZTRkZGQ1MTQwMGJlMjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T08:25:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T08:25:36Z"}, "message": "simplify", "tree": {"sha": "e89511bf7162d60b5b9cdabce21fed44278dbd33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89511bf7162d60b5b9cdabce21fed44278dbd33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d63b3efc918d8d72273b90935e4ddd51400be22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d63b3efc918d8d72273b90935e4ddd51400be22", "html_url": "https://github.com/rust-lang/rust/commit/1d63b3efc918d8d72273b90935e4ddd51400be22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d63b3efc918d8d72273b90935e4ddd51400be22/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ce89145dbdf529738646aa3af3492dc7ec3066", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ce89145dbdf529738646aa3af3492dc7ec3066", "html_url": "https://github.com/rust-lang/rust/commit/c3ce89145dbdf529738646aa3af3492dc7ec3066"}], "stats": {"total": 107, "additions": 47, "deletions": 60}, "files": [{"sha": "1d39544d3f617c6b9692147b88fab4946c342441", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 47, "deletions": 60, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/1d63b3efc918d8d72273b90935e4ddd51400be22/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d63b3efc918d8d72273b90935e4ddd51400be22/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=1d63b3efc918d8d72273b90935e4ddd51400be22", "patch": "@@ -61,15 +61,11 @@ pub struct FunctionQualifier {\n }\n \n impl FunctionSignature {\n-    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n-        self.doc = doc;\n-        self\n-    }\n-\n     pub(crate) fn from_hir(db: &RootDatabase, function: hir::Function) -> Self {\n-        let doc = function.docs(db);\n         let ast_node = function.source(db).value;\n-        FunctionSignature::from(&ast_node).with_doc_opt(doc)\n+        let mut res = FunctionSignature::from(&ast_node);\n+        res.doc = function.docs(db);\n+        res\n     }\n \n     pub(crate) fn from_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n@@ -93,24 +89,21 @@ impl FunctionSignature {\n             params.push(raw_param);\n         }\n \n-        Some(\n-            FunctionSignature {\n-                kind: CallableKind::StructConstructor,\n-                visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n-                // Do we need `const`?\n-                qualifier: Default::default(),\n-                name: node.name().map(|n| n.text().to_string()),\n-                ret_type: node.name().map(|n| n.text().to_string()),\n-                parameters: params,\n-                parameter_names: vec![],\n-                parameter_types,\n-                generic_parameters: generic_parameters(&node),\n-                where_predicates: where_predicates(&node),\n-                doc: None,\n-                has_self_param: false,\n-            }\n-            .with_doc_opt(st.docs(db)),\n-        )\n+        Some(FunctionSignature {\n+            kind: CallableKind::StructConstructor,\n+            visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n+            // Do we need `const`?\n+            qualifier: Default::default(),\n+            name: node.name().map(|n| n.text().to_string()),\n+            ret_type: node.name().map(|n| n.text().to_string()),\n+            parameters: params,\n+            parameter_names: vec![],\n+            parameter_types,\n+            generic_parameters: generic_parameters(&node),\n+            where_predicates: where_predicates(&node),\n+            doc: st.docs(db),\n+            has_self_param: false,\n+        })\n     }\n \n     pub(crate) fn from_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Option<Self> {\n@@ -140,48 +133,42 @@ impl FunctionSignature {\n             params.push(format!(\"{}: {}\", name, ty.display(db)));\n         }\n \n-        Some(\n-            FunctionSignature {\n-                kind: CallableKind::VariantConstructor,\n-                visibility: None,\n-                // Do we need `const`?\n-                qualifier: Default::default(),\n-                name: Some(name),\n-                ret_type: None,\n-                parameters: params,\n-                parameter_names: vec![],\n-                parameter_types,\n-                generic_parameters: vec![],\n-                where_predicates: vec![],\n-                doc: None,\n-                has_self_param: false,\n-            }\n-            .with_doc_opt(variant.docs(db)),\n-        )\n+        Some(FunctionSignature {\n+            kind: CallableKind::VariantConstructor,\n+            visibility: None,\n+            // Do we need `const`?\n+            qualifier: Default::default(),\n+            name: Some(name),\n+            ret_type: None,\n+            parameters: params,\n+            parameter_names: vec![],\n+            parameter_types,\n+            generic_parameters: vec![],\n+            where_predicates: vec![],\n+            doc: variant.docs(db),\n+            has_self_param: false,\n+        })\n     }\n \n     pub(crate) fn from_macro(db: &RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n         let node: ast::MacroCall = macro_def.source(db).value;\n \n         let params = vec![];\n \n-        Some(\n-            FunctionSignature {\n-                kind: CallableKind::Macro,\n-                visibility: None,\n-                qualifier: Default::default(),\n-                name: node.name().map(|n| n.text().to_string()),\n-                ret_type: None,\n-                parameters: params,\n-                parameter_names: vec![],\n-                parameter_types: vec![],\n-                generic_parameters: vec![],\n-                where_predicates: vec![],\n-                doc: None,\n-                has_self_param: false,\n-            }\n-            .with_doc_opt(macro_def.docs(db)),\n-        )\n+        Some(FunctionSignature {\n+            kind: CallableKind::Macro,\n+            visibility: None,\n+            qualifier: Default::default(),\n+            name: node.name().map(|n| n.text().to_string()),\n+            ret_type: None,\n+            parameters: params,\n+            parameter_names: vec![],\n+            parameter_types: vec![],\n+            generic_parameters: vec![],\n+            where_predicates: vec![],\n+            doc: macro_def.docs(db),\n+            has_self_param: false,\n+        })\n     }\n }\n "}]}