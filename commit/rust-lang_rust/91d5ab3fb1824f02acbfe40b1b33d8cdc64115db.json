{"sha": "91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZDVhYjNmYjE4MjRmMDJhY2JmZTQwYjFiMzNkOGNkYzY0MTE1ZGI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T15:06:06Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T22:55:41Z"}, "message": "Declare `body_owner` as `LocalDefId` in `MemCategorizationContext`", "tree": {"sha": "bbd759683d9078175855546ab412237ebcee910f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd759683d9078175855546ab412237ebcee910f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "html_url": "https://github.com/rust-lang/rust/commit/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9", "html_url": "https://github.com/rust-lang/rust/commit/3c6e6ca7295bb78ee8742455a8db9a5f8e5b78f9"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7ca2b221f78dbd227facec1f3c9a96a5f5f5fcc3", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "patch": "@@ -774,7 +774,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         f(mc::MemCategorizationContext::new(\n             &self.infcx,\n             self.outlives_environment.param_env,\n-            self.body_owner,\n+            self.body_owner.expect_local(),\n             &self.tables.borrow(),\n         ))\n     }"}, {"sha": "55802c140bc9f3207a323d7ca6e65c5f18f8faa4", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "patch": "@@ -146,8 +146,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id()).to_def_id();\n-        assert_eq!(body_owner_def_id, closure_def_id);\n+        let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n+        assert_eq!(body_owner_def_id.to_def_id(), closure_def_id);\n         let mut delegate = InferBorrowKind {\n             fcx: self,\n             closure_def_id,"}, {"sha": "cdebd63b5942fe78749b4c66d19cd060b2636541", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "patch": "@@ -9,7 +9,7 @@ pub use mc::{Place, PlaceBase, Projection};\n \n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::PatKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::{self, adjustment, TyCtxt};\n@@ -84,7 +84,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     pub fn new(\n         delegate: &'a mut (dyn Delegate<'tcx> + 'a),\n         infcx: &'a InferCtxt<'a, 'tcx>,\n-        body_owner: DefId,\n+        body_owner: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         tables: &'a ty::TypeckTables<'tcx>,\n     ) -> Self {"}, {"sha": "f6edb6b754534f1a4f5bb35a6941ebf508ceaf30", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91d5ab3fb1824f02acbfe40b1b33d8cdc64115db/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=91d5ab3fb1824f02acbfe40b1b33d8cdc64115db", "patch": "@@ -55,7 +55,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::PatKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_span::Span;\n@@ -140,7 +140,7 @@ crate struct MemCategorizationContext<'a, 'tcx> {\n     crate tables: &'a ty::TypeckTables<'tcx>,\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    body_owner: DefId,\n+    body_owner: LocalDefId,\n     upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n }\n \n@@ -151,7 +151,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     crate fn new(\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        body_owner: DefId,\n+        body_owner: LocalDefId,\n         tables: &'a ty::TypeckTables<'tcx>,\n     ) -> MemCategorizationContext<'a, 'tcx> {\n         MemCategorizationContext {\n@@ -473,7 +473,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n         let upvar_id = ty::UpvarId {\n             var_path: ty::UpvarPath { hir_id: var_id },\n-            closure_expr_id: closure_expr_def_id.expect_local(),\n+            closure_expr_id: closure_expr_def_id,\n         };\n         let var_ty = self.node_ty(var_id)?;\n "}]}