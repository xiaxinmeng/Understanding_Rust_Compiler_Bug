{"sha": "7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYjNiMzA1ZTRmMmI4ZjdkMWUyNGM0NTc1NmNmZTIzYjA4NTlkZGM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-20T20:06:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-20T20:06:49Z"}, "message": "Move id counters into sess in preparation for moving desugaring to middle-end.", "tree": {"sha": "4897e598c2a06a76bfd0c2e709e6828126b29d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4897e598c2a06a76bfd0c2e709e6828126b29d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "html_url": "https://github.com/rust-lang/rust/commit/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5536af3d48da5176bf4b473b54cb6b060c6eee68", "url": "https://api.github.com/repos/rust-lang/rust/commits/5536af3d48da5176bf4b473b54cb6b060c6eee68", "html_url": "https://github.com/rust-lang/rust/commit/5536af3d48da5176bf4b473b54cb6b060c6eee68"}], "stats": {"total": 87, "additions": 32, "deletions": 55}, "files": [{"sha": "0d0e93be15eba29cec10ce7eef5645f4353a2a6e", "filename": "src/boot/driver/lib.ml", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Fdriver%2Flib.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Fdriver%2Flib.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Flib.ml?ref=7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "patch": "@@ -109,11 +109,11 @@ let get_file_mod\n     (sess:Session.sess)\n     (abi:Abi.abi)\n     (filename:filename)\n-    (nref:node_id ref)\n-    (oref:opaque_id ref)\n     : Ast.mod_items =\n   let dies = get_dies sess filename in\n   let items = Hashtbl.create 0 in\n+  let nref = sess.Session.sess_node_id_counter in\n+  let oref = sess.Session.sess_opaque_id_counter in\n     Dwarf.extract_mod_items nref oref abi items dies;\n     items\n ;;\n@@ -123,8 +123,6 @@ let get_mod\n     (abi:Abi.abi)\n     (meta:Ast.meta_pat)\n     (use_id:node_id)\n-    (nref:node_id ref)\n-    (oref:opaque_id ref)\n     (crate_item_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     : (filename * Ast.mod_items) =\n   let found = Queue.create () in\n@@ -215,8 +213,8 @@ let get_mod\n       | 1 ->\n           let (filename, crate_id) = Queue.pop found in\n           let items =\n-            htab_search_or_default crate_item_cache crate_id\n-              (fun () -> get_file_mod sess abi filename nref oref)\n+              htab_search_or_default crate_item_cache crate_id\n+                (fun () -> get_file_mod sess abi filename)\n           in\n             (filename, items)\n       | _ -> Common.err (Some use_id) \"multiple crates match 'use' clause\""}, {"sha": "3bd5d737f3397bca7bfd6607a9d7646faa0e4312", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "patch": "@@ -65,6 +65,9 @@ let (sess:Session.sess) =\n     Session.sess_timings = Hashtbl.create 0;\n     Session.sess_lib_dirs = Queue.create ();\n     Session.sess_crate_meta = Hashtbl.create 0;\n+    Session.sess_node_id_counter = ref (Node 0);\n+    Session.sess_opaque_id_counter = ref (Opaque 0);\n+    Session.sess_temp_id_counter = ref (Temp 0);\n   }\n ;;\n \n@@ -101,7 +104,7 @@ let set_default_output_filename (sess:Session.sess) : unit =\n \n let dump_sig (filename:filename) : unit =\n   let items =\n-    Lib.get_file_mod sess abi filename (ref (Node 0)) (ref (Opaque 0)) in\n+    Lib.get_file_mod sess abi filename in\n     Printf.fprintf stdout \"%s\\n\" (Fmt.fmt_to_str Ast.fmt_mod_items items);\n     exit_if_failed ();\n     exit 0"}, {"sha": "06fcacb2fdaddf248a2e0350455a106a40601e9a", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "patch": "@@ -47,10 +47,15 @@ type sess =\n   mutable sess_report_deps: bool;\n   mutable sess_next_crate_id: int;\n   mutable sess_fuzz_item_count: int;\n+\n   sess_timings: (string, float) Hashtbl.t;\n   sess_spans: (node_id,span) Hashtbl.t;\n   sess_lib_dirs: filename Queue.t;\n   sess_crate_meta: (meta, crate_id) Hashtbl.t;\n+\n+  sess_node_id_counter: node_id ref;\n+  sess_opaque_id_counter: opaque_id ref;\n+  sess_temp_id_counter: temp_id ref;\n }\n ;;\n "}, {"sha": "ac05105ea1977757f749589d0451a6a15a54ba27", "filename": "src/boot/fe/cexp.ml", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Ffe%2Fcexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Ffe%2Fcexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fcexp.ml?ref=7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "patch": "@@ -381,9 +381,6 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n         let ps = env.env_ps in\n         let p =\n           make_parser\n-            ps.pstate_temp_id\n-            ps.pstate_node_id\n-            ps.pstate_opaque_id\n             ps.pstate_crate_cache\n             ps.pstate_sess\n             ps.pstate_get_mod\n@@ -432,12 +429,7 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n               end\n               u.use_meta\n           in\n-          ps.pstate_get_mod\n-            meta_pat\n-            id\n-            ps.pstate_node_id\n-            ps.pstate_opaque_id\n-            ps.pstate_crate_cache\n+            ps.pstate_get_mod meta_pat id ps.pstate_crate_cache\n         in\n           iflog ps\n             begin\n@@ -631,9 +623,6 @@ let parse_crate_file\n     (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     : Ast.crate =\n   let fname = Session.filename_of sess.Session.sess_in in\n-  let tref = ref (Temp 0) in\n-  let nref = ref (Node 0) in\n-  let oref = ref (Opaque 0) in\n   let required = Hashtbl.create 4 in\n   let required_syms = Hashtbl.create 4 in\n   let files = Hashtbl.create 0 in\n@@ -670,7 +659,7 @@ let parse_crate_file\n         | Some (PVAL_num n) -> LIT_INT n\n   in\n   let ps =\n-    make_parser tref nref oref crate_cache sess get_mod get_cenv_tok\n+    make_parser crate_cache sess get_mod get_cenv_tok\n       infer_lib_name required required_syms fname\n   in\n   let env = { env_bindings = bindings;\n@@ -737,17 +726,14 @@ let parse_src_file\n     (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     : Ast.crate =\n   let fname = Session.filename_of sess.Session.sess_in in\n-  let tref = ref (Temp 0) in\n-  let nref = ref (Node 0) in\n-  let oref = ref (Opaque 0) in\n   let required = Hashtbl.create 0 in\n   let required_syms = Hashtbl.create 0 in\n   let get_cenv_tok ps ident =\n     raise (err (Printf.sprintf \"no binding for '%s' found\"\n                   ident) ps)\n   in\n   let ps =\n-    make_parser tref nref oref crate_cache sess get_mod get_cenv_tok\n+    make_parser crate_cache sess get_mod get_cenv_tok\n       infer_lib_name required required_syms fname\n   in\n     with_err_handling sess"}, {"sha": "c747713b4c07febfeafaf936a0ee66be2268f172", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "patch": "@@ -1202,14 +1202,7 @@ and parse_use\n   let apos = lexpos ps in\n   let bpos = lexpos ps in\n   let id = (span ps apos bpos ()).id in\n-  let (path, items) =\n-    ps.pstate_get_mod\n-      meta\n-      id\n-      ps.pstate_node_id\n-      ps.pstate_opaque_id\n-      ps.pstate_crate_cache\n-  in\n+  let (path, items) = ps.pstate_get_mod meta id ps.pstate_crate_cache in\n   let bpos = lexpos ps in\n     expect ps SEMI;\n     let rlib ="}, {"sha": "3cf464ca7a8c318a0a8a42aa80023740aa854945", "filename": "src/boot/fe/parser.ml", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Ffe%2Fparser.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc/src%2Fboot%2Ffe%2Fparser.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fparser.ml?ref=7ab3b305e4f2b8f7d1e24c45756cfe23b0859ddc", "patch": "@@ -6,10 +6,8 @@ open Token;;\n \n type get_mod_fn = (Ast.meta_pat\n                    -> node_id\n-                     -> (node_id ref)\n-                       -> (opaque_id ref)\n-                         -> (crate_id, Ast.mod_items) Hashtbl.t\n-                           -> (filename * Ast.mod_items))\n+                     -> (crate_id, Ast.mod_items) Hashtbl.t\n+                       -> (filename * Ast.mod_items))\n ;;\n \n type pstate =\n@@ -20,9 +18,6 @@ type pstate =\n       pstate_lexbuf       : Lexing.lexbuf;\n       pstate_file         : filename;\n       pstate_sess         : Session.sess;\n-      pstate_temp_id      : temp_id ref;\n-      pstate_node_id      : node_id ref;\n-      pstate_opaque_id    : opaque_id ref;\n       pstate_crate_cache  : (crate_id, Ast.mod_items) Hashtbl.t;\n       pstate_get_mod      : get_mod_fn;\n       pstate_get_cenv_tok : pstate -> Ast.ident -> token;\n@@ -43,9 +38,6 @@ let iflog ps thunk =\n ;;\n \n let make_parser\n-    (tref:temp_id ref)\n-    (nref:node_id ref)\n-    (oref:opaque_id ref)\n     (crate_cache:(crate_id, Ast.mod_items) Hashtbl.t)\n     (sess:Session.sess)\n     (get_mod:get_mod_fn)\n@@ -69,9 +61,6 @@ let make_parser\n         pstate_lexbuf = lexbuf;\n         pstate_file = fname;\n         pstate_sess = sess;\n-        pstate_temp_id = tref;\n-        pstate_node_id = nref;\n-        pstate_opaque_id = oref;\n         pstate_crate_cache = crate_cache;\n         pstate_get_mod = get_mod;\n         pstate_get_cenv_tok = get_cenv_tok;\n@@ -94,14 +83,16 @@ let lexpos (ps:pstate) : pos =\n ;;\n \n let next_node_id (ps:pstate) : node_id =\n-  let id = !(ps.pstate_node_id) in\n-    ps.pstate_node_id := Node ((int_of_node id)+1);\n+  let r = ps.pstate_sess.Session.sess_node_id_counter in\n+  let id = !r in\n+    r := Node ((int_of_node id)+1);\n     id\n ;;\n \n let next_opaque_id (ps:pstate) : opaque_id =\n-  let id = !(ps.pstate_opaque_id) in\n-    ps.pstate_opaque_id := Opaque ((int_of_opaque id)+1);\n+  let r = ps.pstate_sess.Session.sess_opaque_id_counter in\n+  let id = !r in\n+    r := Opaque ((int_of_opaque id)+1);\n     id\n ;;\n \n@@ -203,14 +194,15 @@ let build_tmp\n     (apos:pos)\n     (bpos:pos)\n     : (temp_id * Ast.lval * Ast.stmt) =\n-  let nonce = !(ps.pstate_temp_id) in\n-    ps.pstate_temp_id := Temp ((int_of_temp nonce)+1);\n+  let r = ps.pstate_sess.Session.sess_temp_id_counter in\n+  let id = !r in\n+    r := Temp ((int_of_temp id)+1);\n     iflog ps\n-      (fun _ -> log ps \"building temporary %d\" (int_of_temp nonce));\n-    let decl = Ast.DECL_slot (Ast.KEY_temp nonce, (span ps apos bpos slot)) in\n+      (fun _ -> log ps \"building temporary %d\" (int_of_temp id));\n+    let decl = Ast.DECL_slot (Ast.KEY_temp id, (span ps apos bpos slot)) in\n     let declstmt = span ps apos bpos (Ast.STMT_decl decl) in\n-    let tmp = Ast.LVAL_base (span ps apos bpos (Ast.BASE_temp nonce)) in\n-      (nonce, tmp, declstmt)\n+    let tmp = Ast.LVAL_base (span ps apos bpos (Ast.BASE_temp id)) in\n+      (id, tmp, declstmt)\n ;;\n \n (* Simple helpers *)"}]}