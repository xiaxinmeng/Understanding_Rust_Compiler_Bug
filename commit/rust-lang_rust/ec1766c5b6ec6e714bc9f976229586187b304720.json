{"sha": "ec1766c5b6ec6e714bc9f976229586187b304720", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTc2NmM1YjZlYzZlNzE0YmM5Zjk3NjIyOTU4NjE4N2IzMDQ3MjA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-27T16:37:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-27T16:37:20Z"}, "message": "Rollup merge of #76839 - lzutao:mips-asm, r=Amanieu\n\nAdd asm! support for MIPS\n\nFor now, I only add support for mips32.\nmips64 may come in future PRs if I could learn more about the target.", "tree": {"sha": "21012a5347b85d21047c5eb1ae9412ac5e441992", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21012a5347b85d21047c5eb1ae9412ac5e441992"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1766c5b6ec6e714bc9f976229586187b304720", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcL/ACRBK7hj4Ov3rIwAAdHIIAJML0lg2ga6iH2c2I44VgkZC\nkQyYw+TzwvC7kmqp5YZ2QeP5YXRZsJ9AoJZKaQ4WFvujIIGhs0wrMcbj13cba9Xn\nQnooyqU2hx2f7cligKcdeARsN75nts7TKvBGq4y5tMURojeDJ6DKvTk5gl/5mxTF\nI/zmyzeDEWpw9Ci56bSZl1yHTy0hbg/h4S2QP6aNQMOVw7mBjWDQeT77LX/jmbDv\nSNPxOITMCVPjw1JwxwOj6G+Zn1FC1BghYr9pgyqorlkewWYUFWJrRXqJ3LCcdfyL\nWyPTUY66F5issuMO/odayQS/o8mDtnrIKIR3HUGBF5BKUlzgqF1xxaWVSbqol7c=\n=OxDe\n-----END PGP SIGNATURE-----\n", "payload": "tree 21012a5347b85d21047c5eb1ae9412ac5e441992\nparent d902752866cbbdb331e3cf28ff6bba86ab0f6c62\nparent 9000710959b797986b3e14553e2261f62634929d\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601224640 +0200\ncommitter GitHub <noreply@github.com> 1601224640 +0200\n\nRollup merge of #76839 - lzutao:mips-asm, r=Amanieu\n\nAdd asm! support for MIPS\n\nFor now, I only add support for mips32.\nmips64 may come in future PRs if I could learn more about the target.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1766c5b6ec6e714bc9f976229586187b304720", "html_url": "https://github.com/rust-lang/rust/commit/ec1766c5b6ec6e714bc9f976229586187b304720", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1766c5b6ec6e714bc9f976229586187b304720/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/d902752866cbbdb331e3cf28ff6bba86ab0f6c62", "html_url": "https://github.com/rust-lang/rust/commit/d902752866cbbdb331e3cf28ff6bba86ab0f6c62"}, {"sha": "9000710959b797986b3e14553e2261f62634929d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9000710959b797986b3e14553e2261f62634929d", "html_url": "https://github.com/rust-lang/rust/commit/9000710959b797986b3e14553e2261f62634929d"}], "stats": {"total": 390, "additions": 389, "deletions": 1}, "files": [{"sha": "f801f845ac16c410848f6fea06a90e1a016e7579", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ec1766c5b6ec6e714bc9f976229586187b304720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1766c5b6ec6e714bc9f976229586187b304720/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=ec1766c5b6ec6e714bc9f976229586187b304720", "patch": "@@ -259,6 +259,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {}\n                 InlineAsmArch::Nvptx64 => {}\n                 InlineAsmArch::Hexagon => {}\n+                InlineAsmArch::Mips => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -505,6 +506,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => \"w\",\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n@@ -551,6 +554,7 @@ fn modifier_to_llvm(\n             }\n         }\n         InlineAsmRegClass::Hexagon(_) => None,\n+        InlineAsmRegClass::Mips(_) => None,\n         InlineAsmRegClass::Nvptx(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n         | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n@@ -603,6 +607,8 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n             cx.type_vector(cx.type_i64(), 2)\n         }\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n@@ -700,6 +706,12 @@ fn llvm_fixup_input(\n                 value\n             }\n         }\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n+            // MIPS only supports register-length arithmetics.\n+            Primitive::Int(Integer::I8 | Integer::I16, _) => bx.zext(value, bx.cx.type_i32()),\n+            Primitive::F32 => bx.bitcast(value, bx.cx.type_i32()),\n+            _ => value,\n+        },\n         _ => value,\n     }\n }\n@@ -768,6 +780,13 @@ fn llvm_fixup_output(\n                 value\n             }\n         }\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n+            // MIPS only supports register-length arithmetics.\n+            Primitive::Int(Integer::I8, _) => bx.trunc(value, bx.cx.type_i8()),\n+            Primitive::Int(Integer::I16, _) => bx.trunc(value, bx.cx.type_i16()),\n+            Primitive::F32 => bx.bitcast(value, bx.cx.type_f32()),\n+            _ => value,\n+        },\n         _ => value,\n     }\n }\n@@ -831,6 +850,12 @@ fn llvm_fixup_output_type(\n                 layout.llvm_type(cx)\n             }\n         }\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n+            // MIPS only supports register-length arithmetics.\n+            Primitive::Int(Integer::I8 | Integer::I16, _) => cx.type_i32(),\n+            Primitive::F32 => cx.type_i32(),\n+            _ => layout.llvm_type(cx),\n+        },\n         _ => layout.llvm_type(cx),\n     }\n }"}, {"sha": "638c52d97f1e3dc6aa167b8c648a715d7d9d4f06", "filename": "compiler/rustc_target/src/asm/mips.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ec1766c5b6ec6e714bc9f976229586187b304720/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1766c5b6ec6e714bc9f976229586187b304720/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs?ref=ec1766c5b6ec6e714bc9f976229586187b304720", "patch": "@@ -0,0 +1,132 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    Mips MipsInlineAsmRegClass {\n+        reg,\n+        freg,\n+    }\n+}\n+\n+impl MipsInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::reg => types! { _: I8, I16, I32, F32; },\n+            Self::freg => types! { _: F32; },\n+        }\n+    }\n+}\n+\n+// The reserved registers are somewhat taken from <https://git.io/JUR1k#L150>.\n+def_regs! {\n+    Mips MipsInlineAsmReg MipsInlineAsmRegClass {\n+        v0: reg = [\"$2\", \"$v0\"],\n+        v1: reg = [\"$3\", \"$v1\"],\n+        a0: reg = [\"$4\", \"$a0\"],\n+        a1: reg = [\"$5\", \"$a1\"],\n+        a2: reg = [\"$6\", \"$a2\"],\n+        a3: reg = [\"$7\", \"$a3\"],\n+        // FIXME: Reserve $t0, $t1 if in mips16 mode.\n+        t0: reg = [\"$8\", \"$t0\"],\n+        t1: reg = [\"$9\", \"$t1\"],\n+        t2: reg = [\"$10\", \"$t2\"],\n+        t3: reg = [\"$11\", \"$t3\"],\n+        t4: reg = [\"$12\", \"$t4\"],\n+        t5: reg = [\"$13\", \"$t5\"],\n+        t6: reg = [\"$14\", \"$t6\"],\n+        t7: reg = [\"$15\", \"$t7\"],\n+        s0: reg = [\"$16\", \"$s0\"],\n+        s1: reg = [\"$17\", \"$s1\"],\n+        s2: reg = [\"$18\", \"$s2\"],\n+        s3: reg = [\"$19\", \"$s3\"],\n+        s4: reg = [\"$20\", \"$s4\"],\n+        s5: reg = [\"$21\", \"$s5\"],\n+        s6: reg = [\"$22\", \"$s6\"],\n+        s7: reg = [\"$23\", \"$s7\"],\n+        t8: reg = [\"$24\", \"$t8\"],\n+        t9: reg = [\"$25\", \"$t9\"],\n+        f0: freg = [\"$f0\"],\n+        f1: freg = [\"$f1\"],\n+        f2: freg = [\"$f2\"],\n+        f3: freg = [\"$f3\"],\n+        f4: freg = [\"$f4\"],\n+        f5: freg = [\"$f5\"],\n+        f6: freg = [\"$f6\"],\n+        f7: freg = [\"$f7\"],\n+        f8: freg = [\"$f8\"],\n+        f9: freg = [\"$f9\"],\n+        f10: freg = [\"$f10\"],\n+        f11: freg = [\"$f11\"],\n+        f12: freg = [\"$f12\"],\n+        f13: freg = [\"$f13\"],\n+        f14: freg = [\"$f14\"],\n+        f15: freg = [\"$f15\"],\n+        f16: freg = [\"$f16\"],\n+        f17: freg = [\"$f17\"],\n+        f18: freg = [\"$f18\"],\n+        f19: freg = [\"$f19\"],\n+        f20: freg = [\"$f20\"],\n+        f21: freg = [\"$f21\"],\n+        f22: freg = [\"$f22\"],\n+        f23: freg = [\"$f23\"],\n+        f24: freg = [\"$f24\"],\n+        f25: freg = [\"$f25\"],\n+        f26: freg = [\"$f26\"],\n+        f27: freg = [\"$f27\"],\n+        f28: freg = [\"$f28\"],\n+        f29: freg = [\"$f29\"],\n+        f30: freg = [\"$f30\"],\n+        f31: freg = [\"$f31\"],\n+        #error = [\"$0\", \"$zero\"] =>\n+            \"constant zero cannot be used as an operand for inline asm\",\n+        #error = [\"$1\", \"$at\"] =>\n+            \"reserved for assembler (Assembler Temp)\",\n+        #error = [\"$26\", \"$k0\"] =>\n+            \"OS-reserved register cannot be used as an operand for inline asm\",\n+        #error = [\"$27\", \"$k1\"] =>\n+            \"OS-reserved register cannot be used as an operand for inline asm\",\n+        #error = [\"$28\", \"$gp\"] =>\n+            \"the global pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$29\", \"$sp\"] =>\n+            \"the stack pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$30\", \"$s8\", \"$fp\"] =>\n+            \"the frame pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$31\", \"$ra\"] =>\n+            \"the return address register cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl MipsInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+}"}, {"sha": "e2f8e91fa9574b0ed8f186a512a5fab2b64f06ff", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ec1766c5b6ec6e714bc9f976229586187b304720/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1766c5b6ec6e714bc9f976229586187b304720/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=ec1766c5b6ec6e714bc9f976229586187b304720", "patch": "@@ -152,13 +152,15 @@ macro_rules! types {\n mod aarch64;\n mod arm;\n mod hexagon;\n+mod mips;\n mod nvptx;\n mod riscv;\n mod x86;\n \n pub use aarch64::{AArch64InlineAsmReg, AArch64InlineAsmRegClass};\n pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n+pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n@@ -173,6 +175,7 @@ pub enum InlineAsmArch {\n     RiscV64,\n     Nvptx64,\n     Hexagon,\n+    Mips,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -188,6 +191,7 @@ impl FromStr for InlineAsmArch {\n             \"riscv64\" => Ok(Self::RiscV64),\n             \"nvptx64\" => Ok(Self::Nvptx64),\n             \"hexagon\" => Ok(Self::Hexagon),\n+            \"mips\" => Ok(Self::Mips),\n             _ => Err(()),\n         }\n     }\n@@ -201,6 +205,7 @@ pub enum InlineAsmReg {\n     RiscV(RiscVInlineAsmReg),\n     Nvptx(NvptxInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n+    Mips(MipsInlineAsmReg),\n }\n \n impl InlineAsmReg {\n@@ -211,6 +216,7 @@ impl InlineAsmReg {\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n+            Self::Mips(r) => r.name(),\n         }\n     }\n \n@@ -221,6 +227,7 @@ impl InlineAsmReg {\n             Self::AArch64(r) => InlineAsmRegClass::AArch64(r.reg_class()),\n             Self::RiscV(r) => InlineAsmRegClass::RiscV(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n+            Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n         }\n     }\n \n@@ -252,6 +259,9 @@ impl InlineAsmReg {\n             InlineAsmArch::Hexagon => {\n                 Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+            InlineAsmArch::Mips => {\n+                Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n         })\n     }\n \n@@ -269,6 +279,7 @@ impl InlineAsmReg {\n             Self::AArch64(r) => r.emit(out, arch, modifier),\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n+            Self::Mips(r) => r.emit(out, arch, modifier),\n         }\n     }\n \n@@ -279,6 +290,7 @@ impl InlineAsmReg {\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n+            Self::Mips(_) => cb(self),\n         }\n     }\n }\n@@ -291,6 +303,7 @@ pub enum InlineAsmRegClass {\n     RiscV(RiscVInlineAsmRegClass),\n     Nvptx(NvptxInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n+    Mips(MipsInlineAsmRegClass),\n }\n \n impl InlineAsmRegClass {\n@@ -302,6 +315,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.name(),\n             Self::Nvptx(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n+            Self::Mips(r) => r.name(),\n         }\n     }\n \n@@ -316,6 +330,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::RiscV),\n             Self::Nvptx(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Nvptx),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n+            Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n         }\n     }\n \n@@ -337,6 +352,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.suggest_modifier(arch, ty),\n             Self::Nvptx(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n+            Self::Mips(r) => r.suggest_modifier(arch, ty),\n         }\n     }\n \n@@ -354,6 +370,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.default_modifier(arch),\n             Self::Nvptx(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n+            Self::Mips(r) => r.default_modifier(arch),\n         }\n     }\n \n@@ -370,6 +387,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.supported_types(arch),\n             Self::Nvptx(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n+            Self::Mips(r) => r.supported_types(arch),\n         }\n     }\n \n@@ -391,6 +409,7 @@ impl InlineAsmRegClass {\n                 InlineAsmArch::Hexagon => {\n                     Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?)\n                 }\n+                InlineAsmArch::Mips => Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?),\n             })\n         })\n     }\n@@ -405,6 +424,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.valid_modifiers(arch),\n             Self::Nvptx(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n+            Self::Mips(r) => r.valid_modifiers(arch),\n         }\n     }\n }\n@@ -545,5 +565,10 @@ pub fn allocatable_registers(\n             hexagon::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+        InlineAsmArch::Mips => {\n+            let mut map = mips::regclass_map();\n+            mips::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+        }\n     }\n }"}, {"sha": "9bed06d323e08c01a9fa134fff095408e1b708d2", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec1766c5b6ec6e714bc9f976229586187b304720/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec1766c5b6ec6e714bc9f976229586187b304720/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=ec1766c5b6ec6e714bc9f976229586187b304720", "patch": "@@ -27,6 +27,7 @@ Inline assembly is currently supported on the following architectures:\n - RISC-V\n - NVPTX\n - Hexagon\n+- MIPS32\n \n ## Basic usage\n \n@@ -512,6 +513,8 @@ Here is the list of currently supported register classes:\n | ARM | `qreg` | `q[0-15]` | `w` |\n | ARM | `qreg_low8` | `q[0-7]` | `t` |\n | ARM | `qreg_low4` | `q[0-3]` | `x` |\n+| MIPS32 | `reg` | `$[2-25]` | `r` |\n+| MIPS32 | `freg` | `$f[0-31]` | `f` |\n | NVPTX | `reg16` | None\\* | `h` |\n | NVPTX | `reg32` | None\\* | `r` |\n | NVPTX | `reg64` | None\\* | `l` |\n@@ -547,6 +550,8 @@ Each register class has constraints on which value types they can be used with.\n | ARM | `sreg` | `vfp2` | `i32`, `f32` |\n | ARM | `dreg` | `vfp2` | `i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2` |\n | ARM | `qreg` | `neon` | `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4` |\n+| MIPS32 | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n+| MIPS32 | `freg` | None | `f32` |\n | NVPTX | `reg16` | None | `i8`, `i16` |\n | NVPTX | `reg32` | None | `i8`, `i16`, `i32`, `f32` |\n | NVPTX | `reg64` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n@@ -595,6 +600,7 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | ARM | `r13` | `sp` |\n | ARM | `r14` | `lr` |\n | ARM | `r15` | `pc` |\n+| MIPS32 | `$[2-25]` | Please [see the Wikipedia page][mips-regs] |\n | RISC-V | `x0` | `zero` |\n | RISC-V | `x1` | `ra` |\n | RISC-V | `x2` | `sp` |\n@@ -615,12 +621,14 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | Hexagon | `r30` | `fr` |\n | Hexagon | `r31` | `lr` |\n \n+[mips-regs]: https://en.wikibooks.org/wiki/MIPS_Assembly/Register_File#Registers\n+\n Some registers cannot be used for input or output operands:\n \n | Architecture | Unsupported register | Reason |\n | ------------ | -------------------- | ------ |\n | All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n-| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon) | The frame pointer cannot be used as an input or output. |\n+| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon), `$fp` (MIPS) | The frame pointer cannot be used as an input or output. |\n | ARM | `r7` or `r11` | On ARM the frame pointer can be either `r7` or `r11` depending on the target. The frame pointer cannot be used as an input or output. |\n | ARM | `r6` | `r6` is used internally by LLVM as a base pointer and therefore cannot be used as an input or output. |\n | x86 | `k0` | This is a constant zero register which can't be modified. |\n@@ -629,6 +637,11 @@ Some registers cannot be used for input or output operands:\n | x86 | `st([0-7])` | x87 registers are not currently supported (but may be in the future). |\n | AArch64 | `xzr` | This is a constant zero register which can't be modified. |\n | ARM | `pc` | This is the program counter, not a real register. |\n+| MIPS32 | `$0` or `$zero` | This is a constant zero register which can't be modified. |\n+| MIPS32 | `$1` or `$at` | Reserved for assembler. |\n+| MIPS32 | `$26`/`$k0`, `$27`/`$k1` | OS-reserved registers. |\n+| MIPS32 | `$28`/`$gp` | Global pointer cannot be used as inputs or outputs. |\n+| MIPS32 | `$ra` | Return address cannot be used as inputs or outputs. |\n | RISC-V | `x0` | This is a constant zero register which can't be modified. |\n | RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n | Hexagon | `lr` | This is the link register which cannot be used as an input or output. |\n@@ -676,6 +689,8 @@ The supported modifiers are a subset of LLVM's (and GCC's) [asm template argumen\n | ARM | `dreg` | None | `d0` | `P` |\n | ARM | `qreg` | None | `q0` | `q` |\n | ARM | `qreg` | `e` / `f` | `d0` / `d1` | `e` / `f` |\n+| MIPS32 | `reg` | None | `$2` | None |\n+| MIPS32 | `freg` | None | `$f0` | None |\n | NVPTX | `reg16` | None | `rs0` | None |\n | NVPTX | `reg32` | None | `r0` | None |\n | NVPTX | `reg64` | None | `rd0` | None |"}, {"sha": "b195ed88c7245ca076094241a23115d23a02174b", "filename": "src/test/assembly/asm/mips-types.rs", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/ec1766c5b6ec6e714bc9f976229586187b304720/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1766c5b6ec6e714bc9f976229586187b304720/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=ec1766c5b6ec6e714bc9f976229586187b304720", "patch": "@@ -0,0 +1,191 @@\n+// no-system-llvm\n+// assembly-output: emit-asm\n+// compile-flags: --target mips-unknown-linux-gnu\n+// needs-llvm-components: mips\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const i32;\n+\n+impl Copy for i8 {}\n+impl Copy for u8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for ptr {}\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// Hack to avoid function merging\n+extern \"Rust\" {\n+    fn dont_merge(s: &str);\n+}\n+\n+macro_rules! check { ($func:ident, $ty:ty, $class:ident) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(\"move {}, {}\", out($class) y, in($class) x);\n+        y\n+    }\n+};}\n+\n+macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(concat!(\"move \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+        y\n+    }\n+};}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: #APP\n+// CHECK: lw $3, %got(extern_static)\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    dont_merge(stringify!($func));\n+\n+    asm!(\"la $v1, {}\", sym extern_static);\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: #APP\n+// CHECK: lw $3, %got(extern_func)\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    dont_merge(stringify!($func));\n+\n+    asm!(\"la $v1, {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// CHECK: mov.s $f{{[0-9]+}}, $f{{[0-9]+}}\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn reg_f32(x: f32) -> f32 {\n+    dont_merge(\"reg_f32\");\n+    let y;\n+    asm!(\"mov.s {}, {}\", out(freg) y, in(freg) x);\n+    y\n+}\n+\n+// CHECK-LABEL: f0_f32:\n+// CHECK: #APP\n+// CHECK: mov.s $f0, $f0\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn f0_f32(x: f32) -> f32 {\n+    dont_merge(\"f0_f32\");\n+    let y;\n+    asm!(\"mov.s $f0, $f0\", lateout(\"$f0\") y, in(\"$f0\") x);\n+    y\n+}\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_ptr, ptr, reg);\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32, i32, reg);\n+\n+// CHECK-LABEL: reg_f32_soft:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32_soft, f32, reg);\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8, i8, reg);\n+\n+// CHECK-LABEL: reg_u8:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_u8, u8, reg);\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16, i16, reg);\n+\n+// CHECK-LABEL: t0_ptr:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_ptr, ptr, \"$t0\");\n+\n+// CHECK-LABEL: t0_i32:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_i32, i32, \"$t0\");\n+\n+// CHECK-LABEL: t0_f32:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_f32, f32, \"$t0\");\n+\n+// CHECK-LABEL: t0_i8:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_i8, i8, \"$t0\");\n+\n+// CHECK-LABEL: t0_u8:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_u8, u8, \"$t0\");\n+\n+// CHECK-LABEL: t0_i16:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_i16, i16, \"$t0\");\n+\n+// CHECK-LABEL: r8_i16:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(r8_i16, i16, \"$8\");"}]}