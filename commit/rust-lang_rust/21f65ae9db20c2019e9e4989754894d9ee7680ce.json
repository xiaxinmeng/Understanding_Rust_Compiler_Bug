{"sha": "21f65ae9db20c2019e9e4989754894d9ee7680ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZjY1YWU5ZGIyMGMyMDE5ZTllNDk4OTc1NDg5NGQ5ZWU3NjgwY2U=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-20T22:18:45Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T16:07:48Z"}, "message": "Use `DefId` in `ResolverOutputs::glob_map` instead of `NodeId`", "tree": {"sha": "21cf00c55416dbd69804898bc3582a618c8e6537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21cf00c55416dbd69804898bc3582a618c8e6537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21f65ae9db20c2019e9e4989754894d9ee7680ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21f65ae9db20c2019e9e4989754894d9ee7680ce", "html_url": "https://github.com/rust-lang/rust/commit/21f65ae9db20c2019e9e4989754894d9ee7680ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21f65ae9db20c2019e9e4989754894d9ee7680ce/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f575b29f467d2bb7aff9be359743414d218dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f575b29f467d2bb7aff9be359743414d218dfa", "html_url": "https://github.com/rust-lang/rust/commit/25f575b29f467d2bb7aff9be359743414d218dfa"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "ad43f8c25b2ccf87741ae0b60b631e79d0dea950", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21f65ae9db20c2019e9e4989754894d9ee7680ce/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f65ae9db20c2019e9e4989754894d9ee7680ce/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=21f65ae9db20c2019e9e4989754894d9ee7680ce", "patch": "@@ -1134,11 +1134,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             export_map: resolutions.export_map,\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n-            glob_map: resolutions\n-                .glob_map\n-                .into_iter()\n-                .map(|(id, names)| (definitions.local_def_id(id), names))\n-                .collect(),\n+            glob_map: resolutions.glob_map,\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n             definitions,"}, {"sha": "f246d8cf4c09d6324b68558ee27c784ef25e812e", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21f65ae9db20c2019e9e4989754894d9ee7680ce/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f65ae9db20c2019e9e4989754894d9ee7680ce/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=21f65ae9db20c2019e9e4989754894d9ee7680ce", "patch": "@@ -32,7 +32,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::{FnMutTraitLangItem, FnOnceTraitLangItem, FnTraitLangItem};\n-use rustc_hir::{Constness, GlobMap, Node};\n+use rustc_hir::{Constness, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n@@ -126,7 +126,7 @@ pub struct ResolverOutputs {\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     pub maybe_unused_extern_crates: Vec<(DefId, Span)>,\n     pub export_map: ExportMap<hir::HirId>,\n-    pub glob_map: GlobMap,\n+    pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,"}, {"sha": "03fc6a6ab4b167ac2177150921b31de6cdaebacc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21f65ae9db20c2019e9e4989754894d9ee7680ce/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21f65ae9db20c2019e9e4989754894d9ee7680ce/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=21f65ae9db20c2019e9e4989754894d9ee7680ce", "patch": "@@ -1308,13 +1308,18 @@ impl<'a> Resolver<'a> {\n             .into_iter()\n             .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n             .collect();\n+        let glob_map = self\n+            .glob_map\n+            .into_iter()\n+            .map(|(id, names)| (definitions.local_def_id(id), names))\n+            .collect();\n         ResolverOutputs {\n             definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             extern_crate_map: self.extern_crate_map,\n             export_map,\n             trait_map,\n-            glob_map: self.glob_map,\n+            glob_map,\n             maybe_unused_trait_imports,\n             maybe_unused_extern_crates,\n             extern_prelude: self\n@@ -1357,7 +1362,11 @@ impl<'a> Resolver<'a> {\n                 }\n                 map\n             },\n-            glob_map: self.glob_map.clone(),\n+            glob_map: self\n+                .glob_map\n+                .iter()\n+                .map(|(id, names)| (self.definitions.local_def_id(id.clone()), names.clone()))\n+                .collect(),\n             maybe_unused_trait_imports: self\n                 .maybe_unused_trait_imports\n                 .iter()"}]}