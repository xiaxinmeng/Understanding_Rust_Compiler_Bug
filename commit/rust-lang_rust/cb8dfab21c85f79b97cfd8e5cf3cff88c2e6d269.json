{"sha": "cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOGRmYWIyMWM4NWY3OWI5N2NmZDhlNWNmM2NmZjg4YzJlNmQyNjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T13:10:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-21T08:27:01Z"}, "message": "finish modules section", "tree": {"sha": "98ef8fe47914c39e6d86879d43917e79ac698815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ef8fe47914c39e6d86879d43917e79ac698815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269", "html_url": "https://github.com/rust-lang/rust/commit/cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1d866481aa6f11dbe96c4d47b6b61b276f07b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1d866481aa6f11dbe96c4d47b6b61b276f07b3", "html_url": "https://github.com/rust-lang/rust/commit/7e1d866481aa6f11dbe96c4d47b6b61b276f07b3"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "5196f83df3283996d7ab53e10de4302a7a7e4277", "filename": "guide.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269/guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269/guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/guide.md?ref=cb8dfab21c85f79b97cfd8e5cf3cff88c2e6d269", "patch": "@@ -281,10 +281,9 @@ file\", which could then be reused by several semantic models if this file\n happens to be a part of several crates.\n \n Rust analyzer uses a similar representation of syntax trees to that of `Roslyn`\n-and Swift's new\n-[libsyntax](https://github.com/apple/swift/tree/5e2c815edfd758f9b1309ce07bfc01c4bc20ec23/lib/Syntax).\n-Swift's docs give an excellent overview of the approach, so I skip this part\n-here and instead outline the main characteristics of the syntax trees:\n+and Swift's new [libsyntax]. Swift's docs give an excellent overview of the\n+approach, so I skip this part here and instead outline the main characteristics\n+of the syntax trees:\n \n * Syntax trees are fully lossless. Converting **any** text to a syntax tree and\n   back is a total identity function. All whitespace and comments are explicitly\n@@ -313,6 +312,7 @@ here and instead outline the main characteristics of the syntax trees:\n The implementation is based on the generic [rowan] crate on top of which a\n [rust-specific] AST is generated.\n \n+[libsyntax]: https://github.com/apple/swift/tree/5e2c815edfd758f9b1309ce07bfc01c4bc20ec23/lib/Syntax\n [rowan]: https://github.com/rust-analyzer/rowan/tree/100a36dc820eb393b74abe0d20ddf99077b61f88\n [rust-specific]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_syntax/src/ast/generated.rs\n \n@@ -323,8 +323,9 @@ The next step in constructing the semantic model is ...\n The algorithm for building a tree of modules is to start with a crate root\n (remember, each `Crate` from a `CrateGraph` has a `FileId`), collect all mod\n declarations and recursively process child modules. This is handled by the\n-[`module_tree_query`](https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/module_tree.rs#L116-L123),\n-with a two slight variations.\n+[`module_tree_query`], with a two slight variations.\n+\n+[`module_tree_query`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/module_tree.rs#L116-L123\n \n First, rust analyzer builds a module tree for all crates in a source root\n simultaneously. The main reason for this is historical (`module_tree` predates\n@@ -345,12 +346,12 @@ names. Now, changing the whitespace results in `submodules_query` being\n re-executed for a *single* module, but because the result of this query stays\n the same, we don't have to re-execute [`module_tree_query`]. In fact, we only\n need to re-execute it when we add/remove new files or when we change mod\n-declarations,\n+declarations.\n \n [`submodules_query`]: https://github.com/rust-analyzer/rust-analyzer/blob/guide-2019-01/crates/ra_hir/src/module_tree.rs#L41)\n \n-\n-\n+We store the resulting modules in a `Vec`-based indexed arena. The indices in\n+the arena becomes module identifiers.\n \n \n ## Location Interner pattern"}]}