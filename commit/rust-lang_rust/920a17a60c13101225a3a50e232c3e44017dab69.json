{"sha": "920a17a60c13101225a3a50e232c3e44017dab69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMGExN2E2MGMxMzEwMTIyNWEzYTUwZTIzMmMzZTQ0MDE3ZGFiNjk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-29T22:12:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-06T13:59:08Z"}, "message": "privacy: Only opaque macros leak private things", "tree": {"sha": "55a768d2cdeb54ac669325d596aca5bc9af18aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a768d2cdeb54ac669325d596aca5bc9af18aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/920a17a60c13101225a3a50e232c3e44017dab69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/920a17a60c13101225a3a50e232c3e44017dab69", "html_url": "https://github.com/rust-lang/rust/commit/920a17a60c13101225a3a50e232c3e44017dab69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/920a17a60c13101225a3a50e232c3e44017dab69/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987be89db32b37954bd34dcfbf3d381b24eabd35", "url": "https://api.github.com/repos/rust-lang/rust/commits/987be89db32b37954bd34dcfbf3d381b24eabd35", "html_url": "https://github.com/rust-lang/rust/commit/987be89db32b37954bd34dcfbf3d381b24eabd35"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "05df3a6f6bc2eeba279a37fb4c84a517b491b6cd", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=920a17a60c13101225a3a50e232c3e44017dab69", "patch": "@@ -28,6 +28,7 @@ use rustc_data_structures::fx::FxHashSet;\n use syntax::ast::Ident;\n use syntax::attr;\n use syntax::symbol::{kw, sym};\n+use syntax_pos::hygiene::Transparency;\n use syntax_pos::Span;\n \n use std::{cmp, fmt, mem};\n@@ -743,7 +744,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n     }\n \n     fn visit_macro_def(&mut self, md: &'tcx hir::MacroDef) {\n-        if md.legacy {\n+        if attr::find_transparency(&md.attrs, md.legacy).0 != Transparency::Opaque {\n             self.update(md.hir_id, Some(AccessLevel::Public));\n             return\n         }"}, {"sha": "752ab5d474dffe55042d8054c45ef4d07fcffb6a", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=920a17a60c13101225a3a50e232c3e44017dab69", "patch": "@@ -5,6 +5,7 @@ use crate::feature_gate::{Features, GatedCfg};\n use crate::parse::ParseSess;\n \n use errors::{Applicability, Handler};\n+use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n \n use super::{mark_used, MetaItemKind};\n@@ -854,3 +855,35 @@ fn int_type_of_word(s: Symbol) -> Option<IntType> {\n         _ => None\n     }\n }\n+\n+pub enum TransparencyError {\n+    UnknownTransparency(Symbol, Span),\n+    MultipleTransparencyAttrs(Span, Span),\n+}\n+\n+pub fn find_transparency(\n+    attrs: &[Attribute], is_legacy: bool\n+) -> (Transparency, Option<TransparencyError>) {\n+    let mut transparency = None;\n+    let mut error = None;\n+    for attr in attrs {\n+        if attr.check_name(sym::rustc_macro_transparency) {\n+            if let Some((_, old_span)) = transparency {\n+                error = Some(TransparencyError::MultipleTransparencyAttrs(old_span, attr.span));\n+                break;\n+            } else if let Some(value) = attr.value_str() {\n+                transparency = Some((match &*value.as_str() {\n+                    \"transparent\" => Transparency::Transparent,\n+                    \"semitransparent\" => Transparency::SemiTransparent,\n+                    \"opaque\" => Transparency::Opaque,\n+                    _ => {\n+                        error = Some(TransparencyError::UnknownTransparency(value, attr.span));\n+                        continue;\n+                    }\n+                }, attr.span));\n+            }\n+        }\n+    }\n+    let fallback = if is_legacy { Transparency::SemiTransparent } else { Transparency::Opaque };\n+    (transparency.map_or(fallback, |t| t.0), error)\n+}"}, {"sha": "a9f2429560ad288ff68901812df07c5ad3e04737", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=920a17a60c13101225a3a50e232c3e44017dab69", "patch": "@@ -2,11 +2,7 @@\n \n mod builtin;\n \n-pub use builtin::{\n-    cfg_matches, contains_feature_attr, eval_condition, find_crate_name, find_deprecation,\n-    find_repr_attrs, find_stability, find_unwind_attr, Deprecation, InlineAttr, OptimizeAttr,\n-    IntType, ReprAttr, RustcDeprecation, Stability, StabilityLevel, UnwindAttr,\n-};\n+pub use builtin::*;\n pub use IntType::*;\n pub use ReprAttr::*;\n pub use StabilityLevel::*;"}, {"sha": "cf3c748cd8206f39f2f08fd27ddb6b36ad8d292c", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920a17a60c13101225a3a50e232c3e44017dab69/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=920a17a60c13101225a3a50e232c3e44017dab69", "patch": "@@ -2,7 +2,6 @@ use crate::edition::Edition;\n use crate::ext::base::{DummyResult, ExtCtxt, MacResult, TTMacroExpander};\n use crate::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n use crate::ext::expand::{AstFragment, AstFragmentKind};\n-use crate::ext::hygiene::Transparency;\n use crate::ext::tt::macro_parser::{parse, parse_failure_msg};\n use crate::ext::tt::macro_parser::{Error, Failure, Success};\n use crate::ext::tt::macro_parser::{MatchedNonterminal, MatchedSeq};\n@@ -15,7 +14,7 @@ use crate::parse::token::{self, NtTT, Token};\n use crate::parse::{Directory, ParseSess};\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n-use crate::{ast, attr};\n+use crate::{ast, attr, attr::TransparencyError};\n \n use errors::FatalError;\n use log::debug;\n@@ -380,17 +379,19 @@ pub fn compile(\n     let expander: Box<_> =\n         Box::new(MacroRulesMacroExpander { name: def.ident, lhses, rhses, valid });\n \n-    let value_str = attr::first_attr_value_str_by_name(&def.attrs, sym::rustc_macro_transparency);\n-    let default_transparency = value_str.and_then(|s| Some(match &*s.as_str() {\n-        \"transparent\" => Transparency::Transparent,\n-        \"semitransparent\" => Transparency::SemiTransparent,\n-        \"opaque\" => Transparency::Opaque,\n-        _ => {\n-            let msg = format!(\"unknown macro transparency: `{}`\", s);\n-            sess.span_diagnostic.span_err(def.span, &msg);\n-            return None;\n-        }\n-    })).unwrap_or(if body.legacy { Transparency::SemiTransparent } else { Transparency::Opaque });\n+    let (default_transparency, transparency_error) =\n+        attr::find_transparency(&def.attrs, body.legacy);\n+    match transparency_error {\n+        Some(TransparencyError::UnknownTransparency(value, span)) =>\n+            sess.span_diagnostic.span_err(\n+                span, &format!(\"unknown macro transparency: `{}`\", value)\n+            ),\n+        Some(TransparencyError::MultipleTransparencyAttrs(old_span, new_span)) =>\n+            sess.span_diagnostic.span_err(\n+                vec![old_span, new_span], \"multiple macro transparency attributes\"\n+            ),\n+        None => {}\n+    }\n \n     let allow_internal_unstable =\n         attr::find_by_name(&def.attrs, sym::allow_internal_unstable).map(|attr| {"}]}