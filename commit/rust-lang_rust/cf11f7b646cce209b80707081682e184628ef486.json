{"sha": "cf11f7b646cce209b80707081682e184628ef486", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMTFmN2I2NDZjY2UyMDliODA3MDcwODE2ODJlMTg0NjI4ZWY0ODY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-29T19:38:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-29T19:38:15Z"}, "message": "Merge pull request #2203 from topecongiro/issue-2200\n\nFix budget-related bugs when rewriting chain", "tree": {"sha": "097c45f6b2651ca12cc01efe2504ee0673f47798", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097c45f6b2651ca12cc01efe2504ee0673f47798"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf11f7b646cce209b80707081682e184628ef486", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaHwynCRBK7hj4Ov3rIwAAdHIIAIy6jBrmUQQRjp1Jxs2R7IEu\nyC5Ag2qvWaMQ9ZKuNL8XeiUMuI35njhVB1C1GMvp1TiudSwOlX8yNtemFTgENmwe\nZ0DI+cmk98Jjxkh/KhdiMe3YH4631zAI8tqWGpDDbX8FaqutO1com3VzjdyqdLWh\nGBiS5yR9+wwCiX47KDEod2e+eak0F5eY8kyV32oHiBFENo8MoEZ+xXmr1b9+pU1v\ntnenf3LgzEZMdz20l+iG76/mRh8Wi34AHByMO0hUimXu5RfPfKA7m2oN4JGW5Fn4\nT2NCFPGNKT58IBTBalzss9fFahpQZpmnvF8q7S7xDaevjUaOIc73pyYsLbi1Sy0=\n=L5aG\n-----END PGP SIGNATURE-----\n", "payload": "tree 097c45f6b2651ca12cc01efe2504ee0673f47798\nparent 426ba1cdabf323cee7c42b71ca34eac1ee3192cd\nparent a6d94b9842fad07c62063851fb154e3ebbe35484\nauthor Nick Cameron <nrc@ncameron.org> 1511984295 +1300\ncommitter GitHub <noreply@github.com> 1511984295 +1300\n\nMerge pull request #2203 from topecongiro/issue-2200\n\nFix budget-related bugs when rewriting chain"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf11f7b646cce209b80707081682e184628ef486", "html_url": "https://github.com/rust-lang/rust/commit/cf11f7b646cce209b80707081682e184628ef486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf11f7b646cce209b80707081682e184628ef486/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426ba1cdabf323cee7c42b71ca34eac1ee3192cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/426ba1cdabf323cee7c42b71ca34eac1ee3192cd", "html_url": "https://github.com/rust-lang/rust/commit/426ba1cdabf323cee7c42b71ca34eac1ee3192cd"}, {"sha": "a6d94b9842fad07c62063851fb154e3ebbe35484", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d94b9842fad07c62063851fb154e3ebbe35484", "html_url": "https://github.com/rust-lang/rust/commit/a6d94b9842fad07c62063851fb154e3ebbe35484"}], "stats": {"total": 237, "additions": 142, "deletions": 95}, "files": [{"sha": "001f2c8e0f70c1f0d0423ac3b57932fac8019c2d", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -87,9 +87,10 @@ impl CliOptions {\n             if let Ok(write_mode) = WriteMode::from_str(write_mode) {\n                 options.write_mode = Some(write_mode);\n             } else {\n-                return Err(FmtError::from(\n-                    format!(\"Invalid write-mode: {}\", write_mode),\n-                ));\n+                return Err(FmtError::from(format!(\n+                    \"Invalid write-mode: {}\",\n+                    write_mode\n+                )));\n             }\n         }\n "}, {"sha": "576d036d47bef6494f46c07cc01ee867d8d1b950", "filename": "src/chains.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -147,9 +147,8 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let last_subexpr = &subexpr_list[suffix_try_num];\n     let subexpr_list = &subexpr_list[suffix_try_num..subexpr_num - prefix_try_num];\n     let iter = subexpr_list.iter().skip(1).rev().zip(child_shape_iter);\n-    let mut rewrites = iter.map(|(e, shape)| {\n-        rewrite_chain_subexpr(e, total_span, context, shape)\n-    }).collect::<Option<Vec<_>>>()?;\n+    let mut rewrites = iter.map(|(e, shape)| rewrite_chain_subexpr(e, total_span, context, shape))\n+        .collect::<Option<Vec<_>>>()?;\n \n     // Total of all items excluding the last.\n     let extend_last_subexpr = last_line_extendable(&parent_rewrite) && rewrites.is_empty();\n@@ -166,18 +165,11 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let all_in_one_line = !parent_rewrite_contains_newline\n         && rewrites.iter().all(|s| !s.contains('\\n'))\n         && almost_total < one_line_budget;\n-    let last_shape = {\n-        let last_shape = if rewrites.len() == 0 {\n-            first_child_shape\n-        } else {\n-            other_child_shape\n-        };\n-        match context.config.indent_style() {\n-            IndentStyle::Visual => last_shape.sub_width(shape.rhs_overhead(context.config))?,\n-            IndentStyle::Block => last_shape,\n-        }\n-    };\n-    let last_shape = last_shape.sub_width(suffix_try_num)?;\n+    let last_shape = if rewrites.len() == 0 {\n+        first_child_shape\n+    } else {\n+        other_child_shape\n+    }.sub_width(shape.rhs_overhead(context.config) + suffix_try_num)?;\n \n     // Rewrite the last child. The last child of a chain requires special treatment. We need to\n     // know whether 'overflowing' the last child make a better formatting:"}, {"sha": "2e3dadd20660b9d1e68d893fafd719cfead730e2", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -224,9 +224,7 @@ pub fn rewrite_comment(\n     // we should stop now.\n     let num_bare_lines = orig.lines()\n         .map(|line| line.trim())\n-        .filter(|l| {\n-            !(l.starts_with('*') || l.starts_with(\"//\") || l.starts_with(\"/*\"))\n-        })\n+        .filter(|l| !(l.starts_with('*') || l.starts_with(\"//\") || l.starts_with(\"/*\")))\n         .count();\n     if num_bare_lines > 0 && !config.normalize_comments() {\n         return Some(orig.to_owned());"}, {"sha": "ad3bb053de91527bddcbb9c33ee8484d8e155eb5", "filename": "src/expr.rs", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -292,9 +292,7 @@ pub fn format_expr(\n     };\n \n     expr_rw\n-        .and_then(|expr_str| {\n-            recover_comment_removed(expr_str, expr.span, context)\n-        })\n+        .and_then(|expr_str| recover_comment_removed(expr_str, expr.span, context))\n         .and_then(|expr_str| {\n             let attrs = outer_attributes(&expr.attrs);\n             let attrs_str = attrs.rewrite(context, shape)?;\n@@ -1814,6 +1812,10 @@ where\n     let used_width = extra_offset(callee_str, shape);\n     let one_line_width = shape.width.checked_sub(used_width + 2 * paren_overhead)?;\n \n+    // 1 = \"(\" or \")\"\n+    let one_line_shape = shape\n+        .offset_left(last_line_width(callee_str) + 1)?\n+        .sub_width(1)?;\n     let nested_shape = shape_from_indent_style(\n         context,\n         shape,\n@@ -1828,6 +1830,7 @@ where\n         context,\n         args,\n         args_span,\n+        one_line_shape,\n         nested_shape,\n         one_line_width,\n         args_max_width,\n@@ -1867,7 +1870,8 @@ fn rewrite_call_args<'a, T>(\n     context: &RewriteContext,\n     args: &[&T],\n     span: Span,\n-    shape: Shape,\n+    one_line_shape: Shape,\n+    nested_shape: Shape,\n     one_line_width: usize,\n     args_max_width: usize,\n     force_trailing_comma: bool,\n@@ -1882,7 +1886,7 @@ where\n         \",\",\n         |item| item.span().lo(),\n         |item| item.span().hi(),\n-        |item| item.rewrite(context, shape),\n+        |item| item.rewrite(context, nested_shape),\n         span.lo(),\n         span.hi(),\n         true,\n@@ -1896,7 +1900,8 @@ where\n         context,\n         &mut item_vec,\n         &args[..],\n-        shape,\n+        one_line_shape,\n+        nested_shape,\n         one_line_width,\n         args_max_width,\n     );\n@@ -1912,22 +1917,21 @@ where\n             context.config.trailing_comma()\n         },\n         separator_place: SeparatorPlace::Back,\n-        shape: shape,\n+        shape: nested_shape,\n         ends_with_newline: context.use_block_indent() && tactic == DefinitiveListTactic::Vertical,\n         preserve_newline: false,\n         config: context.config,\n     };\n \n-    write_list(&item_vec, &fmt).map(|args_str| {\n-        (tactic != DefinitiveListTactic::Vertical, args_str)\n-    })\n+    write_list(&item_vec, &fmt).map(|args_str| (tactic != DefinitiveListTactic::Vertical, args_str))\n }\n \n fn try_overflow_last_arg<'a, T>(\n     context: &RewriteContext,\n     item_vec: &mut Vec<ListItem>,\n     args: &[&T],\n-    shape: Shape,\n+    one_line_shape: Shape,\n+    nested_shape: Shape,\n     one_line_width: usize,\n     args_max_width: usize,\n ) -> DefinitiveListTactic\n@@ -1945,7 +1949,7 @@ where\n                 context.force_one_line_chain = true;\n             }\n         }\n-        last_arg_shape(&context, item_vec, shape, args_max_width).and_then(|arg_shape| {\n+        last_arg_shape(args, item_vec, one_line_shape, args_max_width).and_then(|arg_shape| {\n             rewrite_last_arg_with_overflow(&context, args, &mut item_vec[args.len() - 1], arg_shape)\n         })\n     } else {\n@@ -1992,26 +1996,32 @@ where\n     tactic\n }\n \n-fn last_arg_shape(\n-    context: &RewriteContext,\n+/// Returns a shape for the last argument which is going to be overflowed.\n+fn last_arg_shape<T>(\n+    lists: &[&T],\n     items: &[ListItem],\n     shape: Shape,\n     args_max_width: usize,\n-) -> Option<Shape> {\n-    let overhead = items.iter().rev().skip(1).fold(0, |acc, i| {\n-        acc + i.item.as_ref().map_or(0, |s| first_line_width(s))\n+) -> Option<Shape>\n+where\n+    T: Rewrite + Spanned + ToExpr,\n+{\n+    let is_nested_call = lists\n+        .iter()\n+        .next()\n+        .and_then(|item| item.to_expr())\n+        .map_or(false, is_nested_call);\n+    if items.len() == 1 && !is_nested_call {\n+        return Some(shape);\n+    }\n+    let offset = items.iter().rev().skip(1).fold(0, |acc, i| {\n+        // 2 = \", \"\n+        acc + 2 + i.inner_as_ref().len()\n     });\n-    let max_width = min(args_max_width, shape.width);\n-    let arg_indent = if context.use_block_indent() {\n-        shape.block().indent.block_unindent(context.config)\n-    } else {\n-        shape.block().indent\n-    };\n-    Some(Shape {\n-        width: max_width.checked_sub(overhead)?,\n-        indent: arg_indent,\n-        offset: 0,\n-    })\n+    Shape {\n+        width: min(args_max_width, shape.width),\n+        ..shape\n+    }.offset_left(offset)\n }\n \n fn rewrite_last_arg_with_overflow<'a, T>(\n@@ -2093,6 +2103,18 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n     }\n }\n \n+fn is_nested_call(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::ExprKind::Call(..) | ast::ExprKind::Mac(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => is_nested_call(expr),\n+        _ => false,\n+    }\n+}\n+\n pub fn wrap_args_with_parens(\n     context: &RewriteContext,\n     args_str: &str,"}, {"sha": "6285811e79e28e6b2dfd0ad592503e508ec9bb8b", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -817,8 +817,7 @@ fn format_impl_ref_and_type(\n             IndentStyle::Visual => new_line_offset + trait_ref_overhead,\n             IndentStyle::Block => new_line_offset,\n         };\n-        result.push_str(&*self_ty\n-            .rewrite(context, Shape::legacy(budget, type_offset))?);\n+        result.push_str(&*self_ty.rewrite(context, Shape::legacy(budget, type_offset))?);\n         Some(result)\n     } else {\n         unreachable!();\n@@ -1578,9 +1577,7 @@ fn rewrite_static(\n             lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n-        ).and_then(|res| {\n-            recover_comment_removed(res, static_parts.span, context)\n-        })\n+        ).and_then(|res| recover_comment_removed(res, static_parts.span, context))\n             .map(|s| if s.ends_with(';') { s } else { s + \";\" })\n     } else {\n         Some(format!(\"{}{};\", prefix, ty_str))\n@@ -2096,18 +2093,14 @@ fn rewrite_args(\n     generics_str_contains_newline: bool,\n ) -> Option<String> {\n     let mut arg_item_strs = args.iter()\n-        .map(|arg| {\n-            arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent))\n-        })\n+        .map(|arg| arg.rewrite(context, Shape::legacy(multi_line_budget, arg_indent)))\n         .collect::<Option<Vec<_>>>()?;\n \n     // Account for sugary self.\n     // FIXME: the comment for the self argument is dropped. This is blocked\n     // on rust issue #27522.\n     let min_args = explicit_self\n-        .and_then(|explicit_self| {\n-            rewrite_explicit_self(explicit_self, args, context)\n-        })\n+        .and_then(|explicit_self| rewrite_explicit_self(explicit_self, args, context))\n         .map_or(1, |self_str| {\n             arg_item_strs[0] = self_str;\n             2\n@@ -2326,9 +2319,8 @@ fn rewrite_generics(\n ) -> Option<String> {\n     let g_shape = generics_shape_from_config(context.config, shape, 0)?;\n     let one_line_width = shape.width.checked_sub(2).unwrap_or(0);\n-    rewrite_generics_inner(context, generics, g_shape, one_line_width, span).or_else(|| {\n-        rewrite_generics_inner(context, generics, g_shape, 0, span)\n-    })\n+    rewrite_generics_inner(context, generics, g_shape, one_line_width, span)\n+        .or_else(|| rewrite_generics_inner(context, generics, g_shape, 0, span))\n }\n \n fn rewrite_generics_inner("}, {"sha": "00d62aeeff702d4b065a7ee27df5414674be0f02", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -109,9 +109,7 @@ impl<'a> FmtVisitor<'a> {\n         if self.config.remove_blank_lines_at_start_or_end_of_block() {\n             if let Some(first_stmt) = b.stmts.first() {\n                 let attr_lo = inner_attrs\n-                    .and_then(|attrs| {\n-                        inner_attributes(attrs).first().map(|attr| attr.span.lo())\n-                    })\n+                    .and_then(|attrs| inner_attributes(attrs).first().map(|attr| attr.span.lo()))\n                     .or_else(|| {\n                         // Attributes for an item in a statement position\n                         // do not belong to the statement. (rust-lang/rust#34459)\n@@ -872,10 +870,7 @@ fn rewrite_first_group_attrs(\n             for derive in derives {\n                 derive_args.append(&mut get_derive_args(context, derive)?);\n             }\n-            return Some((\n-                derives.len(),\n-                format_derive(context, &derive_args, shape)?,\n-            ));\n+            return Some((derives.len(), format_derive(context, &derive_args, shape)?));\n         }\n     }\n     // Rewrite the first attribute."}, {"sha": "0141326269ba75fd3cb7702d395fa2030f729203", "filename": "tests/source/chains.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -185,3 +185,24 @@ fn issue2126() {\n         }\n     }\n }\n+\n+// #2200\n+impl Foo {\n+    pub fn from_ast(diagnostic: &::errors::Handler,\n+                    attrs: &[ast::Attribute]) -> Attributes {\n+        let other_attrs = attrs.iter().filter_map(|attr| {\n+            attr.with_desugared_doc(|attr| {\n+                if attr.check_name(\"doc\") {\n+                    if let Some(mi) = attr.meta() {\n+                        if let Some(value) = mi.value_str() {\n+                            doc_strings.push(DocFragment::Include(line,\n+                                                                  attr.span,\n+                                                                  filename,\n+                                                                  contents));\n+                        }\n+                    }\n+                }\n+            })\n+        }).collect();\n+    }\n+}"}, {"sha": "507f91113cc767f6930d57ee02bfcfe621e0f094", "filename": "tests/target/chains-visual.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fchains-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fchains-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-visual.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -28,24 +28,24 @@ fn main() {\n     });\n \n     some_fuuuuuuuuunction().method_call_a(aaaaa, bbbbb, |c| {\n-        let x = c;\n-        x\n-    })\n+                               let x = c;\n+                               x\n+                           })\n                            .method_call_b(aaaaa, bbbbb, |c| {\n-        let x = c;\n-        x\n-    });\n+                               let x = c;\n+                               x\n+                           });\n \n     fffffffffffffffffffffffffffffffffff(a, {\n         SCRIPT_TASK_ROOT.with(|root| {\n                                   *root.borrow_mut() = Some(&script_task);\n                               });\n     });\n \n-    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n-                                                                          .map(|x| x / 2)\n-                                                                          .fold(0,\n-                                                                                |acc, x| acc + x);\n+    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum =\n+        xxxxxxx.map(|x| x + 5)\n+               .map(|x| x / 2)\n+               .fold(0, |acc, x| acc + x);\n \n     aaaaaaaaaaaaaaaa.map(|x| {\n                              x += 1;"}, {"sha": "61ba04347e0d6dae9fe3adfc97a3c1fcda28a37c", "filename": "tests/target/chains.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -213,3 +213,28 @@ fn issue2126() {\n         }\n     }\n }\n+\n+// #2200\n+impl Foo {\n+    pub fn from_ast(diagnostic: &::errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n+        let other_attrs = attrs\n+            .iter()\n+            .filter_map(|attr| {\n+                attr.with_desugared_doc(|attr| {\n+                    if attr.check_name(\"doc\") {\n+                        if let Some(mi) = attr.meta() {\n+                            if let Some(value) = mi.value_str() {\n+                                doc_strings.push(DocFragment::Include(\n+                                    line,\n+                                    attr.span,\n+                                    filename,\n+                                    contents,\n+                                ));\n+                            }\n+                        }\n+                    }\n+                })\n+            })\n+            .collect();\n+    }\n+}"}, {"sha": "303d6419a65776e932bb9b64628f27af1c9263eb", "filename": "tests/target/configs-fn_call_indent-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fconfigs-fn_call_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fconfigs-fn_call_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_indent-block.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -13,9 +13,9 @@ fn main() {\n         \"elit\",\n     );\n     // #1501\n-    let hyper = Arc::new(Client::with_connector(\n-        HttpsConnector::new(TlsClient::new()),\n-    ));\n+    let hyper = Arc::new(Client::with_connector(HttpsConnector::new(\n+        TlsClient::new(),\n+    )));\n \n     // chain\n     let x = yooooooooooooo"}, {"sha": "2158b70a46ff9fb43edf275ebbc8b0f6decc388b", "filename": "tests/target/issue-913.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fissue-913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fissue-913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-913.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -10,9 +10,9 @@ mod client {\n             };\n \n             let next_state = match self.state {\n-                State::V5(\n-                    v5::State::Command(v5::comand::State::WriteVersion(ref mut response)),\n-                ) => {\n+                State::V5(v5::State::Command(v5::comand::State::WriteVersion(\n+                    ref mut response,\n+                ))) => {\n                     // The pattern cannot be formatted in a way that the match stays\n                     // within the column limit. The rewrite should therefore be\n                     // skipped."}, {"sha": "83ee4f97b73e822d751dec655dbf2c3ad99c1ae0", "filename": "tests/target/match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -255,12 +255,12 @@ fn issue507() {\n \n fn issue508() {\n     match s.type_id() {\n-        Some(\n-            NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLCanvasElement)),\n-        ) => true,\n-        Some(\n-            NodeTypeId::Element(ElementTypeId::HTMLElement(HTMLElementTypeId::HTMLObjectElement)),\n-        ) => s.has_object_data(),\n+        Some(NodeTypeId::Element(ElementTypeId::HTMLElement(\n+            HTMLElementTypeId::HTMLCanvasElement,\n+        ))) => true,\n+        Some(NodeTypeId::Element(ElementTypeId::HTMLElement(\n+            HTMLElementTypeId::HTMLObjectElement,\n+        ))) => s.has_object_data(),\n         Some(NodeTypeId::Element(_)) => false,\n     }\n }"}, {"sha": "6c62affb848f54177302de400312a2615beebad2", "filename": "tests/target/pattern.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf11f7b646cce209b80707081682e184628ef486/tests%2Ftarget%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpattern.rs?ref=cf11f7b646cce209b80707081682e184628ef486", "patch": "@@ -47,9 +47,10 @@ fn main() {\n impl<'a, 'b> ResolveGeneratedContentFragmentMutator<'a, 'b> {\n     fn mutate_fragment(&mut self, fragment: &mut Fragment) {\n         match **info {\n-            GeneratedContentInfo::ContentItem(\n-                ContentItem::Counter(ref counter_name, counter_style),\n-            ) => {}\n+            GeneratedContentInfo::ContentItem(ContentItem::Counter(\n+                ref counter_name,\n+                counter_style,\n+            )) => {}\n         }\n     }\n }"}]}