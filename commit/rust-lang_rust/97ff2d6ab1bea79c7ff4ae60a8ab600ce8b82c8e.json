{"sha": "97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZmYyZDZhYjFiZWE3OWM3ZmY0YWU2MGE4YWI2MDBjZThiODJjOGU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-29T08:47:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-29T08:47:45Z"}, "message": "Rollup merge of #55384 - nnethercote:better-integer_lit-float_lit, r=michaelwoerister\n\nAvoid unnecessary allocations in `float_lit` and `integer_lit`.\n\nThis commit avoids an allocation when parsing any float and integer\nliterals that don't involved underscores.\n\nThis reduces the number of allocations done for the `tuple-stress`\nbenchmark by 10%, reducing its instruction count by just under 1%.", "tree": {"sha": "47402e0fc7d82c9fa26bffa7a69653b4ae770543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47402e0fc7d82c9fa26bffa7a69653b4ae770543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb1skxCRBK7hj4Ov3rIwAAdHIIAEBLwTdSqrEqDM+H+4caA0ji\nT4N4VMj8kdiWTxdGQZagWL1cjBmYPqPJ8rsxyfqb1rJhpPnhFUAXhb1I4KqBSvxr\nzlMe/719CN/oVYaBIqv0+GECvD+HnW9ae4E+g6iCttddA9ewlY3v6bIh3FK+UkVL\n1mNDzREB/ExS+GfpxItrGKvyaOQjtjq4wjyfEAKwsk7Tnu8Bb2QCgWO+Le323ZSU\n/ANkruIPXNVQe/0BcCnUgbHCzNZVm62V//xJm36YRjOxM4CvsELH2Ax4jj31R10r\nAjPnrh/aY2jxg80UoRq7Qzbav2Lk/qLXAXi5qrxTu0W+92y1uFih07NxaqzVekw=\n=X5IV\n-----END PGP SIGNATURE-----\n", "payload": "tree 47402e0fc7d82c9fa26bffa7a69653b4ae770543\nparent 4e88b7363b7858960ccfd87326ece9d00bf4d973\nparent eb637d26ba4652ea65ef58288af0697c32ebc503\nauthor Pietro Albini <pietro@pietroalbini.org> 1540802865 +0100\ncommitter GitHub <noreply@github.com> 1540802865 +0100\n\nRollup merge of #55384 - nnethercote:better-integer_lit-float_lit, r=michaelwoerister\n\nAvoid unnecessary allocations in `float_lit` and `integer_lit`.\n\nThis commit avoids an allocation when parsing any float and integer\nliterals that don't involved underscores.\n\nThis reduces the number of allocations done for the `tuple-stress`\nbenchmark by 10%, reducing its instruction count by just under 1%.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e", "html_url": "https://github.com/rust-lang/rust/commit/97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e88b7363b7858960ccfd87326ece9d00bf4d973", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e88b7363b7858960ccfd87326ece9d00bf4d973", "html_url": "https://github.com/rust-lang/rust/commit/4e88b7363b7858960ccfd87326ece9d00bf4d973"}, {"sha": "eb637d26ba4652ea65ef58288af0697c32ebc503", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb637d26ba4652ea65ef58288af0697c32ebc503", "html_url": "https://github.com/rust-lang/rust/commit/eb637d26ba4652ea65ef58288af0697c32ebc503"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "77a2ae6acf00b680e4028bd5d98012f20b225980", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=97ff2d6ab1bea79c7ff4ae60a8ab600ce8b82c8e", "patch": "@@ -494,8 +494,17 @@ fn float_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                  -> Option<ast::LitKind> {\n     debug!(\"float_lit: {:?}, {:?}\", s, suffix);\n     // FIXME #2252: bounds checking float literals is deferred until trans\n-    let s = s.chars().filter(|&c| c != '_').collect::<String>();\n-    filtered_float_lit(Symbol::intern(&s), suffix, diag)\n+\n+    // Strip underscores without allocating a new String unless necessary.\n+    let s2;\n+    let s = if s.chars().any(|c| c == '_') {\n+        s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n+        &s2\n+    } else {\n+        s\n+    };\n+\n+    filtered_float_lit(Symbol::intern(s), suffix, diag)\n }\n \n /// Parse a string representing a byte literal into its final form. Similar to `char_lit`\n@@ -591,8 +600,14 @@ fn integer_lit(s: &str, suffix: Option<Symbol>, diag: Option<(Span, &Handler)>)\n                    -> Option<ast::LitKind> {\n     // s can only be ascii, byte indexing is fine\n \n-    let s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n-    let mut s = &s2[..];\n+    // Strip underscores without allocating a new String unless necessary.\n+    let s2;\n+    let mut s = if s.chars().any(|c| c == '_') {\n+        s2 = s.chars().filter(|&c| c != '_').collect::<String>();\n+        &s2\n+    } else {\n+        s\n+    };\n \n     debug!(\"integer_lit: {}, {:?}\", s, suffix);\n "}]}