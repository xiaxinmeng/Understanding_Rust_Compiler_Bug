{"sha": "c3e3be374b2c706701dca9bb275624fde064f9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZTNiZTM3NGIyYzcwNjcwMWRjYTliYjI3NTYyNGZkZTA2NGY5ZDc=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-04T06:51:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-04T06:51:00Z"}, "message": "Merge pull request #3256 from rust-lang-nursery/fix-2796\n\nFix 2796 and 3020", "tree": {"sha": "3df081d7ae5b97f2e4e96557d5e0c155399645af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3df081d7ae5b97f2e4e96557d5e0c155399645af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e3be374b2c706701dca9bb275624fde064f9d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbtbhUCRBK7hj4Ov3rIwAAdHIIAKi9tWFrYLgeWYYXuaTXwCXW\nQpcroHkvfeBXSvvzPf+I6lPd2zZT81bzGJfyLpKBCAj0NRapaoo2qSFK3QrWMUOC\nfW2DHbmyYhirAztXmw41gt4y2+yShGSJBKapAe5MAEPbgWTMBdmUcm/2YAWk3eO/\neFTFgF5BS/aaNKxHqtt1A+KCShEygGjviUSKyN2J7EVJGcePVxhnveuuXJH/2wu0\nyM0CoL7WhyZ7dV02JImcMzITajbD30QIGLnV6hPEMaxl9AdadqOhqQ6S07OQdJ9b\n5sfOIxN6mxVrTkcgb6s5SXrz0wr3p7oyuX8K2MlNsJXA1Qsj3yoH413Gv98tzC0=\n=TTee\n-----END PGP SIGNATURE-----\n", "payload": "tree 3df081d7ae5b97f2e4e96557d5e0c155399645af\nparent c47b9489ab4f2124e2e93a3b1ec8a2eeafe54cf4\nparent 5173ed0c03ff2ce86c80654116e30e61519eb208\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1538635860 +0200\ncommitter GitHub <noreply@github.com> 1538635860 +0200\n\nMerge pull request #3256 from rust-lang-nursery/fix-2796\n\nFix 2796 and 3020"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e3be374b2c706701dca9bb275624fde064f9d7", "html_url": "https://github.com/rust-lang/rust/commit/c3e3be374b2c706701dca9bb275624fde064f9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e3be374b2c706701dca9bb275624fde064f9d7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c47b9489ab4f2124e2e93a3b1ec8a2eeafe54cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c47b9489ab4f2124e2e93a3b1ec8a2eeafe54cf4", "html_url": "https://github.com/rust-lang/rust/commit/c47b9489ab4f2124e2e93a3b1ec8a2eeafe54cf4"}, {"sha": "5173ed0c03ff2ce86c80654116e30e61519eb208", "url": "https://api.github.com/repos/rust-lang/rust/commits/5173ed0c03ff2ce86c80654116e30e61519eb208", "html_url": "https://github.com/rust-lang/rust/commit/5173ed0c03ff2ce86c80654116e30e61519eb208"}], "stats": {"total": 84, "additions": 63, "deletions": 21}, "files": [{"sha": "30ad022f4763a0a00ec145c2c82cefaf70b669f2", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c3e3be374b2c706701dca9bb275624fde064f9d7/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e3be374b2c706701dca9bb275624fde064f9d7/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=c3e3be374b2c706701dca9bb275624fde064f9d7", "patch": "@@ -47,7 +47,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 return;\n             }\n             match expr.node {\n-\n                 // `format!(\"{}\", foo)` expansion\n                 ExprKind::Call(ref fun, ref args) => {\n                     if_chain! {\n@@ -58,12 +57,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         if check_single_piece(&args[0]);\n                         if let Some(format_arg) = get_single_string_arg(cx, &args[1]);\n                         if check_unformatted(&args[2]);\n+                        if let ExprKind::AddrOf(_, ref format_arg) = format_arg.node;\n                         then {\n-                            let sugg = format!(\"{}.to_string()\", snippet(cx, format_arg, \"<arg>\").into_owned());\n+                            let (message, sugg) = if_chain! {\n+                                if let ExprKind::MethodCall(ref path, ref span, ref expr) = format_arg.node;\n+                                if path.ident.as_interned_str() == \"to_string\";\n+                                then {\n+                                    (\"`to_string()` is enough\",\n+                                    snippet(cx, format_arg.span, \"<arg>\").to_string())\n+                                } else {\n+                                    (\"consider using .to_string()\",\n+                                    format!(\"{}.to_string()\", snippet(cx, format_arg.span, \"<arg>\")))\n+                                }\n+                            };\n+\n                             span_lint_and_then(cx, USELESS_FORMAT, span, \"useless use of `format!`\", |db| {\n                                 db.span_suggestion_with_applicability(\n                                     expr.span,\n-                                    \"consider using .to_string()\",\n+                                    message,\n                                     sugg,\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -114,9 +125,9 @@ fn check_single_piece(expr: &Expr) -> bool {\n /// ::std::fmt::Display::fmt)],\n /// }\n /// ```\n-/// and that type of `__arg0` is `&str` or `String`\n-/// then returns the span of first element of the matched tuple\n-fn get_single_string_arg(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Span> {\n+/// and that the type of `__arg0` is `&str` or `String`,\n+/// then returns the span of first element of the matched tuple.\n+fn get_single_string_arg<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Expr> {\n     if_chain! {\n         if let ExprKind::AddrOf(_, ref expr) = expr.node;\n         if let ExprKind::Match(ref match_expr, ref arms, _) = expr.node;\n@@ -135,7 +146,7 @@ fn get_single_string_arg(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<Span>\n             let ty = walk_ptrs_ty(cx.tables.pat_ty(&pat[0]));\n             if ty.sty == ty::Str || match_type(cx, ty, &paths::STRING) {\n                 if let ExprKind::Tup(ref values) = match_expr.node {\n-                    return Some(values[0].span);\n+                    return Some(&values[0]);\n                 }\n             }\n         }\n@@ -162,9 +173,12 @@ fn check_unformatted(expr: &Expr) -> bool {\n         if let ExprKind::Struct(_, ref fields, _) = exprs[0].node;\n         if let Some(format_field) = fields.iter().find(|f| f.ident.name == \"format\");\n         if let ExprKind::Struct(_, ref fields, _) = format_field.expr.node;\n-        if let Some(align_field) = fields.iter().find(|f| f.ident.name == \"width\");\n-        if let ExprKind::Path(ref qpath) = align_field.expr.node;\n-        if last_path_segment(qpath).ident.name == \"Implied\";\n+        if let Some(width_field) = fields.iter().find(|f| f.ident.name == \"width\");\n+        if let ExprKind::Path(ref width_qpath) = width_field.expr.node;\n+        if last_path_segment(width_qpath).ident.name == \"Implied\";\n+        if let Some(precision_field) = fields.iter().find(|f| f.ident.name == \"precision\");\n+        if let ExprKind::Path(ref precision_path) = precision_field.expr.node;\n+        if last_path_segment(precision_path).ident.name == \"Implied\";\n         then {\n             return true;\n         }"}, {"sha": "858c9fc8de5c3f461f683f82f9804568961b1d98", "filename": "tests/ui/format.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3e3be374b2c706701dca9bb275624fde064f9d7/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e3be374b2c706701dca9bb275624fde064f9d7/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=c3e3be374b2c706701dca9bb275624fde064f9d7", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     format!(\"{}\", \"foo\");\n     format!(\"{:?}\", \"foo\"); // don't warn about debug\n     format!(\"{:8}\", \"foo\");\n+    format!(\"{:width$}\", \"foo\", width = 8);\n     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n     format!(\"foo {}\", \"bar\");\n@@ -23,6 +24,7 @@ fn main() {\n     format!(\"{}\", arg);\n     format!(\"{:?}\", arg); // don't warn about debug\n     format!(\"{:8}\", arg);\n+    format!(\"{:width$}\", arg, width = 8);\n     format!(\"{:+}\", arg); // warn when the format makes no difference\n     format!(\"{:<}\", arg); // warn when the format makes no difference\n     format!(\"foo {}\", arg);\n@@ -44,4 +46,14 @@ fn main() {\n \n     // A format! inside a macro should not trigger a warning\n     foo!(\"should not warn\");\n+\n+    // precision on string means slicing without panicking on size:\n+    format!(\"{:.1}\", \"foo\"); // could be \"foo\"[..1]\n+    format!(\"{:.10}\", \"foo\"); // could not be \"foo\"[..10]\n+    format!(\"{:.prec$}\", \"foo\", prec = 1);\n+    format!(\"{:.prec$}\", \"foo\", prec = 10);\n+\n+    format!(\"{}\", 42.to_string());\n+    let x = std::path::PathBuf::from(\"/bar/foo/qux\");\n+    format!(\"{}\", x.display().to_string());\n }"}, {"sha": "520c1b794337deeb02e1f5d2210c7107d7b3e35e", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c3e3be374b2c706701dca9bb275624fde064f9d7/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3e3be374b2c706701dca9bb275624fde064f9d7/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=c3e3be374b2c706701dca9bb275624fde064f9d7", "patch": "@@ -15,44 +15,60 @@ error: useless use of `format!`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:17:5\n+  --> $DIR/format.rs:18:5\n    |\n-17 |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n+18 |     format!(\"{:+}\", \"foo\"); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:18:5\n+  --> $DIR/format.rs:19:5\n    |\n-18 |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n+19 |     format!(\"{:<}\", \"foo\"); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:23:5\n+  --> $DIR/format.rs:24:5\n    |\n-23 |     format!(\"{}\", arg);\n+24 |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:26:5\n+  --> $DIR/format.rs:28:5\n    |\n-26 |     format!(\"{:+}\", arg); // warn when the format makes no difference\n+28 |     format!(\"{:+}\", arg); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:27:5\n+  --> $DIR/format.rs:29:5\n    |\n-27 |     format!(\"{:<}\", arg); // warn when the format makes no difference\n+29 |     format!(\"{:<}\", arg); // warn when the format makes no difference\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string()`\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 7 previous errors\n+error: useless use of `format!`\n+  --> $DIR/format.rs:56:5\n+   |\n+56 |     format!(\"{}\", 42.to_string());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `42.to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:58:5\n+   |\n+58 |     format!(\"{}\", x.display().to_string());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: `to_string()` is enough: `x.display().to_string()`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 9 previous errors\n "}]}