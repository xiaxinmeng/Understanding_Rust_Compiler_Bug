{"sha": "c6db6e235219e364d38a31a720cbe3d75f5c8c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZGI2ZTIzNTIxOWUzNjRkMzhhMzFhNzIwY2JlM2Q3NWY1YzhjMTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-24T08:54:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T08:54:30Z"}, "message": "Merge #3696 #3698 #3703\n\n3696: vscode: more type safety r=matklad a=Veetaha\n\n\n\n3698: Consider references when applying postfix completions r=matklad a=SomeoneToIgnore\n\nSometimes my RA debugging workflow breaks because `.dbg` is applied to the variable that is used later in the code.\r\nIt's safer to consider the refences to avoid this for completions that may trigger the move.\n\n3703: Don't try to enable proposed API's on stable r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "86d23f9b64f29567b21c251384d6f6be1d0548b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d23f9b64f29567b21c251384d6f6be1d0548b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6db6e235219e364d38a31a720cbe3d75f5c8c15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeecrGCRBK7hj4Ov3rIwAAdHIIAKNbmpFekaUOSXW0rvJfr/Lu\ng7Zi1lBFZw3/pZ6QJ11BTmiagbWWJ2IMsRy3z281Q2ELX3j5RANuxq25u3V3DFmB\ngkNMR/Sg/SN3CuzMdx1PY4HxtX12zHURyUN7oo8hBNsrRH9DZRu33u/f57ABWZyB\nXw6QQpl6pD8DmIoYPSQLlf8qwDTg1KpURddzPe/JV1DP/BFjB5D/Iuf6mF/FvNt/\nxvKzpqtle0vd+KR3qB8y4D0si8XDfYYerque3U/WELhptI5d9b8Su8Qs6OwXkODG\nbZDU4rnRxBEl6guxPBOtshZ7PUUme8dMn5EjnfoXlEJ1NBEtVNyh7Mnx+ouDyVE=\n=8naI\n-----END PGP SIGNATURE-----\n", "payload": "tree 86d23f9b64f29567b21c251384d6f6be1d0548b7\nparent d5f77f3b6db604191c8b6856279a7bb5e0390375\nparent 4cee3e9f22a7d5845a97062fd1ab7a3e7119cb7f\nparent 4e43df26b2650cdef4178d2493e70c0ce946e39c\nparent be4977da7fa78ae386b595ef2227d034ebb3a7e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585040070 +0000\ncommitter GitHub <noreply@github.com> 1585040070 +0000\n\nMerge #3696 #3698 #3703\n\n3696: vscode: more type safety r=matklad a=Veetaha\n\n\n\n3698: Consider references when applying postfix completions r=matklad a=SomeoneToIgnore\n\nSometimes my RA debugging workflow breaks because `.dbg` is applied to the variable that is used later in the code.\r\nIt's safer to consider the refences to avoid this for completions that may trigger the move.\n\n3703: Don't try to enable proposed API's on stable r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6db6e235219e364d38a31a720cbe3d75f5c8c15", "html_url": "https://github.com/rust-lang/rust/commit/c6db6e235219e364d38a31a720cbe3d75f5c8c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6db6e235219e364d38a31a720cbe3d75f5c8c15/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f77f3b6db604191c8b6856279a7bb5e0390375", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f77f3b6db604191c8b6856279a7bb5e0390375", "html_url": "https://github.com/rust-lang/rust/commit/d5f77f3b6db604191c8b6856279a7bb5e0390375"}, {"sha": "4cee3e9f22a7d5845a97062fd1ab7a3e7119cb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cee3e9f22a7d5845a97062fd1ab7a3e7119cb7f", "html_url": "https://github.com/rust-lang/rust/commit/4cee3e9f22a7d5845a97062fd1ab7a3e7119cb7f"}, {"sha": "4e43df26b2650cdef4178d2493e70c0ce946e39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e43df26b2650cdef4178d2493e70c0ce946e39c", "html_url": "https://github.com/rust-lang/rust/commit/4e43df26b2650cdef4178d2493e70c0ce946e39c"}, {"sha": "be4977da7fa78ae386b595ef2227d034ebb3a7e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/be4977da7fa78ae386b595ef2227d034ebb3a7e5", "html_url": "https://github.com/rust-lang/rust/commit/be4977da7fa78ae386b595ef2227d034ebb3a7e5"}], "stats": {"total": 190, "additions": 150, "deletions": 40}, "files": [{"sha": "0a00054b2395ad58181141284de3b21663ce4bd2", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 123, "deletions": 17, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c6db6e235219e364d38a31a720cbe3d75f5c8c15/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6db6e235219e364d38a31a720cbe3d75f5c8c15/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=c6db6e235219e364d38a31a720cbe3d75f5c8c15", "patch": "@@ -1,6 +1,9 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    TextRange, TextUnit,\n+};\n use ra_text_edit::TextEdit;\n \n use crate::{\n@@ -21,53 +24,97 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n-        let text = dot_receiver.syntax().text();\n-        let without_dot = ..text.len() - TextUnit::of_char('.');\n-        text.slice(without_dot).to_string()\n-    } else {\n-        dot_receiver.syntax().text().to_string()\n-    };\n+    let receiver_text =\n+        get_receiver_text(dot_receiver, ctx.dot_receiver_is_ambiguous_float_literal);\n \n     let receiver_ty = match ctx.sema.type_of_expr(&dot_receiver) {\n         Some(it) => it,\n         None => return,\n     };\n \n     if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n-        postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n-            .add_to(acc);\n         postfix_snippet(\n             ctx,\n+            &dot_receiver,\n+            \"if\",\n+            \"if expr {}\",\n+            &format!(\"if {} {{$0}}\", receiver_text),\n+        )\n+        .add_to(acc);\n+        postfix_snippet(\n+            ctx,\n+            &dot_receiver,\n             \"while\",\n             \"while expr {}\",\n             &format!(\"while {} {{\\n$0\\n}}\", receiver_text),\n         )\n         .add_to(acc);\n     }\n \n-    postfix_snippet(ctx, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n+    // !&&&42 is a compiler error, ergo process it before considering the references\n+    postfix_snippet(ctx, &dot_receiver, \"not\", \"!expr\", &format!(\"!{}\", receiver_text)).add_to(acc);\n \n-    postfix_snippet(ctx, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n-    postfix_snippet(ctx, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, &dot_receiver, \"ref\", \"&expr\", &format!(\"&{}\", receiver_text)).add_to(acc);\n+    postfix_snippet(ctx, &dot_receiver, \"refm\", \"&mut expr\", &format!(\"&mut {}\", receiver_text))\n+        .add_to(acc);\n+\n+    // The rest of the postfix completions create an expression that moves an argument,\n+    // so it's better to consider references now to avoid breaking the compilation\n+    let dot_receiver = include_references(dot_receiver);\n+    let receiver_text =\n+        get_receiver_text(&dot_receiver, ctx.dot_receiver_is_ambiguous_float_literal);\n \n     postfix_snippet(\n         ctx,\n+        &dot_receiver,\n         \"match\",\n         \"match expr {}\",\n         &format!(\"match {} {{\\n    ${{1:_}} => {{$0\\\\}},\\n}}\", receiver_text),\n     )\n     .add_to(acc);\n \n-    postfix_snippet(ctx, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text)).add_to(acc);\n+    postfix_snippet(\n+        ctx,\n+        &dot_receiver,\n+        \"box\",\n+        \"Box::new(expr)\",\n+        &format!(\"Box::new({})\", receiver_text),\n+    )\n+    .add_to(acc);\n \n-    postfix_snippet(ctx, \"box\", \"Box::new(expr)\", &format!(\"Box::new({})\", receiver_text))\n+    postfix_snippet(ctx, &dot_receiver, \"dbg\", \"dbg!(expr)\", &format!(\"dbg!({})\", receiver_text))\n         .add_to(acc);\n }\n \n-fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n+fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {\n+    if receiver_is_ambiguous_float_literal {\n+        let text = receiver.syntax().text();\n+        let without_dot = ..text.len() - TextUnit::of_char('.');\n+        text.slice(without_dot).to_string()\n+    } else {\n+        receiver.to_string()\n+    }\n+}\n+\n+fn include_references(initial_element: &ast::Expr) -> ast::Expr {\n+    let mut resulting_element = initial_element.clone();\n+    while let Some(parent_ref_element) =\n+        resulting_element.syntax().parent().and_then(ast::RefExpr::cast)\n+    {\n+        resulting_element = ast::Expr::from(parent_ref_element);\n+    }\n+    resulting_element\n+}\n+\n+fn postfix_snippet(\n+    ctx: &CompletionContext,\n+    receiver: &ast::Expr,\n+    label: &str,\n+    detail: &str,\n+    snippet: &str,\n+) -> Builder {\n     let edit = {\n-        let receiver_syntax = ctx.dot_receiver.as_ref().expect(\"no receiver available\").syntax();\n+        let receiver_syntax = receiver.syntax();\n         let receiver_range = ctx.sema.original_range(receiver_syntax).range;\n         let delete_range = TextRange::from_to(receiver_range.start(), ctx.source_range().end());\n         TextEdit::replace(delete_range, snippet.to_string())\n@@ -340,4 +387,63 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn postfix_completion_for_references() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                fn main() {\n+                    &&&&42.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: [56; 56),\n+                delete: [49; 56),\n+                insert: \"Box::new(&&&&42)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: [56; 56),\n+                delete: [49; 56),\n+                insert: \"dbg!(&&&&42)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [56; 56),\n+                delete: [49; 56),\n+                insert: \"match &&&&42 {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: [56; 56),\n+                delete: [53; 56),\n+                insert: \"!42\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: [56; 56),\n+                delete: [53; 56),\n+                insert: \"&42\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: [56; 56),\n+                delete: [53; 56),\n+                insert: \"&mut 42\",\n+                detail: \"&mut expr\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "1d113ebb6c911c4cef86a4aaaafedd2bbd7d9899", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c6db6e235219e364d38a31a720cbe3d75f5c8c15", "patch": "@@ -73,10 +73,18 @@\n                         \"type\": \"string\"\n                     },\n                     \"args\": {\n-                        \"type\": \"array\"\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        }\n                     },\n                     \"env\": {\n-                        \"type\": \"object\"\n+                        \"type\": \"object\",\n+                        \"patternProperties\": {\n+                            \".+\": {\n+                                \"type\": \"string\"\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "82ca749f306cf6c801ffc3e735593622f0333327", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=c6db6e235219e364d38a31a720cbe3d75f5c8c15", "patch": "@@ -99,8 +99,10 @@ export async function createClient(config: Config, serverPath: string): Promise<\n     // Note that while the CallHierarchyFeature is stable the LSP protocol is not.\n     res.registerFeature(new CallHierarchyFeature(res));\n \n-    if (config.highlightingSemanticTokens) {\n-        res.registerFeature(new SemanticTokensFeature(res));\n+    if (config.package.enableProposedApi) {\n+        if (config.highlightingSemanticTokens) {\n+            res.registerFeature(new SemanticTokensFeature(res));\n+        }\n     }\n \n     return res;"}, {"sha": "602538ea177074e624dba656184f30ab104a7f17", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c6db6e235219e364d38a31a720cbe3d75f5c8c15", "patch": "@@ -38,17 +38,11 @@ export class Config {\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);\n \n-    readonly packageJsonVersion: string = vscode\n-        .extensions\n-        .getExtension(this.extensionId)!\n-        .packageJSON\n-        .version;\n-\n-    readonly releaseTag: string | undefined = vscode\n-        .extensions\n-        .getExtension(this.extensionId)!\n-        .packageJSON\n-        .releaseTag ?? undefined;\n+    readonly package: {\n+        version: string;\n+        releaseTag: string | undefined;\n+        enableProposedApi: boolean | undefined;\n+    } = vscode.extensions.getExtension(this.extensionId)!.packageJSON;\n \n     private cfg!: vscode.WorkspaceConfiguration;\n \n@@ -62,7 +56,7 @@ export class Config {\n         const enableLogging = this.cfg.get(\"trace.extension\") as boolean;\n         log.setEnabled(enableLogging);\n         log.debug(\n-            \"Extension version:\", this.packageJsonVersion,\n+            \"Extension version:\", this.package.version,\n             \"using configuration:\", this.cfg\n         );\n     }"}, {"sha": "7b7c19dfcf0b17626707302eb73ece043906b223", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c6db6e235219e364d38a31a720cbe3d75f5c8c15/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=c6db6e235219e364d38a31a720cbe3d75f5c8c15", "patch": "@@ -110,9 +110,9 @@ async function bootstrap(config: Config, state: PersistentState): Promise<string\n }\n \n async function bootstrapExtension(config: Config, state: PersistentState): Promise<void> {\n-    if (config.releaseTag === undefined) return;\n+    if (config.package.releaseTag === undefined) return;\n     if (config.channel === \"stable\") {\n-        if (config.releaseTag === NIGHTLY_TAG) {\n+        if (config.package.releaseTag === NIGHTLY_TAG) {\n             vscode.window.showWarningMessage(`You are running a nightly version of rust-analyzer extension.\n To switch to stable, uninstall the extension and re-install it from the marketplace`);\n         }\n@@ -185,7 +185,7 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         }\n         return explicitPath;\n     };\n-    if (config.releaseTag === undefined) return \"rust-analyzer\";\n+    if (config.package.releaseTag === undefined) return \"rust-analyzer\";\n \n     let binaryName: string | undefined = undefined;\n     if (process.arch === \"x64\" || process.arch === \"x32\") {\n@@ -211,21 +211,21 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n         await state.updateServerVersion(undefined);\n     }\n \n-    if (state.serverVersion === config.packageJsonVersion) return dest;\n+    if (state.serverVersion === config.package.version) return dest;\n \n     if (config.askBeforeDownload) {\n         const userResponse = await vscode.window.showInformationMessage(\n-            `Language server version ${config.packageJsonVersion} for rust-analyzer is not installed.`,\n+            `Language server version ${config.package.version} for rust-analyzer is not installed.`,\n             \"Download now\"\n         );\n         if (userResponse !== \"Download now\") return dest;\n     }\n \n-    const release = await fetchRelease(config.releaseTag);\n+    const release = await fetchRelease(config.package.releaseTag);\n     const artifact = release.assets.find(artifact => artifact.name === binaryName);\n     assert(!!artifact, `Bad release: ${JSON.stringify(release)}`);\n \n     await download(artifact.browser_download_url, dest, \"Downloading rust-analyzer server\", { mode: 0o755 });\n-    await state.updateServerVersion(config.packageJsonVersion);\n+    await state.updateServerVersion(config.package.version);\n     return dest;\n }"}]}