{"sha": "f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxY2U2OTNlNjE4ZGJmNDI3M2UwZTFhZjhmZDEwMWUxNTk2NGY1ZjA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-21T04:18:10Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-21T20:16:17Z"}, "message": "alter `exchange_free` for sized deallocation\n\nThe support for sized deallocation is nearly complete. The only known\nmissing pieces are `Box<str>`, `Box<[T]>` and `proc`.", "tree": {"sha": "ebbb78b661056004f9842b56bca77948f7cf17b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebbb78b661056004f9842b56bca77948f7cf17b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "html_url": "https://github.com/rust-lang/rust/commit/f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "945019830b45316005982853a54c6b74f057d314", "url": "https://api.github.com/repos/rust-lang/rust/commits/945019830b45316005982853a54c6b74f057d314", "html_url": "https://github.com/rust-lang/rust/commit/945019830b45316005982853a54c6b74f057d314"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "631b72cb8978ef791c42bba74a61c44f9cb2b4f9", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // FIXME: #13994: port to the sized deallocation API when available\n-// FIXME: #13996: need a way to mark the `allocate` and `reallocate` return values as `noalias`\n+// FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias` and `nonnull`\n \n use core::intrinsics::{abort, cttz32};\n use core::option::{None, Option};\n@@ -133,14 +133,20 @@ unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n     }\n }\n \n-#[cfg(not(test))]\n+#[cfg(not(test), stage0)]\n #[lang=\"exchange_free\"]\n #[inline]\n-// FIXME: #13994 (rustc should pass align and size here)\n unsafe fn exchange_free(ptr: *mut u8) {\n     deallocate(ptr, 0, 8);\n }\n \n+#[cfg(not(test), not(stage0))]\n+#[lang=\"exchange_free\"]\n+#[inline]\n+unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n+    deallocate(ptr, size, align);\n+}\n+\n // FIXME: #7496\n #[cfg(not(test))]\n #[lang=\"closure_exchange_malloc\"]"}, {"sha": "80ee555971d83412139a3b2c84f454c1ad555a57", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "patch": "@@ -278,13 +278,14 @@ impl<'a> CleanupMethods<'a> for FunctionContext<'a> {\n     fn schedule_free_value(&self,\n                            cleanup_scope: ScopeId,\n                            val: ValueRef,\n-                           heap: Heap) {\n+                           heap: Heap,\n+                           content_ty: ty::t) {\n         /*!\n          * Schedules a call to `free(val)`. Note that this is a shallow\n          * operation.\n          */\n \n-        let drop = box FreeValue { ptr: val, heap: heap };\n+        let drop = box FreeValue { ptr: val, heap: heap, content_ty: content_ty };\n \n         debug!(\"schedule_free_value({:?}, val={}, heap={:?})\",\n                cleanup_scope,\n@@ -847,6 +848,7 @@ pub enum Heap {\n pub struct FreeValue {\n     ptr: ValueRef,\n     heap: Heap,\n+    content_ty: ty::t\n }\n \n impl Cleanup for FreeValue {\n@@ -860,7 +862,7 @@ impl Cleanup for FreeValue {\n                 glue::trans_free(bcx, self.ptr)\n             }\n             HeapExchange => {\n-                glue::trans_exchange_free(bcx, self.ptr)\n+                glue::trans_exchange_free_ty(bcx, self.ptr, self.content_ty)\n             }\n         }\n     }\n@@ -931,7 +933,8 @@ pub trait CleanupMethods<'a> {\n     fn schedule_free_value(&self,\n                            cleanup_scope: ScopeId,\n                            val: ValueRef,\n-                           heap: Heap);\n+                           heap: Heap,\n+                           content_ty: ty::t);\n     fn schedule_clean(&self,\n                       cleanup_scope: ScopeId,\n                       cleanup: Box<Cleanup>);"}, {"sha": "bd25acad21d4d0cc30257eada8030cf8518515b7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "patch": "@@ -1183,7 +1183,7 @@ fn trans_uniq_expr<'a>(bcx: &'a Block<'a>,\n     } else {\n         let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n         fcx.schedule_free_value(cleanup::CustomScope(custom_cleanup_scope),\n-                                val, cleanup::HeapExchange);\n+                                val, cleanup::HeapExchange, contents_ty);\n         let bcx = trans_into(bcx, contents, SaveIn(val));\n         fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n         bcx\n@@ -1205,7 +1205,7 @@ fn trans_managed_expr<'a>(bcx: &'a Block<'a>,\n \n     let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n     fcx.schedule_free_value(cleanup::CustomScope(custom_cleanup_scope),\n-                            bx, cleanup::HeapManaged);\n+                            bx, cleanup::HeapManaged, contents_ty);\n     let bcx = trans_into(bcx, contents, SaveIn(body));\n     fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n     immediate_rvalue_bcx(bcx, bx, box_ty).to_expr_datumblock()\n@@ -1789,13 +1789,14 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n                 let scope = cleanup::temporary_scope(bcx.tcx(), expr.id);\n                 let ptr = Load(bcx, datum.val);\n                 if !type_is_zero_size(bcx.ccx(), content_ty) {\n-                    bcx.fcx.schedule_free_value(scope, ptr, cleanup::HeapExchange);\n+                    bcx.fcx.schedule_free_value(scope, ptr, cleanup::HeapExchange, content_ty);\n                 }\n             }\n             RvalueExpr(Rvalue { mode: ByValue }) => {\n                 let scope = cleanup::temporary_scope(bcx.tcx(), expr.id);\n                 if !type_is_zero_size(bcx.ccx(), content_ty) {\n-                    bcx.fcx.schedule_free_value(scope, datum.val, cleanup::HeapExchange);\n+                    bcx.fcx.schedule_free_value(scope, datum.val, cleanup::HeapExchange,\n+                                                content_ty);\n                 }\n             }\n             LvalueExpr => { }"}, {"sha": "b1b684ca3713aa9c7e3a404d5eaa1830ffce6614", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "patch": "@@ -50,15 +50,30 @@ pub fn trans_free<'a>(cx: &'a Block<'a>, v: ValueRef) -> &'a Block<'a> {\n         Some(expr::Ignore)).bcx\n }\n \n-pub fn trans_exchange_free<'a>(cx: &'a Block<'a>, v: ValueRef)\n-                           -> &'a Block<'a> {\n+fn trans_exchange_free<'a>(cx: &'a Block<'a>, v: ValueRef, size: u64,\n+                               align: u64) -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_exchange_free\");\n+    let ccx = cx.ccx();\n     callee::trans_lang_call(cx,\n         langcall(cx, None, \"\", ExchangeFreeFnLangItem),\n-        [PointerCast(cx, v, Type::i8p(cx.ccx()))],\n+        [PointerCast(cx, v, Type::i8p(ccx)), C_uint(ccx, size as uint), C_uint(ccx, align as uint)],\n         Some(expr::Ignore)).bcx\n }\n \n+pub fn trans_exchange_free_ty<'a>(bcx: &'a Block<'a>, ptr: ValueRef,\n+                                  content_ty: ty::t) -> &'a Block<'a> {\n+    let sizing_type = sizing_type_of(bcx.ccx(), content_ty);\n+    let content_size = llsize_of_alloc(bcx.ccx(), sizing_type);\n+\n+    // `Box<ZeroSizeType>` does not allocate.\n+    if content_size != 0 {\n+        let content_align = llalign_of_min(bcx.ccx(), sizing_type);\n+        trans_exchange_free(bcx, ptr, content_size, content_align)\n+    } else {\n+        bcx\n+    }\n+}\n+\n pub fn take_ty<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)\n                -> &'a Block<'a> {\n     // NB: v is an *alias* of type t here, not a direct value.\n@@ -87,17 +102,15 @@ fn get_drop_glue_type(ccx: &CrateContext, t: ty::t) -> ty::t {\n                 ty::ty_vec(_, None) | ty::ty_str => t,\n                 _ => {\n                     let llty = sizing_type_of(ccx, typ);\n-                    // Unique boxes do not allocate for zero-size types. The standard\n-                    // library may assume that `free` is never called on the pointer\n-                    // returned for `Box<ZeroSizeType>`.\n+                    // `Box<ZeroSizeType>` does not allocate.\n                     if llsize_of_alloc(ccx, llty) == 0 {\n                         ty::mk_i8()\n                     } else {\n                         ty::mk_uniq(tcx, ty::mk_i8())\n                     }\n-                        }\n-                    }\n                 }\n+            }\n+        }\n         _ => t\n     }\n }\n@@ -285,20 +298,22 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n                 ty::ty_vec(mt, None) => {\n                     with_cond(bcx, not_null, |bcx| {\n                         let bcx = tvec::make_drop_glue_unboxed(bcx, llbox, mt.ty);\n-                        trans_exchange_free(bcx, llbox)\n+                        // FIXME: #13994: the old `Box<[T]>` will not support sized deallocation\n+                        trans_exchange_free(bcx, llbox, 0, 8)\n                     })\n                 }\n                 ty::ty_str => {\n                     with_cond(bcx, not_null, |bcx| {\n                         let unit_ty = ty::sequence_element_type(bcx.tcx(), t);\n                         let bcx = tvec::make_drop_glue_unboxed(bcx, llbox, unit_ty);\n-                        trans_exchange_free(bcx, llbox)\n+                        // FIXME: #13994: the old `Box<str>` will not support sized deallocation\n+                        trans_exchange_free(bcx, llbox, 0, 8)\n                     })\n                 }\n                 _ => {\n                     with_cond(bcx, not_null, |bcx| {\n                         let bcx = drop_ty(bcx, llbox, content_ty);\n-                        trans_exchange_free(bcx, llbox)\n+                        trans_exchange_free_ty(bcx, llbox, content_ty)\n                     })\n                 }\n             }\n@@ -340,7 +355,8 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n                 Call(bcx, dtor, [PointerCast(bcx, cdata, Type::i8p(bcx.ccx()))], []);\n \n                 // Free the environment itself\n-                trans_exchange_free(bcx, env)\n+                // FIXME: #13994: pass align and size here\n+                trans_exchange_free(bcx, env, 0, 8)\n             })\n         }\n         _ => {"}, {"sha": "24518bdeeca7157eff3b3529b314c2d0bcca7040", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ce693e618dbf4273e0e1af8fd101e15964f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=f1ce693e618dbf4273e0e1af8fd101e15964f5f0", "patch": "@@ -287,8 +287,11 @@ pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,\n     // Create a temporary scope lest execution should fail while\n     // constructing the vector.\n     let temp_scope = fcx.push_custom_cleanup_scope();\n+\n+    // FIXME: #13994: the old `Box<[T]> will not support sized deallocation, this is a placeholder\n+    let content_ty = vt.unit_ty;\n     fcx.schedule_free_value(cleanup::CustomScope(temp_scope),\n-                            val, cleanup::HeapExchange);\n+                            val, cleanup::HeapExchange, content_ty);\n \n     let dataptr = get_dataptr(bcx, val);\n "}]}