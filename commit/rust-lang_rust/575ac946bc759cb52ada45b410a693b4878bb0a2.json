{"sha": "575ac946bc759cb52ada45b410a693b4878bb0a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NWFjOTQ2YmM3NTljYjUyYWRhNDViNDEwYTY5M2I0ODc4YmIwYTI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-12T13:32:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-12T13:32:30Z"}, "message": "Rollup merge of #50607 - Zoxc:symbol-arena, r=michaelwoerister\n\nAllocate Symbol strings from an arena\n\nThis is an alternative to https://github.com/rust-lang/rust/pull/50549\n\ncc @nnethercote\n\nr? @michaelwoerister", "tree": {"sha": "2983f11874ce835104c6de2b010d5e83e602ea83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2983f11874ce835104c6de2b010d5e83e602ea83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/575ac946bc759cb52ada45b410a693b4878bb0a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9uzuCRBK7hj4Ov3rIwAAdHIIAGauDN9vv/cS9apkmvSNIJjx\ndVwT4Sx4Y5zwbkDI/HrcWDFlbrct4VJBxcvGYZPQQMi7sg/swJ4AEHwH/n1pYNmm\nKEnEyqY9oOaQjfrWlP4+Uvo8ACsbVdVF24n5wDxXwdzgIvkSrCf8uTpcGq4o7lph\nlt+sQJdGgk6XxPYb+cDNKs3rkFcEazLQh3BYb1ICQQaqh5tXtb4XpEXx0CFbDtnk\nWxz4pUIljBIsz8oI1foOH2M3tBDZz9kjYy3Li2f5EjMO/0knsXDI+atw8YopQbHL\nadpw2EVCmz5q6LUgV1qU5VbctY+Yst6lqojS86SugIV9mFF9fmKO9vNKTzVWs5w=\n=RQQV\n-----END PGP SIGNATURE-----\n", "payload": "tree 2983f11874ce835104c6de2b010d5e83e602ea83\nparent bf832c2a89b67449da276377dbe23cd08d397930\nparent ca3234036708599aa3dca645a58b819e0f6116e8\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1526131950 -0600\ncommitter GitHub <noreply@github.com> 1526131950 -0600\n\nRollup merge of #50607 - Zoxc:symbol-arena, r=michaelwoerister\n\nAllocate Symbol strings from an arena\n\nThis is an alternative to https://github.com/rust-lang/rust/pull/50549\n\ncc @nnethercote\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/575ac946bc759cb52ada45b410a693b4878bb0a2", "html_url": "https://github.com/rust-lang/rust/commit/575ac946bc759cb52ada45b410a693b4878bb0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/575ac946bc759cb52ada45b410a693b4878bb0a2/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf832c2a89b67449da276377dbe23cd08d397930", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf832c2a89b67449da276377dbe23cd08d397930", "html_url": "https://github.com/rust-lang/rust/commit/bf832c2a89b67449da276377dbe23cd08d397930"}, {"sha": "ca3234036708599aa3dca645a58b819e0f6116e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3234036708599aa3dca645a58b819e0f6116e8", "html_url": "https://github.com/rust-lang/rust/commit/ca3234036708599aa3dca645a58b819e0f6116e8"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "4364d7001cdfe039cbb60abb6e1503fdcd66f78d", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=575ac946bc759cb52ada45b410a693b4878bb0a2", "patch": "@@ -2560,6 +2560,7 @@ dependencies = [\n name = \"syntax_pos\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arena 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\","}, {"sha": "a9147b394f7a498406baec5c22449ed2943c1c16", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=575ac946bc759cb52ada45b410a693b4878bb0a2", "patch": "@@ -11,5 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n serialize = { path = \"../libserialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+arena = { path = \"../libarena\" }\n scoped-tls = { version = \"0.1.1\", features = [\"nightly\"] }\n unicode-width = \"0.1.4\""}, {"sha": "d30d3d78ca5404dbea9f10b29f81f272b6c5af35", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=575ac946bc759cb52ada45b410a693b4878bb0a2", "patch": "@@ -35,6 +35,7 @@ use std::path::PathBuf;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{Lrc, Lock};\n \n+extern crate arena;\n extern crate rustc_data_structures;\n \n #[macro_use]"}, {"sha": "b84ff5697a4c8e3928244d0cf4e5487589cbb709", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575ac946bc759cb52ada45b410a693b4878bb0a2/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=575ac946bc759cb52ada45b410a693b4878bb0a2", "patch": "@@ -16,8 +16,10 @@ use hygiene::SyntaxContext;\n use {Span, DUMMY_SP, GLOBALS};\n \n use rustc_data_structures::fx::FxHashMap;\n+use arena::DroplessArena;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n+use std::str;\n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::hash::{Hash, Hasher};\n \n@@ -198,22 +200,35 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n     }\n }\n \n-#[derive(Default)]\n+// The &'static strs in this type actually point into the arena\n pub struct Interner {\n-    names: FxHashMap<Box<str>, Symbol>,\n-    strings: Vec<Box<str>>,\n+    arena: DroplessArena,\n+    names: FxHashMap<&'static str, Symbol>,\n+    strings: Vec<&'static str>,\n     gensyms: Vec<Symbol>,\n }\n \n impl Interner {\n     pub fn new() -> Self {\n-        Interner::default()\n+        Interner {\n+            arena: DroplessArena::new(),\n+            names: Default::default(),\n+            strings: Default::default(),\n+            gensyms: Default::default(),\n+        }\n     }\n \n     fn prefill(init: &[&str]) -> Self {\n         let mut this = Interner::new();\n         for &string in init {\n-            this.intern(string);\n+            if string == \"\" {\n+                // We can't allocate empty strings in the arena, so handle this here\n+                let name = Symbol(this.strings.len() as u32);\n+                this.names.insert(\"\", name);\n+                this.strings.push(\"\");\n+            } else {\n+                this.intern(string);\n+            }\n         }\n         this\n     }\n@@ -224,8 +239,17 @@ impl Interner {\n         }\n \n         let name = Symbol(self.strings.len() as u32);\n-        let string = string.to_string().into_boxed_str();\n-        self.strings.push(string.clone());\n+\n+        // from_utf8_unchecked is safe since we just allocated a &str which is known to be utf8\n+        let string: &str = unsafe {\n+            str::from_utf8_unchecked(self.arena.alloc_slice(string.as_bytes()))\n+        };\n+        // It is safe to extend the arena allocation to 'static because we only access\n+        // these while the arena is still alive\n+        let string: &'static str =  unsafe {\n+            &*(string as *const str)\n+        };\n+        self.strings.push(string);\n         self.names.insert(string, name);\n         name\n     }\n@@ -254,7 +278,7 @@ impl Interner {\n \n     pub fn get(&self, symbol: Symbol) -> &str {\n         match self.strings.get(symbol.0 as usize) {\n-            Some(ref string) => string,\n+            Some(string) => string,\n             None => self.get(self.gensyms[(!0 - symbol.0) as usize]),\n         }\n     }"}]}