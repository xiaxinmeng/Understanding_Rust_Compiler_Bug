{"sha": "e56072bfa3e5af69a4c293a38de6e1350ada3573", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NjA3MmJmYTNlNWFmNjlhNGMyOTNhMzhkZTZlMTM1MGFkYTM1NzM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-12T18:56:11Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-12T18:56:11Z"}, "message": "Merge #500\n\n500: Code lens support for running tests r=matklad a=kjeremy\n\nSupports running individual and mod tests.\r\n\r\nI feel like this kind of abuses the `Runnables` infrastructure but it works. Maybe later on down the line we should introduce a struct that is really just a tuple of binary, arguments, and environment and pass that back to the client instead. `run_single.ts` is just a paired down version of `runnables.ts` and there is duplication because I think run_single will probably change independent of runnables.\n\nCo-authored-by: Jeremy A. Kolb <jkolb@ara.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "c7093fca262cedfc1fce2ba7499330fbb343c702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7093fca262cedfc1fce2ba7499330fbb343c702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e56072bfa3e5af69a4c293a38de6e1350ada3573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e56072bfa3e5af69a4c293a38de6e1350ada3573", "html_url": "https://github.com/rust-lang/rust/commit/e56072bfa3e5af69a4c293a38de6e1350ada3573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e56072bfa3e5af69a4c293a38de6e1350ada3573/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "ee80a92ed4245f1b6e2b11127c8636b63930073d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee80a92ed4245f1b6e2b11127c8636b63930073d", "html_url": "https://github.com/rust-lang/rust/commit/ee80a92ed4245f1b6e2b11127c8636b63930073d"}, {"sha": "5bf739c824c25867811163e05f706ff3d20bd2e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf739c824c25867811163e05f706ff3d20bd2e6", "html_url": "https://github.com/rust-lang/rust/commit/5bf739c824c25867811163e05f706ff3d20bd2e6"}], "stats": {"total": 272, "additions": 173, "deletions": 99}, "files": [{"sha": "be6a6ead6dd6a2c96f984c0679f860270c393701", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -1,5 +1,5 @@\n use languageserver_types::{\n-    CodeActionProviderCapability, CompletionOptions, DocumentOnTypeFormattingOptions,\n+    CodeActionProviderCapability, CodeLensOptions, CompletionOptions, DocumentOnTypeFormattingOptions,\n     ExecuteCommandOptions, FoldingRangeProviderCapability, RenameOptions, RenameProviderCapability,\n     ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n     TextDocumentSyncOptions,\n@@ -32,7 +32,9 @@ pub fn server_capabilities() -> ServerCapabilities {\n         document_symbol_provider: Some(true),\n         workspace_symbol_provider: Some(true),\n         code_action_provider: Some(CodeActionProviderCapability::Simple(true)),\n-        code_lens_provider: None,\n+        code_lens_provider: Some(CodeLensOptions {\n+            resolve_provider: None,\n+        }),\n         document_formatting_provider: Some(true),\n         document_range_formatting_provider: None,\n         document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {"}, {"sha": "a66f14b821005916a5160e06c6d98ebe22b213ee", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -0,0 +1,100 @@\n+use crate::{\n+    project_model::TargetKind,\n+    server_world::ServerWorld,\n+    Result\n+};\n+\n+use ra_ide_api::{FileId, RunnableKind};\n+\n+pub(crate) fn runnable_args(\n+    world: &ServerWorld,\n+    file_id: FileId,\n+    kind: &RunnableKind,\n+) -> Result<Vec<String>> {\n+    let spec = CargoTargetSpec::for_file(world, file_id)?;\n+    let mut res = Vec::new();\n+    match kind {\n+        RunnableKind::Test { name } => {\n+            res.push(\"test\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+            res.push(\"--\".to_string());\n+            res.push(name.to_string());\n+            res.push(\"--nocapture\".to_string());\n+        }\n+        RunnableKind::TestMod { path } => {\n+            res.push(\"test\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+            res.push(\"--\".to_string());\n+            res.push(path.to_string());\n+            res.push(\"--nocapture\".to_string());\n+        }\n+        RunnableKind::Bin => {\n+            res.push(\"run\".to_string());\n+            if let Some(spec) = spec {\n+                spec.push_to(&mut res);\n+            }\n+        }\n+    }\n+    Ok(res)\n+}\n+\n+pub struct CargoTargetSpec {\n+    pub package: String,\n+    pub target: String,\n+    pub target_kind: TargetKind,\n+}\n+\n+impl CargoTargetSpec {\n+    pub fn for_file(world: &ServerWorld, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n+        let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n+            Some(crate_id) => crate_id,\n+            None => return Ok(None),\n+        };\n+        let file_id = world.analysis().crate_root(crate_id)?;\n+        let path = world\n+            .vfs\n+            .read()\n+            .file2path(ra_vfs::VfsFile(file_id.0.into()));\n+        let res = world.workspaces.iter().find_map(|ws| {\n+            let tgt = ws.cargo.target_by_root(&path)?;\n+            let res = CargoTargetSpec {\n+                package: tgt.package(&ws.cargo).name(&ws.cargo).to_string(),\n+                target: tgt.name(&ws.cargo).to_string(),\n+                target_kind: tgt.kind(&ws.cargo),\n+            };\n+            Some(res)\n+        });\n+        Ok(res)\n+    }\n+\n+    pub fn push_to(self, buf: &mut Vec<String>) {\n+        buf.push(\"--package\".to_string());\n+        buf.push(self.package);\n+        match self.target_kind {\n+            TargetKind::Bin => {\n+                buf.push(\"--bin\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Test => {\n+                buf.push(\"--test\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Bench => {\n+                buf.push(\"--bench\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Example => {\n+                buf.push(\"--example\".to_string());\n+                buf.push(self.target);\n+            }\n+            TargetKind::Lib => {\n+                buf.push(\"--lib\".to_string());\n+            }\n+            TargetKind::Other => (),\n+        }\n+    }\n+}"}, {"sha": "f93d4b37d9dd7f007f990672453f73cc52a3be29", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -1,4 +1,5 @@\n mod caps;\n+mod cargo_target_spec;\n mod conv;\n mod main_loop;\n mod project_model;"}, {"sha": "03c834dbc119d751c6452c56f829c1bf3435a135", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -300,6 +300,7 @@ fn on_request(\n         .on::<req::DecorationsRequest>(handlers::handle_decorations)?\n         .on::<req::Completion>(handlers::handle_completion)?\n         .on::<req::CodeActionRequest>(handlers::handle_code_action)?\n+        .on::<req::CodeLensRequest>(handlers::handle_code_lens)?\n         .on::<req::FoldingRangeRequest>(handlers::handle_folding_range)?\n         .on::<req::SignatureHelpRequest>(handlers::handle_signature_help)?\n         .on::<req::HoverRequest>(handlers::handle_hover)?"}, {"sha": "a781df181be2032ea7c202d2842524cbc4cfc561", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 46, "deletions": 95, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -2,7 +2,7 @@ use std::collections::HashMap;\n \n use gen_lsp_server::ErrorCode;\n use languageserver_types::{\n-    CodeActionResponse, Command, Diagnostic, DiagnosticSeverity, DocumentFormattingParams,\n+    CodeActionResponse, Command, CodeLens, Diagnostic, DiagnosticSeverity, DocumentFormattingParams,\n     DocumentHighlight, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n     FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind,\n     ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range, RenameParams,\n@@ -17,8 +17,8 @@ use serde_json::to_value;\n use std::io::Write;\n \n use crate::{\n+    cargo_target_spec::{CargoTargetSpec, runnable_args},\n     conv::{to_location, to_location_link, Conv, ConvWith, MapConvWith, TryConvWith},\n-    project_model::TargetKind,\n     req::{self, Decoration},\n     server_world::ServerWorld,\n     LspError, Result,\n@@ -291,99 +291,6 @@ pub fn handle_runnables(\n         env: FxHashMap::default(),\n     });\n     return Ok(res);\n-\n-    fn runnable_args(\n-        world: &ServerWorld,\n-        file_id: FileId,\n-        kind: &RunnableKind,\n-    ) -> Result<Vec<String>> {\n-        let spec = CargoTargetSpec::for_file(world, file_id)?;\n-        let mut res = Vec::new();\n-        match kind {\n-            RunnableKind::Test { name } => {\n-                res.push(\"test\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n-                }\n-                res.push(\"--\".to_string());\n-                res.push(name.to_string());\n-                res.push(\"--nocapture\".to_string());\n-            }\n-            RunnableKind::TestMod { path } => {\n-                res.push(\"test\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n-                }\n-                res.push(\"--\".to_string());\n-                res.push(path.to_string());\n-                res.push(\"--nocapture\".to_string());\n-            }\n-            RunnableKind::Bin => {\n-                res.push(\"run\".to_string());\n-                if let Some(spec) = spec {\n-                    spec.push_to(&mut res);\n-                }\n-            }\n-        }\n-        Ok(res)\n-    }\n-\n-    struct CargoTargetSpec {\n-        package: String,\n-        target: String,\n-        target_kind: TargetKind,\n-    }\n-\n-    impl CargoTargetSpec {\n-        fn for_file(world: &ServerWorld, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n-            let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n-                Some(crate_id) => crate_id,\n-                None => return Ok(None),\n-            };\n-            let file_id = world.analysis().crate_root(crate_id)?;\n-            let path = world\n-                .vfs\n-                .read()\n-                .file2path(ra_vfs::VfsFile(file_id.0.into()));\n-            let res = world.workspaces.iter().find_map(|ws| {\n-                let tgt = ws.cargo.target_by_root(&path)?;\n-                let res = CargoTargetSpec {\n-                    package: tgt.package(&ws.cargo).name(&ws.cargo).to_string(),\n-                    target: tgt.name(&ws.cargo).to_string(),\n-                    target_kind: tgt.kind(&ws.cargo),\n-                };\n-                Some(res)\n-            });\n-            Ok(res)\n-        }\n-\n-        fn push_to(self, buf: &mut Vec<String>) {\n-            buf.push(\"--package\".to_string());\n-            buf.push(self.package);\n-            match self.target_kind {\n-                TargetKind::Bin => {\n-                    buf.push(\"--bin\".to_string());\n-                    buf.push(self.target);\n-                }\n-                TargetKind::Test => {\n-                    buf.push(\"--test\".to_string());\n-                    buf.push(self.target);\n-                }\n-                TargetKind::Bench => {\n-                    buf.push(\"--bench\".to_string());\n-                    buf.push(self.target);\n-                }\n-                TargetKind::Example => {\n-                    buf.push(\"--example\".to_string());\n-                    buf.push(self.target);\n-                }\n-                TargetKind::Lib => {\n-                    buf.push(\"--lib\".to_string());\n-                }\n-                TargetKind::Other => (),\n-            }\n-        }\n-    }\n }\n \n pub fn handle_decorations(\n@@ -669,6 +576,50 @@ pub fn handle_code_action(\n     Ok(Some(CodeActionResponse::Commands(res)))\n }\n \n+pub fn handle_code_lens(\n+    world: ServerWorld,\n+    params: req::CodeLensParams,\n+) -> Result<Option<Vec<CodeLens>>> {\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id);\n+\n+    let mut lenses: Vec<CodeLens> = Default::default();\n+\n+    for runnable in world.analysis().runnables(file_id)? {\n+        match &runnable.kind {\n+            RunnableKind::Test { name: _ } | RunnableKind::TestMod { path: _ } => {\n+                let args = runnable_args(&world, file_id, &runnable.kind)?;\n+\n+                let range = runnable.range.conv_with(&line_index);\n+\n+                // This represents the actual command that will be run.\n+                let r: req::Runnable = req::Runnable {\n+                    range,\n+                    label: Default::default(),\n+                    bin: \"cargo\".into(),\n+                    args,\n+                    env: Default::default(),\n+                };\n+\n+                let lens = CodeLens {\n+                    range,\n+                    command: Some(Command {\n+                        title: \"Run Test\".into(),\n+                        command: \"ra-lsp.run-single\".into(),\n+                        arguments: Some(vec![to_value(r).unwrap()]),\n+                    }),\n+                    data: None,\n+                };\n+\n+                lenses.push(lens);\n+            }\n+            _ => continue,\n+        };\n+    }\n+\n+    return Ok(Some(lenses));\n+}\n+\n pub fn handle_document_highlight(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,"}, {"sha": "c2b16725b73dd10b98e4d5e8ba80edede708ebd5", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -4,8 +4,8 @@ use serde::{Deserialize, Serialize};\n use url_serde;\n \n pub use languageserver_types::{\n-    notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CompletionParams,\n-    CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n+    notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens, CodeLensParams,\n+    CompletionParams, CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n     PublishDiagnosticsParams, ReferenceParams, SignatureHelp, TextDocumentEdit,\n     TextDocumentPositionParams, TextEdit, WorkspaceEdit, WorkspaceSymbolParams,"}, {"sha": "f9a4e2fc93b0a4cc1253c49ba3a221ad8cf73873", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -103,3 +103,19 @@ export async function handle() {\n         return await vscode.tasks.executeTask(task);\n     }\n }\n+\n+export async function handleSingle(runnable: Runnable) {\n+    const editor = vscode.window.activeTextEditor;\n+    if (editor == null || editor.document.languageId !== 'rust') {\n+        return;\n+    }\n+\n+    const task = createTask(runnable);\n+    task.group = vscode.TaskGroup.Build;\n+    task.presentationOptions = {\n+        reveal: vscode.TaskRevealKind.Always,\n+        panel: vscode.TaskPanelKind.Dedicated,\n+    };\n+    \n+    return vscode.tasks.executeTask(task);\n+}\n\\ No newline at end of file"}, {"sha": "9edfb13b5f7d586b7a30d03b66c1b6c25c23b1ac", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e56072bfa3e5af69a4c293a38de6e1350ada3573/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/e56072bfa3e5af69a4c293a38de6e1350ada3573/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=e56072bfa3e5af69a4c293a38de6e1350ada3573", "patch": "@@ -55,6 +55,9 @@ export function activate(context: vscode.ExtensionContext) {\n     );\n     overrideCommand('type', commands.onEnter.handle);\n \n+    // Unlike the above this does not send requests to the language server\n+    registerCommand('ra-lsp.run-single', commands.runnables.handleSingle);\n+\n     // Notifications are events triggered by the language server\n     const allNotifications: Iterable<\n         [string, lc.GenericNotificationHandler]"}]}