{"sha": "42e1cf37635c5c7ae752b7ea763578f354c639ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZTFjZjM3NjM1YzVjN2FlNzUyYjdlYTc2MzU3OGYzNTRjNjM5YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-08T06:28:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-08T06:28:15Z"}, "message": "Auto merge of #3901 - rail-rain:issue_1670, r=flip1995\n\nFix `explicit_counter_loop` suggestion\n\n#1670\n\nThis code seems to me to work, but I have two question.\n* Because range expression desugared in hir, `Sugg::hir` doesn't add parenthesis to range expression.  Which function is better to check range do you think, `check_for_loop_explicit_counter` or `hir_from_snippet`?\n* Do you think we need to distinguish between range expression and struct expression that creates `std::ops::Range*`?", "tree": {"sha": "d4f05bb87007335dd3013e93b233248dc917f03d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4f05bb87007335dd3013e93b233248dc917f03d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e1cf37635c5c7ae752b7ea763578f354c639ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e1cf37635c5c7ae752b7ea763578f354c639ae", "html_url": "https://github.com/rust-lang/rust/commit/42e1cf37635c5c7ae752b7ea763578f354c639ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e1cf37635c5c7ae752b7ea763578f354c639ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e226f17d526006c9a39c2197134c1e321927399a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e226f17d526006c9a39c2197134c1e321927399a", "html_url": "https://github.com/rust-lang/rust/commit/e226f17d526006c9a39c2197134c1e321927399a"}, {"sha": "2b82c71b559d9886e3ab3a7ad0194a5fe4aab58b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b82c71b559d9886e3ab3a7ad0194a5fe4aab58b", "html_url": "https://github.com/rust-lang/rust/commit/2b82c71b559d9886e3ab3a7ad0194a5fe4aab58b"}], "stats": {"total": 61, "additions": 46, "deletions": 15}, "files": [{"sha": "c2b44ee7018b7906b301dfbc30ee3aa38e65cbfe", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/42e1cf37635c5c7ae752b7ea763578f354c639ae/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1cf37635c5c7ae752b7ea763578f354c639ae/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=42e1cf37635c5c7ae752b7ea763578f354c639ae", "patch": "@@ -777,7 +777,7 @@ fn check_for_loop<'a, 'tcx>(\n     check_for_loop_range(cx, pat, arg, body, expr);\n     check_for_loop_reverse_range(cx, arg, expr);\n     check_for_loop_arg(cx, pat, arg, expr);\n-    check_for_loop_explicit_counter(cx, arg, body, expr);\n+    check_for_loop_explicit_counter(cx, pat, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n     check_for_mut_range_bound(cx, arg, body);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n@@ -1453,6 +1453,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat, arg: &Expr) {\n \n fn check_for_loop_explicit_counter<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n+    pat: &'tcx Pat,\n     arg: &'tcx Expr,\n     body: &'tcx Expr,\n     expr: &'tcx Expr,\n@@ -1489,16 +1490,31 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n \n                 if visitor2.state == VarState::Warn {\n                     if let Some(name) = visitor2.name {\n-                        span_lint(\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        span_lint_and_sugg(\n                             cx,\n                             EXPLICIT_COUNTER_LOOP,\n                             expr.span,\n-                            &format!(\n-                                \"the variable `{0}` is used as a loop counter. Consider using `for ({0}, \\\n-                                 item) in {1}.enumerate()` or similar iterators\",\n+                            &format!(\"the variable `{}` is used as a loop counter.\", name),\n+                            \"consider using\",\n+                            format!(\n+                                \"for ({}, {}) in {}.enumerate()\",\n                                 name,\n-                                snippet(cx, arg.span, \"_\")\n+                                snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n+                                if higher::range(cx, arg).is_some() {\n+                                    format!(\n+                                        \"({})\",\n+                                        snippet_with_applicability(cx, arg.span, \"_\", &mut applicability)\n+                                    )\n+                                } else {\n+                                    format!(\n+                                        \"{}\",\n+                                        sugg::Sugg::hir_with_applicability(cx, arg, \"_\", &mut applicability)\n+                                            .maybe_par()\n+                                    )\n+                                }\n                             ),\n+                            applicability,\n                         );\n                     }\n                 }"}, {"sha": "71ef1e8674ac6abeeade05a766fdb6daa092df61", "filename": "tests/ui/explicit_counter_loop.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42e1cf37635c5c7ae752b7ea763578f354c639ae/tests%2Fui%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e1cf37635c5c7ae752b7ea763578f354c639ae/tests%2Fui%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.rs?ref=42e1cf37635c5c7ae752b7ea763578f354c639ae", "patch": "@@ -113,3 +113,12 @@ mod issue_3308 {\n         }\n     }\n }\n+\n+mod issue_1670 {\n+    pub fn test() {\n+        let mut count = 0;\n+        for _i in 3..10 {\n+            count += 1;\n+        }\n+    }\n+}"}, {"sha": "5efd51abf1811ccfcfad5a6f21c1d02976c31597", "filename": "tests/ui/explicit_counter_loop.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42e1cf37635c5c7ae752b7ea763578f354c639ae/tests%2Fui%2Fexplicit_counter_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42e1cf37635c5c7ae752b7ea763578f354c639ae/tests%2Fui%2Fexplicit_counter_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_counter_loop.stderr?ref=42e1cf37635c5c7ae752b7ea763578f354c639ae", "patch": "@@ -1,28 +1,34 @@\n-error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+error: the variable `_index` is used as a loop counter.\n   --> $DIR/explicit_counter_loop.rs:6:15\n    |\n LL |     for _v in &vec {\n-   |               ^^^^\n+   |               ^^^^ help: consider using: `for (_index, _v) in (&vec).enumerate()`\n    |\n    = note: `-D clippy::explicit-counter-loop` implied by `-D warnings`\n \n-error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+error: the variable `_index` is used as a loop counter.\n   --> $DIR/explicit_counter_loop.rs:12:15\n    |\n LL |     for _v in &vec {\n-   |               ^^^^\n+   |               ^^^^ help: consider using: `for (_index, _v) in (&vec).enumerate()`\n \n-error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n+error: the variable `count` is used as a loop counter.\n   --> $DIR/explicit_counter_loop.rs:51:19\n    |\n LL |         for ch in text.chars() {\n-   |                   ^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n-error: the variable `count` is used as a loop counter. Consider using `for (count, item) in text.chars().enumerate()` or similar iterators\n+error: the variable `count` is used as a loop counter.\n   --> $DIR/explicit_counter_loop.rs:62:19\n    |\n LL |         for ch in text.chars() {\n-   |                   ^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^ help: consider using: `for (count, ch) in text.chars().enumerate()`\n \n-error: aborting due to 4 previous errors\n+error: the variable `count` is used as a loop counter.\n+  --> $DIR/explicit_counter_loop.rs:120:19\n+   |\n+LL |         for _i in 3..10 {\n+   |                   ^^^^^ help: consider using: `for (count, _i) in (3..10).enumerate()`\n+\n+error: aborting due to 5 previous errors\n "}]}