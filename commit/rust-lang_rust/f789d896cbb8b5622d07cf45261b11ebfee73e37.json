{"sha": "f789d896cbb8b5622d07cf45261b11ebfee73e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ODlkODk2Y2JiOGI1NjIyZDA3Y2Y0NTI2MWIxMWViZmVlNzNlMzc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-19T15:46:56Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-09T17:59:09Z"}, "message": "Print tidy errors to stderr, prefix with 'tidy error: ', handle 'bad' state.", "tree": {"sha": "5c2a420cbba9f69d08aa53559b027d2fe7fdc229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2a420cbba9f69d08aa53559b027d2fe7fdc229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f789d896cbb8b5622d07cf45261b11ebfee73e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f789d896cbb8b5622d07cf45261b11ebfee73e37", "html_url": "https://github.com/rust-lang/rust/commit/f789d896cbb8b5622d07cf45261b11ebfee73e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f789d896cbb8b5622d07cf45261b11ebfee73e37/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd698b9e8b02e27409123e71c0594523b926b850", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd698b9e8b02e27409123e71c0594523b926b850", "html_url": "https://github.com/rust-lang/rust/commit/bd698b9e8b02e27409123e71c0594523b926b850"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "11d5dbe736e81cdd39230a536bfd35210ad10131", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -62,8 +62,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 });\n             let path_bytes = rel_path.as_os_str().as_bytes();\n             if output.status.success() && output.stdout.starts_with(path_bytes) {\n-                println!(\"binary checked into source: {}\", file.display());\n-                *bad = true;\n+                tidy_error!(bad, \"binary checked into source: {}\", file.display());\n             }\n         }\n     })"}, {"sha": "c8c6cb0ee6b418f53453b17fd316ca4679d4393f", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -100,9 +100,8 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n         }\n \n         if !librs.contains(&format!(\"extern crate {}\", krate)) {\n-            println!(\"{} doesn't have `extern crate {}`, but Cargo.toml \\\n-                      depends on it\", libfile.display(), krate);\n-            *bad = true;\n+            tidy_error!(bad, \"{} doesn't have `extern crate {}`, but Cargo.toml \\\n+                              depends on it\", libfile.display(), krate);\n         }\n     }\n }"}, {"sha": "5bf7c894cda66ecbc2e361d5549c31f787966c3e", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -79,11 +79,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n             continue\n         }\n \n-        println!(\"duplicate error code: {}\", code);\n+        tidy_error!(bad, \"duplicate error code: {}\", code);\n         for &(ref file, line_num, ref line) in entries.iter() {\n-            println!(\"{}:{}: {}\", file.display(), line_num, line);\n+            tidy_error!(bad, \"{}:{}: {}\", file.display(), line_num, line);\n         }\n-        *bad = true;\n     }\n \n     if !*bad {"}, {"sha": "ad0d2fa0b363567da15144ddaa4de22aee9b62d9", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -77,8 +77,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n         for (i, line) in contents.lines().enumerate() {\n             let mut err = |msg: &str| {\n-                println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n-                *bad = true;\n+                tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n \n             let gate_test_str = \"gate-test-\";\n@@ -126,8 +125,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n     }\n \n     if gate_untested.len() > 0 {\n-        println!(\"Found {} features without a gate test.\", gate_untested.len());\n-        *bad = true;\n+        tidy_error!(bad, \"Found {} features without a gate test.\", gate_untested.len());\n     }\n \n     if *bad {\n@@ -221,8 +219,7 @@ pub fn collect_lib_features(base_src_path: &Path,\n \n         for (i, line) in contents.lines().enumerate() {\n             let mut err = |msg: &str| {\n-                println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n-                *bad = true;\n+                tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n             let level = if line.contains(\"[unstable(\") {\n                 Status::Unstable"}, {"sha": "dee37341051ed2f0227a09f8878c248f0984a488", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -34,6 +34,15 @@ macro_rules! t {\n     })\n }\n \n+macro_rules! tidy_error {\n+    ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n+        use std::io::Write;\n+        *$bad = true;\n+        write!(::std::io::stderr(), \"tidy error: \").expect(\"could not write to stderr\");\n+        writeln!(::std::io::stderr(), $fmt, $($arg)*).expect(\"could not write to stderr\");\n+    });\n+}\n+\n mod bins;\n mod style;\n mod errors;"}, {"sha": "cb323bd1d28cedb9847d29f9b464e6c1183397d5", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -126,8 +126,7 @@ fn check_cfgs(contents: &mut String, file: &Path,\n             Ok(_) => unreachable!(),\n             Err(i) => i + 1\n         };\n-        println!(\"{}:{}: platform-specific cfg: {}\", file.display(), line, cfg);\n-        *bad = true;\n+        tidy_error!(bad, \"{}:{}: platform-specific cfg: {}\", file.display(), line, cfg);\n     };\n \n     for (idx, cfg) in cfgs.into_iter() {"}, {"sha": "081390eb93ca482d605aceb5efda82950a6cba47", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -112,8 +112,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let skip_length = contents.contains(\"ignore-tidy-linelength\");\n         for (i, line) in contents.split(\"\\n\").enumerate() {\n             let mut err = |msg: &str| {\n-                println!(\"{}:{}: {}\", file.display(), i + 1, msg);\n-                *bad = true;\n+                tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n             if !skip_length && line.chars().count() > COLS\n                 && !long_line_is_ok(line) {\n@@ -138,8 +137,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             }\n         }\n         if !licenseck(file, &contents) {\n-            println!(\"{}: incorrect license\", file.display());\n-            *bad = true;\n+            tidy_error!(bad, \"{}: incorrect license\", file.display());\n         }\n     })\n }"}, {"sha": "2d3d9e80257f9019d7d62db5d17e8b227e9e09b5", "filename": "src/tools/tidy/src/unstable_book.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f789d896cbb8b5622d07cf45261b11ebfee73e37/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funstable_book.rs?ref=f789d896cbb8b5622d07cf45261b11ebfee73e37", "patch": "@@ -10,7 +10,7 @@\n \n use std::collections::HashSet;\n use std::fs;\n-use std::io::{self, BufRead, Write};\n+use std::io::{self, BufRead};\n use std::path;\n use features::{collect_lang_features, collect_lib_features, Status};\n \n@@ -110,29 +110,26 @@ pub fn check(path: &path::Path, bad: &mut bool) {\n \n     // Check for Unstable Book section names with no corresponding SUMMARY.md link\n     for feature_name in &unstable_book_section_file_names - &unstable_book_links {\n-        *bad = true;\n-        writeln!(io::stderr(),\n-                 \"The Unstable Book section '{}' needs to have a link in SUMMARY.md\",\n-                 feature_name)\n-                .expect(\"could not write to stderr\")\n+        tidy_error!(\n+            bad,\n+            \"The Unstable Book section '{}' needs to have a link in SUMMARY.md\",\n+            feature_name);\n     }\n \n     // Check for unstable features that don't have Unstable Book sections\n     for feature_name in &unstable_feature_names - &unstable_book_section_file_names {\n-        *bad = true;\n-        writeln!(io::stderr(),\n-                 \"Unstable feature '{}' needs to have a section in The Unstable Book\",\n-                 feature_name)\n-                .expect(\"could not write to stderr\")\n+        tidy_error!(\n+            bad,\n+            \"Unstable feature '{}' needs to have a section in The Unstable Book\",\n+            feature_name);\n     }\n \n     // Check for Unstable Book sections that don't have a corresponding unstable feature\n     for feature_name in &unstable_book_section_file_names - &unstable_feature_names {\n-        *bad = true;\n-        writeln!(io::stderr(),\n-                 \"The Unstable Book has a section '{}' which doesn't correspond \\\n-                  to an unstable feature\",\n-                 feature_name)\n-                .expect(\"could not write to stderr\")\n+        tidy_error!(\n+            bad,\n+            \"The Unstable Book has a section '{}' which doesn't correspond \\\n+            to an unstable feature\",\n+            feature_name)\n     }\n }"}]}