{"sha": "72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmU5YTYwN2JkMTI3Y2RkNWNkYjNmMWY1M2FmNzI1ZjRlZWVmOTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T15:19:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-13T17:21:13Z"}, "message": "review or fix remaining miri failures in libcore", "tree": {"sha": "5e3307898afff683be572d97cc8f986eb1e25a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3307898afff683be572d97cc8f986eb1e25a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "html_url": "https://github.com/rust-lang/rust/commit/72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f5dc49214b05a469c5c4974fc4e605cb72822ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5dc49214b05a469c5c4974fc4e605cb72822ea", "html_url": "https://github.com/rust-lang/rust/commit/7f5dc49214b05a469c5c4974fc4e605cb72822ea"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "3baa445e652f8f1612d2548537221bf4d7fdd7dc", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -1,4 +1,4 @@\n-#![cfg(not(miri))]\n+#![cfg(not(miri))] // FIXME: A bug in Miri breaks padding in string formatting\n \n mod builders;\n mod float;"}, {"sha": "1000088e6b0633c5489e9eeee91c4e2af1c1a289", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n mod sip;\n \n use std::hash::{Hash, Hasher};\n@@ -75,9 +73,11 @@ fn test_writer_hasher() {\n     let cs: &mut [u8] = &mut [1, 2, 3];\n     let ptr = cs.as_ptr();\n     let slice_ptr = cs as *const [u8];\n+    #[cfg(not(miri))] // Miri cannot hash pointers\n     assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n \n     let slice_ptr = cs as *mut [u8];\n+    #[cfg(not(miri))] // Miri cannot hash pointers\n     assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n }\n "}, {"sha": "9b76a4af98824a46052bd62c1cf9f552b4e98b90", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -1661,9 +1661,7 @@ fn test_range_step() {\n     assert_eq!((1..21).rev().step_by(5).collect::<Vec<isize>>(), [20, 15, 10, 5]);\n     assert_eq!((1..21).rev().step_by(6).collect::<Vec<isize>>(), [20, 14, 8, 2]);\n     assert_eq!((200..255).step_by(50).collect::<Vec<u8>>(), [200, 250]);\n-    #[cfg(not(miri))] // Miri cannot compare empty slices\n     assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n-    #[cfg(not(miri))] // Miri cannot compare empty slices\n     assert_eq!((200..200).step_by(1).collect::<Vec<isize>>(), []);\n \n     assert_eq!((0..20).step_by(1).size_hint(), (20, Some(20)));"}, {"sha": "956c22c998219ead7c9b65b0eb793c6f2d1b5137", "filename": "src/libcore/tests/num/bignum.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -3,6 +3,7 @@ use core::num::bignum::tests::Big8x3 as Big;\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_from_u64_overflow() {\n     Big::from_u64(0x1000000);\n }\n@@ -19,12 +20,14 @@ fn test_add() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_add_overflow_1() {\n     Big::from_small(1).add(&Big::from_u64(0xffffff));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_add_overflow_2() {\n     Big::from_u64(0xffffff).add(&Big::from_small(1));\n }\n@@ -42,6 +45,7 @@ fn test_add_small() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_add_small_overflow() {\n     Big::from_u64(0xffffff).add_small(1);\n }\n@@ -57,12 +61,14 @@ fn test_sub() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_sub_underflow_1() {\n     Big::from_u64(0x10665).sub(&Big::from_u64(0x10666));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_sub_underflow_2() {\n     Big::from_small(0).sub(&Big::from_u64(0x123456));\n }\n@@ -76,6 +82,7 @@ fn test_mul_small() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_small_overflow() {\n     Big::from_u64(0x800000).mul_small(2);\n }\n@@ -94,12 +101,14 @@ fn test_mul_pow2() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow2_overflow_1() {\n     Big::from_u64(0x1).mul_pow2(24);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow2_overflow_2() {\n     Big::from_u64(0x123).mul_pow2(16);\n }\n@@ -118,12 +127,14 @@ fn test_mul_pow5() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow5_overflow_1() {\n     Big::from_small(1).mul_pow5(12);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow5_overflow_2() {\n     Big::from_small(230).mul_pow5(8);\n }\n@@ -141,12 +152,14 @@ fn test_mul_digits() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_digits_overflow_1() {\n     Big::from_u64(0x800000).mul_digits(&[2]);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_digits_overflow_2() {\n     Big::from_u64(0x1000).mul_digits(&[0, 0x10]);\n }\n@@ -206,6 +219,7 @@ fn test_get_bit() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_get_bit_out_of_range() {\n     Big::from_small(42).get_bit(24);\n }"}, {"sha": "faeaabbf95adacb75d7edd518f11ffdba021a087", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -52,6 +52,7 @@ fn large() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn subnormals() {\n     test_literal!(5e-324);\n     test_literal!(91e-324);\n@@ -63,6 +64,7 @@ fn subnormals() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn infinity() {\n     test_literal!(1e400);\n     test_literal!(1e309);"}, {"sha": "d362c7994d8066e0dd707a027c866ac1bed1f9ee", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))] // Miri does not implement ldexp, which most tests here need\n+\n use std::prelude::v1::*;\n use std::{str, i16, f32, f64, fmt};\n "}, {"sha": "a17c094679ea854623356691df94479bdb17670e", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::convert::{TryFrom, TryInto};\n use core::cmp::PartialEq;\n use core::fmt::Debug;"}, {"sha": "2c53e4832a8cc20086f33b023f3264e40d99c172", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be9a607bd127cdd5cdb3f1f53af725f4eeef98/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=72be9a607bd127cdd5cdb3f1f53af725f4eeef98", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::ptr::*;\n use core::cell::RefCell;\n \n@@ -42,6 +40,7 @@ fn test() {\n }\n \n #[test]\n+#[cfg(not(miri))] // This test performs invalid OOB pointer arithmetic\n fn test_is_null() {\n     let p: *const isize = null();\n     assert!(p.is_null());\n@@ -147,6 +146,7 @@ fn test_as_ref() {\n }\n \n #[test]\n+#[cfg(not(miri))] // This test is UB according to Stacked Borrows\n fn test_as_mut() {\n     unsafe {\n         let p: *mut isize = null_mut();\n@@ -208,6 +208,7 @@ fn test_ptr_addition() {\n }\n \n #[test]\n+#[cfg(not(miri))] // This test performs invalid OOB pointer arithmetic\n fn test_ptr_subtraction() {\n     unsafe {\n         let xs = vec![0,1,2,3,4,5,6,7,8,9];\n@@ -251,6 +252,7 @@ fn test_unsized_nonnull() {\n \n #[test]\n #[allow(warnings)]\n+#[cfg(not(miri))] // Miri cannot hash pointers\n // Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the\n // ABI, or even point to an actual executable code, because the function itself is never invoked.\n #[no_mangle]\n@@ -290,6 +292,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -304,6 +307,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes.\n@@ -320,6 +324,7 @@ fn align_offset_stride1() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn align_offset_weird_strides() {\n     #[repr(packed)]\n     struct A3(u16, u8);"}]}