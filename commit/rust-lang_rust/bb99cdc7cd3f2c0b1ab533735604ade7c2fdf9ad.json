{"sha": "bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "node_id": "C_kwDOAAsO6NoAKGJiOTljZGM3Y2QzZjJjMGIxYWI1MzM3MzU2MDRhZGU3YzJmZGY5YWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-22T00:08:38Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T19:53:09Z"}, "message": "vars are ?", "tree": {"sha": "fc0751a2f046c9a2cc9c0f90ca73733f37da065d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc0751a2f046c9a2cc9c0f90ca73733f37da065d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "html_url": "https://github.com/rust-lang/rust/commit/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7aa20517c80161a2ffe7c0c25fc2e0140c43c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7aa20517c80161a2ffe7c0c25fc2e0140c43c90", "html_url": "https://github.com/rust-lang/rust/commit/a7aa20517c80161a2ffe7c0c25fc2e0140c43c90"}], "stats": {"total": 614, "additions": 307, "deletions": 307}, "files": [{"sha": "b35b514d795dc86b93740819ba19dd20a8e8d69d", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -95,7 +95,7 @@ impl<'tcx> fmt::Debug for ty::FnSig<'tcx> {\n \n impl<'tcx> fmt::Debug for ty::ConstVid<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"_#{}c\", self.index)\n+        write!(f, \"?{}c\", self.index)\n     }\n }\n "}, {"sha": "82dec7d98ad5f5eae6a27ffa608ad71fd4a9f161", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1436,7 +1436,7 @@ pub struct ConstVid<'tcx> {\n rustc_index::newtype_index! {\n     /// A **region** (lifetime) **v**ariable **ID**.\n     #[derive(HashStable)]\n-    #[debug_format = \"'_#{}r\"]\n+    #[debug_format = \"'?{}\"]\n     pub struct RegionVid {}\n }\n "}, {"sha": "95237dda8c28d4bd202d5fd5e66c98b27c3d97af", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -537,7 +537,7 @@ pub struct FloatVarValue(pub FloatTy);\n \n rustc_index::newtype_index! {\n     /// A **ty**pe **v**ariable **ID**.\n-    #[debug_format = \"_#{}t\"]\n+    #[debug_format = \"?{}t\"]\n     pub struct TyVid {}\n }\n \n@@ -739,13 +739,13 @@ impl fmt::Debug for FloatVarValue {\n \n impl fmt::Debug for IntVid {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"_#{}i\", self.index)\n+        write!(f, \"?{}i\", self.index)\n     }\n }\n \n impl fmt::Debug for FloatVid {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"_#{}f\", self.index)\n+        write!(f, \"?{}f\", self.index)\n     }\n }\n "}, {"sha": "be5baf6ee3923fe8f0a34cf91953d2e9674cfdd2", "filename": "tests/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,39 +1,39 @@\n // MIR for `use_x` 0 nll\n \n | Free Region Mapping\n-| '_#0r | Global | ['_#2r, '_#1r, '_#0r, '_#4r, '_#3r]\n-| '_#1r | Local | ['_#1r, '_#4r]\n-| '_#2r | Local | ['_#2r, '_#1r, '_#4r]\n-| '_#3r | Local | ['_#4r, '_#3r]\n-| '_#4r | Local | ['_#4r]\n+| '?0 | Global | ['?2, '?1, '?0, '?4, '?3]\n+| '?1 | Local | ['?1, '?4]\n+| '?2 | Local | ['?2, '?1, '?4]\n+| '?3 | Local | ['?4, '?3]\n+| '?4 | Local | ['?4]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=1], '_#0r, '_#1r, '_#2r, '_#3r, '_#4r}\n-| '_#1r | U0 | {bb0[0..=1], '_#1r}\n-| '_#2r | U0 | {bb0[0..=1], '_#2r}\n-| '_#3r | U0 | {bb0[0..=1], '_#3r}\n-| '_#4r | U0 | {bb0[0..=1], '_#4r}\n-| '_#5r | U0 | {bb0[0..=1], '_#1r}\n-| '_#6r | U0 | {bb0[0..=1], '_#2r}\n-| '_#7r | U0 | {bb0[0..=1], '_#1r}\n-| '_#8r | U0 | {bb0[0..=1], '_#3r}\n+| '?0 | U0 | {bb0[0..=1], '?0, '?1, '?2, '?3, '?4}\n+| '?1 | U0 | {bb0[0..=1], '?1}\n+| '?2 | U0 | {bb0[0..=1], '?2}\n+| '?3 | U0 | {bb0[0..=1], '?3}\n+| '?4 | U0 | {bb0[0..=1], '?4}\n+| '?5 | U0 | {bb0[0..=1], '?1}\n+| '?6 | U0 | {bb0[0..=1], '?2}\n+| '?7 | U0 | {bb0[0..=1], '?1}\n+| '?8 | U0 | {bb0[0..=1], '?3}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=1]}\n-| '_#1r live at {bb0[0..=1]}\n-| '_#2r live at {bb0[0..=1]}\n-| '_#3r live at {bb0[0..=1]}\n-| '_#4r live at {bb0[0..=1]}\n-| '_#1r: '_#5r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:26: 12:27) ($DIR/named_lifetimes_basic.rs:12:26: 12:27 (#0)\n-| '_#1r: '_#7r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:54: 12:55) ($DIR/named_lifetimes_basic.rs:12:54: 12:55 (#0)\n-| '_#2r: '_#6r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:42: 12:43) ($DIR/named_lifetimes_basic.rs:12:42: 12:43 (#0)\n-| '_#3r: '_#8r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:66: 12:67) ($DIR/named_lifetimes_basic.rs:12:66: 12:67 (#0)\n-| '_#5r: '_#1r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:26: 12:27) ($DIR/named_lifetimes_basic.rs:12:26: 12:27 (#0)\n-| '_#6r: '_#2r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:42: 12:43) ($DIR/named_lifetimes_basic.rs:12:42: 12:43 (#0)\n-| '_#7r: '_#1r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:54: 12:55) ($DIR/named_lifetimes_basic.rs:12:54: 12:55 (#0)\n-| '_#8r: '_#3r due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:66: 12:67) ($DIR/named_lifetimes_basic.rs:12:66: 12:67 (#0)\n+| '?0 live at {bb0[0..=1]}\n+| '?1 live at {bb0[0..=1]}\n+| '?2 live at {bb0[0..=1]}\n+| '?3 live at {bb0[0..=1]}\n+| '?4 live at {bb0[0..=1]}\n+| '?1: '?5 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:26: 12:27) ($DIR/named_lifetimes_basic.rs:12:26: 12:27 (#0)\n+| '?1: '?7 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:54: 12:55) ($DIR/named_lifetimes_basic.rs:12:54: 12:55 (#0)\n+| '?2: '?6 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:42: 12:43) ($DIR/named_lifetimes_basic.rs:12:42: 12:43 (#0)\n+| '?3: '?8 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:66: 12:67) ($DIR/named_lifetimes_basic.rs:12:66: 12:67 (#0)\n+| '?5: '?1 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:26: 12:27) ($DIR/named_lifetimes_basic.rs:12:26: 12:27 (#0)\n+| '?6: '?2 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:42: 12:43) ($DIR/named_lifetimes_basic.rs:12:42: 12:43 (#0)\n+| '?7: '?1 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:54: 12:55) ($DIR/named_lifetimes_basic.rs:12:54: 12:55 (#0)\n+| '?8: '?3 due to BoringNoLocation at All($DIR/named_lifetimes_basic.rs:12:66: 12:67) ($DIR/named_lifetimes_basic.rs:12:66: 12:67 (#0)\n |\n-fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n+fn use_x(_1: &'?5 mut i32, _2: &'?6 u32, _3: &'?7 u32, _4: &'?8 u32) -> bool {\n     debug w => _1;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:26: +0:27\n     debug x => _2;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:42: +0:43\n     debug y => _3;                       // in scope 0 at $DIR/named_lifetimes_basic.rs:+0:54: +0:55"}, {"sha": "71bdfcc5c499104aaaf37fd6310315d0322b0d2c", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,24 +1,24 @@\n // MIR for `main` 0 nll\n \n | Free Region Mapping\n-| '_#0r | Global | ['_#0r, '_#1r]\n-| '_#1r | Local | ['_#1r]\n+| '?0 | Global | ['?0, '?1]\n+| '?1 | Local | ['?1]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n-| '_#2r | U0 | {bb1[0..=7], bb2[0..=2]}\n-| '_#3r | U0 | {bb1[1..=7], bb2[0..=2]}\n-| '_#4r | U0 | {bb1[4..=7], bb2[0..=2]}\n+| '?0 | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '?0, '?1}\n+| '?1 | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '?1}\n+| '?2 | U0 | {bb1[0..=7], bb2[0..=2]}\n+| '?3 | U0 | {bb1[1..=7], bb2[0..=2]}\n+| '?4 | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#2r live at {bb1[0]}\n-| '_#3r live at {bb1[1..=3]}\n-| '_#4r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region_subtyping_basic.rs:18:13: 18:18 (#0)\n-| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region_subtyping_basic.rs:19:13: 19:14 (#0)\n+| '?0 live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '?1 live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '?2 live at {bb1[0]}\n+| '?3 live at {bb1[1..=3]}\n+| '?4 live at {bb1[4..=7], bb2[0..=2]}\n+| '?2: '?3 due to Assignment at Single(bb1[0]) ($DIR/region_subtyping_basic.rs:18:13: 18:18 (#0)\n+| '?3: '?4 due to Assignment at Single(bb1[3]) ($DIR/region_subtyping_basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n@@ -32,10 +32,10 @@ fn main() -> () {\n     let _10: bool;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n     scope 1 {\n         debug v => _1;                   // in scope 1 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n-        let _2: &'_#3r usize;            // in scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+        let _2: &'?3 usize;              // in scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n         scope 2 {\n             debug p => _2;               // in scope 2 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n-            let _6: &'_#4r usize;        // in scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n+            let _6: &'?4 usize;          // in scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             scope 3 {\n                 debug q => _6;           // in scope 3 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             }\n@@ -55,7 +55,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region_subtyping_basic.rs:+2:13: +2:18\n+        _2 = &'?2 _1[_3];                // bb1[0]: scope 1 at $DIR/region_subtyping_basic.rs:+2:13: +2:18\n         FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region_subtyping_basic.rs:+3:13: +3:14"}, {"sha": "9fa8609b751a2a972ff895c06bc7152336878fa6", "filename": "tests/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,24 +1,24 @@\n // MIR for `main` 0 nll\n \n | Free Region Mapping\n-| '_#0r | Global | ['_#0r, '_#1r]\n-| '_#1r | Local | ['_#1r]\n+| '?0 | Global | ['?0, '?1]\n+| '?1 | Local | ['?1]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n-| '_#2r | U0 | {bb1[0..=7], bb2[0..=2]}\n-| '_#3r | U0 | {bb1[1..=7], bb2[0..=2]}\n-| '_#4r | U0 | {bb1[4..=7], bb2[0..=2]}\n+| '?0 | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '?0, '?1}\n+| '?1 | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '?1}\n+| '?2 | U0 | {bb1[0..=7], bb2[0..=2]}\n+| '?3 | U0 | {bb1[1..=7], bb2[0..=2]}\n+| '?4 | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#2r live at {bb1[0]}\n-| '_#3r live at {bb1[1..=3]}\n-| '_#4r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region_subtyping_basic.rs:18:13: 18:18 (#0)\n-| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region_subtyping_basic.rs:19:13: 19:14 (#0)\n+| '?0 live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '?1 live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n+| '?2 live at {bb1[0]}\n+| '?3 live at {bb1[1..=3]}\n+| '?4 live at {bb1[4..=7], bb2[0..=2]}\n+| '?2: '?3 due to Assignment at Single(bb1[0]) ($DIR/region_subtyping_basic.rs:18:13: 18:18 (#0)\n+| '?3: '?4 due to Assignment at Single(bb1[3]) ($DIR/region_subtyping_basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region_subtyping_basic.rs:+0:11: +0:11\n@@ -32,10 +32,10 @@ fn main() -> () {\n     let _10: bool;                       // in scope 0 at $DIR/region_subtyping_basic.rs:+7:9: +7:18\n     scope 1 {\n         debug v => _1;                   // in scope 1 at $DIR/region_subtyping_basic.rs:+1:9: +1:14\n-        let _2: &'_#3r usize;            // in scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n+        let _2: &'?3 usize;              // in scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n         scope 2 {\n             debug p => _2;               // in scope 2 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n-            let _6: &'_#4r usize;        // in scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n+            let _6: &'?4 usize;          // in scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             scope 3 {\n                 debug q => _6;           // in scope 3 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n             }\n@@ -55,7 +55,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region_subtyping_basic.rs:+2:13: +2:18\n+        _2 = &'?2 _1[_3];                // bb1[0]: scope 1 at $DIR/region_subtyping_basic.rs:+2:13: +2:18\n         FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region_subtyping_basic.rs:+2:9: +2:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region_subtyping_basic.rs:+3:9: +3:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region_subtyping_basic.rs:+3:13: +3:14"}, {"sha": "5bb1a7bf0c937f5689b996b44799193cd8002fd4", "filename": "tests/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,21 +1,21 @@\n // MIR for `main` 0 nll\n \n | Free Region Mapping\n-| '_#0r | Global | ['_#0r, '_#1r]\n-| '_#1r | Local | ['_#1r]\n+| '?0 | Global | ['?0, '?1]\n+| '?1 | Local | ['?1]\n |\n | Inferred Region Values\n-| '_#0r | U0 | {bb0[0..=22], '_#0r, '_#1r}\n-| '_#1r | U0 | {bb0[0..=22], '_#1r}\n-| '_#2r | U0 | {bb0[10..=11]}\n-| '_#3r | U0 | {bb0[11]}\n+| '?0 | U0 | {bb0[0..=22], '?0, '?1}\n+| '?1 | U0 | {bb0[0..=22], '?1}\n+| '?2 | U0 | {bb0[10..=11]}\n+| '?3 | U0 | {bb0[11]}\n |\n | Inference Constraints\n-| '_#0r live at {bb0[0..=22]}\n-| '_#1r live at {bb0[0..=22]}\n-| '_#2r live at {bb0[10]}\n-| '_#3r live at {bb0[11]}\n-| '_#2r: '_#3r due to Assignment at Single(bb0[10]) ($DIR/storage_ranges.rs:6:17: 6:25 (#0)\n+| '?0 live at {bb0[0..=22]}\n+| '?1 live at {bb0[0..=22]}\n+| '?2 live at {bb0[10]}\n+| '?3 live at {bb0[11]}\n+| '?2: '?3 due to Assignment at Single(bb0[10]) ($DIR/storage_ranges.rs:6:17: 6:25 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/storage_ranges.rs:+0:11: +0:11"}, {"sha": "ad67899e6da0885db868d683844c90fbf5e5c213", "filename": "tests/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -77,7 +77,7 @@ LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-note: required for `str` to implement `Foo<'_#0r, '_#1r, u8>`\n+note: required for `str` to implement `Foo<'?0, '?1, u8>`\n   --> $DIR/substs-ppaux.rs:11:17\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}"}, {"sha": "381aadb1564cc1c95f7a40f31f7f8df2363175ee", "filename": "tests/ui/closures/binder/nested-closures-regions.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fbinder%2Fnested-closures-regions.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -9,11 +9,11 @@ LL |     for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n                extern \"rust-call\" fn((&(),)),\n                (),\n            ]\n-   = note: late-bound region is '_#4r\n-   = note: late-bound region is '_#2r\n+   = note: late-bound region is '?4\n+   = note: late-bound region is '?2\n    = note: number of external vids: 3\n-   = note: where '_#1r: '_#2r\n-   = note: where '_#2r: '_#1r\n+   = note: where '?1: '?2\n+   = note: where '?2: '?1\n \n note: no external requirements\n   --> $DIR/nested-closures-regions.rs:8:5\n@@ -26,7 +26,7 @@ LL |     for<'a> || -> () { for<'c> |_: &'a ()| -> () {}; };\n                extern \"rust-call\" fn(()),\n                (),\n            ]\n-   = note: late-bound region is '_#2r\n+   = note: late-bound region is '?2\n \n note: no external requirements\n   --> $DIR/nested-closures-regions.rs:7:1"}, {"sha": "381bb0c084a2212d905c8d73847539096cf6a29a", "filename": "tests/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#16t, extern \"rust-call\" fn(()), _#15t]]`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, ?16t, extern \"rust-call\" fn(()), ?15t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "9a1f18fa8550d845810a4e16ddbc81e05a64d351", "filename": "tests/ui/closures/print/closure-print-generic-verbose-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `c`\n   --> $DIR/closure-print-generic-verbose-1.rs:17:5\n    |\n LL |     let c = to_fn_once(move|| {\n-   |         - move occurs because `c` has type `[f<T>::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern \"rust-call\" fn(()) upvar_tys=(Foo<&'_#9r str>, T)]`, which does not implement the `Copy` trait\n+   |         - move occurs because `c` has type `[f<T>::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern \"rust-call\" fn(()) upvar_tys=(Foo<&'?9 str>, T)]`, which does not implement the `Copy` trait\n ...\n LL |     c();\n    |     --- `c` moved due to this call"}, {"sha": "2a4d16c48dc2e7e7706535f3464a6ad50b3e4db7", "filename": "tests/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#16t, extern \"rust-call\" fn(()), _#15t]]`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, ?16t, extern \"rust-call\" fn(()), ?15t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "9e219435e5ce0b87c2b8c8c3ebedd0c06e5e2040", "filename": "tests/ui/closures/print/closure-print-verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fprint%2Fclosure-print-verbose.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -7,7 +7,7 @@ LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |              expected due to this\n    |\n    = note: expected fn pointer `fn(u8) -> u8`\n-                 found closure `[main::{closure#0} closure_substs=(unavailable) substs=[i8, extern \"rust-call\" fn((u8,)) -> u8, _#6t]]`\n+                 found closure `[main::{closure#0} closure_substs=(unavailable) substs=[i8, extern \"rust-call\" fn((u8,)) -> u8, ?6t]]`\n note: closures can only be coerced to `fn` types if they do not capture any variables\n   --> $DIR/closure-print-verbose.rs:10:39\n    |"}, {"sha": "84e24d1a3f5f9589026970d80e998b5681e81417", "filename": "tests/ui/const-generics/occurs-check/unused-substs-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-2.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,9 +1,9 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n-// The goal is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n+// The goal is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(?1t)` subst.\n //\n-// If we are then able to infer `ty::Infer(TyVar(_#1t) := Ty<ct>` we introduced an\n+// If we are then able to infer `ty::Infer(TyVar(?1t) := Ty<ct>` we introduced an\n // artificial inference cycle.\n struct Foo<const N: usize>;\n \n@@ -20,8 +20,8 @@ impl<T> Bind<T> for Foo<{ 6 + 1 }> {\n \n fn main() {\n     let (mut t, foo) = Foo::bind();\n-    // `t` is `ty::Infer(TyVar(_#1t))`\n-    // `foo` contains `ty::Infer(TyVar(_#1t))` in its substs\n+    // `t` is `ty::Infer(TyVar(?1t))`\n+    // `foo` contains `ty::Infer(TyVar(?1t))` in its substs\n     t = foo;\n     //~^ ERROR mismatched types\n     //~| NOTE cyclic type"}, {"sha": "6db18d587d3e2f43404758a2624ddead932599b4", "filename": "tests/ui/const-generics/occurs-check/unused-substs-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-3.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,18 +1,18 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n-// The goal is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(_#1t)` subst.\n+// The goal is to get an unevaluated const `ct` with a `Ty::Infer(TyVar(?1t)` subst.\n //\n-// If we are then able to infer `ty::Infer(TyVar(_#1t) := Ty<ct>` we introduced an\n+// If we are then able to infer `ty::Infer(TyVar(?1t) := Ty<ct>` we introduced an\n // artificial inference cycle.\n fn bind<T>() -> (T, [u8; 6 + 1]) {\n     todo!()\n }\n \n fn main() {\n     let (mut t, foo) = bind();\n-    // `t` is `ty::Infer(TyVar(_#1t))`\n-    // `foo` contains `ty::Infer(TyVar(_#1t))` in its substs\n+    // `t` is `ty::Infer(TyVar(?1t))`\n+    // `foo` contains `ty::Infer(TyVar(?1t))` in its substs\n     t = foo;\n     //~^ ERROR mismatched types\n     //~| NOTE cyclic type"}, {"sha": "fbed78ff28047ef04a87ca0db4bc2d193ad0b455", "filename": "tests/ui/generator/issue-57084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fgenerator%2Fissue-57084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fgenerator%2Fissue-57084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fissue-57084.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,5 +1,5 @@\n // This issue reproduces an ICE on compile (E.g. fails on 2018-12-19 nightly).\n-// \"cannot relate bound region: ReLateBound(DebruijnIndex(1), BrAnon(1)) <= '_#1r\"\n+// \"cannot relate bound region: ReLateBound(DebruijnIndex(1), BrAnon(1)) <= '?1\"\n // run-pass\n // edition:2018\n #![feature(generators,generator_trait)]"}, {"sha": "8638fc2e775787b057dcb03e340870f3032c937a", "filename": "tests/ui/impl-trait/wf-eval-order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fimpl-trait%2Fwf-eval-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fimpl-trait%2Fwf-eval-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fwf-eval-order.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -31,9 +31,9 @@ fn main() {\n     //\n     // - `wf(typeof(x))` because we use a projection candidate.\n     // - `<i32 as B>::V: Clone` because that's a bound on the trait.\n-    // - `<i32 as B>::V` normalizes to `_#1` where `<i32 as A>::U == _#1`\n+    // - `<i32 as B>::V` normalizes to `?1t` where `<i32 as A>::U == ?1t`\n     //\n-    // This all works if we evaluate `<i32 as A>::U == _#1` before\n+    // This all works if we evaluate `<i32 as A>::U == ?1t` before\n     // `<i32 as B>::V`, but we previously had the opposite order.\n     let x = hide(X(0));\n }"}, {"sha": "61233fd84077c94daac6f1dae7c03effccded4c2", "filename": "tests/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -17,7 +17,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                       -  -  ^^^^^^ assignment requires that `'1` must outlive `'2`\n    |                                       |  |\n    |                                       |  has type `&'1 i32`\n-   |                                       has type `&'_#2r mut &'2 i32`\n+   |                                       has type `&'?2 mut &'2 i32`\n \n note: no external requirements\n   --> $DIR/escape-argument-callee.rs:20:1"}, {"sha": "c00a31ef8e15a76a88a5ccee1112e2c9e9c428b3", "filename": "tests/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -7,10 +7,10 @@ LL |             let mut closure1 = || p = &y;\n    = note: defining type: test::{closure#0}::{closure#0} with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n-               (&'_#1r mut &'_#2r i32, &'_#3r i32),\n+               (&'?1 mut &'?2 i32, &'?3 i32),\n            ]\n    = note: number of external vids: 4\n-   = note: where '_#3r: '_#2r\n+   = note: where '?3: '?2\n \n note: external requirements\n   --> $DIR/escape-upvar-nested.rs:20:27\n@@ -21,10 +21,10 @@ LL |         let mut closure = || {\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n-               (&'_#1r mut &'_#2r i32, &'_#3r i32),\n+               (&'?1 mut &'?2 i32, &'?3 i32),\n            ]\n    = note: number of external vids: 4\n-   = note: where '_#3r: '_#2r\n+   = note: where '?3: '?2\n \n note: no external requirements\n   --> $DIR/escape-upvar-nested.rs:13:1"}, {"sha": "2d67e6e7d722a165894881a1b45d0d666dd71380", "filename": "tests/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -7,10 +7,10 @@ LL |         let mut closure = || p = &y;\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n-               (&'_#1r mut &'_#2r i32, &'_#3r i32),\n+               (&'?1 mut &'?2 i32, &'?3 i32),\n            ]\n    = note: number of external vids: 4\n-   = note: where '_#3r: '_#2r\n+   = note: where '?3: '?2\n \n note: no external requirements\n   --> $DIR/escape-upvar-ref.rs:17:1"}, {"sha": "ba42576d403461c319f95a2abae8cbf4e3df38b2", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,20 +6,20 @@ LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&'?2 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'?3 u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#4r\n-   = note: late-bound region is '_#5r\n-   = note: late-bound region is '_#6r\n+   = note: late-bound region is '?4\n+   = note: late-bound region is '?5\n+   = note: late-bound region is '?6\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:46:13\n    |\n LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n-   |          ----------              ---------- has type `Cell<&'2 &'_#3r u32>`\n+   |          ----------              ---------- has type `Cell<&'2 &'?3 u32>`\n    |          |\n-   |          has type `Cell<&'_#1r &'1 u32>`\n+   |          has type `Cell<&'?1 &'1 u32>`\n ...\n LL |             demand_y(x, y, p)\n    |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "9dd6e02081fafc83a9c3f01d75dfc9f730c3b2df", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,13 +6,13 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'?2 u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n-   = note: late-bound region is '_#4r\n+   = note: late-bound region is '?3\n+   = note: late-bound region is '?4\n    = note: number of external vids: 5\n-   = note: where '_#1r: '_#2r\n+   = note: where '?1: '?2\n \n note: no external requirements\n   --> $DIR/propagate-approximated-ref.rs:42:1"}, {"sha": "e2f5576d3953f617d6f78addda87cbd08feda1d6", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,7 +6,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n-               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'?1 u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n \n@@ -36,11 +36,11 @@ LL |     foo(cell, |cell_a, cell_x| {\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n-               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'?1 u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n    = note: number of external vids: 2\n-   = note: where '_#1r: '_#0r\n+   = note: where '?1: '?0\n \n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1"}, {"sha": "383fb471ad3afff0341084c4cdd62095745b0acb", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,13 +6,13 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#2r\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?2\n+   = note: late-bound region is '?3\n    = note: number of external vids: 4\n-   = note: where '_#1r: '_#0r\n+   = note: where '?1: '?0\n \n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:31:1\n@@ -40,7 +40,7 @@ LL | |     });\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type `Cell<&'_#9r u32>`, which makes the generic argument `&'_#9r u32` invariant\n+   = note: requirement occurs because of the type `Cell<&'?9 u32>`, which makes the generic argument `&'?9 u32` invariant\n    = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "ac346c0b110ae067fa78a02c0e856a001dfc6a62", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,13 +6,13 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&'?2 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n-   = note: late-bound region is '_#4r\n+   = note: late-bound region is '?3\n+   = note: late-bound region is '?4\n    = note: number of external vids: 5\n-   = note: where '_#1r: '_#0r\n+   = note: where '?1: '?0\n \n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:34:1\n@@ -40,7 +40,7 @@ LL | |     });\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type `Cell<&'_#10r u32>`, which makes the generic argument `&'_#10r u32` invariant\n+   = note: requirement occurs because of the type `Cell<&'?10 u32>`, which makes the generic argument `&'?10 u32` invariant\n    = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "b217ae19773ab0ad8e58076aa6140d58ae6ef351", "filename": "tests/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,13 +6,13 @@ LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'?2 u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n-   = note: late-bound region is '_#4r\n+   = note: late-bound region is '?3\n+   = note: late-bound region is '?4\n    = note: number of external vids: 5\n-   = note: where '_#1r: '_#2r\n+   = note: where '?1: '?2\n \n note: no external requirements\n   --> $DIR/propagate-approximated-val.rs:35:1"}, {"sha": "f31478b6d1cfb74936a6e1d08dc7fb967e86bcb7", "filename": "tests/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,12 +6,12 @@ LL |         |_outlives1, _outlives2, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'?2 u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?3\n    = note: number of external vids: 4\n-   = note: where '_#1r: '_#2r\n+   = note: where '?1: '?2\n \n note: no external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:39:1"}, {"sha": "1509ade87fa09af5ffaef32cbefbfd4c71dbf1bc", "filename": "tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,19 +6,19 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'?1 u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#2r\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?2\n+   = note: late-bound region is '?3\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:37:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                                ---------  - has type `&'_#7r Cell<&'1 u32>`\n+   |                                                ---------  - has type `&'?7 Cell<&'1 u32>`\n    |                                                |\n-   |                                                has type `&'_#5r Cell<&'2 &'_#1r u32>`\n+   |                                                has type `&'?5 Cell<&'2 &'?1 u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "c85a9872e212d26225d93308dc78cc7e4495ad33", "filename": "tests/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,19 +6,19 @@ LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) &'?1 u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) &'?2 u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 4, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) u32>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 5, kind: BrAnon(None) }) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BoundRegion { var: 3, kind: BrAnon(None) }) u32>)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n-   = note: late-bound region is '_#4r\n+   = note: late-bound region is '?3\n+   = note: late-bound region is '?4\n \n error: lifetime may not live long enough\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:41:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                                ----------  ---------- has type `&'_#8r Cell<&'2 &'_#2r u32>`\n+   |                                                ----------  ---------- has type `&'?8 Cell<&'2 &'?2 u32>`\n    |                                                |\n-   |                                                has type `&'_#6r Cell<&'1 &'_#1r u32>`\n+   |                                                has type `&'?6 Cell<&'1 &'?1 u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "05e274ab220323c6edfa3977eac6db046640be0b", "filename": "tests/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,13 +4,13 @@ note: external requirements\n LL |     establish_relationships(value, |value| {\n    |                                    ^^^^^^^\n    |\n-   = note: defining type: supply::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: supply::<'?1, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((T,)),\n                (),\n            ]\n    = note: number of external vids: 2\n-   = note: where T: '_#1r\n+   = note: where T: '?1\n \n note: no external requirements\n   --> $DIR/propagate-from-trait-match.rs:28:1\n@@ -20,7 +20,7 @@ LL | | where\n LL | |     T: Trait<'a>,\n    | |_________________^\n    |\n-   = note: defining type: supply::<'_#1r, T>\n+   = note: defining type: supply::<'?1, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:43:9"}, {"sha": "f4aca69e19fd9a982f2d1e9ad030fd1126ef5d91", "filename": "tests/ui/nll/member-constraints/min-choice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,5 +1,5 @@\n-// Assuming that the hidden type in these tests is `&'_#15r u8`,\n-// we have a member constraint: `'_#15r member ['static, 'a, 'b, 'c]`.\n+// Assuming that the hidden type in these tests is `&'?15 u8`,\n+// we have a member constraint: `'?15 member ['static, 'a, 'b, 'c]`.\n //\n // Make sure we pick up the minimum non-ambiguous region among them.\n // We will have to exclude `['b, 'c]` because they're incomparable,"}, {"sha": "ceb417f84f3df59aaa41278807b86c0d89635121", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -5,9 +5,9 @@\n trait Cap<'a> {}\n impl<T> Cap<'_> for T {}\n \n-// Assuming the hidden type is `[&'_#15r u8; 1]`, we have two distinct member constraints:\n-// - '_#15r member ['static, 'a, 'b] // from outer impl-trait\n-// - '_#15r member ['static, 'a, 'b] // from inner impl-trait\n+// Assuming the hidden type is `[&'?15 u8; 1]`, we have two distinct member constraints:\n+// - '?15 member ['static, 'a, 'b] // from outer impl-trait\n+// - '?15 member ['static, 'a, 'b] // from inner impl-trait\n // To satisfy both we can choose 'a or 'b, so it's a failure due to ambiguity.\n fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n where"}, {"sha": "4be0f02acf2a2b4762a7235ec398d1e4575a00d5", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-pass.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -5,9 +5,9 @@\n trait Cap<'a> {}\n impl<T> Cap<'_> for T {}\n \n-// Assuming the hidden type is `[&'_#15r u8; 1]`, we have two distinct member constraints:\n-// - '_#15r member ['static, 'a, 'b] // from outer impl-trait\n-// - '_#15r member ['static, 'a]     // from inner impl-trait\n+// Assuming the hidden type is `[&'?15 u8; 1]`, we have two distinct member constraints:\n+// - '?15 member ['static, 'a, 'b] // from outer impl-trait\n+// - '?15 member ['static, 'a]     // from inner impl-trait\n // To satisfy both we can only choose 'a.\n fn pass_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a>> + Cap<'b>\n where"}, {"sha": "4eefb180ee506e45f45ae8dfeb549287eb58c9e6", "filename": "tests/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,13 +4,13 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^\n    |\n-   = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '?2)>,\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where <T as std::iter::Iterator>::Item: '_#2r\n+   = note: where <T as std::iter::Iterator>::Item: '?2\n \n note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:21:1\n@@ -20,7 +20,7 @@ LL | | where\n LL | |     T: Iterator,\n    | |________________^\n    |\n-   = note: defining type: no_region::<'_#1r, T>\n+   = note: defining type: no_region::<'?1, T>\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:25:31\n@@ -37,13 +37,13 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^\n    |\n-   = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: correct_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '?2)>,\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where <T as std::iter::Iterator>::Item: '_#2r\n+   = note: where <T as std::iter::Iterator>::Item: '?2\n \n note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:30:1\n@@ -53,21 +53,21 @@ LL | | where\n LL | |     T: 'a + Iterator,\n    | |_____________________^\n    |\n-   = note: defining type: correct_region::<'_#1r, T>\n+   = note: defining type: correct_region::<'?1, T>\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^\n    |\n-   = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: wrong_region::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '?3)>,\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as std::iter::Iterator>::Item: '_#3r\n+   = note: where <T as std::iter::Iterator>::Item: '?3\n \n note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:38:1\n@@ -77,7 +77,7 @@ LL | | where\n LL | |     T: 'b + Iterator,\n    | |_____________________^\n    |\n-   = note: defining type: wrong_region::<'_#1r, '_#2r, T>\n+   = note: defining type: wrong_region::<'?1, '?2, T>\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-closure.rs:42:31\n@@ -94,13 +94,13 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^\n    |\n-   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: outlives_region::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '?3)>,\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as std::iter::Iterator>::Item: '_#3r\n+   = note: where <T as std::iter::Iterator>::Item: '?3\n \n note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:47:1\n@@ -111,7 +111,7 @@ LL | |     T: 'b + Iterator,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n+   = note: defining type: outlives_region::<'?1, '?2, T>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "986c2bd2182b45df535028681c8c0fbd9d3077ed", "filename": "tests/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,15 +4,15 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_late::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?3\n    = note: number of external vids: 4\n-   = note: where T: '_#2r\n-   = note: where '_#1r: '_#2r\n+   = note: where T: '?2\n+   = note: where '?1: '?2\n \n note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:41:1\n@@ -22,7 +22,7 @@ LL | | where\n LL | |     T: Anything<'b>,\n    | |____________________^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>\n+   = note: defining type: no_relationships_late::<'?1, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -54,14 +54,14 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_early::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where T: '_#3r\n-   = note: where '_#2r: '_#3r\n+   = note: where T: '?3\n+   = note: where '?2: '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:51:1\n@@ -72,7 +72,7 @@ LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n    | |___________^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n+   = note: defining type: no_relationships_early::<'?1, '?2, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39\n@@ -104,13 +104,13 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: projection_outlives::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<'_#2r>>::AssocType: '_#3r\n+   = note: where <T as Anything<'?2>>::AssocType: '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:62:1\n@@ -121,22 +121,22 @@ LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n    | |_____________________^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n+   = note: defining type: projection_outlives::<'?1, '?2, T>\n \n note: external requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: elements_outlive::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where T: '_#3r\n-   = note: where '_#2r: '_#3r\n+   = note: where T: '?3\n+   = note: where '?2: '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:74:1\n@@ -148,7 +148,7 @@ LL | |     T: 'a,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n+   = note: defining type: elements_outlive::<'?1, '?2, T>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "25cc60d814159f5ddc36105a2d856156281d2496", "filename": "tests/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,14 +4,14 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_late::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?3\n    = note: number of external vids: 4\n-   = note: where '_#1r: '_#2r\n+   = note: where '?1: '?2\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:33:1\n@@ -21,7 +21,7 @@ LL | | where\n LL | |     T: Anything<'b>,\n    | |____________________^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>\n+   = note: defining type: no_relationships_late::<'?1, T>\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:39\n@@ -42,13 +42,13 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_early::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where '_#2r: '_#3r\n+   = note: where '?2: '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:42:1\n@@ -59,7 +59,7 @@ LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n    | |___________^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n+   = note: defining type: no_relationships_early::<'?1, '?2, T>\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:39\n@@ -80,13 +80,13 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: projection_outlives::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<'_#2r>>::AssocType: '_#3r\n+   = note: where <T as Anything<'?2>>::AssocType: '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:52:1\n@@ -97,21 +97,21 @@ LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n    | |_____________________^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n+   = note: defining type: projection_outlives::<'?1, '?2, T>\n \n note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: elements_outlive::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where '_#2r: '_#3r\n+   = note: where '?2: '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:64:1\n@@ -122,21 +122,21 @@ LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n+   = note: defining type: elements_outlive::<'?1, '?2, T>\n \n note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: one_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where '_#1r: '_#2r\n+   = note: where '?1: '?2\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:73:1\n@@ -146,7 +146,7 @@ LL | | where\n LL | |     T: Anything<'a>,\n    | |____________________^\n    |\n-   = note: defining type: one_region::<'_#1r, T>\n+   = note: defining type: one_region::<'?1, T>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a092d7b8497a79d339e3ee4750886d4661814aa", "filename": "tests/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,12 +4,12 @@ note: no external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_late::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?3\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:32:1\n@@ -19,17 +19,17 @@ LL | | where\n LL | |     T: Anything<'b>,\n    | |____________________^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>\n+   = note: defining type: no_relationships_late::<'?1, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_early::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n \n@@ -42,17 +42,17 @@ LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n    | |___________^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n+   = note: defining type: no_relationships_early::<'?1, '?2, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: projection_outlives::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n \n@@ -65,17 +65,17 @@ LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n    | |_____________________^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n+   = note: defining type: projection_outlives::<'?1, '?2, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: elements_outlive::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n \n@@ -88,17 +88,17 @@ LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n+   = note: defining type: elements_outlive::<'?1, '?2, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: one_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n \n@@ -110,5 +110,5 @@ LL | | where\n LL | |     T: Anything<'a>,\n    | |____________________^\n    |\n-   = note: defining type: one_region::<'_#1r, T>\n+   = note: defining type: one_region::<'?1, T>\n "}, {"sha": "51283aa88289fc87e93802e00b9d1f4af9c22cd7", "filename": "tests/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,14 +4,14 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_late::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#4r\n+   = note: late-bound region is '?4\n    = note: number of external vids: 5\n-   = note: where <T as Anything<'_#1r, '_#2r>>::AssocType: '_#3r\n+   = note: where <T as Anything<'?1, '?2>>::AssocType: '?3\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:34:1\n@@ -21,30 +21,30 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n    | |________________________^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n+   = note: defining type: no_relationships_late::<'?1, '?2, T>\n \n-error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'?5, '?6>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: 'a`...\n-   = note: ...so that the type `<T as Anything<'_#5r, '_#6r>>::AssocType` will meet its required lifetime bounds\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'?5, '?6>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<'?5, '?6>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_relationships_early::<'?1, '?2, '?3, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?4 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n+   = note: where <T as Anything<'?2, '?3>>::AssocType: '?4\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:43:1\n@@ -55,30 +55,30 @@ LL | |     T: Anything<'b, 'c>,\n LL | |     'a: 'a,\n    | |___________^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n+   = note: defining type: no_relationships_early::<'?1, '?2, '?3, T>\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'?6, '?7>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: 'a`...\n-   = note: ...so that the type `<T as Anything<'_#6r, '_#7r>>::AssocType` will meet its required lifetime bounds\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'?6, '?7>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<'?6, '?7>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n+   = note: defining type: projection_outlives::<'?1, '?2, '?3, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?4 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n+   = note: where <T as Anything<'?2, '?3>>::AssocType: '?4\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:53:1\n@@ -89,21 +89,21 @@ LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n    | |_____________________^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>\n+   = note: defining type: projection_outlives::<'?1, '?2, '?3, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n+   = note: defining type: elements_outlive1::<'?1, '?2, '?3, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?4 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n+   = note: where <T as Anything<'?2, '?3>>::AssocType: '?4\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n@@ -114,21 +114,21 @@ LL | |     T: Anything<'b, 'c>,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>\n+   = note: defining type: elements_outlive1::<'?1, '?2, '?3, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n+   = note: defining type: elements_outlive2::<'?1, '?2, '?3, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?4 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<'_#2r, '_#3r>>::AssocType: '_#4r\n+   = note: where <T as Anything<'?2, '?3>>::AssocType: '?4\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:74:1\n@@ -139,22 +139,22 @@ LL | |     T: Anything<'b, 'c>,\n LL | |     'c: 'a,\n    | |___________^\n    |\n-   = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>\n+   = note: defining type: elements_outlive2::<'?1, '?2, '?3, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: two_regions::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: two_regions::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?3\n    = note: number of external vids: 4\n-   = note: where <T as Anything<'_#1r, '_#1r>>::AssocType: '_#2r\n+   = note: where <T as Anything<'?1, '?1>>::AssocType: '?2\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:83:1\n@@ -164,7 +164,7 @@ LL | | where\n LL | |     T: Anything<'b, 'b>,\n    | |________________________^\n    |\n-   = note: defining type: two_regions::<'_#1r, T>\n+   = note: defining type: two_regions::<'?1, T>\n \n error: lifetime may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:5\n@@ -178,7 +178,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n    |\n    = help: consider adding the following bound: `'b: 'a`\n-   = note: requirement occurs because of the type `Cell<&'_#8r ()>`, which makes the generic argument `&'_#8r ()` invariant\n+   = note: requirement occurs because of the type `Cell<&'?8 ()>`, which makes the generic argument `&'?8 ()` invariant\n    = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n \n@@ -188,13 +188,13 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: two_regions_outlive::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<'_#2r, '_#2r>>::AssocType: '_#3r\n+   = note: where <T as Anything<'?2, '?2>>::AssocType: '?3\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:92:1\n@@ -205,21 +205,21 @@ LL | |     T: Anything<'b, 'b>,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>\n+   = note: defining type: two_regions_outlive::<'?1, '?2, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^\n    |\n-   = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: one_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where <T as Anything<'_#1r, '_#1r>>::AssocType: '_#2r\n+   = note: where <T as Anything<'?1, '?1>>::AssocType: '?2\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:101:1\n@@ -229,7 +229,7 @@ LL | | where\n LL | |     T: Anything<'a, 'a>,\n    | |________________________^\n    |\n-   = note: defining type: one_region::<'_#1r, T>\n+   = note: defining type: one_region::<'?1, T>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "04616f9b7028b1b2d8669eec7c1fe8ca5d329fdf", "filename": "tests/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,11 +6,11 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n                (),\n            ]\n    = note: number of external vids: 2\n-   = note: where T: '_#1r\n+   = note: where T: '?1\n \n note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:22:1\n@@ -28,12 +28,12 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n-               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n+               for<Region(BrAnon(None)), Region(BrAnon(None))> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'?1 &ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }) ()>>, &ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }) T)),\n                (),\n            ]\n-   = note: late-bound region is '_#2r\n+   = note: late-bound region is '?2\n    = note: number of external vids: 3\n-   = note: where T: '_#1r\n+   = note: where T: '?1\n \n note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:28:1"}, {"sha": "72b18c16732593446b4ee5518e8115be20bb8b3e", "filename": "tests/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -19,8 +19,8 @@ where\n     // Here, the closure winds up being required to prove that `T:\n     // 'a`.  In principle, it could know that, except that it is\n     // type-checked in a fully generic way, and hence it winds up with\n-    // a propagated requirement that `T: '_#2`, where `'_#2` appears\n-    // in the return type. The caller makes the mapping from `'_#2` to\n+    // a propagated requirement that `T: '?2`, where `'?2` appears\n+    // in the return type. The caller makes the mapping from `'?2` to\n     // `'a` (and subsequently reports an error).\n \n     with_signature(x, |y| y)"}, {"sha": "d580774ff8cbf1c8eb70e7d3c0a72fc0b9c8240c", "filename": "tests/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -4,13 +4,13 @@ note: external requirements\n LL |     with_signature(x, |y| y)\n    |                       ^^^\n    |\n-   = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: no_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '?2)>,\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where T: '_#2r\n+   = note: where T: '?2\n \n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:15:1\n@@ -20,7 +20,7 @@ LL | | where\n LL | |     T: Debug,\n    | |_____________^\n    |\n-   = note: defining type: no_region::<'_#1r, T>\n+   = note: defining type: no_region::<'?1, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:27"}, {"sha": "3d4c11a3c547a8b4e6c967483842ad30e56813c6", "filename": "tests/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -6,12 +6,12 @@ LL |     with_signature(a, b, |x, y| {\n    |\n    = note: defining type: no_region::<T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?1 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#2r\n+   = note: late-bound region is '?2\n    = note: number of external vids: 3\n-   = note: where T: '_#1r\n+   = note: where T: '?1\n \n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:26:1\n@@ -38,13 +38,13 @@ note: external requirements\n LL |     with_signature(a, b, |x, y| {\n    |                          ^^^^^^\n    |\n-   = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: correct_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 3\n-   = note: where T: '_#2r\n+   = note: where T: '?2\n \n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:38:1\n@@ -54,22 +54,22 @@ LL | | where\n LL | |     T: 'a,\n    | |__________^\n    |\n-   = note: defining type: correct_region::<'_#1r, T>\n+   = note: defining type: correct_region::<'?1, T>\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:63:26\n    |\n LL |     with_signature(a, b, |x, y| {\n    |                          ^^^^^^\n    |\n-   = note: defining type: wrong_region::<'_#1r, T>::{closure#0} with closure substs [\n+   = note: defining type: wrong_region::<'?1, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?2 ()>, T)),\n                (),\n            ]\n-   = note: late-bound region is '_#3r\n+   = note: late-bound region is '?3\n    = note: number of external vids: 4\n-   = note: where T: '_#2r\n+   = note: where T: '?2\n \n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:59:1\n@@ -79,7 +79,7 @@ LL | | where\n LL | |     T: 'b,\n    | |__________^\n    |\n-   = note: defining type: wrong_region::<'_#1r, T>\n+   = note: defining type: wrong_region::<'?1, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:65:9\n@@ -98,13 +98,13 @@ note: external requirements\n LL |     with_signature(a, b, |x, y| {\n    |                          ^^^^^^\n    |\n-   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n+   = note: defining type: outlives_region::<'?1, '?2, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               extern \"rust-call\" fn((std::cell::Cell<&'?3 ()>, T)),\n                (),\n            ]\n    = note: number of external vids: 4\n-   = note: where T: '_#3r\n+   = note: where T: '?3\n \n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:71:1\n@@ -115,7 +115,7 @@ LL | |     T: 'b,\n LL | |     'b: 'a,\n    | |___________^\n    |\n-   = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n+   = note: defining type: outlives_region::<'?1, '?2, T>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9544b4f2088ea7ca1fef0fd074a685ea166fab9d", "filename": "tests/ui/traits/infer-from-object-issue-26952.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftraits%2Finfer-from-object-issue-26952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftraits%2Finfer-from-object-issue-26952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finfer-from-object-issue-26952.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-// Test that when we match a trait reference like `Foo<A>: Foo<_#0t>`,\n-// we unify with `_#0t` with `A`. In this code, if we failed to do\n+// Test that when we match a trait reference like `Foo<A>: Foo<?0t>`,\n+// we unify with `?0t` with `A`. In this code, if we failed to do\n // that, then you get an unconstrained type-variable in `call`.\n //\n // Also serves as a regression test for issue #26952, though the test"}, {"sha": "790197e2d97f57df0afc550992f2aa47fa3c66fa", "filename": "tests/ui/traits/new-solver/int-var-alias-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-alias-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-alias-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-alias-eq.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // compile-flags: -Ztrait-solver=next\n \n-// HIR typeck ends up equating `<_#0i as Add>::Output == _#0i`.\n+// HIR typeck ends up equating `<?0i as Add>::Output == ?0i`.\n // Want to make sure that we emit an alias-eq goal for this,\n // instead of treating it as a type error and bailing.\n "}, {"sha": "3c7fc0d813d0d7cbd3edfc9c8b4b5d73963b5511", "filename": "tests/ui/traits/new-solver/two-projection-param-candidates-are-ambiguous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ftwo-projection-param-candidates-are-ambiguous.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Ztrait-solver=next\n \n // When we're solving `<T as Foo>::Assoc = i32`, we actually first solve\n-// `<T as Foo>::Assoc = _#1t`, then unify `_#1t` with `i32`. That goal\n+// `<T as Foo>::Assoc = ?1t`, then unify `?1t` with `i32`. That goal\n // with the inference variable is ambiguous when there are >1 param-env\n // candidates.\n "}, {"sha": "3ff20d99ad886667d8543b3ea181dab863dc2379", "filename": "tests/ui/type-alias-impl-trait/closure_parent_substs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad/tests%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs?ref=bb99cdc7cd3f2c0b1ab533735604ade7c2fdf9ad", "patch": "@@ -12,7 +12,7 @@\n \n // Basic test\n mod test1 {\n-    // Hidden type = Closure['_#0r]\n+    // Hidden type = Closure['?0]\n     type Opaque = impl Sized;\n \n     fn define<'a: 'a>() -> Opaque {\n@@ -24,8 +24,8 @@ mod test1 {\n mod test2 {\n     trait Trait {}\n \n-    // Hidden type = Closure['a, '_#0r, '_#1r]\n-    // Constraints = [('_#0r: 'a), ('a: '_#1r)]\n+    // Hidden type = Closure['a, '?0, '?1]\n+    // Constraints = [('?0: 'a), ('a: '?1)]\n     type Opaque<'a>\n     where\n         &'a (): Trait,\n@@ -45,8 +45,8 @@ mod test2 {\n mod test3 {\n     trait Trait {}\n \n-    // Hidden type = Closure['a, 'b, '_#0r]\n-    // Constraints = [('_#0r: 'a), ('_#0r: 'b)]\n+    // Hidden type = Closure['a, 'b, '?0]\n+    // Constraints = [('?0: 'a), ('?0: 'b)]\n     type Opaque<'a, 'b>\n     where\n         (&'a (), &'b ()): Trait,"}]}