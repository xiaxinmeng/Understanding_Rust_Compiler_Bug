{"sha": "f693b7848ea5b24ef3a503aa59e616492a9b0b22", "node_id": "C_kwDOAAsO6NoAKGY2OTNiNzg0OGVhNWIyNGVmM2E1MDNhYTU5ZTYxNjQ5MmE5YjBiMjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-03T18:06:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-05T10:58:55Z"}, "message": "feed resolver_for_lowering instead of storing it in a field", "tree": {"sha": "1cc67af9ad41f318efd8979be8606738ae5393b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cc67af9ad41f318efd8979be8606738ae5393b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f693b7848ea5b24ef3a503aa59e616492a9b0b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f693b7848ea5b24ef3a503aa59e616492a9b0b22", "html_url": "https://github.com/rust-lang/rust/commit/f693b7848ea5b24ef3a503aa59e616492a9b0b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f693b7848ea5b24ef3a503aa59e616492a9b0b22/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125b729dddda053d022ae8db32d42fdf3d1ea48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/125b729dddda053d022ae8db32d42fdf3d1ea48d", "html_url": "https://github.com/rust-lang/rust/commit/125b729dddda053d022ae8db32d42fdf3d1ea48d"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "3e2ea77c07e5716cf357fc1146c801deafbec565", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -12,6 +12,7 @@ use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n@@ -804,14 +805,21 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n+    let ty::ResolverOutputs {\n+        definitions,\n+        global_ctxt: untracked_resolutions,\n+        ast_lowering: untracked_resolver_for_lowering,\n+    } = resolver_outputs;\n+\n     let gcx = sess.time(\"setup_global_ctxt\", || {\n         global_ctxt.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n                 arena,\n                 hir_arena,\n-                resolver_outputs,\n+                definitions,\n+                untracked_resolutions,\n                 krate,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),\n@@ -823,7 +831,12 @@ pub fn create_global_ctxt<'tcx>(\n         })\n     });\n \n-    QueryContext { gcx }\n+    let mut qcx = QueryContext { gcx };\n+    qcx.enter(|tcx| {\n+        tcx.feed_unit_query()\n+            .resolver_for_lowering(tcx.arena.alloc(Steal::new(untracked_resolver_for_lowering)))\n+    });\n+    qcx\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "789d83a0dd00d496f39eeee157d924d6f3cfd31b", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -364,10 +364,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 modifiers.eval_always.is_none(),\n                 \"Query {name} cannot be both `feedable` and `eval_always`.\"\n             );\n-            assert!(\n-                modifiers.no_hash.is_none(),\n-                \"Query {name} cannot be both `feedable` and `no_hash`.\"\n-            );\n             feedable_queries.extend(quote! {\n                 #(#doc_comments)*\n                 [#attribute_stream] fn #name(#arg) #result,"}, {"sha": "9aed75931bfc88d10cd10e5ae63b366e09f56fe0", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -28,6 +28,7 @@ macro_rules! arena_types {\n             [decode] typeck_results: rustc_middle::ty::TypeckResults<'tcx>,\n             [decode] borrowck_result:\n                 rustc_middle::mir::BorrowCheckResult<'tcx>,\n+            [] resolver: rustc_data_structures::steal::Steal<rustc_middle::ty::ResolverAstLowering>,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,"}, {"sha": "f2f2b22f52a37b81834c82f7e06f9a25e36c6c27", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -33,7 +33,7 @@ rustc_queries! {\n     }\n \n     query resolver_for_lowering(_: ()) -> &'tcx Steal<ty::ResolverAstLowering> {\n-        eval_always\n+        feedable\n         no_hash\n         desc { \"getting the resolver for lowering\" }\n     }"}, {"sha": "c39d04d38193bf4196d5daadb78c5f59c564d61d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -81,7 +81,7 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n-use super::{ImplPolarity, ResolverOutputs, RvalueScopes};\n+use super::{ImplPolarity, RvalueScopes};\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -1040,6 +1040,12 @@ pub struct TyCtxtFeed<'tcx, KEY: Copy> {\n     key: KEY,\n }\n \n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn feed_unit_query(self) -> TyCtxtFeed<'tcx, ()> {\n+        TyCtxtFeed { tcx: self, key: () }\n+    }\n+}\n+\n impl<'tcx, KEY: Copy> TyCtxtFeed<'tcx, KEY> {\n     #[inline(always)]\n     pub fn key(&self) -> KEY {\n@@ -1106,7 +1112,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Output of the resolver.\n     pub(crate) untracked_resolutions: ty::ResolverGlobalCtxt,\n-    untracked_resolver_for_lowering: Steal<ty::ResolverAstLowering>,\n     /// The entire crate as AST. This field serves as the input for the hir_crate query,\n     /// which lowers it from AST to HIR. It must not be read or used by anything else.\n     pub untracked_crate: Steal<Lrc<ast::Crate>>,\n@@ -1269,7 +1274,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n-        resolver_outputs: ResolverOutputs,\n+        definitions: Definitions,\n+        untracked_resolutions: ty::ResolverGlobalCtxt,\n         krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n@@ -1278,11 +1284,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         crate_name: &str,\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n-        let ResolverOutputs {\n-            definitions,\n-            global_ctxt: untracked_resolutions,\n-            ast_lowering: untracked_resolver_for_lowering,\n-        } = resolver_outputs;\n         let data_layout = s.target.parse_data_layout().unwrap_or_else(|err| {\n             s.emit_fatal(err);\n         });\n@@ -1311,7 +1312,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n             untracked_resolutions,\n-            untracked_resolver_for_lowering: Steal::new(untracked_resolver_for_lowering),\n             untracked_crate: Steal::new(krate),\n             on_disk_cache,\n             queries,\n@@ -3114,7 +3114,6 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n-    providers.resolver_for_lowering = |tcx, ()| &tcx.untracked_resolver_for_lowering;\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {"}, {"sha": "9e73236f8d59eb577d2dd5857a01b336760fd3a5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -82,8 +82,8 @@ pub use self::consts::{\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GeneratorDiagnosticData,\n-    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n-    UserTypeAnnotationIndex,\n+    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TyCtxtFeed, TypeckResults,\n+    UserType, UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef, ShortInstance};\n pub use self::list::List;"}, {"sha": "642900d3ab4299108844ded337ec7fb8e5c64b6b", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -328,6 +328,18 @@ macro_rules! define_callbacks {\n     };\n }\n \n+macro_rules! hash_result {\n+    ([]) => {{\n+        Some(dep_graph::hash_result)\n+    }};\n+    ([(no_hash) $($rest:tt)*]) => {{\n+        None\n+    }};\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        hash_result!([$($modifiers)*])\n+    };\n+}\n+\n macro_rules! define_feedable {\n     ($($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n         $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n@@ -358,7 +370,7 @@ macro_rules! define_feedable {\n                     tcx,\n                     key,\n                     &value,\n-                    dep_graph::hash_result,\n+                    hash_result!([$($modifiers)*]),\n                 );\n                 cache.complete(key, value, dep_node_index)\n             }"}, {"sha": "38c7c6cce67650680b967749481eee26dcbd1b9a", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f693b7848ea5b24ef3a503aa59e616492a9b0b22/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=f693b7848ea5b24ef3a503aa59e616492a9b0b22", "patch": "@@ -510,7 +510,7 @@ impl<K: DepKind> DepGraph<K> {\n         cx: Ctxt,\n         key: A,\n         result: &R,\n-        hash_result: fn(&mut StableHashingContext<'_>, &R) -> Fingerprint,\n+        hash_result: Option<fn(&mut StableHashingContext<'_>, &R) -> Fingerprint>,\n     ) -> DepNodeIndex {\n         if let Some(data) = self.data.as_ref() {\n             // The caller query has more dependencies than the node we are creating.  We may\n@@ -521,10 +521,12 @@ impl<K: DepKind> DepGraph<K> {\n             // For sanity, we still check that the loaded stable hash and the new one match.\n             if let Some(dep_node_index) = self.dep_node_index_of_opt(&node) {\n                 let _current_fingerprint =\n-                    crate::query::incremental_verify_ich(cx, result, &node, Some(hash_result));\n+                    crate::query::incremental_verify_ich(cx, result, &node, hash_result);\n \n                 #[cfg(debug_assertions)]\n-                data.current.record_edge(dep_node_index, node, _current_fingerprint);\n+                if hash_result.is_some() {\n+                    data.current.record_edge(dep_node_index, node, _current_fingerprint);\n+                }\n \n                 return dep_node_index;\n             }\n@@ -539,8 +541,9 @@ impl<K: DepKind> DepGraph<K> {\n             });\n \n             let hashing_timer = cx.profiler().incr_result_hashing();\n-            let current_fingerprint =\n-                cx.with_stable_hashing_context(|mut hcx| hash_result(&mut hcx, result));\n+            let current_fingerprint = hash_result.map(|hash_result| {\n+                cx.with_stable_hashing_context(|mut hcx| hash_result(&mut hcx, result))\n+            });\n \n             let print_status = cfg!(debug_assertions) && cx.sess().opts.unstable_opts.dep_tasks;\n \n@@ -550,7 +553,7 @@ impl<K: DepKind> DepGraph<K> {\n                 &data.previous,\n                 node,\n                 edges,\n-                Some(current_fingerprint),\n+                current_fingerprint,\n                 print_status,\n             );\n "}]}