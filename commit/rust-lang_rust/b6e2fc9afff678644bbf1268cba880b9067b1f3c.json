{"sha": "b6e2fc9afff678644bbf1268cba880b9067b1f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZTJmYzlhZmZmNjc4NjQ0YmJmMTI2OGNiYTg4MGI5MDY3YjFmM2M=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-05T22:54:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-05T22:54:28Z"}, "message": "Rollup merge of #56388 - matthewjasper:more-lexical-mir-cleanup, r=nikomatsakis\n\nMore MIR borrow check cleanup\n\n* Fix some rustc doc links\n* Remove the `region_map` field from `BorrowSet`\n*  Use `visit_local` to find 2PB activations\n\nr? @nikomatsakis", "tree": {"sha": "963ac21fb6aec4b84a8c1ba445e875bb46036a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963ac21fb6aec4b84a8c1ba445e875bb46036a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e2fc9afff678644bbf1268cba880b9067b1f3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCFckCRBK7hj4Ov3rIwAAdHIIAElpM8SAX8hOKUJXQ7DwtuR+\nSoIy/TxiWiE2TFi/Uwsspa0DGvkmk7sY/zgblGKCN4iVyLkcq74kOGlYvWY2wBO1\nmMpimyk5Z1YUb3FSBdpuf0o2emRidpqHlRz5C+3VINB/+TfCKaak00mCjTSezjS6\nHXnUOitJGDQEJiI6N6evcOXovGZY/Scky+eoYESgVHwPN0Q3kp/AjHsMNK1xOSwG\nqifgK2iGuTDB49eIzR7Wzb6TEQzEQVRgztXiExHrNQCJHnDzOJ+6tSBoV2Yh3vX5\nwRjlgd1wpp8ckSNNdF9QKZ2g8N+fMmULtcEqePXJEaTx5g6Qfy2nxeaqS4x6/wY=\n=n6Do\n-----END PGP SIGNATURE-----\n", "payload": "tree 963ac21fb6aec4b84a8c1ba445e875bb46036a2c\nparent b2a002dc4b316890efa6f5040650576d7f3b60ab\nparent 6000c2e0e16ee60078a3e2810ff3d26639bdeff5\nauthor Pietro Albini <pietro@pietroalbini.org> 1544050468 +0100\ncommitter GitHub <noreply@github.com> 1544050468 +0100\n\nRollup merge of #56388 - matthewjasper:more-lexical-mir-cleanup, r=nikomatsakis\n\nMore MIR borrow check cleanup\n\n* Fix some rustc doc links\n* Remove the `region_map` field from `BorrowSet`\n*  Use `visit_local` to find 2PB activations\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e2fc9afff678644bbf1268cba880b9067b1f3c", "html_url": "https://github.com/rust-lang/rust/commit/b6e2fc9afff678644bbf1268cba880b9067b1f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e2fc9afff678644bbf1268cba880b9067b1f3c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a002dc4b316890efa6f5040650576d7f3b60ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a002dc4b316890efa6f5040650576d7f3b60ab", "html_url": "https://github.com/rust-lang/rust/commit/b2a002dc4b316890efa6f5040650576d7f3b60ab"}, {"sha": "6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6000c2e0e16ee60078a3e2810ff3d26639bdeff5", "html_url": "https://github.com/rust-lang/rust/commit/6000c2e0e16ee60078a3e2810ff3d26639bdeff5"}], "stats": {"total": 155, "additions": 74, "deletions": 81}, "files": [{"sha": "947c32df0f6a3eb5d74726156a1937f2fa2ce5b3", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 56, "deletions": 64, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2fc9afff678644bbf1268cba880b9067b1f3c/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2fc9afff678644bbf1268cba880b9067b1f3c/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=b6e2fc9afff678644bbf1268cba880b9067b1f3c", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::traversal;\n use rustc::mir::visit::{\n     PlaceContext, Visitor, NonUseContext, MutatingUseContext, NonMutatingUseContext\n };\n-use rustc::mir::{self, Location, Mir, Place, Local};\n+use rustc::mir::{self, Location, Mir, Local};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -41,10 +41,6 @@ crate struct BorrowSet<'tcx> {\n     /// only need to store one borrow index\n     crate activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n \n-    /// Every borrow has a region; this maps each such regions back to\n-    /// its borrow-indexes.\n-    crate region_map: FxHashMap<RegionVid, FxHashSet<BorrowIndex>>,\n-\n     /// Map from local to all the borrows on that local\n     crate local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n \n@@ -149,7 +145,6 @@ impl<'tcx> BorrowSet<'tcx> {\n             idx_vec: IndexVec::new(),\n             location_map: Default::default(),\n             activation_map: Default::default(),\n-            region_map: Default::default(),\n             local_map: Default::default(),\n             pending_activations: Default::default(),\n             locals_state_at_exit:\n@@ -164,7 +159,6 @@ impl<'tcx> BorrowSet<'tcx> {\n             borrows: visitor.idx_vec,\n             location_map: visitor.location_map,\n             activation_map: visitor.activation_map,\n-            region_map: visitor.region_map,\n             local_map: visitor.local_map,\n             locals_state_at_exit: visitor.locals_state_at_exit,\n         }\n@@ -184,7 +178,6 @@ struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,\n     activation_map: FxHashMap<Location, Vec<BorrowIndex>>,\n-    region_map: FxHashMap<RegionVid, FxHashSet<BorrowIndex>>,\n     local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n \n     /// When we encounter a 2-phase borrow statement, it will always\n@@ -229,7 +222,6 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n \n             self.insert_as_pending_if_two_phase(location, &assigned_place, kind, idx);\n \n-            self.region_map.entry(region).or_default().insert(idx);\n             if let Some(local) = borrowed_place.root_local() {\n                 self.local_map.entry(local).or_default().insert(idx);\n             }\n@@ -238,68 +230,68 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n         self.super_assign(block, assigned_place, rvalue, location)\n     }\n \n-    fn visit_place(\n+    fn visit_local(\n         &mut self,\n-        place: &mir::Place<'tcx>,\n+        temp: &Local,\n         context: PlaceContext<'tcx>,\n         location: Location,\n     ) {\n-        self.super_place(place, context, location);\n-\n-        // We found a use of some temporary TEMP...\n-        if let Place::Local(temp) = place {\n-            // ... check whether we (earlier) saw a 2-phase borrow like\n-            //\n-            //     TMP = &mut place\n-            if let Some(&borrow_index) = self.pending_activations.get(temp) {\n-                let borrow_data = &mut self.idx_vec[borrow_index];\n-\n-                // Watch out: the use of TMP in the borrow itself\n-                // doesn't count as an activation. =)\n-                if borrow_data.reserve_location == location &&\n-                    context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n-                {\n-                    return;\n-                }\n+        if !context.is_use() {\n+            return;\n+        }\n \n-                if let TwoPhaseActivation::ActivatedAt(other_location) =\n-                        borrow_data.activation_location {\n-                    span_bug!(\n-                        self.mir.source_info(location).span,\n-                        \"found two uses for 2-phase borrow temporary {:?}: \\\n-                         {:?} and {:?}\",\n-                        temp,\n-                        location,\n-                        other_location,\n-                    );\n-                }\n+        // We found a use of some temporary TMP\n+        // check whether we (earlier) saw a 2-phase borrow like\n+        //\n+        //     TMP = &mut place\n+        if let Some(&borrow_index) = self.pending_activations.get(temp) {\n+            let borrow_data = &mut self.idx_vec[borrow_index];\n \n-                // Otherwise, this is the unique later use\n-                // that we expect.\n-                borrow_data.activation_location = match context {\n-                    // The use of TMP in a shared borrow does not\n-                    // count as an actual activation.\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n-                        TwoPhaseActivation::NotActivated,\n-                    _ => {\n-                        // Double check: This borrow is indeed a two-phase borrow (that is,\n-                        // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n-                        // we've not found any other activations (checked above).\n-                        assert_eq!(\n-                            borrow_data.activation_location,\n-                            TwoPhaseActivation::NotActivated,\n-                            \"never found an activation for this borrow!\",\n-                        );\n-\n-                        self.activation_map\n-                            .entry(location)\n-                            .or_default()\n-                            .push(borrow_index);\n-                        TwoPhaseActivation::ActivatedAt(location)\n-                    }\n-                };\n+            // Watch out: the use of TMP in the borrow itself\n+            // doesn't count as an activation. =)\n+            if borrow_data.reserve_location == location &&\n+                context == PlaceContext::MutatingUse(MutatingUseContext::Store)\n+            {\n+                return;\n+            }\n+\n+            if let TwoPhaseActivation::ActivatedAt(other_location) =\n+                    borrow_data.activation_location {\n+                span_bug!(\n+                    self.mir.source_info(location).span,\n+                    \"found two uses for 2-phase borrow temporary {:?}: \\\n+                     {:?} and {:?}\",\n+                    temp,\n+                    location,\n+                    other_location,\n+                );\n             }\n+\n+            // Otherwise, this is the unique later use\n+            // that we expect.\n+            borrow_data.activation_location = match context {\n+                // The use of TMP in a shared borrow does not\n+                // count as an actual activation.\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow(..)) |\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow(..)) =>\n+                    TwoPhaseActivation::NotActivated,\n+                _ => {\n+                    // Double check: This borrow is indeed a two-phase borrow (that is,\n+                    // we are 'transitioning' from `NotActivated` to `ActivatedAt`) and\n+                    // we've not found any other activations (checked above).\n+                    assert_eq!(\n+                        borrow_data.activation_location,\n+                        TwoPhaseActivation::NotActivated,\n+                        \"never found an activation for this borrow!\",\n+                    );\n+\n+                    self.activation_map\n+                        .entry(location)\n+                        .or_default()\n+                        .push(borrow_index);\n+                    TwoPhaseActivation::ActivatedAt(location)\n+                }\n+            };\n         }\n     }\n "}, {"sha": "3a9e4fc9e4ab949126bc2bfca33e69866d61cc21", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2fc9afff678644bbf1268cba880b9067b1f3c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2fc9afff678644bbf1268cba880b9067b1f3c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=b6e2fc9afff678644bbf1268cba880b9067b1f3c", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 // re-consider the current implementations of the\n                 // propagate_call_return method.\n \n-                if let mir::Rvalue::Ref(region, _, ref place) = **rhs {\n+                if let mir::Rvalue::Ref(_, _, ref place) = **rhs {\n                     if place.ignore_borrow(\n                         self.tcx,\n                         self.mir,\n@@ -258,13 +258,6 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });\n \n-                    assert!(self.borrow_set.region_map\n-                        .get(&region.to_region_vid())\n-                        .unwrap_or_else(|| {\n-                            panic!(\"could not find BorrowIndexs for RegionVid {:?}\", region);\n-                        })\n-                        .contains(&index)\n-                    );\n                     sets.gen(*index);\n \n                     // Issue #46746: Two-phase borrows handles"}, {"sha": "6d7fc404edbb12d7c41da7f326ef576f13a8f916", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b6e2fc9afff678644bbf1268cba880b9067b1f3c/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e2fc9afff678644bbf1268cba880b9067b1f3c/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=b6e2fc9afff678644bbf1268cba880b9067b1f3c", "patch": "@@ -10,17 +10,25 @@\n \n //! This module provides two passes:\n //!\n-//!   - [CleanAscribeUserType], that replaces all\n-//!     [StatementKind::AscribeUserType] statements with [StatementKind::Nop].\n-//!   - [CleanFakeReadsAndBorrows], that replaces all [FakeRead] statements and\n-//!     borrows that are read by [FakeReadCause::ForMatchGuard] fake reads with\n-//!     [StatementKind::Nop].\n+//!   - [`CleanAscribeUserType`], that replaces all [`AscribeUserType`]\n+//!     statements with [`Nop`].\n+//!   - [`CleanFakeReadsAndBorrows`], that replaces all [`FakeRead`] statements\n+//!     and borrows that are read by [`ForMatchGuard`] fake reads with [`Nop`].\n //!\n-//! The [CleanFakeReadsAndBorrows] \"pass\" is actually implemented as two\n+//! The `CleanFakeReadsAndBorrows` \"pass\" is actually implemented as two\n //! traversals (aka visits) of the input MIR. The first traversal,\n-//! [DeleteAndRecordFakeReads], deletes the fake reads and finds the temporaries\n-//! read by [ForMatchGuard] reads, and [DeleteFakeBorrows] deletes the\n-//! initialization of those temporaries.\n+//! [`DeleteAndRecordFakeReads`], deletes the fake reads and finds the\n+//! temporaries read by [`ForMatchGuard`] reads, and [`DeleteFakeBorrows`]\n+//! deletes the initialization of those temporaries.\n+//!\n+//! [`CleanAscribeUserType`]: cleanup_post_borrowck::CleanAscribeUserType\n+//! [`CleanFakeReadsAndBorrows`]: cleanup_post_borrowck::CleanFakeReadsAndBorrows\n+//! [`DeleteAndRecordFakeReads`]: cleanup_post_borrowck::DeleteAndRecordFakeReads\n+//! [`DeleteFakeBorrows`]: cleanup_post_borrowck::DeleteFakeBorrows\n+//! [`AscribeUserType`]: rustc::mir::StatementKind::AscribeUserType\n+//! [`Nop`]: rustc::mir::StatementKind::Nop\n+//! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n+//! [`ForMatchGuard`]: rustc::mir::FakeReadCause::ForMatchGuard\n \n use rustc_data_structures::fx::FxHashSet;\n "}]}