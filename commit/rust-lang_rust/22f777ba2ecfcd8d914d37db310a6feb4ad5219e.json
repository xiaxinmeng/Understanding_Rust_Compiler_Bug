{"sha": "22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjc3N2JhMmVjZmNkOGQ5MTRkMzdkYjMxMGE2ZmViNGFkNTIxOWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-10T11:15:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T16:11:55Z"}, "message": "Parse `unsafe impl` but don't do anything particularly interesting with the results.", "tree": {"sha": "c8b867087fe35ee35e239f2aa31ff944d46ca4a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b867087fe35ee35e239f2aa31ff944d46ca4a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "html_url": "https://github.com/rust-lang/rust/commit/22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5686a91914ac678ccb78220367daefe585a0d66a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5686a91914ac678ccb78220367daefe585a0d66a", "html_url": "https://github.com/rust-lang/rust/commit/5686a91914ac678ccb78220367daefe585a0d66a"}], "stats": {"total": 154, "additions": 97, "deletions": 57}, "files": [{"sha": "3040125d97e32a40ecdf77b2b33b5c827084d6d1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1729,7 +1729,7 @@ impl LintPass for Stability {\n                     }\n                 }\n             }\n-            ast::ItemImpl(_, Some(ref t), _, _) => {\n+            ast::ItemImpl(_, _, Some(ref t), _, _) => {\n                 let id = ty::trait_ref_to_def_id(cx.tcx, t);\n                 self.lint(cx, id, t.path.span);\n             }"}, {"sha": "b78112f1f78508a893460f88d3863fa33d4af8e2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -361,17 +361,23 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n     }\n }\n \n+fn parse_unsafety(item_doc: rbml::Doc) -> ast::Unsafety {\n+    let unsafety_doc = reader::get_doc(item_doc, tag_unsafety);\n+    if reader::doc_as_u8(unsafety_doc) != 0 {\n+        ast::Unsafety::Unsafe\n+    } else {\n+        ast::Unsafety::Normal\n+    }\n+}\n+\n pub fn get_trait_def<'tcx>(cdata: Cmd,\n                            item_id: ast::NodeId,\n                            tcx: &ty::ctxt<'tcx>) -> ty::TraitDef<'tcx>\n {\n     let item_doc = lookup_item(item_id, cdata.data());\n     let generics = doc_generics(item_doc, tcx, cdata, tag_item_generics);\n     let bounds = trait_def_bounds(item_doc, tcx, cdata);\n-    let unsafety = match reader::maybe_get_doc(item_doc, tag_unsafety) {\n-        Some(_) => ast::Unsafety::Unsafe,\n-        None => ast::Unsafety::Normal,\n-    };\n+    let unsafety = parse_unsafety(item_doc);\n \n     ty::TraitDef {\n         unsafety: unsafety,"}, {"sha": "a1f04b7412b32d660a98781f674ddd4c409d24c0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1205,7 +1205,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             None => {}\n         }\n       }\n-      ast::ItemImpl(_, ref opt_trait, ref ty, ref ast_items) => {\n+      ast::ItemImpl(unsafety, _, ref opt_trait, ref ty, ref ast_items) => {\n         // We need to encode information about the default methods we\n         // have inherited, so we drive this based on the impl structure.\n         let impl_items = tcx.impl_items.borrow();\n@@ -1218,6 +1218,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, item.attrs.as_slice());\n+        encode_unsafety(rbml_w, unsafety);\n         match ty.node {\n             ast::TyPath(ref path, _) if path.segments\n                                                         .len() == 1 => {\n@@ -1315,15 +1316,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_family(rbml_w, 'I');\n         encode_item_variances(rbml_w, ecx, item.id);\n         let trait_def = ty::lookup_trait_def(tcx, def_id);\n-\n-        match trait_def.unsafety {\n-            ast::Unsafety::Unsafe => {\n-                rbml_w.start_tag(tag_unsafety);\n-                rbml_w.end_tag();\n-            }\n-            ast::Unsafety::Normal => { }\n-        }\n-\n+        encode_unsafety(rbml_w, trait_def.unsafety);\n         encode_generics(rbml_w, ecx, &trait_def.generics, tag_item_generics);\n         encode_trait_ref(rbml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);\n         encode_name(rbml_w, item.ident.name);\n@@ -1683,6 +1676,14 @@ fn encode_attributes(rbml_w: &mut Encoder, attrs: &[ast::Attribute]) {\n     rbml_w.end_tag();\n }\n \n+fn encode_unsafety(rbml_w: &mut Encoder, unsafety: ast::Unsafety) {\n+    let byte: u8 = match unsafety {\n+        ast::Unsafety::Normal => 0,\n+        ast::Unsafety::Unsafe => 1,\n+    };\n+    rbml_w.wr_tagged_u8(tag_unsafety, byte);\n+}\n+\n fn encode_crate_deps(rbml_w: &mut Encoder, cstore: &cstore::CStore) {\n     fn get_ordered_deps(cstore: &cstore::CStore) -> Vec<decoder::CrateDep> {\n         // Pull the cnums and name,vers,hash out of cstore\n@@ -1864,7 +1865,7 @@ struct ImplVisitor<'a, 'b:'a, 'c:'a, 'tcx:'b> {\n \n impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n-        if let ast::ItemImpl(_, Some(ref trait_ref), _, _) = item.node {\n+        if let ast::ItemImpl(_, _, Some(ref trait_ref), _, _) = item.node {\n             let def_map = &self.ecx.tcx.def_map;\n             let trait_def = def_map.borrow()[trait_ref.ref_id].clone();\n             let def_id = trait_def.def_id();"}, {"sha": "939775e7507130eeec8b011f904d370eb5beb696", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -355,7 +355,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             ast::ItemEnum(ref enum_def, _) if allow_dead_code => {\n                 self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.id));\n             }\n-            ast::ItemImpl(_, Some(ref _trait_ref), _, ref impl_items) => {\n+            ast::ItemImpl(_, _, Some(ref _trait_ref), _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         ast::MethodImplItem(ref method) => {"}, {"sha": "5c2944f898ed29053a1442272f11ccd7eea75a1a", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1690,7 +1690,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n         match tcx.map.find(parent) {\n             Some(node) => match node {\n                 ast_map::NodeItem(item) => match item.node {\n-                    ast::ItemImpl(ref gen, _, _, _) => {\n+                    ast::ItemImpl(_, ref gen, _, _, _) => {\n                         taken.push_all(gen.lifetimes.as_slice());\n                     }\n                     _ => ()"}, {"sha": "8cce1321d728bdc7b9ae770f35cd219b01aaf0c9", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             //   undefined symbols at linkage time if this case is not handled.\n             //\n             // * Private trait impls for private types can be completely ignored\n-            ast::ItemImpl(_, _, ref ty, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, ref ty, ref impl_items) => {\n                 let public_ty = match ty.node {\n                     ast::TyPath(_, id) => {\n                         match self.tcx.def_map.borrow()[id].clone() {\n@@ -611,7 +611,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                     // invoked, and the struct/enum itself is private. Crawl\n                     // back up the chains to find the relevant struct/enum that\n                     // was private.\n-                    ast::ItemImpl(_, _, ref ty, _) => {\n+                    ast::ItemImpl(_, _, _, ref ty, _) => {\n                         let id = match ty.node {\n                             ast::TyPath(_, id) => id,\n                             _ => return Some((err_span, err_msg, None)),\n@@ -1096,7 +1096,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         match item.node {\n             // implementations of traits don't need visibility qualifiers because\n             // that's controlled by having the trait in scope.\n-            ast::ItemImpl(_, Some(..), _, ref impl_items) => {\n+            ast::ItemImpl(_, _, Some(..), _, ref impl_items) => {\n                 check_inherited(item.span, item.vis,\n                                 \"visibility qualifiers have no effect on trait \\\n                                  impls\");\n@@ -1175,7 +1175,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n         };\n         check_inherited(tcx, item.span, item.vis);\n         match item.node {\n-            ast::ItemImpl(_, _, _, ref impl_items) => {\n+            ast::ItemImpl(_, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         ast::MethodImplItem(ref m) => {\n@@ -1320,7 +1320,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // (i.e. we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n             // publicly visible.\n-            ast::ItemImpl(ref g, ref trait_ref, ref self_, ref impl_items) => {\n+            ast::ItemImpl(_, ref g, ref trait_ref, ref self_, ref impl_items) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n                 // impl [... for] Public<...>, but not `impl [... for]"}, {"sha": "38d3b859c9d228689e0ddcab4852cbc3f70e88f7", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -55,7 +55,7 @@ fn item_might_be_inlined(item: &ast::Item) -> bool {\n     }\n \n     match item.node {\n-        ast::ItemImpl(ref generics, _, _, _) |\n+        ast::ItemImpl(_, ref generics, _, _, _) |\n         ast::ItemFn(_, _, _, ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                                       .map\n                                       .expect_item(impl_did.node)\n                                       .node {\n-                                ast::ItemImpl(ref generics, _, _, _) => {\n+                                ast::ItemImpl(_, ref generics, _, _, _) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false"}, {"sha": "c6fdd845ea7758d7ef001ab77959e6aec9ce7407", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1432,7 +1432,7 @@ impl<'a> Resolver<'a> {\n                 parent\n             }\n \n-            ItemImpl(_, None, ref ty, ref impl_items) => {\n+            ItemImpl(_, _, None, ref ty, ref impl_items) => {\n                 // If this implements an anonymous trait, then add all the\n                 // methods within to a new module, if the type was defined\n                 // within this module.\n@@ -1581,7 +1581,7 @@ impl<'a> Resolver<'a> {\n                 parent\n             }\n \n-            ItemImpl(_, Some(_), _, _) => parent,\n+            ItemImpl(_, _, Some(_), _, _) => parent,\n \n             ItemTrait(_, _, _, _, ref items) => {\n                 let name_bindings =\n@@ -4230,7 +4230,8 @@ impl<'a> Resolver<'a> {\n                 });\n             }\n \n-            ItemImpl(ref generics,\n+            ItemImpl(_,\n+                     ref generics,\n                      ref implemented_traits,\n                      ref self_type,\n                      ref impl_items) => {"}, {"sha": "48d6ac847d8d02b66a562eddc2c960414aae1b98", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     visit::walk_item(this, item);\n                 });\n             }\n-            ast::ItemImpl(ref generics, _, _, _) => {\n+            ast::ItemImpl(_, ref generics, _, _, _) => {\n                 // Impls have both early- and late-bound lifetimes.\n                 self.visit_early_late(subst::TypeSpace, generics, |this| {\n                     this.check_lifetime_defs(&generics.lifetimes);"}, {"sha": "d6fd3d9a94388059bdc8a29e767b918414ec76c8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -4741,7 +4741,7 @@ pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n             match cx.map.find(id.node) {\n                 Some(ast_map::NodeItem(item)) => {\n                     match item.node {\n-                        ast::ItemImpl(_, ref opt_trait, _, _) => {\n+                        ast::ItemImpl(_, _, ref opt_trait, _, _) => {\n                             match opt_trait {\n                                 &Some(ref t) => {\n                                     Some(ty::node_id_to_trait_ref(cx, t.ref_id))\n@@ -5722,7 +5722,7 @@ pub fn trait_id_of_impl(tcx: &ctxt,\n     match node {\n         ast_map::NodeItem(item) => {\n             match item.node {\n-                ast::ItemImpl(_, Some(ref trait_ref), _, _) => {\n+                ast::ItemImpl(_, _, Some(ref trait_ref), _, _) => {\n                     Some(node_id_to_trait_ref(tcx, trait_ref.ref_id).def_id)\n                 }\n                 _ => None"}, {"sha": "712d6217dde81fd9ba237ef91435bbdd932b7b95", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -282,7 +282,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                 NodeItem(item) => {\n                     scope_id = item.id;\n                     match item.node {\n-                        ast::ItemImpl(_, _, ref ty, _) => {\n+                        ast::ItemImpl(_, _, _, ref ty, _) => {\n                             let mut result = String::from_str(\"<\");\n                             result.push_str(ty_to_string(&**ty).as_slice());\n \n@@ -1040,7 +1040,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                 self.process_const(item, &**typ, &**expr),\n             ast::ItemStruct(ref def, ref ty_params) => self.process_struct(item, &**def, ty_params),\n             ast::ItemEnum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n-            ast::ItemImpl(ref ty_params,\n+            ast::ItemImpl(_,\n+                          ref ty_params,\n                           ref trait_ref,\n                           ref typ,\n                           ref impl_items) => {"}, {"sha": "83779ffbe161c8935c317ba0c3e1744d3993c449", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -2304,7 +2304,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n         let mut v = TransItemVisitor{ ccx: ccx };\n         v.visit_block(&**body);\n       }\n-      ast::ItemImpl(ref generics, _, _, ref impl_items) => {\n+      ast::ItemImpl(_, ref generics, _, _, ref impl_items) => {\n         meth::trans_impl(ccx,\n                          item.ident,\n                          impl_items.as_slice(),"}, {"sha": "e0df94745d6a906e2156dc5135d02c06bccfea29", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -595,7 +595,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n         let param_env = ParameterEnvironment::for_item(ccx.tcx, it.id);\n         check_bare_fn(ccx, &**decl, &**body, it.id, fn_pty.ty, param_env);\n       }\n-      ast::ItemImpl(_, ref opt_trait_ref, _, ref impl_items) => {\n+      ast::ItemImpl(_, _, ref opt_trait_ref, _, ref impl_items) => {\n         debug!(\"ItemImpl {} with id {}\", token::get_ident(it.ident), it.id);\n \n         let impl_pty = ty::lookup_item_type(ccx.tcx, ast_util::local_def(it.id));"}, {"sha": "7bc79d6e4a42184611e3afe2f7b949def2348499", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for CoherenceCheckVisitor<'a, 'tcx> {\n         //debug!(\"(checking coherence) item '{}'\", token::get_ident(item.ident));\n \n         match item.node {\n-            ItemImpl(_, ref opt_trait, _, _) => {\n+            ItemImpl(_, _, ref opt_trait, _, _) => {\n                 match opt_trait.clone() {\n                     Some(opt_trait) => {\n                         self.cc.check_implementation(item, &[opt_trait]);\n@@ -325,7 +325,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     // Converts an implementation in the AST to a vector of items.\n     fn create_impl_from_item(&self, item: &Item) -> Vec<ImplOrTraitItemId> {\n         match item.node {\n-            ItemImpl(_, ref trait_refs, _, ref ast_items) => {\n+            ItemImpl(_, _, ref trait_refs, _, ref ast_items) => {\n                 let mut items: Vec<ImplOrTraitItemId> =\n                         ast_items.iter()\n                                  .map(|ast_item| {"}, {"sha": "1803bf766dda1042788334c5943627bd41be46ad", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v ast::Item) {\n         let def_id = ast_util::local_def(item.id);\n         match item.node {\n-            ast::ItemImpl(_, None, _, _) => {\n+            ast::ItemImpl(_, _, None, _, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\", item.repr(self.tcx));\n@@ -64,7 +64,7 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            ast::ItemImpl(_, Some(_), _, _) => {\n+            ast::ItemImpl(_, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n                 if traits::is_orphan_impl(self.tcx, def_id) {"}, {"sha": "61b8e6c956cabb2244f2efc967e8dd18d3c03ccb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1045,7 +1045,8 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                                    enum_definition.variants.as_slice(),\n                                    generics);\n         },\n-        ast::ItemImpl(ref generics,\n+        ast::ItemImpl(_,\n+                      ref generics,\n                       ref opt_trait_ref,\n                       ref selfty,\n                       ref impl_items) => {"}, {"sha": "6592ca498dc646708ca7c73e97c9a662e11f48c4", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -184,6 +184,7 @@ pub struct Trait {\n }\n \n pub struct Impl {\n+    pub unsafety: ast::Unsafety,\n     pub generics: ast::Generics,\n     pub trait_: Option<ast::TraitRef>,\n     pub for_: P<ast::Ty>,"}, {"sha": "4374ce5deef4ecde2d6fbb305005437395b07244", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -338,8 +338,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.traits.push(t);\n             },\n-            ast::ItemImpl(ref gen, ref tr, ref ty, ref items) => {\n+            ast::ItemImpl(unsafety, ref gen, ref tr, ref ty, ref items) => {\n                 let i = Impl {\n+                    unsafety: unsafety,\n                     generics: gen.clone(),\n                     trait_: tr.clone(),\n                     for_: ty.clone(),"}, {"sha": "206fb26eb55cb94826b47b7b54649c50b984b33f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1617,7 +1617,8 @@ pub enum Item_ {\n                                 // Currently, only Sized makes sense here.\n               TyParamBounds,\n               Vec<TraitItem>),\n-    ItemImpl(Generics,\n+    ItemImpl(Unsafety,\n+             Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self\n              Vec<ImplItem>),"}, {"sha": "6089f39e828b140e63d13a1255e5dda4855591d8", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -755,7 +755,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         let parent = self.parent;\n         self.parent = i.id;\n         match i.node {\n-            ItemImpl(_, _, _, ref impl_items) => {\n+            ItemImpl(_, _, _, _, ref impl_items) => {\n                 for impl_item in impl_items.iter() {\n                     match *impl_item {\n                         MethodImplItem(ref m) => {"}, {"sha": "d2185a00876d2ce895efd8a055e2047446da1a0e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -133,11 +133,11 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n     F: FnMut(&[ast::Attribute]) -> bool\n {\n     let item = match item {\n-        ast::ItemImpl(a, b, c, impl_items) => {\n+        ast::ItemImpl(u, a, b, c, impl_items) => {\n             let impl_items = impl_items.into_iter()\n                                        .filter(|ii| impl_item_in_cfg(cx, ii))\n                                        .collect();\n-            ast::ItemImpl(a, b, c, impl_items)\n+            ast::ItemImpl(u, a, b, c, impl_items)\n         }\n         ast::ItemTrait(u, a, b, c, methods) => {\n             let methods = methods.into_iter()"}, {"sha": "f40be823a1a543346122c3ca466e95b377adceea", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -462,7 +462,8 @@ impl<'a> TraitDef<'a> {\n             self.span,\n             ident,\n             a,\n-            ast::ItemImpl(trait_generics,\n+            ast::ItemImpl(ast::Unsafety::Normal,\n+                          trait_generics,\n                           opt_trait_ref,\n                           self_type,\n                           methods.into_iter()"}, {"sha": "9656629e14d7707c2adad859a0f32de332c1045b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n                 }\n             }\n \n-            ast::ItemImpl(_, _, _, ref items) => {\n+            ast::ItemImpl(_, _, _, _, ref items) => {\n                 if attr::contains_name(i.attrs.as_slice(),\n                                        \"unsafe_destructor\") {\n                     self.gate_feature(\"unsafe_destructor\","}, {"sha": "8a578c2cb05c0f82e2d61544e936723353816691", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -1008,7 +1008,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             let struct_def = folder.fold_struct_def(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n-        ItemImpl(generics, ifce, ty, impl_items) => {\n+        ItemImpl(unsafety, generics, ifce, ty, impl_items) => {\n             let mut new_impl_items = Vec::new();\n             for impl_item in impl_items.iter() {\n                 match *impl_item {\n@@ -1030,7 +1030,8 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                     Some(folder.fold_trait_ref((*trait_ref).clone()))\n                 }\n             };\n-            ItemImpl(folder.fold_generics(generics),\n+            ItemImpl(unsafety,\n+                     folder.fold_generics(generics),\n                      ifce,\n                      folder.fold_ty(ty),\n                      new_impl_items)\n@@ -1160,7 +1161,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n     let node = folder.fold_item_underscore(node);\n     let ident = match node {\n         // The node may have changed, recompute the \"pretty\" impl name.\n-        ItemImpl(_, ref maybe_trait, ref ty, _) => {\n+        ItemImpl(_, _, ref maybe_trait, ref ty, _) => {\n             ast_util::impl_pretty_name(maybe_trait, &**ty)\n         }\n         _ => ident"}, {"sha": "d1991c0463f445570a1cd3e7c347b72f0967be3b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -4667,7 +4667,7 @@ impl<'a> Parser<'a> {\n     /// Parses two variants (with the region/type params always optional):\n     ///    impl<T> Foo { ... }\n     ///    impl<T> ToString for ~[T] { ... }\n-    fn parse_item_impl(&mut self) -> ItemInfo {\n+    fn parse_item_impl(&mut self, unsafety: ast::Unsafety) -> ItemInfo {\n         // First, parse type parameters if necessary.\n         let mut generics = self.parse_generics();\n \n@@ -4706,7 +4706,7 @@ impl<'a> Parser<'a> {\n         let ident = ast_util::impl_pretty_name(&opt_trait, &*ty);\n \n         (ident,\n-         ItemImpl(generics, opt_trait, ty, impl_items),\n+         ItemImpl(unsafety, generics, opt_trait, ty, impl_items),\n          Some(attrs))\n     }\n \n@@ -5556,6 +5556,22 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return IoviItem(item);\n         }\n+        if self.token.is_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1u, |t| t.is_keyword(keywords::Impl))\n+        {\n+            // IMPL ITEM\n+            self.expect_keyword(keywords::Unsafe);\n+            self.expect_keyword(keywords::Impl);\n+            let (ident, item_, extra_attrs) = self.parse_item_impl(ast::Unsafety::Unsafe);\n+            let last_span = self.last_span;\n+            let item = self.mk_item(lo,\n+                                    last_span.hi,\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return IoviItem(item);\n+        }\n         if self.token.is_keyword(keywords::Fn) &&\n                 self.look_ahead(1, |f| !Parser::fn_expr_lookahead(f)) {\n             // FUNCTION ITEM\n@@ -5644,7 +5660,7 @@ impl<'a> Parser<'a> {\n         }\n         if self.eat_keyword(keywords::Impl) {\n             // IMPL ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_impl();\n+            let (ident, item_, extra_attrs) = self.parse_item_impl(ast::Unsafety::Normal);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "db122f271a9c45f81da830b4f06b1f7330636b98", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -917,12 +917,16 @@ impl<'a> State<'a> {\n                 try!(self.print_struct(&**struct_def, generics, item.ident, item.span));\n             }\n \n-            ast::ItemImpl(ref generics,\n+            ast::ItemImpl(unsafety,\n+                          ref generics,\n                           ref opt_trait,\n                           ref ty,\n                           ref impl_items) => {\n-                try!(self.head(visibility_qualified(item.vis,\n-                                                    \"impl\").as_slice()));\n+                try!(self.head(\"\"));\n+                try!(self.print_visibility(item.vis));\n+                try!(self.print_unsafety(unsafety));\n+                try!(self.word_nbsp(\"impl\"));\n+\n                 if generics.is_parameterized() {\n                     try!(self.print_generics(generics));\n                     try!(space(&mut self.s));"}, {"sha": "3535c6e267eba83ff0d2ed87d82647a5168a5878", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -282,7 +282,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_generics(type_parameters);\n             walk_enum_def(visitor, enum_definition, type_parameters)\n         }\n-        ItemImpl(ref type_parameters,\n+        ItemImpl(_,\n+                 ref type_parameters,\n                  ref trait_reference,\n                  ref typ,\n                  ref impl_items) => {"}, {"sha": "b96dbbf3cc964159bb4dfef44461921ad571bb09", "filename": "src/test/pretty/trait-safety.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f777ba2ecfcd8d914d37db310a6feb4ad5219e/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-safety.rs?ref=22f777ba2ecfcd8d914d37db310a6feb4ad5219e", "patch": "@@ -14,6 +14,10 @@ unsafe trait UnsafeTrait {\n     fn foo(&self);\n }\n \n+unsafe impl UnsafeTrait for int {\n+    fn foo(&self) { }\n+}\n+\n pub unsafe trait PubUnsafeTrait {\n     fn foo(&self);\n }"}]}