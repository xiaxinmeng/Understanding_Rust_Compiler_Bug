{"sha": "e049ba08086fadfb942e549cf73f6806d147b0a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDliYTA4MDg2ZmFkZmI5NDJlNTQ5Y2Y3M2Y2ODA2ZDE0N2IwYTA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-05-23T12:35:22Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-27T17:45:34Z"}, "message": "Make tidy happy", "tree": {"sha": "9985c9c0c3bde126bf211838982c503acc5719ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9985c9c0c3bde126bf211838982c503acc5719ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e049ba08086fadfb942e549cf73f6806d147b0a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+YXL4ACgkQgTGiTgx5\n769nLQ//Zg+rxS3GJTCpR39Bru/OU7Q+ESScLsWioly5jKT05nphHjr4OMwI1U85\nWcdFcqMk65hs2elkZY5WF6BOpT50G3dkRw0jwwmyGhFuOL+wtK6Zz8cGmfIBQpNO\n2/+U0OO09znUVAijwOxJ7USKfK2wND9lJ3YN0R/u8w4ufdxEBB2dM8qIJtbR469H\noNXaHY17wEMPzZj+jAeIXelyU88cPS9obzNr7GXGBCpZCBQ3lNcE7m1uvHhIA/az\n9UNe2wcfRzoq4PLwT07ecOMq0281+FDaqQnfngTdNr015Gcx1vY/53IRn1OAwqby\nm/8FlB4s3kH7gJG6MLhtUY278m61GZmzXr+2guBikDclsrxuteJBQ4Jdoms/Ps2t\nHvFcQGb5z+mS9jaVAoMZkVrNGRFjMjtcfk+HkifQ+L7kI3Tb14No20s5+MfM7t9B\n9tljTyXXH+jUGdCmp0r6eWxN5D7RFuXku5hLuHRm+PqNpRI5Ikhtj+J9tQmM+K21\nv1YDBXImJE6AzTbRZM6KHi+ME4SO8x9lsoWKiJAvyuoUTi0sKQm42J6OUnhD0/Zg\n5rQ2WtCv6eV2ZsnFOhJVlKTfJ0cVszYQ7mPobMzjwVxcpVHEIO3W3rDWUvh/6NZE\n3E0eS4JTyoSRvN7lPflIeofy5t1gI3ABOt/lg64M+XhVjSO+Mk4=\n=TPxa\n-----END PGP SIGNATURE-----", "payload": "tree 9985c9c0c3bde126bf211838982c503acc5719ef\nparent 072e230b1b39f44c609c845a51db7632647965a9\nauthor Santiago Pastorino <spastorino@gmail.com> 1590237322 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1603820734 -0300\n\nMake tidy happy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e049ba08086fadfb942e549cf73f6806d147b0a0", "html_url": "https://github.com/rust-lang/rust/commit/e049ba08086fadfb942e549cf73f6806d147b0a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e049ba08086fadfb942e549cf73f6806d147b0a0/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072e230b1b39f44c609c845a51db7632647965a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/072e230b1b39f44c609c845a51db7632647965a9", "html_url": "https://github.com/rust-lang/rust/commit/072e230b1b39f44c609c845a51db7632647965a9"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "9b868ed7a9e93868b712ac46ca19482e99839947", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -15,12 +15,12 @@ impl Foo for A {\n }\n \n fn foo(x: dyn Foo) {\n-    //~^ ERROR: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time [E0277]\n+    //~^ ERROR [E0277]\n     x.foo()\n }\n \n fn main() {\n     let x: Box<dyn Foo> = Box::new(A { v: 22 });\n     foo(*x);\n-    //~^ ERROR: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time [E0277]\n+    //~^ ERROR [E0277]\n }"}, {"sha": "9e53ff07917287492d3f9625d8250ac684e2130b", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,6 @@\n-#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals, unsized_fn_params)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+#![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize)]\n+#![feature(unsized_locals, unsized_fn_params)]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n // This tests a few edge-cases around `arbitrary_self_types`. Most specifically,\n // it checks that the `ObjectCandidate` you get from method matching can't"}, {"sha": "0a516c89a8b554c8bef5701ebc5240247be8eac5", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,46 +1,46 @@\n warning: the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:1:77\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:2:12\n    |\n-LL | #![feature(arbitrary_self_types, coerce_unsized, dispatch_from_dyn, unsize, unsized_locals, unsized_fn_params)]\n-   |                                                                             ^^^^^^^^^^^^^^\n+LL | #![feature(unsized_locals, unsized_fn_params)]\n+   |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #48055 <https://github.com/rust-lang/rust/issues/48055> for more information\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:86:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:87:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:103:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:104:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u64`\n    |                   |\n    |                   expected due to this\n \n error[E0034]: multiple applicable items in scope\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:121:15\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:122:15\n    |\n LL |     let z = x.foo();\n    |               ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `X` for the type `T`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:44:9\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:45:9\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: candidate #2 is defined in an impl of the trait `NuisanceFoo` for the type `T`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:71:9\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:72:9\n    |\n LL |         fn foo(self) {}\n    |         ^^^^^^^^^^^^\n note: candidate #3 is defined in the trait `FinalFoo`\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:58:5\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:59:5\n    |\n LL |     fn foo(&self) -> u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -58,23 +58,23 @@ LL |     let z = FinalFoo::foo(x);\n    |             ^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:138:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:139:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u8`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:156:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:157:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`\n    |                   |\n    |                   expected due to this\n \n error[E0308]: mismatched types\n-  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:173:24\n+  --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:174:24\n    |\n LL |     let _seetype: () = z;\n    |                   --   ^ expected `()`, found `u32`"}, {"sha": "59c02d42bf17ebe844771f6b20b27b313be15fed", "filename": "src/test/ui/moves/move-out-of-slice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-out-of-slice-2.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_locals)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n struct A;\n #[derive(Clone, Copy)]"}, {"sha": "ad73b720fa39d1b4790270a06ca785d3c843fc68", "filename": "src/test/ui/unsized-locals/borrow-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_locals, unsized_fn_params)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "d0ba6944a1e812e50d599556bead3e11b3ba6149", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_locals)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n pub trait Foo {\n     fn foo(self) -> String"}, {"sha": "9e46ef9be487cd18b10c5a8a5b440918962c77b4", "filename": "src/test/ui/unsized-locals/double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_locals, unsized_fn_params)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n pub trait Foo {\n     fn foo(self) -> String;"}, {"sha": "635d34f822914fef3e962af09aa2908c253dcea8", "filename": "src/test/ui/unsized-locals/issue-30276-feature-flagged.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-30276-feature-flagged.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_locals)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n struct Test([i32]);\n "}, {"sha": "63b0e830be4ed0290ce08a192b0b1a9ad04e6565", "filename": "src/test/ui/unsized-locals/issue-50940-with-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fissue-50940-with-feature.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_locals, unsized_fn_params)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n fn main() {\n     struct A<X: ?Sized>(X);"}, {"sha": "17fcdf7ea27eadeccacdd0ddf44dbbd7716a9ac5", "filename": "src/test/ui/unsized-locals/unsized-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n struct A<X: ?Sized>(X);\n "}, {"sha": "8b0232e5b0f90e69facb50bd37cb2183e96ba553", "filename": "src/test/ui/unsized-locals/unsized-exprs2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e049ba08086fadfb942e549cf73f6806d147b0a0/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs2.rs?ref=e049ba08086fadfb942e549cf73f6806d147b0a0", "patch": "@@ -1,5 +1,5 @@\n #![feature(unsized_tuple_coercion, unsized_locals, unsized_fn_params)]\n-//~^ WARN the feature `unsized_locals` is incomplete and may not be safe to use and/or cause compiler crashes [incomplete_features]\n+//~^ WARN the feature `unsized_locals` is incomplete\n \n struct A<X: ?Sized>(X);\n "}]}