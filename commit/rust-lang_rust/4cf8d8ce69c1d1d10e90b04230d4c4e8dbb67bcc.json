{"sha": "4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZjhkOGNlNjljMWQxZDEwZTkwYjA0MjMwZDRjNGU4ZGJiNjdiY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T23:01:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-04T23:01:44Z"}, "message": "auto merge of #13326 : alexcrichton/rust/rollup, r=alexcrichton\n\nCloses #13313 (Fix typo in README.md)\r\nCloses #13311 (Fix inner attribute syntax from `#[foo];` to `#![foo]`)\r\nCloses #13309 (Add stdlib docs to the Linux binary tarball.)\r\nCloses #13308 (syntax: remove obsolete mutability from ExprVec and ExprRepeat.)\r\nCloses #13306 (TrieSet should impl Set/MutableSet; add with_capacity to PriorityQueue/SmallIntMap)\r\nCloses #13303 (Register new snapshots)\r\nCloses #13274 (Added grow_fn and retain to Vec)\r\n\r\n*Issues Closed*\r\n\r\nCloses #13249", "tree": {"sha": "61f1237167d3663ba874e2b802cd9f5dd3c57041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f1237167d3663ba874e2b802cd9f5dd3c57041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "html_url": "https://github.com/rust-lang/rust/commit/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f1b9f6dc9418325f83d9766c7cfab30cb48018", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f1b9f6dc9418325f83d9766c7cfab30cb48018", "html_url": "https://github.com/rust-lang/rust/commit/e5f1b9f6dc9418325f83d9766c7cfab30cb48018"}, {"sha": "6d43138b75f009bfa6f0774953ef55fd91e9760a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d43138b75f009bfa6f0774953ef55fd91e9760a", "html_url": "https://github.com/rust-lang/rust/commit/6d43138b75f009bfa6f0774953ef55fd91e9760a"}], "stats": {"total": 455, "additions": 259, "deletions": 196}, "files": [{"sha": "c94b112e48e6991d41a3aaa1b4b1b071ff59fbe3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -5,7 +5,7 @@ documentation.\n \n ## Quick Start\n \n-1. Download a [binary insaller][installer] for your platform.\n+1. Download a [binary installer][installer] for your platform.\n 2. Read the [tutorial].\n 3. Enjoy!\n "}, {"sha": "43af4f9014067d2375457871834e4a18fa4b3b9a", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -215,7 +215,7 @@ dist-install-dir-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n dist-install-dir-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n dist-install-dir-$(1): PREPARE_CLEAN=true\n-dist-install-dir-$(1): prepare-base-dir-$(1)\n+dist-install-dir-$(1): prepare-base-dir-$(1) docs compiler-docs\n \t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find . -type f | sed 's/^\\.\\///') \\\n       > tmp/dist/manifest-$(1).in\n \t$$(Q)mv tmp/dist/manifest-$(1).in $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/rustlib/manifest.in\n@@ -224,6 +224,7 @@ dist-install-dir-$(1): prepare-base-dir-$(1)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)README.md $$(PREPARE_DEST_DIR)\n+\t$$(Q)cp -r doc $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_BIN_CMD) $$(S)src/etc/install.sh $$(PREPARE_DEST_DIR)\n \n dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1)"}, {"sha": "47b629ac4d0908da7ff623185e5d415d926a8c20", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -294,7 +294,7 @@ asm!(assembly template\n    );\n ```\n \n-Any use of `asm` is feature gated (requires `#[feature(asm)];` on the\n+Any use of `asm` is feature gated (requires `#![feature(asm)]` on the\n crate to allow) and of course requires an `unsafe` block.\n \n > **Note**: the examples here are given in x86/x86-64 assembly, but all\n@@ -306,7 +306,7 @@ The `assembly template` is the only required parameter and must be a\n literal string (i.e `\"\"`)\n \n ```\n-#[feature(asm)];\n+#![feature(asm)]\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]\n@@ -334,7 +334,7 @@ Output operands, input operands, clobbers and options are all optional\n but you must add the right number of `:` if you skip them:\n \n ```\n-# #[feature(asm)];\n+# #![feature(asm)]\n # #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n # fn main() { unsafe {\n asm!(\"xor %eax, %eax\"\n@@ -348,7 +348,7 @@ asm!(\"xor %eax, %eax\"\n Whitespace also doesn't matter:\n \n ```\n-# #[feature(asm)];\n+# #![feature(asm)]\n # #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n # fn main() { unsafe {\n asm!(\"xor %eax, %eax\" ::: \"eax\");\n@@ -362,7 +362,7 @@ Input and output operands follow the same format: `:\n expressions must be mutable lvalues:\n \n ```\n-# #[feature(asm)];\n+# #![feature(asm)]\n # #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n fn add(a: int, b: int) -> int {\n     let mut c = 0;\n@@ -390,7 +390,7 @@ compiler not to assume any values loaded into those registers will\n stay valid.\n \n ```\n-# #[feature(asm)];\n+# #![feature(asm)]\n # #[cfg(target_arch = \"x86\")] #[cfg(target_arch = \"x86_64\")]\n # fn main() { unsafe {\n // Put the value 0x200 in eax"}, {"sha": "de0164cc6b68fcc0abe19f8445fd4c94a13bc5db", "filename": "src/doc/po/ja/rust.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fdoc%2Fpo%2Fja%2Frust.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fdoc%2Fpo%2Fja%2Frust.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Frust.md.po?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,5 +1,5 @@\n # Japanese translations for Rust package\n-# Copyright (C) 2013 The Rust Project Developers\n+# Copyright (C) 2013-2014 The Rust Project Developers\n # This file is distributed under the same license as the Rust package.\n # Automatically generated, 2013.\n #\n@@ -886,7 +886,7 @@ msgstr \"\"\n #: src/doc/rust.md:2008\n #, fuzzy\n #| msgid \"~~~~ use std::task::spawn;\"\n-msgid \"~~~~ {.ignore} #[warn(unstable)];\"\n+msgid \"~~~~ {.ignore} #![warn(unstable)]\"\n msgstr \"\"\n \"~~~~\\n\"\n \"use std::task::spawn;\""}, {"sha": "68423b416f645d7a73a7776894a396b67655120f", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -54,7 +54,7 @@ def scrub(b):\n #[crate_id=\\\"run_pass_stage2#0.1\\\"];\n #[crate_id=\\\"run_pass_stage2#0.1\\\"];\n #[feature(globs, macro_rules, struct_variant, managed_boxes)];\n-#[allow(warnings)];\n+#![allow(warnings)]\n extern crate collections;\n \"\"\"\n )"}, {"sha": "be42fab8b544eb799682ccaea0acc06bb134b2ec", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -23,7 +23,6 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n #![allow(missing_doc)]\n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n \n extern crate collections;\n "}, {"sha": "ef5289ae373d86fae1d02fe36c688a5d570a4d4a", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -22,8 +22,6 @@\n \n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n \n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n-\n extern crate rand;\n \n #[cfg(test)] extern crate test;"}, {"sha": "a13785104abd59f8d930d4b5f36706b62d7d0779", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -117,6 +117,11 @@ impl<T:Ord> PriorityQueue<T> {\n     /// Create an empty PriorityQueue\n     pub fn new() -> PriorityQueue<T> { PriorityQueue{data: ~[],} }\n \n+    /// Create an empty PriorityQueue with capacity `capacity`\n+    pub fn with_capacity(capacity: uint) -> PriorityQueue<T> {\n+        PriorityQueue { data: slice::with_capacity(capacity) }\n+    }\n+\n     /// Create a PriorityQueue from a vector (heapify)\n     pub fn from_vec(xs: ~[T]) -> PriorityQueue<T> {\n         let mut q = PriorityQueue{data: xs,};"}, {"sha": "bd4f85aa81a7881d21b8e38c5a5f1240321e5031", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -112,6 +112,11 @@ impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap\n     pub fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n \n+    /// Create an empty SmallIntMap with capacity `capacity`\n+    pub fn with_capacity(capacity: uint) -> SmallIntMap<V> {\n+        SmallIntMap { v: slice::with_capacity(capacity) }\n+    }\n+\n     pub fn get<'a>(&'a self, key: &uint) -> &'a V {\n         self.find(key).expect(\"key not present\")\n     }"}, {"sha": "8b83e658386975c433e8892c9f6023b257a82fb1", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -293,32 +293,46 @@ impl Mutable for TrieSet {\n     fn clear(&mut self) { self.map.clear() }\n }\n \n-impl TrieSet {\n-    /// Create an empty TrieSet\n+impl Set<uint> for TrieSet {\n     #[inline]\n-    pub fn new() -> TrieSet {\n-        TrieSet{map: TrieMap::new()}\n+    fn contains(&self, value: &uint) -> bool {\n+        self.map.contains_key(value)\n     }\n \n-    /// Return true if the set contains a value\n     #[inline]\n-    pub fn contains(&self, value: &uint) -> bool {\n-        self.map.contains_key(value)\n+    fn is_disjoint(&self, other: &TrieSet) -> bool {\n+        self.iter().all(|v| !other.contains(&v))\n     }\n \n-    /// Add a value to the set. Return true if the value was not already\n-    /// present in the set.\n     #[inline]\n-    pub fn insert(&mut self, value: uint) -> bool {\n+    fn is_subset(&self, other: &TrieSet) -> bool {\n+        self.iter().all(|v| other.contains(&v))\n+    }\n+\n+    #[inline]\n+    fn is_superset(&self, other: &TrieSet) -> bool {\n+        other.is_subset(self)\n+    }\n+}\n+\n+impl MutableSet<uint> for TrieSet {\n+    #[inline]\n+    fn insert(&mut self, value: uint) -> bool {\n         self.map.insert(value, ())\n     }\n \n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n     #[inline]\n-    pub fn remove(&mut self, value: &uint) -> bool {\n+    fn remove(&mut self, value: &uint) -> bool {\n         self.map.remove(value)\n     }\n+}\n+\n+impl TrieSet {\n+    /// Create an empty TrieSet\n+    #[inline]\n+    pub fn new() -> TrieSet {\n+        TrieSet{map: TrieMap::new()}\n+    }\n \n     /// Visit all values in reverse order\n     #[inline]"}, {"sha": "9d4f2e2f8f0825376ad73af463e74f7336c0d1d0", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -87,8 +87,6 @@\n #![deny(missing_doc)]\n #![deny(deprecated_owned_vector)]\n \n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n-\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n use std::cmp::Eq;"}, {"sha": "0656dd1f641633abde9c26befe165d5f26d4e01e", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,7 +15,7 @@ Utilities for program-wide and customizable logging\n ## Example\n \n ```\n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n \n fn main() {"}, {"sha": "f1d4a318bf080ff1bfd0a4b2babbcc939a00a520", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -21,7 +21,7 @@\n /// # Example\n ///\n /// ```\n-/// #[feature(phase)];\n+/// #![feature(phase)]\n /// #[phase(syntax, link)] extern crate log;\n ///\n /// # fn main() {\n@@ -45,7 +45,7 @@ macro_rules! log(\n /// # Example\n ///\n /// ```\n-/// #[feature(phase)];\n+/// #![feature(phase)]\n /// #[phase(syntax, link)] extern crate log;\n ///\n /// # fn main() {\n@@ -63,7 +63,7 @@ macro_rules! error(\n /// # Example\n ///\n /// ```\n-/// #[feature(phase)];\n+/// #![feature(phase)]\n /// #[phase(syntax, link)] extern crate log;\n ///\n /// # fn main() {\n@@ -81,7 +81,7 @@ macro_rules! warn(\n /// # Example\n ///\n /// ```\n-/// #[feature(phase)];\n+/// #![feature(phase)]\n /// #[phase(syntax, link)] extern crate log;\n ///\n /// # fn main() {\n@@ -101,7 +101,7 @@ macro_rules! info(\n /// # Example\n ///\n /// ```\n-/// #[feature(phase)];\n+/// #![feature(phase)]\n /// #[phase(syntax, link)] extern crate log;\n ///\n /// # fn main() {\n@@ -118,7 +118,7 @@ macro_rules! debug(\n /// # Example\n ///\n /// ```\n-/// #[feature(phase)];\n+/// #![feature(phase)]\n /// #[phase(syntax, link)] extern crate log;\n ///\n /// # fn main() {"}, {"sha": "7e05c4c961c9c55ffc38af322a46448c4dcbfbfa", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -51,8 +51,6 @@\n #![deny(unused_result, unused_must_use)]\n #![allow(non_camel_case_types)]\n \n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n-\n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the\n //    answer is that you don't need them)"}, {"sha": "57b910093e0ea9296f7d590e891c17c2817ee01a", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -71,8 +71,6 @@ println!(\"{:?}\", tuple_ptr)\n        html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n #![feature(macro_rules, managed_boxes, phase)]\n-\n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n #![deny(deprecated_owned_vector)]\n \n #[cfg(test)]"}, {"sha": "86d2e039505f186f1a3e51435773e69e887fb07d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -404,21 +404,17 @@ fn is_test_crate(krate: &ast::Crate) -> bool {\n }\n \n fn mk_test_descs(cx: &TestCtxt) -> @ast::Expr {\n-    let mut descs = Vec::new();\n     debug!(\"building test vector from {} tests\", cx.testfns.borrow().len());\n-    for test in cx.testfns.borrow().iter() {\n-        descs.push(mk_test_desc_and_fn_rec(cx, test));\n-    }\n-\n-    let inner_expr = @ast::Expr {\n-        id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprVec(descs, ast::MutImmutable),\n-        span: DUMMY_SP,\n-    };\n \n     @ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprVstore(inner_expr, ast::ExprVstoreSlice),\n+        node: ast::ExprVstore(@ast::Expr {\n+            id: ast::DUMMY_NODE_ID,\n+            node: ast::ExprVec(cx.testfns.borrow().iter().map(|test| {\n+                mk_test_desc_and_fn_rec(cx, test)\n+            }).collect()),\n+            span: DUMMY_SP,\n+        }, ast::ExprVstoreSlice),\n         span: DUMMY_SP,\n     }\n }"}, {"sha": "893cc019ca751b22c2a91761a911fa0892e6eb28", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -31,9 +31,6 @@ This API is completely unstable and subject to change.\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n            default_type_params, phase)]\n \n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n-#![allow(unrecognized_lint)] // NOTE: remove after a stage0 snap\n-\n extern crate flate;\n extern crate arena;\n extern crate syntax;"}, {"sha": "d631340fc4e31c974c1ed4bc287b2b5ed3157a7e", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -347,7 +347,7 @@ impl<'a> CFGBuilder<'a> {\n                 self.add_node(expr.id, [])\n             }\n \n-            ast::ExprVec(ref elems, _) => {\n+            ast::ExprVec(ref elems) => {\n                 self.straightline(expr, pred, elems.as_slice())\n             }\n \n@@ -379,7 +379,7 @@ impl<'a> CFGBuilder<'a> {\n                 self.straightline(expr, base_exit, field_exprs.as_slice())\n             }\n \n-            ast::ExprRepeat(elem, count, _) => {\n+            ast::ExprRepeat(elem, count) => {\n                 self.straightline(expr, pred, [elem, count])\n             }\n "}, {"sha": "e3a0a6a9782290bb52979d75afcbfcfb21190b4f", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -157,7 +157,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n           }\n           ExprVstore(_, ExprVstoreMutSlice) |\n           ExprVstore(_, ExprVstoreSlice) |\n-          ExprVec(_, MutImmutable) |\n+          ExprVec(_) |\n           ExprAddrOf(MutImmutable, _) |\n           ExprParen(..) |\n           ExprField(..) |"}, {"sha": "aca8367f0b83720665710acb88abcb1f69d8e318", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -213,7 +213,7 @@ impl<'a> ConstEvalVisitor<'a> {\n                 join(self.classify(a), self.classify(b)),\n \n             ast::ExprTup(ref es) |\n-            ast::ExprVec(ref es, ast::MutImmutable) =>\n+            ast::ExprVec(ref es) =>\n                 join_all(es.iter().map(|e| self.classify(*e))),\n \n             ast::ExprVstore(e, vstore) => {"}, {"sha": "2ef1adba771dc17669ff530888524b0546c39910", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -538,11 +538,11 @@ impl<'a, 'b, O:DataFlowOperator> PropagationContext<'a, 'b, O> {\n                 self.walk_expr(l, in_out, loop_scopes);\n             }\n \n-            ast::ExprVec(ref exprs, _) => {\n+            ast::ExprVec(ref exprs) => {\n                 self.walk_exprs(exprs.as_slice(), in_out, loop_scopes)\n             }\n \n-            ast::ExprRepeat(l, r, _) => {\n+            ast::ExprRepeat(l, r) => {\n                 self.walk_expr(l, in_out, loop_scopes);\n                 self.walk_expr(r, in_out, loop_scopes);\n             }"}, {"sha": "09f396e932ff2a1d1cd67212bb1bd36f6658d195", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -309,7 +309,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n             let target_ty = ty::expr_ty(cx.tcx, e);\n             check_trait_cast(cx, source_ty, target_ty, source.span);\n         }\n-        ExprRepeat(element, count_expr, _) => {\n+        ExprRepeat(element, count_expr) => {\n             let count = ty::eval_repeat_count(cx.tcx, count_expr);\n             if count > 1 {\n                 let element_ty = ty::expr_ty(cx.tcx, element);"}, {"sha": "046103c439db993277a6922c7155a431697d35a1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1109,11 +1109,11 @@ impl<'a> Liveness<'a> {\n             self.propagate_through_expr(expr, succ)\n           }\n \n-          ExprVec(ref exprs, _) => {\n+          ExprVec(ref exprs) => {\n             self.propagate_through_exprs(exprs.as_slice(), succ)\n           }\n \n-          ExprRepeat(element, count, _) => {\n+          ExprRepeat(element, count) => {\n             let succ = self.propagate_through_expr(count, succ);\n             self.propagate_through_expr(element, succ)\n           }"}, {"sha": "dbc28f9fdd5626c1003f59b7eadd01c9ada8abca", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -473,7 +473,7 @@ impl<'a> VisitContext<'a> {\n                 self.use_expr(base, expr_mode);\n             }\n \n-            ExprVec(ref exprs, _) => {\n+            ExprVec(ref exprs) => {\n                 self.consume_exprs(exprs.as_slice());\n             }\n \n@@ -539,7 +539,7 @@ impl<'a> VisitContext<'a> {\n                 // }\n             }\n \n-            ExprRepeat(base, count, _) => {\n+            ExprRepeat(base, count) => {\n                 self.consume_expr(base);\n                 self.consume_expr(count);\n             }"}, {"sha": "8a5e0d3df1711d9cc3fd756c777aa7dd79b60f76", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -724,7 +724,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor,\n                 visitor.region_maps.record_rvalue_scope(subexpr.id, blk_id);\n                 record_rvalue_scope_if_borrow_expr(visitor, subexpr, blk_id);\n             }\n-            ast::ExprVec(ref subexprs, _) |\n+            ast::ExprVec(ref subexprs) |\n             ast::ExprTup(ref subexprs) => {\n                 for &subexpr in subexprs.iter() {\n                     record_rvalue_scope_if_borrow_expr("}, {"sha": "a2b46b1f2a1d091367d060f09b047c7c6c330058", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -557,7 +557,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                    inlineable.iter().fold(true, |a, &b| a && b))\n               })\n           }\n-          ast::ExprVec(ref es, ast::MutImmutable) => {\n+          ast::ExprVec(ref es) => {\n             let (v, _, inlineable) = const_vec(cx,\n                                                e,\n                                                es.as_slice(),\n@@ -573,7 +573,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                     _ => { cx.sess().span_bug(e.span, \"bad const-slice lit\") }\n                 }\n               }\n-              ast::ExprVec(ref es, ast::MutImmutable) => {\n+              ast::ExprVec(ref es) => {\n                 let (cv, llunitty, _) = const_vec(cx,\n                                                   e,\n                                                   es.as_slice(),\n@@ -592,7 +592,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               _ => cx.sess().span_bug(e.span, \"bad const-slice expr\")\n             }\n           }\n-          ast::ExprRepeat(elem, count, _) => {\n+          ast::ExprRepeat(elem, count) => {\n             let vec_ty = ty::expr_ty(cx.tcx(), e);\n             let unit_ty = ty::sequence_element_type(cx.tcx(), vec_ty);\n             let llunitty = type_of::type_of(cx, unit_ty);"}, {"sha": "0a610538f316fcf4a6b7d5bb02c9700d41fd517b", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -2619,15 +2619,15 @@ fn populate_scope_map(cx: &CrateContext,\n                 walk_expr(cx, rhs, scope_stack, scope_map);\n             }\n \n-            ast::ExprVec(ref init_expressions, _) |\n-            ast::ExprTup(ref init_expressions)    => {\n+            ast::ExprVec(ref init_expressions) |\n+            ast::ExprTup(ref init_expressions) => {\n                 for ie in init_expressions.iter() {\n                     walk_expr(cx, *ie, scope_stack, scope_map);\n                 }\n             }\n \n-            ast::ExprAssign(sub_exp1, sub_exp2)    |\n-            ast::ExprRepeat(sub_exp1, sub_exp2, _) => {\n+            ast::ExprAssign(sub_exp1, sub_exp2) |\n+            ast::ExprRepeat(sub_exp1, sub_exp2) => {\n                 walk_expr(cx, sub_exp1, scope_stack, scope_map);\n                 walk_expr(cx, sub_exp2, scope_stack, scope_map);\n             }"}, {"sha": "b47f509aeeec759a99198f37c2025f5705be2ad4", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -392,7 +392,7 @@ pub fn write_content<'a>(\n                 }\n             }\n         }\n-        ast::ExprVec(ref elements, _) => {\n+        ast::ExprVec(ref elements) => {\n             match dest {\n                 Ignore => {\n                     for element in elements.iter() {\n@@ -418,7 +418,7 @@ pub fn write_content<'a>(\n             }\n             return bcx;\n         }\n-        ast::ExprRepeat(element, count_expr, _) => {\n+        ast::ExprRepeat(element, count_expr) => {\n             match dest {\n                 Ignore => {\n                     return expr::trans_into(bcx, element, Ignore);\n@@ -486,8 +486,8 @@ pub fn elements_required(bcx: &Block, content_expr: &ast::Expr) -> uint {\n                 }\n             }\n         },\n-        ast::ExprVec(ref es, _) => es.len(),\n-        ast::ExprRepeat(_, count_expr, _) => {\n+        ast::ExprVec(ref es) => es.len(),\n+        ast::ExprRepeat(_, count_expr) => {\n             ty::eval_repeat_count(bcx.tcx(), count_expr)\n         }\n         _ => bcx.tcx().sess.span_bug(content_expr.span,"}, {"sha": "a1e878b592ea6efdd41bbebbc2e16f204cfb5704", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -2482,13 +2482,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             ty::mk_str(tcx, tt)\n           }\n-          ast::ExprVec(ref args, mutbl) => {\n+          ast::ExprVec(ref args) => {\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mut any_error = false;\n             let mut any_bot = false;\n             let mutability = match vst {\n                 ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => mutbl,\n+                _ => ast::MutImmutable,\n             };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             for e in args.iter() {\n@@ -2509,13 +2509,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 ty::mk_vec(tcx, ty::mt {ty: t, mutbl: mutability}, tt)\n             }\n           }\n-          ast::ExprRepeat(element, count_expr, mutbl) => {\n+          ast::ExprRepeat(element, count_expr) => {\n             check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n             let _ = ty::eval_repeat_count(fcx, count_expr);\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mutability = match vst {\n                 ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => mutbl,\n+                _ => ast::MutImmutable,\n             };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             check_expr_has_type(fcx, element, t);\n@@ -3017,16 +3017,16 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_ty(id, t_1);\n         }\n       }\n-      ast::ExprVec(ref args, mutbl) => {\n+      ast::ExprVec(ref args) => {\n         let t: ty::t = fcx.infcx().next_ty_var();\n         for e in args.iter() {\n             check_expr_has_type(fcx, *e, t);\n         }\n-        let typ = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: mutbl},\n+        let typ = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: ast::MutImmutable},\n                              ty::vstore_fixed(args.len()));\n         fcx.write_ty(id, typ);\n       }\n-      ast::ExprRepeat(element, count_expr, mutbl) => {\n+      ast::ExprRepeat(element, count_expr) => {\n         check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n         let count = ty::eval_repeat_count(fcx, count_expr);\n         let t: ty::t = fcx.infcx().next_ty_var();\n@@ -3039,7 +3039,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_bot(id);\n         }\n         else {\n-            let t = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: mutbl},\n+            let t = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: ast::MutImmutable},\n                                ty::vstore_fixed(count));\n             fcx.write_ty(id, t);\n         }\n@@ -3864,7 +3864,7 @@ pub fn ast_expr_vstore_to_vstore(fcx: &FnCtxt,\n                     // string literals and *empty slices* live in static memory\n                     ty::vstore_slice(ty::ReStatic)\n                 }\n-                ast::ExprVec(ref elements, _) if elements.len() == 0 => {\n+                ast::ExprVec(ref elements) if elements.len() == 0 => {\n                     // string literals and *empty slices* live in static memory\n                     ty::vstore_slice(ty::ReStatic)\n                 }"}, {"sha": "42d35b608960a44f58ce3f980319a72e81e7a882", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -57,9 +57,7 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n-#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+#![deny(missing_doc)]\n #![allow(unknown_features)] // NOTE: remove after a stage0 snap\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print"}, {"sha": "30416b2824136da751e6ec39d46f82bc60ab5513", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -15,7 +15,7 @@ use cmp::{Ord, Eq, Ordering, TotalEq, TotalOrd};\n use container::{Container, Mutable};\n use default::Default;\n use fmt;\n-use iter::{DoubleEndedIterator, FromIterator, Extendable, Iterator};\n+use iter::{DoubleEndedIterator, FromIterator, Extendable, Iterator, range};\n use libc::{free, c_void};\n use mem::{size_of, move_val_init};\n use mem;\n@@ -1135,6 +1135,56 @@ impl<T> Vec<T> {\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         self.as_mut_slice().as_mut_ptr()\n     }\n+\n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// This method operates in place and preserves the order the retained elements.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// vec.retain(|x| x%2 == 0);\n+    /// assert_eq!(vec, vec!(2, 4));\n+    /// ```\n+    pub fn retain(&mut self, f: |&T| -> bool) {\n+        let len = self.len();\n+        let mut del = 0u;\n+        {\n+            let v = self.as_mut_slice();\n+\n+            for i in range(0u, len) {\n+                if !f(&v[i]) {\n+                    del += 1;\n+                } else if del > 0 {\n+                    v.swap(i-del, i);\n+                }\n+            }\n+        }\n+        if del > 0 {\n+            self.truncate(len - del);\n+        }\n+    }\n+\n+    /// Expands a vector in place, initializing the new elements to the result of a function.\n+    ///\n+    /// The vector is grown by `n` elements. The i-th new element are initialized to the value\n+    /// returned by `f(i)` where `i` is in the range [0, n).\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut vec = vec!(0u, 1);\n+    /// vec.grow_fn(3, |i| i);\n+    /// assert_eq!(vec, vec!(0, 1, 0, 1, 2));\n+    /// ```\n+    pub fn grow_fn(&mut self, n: uint, f: |uint| -> T) {\n+        self.reserve_additional(n);\n+        for i in range(0u, n) {\n+            self.push(f(i));\n+        }\n+    }\n }\n \n impl<T:TotalOrd> Vec<T> {\n@@ -1523,4 +1573,17 @@ mod tests {\n         v.clone_from(&three);\n         assert_eq!(v, three)\n     }\n+\n+    fn test_grow_fn() {\n+        let mut v = Vec::from_slice([0u, 1]);\n+        v.grow_fn(3, |i| i);\n+        assert!(v == Vec::from_slice([0u, 1, 0, 1, 2]));\n+    }\n+\n+    #[test]\n+    fn test_retain() {\n+        let mut vec = Vec::from_slice([1u, 2, 3, 4]);\n+        vec.retain(|x| x%2 == 0);\n+        assert!(vec == Vec::from_slice([2u, 4]));\n+    }\n }"}, {"sha": "58bd837104c58517eab2a8adfe243ee89250886a", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -22,9 +22,7 @@\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n \n-// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n-#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+#![deny(missing_doc)]\n \n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;"}, {"sha": "6a5acff3fe04e42d293b2ca954d8fdc0708be276", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -493,7 +493,7 @@ pub enum Expr_ {\n     ExprVstore(@Expr, ExprVstore),\n     // First expr is the place; second expr is the value.\n     ExprBox(@Expr, @Expr),\n-    ExprVec(Vec<@Expr>, Mutability),\n+    ExprVec(Vec<@Expr>),\n     ExprCall(@Expr, Vec<@Expr>),\n     ExprMethodCall(Ident, Vec<P<Ty>>, Vec<@Expr>),\n     ExprTup(Vec<@Expr>),\n@@ -536,7 +536,7 @@ pub enum Expr_ {\n     ExprStruct(Path, Vec<Field> , Option<@Expr> /* base */),\n \n     // A vector literal constructed from one repeated element.\n-    ExprRepeat(@Expr /* element */, @Expr /* count */, Mutability),\n+    ExprRepeat(@Expr /* element */, @Expr /* count */),\n \n     // No-op: used solely so we can pretty-print faithfully\n     ExprParen(@Expr)"}, {"sha": "b7c12cd4fdcae29cfb31889b8df0edb5a5717c54", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -579,7 +579,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprVstore(expr, vst))\n     }\n     fn expr_vec(&self, sp: Span, exprs: Vec<@ast::Expr> ) -> @ast::Expr {\n-        self.expr(sp, ast::ExprVec(exprs, ast::MutImmutable))\n+        self.expr(sp, ast::ExprVec(exprs))\n     }\n     fn expr_vec_ng(&self, sp: Span) -> @ast::Expr {\n         self.expr_call_global(sp,"}, {"sha": "e21f14e4a9622af3698e370281e2c08295be21ca", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -740,11 +740,11 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         ExprBox(p, e) => {\n             ExprBox(folder.fold_expr(p), folder.fold_expr(e))\n         }\n-        ExprVec(ref exprs, mutt) => {\n-            ExprVec(exprs.iter().map(|&x| folder.fold_expr(x)).collect(), mutt)\n+        ExprVec(ref exprs) => {\n+            ExprVec(exprs.iter().map(|&x| folder.fold_expr(x)).collect())\n         }\n-        ExprRepeat(expr, count, mutt) => {\n-            ExprRepeat(folder.fold_expr(expr), folder.fold_expr(count), mutt)\n+        ExprRepeat(expr, count) => {\n+            ExprRepeat(folder.fold_expr(expr), folder.fold_expr(count))\n         }\n         ExprTup(ref elts) => ExprTup(elts.iter().map(|x| folder.fold_expr(*x)).collect()),\n         ExprCall(f, ref args) => {"}, {"sha": "012bc50ecabc80fa315107153d9606841c209dfe", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -30,8 +30,6 @@ This API is completely unstable and subject to change.\n            quote)]\n #![allow(deprecated)]\n \n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n-\n extern crate serialize;\n extern crate term;\n extern crate collections;"}, {"sha": "94f5458ba535e6fc63b7406ea1bfcf7cb46ed123", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1819,12 +1819,11 @@ impl<'a> Parser<'a> {\n             return self.parse_block_expr(lo, UnsafeBlock(ast::UserProvided));\n         } else if self.token == token::LBRACKET {\n             self.bump();\n-            let mutbl = MutImmutable;\n \n             if self.token == token::RBRACKET {\n                 // Empty vector.\n                 self.bump();\n-                ex = ExprVec(Vec::new(), mutbl);\n+                ex = ExprVec(Vec::new());\n             } else {\n                 // Nonempty vector.\n                 let first_expr = self.parse_expr();\n@@ -1835,7 +1834,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                     let count = self.parse_expr();\n                     self.expect(&token::RBRACKET);\n-                    ex = ExprRepeat(first_expr, count, mutbl);\n+                    ex = ExprRepeat(first_expr, count);\n                 } else if self.token == token::COMMA {\n                     // Vector with two or more elements.\n                     self.bump();\n@@ -1846,11 +1845,11 @@ impl<'a> Parser<'a> {\n                     );\n                     let mut exprs = vec!(first_expr);\n                     exprs.push_all_move(remaining_exprs);\n-                    ex = ExprVec(exprs, mutbl);\n+                    ex = ExprVec(exprs);\n                 } else {\n                     // Vector with one element.\n                     self.expect(&token::RBRACKET);\n-                    ex = ExprVec(vec!(first_expr), mutbl);\n+                    ex = ExprVec(vec!(first_expr));\n                 }\n             }\n             hi = self.last_span.hi;"}, {"sha": "fe969c6fd51a575ad00791c1f82c59d14140a99f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -915,9 +915,6 @@ impl<'a> State<'a> {\n             match attr.node.style {\n                 ast::AttrInner => {\n                     try!(self.print_attribute(attr));\n-                    if !attr.node.is_sugared_doc {\n-                        try!(word(&mut self.s, \";\"));\n-                    }\n                     count += 1;\n                 }\n                 _ => {/* fallthrough */ }\n@@ -935,7 +932,10 @@ impl<'a> State<'a> {\n         if attr.node.is_sugared_doc {\n             word(&mut self.s, attr.value_str().unwrap().get())\n         } else {\n-            try!(word(&mut self.s, \"#[\"));\n+            match attr.node.style {\n+                ast::AttrInner => try!(word(&mut self.s, \"#![\")),\n+                ast::AttrOuter => try!(word(&mut self.s, \"#[\")),\n+            }\n             try!(self.print_meta_item(attr.meta()));\n             word(&mut self.s, \"]\")\n         }\n@@ -1110,25 +1110,17 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\")\"));\n                 try!(self.print_expr(e));\n             }\n-            ast::ExprVec(ref exprs, mutbl) => {\n+            ast::ExprVec(ref exprs) => {\n                 try!(self.ibox(indent_unit));\n                 try!(word(&mut self.s, \"[\"));\n-                if mutbl == ast::MutMutable {\n-                    try!(word(&mut self.s, \"mut\"));\n-                    if exprs.len() > 0u { try!(self.nbsp()); }\n-                }\n                 try!(self.commasep_exprs(Inconsistent, exprs.as_slice()));\n                 try!(word(&mut self.s, \"]\"));\n                 try!(self.end());\n             }\n \n-            ast::ExprRepeat(element, count, mutbl) => {\n+            ast::ExprRepeat(element, count) => {\n                 try!(self.ibox(indent_unit));\n                 try!(word(&mut self.s, \"[\"));\n-                if mutbl == ast::MutMutable {\n-                    try!(word(&mut self.s, \"mut\"));\n-                    try!(self.nbsp());\n-                }\n                 try!(self.print_expr(element));\n                 try!(word(&mut self.s, \",\"));\n                 try!(word(&mut self.s, \"..\"));"}, {"sha": "81e5e2280275f0f946b9636b602bf2cde4c2ad0c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -635,10 +635,10 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n             visitor.visit_expr(place, env.clone());\n             visitor.visit_expr(subexpression, env.clone())\n         }\n-        ExprVec(ref subexpressions, _) => {\n+        ExprVec(ref subexpressions) => {\n             walk_exprs(visitor, subexpressions.as_slice(), env.clone())\n         }\n-        ExprRepeat(element, count, _) => {\n+        ExprRepeat(element, count) => {\n             visitor.visit_expr(element, env.clone());\n             visitor.visit_expr(count, env.clone())\n         }"}, {"sha": "a94a13aa0177c65bd8b945f5cdf2574e4155f7c8", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -21,9 +21,7 @@\n \n #![feature(macro_rules)]\n \n-// #![deny(missing_doc)] // NOTE: uncomment after a stage0 snap\n-#![allow(missing_doc)] // NOTE: remove after a stage0 snap\n-#![allow(visible_private_types)] // NOTE: remove after a stage0 snap\n+#![deny(missing_doc)]\n \n extern crate collections;\n "}, {"sha": "83a8e7bb9658dbbc8b1e76dfb0f523b6e40f8738", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,3 +1,11 @@\n+S 2014-04-03 e7fe207\n+  freebsd-x86_64 6d40f547d13896ab9d9dd4a4fdf2e72be553b01b\n+  linux-i386 875a8f6956f7d703f7206db91ca2a9b67c244cf8\n+  linux-x86_64 4d90df12231d1c9f51b5ae6e75546ccddcf0534b\n+  macos-i386 e5486efa1356abca8f8d5cac9aa6135c9626ab51\n+  macos-x86_64 8341419e4295d780f72950cfe2187195d0d03e83\n+  winnt-i386 60c2fb349ac8a7ad30c9ba2518a61e669debb7bf\n+\n S 2014-03-28 b8601a3\n   freebsd-x86_64 c6b0651b2a90697754920ad381c13f9b7942ab47\n   linux-i386 3bef5684fd0582fbd4ddebd4514182d4f72924f7"}, {"sha": "df4e0658cb83ac4786cabf7ae600d87d78b56fd5", "filename": "src/test/auxiliary/impl_privacy_xc_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"lib\"];\n+#![crate_type = \"lib\"]\n \n pub struct Fish {\n     pub x: int"}, {"sha": "4530fa4bc256d60f2f6ea4d989ba4f03b4e814f3", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[allow(unused_imports)];\n-#[feature(globs)];\n+#![feature(globs)]\n \n extern crate issue_2316_a;\n "}, {"sha": "b0a6e0f84fcd59c18365037ee4f6d563176b2d7b", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n \n pub fn foo<T>() {"}, {"sha": "210a47d2d039c0fc5f412f01f2e3877e6f6cce5a", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n // error-pattern: unresolved name\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n use module_of_many_things::*;\n "}, {"sha": "39b18e1c445a222ed6450a68c08a34c6941f242b", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n // error-pattern: unresolved\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n mod circ1 {\n     pub use circ2::f2;"}, {"sha": "b5c0157cb5e29ed3604b141f14fb827561e504e1", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n // error-pattern:declaration of `None` shadows\n use std::option::*;"}, {"sha": "365a2fbe287cf011ade8cef796005d0a305d721b", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test Can't use syntax crate here\n \n-#[feature(quote)];\n+#![feature(quote)]\n \n extern crate syntax;\n "}, {"sha": "f202f1bb73c42ef5b85bb13c16137b7a42aaf9a8", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test Can't use syntax crate here\n \n-#[feature(quote)];\n+#![feature(quote)]\n \n extern crate syntax;\n "}, {"sha": "91d53339648b01170ccdb052553ebc337958eda0", "filename": "src/test/debug-info/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fdebug-info%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fdebug-info%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimd.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -40,7 +40,7 @@\n \n // debugger:continue\n \n-#[allow(experimental)];\n+#![allow(experimental)]\n #[allow(unused_variable)];\n \n use std::unstable::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};"}, {"sha": "65dcf90056701835bc7a1daa81fea50350c2d144", "filename": "src/test/pretty/attr-fn-inner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-fn-inner.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -14,7 +14,7 @@\n // accidentally carried over to each inner function\n \n fn main() {\n-    #[inner_attr];\n+    #![inner_attr]\n     #[outer_attr]\n     fn f() { }\n "}, {"sha": "02d141f5163c9d748fa1fcd7b5000c06670c791d", "filename": "src/test/pretty/doc-comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fpretty%2Fdoc-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fpretty%2Fdoc-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdoc-comments.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -57,5 +57,5 @@ fn f() { }\n fn g() { }\n \n fn h() {\n-    #[doc = \"as do inner ones\"];\n+    #![doc = \"as do inner ones\"]\n }"}, {"sha": "b76591048ce69a39d4b6f8cf00e50927356da51c", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast #[feature] doesn't work with check-fast\n // pp-exact\n \n-#[feature(asm)];\n+#![feature(asm)]\n \n #[cfg = r#\"just parse this\"#]\n extern crate blah = r##\"blah\"##;"}, {"sha": "a67ab3d2efc2175d53707365a72d9650397794ee", "filename": "src/test/run-fail/glob-use-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Fglob-use-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Fglob-use-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fglob-use-std.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,7 +11,7 @@\n // Issue #7580\n \n // error-pattern:fail works\n-#[feature(globs)];\n+#![feature(globs)]\n \n use std::*;\n "}, {"sha": "385bc1452048704772a66b97f6978fa61e08c6ec", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n // error-pattern:whatever\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n use std::os;\n "}, {"sha": "3b5e27027b43c96b12814faf17299fb909865c88", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n // error-pattern:whatever\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n use std::os;\n use std::task;"}, {"sha": "b94045e5d124225d42ad181bd4aa17cccdae23d4", "filename": "src/test/run-fail/rt-set-exit-status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n // error-pattern:whatever\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n use std::os;\n "}, {"sha": "cde78da3f61bcdd9220c184016ff4de02ab78555", "filename": "src/test/run-pass-fulldeps/macro-crate-outlive-expansion-phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -14,7 +14,7 @@\n // ignore-android\n // ignore-cross-compile #12102\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate macro_crate_outlive_expansion_phase;"}, {"sha": "e30498bb3c1d4f90ca434b4c559af3ce3300e496", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -14,7 +14,7 @@\n // ignore-android\n // ignore-cross-compile #12102\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate macro_crate_test;"}, {"sha": "ff82ff62a59ee75fd3d44fe90387de665b588574", "filename": "src/test/run-pass-fulldeps/phase-syntax-link-does-resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fphase-syntax-link-does-resolve.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -24,7 +24,7 @@\n // can't run host binaries, and force-host to make this test build as the host\n // arch.\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax, link)]\n extern crate macro_crate_test;"}, {"sha": "1def436b4de0184a40fe0672b92bb5e6d991ae72", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -11,7 +11,7 @@\n // ignore-pretty\n // ignore-test\n \n-#[feature(quote)];\n+#![feature(quote)]\n \n extern crate syntax;\n "}, {"sha": "5180ac68482f0f51146fd457ac14be11c55a5227", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test\n \n-#[feature(quote)];\n+#![feature(quote)]\n #[feature(managed_boxes)];\n \n extern crate syntax;"}, {"sha": "ea2ffb8dcf89a16061e67750d1889fb8bdb0425a", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // ignore-android\n-#[feature(quote)];\n+#![feature(quote)]\n #[deny(unused_variable)];\n \n extern crate syntax;"}, {"sha": "54687c03da59677da94200f6ef3929368878e7ee", "filename": "src/test/run-pass-fulldeps/syntax-extension-fourcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -13,7 +13,7 @@\n // ignore-pretty\n // ignore-cross-compile\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate fourcc;"}, {"sha": "eb25d82e5491bf7fbabd7466c1633820896d0561", "filename": "src/test/run-pass-fulldeps/syntax-extension-hexfloat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-hexfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-hexfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-hexfloat.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -13,7 +13,7 @@\n // ignore-cross-compile #12102\n // ignore-fast\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax)]\n extern crate hexfloat;\n "}, {"sha": "5615089dcdc618f5edc47362f9f4226ca00dae3f", "filename": "src/test/run-pass/asm-concat-src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-concat-src.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n pub fn main() {\n     unsafe { asm!(concat!(\"\", \"\")) };"}, {"sha": "0b5502aa33079b4a248aa38dba5b76bbd52cfa95", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "de2630d1ca9a3a46c8063fb6dfc8be54d581a32d", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "10976c5c612cd7016bf1bcf225763fda03a43831", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -12,7 +12,7 @@\n // ignore-android (FIXME #11419)\n // exec-env:RUST_LOG=info\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax, link)]\n extern crate log;"}, {"sha": "460846ef31c111f89a4aec1ef3895dced73b2f1b", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -12,7 +12,7 @@\n // compile-flags: --cfg ndebug\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)]\n extern crate log;\n "}, {"sha": "e4f037e4563ce978a07bb57ccd94658f3e475dd2", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -15,7 +15,7 @@\n \n // Modified to not use export since it's going away. --pcw\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n mod foo {\n     use foo::bar::*;"}, {"sha": "7cdd932faf6fdd79712d97c1068ce389dfb6a8d5", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast: check-fast screws up repr paths\n \n #[feature(macro_rules)];\n-#[deny(warnings)];\n+#![deny(warnings)]\n #[allow(unused_must_use)];\n #[allow(deprecated_owned_vector)];\n "}, {"sha": "5f4bf557b23f6e81b1200068abecdfa57aa7f754", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;"}, {"sha": "e1ca890f4fde741664f0b86a480d4049b54606ce", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n #[allow(dead_assignment)];\n \n use std::mem::*;"}, {"sha": "24196c225719a113887d410990dad2b80e0a1b4f", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n pub fn main() {\n     use std::mem::replace;"}, {"sha": "867e12d4139ed68c3b404d1c41c31a2b3b21da3c", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {"}, {"sha": "00323b606495d92b06f474d01ef29e6beb92a0cf", "filename": "src/test/run-pass/issue-2526-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:issue-2526.rs\n \n-#[feature(globs)];\n+#![feature(globs)]\n #[allow(unused_imports)];\n \n extern crate issue_2526;"}, {"sha": "ae5a86c699eafa1dfaf04cd1b29e7b9f02e81c68", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -160,7 +160,7 @@ mod test_foreign_items {\n         use std::libc;\n \n         extern {\n-            #[attr];\n+            #![attr]\n \n             #[attr]\n             fn rust_get_test_int() -> libc::intptr_t;"}, {"sha": "4b2c98614931fd92b9e9885255ceec70181d3ed4", "filename": "src/test/run-pass/linkage1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Flinkage1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Flinkage1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinkage1.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -14,7 +14,7 @@\n // ignore-macos\n // aux-build:linkage1.rs\n \n-#[feature(linkage)];\n+#![feature(linkage)]\n \n extern crate other = \"linkage1\";\n "}, {"sha": "f5db1c7b1d6e7467943eaf1355eb7b0d0e70e97f", "filename": "src/test/run-pass/logging-enabled-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -12,7 +12,7 @@\n // compile-flags:--cfg ndebug\n // exec-env:RUST_LOG=logging-enabled-debug=debug\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)]\n extern crate log;\n "}, {"sha": "31437586897bb43f4cc323bfdb571bf22b006ab2", "filename": "src/test/run-pass/logging-enabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Flogging-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Flogging-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // exec-env:RUST_LOG=logging-enabled=info\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)]\n extern crate log;\n "}, {"sha": "75b001a71d2b6157acefad16c8bdbef3aaacee69", "filename": "src/test/run-pass/macro-crate-def-only.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fmacro-crate-def-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fmacro-crate-def-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-crate-def-only.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -11,7 +11,7 @@\n // aux-build:macro_crate_def_only.rs\n // ignore-fast\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate macro_crate_def_only;"}, {"sha": "d77b360336c96251820ab167c85705b8bb13ad51", "filename": "src/test/run-pass/macro-export-inner-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fmacro-export-inner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fmacro-export-inner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-export-inner-module.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -12,7 +12,7 @@\n //ignore-stage1\n //ignore-fast\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate macro_export_inner_module;"}, {"sha": "87c43da9ebcf4d8e373f268ff63b9359e1990454", "filename": "src/test/run-pass/method-attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-attributes.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -22,12 +22,12 @@ trait frobable {\n impl frobable for int {\n     #[frob_attr1]\n     fn frob(&self) {\n-        #[frob_attr2];\n+        #![frob_attr2]\n     }\n \n     #[defrob_attr1]\n     fn defrob(&self) {\n-        #[defrob_attr2];\n+        #![defrob_attr2]\n     }\n }\n "}, {"sha": "00861bd9b21d580b2c4d6e68a92b7466d31c2f88", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n \n-#[feature(asm)];\n+#![feature(asm)]\n \n use std::io::Process;\n use std::os;"}, {"sha": "008a04eaa4949b9d9994bce8106e123c931459c9", "filename": "src/test/run-pass/phase-use-ignored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fphase-use-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fphase-use-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fphase-use-ignored.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n use std::mem;"}, {"sha": "bc7df6bb599af5d9e4d7048dce9f201b329a5c8f", "filename": "src/test/run-pass/privacy-ns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -13,7 +13,7 @@\n // Check we do the correct privacy checks when we import a name and there is an\n // item with that name in both the value and type namespaces.\n \n-#[feature(globs)];\n+#![feature(globs)]\n #[allow(dead_code)];\n #[allow(unused_imports)];\n "}, {"sha": "3b7696b548aaf5e4cadbd51c48cb0332fc5fead1", "filename": "src/test/run-pass/reexport-star.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Freexport-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Freexport-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freexport-star.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n // FIXME #3654\n "}, {"sha": "0c2744f68387db2597521e1b8aa41368d554dffb", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(experimental)];\n+#![allow(experimental)]\n \n use std::unstable::simd::{i32x4, f32x4, u32x4};\n "}, {"sha": "75062a462247b3c3a5971b18d3efff30a642ef1d", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n \n-#[feature(simd)];\n+#![feature(simd)]\n \n use std::ops;\n "}, {"sha": "4e3c3afc5ad8ae45910016b01d788e6771dfb80d", "filename": "src/test/run-pass/simd-issue-10604.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-issue-10604.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,8 +10,8 @@\n \n // ignore-fast\n \n-#[allow(experimental)];\n-#[feature(simd)];\n+#![allow(experimental)]\n+#![feature(simd)]\n \n pub fn main() {\n     let _o = None::<std::unstable::simd::i32x4>;"}, {"sha": "c79f285e486af3336c8440113f7060b44e9140b3", "filename": "src/test/run-pass/simd-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-type.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast feature doesn't work\n \n-#[feature(simd)];\n+#![feature(simd)]\n \n #[simd]\n struct RGBA {"}, {"sha": "bc749b5d905e4e6829daed622fc1e104a8ec77aa", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n use alder::*;\n "}, {"sha": "d18e2ac7354344c42e01e253a7b8428828c6be62", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -13,7 +13,7 @@\n // ignore-android needs extra network permissions\n // exec-env:RUST_LOG=debug\n \n-#[feature(phase)];\n+#![feature(phase)]\n #[phase(syntax, link)]\n extern crate log;\n "}, {"sha": "9b0a23401565631654d9316a537330c38c0320b1", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=4cf8d8ce69c1d1d10e90b04230d4c4e8dbb67bcc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n // compile-flags:-D ctypes\n \n-#[allow(ctypes)];\n+#![allow(ctypes)]\n \n mod libc {\n     extern {"}]}