{"sha": "322b20d14d3f7633800afdac92e3a684b3d828bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMmIyMGQxNGQzZjc2MzM4MDBhZmRhYzkyZTNhNjg0YjNkODI4YmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-17T05:28:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-17T05:28:17Z"}, "message": "rustc: Break another dependency between metadata and resolve", "tree": {"sha": "b11e29aa604481d0a46e66a83a3646f755ccbba5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11e29aa604481d0a46e66a83a3646f755ccbba5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/322b20d14d3f7633800afdac92e3a684b3d828bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/322b20d14d3f7633800afdac92e3a684b3d828bc", "html_url": "https://github.com/rust-lang/rust/commit/322b20d14d3f7633800afdac92e3a684b3d828bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/322b20d14d3f7633800afdac92e3a684b3d828bc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda", "html_url": "https://github.com/rust-lang/rust/commit/6a41eb0192cfe1489c4f5720082f09ed4fbe9eda"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "a01af9c6c7f013e6b7e7442b3e08427a2a3e0123", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/322b20d14d3f7633800afdac92e3a684b3d828bc/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322b20d14d3f7633800afdac92e3a684b3d828bc/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=322b20d14d3f7633800afdac92e3a684b3d828bc", "patch": "@@ -2,7 +2,7 @@\n \n import util::ppaux::ty_to_str;\n \n-import std::{ebml, map, list};\n+import std::{ebml, map};\n import std::map::hashmap;\n import io::writer_util;\n import ebml::writer;\n@@ -17,7 +17,6 @@ import middle::ast_map;\n import syntax::attr;\n import std::serialization::serializer;\n import std::ebml::serializer;\n-import middle::resolve;\n import syntax::ast;\n import syntax::diagnostic::span_handler;\n \n@@ -49,7 +48,7 @@ type encode_parms = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     reexports: [(str, def_id)],\n-    impl_map: resolve::impl_map,\n+    impl_map: fn@(ast::node_id) -> [(ident, def_id)],\n     item_symbols: hashmap<ast::node_id, str>,\n     discrim_symbols: hashmap<ast::node_id, str>,\n     link_meta: link_meta,\n@@ -62,7 +61,7 @@ enum encode_ctxt = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     reexports: [(str, def_id)],\n-    impl_map: resolve::impl_map,\n+    impl_map: fn@(ast::node_id) -> [(ident, def_id)],\n     item_symbols: hashmap<ast::node_id, str>,\n     discrim_symbols: hashmap<ast::node_id, str>,\n     link_meta: link_meta,\n@@ -405,36 +404,31 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n     encode_def_id(ebml_w, local_def(id));\n     encode_family(ebml_w, 'm');\n     encode_name(ebml_w, name);\n-    alt ecx.impl_map.get(id) {\n-      list::cons(impls, @list::nil) {\n-        for vec::each(*impls) {|i|\n-            if ast_util::is_exported(i.ident, md) {\n-                ebml_w.start_tag(tag_mod_impl);\n+    let impls = ecx.impl_map(id);\n+    for impls.each {|i|\n+        let (ident, did) = i;\n+        if ast_util::is_exported(ident, md) {\n+            ebml_w.start_tag(tag_mod_impl);\n             /* If did stands for an iface\n-               ref, we need to map it to its parent class */\n-                alt ecx.tcx.items.get(i.did.node) {\n-                  ast_map::node_item(it@@{node: cl@item_class(*),_},_) {\n-                    ebml_w.wr_str(def_to_str(local_def(it.id)));\n-                    some(ty::lookup_item_type(ecx.tcx, i.did).ty)\n-                  }\n-                  ast_map::node_item(@{node: item_impl(_,_,\n-                                           some(ifce),_,_),_},_) {\n-                    ebml_w.wr_str(def_to_str(i.did));\n-                    some(ty::node_id_to_type(ecx.tcx, ifce.id))\n-                  }\n-                  _ {\n-                      ebml_w.wr_str(def_to_str(i.did)); none\n-                  }\n-                };\n-                ebml_w.end_tag();\n-            } // if\n-            } // for\n-      } // list::cons alt\n-      _ {\n-          ecx.diag.handler().bug(#fmt(\"encode_info_for_mod: empty impl_map \\\n-                                       entry for %?\", path));\n-      }\n-    }\n+            ref, we need to map it to its parent class */\n+            alt ecx.tcx.items.get(did.node) {\n+              ast_map::node_item(it@@{node: cl@item_class(*),_},_) {\n+                ebml_w.wr_str(def_to_str(local_def(it.id)));\n+                some(ty::lookup_item_type(ecx.tcx, did).ty)\n+              }\n+              ast_map::node_item(@{node: item_impl(_,_,\n+                                                   some(ifce),_,_),_},_) {\n+                ebml_w.wr_str(def_to_str(did));\n+                some(ty::node_id_to_type(ecx.tcx, ifce.id))\n+              }\n+              _ {\n+                ebml_w.wr_str(def_to_str(did)); none\n+              }\n+            };\n+            ebml_w.end_tag();\n+        } // if\n+    } // for\n+\n     encode_path(ebml_w, path, ast_map::path_mod(name));\n     ebml_w.end_tag();\n }"}, {"sha": "1d8355bffbfe4bbcb8bc97f435baa659dfc8bc5e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/322b20d14d3f7633800afdac92e3a684b3d828bc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/322b20d14d3f7633800afdac92e3a684b3d828bc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=322b20d14d3f7633800afdac92e3a684b3d828bc", "patch": "@@ -14,7 +14,7 @@\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n import libc::c_uint;\n-import std::{map, time};\n+import std::{map, time, list};\n import std::map::hashmap;\n import std::map::{int_hash, str_hash};\n import driver::session;\n@@ -5202,7 +5202,7 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         tcx: cx.tcx,\n         reachable: cx.reachable,\n         reexports: reexports(cx),\n-        impl_map: cx.maps.impl_map,\n+        impl_map: impl_map(cx, _),\n         item_symbols: cx.item_symbols,\n         discrim_symbols: cx.discrim_symbols,\n         link_meta: cx.link_meta,\n@@ -5226,6 +5226,20 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         ret reexports;\n     }\n \n+    fn impl_map(cx: @crate_ctxt,\n+                id: ast::node_id) -> [(ast::ident, ast::def_id)] {\n+        alt cx.maps.impl_map.get(id) {\n+          list::cons(impls, @list::nil) {\n+            (*impls).map {|i|\n+                (i.ident, i.did)\n+            }\n+          }\n+          _ {\n+            cx.sess.bug(#fmt(\"encode_info_for_mod: empty impl_map \\\n+                              entry for %?\", id));\n+          }\n+        }\n+    }\n }\n \n fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {"}]}