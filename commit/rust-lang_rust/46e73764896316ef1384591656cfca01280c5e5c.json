{"sha": "46e73764896316ef1384591656cfca01280c5e5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZTczNzY0ODk2MzE2ZWYxMzg0NTkxNjU2Y2ZjYTAxMjgwYzVlNWM=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-04T21:56:57Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:47Z"}, "message": "librustc: Add NonZero lang item and use it if possible for nullable pointer enum opt.", "tree": {"sha": "59dd2f945e0c67df1228cea22a09beae22a4629a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59dd2f945e0c67df1228cea22a09beae22a4629a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46e73764896316ef1384591656cfca01280c5e5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46e73764896316ef1384591656cfca01280c5e5c", "html_url": "https://github.com/rust-lang/rust/commit/46e73764896316ef1384591656cfca01280c5e5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46e73764896316ef1384591656cfca01280c5e5c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d91419f27b25810f2cfcd263e0e20b62910f4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d91419f27b25810f2cfcd263e0e20b62910f4ff", "html_url": "https://github.com/rust-lang/rust/commit/6d91419f27b25810f2cfcd263e0e20b62910f4ff"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "90e3e2bb34aba34eaf2a951fe899ca7939f13682", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46e73764896316ef1384591656cfca01280c5e5c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e73764896316ef1384591656cfca01280c5e5c/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=46e73764896316ef1384591656cfca01280c5e5c", "patch": "@@ -327,6 +327,8 @@ lets_do_this! {\n     NoSyncItem,                      \"no_sync_bound\",           no_sync_bound;\n     ManagedItem,                     \"managed_bound\",           managed_bound;\n \n+    NonZeroItem,                     \"non_zero\",                non_zero;\n+\n     IteratorItem,                    \"iterator\",                iterator;\n \n     StackExhaustedLangItem,          \"stack_exhausted\",         stack_exhausted;"}, {"sha": "c3db50e3b20ae53b1c0344b162f4a586690aa506", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46e73764896316ef1384591656cfca01280c5e5c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46e73764896316ef1384591656cfca01280c5e5c/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=46e73764896316ef1384591656cfca01280c5e5c", "patch": "@@ -357,7 +357,19 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Optio\n         // Closures are a pair of pointers: the code and environment\n         ty::ty_closure(..) => Some(vec![FAT_PTR_ADDR]),\n \n-        // Perhaps one of the fields of this struct is non-null\n+        // Is this the NonZero lang item wrapping a pointer or integer type?\n+        ty::ty_struct(did, ref substs) if Some(did) == tcx.lang_items.non_zero() => {\n+            let nonzero_fields = ty::lookup_struct_fields(tcx, did);\n+            assert_eq!(nonzero_fields.len(), 1);\n+            let nonzero_field = ty::lookup_field_type(tcx, did, nonzero_fields[0].id, substs);\n+            match nonzero_field.sty {\n+                ty::ty_ptr(..) | ty::ty_int(..) |\n+                ty::ty_uint(..) => Some(vec![0]),\n+                _ => None\n+            }\n+        },\n+\n+        // Perhaps one of the fields of this struct is non-zero\n         // let's recurse and find out\n         ty::ty_struct(def_id, ref substs) => {\n             let fields = ty::lookup_struct_fields(tcx, def_id);"}]}