{"sha": "c47937d32cb877003098e498490911e8070692b9", "node_id": "C_kwDOAAsO6NoAKGM0NzkzN2QzMmNiODc3MDAzMDk4ZTQ5ODQ5MDkxMWU4MDcwNjkyYjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T20:04:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T20:04:34Z"}, "message": "Rollup merge of #110122 - jyn514:check-stage1-llvm, r=ozkanonur\n\nFix x check --stage 1 when download-ci-llvm=false\n\nBootstrap tries to avoid building LLVM unless it needs to; in particular we only build it for `x build`, not `x check`. Unfortunately, the check forgot about existence of stages - it would break if you used `x check --stage 1`:\n```\n  = note: /usr/bin/ld: cannot find -lPolly: No such file or directory\n          /usr/bin/ld: cannot find -lPollyISL: No such file or directory\n```\nFix it to work for stage 1.\n\nI recommend reading this commit-by-commit; the first one makes a bunch of whitespace changes but otherwise doesn't change the logic.", "tree": {"sha": "9797e8159c4f9b7bee500fa45d66fd57c74c3c58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9797e8159c4f9b7bee500fa45d66fd57c74c3c58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47937d32cb877003098e498490911e8070692b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNw7SCRBK7hj4Ov3rIwAA5QIIACveH49R2wzaEb4VPvG9txME\nGwG4hFYf/SY7y+jNYXg1jRN/Dnsp/Si4mfOXOEwTOWxmsd4kkBnffbIDAH2JfKkA\nwm+ucbae/OdKzntWod+ixRmSlTkkHH+c4J/C+xRjdI2qHyBzLmaX0xQRTvbLN8P6\nUO/vD7dr0H1ndbk4NFzgd29JEtt+DiV5eyIBl4JrAmCwBRFdFTbbxHAqvdYU8brj\n8+zzmk/W4wNK2xAWEBRv457l5/VPNGIFRLfvuu5N+7jwlusd4LgKG5qiDhwitss9\nrRe4eBVwkhnM6xrixYuGL9h7LizNdtHLBHpFFxoc2r0JMnlWETcduLprANMcc9Y=\n=+KFr\n-----END PGP SIGNATURE-----\n", "payload": "tree 9797e8159c4f9b7bee500fa45d66fd57c74c3c58\nparent 92eb36461bfcd4726e3f53561e93e1b55c16c34a\nparent ca3daa0fb69127ed75e79f8e97b5854288b12d51\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681329874 +0200\ncommitter GitHub <noreply@github.com> 1681329874 +0200\n\nRollup merge of #110122 - jyn514:check-stage1-llvm, r=ozkanonur\n\nFix x check --stage 1 when download-ci-llvm=false\n\nBootstrap tries to avoid building LLVM unless it needs to; in particular we only build it for `x build`, not `x check`. Unfortunately, the check forgot about existence of stages - it would break if you used `x check --stage 1`:\n```\n  = note: /usr/bin/ld: cannot find -lPolly: No such file or directory\n          /usr/bin/ld: cannot find -lPollyISL: No such file or directory\n```\nFix it to work for stage 1.\n\nI recommend reading this commit-by-commit; the first one makes a bunch of whitespace changes but otherwise doesn't change the logic.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47937d32cb877003098e498490911e8070692b9", "html_url": "https://github.com/rust-lang/rust/commit/c47937d32cb877003098e498490911e8070692b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47937d32cb877003098e498490911e8070692b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92eb36461bfcd4726e3f53561e93e1b55c16c34a", "url": "https://api.github.com/repos/rust-lang/rust/commits/92eb36461bfcd4726e3f53561e93e1b55c16c34a", "html_url": "https://github.com/rust-lang/rust/commit/92eb36461bfcd4726e3f53561e93e1b55c16c34a"}, {"sha": "ca3daa0fb69127ed75e79f8e97b5854288b12d51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3daa0fb69127ed75e79f8e97b5854288b12d51", "html_url": "https://github.com/rust-lang/rust/commit/ca3daa0fb69127ed75e79f8e97b5854288b12d51"}], "stats": {"total": 156, "additions": 82, "deletions": 74}, "files": [{"sha": "fcaa698317df0946eb60bd8f6572cda3e365f8b5", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=c47937d32cb877003098e498490911e8070692b9", "patch": "@@ -237,7 +237,7 @@ impl Step for Rustc {\n             target,\n             cargo_subcommand(builder.kind),\n         );\n-        rustc_cargo(builder, &mut cargo, target);\n+        rustc_cargo(builder, &mut cargo, target, compiler.stage);\n \n         // For ./x.py clippy, don't run with --all-targets because\n         // linting tests and benchmarks can produce very noisy results\n@@ -323,7 +323,7 @@ impl Step for CodegenBackend {\n         cargo\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n-        rustc_cargo_env(builder, &mut cargo, target);\n+        rustc_cargo_env(builder, &mut cargo, target, compiler.stage);\n \n         let msg = if compiler.host == target {\n             format!(\"Checking stage{} {} artifacts ({target})\", builder.top_stage, backend)"}, {"sha": "d96e10485c29ea8d4e7534e37939c6315c5a320e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 78, "deletions": 70, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c47937d32cb877003098e498490911e8070692b9", "patch": "@@ -696,7 +696,7 @@ impl Step for Rustc {\n         ));\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"build\");\n-        rustc_cargo(builder, &mut cargo, target);\n+        rustc_cargo(builder, &mut cargo, target, compiler.stage);\n \n         if builder.config.rust_profile_use.is_some()\n             && builder.config.rust_profile_generate.is_some()\n@@ -813,16 +813,21 @@ impl Step for Rustc {\n     }\n }\n \n-pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection, stage: u32) {\n     cargo\n         .arg(\"--features\")\n         .arg(builder.rustc_features(builder.kind))\n         .arg(\"--manifest-path\")\n         .arg(builder.src.join(\"compiler/rustc/Cargo.toml\"));\n-    rustc_cargo_env(builder, cargo, target);\n+    rustc_cargo_env(builder, cargo, target, stage);\n }\n \n-pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+pub fn rustc_cargo_env(\n+    builder: &Builder<'_>,\n+    cargo: &mut Cargo,\n+    target: TargetSelection,\n+    stage: u32,\n+) {\n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n     cargo\n@@ -867,83 +872,86 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n     }\n \n-    // Pass down configuration from the LLVM build into the build of\n-    // rustc_llvm and rustc_codegen_llvm.\n-    //\n     // Note that this is disabled if LLVM itself is disabled or we're in a check\n     // build. If we are in a check build we still go ahead here presuming we've\n     // detected that LLVM is already built and good to go which helps prevent\n     // busting caches (e.g. like #71152).\n-    if builder.config.llvm_enabled()\n-        && (builder.kind != Kind::Check\n-            || crate::llvm::prebuilt_llvm_config(builder, target).is_ok())\n-    {\n-        if builder.is_rust_llvm(target) {\n-            cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n-        }\n-        let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n-        cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-            cargo.env(\"CFG_LLVM_ROOT\", s);\n+    if builder.config.llvm_enabled() {\n+        let building_is_expensive = crate::llvm::prebuilt_llvm_config(builder, target).is_err();\n+        // `top_stage == stage` might be false for `check --stage 1`, if we are building the stage 1 compiler\n+        let can_skip_build = builder.kind == Kind::Check && builder.top_stage == stage;\n+        let should_skip_build = building_is_expensive && can_skip_build;\n+        if !should_skip_build {\n+            rustc_llvm_env(builder, cargo, target)\n         }\n+    }\n+}\n \n-        // Some LLVM linker flags (-L and -l) may be needed to link `rustc_llvm`. Its build script\n-        // expects these to be passed via the `LLVM_LINKER_FLAGS` env variable, separated by\n-        // whitespace.\n-        //\n-        // For example:\n-        // - on windows, when `clang-cl` is used with instrumentation, we need to manually add\n-        // clang's runtime library resource directory so that the profiler runtime library can be\n-        // found. This is to avoid the linker errors about undefined references to\n-        // `__llvm_profile_instrument_memop` when linking `rustc_driver`.\n-        let mut llvm_linker_flags = String::new();\n-        if builder.config.llvm_profile_generate && target.contains(\"msvc\") {\n-            if let Some(ref clang_cl_path) = builder.config.llvm_clang_cl {\n-                // Add clang's runtime library directory to the search path\n-                let clang_rt_dir = get_clang_cl_resource_dir(clang_cl_path);\n-                llvm_linker_flags.push_str(&format!(\"-L{}\", clang_rt_dir.display()));\n-            }\n-        }\n+/// Pass down configuration from the LLVM build into the build of\n+/// rustc_llvm and rustc_codegen_llvm.\n+fn rustc_llvm_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetSelection) {\n+    let target_config = builder.config.target_config.get(&target);\n \n-        // The config can also specify its own llvm linker flags.\n-        if let Some(ref s) = builder.config.llvm_ldflags {\n-            if !llvm_linker_flags.is_empty() {\n-                llvm_linker_flags.push_str(\" \");\n-            }\n-            llvm_linker_flags.push_str(s);\n+    if builder.is_rust_llvm(target) {\n+        cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n+    }\n+    let llvm::LlvmResult { llvm_config, .. } = builder.ensure(llvm::Llvm { target });\n+    cargo.env(\"LLVM_CONFIG\", &llvm_config);\n+    if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+        cargo.env(\"CFG_LLVM_ROOT\", s);\n+    }\n+\n+    // Some LLVM linker flags (-L and -l) may be needed to link `rustc_llvm`. Its build script\n+    // expects these to be passed via the `LLVM_LINKER_FLAGS` env variable, separated by\n+    // whitespace.\n+    //\n+    // For example:\n+    // - on windows, when `clang-cl` is used with instrumentation, we need to manually add\n+    // clang's runtime library resource directory so that the profiler runtime library can be\n+    // found. This is to avoid the linker errors about undefined references to\n+    // `__llvm_profile_instrument_memop` when linking `rustc_driver`.\n+    let mut llvm_linker_flags = String::new();\n+    if builder.config.llvm_profile_generate && target.contains(\"msvc\") {\n+        if let Some(ref clang_cl_path) = builder.config.llvm_clang_cl {\n+            // Add clang's runtime library directory to the search path\n+            let clang_rt_dir = get_clang_cl_resource_dir(clang_cl_path);\n+            llvm_linker_flags.push_str(&format!(\"-L{}\", clang_rt_dir.display()));\n         }\n+    }\n \n-        // Set the linker flags via the env var that `rustc_llvm`'s build script will read.\n+    // The config can also specify its own llvm linker flags.\n+    if let Some(ref s) = builder.config.llvm_ldflags {\n         if !llvm_linker_flags.is_empty() {\n-            cargo.env(\"LLVM_LINKER_FLAGS\", llvm_linker_flags);\n+            llvm_linker_flags.push_str(\" \");\n         }\n+        llvm_linker_flags.push_str(s);\n+    }\n \n-        // Building with a static libstdc++ is only supported on linux right now,\n-        // not for MSVC or macOS\n-        if builder.config.llvm_static_stdcpp\n-            && !target.contains(\"freebsd\")\n-            && !target.contains(\"msvc\")\n-            && !target.contains(\"apple\")\n-            && !target.contains(\"solaris\")\n-        {\n-            let file = compiler_file(\n-                builder,\n-                builder.cxx(target).unwrap(),\n-                target,\n-                CLang::Cxx,\n-                \"libstdc++.a\",\n-            );\n-            cargo.env(\"LLVM_STATIC_STDCPP\", file);\n-        }\n-        if builder.llvm_link_shared() {\n-            cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n-        }\n-        if builder.config.llvm_use_libcxx {\n-            cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n-        }\n-        if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n-            cargo.env(\"LLVM_NDEBUG\", \"1\");\n-        }\n+    // Set the linker flags via the env var that `rustc_llvm`'s build script will read.\n+    if !llvm_linker_flags.is_empty() {\n+        cargo.env(\"LLVM_LINKER_FLAGS\", llvm_linker_flags);\n+    }\n+\n+    // Building with a static libstdc++ is only supported on linux right now,\n+    // not for MSVC or macOS\n+    if builder.config.llvm_static_stdcpp\n+        && !target.contains(\"freebsd\")\n+        && !target.contains(\"msvc\")\n+        && !target.contains(\"apple\")\n+        && !target.contains(\"solaris\")\n+    {\n+        let file =\n+            compiler_file(builder, builder.cxx(target).unwrap(), target, CLang::Cxx, \"libstdc++.a\");\n+        cargo.env(\"LLVM_STATIC_STDCPP\", file);\n+    }\n+    if builder.llvm_link_shared() {\n+        cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n+    }\n+    if builder.config.llvm_use_libcxx {\n+        cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n+    }\n+    if builder.config.llvm_optimize && !builder.config.llvm_release_debuginfo {\n+        cargo.env(\"LLVM_NDEBUG\", \"1\");\n     }\n }\n \n@@ -1090,7 +1098,7 @@ impl Step for CodegenBackend {\n         cargo\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(format!(\"compiler/rustc_codegen_{}/Cargo.toml\", backend)));\n-        rustc_cargo_env(builder, &mut cargo, target);\n+        rustc_cargo_env(builder, &mut cargo, target, compiler.stage);\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n "}, {"sha": "9ad98eb57022c968565b54ca6fd12c6fcbdde68d", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c47937d32cb877003098e498490911e8070692b9", "patch": "@@ -696,7 +696,7 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"-Znormalize-docs\");\n         cargo.rustdocflag(\"--show-type-layout\");\n         cargo.rustdocflag(\"--generate-link-to-definition\");\n-        compile::rustc_cargo(builder, &mut cargo, target);\n+        compile::rustc_cargo(builder, &mut cargo, target, compiler.stage);\n         cargo.arg(\"-Zunstable-options\");\n         cargo.arg(\"-Zskip-rustdoc-fingerprint\");\n "}, {"sha": "ebba6e80f404cd6ce1cf712fe2bc2cba67921425", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47937d32cb877003098e498490911e8070692b9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c47937d32cb877003098e498490911e8070692b9", "patch": "@@ -2146,7 +2146,7 @@ impl Step for Crate {\n                 compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n             }\n             Mode::Rustc => {\n-                compile::rustc_cargo(builder, &mut cargo, target);\n+                compile::rustc_cargo(builder, &mut cargo, target, compiler.stage);\n             }\n             _ => panic!(\"can only test libraries\"),\n         };"}]}