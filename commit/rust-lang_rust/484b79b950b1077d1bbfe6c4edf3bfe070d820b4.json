{"sha": "484b79b950b1077d1bbfe6c4edf3bfe070d820b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NGI3OWI5NTBiMTA3N2QxYmJmZTZjNGVkZjNiZmUwNzBkODIwYjQ=", "commit": {"author": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2021-09-07T20:15:02Z"}, "committer": {"name": "Augie Fackler", "email": "augie@google.com", "date": "2021-09-07T20:15:02Z"}, "message": "RustWrapper: just use the *AtIndex funcs directly\n\nOtherwise we're kind of reimplementing the inverse of the well-named\nmethods, and that's not a direction we want to go.", "tree": {"sha": "b98364c7ad2df0ce662699b0daab8466dc87c5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b98364c7ad2df0ce662699b0daab8466dc87c5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/484b79b950b1077d1bbfe6c4edf3bfe070d820b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/484b79b950b1077d1bbfe6c4edf3bfe070d820b4", "html_url": "https://github.com/rust-lang/rust/commit/484b79b950b1077d1bbfe6c4edf3bfe070d820b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/484b79b950b1077d1bbfe6c4edf3bfe070d820b4/comments", "author": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durin42", "id": 20269, "node_id": "MDQ6VXNlcjIwMjY5", "avatar_url": "https://avatars.githubusercontent.com/u/20269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durin42", "html_url": "https://github.com/durin42", "followers_url": "https://api.github.com/users/durin42/followers", "following_url": "https://api.github.com/users/durin42/following{/other_user}", "gists_url": "https://api.github.com/users/durin42/gists{/gist_id}", "starred_url": "https://api.github.com/users/durin42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durin42/subscriptions", "organizations_url": "https://api.github.com/users/durin42/orgs", "repos_url": "https://api.github.com/users/durin42/repos", "events_url": "https://api.github.com/users/durin42/events{/privacy}", "received_events_url": "https://api.github.com/users/durin42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532bb80f7fd22bbc9896d9233f2a9ed79071716c", "url": "https://api.github.com/repos/rust-lang/rust/commits/532bb80f7fd22bbc9896d9233f2a9ed79071716c", "html_url": "https://github.com/rust-lang/rust/commit/532bb80f7fd22bbc9896d9233f2a9ed79071716c"}], "stats": {"total": 39, "additions": 3, "deletions": 36}, "files": [{"sha": "3a7af73c87de396e5b40eac00dbdd6e54c60a19c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/484b79b950b1077d1bbfe6c4edf3bfe070d820b4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/484b79b950b1077d1bbfe6c4edf3bfe070d820b4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=484b79b950b1077d1bbfe6c4edf3bfe070d820b4", "patch": "@@ -207,18 +207,7 @@ template<typename T> static inline void AddAttribute(T *t, unsigned Index, Attri\n #if LLVM_VERSION_LT(14, 0)\n   t->addAttribute(Index, Attr);\n #else\n-  // TODO(durin42): we should probably surface the explicit functions to Rust\n-  // instead of this switch statement?\n-  switch (Index) {\n-    case AttributeList::ReturnIndex:\n-      t->addRetAttr(Attr);\n-      break;\n-    case AttributeList::FunctionIndex:\n-      t->addFnAttr(Attr);\n-      break;\n-    default:\n-      t->addParamAttr(Index-AttributeList::FirstArgIndex, Attr);\n-  }\n+  t->addAttributeAtIndex(Index, Attr);\n #endif\n }\n \n@@ -241,18 +230,7 @@ static inline void AddCallAttributes(CallBase *Call, unsigned Index, const AttrB\n #if LLVM_VERSION_LT(14, 0)\n   Attrs = Attrs.addAttributes(Call->getContext(), Index, B);\n #else\n-  // TODO(durin42): we should probably surface the explicit functions to Rust\n-  // instead of this switch statement?\n-  switch (Index) {\n-    case AttributeList::ReturnIndex:\n-      Attrs = Attrs.addRetAttributes(Call->getContext(), B);\n-      break;\n-    case AttributeList::FunctionIndex:\n-      Attrs = Attrs.addFnAttributes(Call->getContext(), B);\n-      break;\n-    default:\n-      Attrs = Attrs.addParamAttributes(Call->getContext(), Index-AttributeList::FirstArgIndex, B);\n-  }\n+  Attrs = Attrs.addAttributesAtIndex(Call->getContext(), Index, B);\n #endif\n   Call->setAttributes(Attrs);\n }\n@@ -370,18 +348,7 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n #if LLVM_VERSION_LT(14, 0)\n   PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n #else\n-  // TODO(durin42): we should probably surface the explicit functions to Rust\n-  // instead of this switch statement?\n-  switch (Index) {\n-    case AttributeList::ReturnIndex:\n-      PALNew = PAL.removeRetAttributes(F->getContext(), B);\n-      break;\n-    case AttributeList::FunctionIndex:\n-      PALNew = PAL.removeFnAttributes(F->getContext(), B);\n-      break;\n-    default:\n-      PALNew = PAL.removeParamAttributes(F->getContext(), Index-AttributeList::FirstArgIndex, B);\n-  }\n+  PALNew = PAL.removeAttributesAtIndex(F->getContext(), Index, B);\n #endif\n   F->setAttributes(PALNew);\n }"}]}