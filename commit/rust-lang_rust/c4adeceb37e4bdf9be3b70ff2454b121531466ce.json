{"sha": "c4adeceb37e4bdf9be3b70ff2454b121531466ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YWRlY2ViMzdlNGJkZjliZTNiNzBmZjI0NTRiMTIxNTMxNDY2Y2U=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-21T13:14:21Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T12:55:13Z"}, "message": "async-llvm(1): Run LLVM already in trans_crate().", "tree": {"sha": "ce35b127f2b0880bdebf05d04c9401584bd329cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce35b127f2b0880bdebf05d04c9401584bd329cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4adeceb37e4bdf9be3b70ff2454b121531466ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4adeceb37e4bdf9be3b70ff2454b121531466ce", "html_url": "https://github.com/rust-lang/rust/commit/c4adeceb37e4bdf9be3b70ff2454b121531466ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4adeceb37e4bdf9be3b70ff2454b121531466ce/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6828e7f1ed3163a2797f0a111570ef130f7b6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6828e7f1ed3163a2797f0a111570ef130f7b6b", "html_url": "https://github.com/rust-lang/rust/commit/2a6828e7f1ed3163a2797f0a111570ef130f7b6b"}], "stats": {"total": 201, "additions": 129, "deletions": 72}, "files": [{"sha": "1bc3f59ed0476068702e12d3d9c66e564ceb6867", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 47, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c4adeceb37e4bdf9be3b70ff2454b121531466ce", "patch": "@@ -15,8 +15,7 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_mir as mir;\n use rustc::session::{Session, CompileResult};\n use rustc::session::CompileIncomplete;\n-use rustc::session::config::{self, Input, OutputFilenames, OutputType,\n-                             OutputTypes};\n+use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, dependency_format, stability, reachable};\n@@ -26,7 +25,6 @@ use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n use rustc::traits;\n use rustc::util::common::{ErrorReported, time};\n use rustc::util::nodemap::NodeSet;\n-use rustc::util::fs::rename_or_copy_remove;\n use rustc_allocator as allocator;\n use rustc_borrowck as borrowck;\n use rustc_incremental::{self, IncrementalHashesMap};\n@@ -231,7 +229,7 @@ pub fn compile_input(sess: &Session,\n         sess.code_stats.borrow().print_type_sizes();\n     }\n \n-    let phase5_result = phase_5_run_llvm_passes(sess, &trans, &outputs);\n+    let (phase5_result, trans) = phase_5_run_llvm_passes(sess, trans, &outputs);\n \n     controller_entry_point!(after_llvm,\n                             sess,\n@@ -1057,7 +1055,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n                                            incremental_hashes_map: &IncrementalHashesMap,\n                                            output_filenames: &OutputFilenames)\n-                                           -> trans::CrateTranslation {\n+                                           -> trans::OngoingCrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n     time(time_passes,\n@@ -1069,61 +1067,26 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n              \"translation\",\n              move || trans::trans_crate(tcx, analysis, &incremental_hashes_map, output_filenames));\n \n-    time(time_passes,\n-         \"assert dep graph\",\n-         || rustc_incremental::assert_dep_graph(tcx));\n-\n-    time(time_passes,\n-         \"serialize dep graph\",\n-         || rustc_incremental::save_dep_graph(tcx,\n-                                              &incremental_hashes_map,\n-                                              &translation.metadata.hashes,\n-                                              translation.link.crate_hash));\n     translation\n }\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n /// as a side effect.\n pub fn phase_5_run_llvm_passes(sess: &Session,\n-                               trans: &trans::CrateTranslation,\n-                               outputs: &OutputFilenames) -> CompileResult {\n-    if sess.opts.cg.no_integrated_as ||\n-        (sess.target.target.options.no_integrated_as &&\n-         (outputs.outputs.contains_key(&OutputType::Object) ||\n-          outputs.outputs.contains_key(&OutputType::Exe)))\n-    {\n-        let output_types = OutputTypes::new(&[(OutputType::Assembly, None)]);\n-        time(sess.time_passes(),\n-             \"LLVM passes\",\n-             || write::run_passes(sess, trans, &output_types, outputs));\n-\n-        write::run_assembler(sess, outputs);\n-\n-        // HACK the linker expects the object file to be named foo.0.o but\n-        // `run_assembler` produces an object named just foo.o. Rename it if we\n-        // are going to build an executable\n-        if sess.opts.output_types.contains_key(&OutputType::Exe) {\n-            let f = outputs.path(OutputType::Object);\n-            rename_or_copy_remove(&f,\n-                     f.with_file_name(format!(\"{}.0.o\",\n-                                              f.file_stem().unwrap().to_string_lossy()))).unwrap();\n-        }\n+                               trans: trans::OngoingCrateTranslation,\n+                               outputs: &OutputFilenames)\n+                               -> (CompileResult, trans::CrateTranslation) {\n+    let trans = trans.join(sess, outputs);\n \n-        // Remove assembly source, unless --save-temps was specified\n-        if !sess.opts.cg.save_temps {\n-            fs::remove_file(&outputs.temp_path(OutputType::Assembly, None)).unwrap();\n-        }\n-    } else {\n-        time(sess.time_passes(),\n-             \"LLVM passes\",\n-             || write::run_passes(sess, trans, &sess.opts.output_types, outputs));\n+    if sess.opts.debugging_opts.incremental_info {\n+        write::dump_incremental_data(&trans);\n     }\n \n     time(sess.time_passes(),\n          \"serialize work products\",\n          move || rustc_incremental::save_work_products(sess));\n \n-    sess.compile_status()\n+    (sess.compile_status(), trans)\n }\n \n /// Run the linker on any artifacts that resulted from the LLVM run."}, {"sha": "4af4ee664a257df48d18db8a55b7f81c778ecb59", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=c4adeceb37e4bdf9be3b70ff2454b121531466ce", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n use llvm::SMDiagnosticRef;\n-use {CrateTranslation, ModuleLlvm, ModuleSource, ModuleTranslation};\n+use {CrateTranslation, OngoingCrateTranslation, ModuleLlvm, ModuleSource, ModuleTranslation};\n use rustc::hir::def_id::CrateNum;\n use rustc::util::common::{time, time_depth, set_time_depth, path2cstr};\n use rustc::util::fs::link_or_copy;\n@@ -255,7 +255,7 @@ impl ModuleConfig {\n         }\n     }\n \n-    fn set_flags(&mut self, sess: &Session, trans: &CrateTranslation) {\n+    fn set_flags(&mut self, sess: &Session, trans: &OngoingCrateTranslation) {\n         self.no_verify = sess.no_verify();\n         self.no_prepopulate_passes = sess.opts.cg.no_prepopulate_passes;\n         self.no_builtins = trans.no_builtins;\n@@ -614,7 +614,7 @@ pub fn cleanup_llvm(trans: &CrateTranslation) {\n }\n \n pub fn run_passes(sess: &Session,\n-                  trans: &CrateTranslation,\n+                  trans: &OngoingCrateTranslation,\n                   output_types: &OutputTypes,\n                   crate_output: &OutputFilenames) {\n     // It's possible that we have `codegen_units > 1` but only one item in\n@@ -748,10 +748,6 @@ pub fn run_passes(sess: &Session,\n         work_items.push(work);\n     }\n \n-    if sess.opts.debugging_opts.incremental_info {\n-        dump_incremental_data(&trans);\n-    }\n-\n     let client = sess.jobserver_from_env.clone().unwrap_or_else(|| {\n         // Pick a \"reasonable maximum\" if we don't otherwise have a jobserver in\n         // our environment, capping out at 32 so we don't take everything down\n@@ -938,7 +934,7 @@ pub fn run_passes(sess: &Session,\n     }\n }\n \n-fn dump_incremental_data(trans: &CrateTranslation) {\n+pub fn dump_incremental_data(trans: &CrateTranslation) {\n     let mut reuse = 0;\n     for mtrans in trans.modules.iter() {\n         match mtrans.source {"}, {"sha": "1fd871d31b59bd9f847aa8a54234c2e9ead35a8a", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c4adeceb37e4bdf9be3b70ff2454b121531466ce", "patch": "@@ -23,7 +23,7 @@\n //!     but one TypeRef corresponds to many `Ty`s; for instance, tup(int, int,\n //!     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-use super::CrateTranslation;\n+use super::OngoingCrateTranslation;\n use super::ModuleLlvm;\n use super::ModuleSource;\n use super::ModuleTranslation;\n@@ -43,9 +43,9 @@ use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n-use rustc::session::config::{self, NoDebugInfo, OutputFilenames};\n+use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, OutputTypes};\n use rustc::session::Session;\n-use rustc_incremental::IncrementalHashesMap;\n+use rustc_incremental::{self, IncrementalHashesMap};\n use abi;\n use allocator;\n use mir::lvalue::LvalueRef;\n@@ -922,7 +922,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n                              incremental_hashes_map: &IncrementalHashesMap,\n                              output_filenames: &OutputFilenames)\n-                             -> CrateTranslation {\n+                             -> OngoingCrateTranslation {\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n     // `TransCrate`, you need to be careful to register \"reads\" of the\n@@ -961,17 +961,18 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n        !tcx.sess.opts.output_types.should_trans() {\n         let empty_exported_symbols = ExportedSymbols::empty();\n         let linker_info = LinkerInfo::new(&shared_ccx, &empty_exported_symbols);\n-        return CrateTranslation {\n+        return OngoingCrateTranslation {\n             crate_name: tcx.crate_name(LOCAL_CRATE),\n             modules: vec![],\n             metadata_module: metadata_module,\n             allocator_module: None,\n             link: link_meta,\n             metadata: metadata,\n-            exported_symbols: empty_exported_symbols,\n+            exported_symbols: Arc::new(empty_exported_symbols),\n             no_builtins: no_builtins,\n             linker_info: linker_info,\n             windows_subsystem: None,\n+            no_integrated_as: false,\n         };\n     }\n \n@@ -1210,19 +1211,52 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         subsystem.to_string()\n     });\n \n-    CrateTranslation {\n+    let outputs = output_filenames;\n+\n+    let no_integrated_as = sess.opts.cg.no_integrated_as ||\n+        (sess.target.target.options.no_integrated_as &&\n+         (outputs.outputs.contains_key(&OutputType::Object) ||\n+          outputs.outputs.contains_key(&OutputType::Exe)));\n+\n+    let crate_translation = OngoingCrateTranslation {\n         crate_name: tcx.crate_name(LOCAL_CRATE),\n-        modules: modules,\n-        metadata_module: metadata_module,\n-        allocator_module: allocator_module,\n         link: link_meta,\n         metadata: metadata,\n-        exported_symbols: Arc::try_unwrap(exported_symbols)\n-            .expect(\"There's still a reference to exported_symbols?\"),\n-        no_builtins: no_builtins,\n-        linker_info: linker_info,\n-        windows_subsystem: windows_subsystem,\n-    }\n+        exported_symbols,\n+        no_builtins,\n+        linker_info,\n+        windows_subsystem,\n+        no_integrated_as,\n+\n+        modules,\n+        metadata_module,\n+        allocator_module,\n+    };\n+\n+    time(sess.time_passes(),\n+         \"assert dep graph\",\n+         || rustc_incremental::assert_dep_graph(tcx));\n+\n+    time(sess.time_passes(),\n+         \"serialize dep graph\",\n+         || rustc_incremental::save_dep_graph(tcx,\n+                                              incremental_hashes_map,\n+                                              &crate_translation.metadata.hashes,\n+                                              crate_translation.link.crate_hash));\n+    // ---\n+\n+    if no_integrated_as {\n+        let output_types = OutputTypes::new(&[(OutputType::Assembly, None)]);\n+        time(sess.time_passes(),\n+             \"LLVM passes\",\n+             || ::back::write::run_passes(sess, &crate_translation, &output_types, outputs))\n+    } else {\n+        time(sess.time_passes(),\n+             \"LLVM passes\",\n+             || ::back::write::run_passes(sess, &crate_translation, &sess.opts.output_types, outputs))\n+    };\n+\n+    crate_translation\n }\n \n #[inline(never)] // give this a place in the profiler"}, {"sha": "c386d11fa84c4d263a2bea6b8a3a2ce57b61eb91", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4adeceb37e4bdf9be3b70ff2454b121531466ce/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c4adeceb37e4bdf9be3b70ff2454b121531466ce", "patch": "@@ -35,7 +35,12 @@\n #![feature(conservative_impl_trait)]\n \n use rustc::dep_graph::WorkProduct;\n+use rustc::session::Session;\n+use rustc::session::config::{OutputType, OutputFilenames};\n+use rustc::util::fs::rename_or_copy_remove;\n use syntax_pos::symbol::Symbol;\n+use std::fs;\n+use std::sync::Arc;\n \n extern crate flate2;\n extern crate crossbeam;\n@@ -167,10 +172,69 @@ pub struct CrateTranslation {\n     pub allocator_module: Option<ModuleTranslation>,\n     pub link: rustc::middle::cstore::LinkMeta,\n     pub metadata: rustc::middle::cstore::EncodedMetadata,\n-    pub exported_symbols: back::symbol_export::ExportedSymbols,\n+    pub exported_symbols: Arc<back::symbol_export::ExportedSymbols>,\n     pub no_builtins: bool,\n     pub windows_subsystem: Option<String>,\n     pub linker_info: back::linker::LinkerInfo\n }\n \n+pub struct OngoingCrateTranslation {\n+    pub crate_name: Symbol,\n+    pub link: rustc::middle::cstore::LinkMeta,\n+    pub metadata: rustc::middle::cstore::EncodedMetadata,\n+    pub exported_symbols: Arc<back::symbol_export::ExportedSymbols>,\n+    pub no_builtins: bool,\n+    pub windows_subsystem: Option<String>,\n+    pub linker_info: back::linker::LinkerInfo,\n+    pub no_integrated_as: bool,\n+\n+    // These will be replaced by a Future.\n+    pub modules: Vec<ModuleTranslation>,\n+    pub metadata_module: ModuleTranslation,\n+    pub allocator_module: Option<ModuleTranslation>,\n+}\n+\n+impl OngoingCrateTranslation {\n+    pub fn join(self,\n+                sess: &Session,\n+                outputs: &OutputFilenames)\n+                -> CrateTranslation {\n+\n+        let trans = CrateTranslation {\n+            crate_name: self.crate_name,\n+            link: self.link,\n+            metadata: self.metadata,\n+            exported_symbols: self.exported_symbols,\n+            no_builtins: self.no_builtins,\n+            windows_subsystem: self.windows_subsystem,\n+            linker_info: self.linker_info,\n+\n+            modules: self.modules,\n+            metadata_module: self.metadata_module,\n+            allocator_module: self.allocator_module,\n+        };\n+\n+        if self.no_integrated_as {\n+            back::write::run_assembler(sess, outputs);\n+\n+            // HACK the linker expects the object file to be named foo.0.o but\n+            // `run_assembler` produces an object named just foo.o. Rename it if we\n+            // are going to build an executable\n+            if sess.opts.output_types.contains_key(&OutputType::Exe) {\n+                let f = outputs.path(OutputType::Object);\n+                rename_or_copy_remove(&f,\n+                         f.with_file_name(format!(\"{}.0.o\",\n+                                                  f.file_stem().unwrap().to_string_lossy()))).unwrap();\n+            }\n+\n+            // Remove assembly source, unless --save-temps was specified\n+            if !sess.opts.cg.save_temps {\n+                fs::remove_file(&outputs.temp_path(OutputType::Assembly, None)).unwrap();\n+            }\n+        }\n+\n+        trans\n+    }\n+}\n+\n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}]}