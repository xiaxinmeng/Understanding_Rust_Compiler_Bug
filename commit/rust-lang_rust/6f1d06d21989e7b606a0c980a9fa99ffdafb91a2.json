{"sha": "6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMWQwNmQyMTk4OWU3YjYwNmEwYzk4MGE5ZmE5OWZmZGFmYjkxYTI=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-07T10:46:44Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-17T09:40:22Z"}, "message": "Querify glob map usage (last use of CrateAnalysis)", "tree": {"sha": "a659b6dd7158dd019d51151f5bd874e6acd27f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a659b6dd7158dd019d51151f5bd874e6acd27f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "html_url": "https://github.com/rust-lang/rust/commit/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8fdf971cb226a14491dba974ec50812a52e983", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8fdf971cb226a14491dba974ec50812a52e983", "html_url": "https://github.com/rust-lang/rust/commit/6c8fdf971cb226a14491dba974ec50812a52e983"}], "stats": {"total": 92, "additions": 30, "deletions": 62}, "files": [{"sha": "3cc780ec342734c9415103556ff88747ca277810", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -630,6 +630,7 @@ define_dep_nodes!( <'tcx>\n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),\n     [input] MaybeUnusedExternCrates,\n+    [input] NamesImportedByGlobUse(DefId),\n     [eval_always] StabilityIndex,\n     [eval_always] AllTraits,\n     [input] AllCrateNums,"}, {"sha": "e37eab622df3f062e79e48783f064dc38c527868", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -983,6 +983,9 @@ pub struct GlobalCtxt<'tcx> {\n \n     maybe_unused_trait_imports: FxHashSet<DefId>,\n     maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    /// A map of glob use to a set of names it actually imports. Currently only\n+    /// used in save-analysis.\n+    glob_map: FxHashMap<DefId, FxHashSet<ast::Name>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<ast::Name, bool>,\n@@ -1232,6 +1235,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     .into_iter()\n                     .map(|(id, sp)| (hir.local_def_id(id), sp))\n                     .collect(),\n+            glob_map: resolutions.glob_map.into_iter().map(|(id, names)| {\n+                (hir.local_def_id(id), names)\n+            }).collect(),\n             extern_prelude: resolutions.extern_prelude,\n             hir_map: hir,\n             def_path_hash_to_def_id,\n@@ -2972,6 +2978,10 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Lrc::new(tcx.maybe_unused_extern_crates.clone())\n     };\n+    providers.names_imported_by_glob_use = |tcx, id| {\n+        assert_eq!(id.krate, LOCAL_CRATE);\n+        Lrc::new(tcx.glob_map.get(&id).cloned().unwrap_or_default())\n+    };\n \n     providers.stability_index = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "f1b36e8def88bc3e94c0c4958395556cf57a8416", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -4,7 +4,7 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::fold::TypeFoldable;\n \n-use hir::{map as hir_map, FreevarMap, TraitMap};\n+use hir::{map as hir_map, FreevarMap, GlobMap, TraitMap};\n use hir::Node;\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -115,23 +115,14 @@ mod sty;\n \n // Data types\n \n-/// The complete set of all analyses described in this module. This is\n-/// produced by the driver and fed to codegen and later passes.\n-///\n-/// N.B., these contents are being migrated into queries using the\n-/// *on-demand* infrastructure.\n-#[derive(Clone)]\n-pub struct CrateAnalysis {\n-    pub glob_map: hir::GlobMap,\n-}\n-\n #[derive(Clone)]\n pub struct Resolutions {\n     pub freevars: FreevarMap,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n     pub export_map: ExportMap,\n+    pub glob_map: GlobMap,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Name, bool>,"}, {"sha": "27b67487637c778c65970d4496e44a71e06d3ab7", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -541,6 +541,8 @@ define_queries! { <'tcx>\n         [] fn maybe_unused_trait_import: MaybeUnusedTraitImport(DefId) -> bool,\n         [] fn maybe_unused_extern_crates: maybe_unused_extern_crates_node(CrateNum)\n             -> Lrc<Vec<(DefId, Span)>>,\n+        [] fn names_imported_by_glob_use: NamesImportedByGlobUse(DefId)\n+            -> Lrc<FxHashSet<ast::Name>>,\n \n         [] fn stability_index: stability_index_node(CrateNum) -> Lrc<stability::Index<'tcx>>,\n         [] fn all_crate_nums: all_crate_nums_node(CrateNum) -> Lrc<Vec<CrateNum>>,"}, {"sha": "681376eaa2acd0c46c3f17ffd0ac23b4e7748de6", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -1413,6 +1413,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::MaybeUnusedTraitImport => {\n             force!(maybe_unused_trait_import, def_id!());\n         }\n+        DepKind::NamesImportedByGlobUse => { force!(names_imported_by_glob_use, def_id!()); }\n         DepKind::MaybeUnusedExternCrates => { force!(maybe_unused_extern_crates, LOCAL_CRATE); }\n         DepKind::StabilityIndex => { force!(stability_index, LOCAL_CRATE); }\n         DepKind::AllTraits => { force!(all_traits, LOCAL_CRATE); }"}, {"sha": "aa7cb0c695c3c2b95432116a36f750cca72d2fad", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -168,7 +168,6 @@ pub fn compile_input(\n         let ExpansionResult {\n             expanded_crate,\n             defs,\n-            analysis,\n             resolutions,\n             mut hir_forest,\n         } = {\n@@ -251,7 +250,6 @@ pub fn compile_input(\n                     output,\n                     &cstore,\n                     &hir_map,\n-                    &analysis,\n                     &resolutions,\n                     &expanded_crate,\n                     &hir_map.krate(),\n@@ -277,12 +275,11 @@ pub fn compile_input(\n             sess,\n             cstore,\n             hir_map,\n-            analysis,\n             resolutions,\n             &mut arenas,\n             &crate_name,\n             &outputs,\n-            |tcx, analysis, rx, result| {\n+            |tcx, rx, result| {\n                 {\n                     // Eventually, we will want to track plugins.\n                     tcx.dep_graph.with_ignore(|| {\n@@ -293,7 +290,6 @@ pub fn compile_input(\n                             output,\n                             opt_crate,\n                             tcx.hir().krate(),\n-                            &analysis,\n                             tcx,\n                             &crate_name,\n                         );\n@@ -527,7 +523,6 @@ pub struct CompileState<'a, 'tcx: 'a> {\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub hir_map: Option<&'a hir_map::Map<'tcx>>,\n     pub resolutions: Option<&'a Resolutions>,\n-    pub analysis: Option<&'a ty::CrateAnalysis>,\n     pub tcx: Option<TyCtxt<'a, 'tcx, 'tcx>>,\n }\n \n@@ -547,7 +542,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             hir_crate: None,\n             hir_map: None,\n             resolutions: None,\n-            analysis: None,\n             tcx: None,\n         }\n     }\n@@ -595,7 +589,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         out_file: &'a Option<PathBuf>,\n         cstore: &'tcx CStore,\n         hir_map: &'a hir_map::Map<'tcx>,\n-        analysis: &'a ty::CrateAnalysis,\n         resolutions: &'a Resolutions,\n         krate: &'a ast::Crate,\n         hir_crate: &'a hir::Crate,\n@@ -606,7 +599,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n             crate_name: Some(crate_name),\n             cstore: Some(cstore),\n             hir_map: Some(hir_map),\n-            analysis: Some(analysis),\n             resolutions: Some(resolutions),\n             expanded_crate: Some(krate),\n             hir_crate: Some(hir_crate),\n@@ -623,12 +615,10 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         out_file: &'a Option<PathBuf>,\n         krate: Option<&'a ast::Crate>,\n         hir_crate: &'a hir::Crate,\n-        analysis: &'a ty::CrateAnalysis,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         crate_name: &'a str,\n     ) -> Self {\n         CompileState {\n-            analysis: Some(analysis),\n             tcx: Some(tcx),\n             expanded_crate: krate,\n             hir_crate: Some(hir_crate),\n@@ -711,7 +701,6 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n pub struct ExpansionResult {\n     pub expanded_crate: ast::Crate,\n     pub defs: hir_map::Definitions,\n-    pub analysis: ty::CrateAnalysis,\n     pub resolutions: Resolutions,\n     pub hir_forest: hir_map::Forest,\n }\n@@ -772,16 +761,13 @@ where\n                 freevars: resolver.freevars,\n                 export_map: resolver.export_map,\n                 trait_map: resolver.trait_map,\n+                glob_map: resolver.glob_map,\n                 maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n                 maybe_unused_extern_crates: resolver.maybe_unused_extern_crates,\n                 extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n                     (ident.name, entry.introduced_by_item)\n                 }).collect(),\n             },\n-\n-            analysis: ty::CrateAnalysis {\n-                glob_map: resolver.glob_map\n-            },\n         }),\n         Err(x) => Err(x),\n     }\n@@ -1180,7 +1166,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     sess: &'tcx Session,\n     cstore: &'tcx CStore,\n     hir_map: hir_map::Map<'tcx>,\n-    analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,\n     arenas: &'tcx mut AllArenas<'tcx>,\n     name: &str,\n@@ -1190,7 +1175,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n where\n     F: for<'a> FnOnce(\n         TyCtxt<'a, 'tcx, 'tcx>,\n-        ty::CrateAnalysis,\n         mpsc::Receiver<Box<dyn Any + Send>>,\n         CompileResult,\n     ) -> R,\n@@ -1254,7 +1238,7 @@ where\n             match typeck::check_crate(tcx) {\n                 Ok(x) => x,\n                 Err(x) => {\n-                    f(tcx, analysis, rx, Err(x));\n+                    f(tcx, rx, Err(x));\n                     return Err(x);\n                 }\n             }\n@@ -1307,7 +1291,7 @@ where\n             // lint warnings and so on -- kindck used to do this abort, but\n             // kindck is gone now). -nmatsakis\n             if sess.err_count() > 0 {\n-                return Ok(f(tcx, analysis, rx, sess.compile_status()));\n+                return Ok(f(tcx, rx, sess.compile_status()));\n             }\n \n             time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n@@ -1318,7 +1302,7 @@ where\n \n             time(sess, \"lint checking\", || lint::check_crate(tcx));\n \n-            return Ok(f(tcx, analysis, rx, tcx.sess.compile_status()));\n+            return Ok(f(tcx, rx, tcx.sess.compile_status()));\n         },\n     )\n }"}, {"sha": "c8a5bbe8315b376f56a7b16a4c27b29d9f57f9a6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -879,7 +879,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     pretty::print_after_hir_lowering(state.session,\n                                                      state.cstore.unwrap(),\n                                                      state.hir_map.unwrap(),\n-                                                     state.analysis.unwrap(),\n                                                      state.resolutions.unwrap(),\n                                                      state.input,\n                                                      &state.expanded_crate.take().unwrap(),\n@@ -940,7 +939,6 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n         time(state.session, \"save analysis\", || {\n             save::process_crate(state.tcx.unwrap(),\n                                 state.expanded_crate.unwrap(),\n-                                state.analysis.unwrap(),\n                                 state.crate_name.unwrap(),\n                                 state.input,\n                                 None,"}, {"sha": "d1108304d11d9a02a600eb7b4b51cb317b5d8f42", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -190,7 +190,6 @@ impl PpSourceMode {\n         sess: &'tcx Session,\n         cstore: &'tcx CStore,\n         hir_map: &hir_map::Map<'tcx>,\n-        analysis: &ty::CrateAnalysis,\n         resolutions: &Resolutions,\n         output_filenames: &OutputFilenames,\n         id: &str,\n@@ -223,12 +222,11 @@ impl PpSourceMode {\n                                                                  sess,\n                                                                  cstore,\n                                                                  hir_map.clone(),\n-                                                                 analysis.clone(),\n                                                                  resolutions.clone(),\n                                                                  &mut arenas,\n                                                                  id,\n                                                                  output_filenames,\n-                                                                 |tcx, _, _, _| {\n+                                                                 |tcx, _, _| {\n                     let empty_tables = ty::TypeckTables::empty(None);\n                     let annotation = TypedAnnotation {\n                         tcx,\n@@ -959,7 +957,6 @@ pub fn print_after_parsing(sess: &Session,\n pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                 cstore: &'tcx CStore,\n                                                 hir_map: &hir_map::Map<'tcx>,\n-                                                analysis: &ty::CrateAnalysis,\n                                                 resolutions: &Resolutions,\n                                                 input: &Input,\n                                                 krate: &ast::Crate,\n@@ -972,7 +969,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n         print_with_analysis(sess,\n                             cstore,\n                             hir_map,\n-                            analysis,\n                             resolutions,\n                             crate_name,\n                             output_filenames,\n@@ -1010,7 +1006,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1033,7 +1028,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1048,7 +1042,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1081,7 +1074,6 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                 s.call_with_pp_support_hir(sess,\n                                            cstore,\n                                            hir_map,\n-                                           analysis,\n                                            resolutions,\n                                            output_filenames,\n                                            crate_name,\n@@ -1103,13 +1095,12 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n }\n \n // In an ideal world, this would be a public function called by the driver after\n-// analsysis is performed. However, we want to call `phase_3_run_analysis_passes`\n+// analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        cstore: &'a CStore,\n                                        hir_map: &hir_map::Map<'tcx>,\n-                                       analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,\n                                        crate_name: &str,\n                                        output_filenames: &OutputFilenames,\n@@ -1134,12 +1125,11 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                      sess,\n                                                      cstore,\n                                                      hir_map.clone(),\n-                                                     analysis.clone(),\n                                                      resolutions.clone(),\n                                                      &mut arenas,\n                                                      crate_name,\n                                                      output_filenames,\n-                                                     |tcx, _, _, _| {\n+                                                     |tcx, _, _| {\n         match ppm {\n             PpmMir | PpmMirCFG => {\n                 if let Some(nodeid) = nodeid {"}, {"sha": "995df3802aabd043390405125d7cdc0920af80b7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -1238,12 +1238,9 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 };\n \n                 // Make a comma-separated list of names of imported modules.\n-                let glob_map = &self.save_ctxt.analysis.glob_map;\n-                let names = if glob_map.contains_key(&id) {\n-                    glob_map.get(&id).unwrap().iter().map(|n| n.to_string()).collect()\n-                } else {\n-                    Vec::new()\n-                };\n+                let def_id = self.tcx.hir().local_def_id(id);\n+                let names = self.tcx.names_imported_by_glob_use(def_id);\n+                let names: Vec<_> = names.iter().map(|n| n.to_string()).collect();\n \n                 // Otherwise it's a span with wrong macro expansion info, which\n                 // we don't want to track anyway, since it's probably macro-internal `use`"}, {"sha": "73eb5de5c76f01bbc54903d7d008bbe83c5106bf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -71,7 +71,6 @@ pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n     access_levels: &'l AccessLevels,\n-    analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n     impl_counter: Cell<u32>,\n@@ -1120,7 +1119,6 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     krate: &ast::Crate,\n-    analysis: &'l ty::CrateAnalysis,\n     cratename: &str,\n     input: &'l Input,\n     config: Option<Config>,\n@@ -1139,7 +1137,6 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n-            analysis,\n             access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),"}, {"sha": "7069f04fe188c233795e2f72e656baf2d5d696ba", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -465,15 +465,13 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             freevars: resolver.freevars.clone(),\n             export_map: resolver.export_map.clone(),\n             trait_map: resolver.trait_map.clone(),\n+            glob_map: resolver.glob_map.clone(),\n             maybe_unused_trait_imports: resolver.maybe_unused_trait_imports.clone(),\n             maybe_unused_extern_crates: resolver.maybe_unused_extern_crates.clone(),\n             extern_prelude: resolver.extern_prelude.iter().map(|(ident, entry)| {\n                 (ident.name, entry.introduced_by_item)\n             }).collect(),\n         };\n-        let analysis = ty::CrateAnalysis {\n-            glob_map: resolver.glob_map.clone(),\n-        };\n \n         let mut arenas = AllArenas::new();\n         let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n@@ -489,12 +487,11 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                                         &sess,\n                                                         &*cstore,\n                                                         hir_map,\n-                                                        analysis,\n                                                         resolutions,\n                                                         &mut arenas,\n                                                         &name,\n                                                         &output_filenames,\n-                                                        |tcx, _, _, result| {\n+                                                        |tcx, _, result| {\n             if result.is_err() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }"}, {"sha": "dc1732dbb1d80ca761eeab59994b9cc422326906", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1d06d21989e7b606a0c980a9fa99ffdafb91a2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6f1d06d21989e7b606a0c980a9fa99ffdafb91a2", "patch": "@@ -309,7 +309,7 @@ pub struct Cache {\n \n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n-    // the access levels from crateanalysis.\n+    // the access levels from the privacy check pass.\n     pub access_levels: AccessLevels<DefId>,\n \n     /// The version of the crate being documented, if given from the `--crate-version` flag."}]}