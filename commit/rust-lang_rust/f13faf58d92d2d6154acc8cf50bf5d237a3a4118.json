{"sha": "f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxM2ZhZjU4ZDkyZDJkNjE1NGFjYzhjZjUwYmY1ZDIzN2EzYTQxMTg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-06T00:01:59Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-08-22T10:36:30Z"}, "message": "Remove eval_promoted const-prop hack", "tree": {"sha": "68dbc9c7f8361b1580a5b12c20b14c4bb3389298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68dbc9c7f8361b1580a5b12c20b14c4bb3389298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "html_url": "https://github.com/rust-lang/rust/commit/f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73814654b29604ded9dff105e4156639980d2f2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/73814654b29604ded9dff105e4156639980d2f2c", "html_url": "https://github.com/rust-lang/rust/commit/73814654b29604ded9dff105e4156639980d2f2c"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "67d63e52b2bfa8dfaf780dc59cc3e632f384a96f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "patch": "@@ -49,17 +49,6 @@ pub(crate) fn mk_eval_cx<'mir, 'tcx>(\n     InterpCx::new(tcx.at(span), param_env, CompileTimeInterpreter::new(), Default::default())\n }\n \n-pub(crate) fn eval_promoted<'mir, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    cid: GlobalId<'tcx>,\n-    body: &'mir mir::Body<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> InterpResult<'tcx, MPlaceTy<'tcx>> {\n-    let span = tcx.def_span(cid.instance.def_id());\n-    let mut ecx = mk_eval_cx(tcx, span, param_env);\n-    eval_body_using_ecx(&mut ecx, cid, body, param_env)\n-}\n-\n fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, 'tcx>,\n     op: OpTy<'tcx>,\n@@ -360,7 +349,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             }\n         }\n         // This is a const fn. Call it.\n-        Ok(Some(match ecx.load_mir(instance.def) {\n+        Ok(Some(match ecx.load_mir(instance.def, None) {\n             Ok(body) => body,\n             Err(err) => {\n                 if let err_unsup!(NoMirFor(ref path)) = err.kind {\n@@ -664,14 +653,8 @@ pub fn const_eval_raw_provider<'tcx>(\n         Default::default()\n     );\n \n-    let res = ecx.load_mir(cid.instance.def);\n-    res.map(|body| {\n-        if let Some(index) = cid.promoted {\n-           &tcx.promoted_mir(def_id)[index]\n-        } else {\n-            body\n-        }\n-    }).and_then(\n+    let res = ecx.load_mir(cid.instance.def, cid.promoted);\n+    res.and_then(\n         |body| eval_body_using_ecx(&mut ecx, cid, body, key.param_env)\n     ).and_then(|place| {\n         Ok(RawConst {"}, {"sha": "ac01d436bdc9b1cc4d6795e28dd23373607c590f", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "patch": "@@ -294,6 +294,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn load_mir(\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n+        promoted: Option<mir::Promoted>,\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n@@ -303,7 +304,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         {\n             throw_inval!(TypeckError)\n         }\n-        trace!(\"load mir {:?}\", instance);\n+        trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n+        if let Some(promoted) = promoted {\n+            return Ok(&self.tcx.promoted_mir(did)[promoted]);\n+        }\n         match instance {\n             ty::InstanceDef::Item(def_id) => if self.tcx.is_mir_available(did) {\n                 Ok(self.tcx.optimized_mir(did))"}, {"sha": "9aeef16ba1e38cc1680bcfb7607c8835463d7177", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13faf58d92d2d6154acc8cf50bf5d237a3a4118/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=f13faf58d92d2d6154acc8cf50bf5d237a3a4118", "patch": "@@ -27,7 +27,7 @@ use crate::interpret::{\n     ImmTy, MemoryKind, StackPopCleanup, LocalValue, LocalState,\n };\n use crate::const_eval::{\n-    CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n+    CompileTimeInterpreter, error_to_const_error, mk_eval_cx,\n };\n use crate::transform::{MirPass, MirSource};\n \n@@ -297,11 +297,8 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         instance,\n                         promoted: Some(*promoted),\n                     };\n-                    // cannot use `const_eval` here, because that would require having the MIR\n-                    // for the current function available, but we're producing said MIR right now\n                     let res = self.use_ecx(source_info, |this| {\n-                        let body = &this.tcx.promoted_mir(this.source.def_id())[*promoted];\n-                        eval_promoted(this.tcx, cid, body, this.param_env)\n+                        this.ecx.const_eval_raw(cid)\n                     })?;\n                     trace!(\"evaluated promoted {:?} to {:?}\", promoted, res);\n                     res.into()"}]}