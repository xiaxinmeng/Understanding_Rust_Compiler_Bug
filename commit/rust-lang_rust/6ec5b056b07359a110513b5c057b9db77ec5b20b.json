{"sha": "6ec5b056b07359a110513b5c057b9db77ec5b20b", "node_id": "C_kwDOAAsO6NoAKDZlYzViMDU2YjA3MzU5YTExMDUxM2I1YzA1N2I5ZGI3N2VjNWIyMGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-25T06:30:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T06:30:47Z"}, "message": "Rollup merge of #92714 - yanganto:ignore-message, r=Mark-Simulacrum\n\nProvide ignore message in the result of test\n\nProvide ignore the message in the result of the test.\n\nThis PR does not need RFC, because it is about the presentation of the report of `cargo test`.\n\nHowever, the following document listed here helps you to know about PR.\n\n- [RFC](https://github.com/rust-lang/rfcs/pull/3217)\n- [Rendered](https://github.com/yanganto/rfcs/blob/ignore-test-message/text/0000-ignore-test-message.md)\n- [Previous discussion on IRLO](https://internals.rust-lang.org/t/pre-rfc-provide-ignore-message-when-the-test-ignored/15904)\n\nIf there is something improper, please let me know.\nThanks.", "tree": {"sha": "8add2de050dfc8263d92861c552d4f28a9fa87e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8add2de050dfc8263d92861c552d4f28a9fa87e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ec5b056b07359a110513b5c057b9db77ec5b20b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGHeXCRBK7hj4Ov3rIwAAVYEIAF5W8HBFST1CzUdOzwBNDxMU\nmbCcYYIzeVjtcxIdEAuQU29Hi4rSfrVn2t9XGIBNIqrUOifKLa7yl0Nodnkb3Byb\nCCyCes4V6q7JzNmtCM4X94DCpeiYmGnYk3dW+fiL3X3Yc7DJ4GTx4wn0n89cdqpH\n4lR0nIxnPAXVLJ4sjLpO+GAGTzMR39kF/pcrO12MifdEM5jij2noAmtzuLJS00Qp\n1cvEmdp2Jdxvgb3DzrRFYrFxrFpD4FnR+ON5AuDnvSZG6LcWBqySRbAV1gIX08VT\n4ztBYmxdnuVHvPYH/uLzi8+VHYNZobsLW5AwMA1CbZ0Hr4G8bmnBvuLn1jj4U2c=\n=PU8l\n-----END PGP SIGNATURE-----\n", "payload": "tree 8add2de050dfc8263d92861c552d4f28a9fa87e1\nparent f6a79936da30702b1c717769a2d12dffbad6d30a\nparent bb3b5574cd931bb961afd6ab6a9c5a56d8482bcb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645770647 +0100\ncommitter GitHub <noreply@github.com> 1645770647 +0100\n\nRollup merge of #92714 - yanganto:ignore-message, r=Mark-Simulacrum\n\nProvide ignore message in the result of test\n\nProvide ignore the message in the result of the test.\n\nThis PR does not need RFC, because it is about the presentation of the report of `cargo test`.\n\nHowever, the following document listed here helps you to know about PR.\n\n- [RFC](https://github.com/rust-lang/rfcs/pull/3217)\n- [Rendered](https://github.com/yanganto/rfcs/blob/ignore-test-message/text/0000-ignore-test-message.md)\n- [Previous discussion on IRLO](https://internals.rust-lang.org/t/pre-rfc-provide-ignore-message-when-the-test-ignored/15904)\n\nIf there is something improper, please let me know.\nThanks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec5b056b07359a110513b5c057b9db77ec5b20b", "html_url": "https://github.com/rust-lang/rust/commit/6ec5b056b07359a110513b5c057b9db77ec5b20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ec5b056b07359a110513b5c057b9db77ec5b20b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a79936da30702b1c717769a2d12dffbad6d30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a79936da30702b1c717769a2d12dffbad6d30a", "html_url": "https://github.com/rust-lang/rust/commit/f6a79936da30702b1c717769a2d12dffbad6d30a"}, {"sha": "bb3b5574cd931bb961afd6ab6a9c5a56d8482bcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3b5574cd931bb961afd6ab6a9c5a56d8482bcb", "html_url": "https://github.com/rust-lang/rust/commit/bb3b5574cd931bb961afd6ab6a9c5a56d8482bcb"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "e658631d09038ee22ec243927e53074810f4c970", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -262,6 +262,15 @@ pub fn expand_test_or_bench(\n                                         \"ignore\",\n                                         cx.expr_bool(sp, should_ignore(&cx.sess, &item)),\n                                     ),\n+                                    // ignore_message: Some(\"...\") | None\n+                                    field(\n+                                        \"ignore_message\",\n+                                        if let Some(msg) = should_ignore_message(cx, &item) {\n+                                            cx.expr_some(sp, cx.expr_str(sp, msg))\n+                                        } else {\n+                                            cx.expr_none(sp)\n+                                        },\n+                                    ),\n                                     // compile_fail: true | false\n                                     field(\"compile_fail\", cx.expr_bool(sp, false)),\n                                     // no_run: true | false\n@@ -364,6 +373,20 @@ fn should_ignore(sess: &Session, i: &ast::Item) -> bool {\n     sess.contains_name(&i.attrs, sym::ignore)\n }\n \n+fn should_ignore_message(cx: &ExtCtxt<'_>, i: &ast::Item) -> Option<Symbol> {\n+    match cx.sess.find_by_name(&i.attrs, sym::ignore) {\n+        Some(attr) => {\n+            match attr.meta_item_list() {\n+                // Handle #[ignore(bar = \"foo\")]\n+                Some(_) => None,\n+                // Handle #[ignore] and #[ignore = \"message\"]\n+                None => attr.value_str(),\n+            }\n+        }\n+        None => None,\n+    }\n+}\n+\n fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match cx.sess.find_by_name(&i.attrs, sym::should_panic) {\n         Some(attr) => {"}, {"sha": "b8ed75cb6bb74750074cd93c925b8e4f7c5851c5", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -329,6 +329,10 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_call_global(sp, some, vec![expr])\n     }\n \n+    pub fn expr_none(&self, sp: Span) -> P<ast::Expr> {\n+        let none = self.std_path(&[sym::option, sym::Option, sym::None]);\n+        self.expr_path(self.path_global(sp, none))\n+    }\n     pub fn expr_tuple(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Tup(exprs))\n     }"}, {"sha": "22fcd77dccc52a5f32a5a1d51a09fd2cfa3995e6", "filename": "library/test/src/console.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -103,17 +103,32 @@ impl ConsoleTestState {\n         exec_time: Option<&TestExecTime>,\n     ) -> io::Result<()> {\n         self.write_log(|| {\n+            let TestDesc {\n+                name,\n+                #[cfg(not(bootstrap))]\n+                ignore_message,\n+                ..\n+            } = test;\n             format!(\n                 \"{} {}\",\n                 match *result {\n                     TestResult::TrOk => \"ok\".to_owned(),\n                     TestResult::TrFailed => \"failed\".to_owned(),\n                     TestResult::TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n-                    TestResult::TrIgnored => \"ignored\".to_owned(),\n+                    TestResult::TrIgnored => {\n+                        #[cfg(not(bootstrap))]\n+                        if let Some(msg) = ignore_message {\n+                            format!(\"ignored, {}\", msg)\n+                        } else {\n+                            \"ignored\".to_owned()\n+                        }\n+                        #[cfg(bootstrap)]\n+                        \"ignored\".to_owned()\n+                    }\n                     TestResult::TrBench(ref bs) => fmt_bench_samples(bs),\n                     TestResult::TrTimedFail => \"failed (time limit exceeded)\".to_owned(),\n                 },\n-                test.name,\n+                name,\n             )\n         })?;\n         if let Some(exec_time) = exec_time {"}, {"sha": "e99089e453e7fa131d485c30d8bb49f9218b1a9f", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -61,6 +61,8 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n             desc: TestDesc {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n+                #[cfg(not(bootstrap))]\n+                ignore_message: None,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n                 no_run: false,\n@@ -74,6 +76,8 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n             desc: TestDesc {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n+                #[cfg(not(bootstrap))]\n+                ignore_message: None,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n                 no_run: false,\n@@ -95,6 +99,8 @@ pub fn do_not_run_ignored_tests() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -117,6 +123,8 @@ pub fn ignored_tests_result_in_ignored() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -143,6 +151,8 @@ fn test_should_panic() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n             no_run: false,\n@@ -169,6 +179,8 @@ fn test_should_panic_good_message() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             compile_fail: false,\n             no_run: false,\n@@ -200,6 +212,8 @@ fn test_should_panic_bad_message() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n             no_run: false,\n@@ -235,6 +249,8 @@ fn test_should_panic_non_string_message_type() {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             compile_fail: false,\n             no_run: false,\n@@ -262,6 +278,8 @@ fn test_should_panic_but_succeeds() {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n+                #[cfg(not(bootstrap))]\n+                ignore_message: None,\n                 should_panic,\n                 compile_fail: false,\n                 no_run: false,\n@@ -297,6 +315,8 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -333,6 +353,8 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::No,\n             compile_fail: false,\n             no_run: false,\n@@ -373,6 +395,8 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n     TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n+        #[cfg(not(bootstrap))]\n+        ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -486,6 +510,8 @@ pub fn exclude_should_panic_option() {\n         desc: TestDesc {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n+            #[cfg(not(bootstrap))]\n+            ignore_message: None,\n             should_panic: ShouldPanic::Yes,\n             compile_fail: false,\n             no_run: false,\n@@ -511,6 +537,8 @@ pub fn exact_filter_match() {\n                 desc: TestDesc {\n                     name: StaticTestName(name),\n                     ignore: false,\n+                    #[cfg(not(bootstrap))]\n+                    ignore_message: None,\n                     should_panic: ShouldPanic::No,\n                     compile_fail: false,\n                     no_run: false,\n@@ -601,6 +629,8 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n             desc: TestDesc {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n+                #[cfg(not(bootstrap))]\n+                ignore_message: None,\n                 should_panic: ShouldPanic::No,\n                 compile_fail: false,\n                 no_run: false,\n@@ -753,6 +783,8 @@ pub fn test_bench_no_iter() {\n     let desc = TestDesc {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n+        #[cfg(not(bootstrap))]\n+        ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -776,6 +808,8 @@ pub fn test_bench_iter() {\n     let desc = TestDesc {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n+        #[cfg(not(bootstrap))]\n+        ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -793,6 +827,8 @@ fn should_sort_failures_before_printing_them() {\n     let test_a = TestDesc {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n+        #[cfg(not(bootstrap))]\n+        ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,\n@@ -804,6 +840,8 @@ fn should_sort_failures_before_printing_them() {\n     let test_b = TestDesc {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n+        #[cfg(not(bootstrap))]\n+        ignore_message: None,\n         should_panic: ShouldPanic::No,\n         compile_fail: false,\n         no_run: false,"}, {"sha": "cc75220aa003217c9a9ed51c0c2215215687f6be", "filename": "library/test/src/types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -117,6 +117,8 @@ pub struct TestId(pub usize);\n pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n+    #[cfg(not(bootstrap))]\n+    pub ignore_message: Option<&'static str>,\n     pub should_panic: options::ShouldPanic,\n     pub compile_fail: bool,\n     pub no_run: bool,"}, {"sha": "dc9ce052cb5eece54aac61c451e5acc1925cf94e", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -946,6 +946,8 @@ impl Tester for Collector {\n                     Ignore::None => false,\n                     Ignore::Some(ref ignores) => ignores.iter().any(|s| target_str.contains(s)),\n                 },\n+                #[cfg(not(bootstrap))]\n+                ignore_message: None,\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,\n                 compile_fail: config.compile_fail,"}, {"sha": "2c2239f2b83d19ccf3521a018de2a6d1c5063267", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ec5b056b07359a110513b5c057b9db77ec5b20b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ec5b056b07359a110513b5c057b9db77ec5b20b/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6ec5b056b07359a110513b5c057b9db77ec5b20b", "patch": "@@ -806,6 +806,8 @@ pub fn make_test_description<R: Read>(\n     cfg: Option<&str>,\n ) -> test::TestDesc {\n     let mut ignore = false;\n+    #[cfg(not(bootstrap))]\n+    let ignore_message: Option<String> = None;\n     let mut should_fail = false;\n \n     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n@@ -877,6 +879,8 @@ pub fn make_test_description<R: Read>(\n     test::TestDesc {\n         name,\n         ignore,\n+        #[cfg(not(bootstrap))]\n+        ignore_message,\n         should_panic,\n         compile_fail: false,\n         no_run: false,"}]}