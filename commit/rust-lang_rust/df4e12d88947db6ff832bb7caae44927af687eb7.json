{"sha": "df4e12d88947db6ff832bb7caae44927af687eb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNGUxMmQ4ODk0N2RiNmZmODMyYmI3Y2FhZTQ0OTI3YWY2ODdlYjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T10:56:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-02T10:56:06Z"}, "message": "uninit/zeroed lint: warn against NULL vtables", "tree": {"sha": "f688b1caf2fcd2ad31f3b21778d7ffe58eb97e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f688b1caf2fcd2ad31f3b21778d7ffe58eb97e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4e12d88947db6ff832bb7caae44927af687eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4e12d88947db6ff832bb7caae44927af687eb7", "html_url": "https://github.com/rust-lang/rust/commit/df4e12d88947db6ff832bb7caae44927af687eb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4e12d88947db6ff832bb7caae44927af687eb7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "html_url": "https://github.com/rust-lang/rust/commit/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "e1c57d8afffb8ac6fabf0b7120445085818a24dc", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=df4e12d88947db6ff832bb7caae44927af687eb7", "patch": "@@ -1949,6 +1949,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                 Adt(..) if ty.is_box() => Some((format!(\"`Box` must be non-null\"), None)),\n                 FnPtr(..) => Some((format!(\"Function pointers must be non-null\"), None)),\n                 Never => Some((format!(\"The never type (`!`) has no valid value\"), None)),\n+                RawPtr(tm) if matches!(tm.ty.kind, Dynamic(..)) => // raw ptr to dyn Trait\n+                    Some((format!(\"The vtable of a wide raw pointer must be non-null\"), None)),\n                 // Primitive types with other constraints.\n                 Bool if init == InitKind::Uninit =>\n                     Some((format!(\"Booleans must be `true` or `false`\"), None)),"}, {"sha": "a47980c5ead3091b1bd92fddb86da17ddcd2d099", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=df4e12d88947db6ff832bb7caae44927af687eb7", "patch": "@@ -15,6 +15,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(nll)]\n+#![feature(matches_macro)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "ccc4e77bc97d6fe5b458b54335701b62a75c5111", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=df4e12d88947db6ff832bb7caae44927af687eb7", "patch": "@@ -67,6 +67,9 @@ fn main() {\n         let _val: NonNull<i32> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n         let _val: NonNull<i32> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: *const dyn Send = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: *const dyn Send = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n         // Things that can be zero, but not uninit.\n         let _val: bool = mem::zeroed();\n         let _val: bool = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized"}, {"sha": "85b1e0aaff00e8f67c705260888963a325277eea", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df4e12d88947db6ff832bb7caae44927af687eb7/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=df4e12d88947db6ff832bb7caae44927af687eb7", "patch": "@@ -307,8 +307,30 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |\n    = note: std::ptr::NonNull<i32> must be non-null\n \n+error: the type `*const dyn std::marker::Send` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:70:37\n+   |\n+LL |         let _val: *const dyn Send = mem::zeroed();\n+   |                                     ^^^^^^^^^^^^^\n+   |                                     |\n+   |                                     this code causes undefined behavior when executed\n+   |                                     help: use `MaybeUninit<T>` instead\n+   |\n+   = note: The vtable of a wide raw pointer must be non-null\n+\n+error: the type `*const dyn std::marker::Send` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:71:37\n+   |\n+LL |         let _val: *const dyn Send = mem::uninitialized();\n+   |                                     ^^^^^^^^^^^^^^^^^^^^\n+   |                                     |\n+   |                                     this code causes undefined behavior when executed\n+   |                                     help: use `MaybeUninit<T>` instead\n+   |\n+   = note: The vtable of a wide raw pointer must be non-null\n+\n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:72:26\n+  --> $DIR/uninitialized-zeroed.rs:75:26\n    |\n LL |         let _val: bool = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -319,7 +341,7 @@ LL |         let _val: bool = mem::uninitialized();\n    = note: Booleans must be `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:75:32\n+  --> $DIR/uninitialized-zeroed.rs:78:32\n    |\n LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -334,7 +356,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `NonBig` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:78:28\n+  --> $DIR/uninitialized-zeroed.rs:81:28\n    |\n LL |         let _val: NonBig = mem::uninitialized();\n    |                            ^^^^^^^^^^^^^^^^^^^^\n@@ -345,7 +367,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    = note: NonBig must be initialized inside its custom valid range\n \n error: the type `&'static i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:81:34\n+  --> $DIR/uninitialized-zeroed.rs:84:34\n    |\n LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^\n@@ -356,7 +378,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    = note: References must be non-null\n \n error: the type `&'static [i32]` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:82:36\n+  --> $DIR/uninitialized-zeroed.rs:85:36\n    |\n LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -367,7 +389,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    = note: References must be non-null\n \n error: the type `std::num::NonZeroU32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:83:32\n+  --> $DIR/uninitialized-zeroed.rs:86:32\n    |\n LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                ^^^^^^^^^^^^^^^^^\n@@ -377,5 +399,5 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |\n    = note: std::num::NonZeroU32 must be non-null\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 32 previous errors\n "}]}