{"sha": "20429c00b2d68ad5f682020f49579369ecb0decc", "node_id": "C_kwDOAAsO6NoAKDIwNDI5YzAwYjJkNjhhZDVmNjgyMDIwZjQ5NTc5MzY5ZWNiMGRlY2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-05T18:57:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-05T18:57:10Z"}, "message": "Merge pull request #1338 from bjorn3/build_system_rework5\n\nAvoid clobbering build_system/ and ~/.cargo/bin", "tree": {"sha": "88fd4461ad7bb5c8552d52409d31d042029b4719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88fd4461ad7bb5c8552d52409d31d042029b4719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20429c00b2d68ad5f682020f49579369ecb0decc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtx2GCRBK7hj4Ov3rIwAAVJUIAIpGRh4TBHBn32VUeNV7B16x\nrobKSB+bsglFfMaZtqf9uRqtti+mfNSB01eF/7n7JhYUhPDzr+Batm9omffZa2Jl\nssaZCvYoG+JSluy1N6HIA4aFrb64JepdQJ9dIY9vtFo+42t3MO1NOthN+vu+Kb9Q\nzRDZdTG2M5HBwPGMiuinx88wX6udB0J9T8iKKdEBYZQJHSAysSJ2IOh5Qr7gYL0z\nR71gIm7ySZT2//iOju71YqNgjFGcGs6hNMeO4scexdGdKDMgyPFW8UMng0vhhlbf\nMazCP3YqS6ZhzShyeOoBtk/PwNsKlGWOpxVAUYcRMTZQ6SGcPBmuLl935b7UDkU=\n=lcfj\n-----END PGP SIGNATURE-----\n", "payload": "tree 88fd4461ad7bb5c8552d52409d31d042029b4719\nparent 571405deea18bc71c1376db2625f66301def846e\nparent e14e5c2af1a028a2ad23508ee3d6d5ffda0ebdf0\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1672945030 +0100\ncommitter GitHub <noreply@github.com> 1672945030 +0100\n\nMerge pull request #1338 from bjorn3/build_system_rework5\n\nAvoid clobbering build_system/ and ~/.cargo/bin"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20429c00b2d68ad5f682020f49579369ecb0decc", "html_url": "https://github.com/rust-lang/rust/commit/20429c00b2d68ad5f682020f49579369ecb0decc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20429c00b2d68ad5f682020f49579369ecb0decc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "571405deea18bc71c1376db2625f66301def846e", "url": "https://api.github.com/repos/rust-lang/rust/commits/571405deea18bc71c1376db2625f66301def846e", "html_url": "https://github.com/rust-lang/rust/commit/571405deea18bc71c1376db2625f66301def846e"}, {"sha": "e14e5c2af1a028a2ad23508ee3d6d5ffda0ebdf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e14e5c2af1a028a2ad23508ee3d6d5ffda0ebdf0", "html_url": "https://github.com/rust-lang/rust/commit/e14e5c2af1a028a2ad23508ee3d6d5ffda0ebdf0"}], "stats": {"total": 264, "additions": 130, "deletions": 134}, "files": [{"sha": "7c966aa1ab9a9aa30660f858cdeab1ceb14e2e8f", "filename": ".cirrus.yml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/.cirrus.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/.cirrus.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cirrus.yml?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -6,8 +6,6 @@ task:\n     - pkg install -y curl git bash\n     - curl https://sh.rustup.rs -sSf --output rustup.sh\n     - sh rustup.sh --default-toolchain none -y --profile=minimal\n-  cargo_bin_cache:\n-    folder: ~/.cargo/bin\n   target_cache:\n     folder: target\n   prepare_script:"}, {"sha": "cc9ae19afded61ab6d32b5c094b7debb8c30562d", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -62,12 +62,6 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo installed crates\n-      uses: actions/cache@v3\n-      with:\n-        path: ~/.cargo/bin\n-        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-installed-crates\n-\n     - name: Cache cargo registry and index\n       uses: actions/cache@v3\n       with:"}, {"sha": "968cd43efd15d65894380c73a83dfa602d73adb7", "filename": ".github/workflows/nightly-cranelift.yml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/.github%2Fworkflows%2Fnightly-cranelift.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/.github%2Fworkflows%2Fnightly-cranelift.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fnightly-cranelift.yml?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -13,12 +13,6 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo installed crates\n-      uses: actions/cache@v3\n-      with:\n-        path: ~/.cargo/bin\n-        key: ubuntu-latest-cargo-installed-crates\n-\n     - name: Prepare dependencies\n       run: |\n         git config --global user.email \"user@example.com\""}, {"sha": "2c7de86f9b9071abe77e7cf6e9294db06088abc9", "filename": ".github/workflows/rustc.yml", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frustc.yml?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -10,12 +10,6 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo installed crates\n-      uses: actions/cache@v3\n-      with:\n-        path: ~/.cargo/bin\n-        key: ${{ runner.os }}-cargo-installed-crates\n-\n     - name: Cache cargo registry and index\n       uses: actions/cache@v3\n       with:\n@@ -44,12 +38,6 @@ jobs:\n     steps:\n     - uses: actions/checkout@v3\n \n-    - name: Cache cargo installed crates\n-      uses: actions/cache@v3\n-      with:\n-        path: ~/.cargo/bin\n-        key: ${{ runner.os }}-cargo-installed-crates\n-\n     - name: Cache cargo registry and index\n       uses: actions/cache@v3\n       with:"}, {"sha": "8012e93f6a90ebdee2747548145a52b8f2e3f45c", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -1,4 +1,4 @@\n-target\n+/target\n **/*.rs.bk\n *.rlib\n *.o\n@@ -11,9 +11,6 @@ perf.data.old\n /y.exe\n /y.pdb\n /build\n-/build_sysroot/sysroot_src\n-/build_sysroot/compiler-builtins\n-/build_sysroot/rustc_version\n /dist\n /rust\n /download"}, {"sha": "d8650d1e387d21be8f51991f0c1ac5d92439a1b7", "filename": ".vscode/settings.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Fsettings.json?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -30,7 +30,7 @@\n             ]\n         },\n         {\n-            \"sysroot_src\": \"./build_sysroot/sysroot_src/library\",\n+            \"sysroot_src\": \"./download/sysroot/sysroot_src/library\",\n             \"crates\": [\n                 {\n                     \"root_module\": \"./example/std_example.rs\","}, {"sha": "0ad8863223de6aa32568b2609fbc542322dbc4bd", "filename": "build_system/bench.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -0,0 +1,79 @@\n+use std::env;\n+use std::fs;\n+use std::path::Path;\n+\n+use super::path::{Dirs, RelPath};\n+use super::prepare::GitRepo;\n+use super::rustc_info::{get_file_name, get_wrapper_file_name};\n+use super::utils::{hyperfine_command, is_ci, spawn_and_wait, CargoProject};\n+\n+pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n+    \"ebobby\",\n+    \"simple-raytracer\",\n+    \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n+    \"<none>\",\n+);\n+\n+pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n+    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n+\n+pub(crate) fn benchmark(dirs: &Dirs) {\n+    benchmark_simple_raytracer(dirs);\n+}\n+\n+fn benchmark_simple_raytracer(dirs: &Dirs) {\n+    if std::process::Command::new(\"hyperfine\").output().is_err() {\n+        eprintln!(\"Hyperfine not installed\");\n+        eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n+        std::process::exit(1);\n+    }\n+\n+    let run_runs = env::var(\"RUN_RUNS\")\n+        .unwrap_or(if is_ci() { \"2\" } else { \"10\" }.to_string())\n+        .parse()\n+        .unwrap();\n+\n+    eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n+    let cargo_clif = RelPath::DIST.to_path(dirs).join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n+    let manifest_path = SIMPLE_RAYTRACER.manifest_path(dirs);\n+    let target_dir = SIMPLE_RAYTRACER.target_dir(dirs);\n+\n+    let clean_cmd = format!(\n+        \"cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        manifest_path = manifest_path.display(),\n+        target_dir = target_dir.display(),\n+    );\n+    let llvm_build_cmd = format!(\n+        \"cargo build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        manifest_path = manifest_path.display(),\n+        target_dir = target_dir.display(),\n+    );\n+    let clif_build_cmd = format!(\n+        \"{cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        cargo_clif = cargo_clif.display(),\n+        manifest_path = manifest_path.display(),\n+        target_dir = target_dir.display(),\n+    );\n+\n+    let bench_compile =\n+        hyperfine_command(1, run_runs, Some(&clean_cmd), &llvm_build_cmd, &clif_build_cmd);\n+\n+    spawn_and_wait(bench_compile);\n+\n+    eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n+    fs::copy(\n+        target_dir.join(\"debug\").join(get_file_name(\"main\", \"bin\")),\n+        RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_clif\", \"bin\")),\n+    )\n+    .unwrap();\n+\n+    let mut bench_run = hyperfine_command(\n+        0,\n+        run_runs,\n+        None,\n+        Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n+        Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n+    );\n+    bench_run.current_dir(RelPath::BUILD.to_path(dirs));\n+    spawn_and_wait(bench_run);\n+}"}, {"sha": "711d4ccc55bfb5ffea53f3527f6fe5a84e5250ff", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -146,10 +146,11 @@ pub(crate) fn build_sysroot(\n     }\n }\n \n-// FIXME move to download/ or dist/\n-pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = RelPath::BUILD_SYSROOT.join(\"rustc_version\");\n-pub(crate) static SYSROOT_SRC: RelPath = RelPath::BUILD_SYSROOT.join(\"sysroot_src\");\n-static STANDARD_LIBRARY: CargoProject = CargoProject::new(&RelPath::BUILD_SYSROOT, \"build_sysroot\");\n+pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n+pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n+pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n+pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n+static STANDARD_LIBRARY: CargoProject = CargoProject::new(&BUILD_SYSROOT, \"build_sysroot\");\n \n fn build_clif_sysroot_for_triple(\n     dirs: &Dirs,"}, {"sha": "76d1d013b0dbca75cffe1b71e9014c19728c47fa", "filename": "build_system/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -5,6 +5,7 @@ use std::process;\n use self::utils::is_ci;\n \n mod abi_cafe;\n+mod bench;\n mod build_backend;\n mod build_sysroot;\n mod config;\n@@ -20,6 +21,7 @@ USAGE:\n     ./y.rs prepare [--out-dir DIR]\n     ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n     ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n \n OPTIONS:\n     --sysroot none|clif|llvm\n@@ -54,6 +56,7 @@ enum Command {\n     Prepare,\n     Build,\n     Test,\n+    Bench,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -67,7 +70,7 @@ pub fn main() {\n     if env::var(\"RUST_BACKTRACE\").is_err() {\n         env::set_var(\"RUST_BACKTRACE\", \"1\");\n     }\n-    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n+    env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\"); // FIXME disable this by default\n     env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n \n     if is_ci() {\n@@ -83,6 +86,7 @@ pub fn main() {\n         Some(\"prepare\") => Command::Prepare,\n         Some(\"build\") => Command::Build,\n         Some(\"test\") => Command::Test,\n+        Some(\"bench\") => Command::Bench,\n         Some(flag) if flag.starts_with('-') => arg_error!(\"Expected command found flag {}\", flag),\n         Some(command) => arg_error!(\"Unknown command {}\", command),\n         None => {\n@@ -198,5 +202,16 @@ pub fn main() {\n                 &target_triple,\n             );\n         }\n+        Command::Bench => {\n+            build_sysroot::build_sysroot(\n+                &dirs,\n+                channel,\n+                sysroot_kind,\n+                &cg_clif_dylib,\n+                &host_triple,\n+                &target_triple,\n+            );\n+            bench::benchmark(&dirs);\n+        }\n     }\n }"}, {"sha": "35ab6f111fef40a2fedd4909a2f08af3769c8f20", "filename": "build_system/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fpath.rs?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -42,7 +42,6 @@ impl RelPath {\n     pub(crate) const DIST: RelPath = RelPath::Base(PathBase::Dist);\n \n     pub(crate) const SCRIPTS: RelPath = RelPath::SOURCE.join(\"scripts\");\n-    pub(crate) const BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n     pub(crate) const PATCHES: RelPath = RelPath::SOURCE.join(\"patches\");\n \n     pub(crate) const fn join(&'static self, suffix: &'static str) -> RelPath {"}, {"sha": "9ad4ddc92c5affad8a522ceb14e672380ab0c5b9", "filename": "build_system/prepare.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -3,9 +3,11 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use super::build_sysroot::{SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n+use crate::build_system::rustc_info::get_default_sysroot;\n+\n+use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n+use super::rustc_info::{get_file_name, get_rustc_version};\n use super::utils::{copy_dir_recursively, spawn_and_wait, Compiler};\n \n pub(crate) fn prepare(dirs: &Dirs) {\n@@ -31,14 +33,14 @@ pub(crate) fn prepare(dirs: &Dirs) {\n     super::tests::RAND_REPO.fetch(dirs);\n     super::tests::REGEX_REPO.fetch(dirs);\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n-    super::tests::SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+    super::bench::SIMPLE_RAYTRACER_REPO.fetch(dirs);\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n     let host_compiler = Compiler::host();\n-    let build_cmd = super::tests::SIMPLE_RAYTRACER.build(&host_compiler, dirs);\n+    let build_cmd = super::bench::SIMPLE_RAYTRACER.build(&host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n     fs::copy(\n-        super::tests::SIMPLE_RAYTRACER\n+        super::bench::SIMPLE_RAYTRACER\n             .target_dir(dirs)\n             .join(&host_compiler.triple)\n             .join(\"debug\")\n@@ -49,27 +51,27 @@ pub(crate) fn prepare(dirs: &Dirs) {\n }\n \n fn prepare_sysroot(dirs: &Dirs) {\n-    let rustc_path = get_rustc_path();\n-    let sysroot_src_orig = rustc_path.parent().unwrap().join(\"../lib/rustlib/src/rust\");\n-    let sysroot_src = SYSROOT_SRC;\n-\n+    let sysroot_src_orig = get_default_sysroot().join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n-    sysroot_src.ensure_fresh(dirs);\n-    fs::create_dir_all(sysroot_src.to_path(dirs).join(\"library\")).unwrap();\n     eprintln!(\"[COPY] sysroot src\");\n+\n+    BUILD_SYSROOT.ensure_fresh(dirs);\n+    copy_dir_recursively(&ORIG_BUILD_SYSROOT.to_path(dirs), &BUILD_SYSROOT.to_path(dirs));\n+\n+    fs::create_dir_all(SYSROOT_SRC.to_path(dirs).join(\"library\")).unwrap();\n     copy_dir_recursively(\n         &sysroot_src_orig.join(\"library\"),\n-        &sysroot_src.to_path(dirs).join(\"library\"),\n+        &SYSROOT_SRC.to_path(dirs).join(\"library\"),\n     );\n \n     let rustc_version = get_rustc_version();\n     fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n \n     eprintln!(\"[GIT] init\");\n-    init_git_repo(&sysroot_src.to_path(dirs));\n+    init_git_repo(&SYSROOT_SRC.to_path(dirs));\n \n-    apply_patches(dirs, \"sysroot\", &sysroot_src.to_path(dirs));\n+    apply_patches(dirs, \"sysroot\", &SYSROOT_SRC.to_path(dirs));\n }\n \n pub(crate) struct GitRepo {"}, {"sha": "5b8b6f2df1066875aeb24a15bd8af8b11f875968", "filename": "build_system/tests.rs", "status": "modified", "additions": 7, "deletions": 77, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -1,11 +1,9 @@\n-use super::build_sysroot;\n+use super::bench::SIMPLE_RAYTRACER;\n+use super::build_sysroot::{self, SYSROOT_SRC};\n use super::config;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n-use super::rustc_info::{get_file_name, get_wrapper_file_name};\n-use super::utils::{\n-    hyperfine_command, is_ci, spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler,\n-};\n+use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n use super::SysrootKind;\n use std::env;\n use std::ffi::OsStr;\n@@ -251,18 +249,8 @@ pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n static PORTABLE_SIMD: CargoProject =\n     CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd\");\n \n-pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n-    \"ebobby\",\n-    \"simple-raytracer\",\n-    \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n-    \"<none>\",\n-);\n-\n-pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n-    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n-\n static LIBCORE_TESTS: CargoProject =\n-    CargoProject::new(&RelPath::BUILD_SYSROOT.join(\"sysroot_src/library/core/tests\"), \"core_tests\");\n+    CargoProject::new(&SYSROOT_SRC.join(\"library/core/tests\"), \"core_tests\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n@@ -280,67 +268,9 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::new(\"bench.simple-raytracer\", &|runner| {\n-        let run_runs = env::var(\"RUN_RUNS\")\n-            .unwrap_or(if is_ci() { \"2\" } else { \"10\" }.to_string())\n-            .parse()\n-            .unwrap();\n-\n-        if runner.is_native {\n-            eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-            let cargo_clif = RelPath::DIST\n-                .to_path(&runner.dirs)\n-                .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n-            let manifest_path = SIMPLE_RAYTRACER.manifest_path(&runner.dirs);\n-            let target_dir = SIMPLE_RAYTRACER.target_dir(&runner.dirs);\n-\n-            let clean_cmd = format!(\n-                \"cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n-                manifest_path = manifest_path.display(),\n-                target_dir = target_dir.display(),\n-            );\n-            let llvm_build_cmd = format!(\n-                \"cargo build --manifest-path {manifest_path} --target-dir {target_dir}\",\n-                manifest_path = manifest_path.display(),\n-                target_dir = target_dir.display(),\n-            );\n-            let clif_build_cmd = format!(\n-                \"{cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir}\",\n-                cargo_clif = cargo_clif.display(),\n-                manifest_path = manifest_path.display(),\n-                target_dir = target_dir.display(),\n-            );\n-\n-            let bench_compile =\n-                hyperfine_command(1, run_runs, Some(&clean_cmd), &llvm_build_cmd, &clif_build_cmd);\n-\n-            spawn_and_wait(bench_compile);\n-\n-            eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n-            fs::copy(\n-                target_dir.join(\"debug\").join(get_file_name(\"main\", \"bin\")),\n-                RelPath::BUILD\n-                    .to_path(&runner.dirs)\n-                    .join(get_file_name(\"raytracer_cg_clif\", \"bin\")),\n-            )\n-            .unwrap();\n-\n-            let mut bench_run = hyperfine_command(\n-                0,\n-                run_runs,\n-                None,\n-                Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n-                Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n-            );\n-            bench_run.current_dir(RelPath::BUILD.to_path(&runner.dirs));\n-            spawn_and_wait(bench_run);\n-        } else {\n-            spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.target_compiler.cargo, &runner.dirs));\n-            eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\");\n-            eprintln!(\"[COMPILE] ebobby/simple-raytracer\");\n-            spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n-            eprintln!(\"[BENCH RUN] ebobby/simple-raytracer (skipped)\");\n-        }\n+    TestCase::new(\"test.simple-raytracer\", &|runner| {\n+        spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.host_compiler.cargo, &runner.dirs));\n+        spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n     }),\n     TestCase::new(\"test.libcore\", &|runner| {\n         spawn_and_wait(LIBCORE_TESTS.clean(&runner.host_compiler.cargo, &runner.dirs));"}, {"sha": "cdfc2e143e6748247d056e11488b5adae5ea21f7", "filename": "clean_all.sh", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -1,10 +1,9 @@\n #!/usr/bin/env bash\n set -e\n \n-rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}\n-rm -rf target/ build/ dist/ perf.data{,.old} y.bin\n-rm -rf download/\n+rm -rf target/ download/ build/ dist/ y.bin y.bin.dSYM y.exe y.pdb\n \n # Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n # FIXME remove at some point in the future\n rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/\n+rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}"}, {"sha": "d9912a8158f676715ed0567806ed4609e6ec3e7d", "filename": "config.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/config.txt", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/config.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.txt?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -44,7 +44,7 @@ aot.issue-72793\n \n testsuite.extended_sysroot\n test.rust-random/rand\n-bench.simple-raytracer\n+test.simple-raytracer\n test.libcore\n test.regex-shootout-regex-dna\n test.regex"}, {"sha": "6111c2054446387142b4b27dd21e7ff460162ca0", "filename": "scripts/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/scripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/scripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustup.sh?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -17,10 +17,10 @@ case $1 in\n         done\n \n         ./clean_all.sh\n-        ./y.rs prepare\n \n         (cd build_sysroot && cargo update)\n \n+        ./y.rs prepare\n         ;;\n     \"commit\")\n         git add rust-toolchain build_sysroot/Cargo.lock"}, {"sha": "88bc64455030eeb321448302a1617a071ede89f0", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20429c00b2d68ad5f682020f49579369ecb0decc/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/20429c00b2d68ad5f682020f49579369ecb0decc/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=20429c00b2d68ad5f682020f49579369ecb0decc", "patch": "@@ -51,7 +51,7 @@ popd\n # FIXME remove once inline asm is fully supported\n export RUSTFLAGS=\"$RUSTFLAGS --cfg=rustix_use_libc\"\n \n-export CFG_VIRTUAL_RUST_SOURCE_BASE_DIR=\"$(cd build_sysroot/sysroot_src; pwd)\"\n+export CFG_VIRTUAL_RUST_SOURCE_BASE_DIR=\"$(cd download/sysroot/sysroot_src; pwd)\"\n \n # Allow the testsuite to use llvm tools\n host_triple=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")"}]}