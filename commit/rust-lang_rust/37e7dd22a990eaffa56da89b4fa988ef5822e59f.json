{"sha": "37e7dd22a990eaffa56da89b4fa988ef5822e59f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTdkZDIyYTk5MGVhZmZhNTZkYTg5YjRmYTk4OGVmNTgyMmU1OWY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-01T22:14:54Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-24T20:28:30Z"}, "message": "Specialized `Usefulness` variants are redundant", "tree": {"sha": "f7e1eca7243c2a2efb0406eb8f97f861b76d1a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7e1eca7243c2a2efb0406eb8f97f861b76d1a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e7dd22a990eaffa56da89b4fa988ef5822e59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e7dd22a990eaffa56da89b4fa988ef5822e59f", "html_url": "https://github.com/rust-lang/rust/commit/37e7dd22a990eaffa56da89b4fa988ef5822e59f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e7dd22a990eaffa56da89b4fa988ef5822e59f/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "307a278d5c7afec2e329f5143022a352191a082d", "url": "https://api.github.com/repos/rust-lang/rust/commits/307a278d5c7afec2e329f5143022a352191a082d", "html_url": "https://github.com/rust-lang/rust/commit/307a278d5c7afec2e329f5143022a352191a082d"}], "stats": {"total": 58, "additions": 19, "deletions": 39}, "files": [{"sha": "15f22e03501aef9300237a1ea942d0d5524ded8c", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 19, "deletions": 39, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/37e7dd22a990eaffa56da89b4fa988ef5822e59f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e7dd22a990eaffa56da89b4fa988ef5822e59f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=37e7dd22a990eaffa56da89b4fa988ef5822e59f", "patch": "@@ -846,15 +846,14 @@ impl<'p, 'tcx> SubPatSet<'p, 'tcx> {\n \n #[derive(Clone, Debug)]\n enum Usefulness<'p, 'tcx> {\n-    /// Potentially carries a set of sub-branches that have been found to be unreachable. Used\n-    /// only in the presence of or-patterns, otherwise it stays empty.\n+    /// Carries a set of subpatterns that have been found to be unreachable. If full, this\n+    /// indicates the whole pattern is unreachable. If not, this indicates that the pattern is\n+    /// reachable but has some unreachable sub-patterns (due to or-patterns). In the absence of\n+    /// or-patterns, this is either `Empty` or `Full`.\n     NoWitnesses(SubPatSet<'p, 'tcx>),\n-    /// When not carrying witnesses, indicates that the whole pattern is unreachable.\n-    NoWitnessesFull,\n-    /// Carries a list of witnesses of non-exhaustiveness. Non-empty.\n+    /// Carries a list of witnesses of non-exhaustiveness. If empty, indicates that the whole\n+    /// pattern is unreachable.\n     WithWitnesses(Vec<Witness<'tcx>>),\n-    /// When carrying witnesses, indicates that the whole pattern is unreachable.\n-    WithWitnessesEmpty,\n }\n \n impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n@@ -866,27 +865,19 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n     }\n     fn new_not_useful(preference: WitnessPreference) -> Self {\n         match preference {\n-            ConstructWitness => WithWitnessesEmpty,\n-            LeaveOutWitness => NoWitnessesFull,\n+            ConstructWitness => WithWitnesses(vec![]),\n+            LeaveOutWitness => NoWitnesses(SubPatSet::full()),\n         }\n     }\n \n     /// Combine usefulnesses from two branches. This is an associative operation.\n     fn extend(&mut self, other: Self) {\n         match (&mut *self, other) {\n+            (WithWitnesses(_), WithWitnesses(o)) if o.is_empty() => {}\n+            (WithWitnesses(s), WithWitnesses(o)) if s.is_empty() => *self = WithWitnesses(o),\n             (WithWitnesses(s), WithWitnesses(o)) => s.extend(o),\n-            (WithWitnessesEmpty, WithWitnesses(o)) => *self = WithWitnesses(o),\n-            (WithWitnesses(_), WithWitnessesEmpty) => {}\n-            (WithWitnessesEmpty, WithWitnessesEmpty) => {}\n-\n             (NoWitnesses(s), NoWitnesses(o)) => s.intersect(o),\n-            (NoWitnessesFull, NoWitnesses(o)) => *self = NoWitnesses(o),\n-            (NoWitnesses(_), NoWitnessesFull) => {}\n-            (NoWitnessesFull, NoWitnessesFull) => {}\n-\n-            _ => {\n-                unreachable!()\n-            }\n+            _ => unreachable!(),\n         }\n     }\n \n@@ -909,12 +900,10 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n     /// After calculating the usefulness for a branch of an or-pattern, call this to make this\n     /// usefulness mergeable with those from the other branches.\n     fn unsplit_or_pat(self, alt_id: usize, alt_count: usize, pat: &'p Pat<'tcx>) -> Self {\n-        let subpats = match self {\n-            NoWitnesses(subpats) => subpats,\n-            NoWitnessesFull => SubPatSet::full(),\n-            WithWitnesses(_) | WithWitnessesEmpty => bug!(),\n-        };\n-        NoWitnesses(subpats.unsplit_or_pat(alt_id, alt_count, pat))\n+        match self {\n+            NoWitnesses(subpats) => NoWitnesses(subpats.unsplit_or_pat(alt_id, alt_count, pat)),\n+            WithWitnesses(_) => bug!(),\n+        }\n     }\n \n     /// After calculating usefulness after a specialization, call this to recontruct a usefulness\n@@ -928,6 +917,7 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n         ctor_wild_subpatterns: &Fields<'p, 'tcx>,\n     ) -> Self {\n         match self {\n+            WithWitnesses(witnesses) if witnesses.is_empty() => WithWitnesses(witnesses),\n             WithWitnesses(witnesses) => {\n                 let new_witnesses = if matches!(ctor, Constructor::Missing) {\n                     let mut split_wildcard = SplitWildcard::new(pcx);\n@@ -961,8 +951,6 @@ impl<'p, 'tcx> Usefulness<'p, 'tcx> {\n                 WithWitnesses(new_witnesses)\n             }\n             NoWitnesses(subpats) => NoWitnesses(subpats.unspecialize(ctor_wild_subpatterns.len())),\n-            NoWitnessesFull => NoWitnessesFull,\n-            WithWitnessesEmpty => WithWitnessesEmpty,\n         }\n     }\n }\n@@ -1209,8 +1197,7 @@ crate fn compute_match_usefulness<'p, 'tcx>(\n             let reachability = match usefulness {\n                 NoWitnesses(subpats) if subpats.is_full() => Reachability::Unreachable,\n                 NoWitnesses(subpats) => Reachability::Reachable(subpats.to_spans().unwrap()),\n-                NoWitnessesFull => Reachability::Unreachable,\n-                WithWitnesses(..) | WithWitnessesEmpty => bug!(),\n+                WithWitnesses(..) => bug!(),\n             };\n             (arm, reachability)\n         })\n@@ -1220,15 +1207,8 @@ crate fn compute_match_usefulness<'p, 'tcx>(\n     let v = PatStack::from_pattern(wild_pattern);\n     let usefulness = is_useful(cx, &matrix, &v, ConstructWitness, scrut_hir_id, false, true);\n     let non_exhaustiveness_witnesses = match usefulness {\n-        WithWitnessesEmpty => vec![], // Wildcard pattern isn't useful, so the match is exhaustive.\n-        WithWitnesses(pats) => {\n-            if pats.is_empty() {\n-                bug!(\"Exhaustiveness check returned no witnesses\")\n-            } else {\n-                pats.into_iter().map(|w| w.single_pattern()).collect()\n-            }\n-        }\n-        NoWitnesses(_) | NoWitnessesFull => bug!(),\n+        WithWitnesses(pats) => pats.into_iter().map(|w| w.single_pattern()).collect(),\n+        NoWitnesses(_) => bug!(),\n     };\n     UsefulnessReport { arm_usefulness, non_exhaustiveness_witnesses }\n }"}]}