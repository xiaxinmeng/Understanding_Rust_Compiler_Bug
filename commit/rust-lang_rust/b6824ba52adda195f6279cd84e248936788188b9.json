{"sha": "b6824ba52adda195f6279cd84e248936788188b9", "node_id": "C_kwDOAAsO6NoAKGI2ODI0YmE1MmFkZGExOTVmNjI3OWNkODRlMjQ4OTM2Nzg4MTg4Yjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-24T11:58:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-24T12:27:05Z"}, "message": "Make param index generation a bit more robust", "tree": {"sha": "bb812c0d03dcc8d198223366744c7716ffc6f8b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb812c0d03dcc8d198223366744c7716ffc6f8b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6824ba52adda195f6279cd84e248936788188b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6824ba52adda195f6279cd84e248936788188b9", "html_url": "https://github.com/rust-lang/rust/commit/b6824ba52adda195f6279cd84e248936788188b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6824ba52adda195f6279cd84e248936788188b9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5fcae32d5e0db0f416fbfafbab63366486f0c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5fcae32d5e0db0f416fbfafbab63366486f0c3", "html_url": "https://github.com/rust-lang/rust/commit/4b5fcae32d5e0db0f416fbfafbab63366486f0c3"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "c7777a946893a689e3eb56b45109a7138320f38a", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b6824ba52adda195f6279cd84e248936788188b9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6824ba52adda195f6279cd84e248936788188b9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=b6824ba52adda195f6279cd84e248936788188b9", "patch": "@@ -249,6 +249,11 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     // Now create the real type and const parameters.\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n+    let mut next_index = || {\n+        let prev = i;\n+        i += 1;\n+        prev as u32 + type_start\n+    };\n \n     const TYPE_DEFAULT_NOT_ALLOWED: &'static str = \"defaults for type parameters are only allowed in \\\n     `struct`, `enum`, `type`, or `trait` definitions\";\n@@ -278,15 +283,13 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n \n             let kind = ty::GenericParamDefKind::Type { has_default: default.is_some(), synthetic };\n \n-            let param_def = ty::GenericParamDef {\n-                index: type_start + i as u32,\n+            Some(ty::GenericParamDef {\n+                index: next_index(),\n                 name: param.name.ident().name,\n                 def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind,\n-            };\n-            i += 1;\n-            Some(param_def)\n+            })\n         }\n         GenericParamKind::Const { default, .. } => {\n             if !matches!(allow_defaults, Defaults::Allowed) && default.is_some() {\n@@ -297,15 +300,13 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 );\n             }\n \n-            let param_def = ty::GenericParamDef {\n-                index: type_start + i as u32,\n+            Some(ty::GenericParamDef {\n+                index: next_index(),\n                 name: param.name.ident().name,\n                 def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Const { has_default: default.is_some() },\n-            };\n-            i += 1;\n-            Some(param_def)\n+            })\n         }\n     }));\n \n@@ -323,8 +324,8 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             &[\"<closure_kind>\", \"<closure_signature>\", \"<upvars>\"][..]\n         };\n \n-        params.extend(dummy_args.iter().enumerate().map(|(i, &arg)| ty::GenericParamDef {\n-            index: type_start + i as u32,\n+        params.extend(dummy_args.iter().map(|&arg| ty::GenericParamDef {\n+            index: next_index(),\n             name: Symbol::intern(arg),\n             def_id,\n             pure_wrt_drop: false,\n@@ -337,7 +338,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n         if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n             params.push(ty::GenericParamDef {\n-                index: type_start,\n+                index: next_index(),\n                 name: Symbol::intern(\"<const_ty>\"),\n                 def_id,\n                 pure_wrt_drop: false,"}]}