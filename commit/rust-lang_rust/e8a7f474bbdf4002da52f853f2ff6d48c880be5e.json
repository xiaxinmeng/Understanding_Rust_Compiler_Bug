{"sha": "e8a7f474bbdf4002da52f853f2ff6d48c880be5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YTdmNDc0YmJkZjQwMDJkYTUyZjg1M2YyZmY2ZDQ4Yzg4MGJlNWU=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-07T08:39:56Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-07T16:02:34Z"}, "message": "Rewrite (and improve) CI.", "tree": {"sha": "d5f853149aa2eca38a4a8a6017a2dab9df40c950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5f853149aa2eca38a4a8a6017a2dab9df40c950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a7f474bbdf4002da52f853f2ff6d48c880be5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a7f474bbdf4002da52f853f2ff6d48c880be5e", "html_url": "https://github.com/rust-lang/rust/commit/e8a7f474bbdf4002da52f853f2ff6d48c880be5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a7f474bbdf4002da52f853f2ff6d48c880be5e/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c327a034425b1cc44f47a825ab2dcbfdd24b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c327a034425b1cc44f47a825ab2dcbfdd24b22", "html_url": "https://github.com/rust-lang/rust/commit/a1c327a034425b1cc44f47a825ab2dcbfdd24b22"}], "stats": {"total": 400, "additions": 184, "deletions": 216}, "files": [{"sha": "2104c74a4d925b26b9be6106910379bdcc93730d", "filename": ".github/workflows/ci.yml", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/e8a7f474bbdf4002da52f853f2ff6d48c880be5e/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e8a7f474bbdf4002da52f853f2ff6d48c880be5e/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=e8a7f474bbdf4002da52f853f2ff6d48c880be5e", "patch": "@@ -0,0 +1,151 @@\n+name: CI\n+\n+on:\n+  pull_request:\n+  push:\n+    branches:\n+      - master\n+\n+env:\n+  CARGO_NET_RETRY: 10\n+  RUSTUP_MAX_RETRIES: 10\n+\n+jobs:\n+  x86-tests:\n+    name: \"${{ matrix.target_feature }} on ${{ matrix.target }}\"\n+    runs-on: ${{ matrix.os }}\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        target: [x86_64-pc-windows-msvc, i686-pc-windows-msvc, i586-pc-windows-msvc, x86_64-unknown-linux-gnu, x86_64-apple-darwin]\n+        # `default` means we use the default target config for the target,\n+        # `native` means we run with `-Ctarget-cpu=native`, and anything else is\n+        # an arg to `-Ctarget-feature`\n+        target_feature: [default, native, +sse3, +ssse3, +sse4.1, +sse4.2, +avx, +avx2]\n+\n+        exclude:\n+          # The macos runners seem to only reliably support up to `avx`.\n+          - { target: x86_64-apple-darwin, target_feature: +avx2 }\n+          # These features are statically known to be present for all 64 bit\n+          # macs, and thus are covered by the `default` test\n+          - { target: x86_64-apple-darwin, target_feature: +sse3 }\n+          - { target: x86_64-apple-darwin, target_feature: +ssse3 }\n+          # -Ctarget-cpu=native sounds like bad-news if target != host\n+          - { target: i686-pc-windows-msvc, target_feature: native }\n+          - { target: i586-pc-windows-msvc, target_feature: native }\n+\n+        include:\n+          # Populate the `matrix.os` field\n+          - { target: x86_64-apple-darwin,      os: macos-latest }\n+          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }\n+          - { target: x86_64-pc-windows-msvc,   os: windows-latest }\n+          - { target: i686-pc-windows-msvc,     os: windows-latest }\n+          - { target: i586-pc-windows-msvc,     os: windows-latest }\n+\n+          # These are globally available on all the other targets.\n+          - { target: i586-pc-windows-msvc, target_feature: +sse, os: windows-latest }\n+          - { target: i586-pc-windows-msvc, target_feature: +sse2, os: windows-latest }\n+\n+          # Annoyingly, the x86_64-unknown-linux-gnu runner *almost* always has\n+          # avx512vl, but occasionally doesn't. As a result, we still run that\n+          # one under travis.\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Setup Rust\n+        run: |\n+          rustup update nightly --no-self-update\n+          rustup default nightly\n+          rustup target add ${{ matrix.target }}\n+\n+      - name: Configure RUSTFLAGS\n+        shell: bash\n+        run: |\n+          case \"${{ matrix.target_feature }}\" in\n+            default)\n+              ;;\n+            native)\n+              echo \"RUSTFLAGS=-Ctarget-cpu=native\" >> $GITHUB_ENV\n+              ;;\n+            *)\n+              echo \"RUSTFLAGS=-Ctarget-feature=${{ matrix.target_feature }}\" >> $GITHUB_ENV\n+              ;;\n+          esac\n+\n+      # Super useful for debugging why a SIGILL occurred.\n+      - name: Dump target configuration and support\n+        run: |\n+          rustc -Vv\n+\n+          echo \"Caveat: not all target features are expected to be logged\"\n+\n+          echo \"## Requested target configuration (RUSTFLAGS=$RUSTFLAGS)\"\n+          rustc --print=cfg --target=${{ matrix.target }} $RUSTFLAGS\n+\n+          echo \"## Supported target configuration for --target=${{ matrix.target }}\"\n+          rustc --print=cfg --target=${{ matrix.target }} -Ctarget-cpu=native\n+\n+          echo \"## Natively supported target configuration\"\n+          rustc --print=cfg -Ctarget-cpu=native\n+\n+      - name: Test (debug)\n+        run: cargo test --verbose --target=${{ matrix.target }}\n+\n+      - name: Test (release)\n+        run: cargo test --verbose --target=${{ matrix.target }} --release\n+\n+  cross-tests:\n+    name: \"${{ matrix.target }} (via cross)\"\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      # TODO: Sadly, we cant configure target-feature in a meaningful way\n+      # because `cross` doesn't tell qemu to enable any non-default cpu\n+      # features, nor does it give us a way to do so.\n+      #\n+      # Ultimately, we'd like to do something like [rust-lang/stdarch][stdarch].\n+      # This is a lot more complex... but in practice it's likely that we can just\n+      # snarf the docker config from around [here][1000-dockerfiles].\n+      #\n+      # [stdarch]: https://github.com/rust-lang/stdarch/blob/a5db4eaf/.github/workflows/main.yml#L67\n+      # [1000-dockerfiles]: https://github.com/rust-lang/stdarch/tree/a5db4eaf/ci/docker\n+\n+      matrix:\n+        target:\n+          - i586-unknown-linux-gnu\n+          # 32-bit arm has a few idiosyncracies like having subnormal flushing\n+          # to zero on by default. Ideally we'd set\n+          - armv7-unknown-linux-gnueabihf\n+          # Note: The issue above means neither of these mips targets will use\n+          # MSA (mips simd) but MIPS uses a nonstandard binary representation\n+          # for NaNs which makes it worth testing on despite that.\n+          - mips-unknown-linux-gnu\n+          - mips64-unknown-linux-gnuabi64\n+          - riscv64gc-unknown-linux-gnu\n+\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Setup Rust\n+        run: |\n+          rustup update nightly --no-self-update\n+          rustup default nightly\n+          rustup target add ${{ matrix.target }}\n+          rustup component add rust-src\n+\n+      - name: Install Cross\n+        # Equivalent to `cargo install cross`, but downloading a prebuilt\n+        # binary. Ideally we wouldn't hardcode a version, but the version number\n+        # being part of the tarball means we can't just use the download/latest\n+        # URL :(\n+        run: |\n+          CROSS_URL=https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz\n+          mkdir -p \"$HOME/.bin\"\n+          curl -sfSL --retry-delay 10 --retry 5 \"${CROSS_URL}\" | tar zxf - -C \"$HOME/.bin\"\n+          echo \"$HOME/.bin\" >> $GITHUB_PATH\n+\n+      - name: Test (debug)\n+        run: cross test --verbose --target=${{ matrix.target }}\n+\n+      - name: Test (release)\n+        run: cross test --verbose --target=${{ matrix.target }} --release\n+"}, {"sha": "c1fda2e4f1705bb649bb02592a5bfae6ba8b6987", "filename": ".travis.yml", "status": "modified", "additions": 33, "deletions": 216, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/e8a7f474bbdf4002da52f853f2ff6d48c880be5e/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/e8a7f474bbdf4002da52f853f2ff6d48c880be5e/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=e8a7f474bbdf4002da52f853f2ff6d48c880be5e", "patch": "@@ -5,257 +5,74 @@ rust:\n matrix:\n   fast_finish: true\n   include:\n-    # Linux (x86_64)\n-\n-    - name: \"x86_64-unknown-linux-gnu\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-\n-    - name: \"x86_64-unknown-linux-gnu+sse\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=sse\n-\n-    - name: \"x86_64-unknown-linux-gnu+sse2\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=sse2\n-\n-    - name: \"x86_64-unknown-linux-gnu+sse3\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=sse3\n-\n-    - name: \"x86_64-unknown-linux-gnu+sse4.1\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=sse4.1\n-\n-    - name: \"x86_64-unknown-linux-gnu+sse4.2\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=sse4.2\n-\n-    - name: \"x86_64-unknown-linux-gnu+avx\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=avx\n-\n-    - name: \"x86_64-unknown-linux-gnu+avx2\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=avx2\n-\n-    - name: \"x86_64-unknown-linux-gnu+avx512vl\"\n-      os: linux\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-unknown-linux-gnu\n-        - TARGET_FEATURE=avx512vl\n-\n     # Linux (aarch64)\n-\n-    - name: \"aarch64-unknown-linux-gnu\"\n+    - name: \"aarch64-unknown-linux-gnu (neon)\"\n       os: linux\n       arch: arm64\n-      env:\n-        - TARGET=aarch64-unknown-linux-gnu\n \n-    - name: \"aarch64-unknown-linux-gnu+neon\"\n+    - name: \"aarch64-unknown-linux-gnu (neon, sve)\"\n       os: linux\n       arch: arm64\n-      env:\n-        - TARGET=aarch64-unknown-linux-gnu\n-        - TARGET_FEATURE=neon\n+      env: RUSTFLAGS=-Ctarget-feature=+sve\n \n-    - name: \"aarch64-unknown-linux-gnu+sve\"\n+    - name: \"aarch64-unknown-linux-gnu (native, see log for cfg)\"\n       os: linux\n       arch: arm64\n-      env:\n-        - TARGET=aarch64-unknown-linux-gnu\n-        - TARGET_FEATURE=sve\n-\n-    # Linux (powerpc64)\n+      env: RUSTFLAGS=-Ctarget-cpu=native\n \n-    - name: \"powerpc64le-unknown-linux-gnu\"\n+    # Linux (powerpc64le)\n+    - name: \"powerpc64le-unknown-linux-gnu (altivec, vsx, power8-*)\"\n       os: linux\n       arch: ppc64le\n-      env:\n-        - TARGET=powerpc64le-unknown-linux-gnu\n \n-    - name: \"powerpc64le-unknown-linux-gnu+vsx\"\n+    - name: \"powerpc64le-unknown-linux-gnu (native, see log for cfg)\"\n       os: linux\n       arch: ppc64le\n-      env:\n-        - TARGET=powerpc64le-unknown-linux-gnu\n-        - TARGET_FEATURE=vsx\n-\n-    # Windows (x86_64)\n-\n-    - name: \"x86_64-pc-windows-msvc\"\n-      os: windows\n-      arch: amd64\n-      env: TARGET=x86_64-pc-windows-msvc\n-    \n-    # Windows (i686)\n-\n-    - name: \"i686-pc-windows-msvc\"\n-      os: windows\n-      env: TARGET=i686-pc-windows-msvc\n-\n-    - name: \"i686-pc-windows-msvc+sse\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=sse\n+      env: RUSTFLAGS=-Ctarget-cpu=native\n \n-    - name: \"i686-pc-windows-msvc+sse2\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=sse2\n-\n-    - name: \"i686-pc-windows-msvc+sse3\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=sse3\n-\n-    - name: \"i686-pc-windows-msvc+sse4.1\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=sse4.1\n-\n-    - name: \"i686-pc-windows-msvc+sse4.2\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=sse4.2\n-\n-    - name: \"i686-pc-windows-msvc+avx\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=avx\n-\n-    - name: \"i686-pc-windows-msvc+avx2\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i686-pc-windows-msvc\n-        - TARGET_FEATURE=avx2\n-\n-    # Windows (i586)\n-\n-    - name: \"i586-pc-windows-msvc\"\n-      os: windows\n-      env: TARGET=i586-pc-windows-msvc\n-\n-    - name: \"i586-pc-windows-msvc+sse\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=sse\n-\n-    - name: \"i586-pc-windows-msvc+sse2\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=sse2\n-\n-    - name: \"i586-pc-windows-msvc+sse3\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=sse3\n-\n-    - name: \"i586-pc-windows-msvc+sse4.1\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=sse4.1\n-\n-    - name: \"i586-pc-windows-msvc+sse4.2\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=sse4.2\n-\n-    - name: \"i586-pc-windows-msvc+avx\"\n-      os: windows\n-      arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=avx\n-\n-    - name: \"i586-pc-windows-msvc+avx2\"\n-      os: windows\n+    # Linux (x86_64) (for AVX512, which sadly seems to only *usually* be present\n+    # on the github actions linux runner...)\n+    - name: \"x86_64-unknown-linux-gnu+avx512vl\"\n+      os: linux\n       arch: amd64\n-      env:\n-        - TARGET=i586-pc-windows-msvc\n-        - TARGET_FEATURE=avx2\n-\n-    # OSX (x86_64)\n+      env: RUSTFLAGS=-Ctarget-feature=+avx512vl\n \n-    - name: \"x86_64-apple-darwin\"\n-      os: osx\n-      arch: amd64\n-      env:\n-        - TARGET=x86_64-apple-darwin\n-    \n     # WebAssembly (wasm-bindgen)\n-\n     - name: \"wasm32-unknown-unknown (node, firefox, chrome)\"\n       os: linux\n       arch: amd64\n       addons:\n         firefox: latest\n-        chrome : stable\n+        chrome: stable\n       install:\n         - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n       script:\n         - wasm-pack test --node --firefox --chrome --headless crates/core_simd\n-    \n+        - wasm-pack test --node --firefox --chrome --headless crates/core_simd --release\n+\n     - name: \"wasm32-unknown-unknown+simd128 (chrome)\"\n       os: linux\n       arch: amd64\n       addons:\n-        chrome : stable\n+        chrome: stable\n       install:\n         - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n       script:\n-        - RUSTFLAGS=\"-C target-feature=+simd128\"\n+        - export RUSTFLAGS=\"-C target-feature=+simd128\"\n         - wasm-pack test --chrome --headless crates/core_simd\n+        - wasm-pack test --chrome --headless crates/core_simd --release\n \n script:\n-  - rustup target add $TARGET\n-  - if [ -n \"$TARGET_FEATURE\" ]; then RUSTFLAGS=\"-C target-feature=+$TARGET_FEATURE\"; fi\n-  - cargo test -v --target $TARGET\n+  - echo \"## Requested target configuration (RUSTFLAGS=$RUSTFLAGS)\"\n+  - rustc --print=cfg $RUSTFLAGS\n+\n+  - echo \"## Supported target configuration\"\n+  - rustc --print=cfg -Ctarget-cpu=native\n+\n+  - echo \"\\n---\\n\"\n+\n+  - echo \"## Running tests (debug)\"\n+  - cargo test -v\n+\n+  - echo \"## Running tests (release)\"\n+  - cargo test -v --release"}]}