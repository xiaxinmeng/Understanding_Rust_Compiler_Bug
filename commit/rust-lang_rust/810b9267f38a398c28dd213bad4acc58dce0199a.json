{"sha": "810b9267f38a398c28dd213bad4acc58dce0199a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGI5MjY3ZjM4YTM5OGMyOGRkMjEzYmFkNGFjYzU4ZGNlMDE5OWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T02:18:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-03T02:18:24Z"}, "message": "Auto merge of #86335 - CDirkx:ipv4-in-ipv6, r=dtolnay\n\nCommit to not supporting IPv4-in-IPv6 addresses\n\nStabilization of the `ip` feature has for a long time been blocked on the question of whether Rust should support handling \"IPv4-in-IPv6\" addresses: should the various `Ipv6Address` property methods take IPv4-mapped or IPv4-compatible addresses into account. See also the IPv4-in-IPv6 Address Support issue #85609 and #69772 which originally asked the question.\n\n# Overview\n\nIn the recent PR #85655 I proposed changing `is_loopback` to take IPv4-mapped addresses into account, so `::ffff:127.0.0.1` would be recognized as a looback address. However, due to the points that came up in that PR, I alternatively propose the following: Keeping the current behaviour and commit to not assigning any special meaning for IPv4-in-IPv6 addresses, other than what the standards prescribe. This would apply to the stable method `is_loopback`, but also to currently unstable methods like `is_global` and `is_documentation` and any future methods. This is implemented in this PR as a change in documentation, specifically the following section:\n\n> Both types of addresses are not assigned any special meaning by this implementation, other than what the relevant standards prescribe. This means that an address like `::ffff:127.0.0.1`, while representing an IPv4 loopback address, is not itself an IPv6 loopback address; only `::1` is. To handle these so called \"IPv4-in-IPv6\" addresses, they have to first be converted to their canonical IPv4 address.\n\n# Discussion\n\nIn the discussion for or against supporting IPv4-in-IPv6 addresses the question what would be least surprising for users of other languages has come up several times. At first it seemed most big other languages supported IPv4-in-IPv6 addresses (or at least considered `::ffff:127.0.0.1` a loopback address). However after further investigation it appears that supporting IPv4-in-IPv6 addresses comes down to how a language represents addresses. .Net and Go do not have a separate type for IPv4 or IPv6 addresses, and do consider `::ffff:127.0.0.1` a loopback address. Java and Python, which do have separate types, do not consider `::ffff:127.0.0.1` a loopback address. Seeing as Rust has the separate `Ipv6Addr` type, it would make sense to also not support IPv4-in-IPv6 addresses. Note that this focuses on IPv4-mapped addresses, no other language handles IPv4-compatible addresses.\n\nAnother issue that was raised is how useful supporting these IPv4-in-IPv6 addresses would be in practice. Again with the example of `::ffff:127.0.0.1`, considering it a loopback address isn't too useful as to use it with most of the socket APIs it has to be converted to an IPv4 address anyway. From that perspective it would be better to instead provide better ways for doing this conversion like stabilizing `to_ipv4_mapped` or introducing a `to_canonical` method.\n\nA point in favour of not supporting IPv4-in-IPv6 addresses is that that is the behaviour Rust has always had, and that supporting it would require changing already stable functions like `is_loopback`. This also keeps the documentation of these functions simpler, as we only have to refer to the relevant definitions in the IPv6 specification.\n\n# Decision\n\nTo make progress on the `ip` feature, a decision needs to be made on whether or not to support IPv4-in-IPv6 addresses.\nThere are several options:\n\n- Keep the current implementation and commit to never supporting IPv4-in-IPv6 addresses (accept this PR).\n- Support IPv4-in-IPv6 addresses in some/all `IPv6Addr` methods (accept PR #85655).\n- Keep the current implementation and but not commit to anything yet (reject both this PR and PR #85655), this entire issue will however come up again in the stabilization of several methods under the `ip` feature.\n\nThere are more options, like supporting IPv4-in-IPv6 addresses in `IpAddr` methods instead, but to my knowledge those haven't been seriously argued for by anyone.\n\nThere is currently an FCP ongoing on PR #85655. I would ask the libs team for an alternative FCP on this PR as well, which if completed means the rejection of PR #85655, and the decision to commit to not supporting IPv4-in-IPv6 addresses.\n\nIf anyone feels there is not enough evidence yet to make the decision for or against supporting IPv4-in-IPv6 addresses, let me know and I'll do whatever I can to resolve it.", "tree": {"sha": "bda78895fccd4ac29fcc1fc8da81b7df61aedf6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bda78895fccd4ac29fcc1fc8da81b7df61aedf6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810b9267f38a398c28dd213bad4acc58dce0199a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810b9267f38a398c28dd213bad4acc58dce0199a", "html_url": "https://github.com/rust-lang/rust/commit/810b9267f38a398c28dd213bad4acc58dce0199a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810b9267f38a398c28dd213bad4acc58dce0199a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f63ab6cfa241cad4926bc74c8f54988c33714c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63ab6cfa241cad4926bc74c8f54988c33714c3d", "html_url": "https://github.com/rust-lang/rust/commit/f63ab6cfa241cad4926bc74c8f54988c33714c3d"}, {"sha": "1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec", "html_url": "https://github.com/rust-lang/rust/commit/1f2480b9d47a7cc5a85fdd1eaa5e542cfd75feec"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "19e696bfef89db75571f0635f3a3c7f1e252adb2", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/810b9267f38a398c28dd213bad4acc58dce0199a/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810b9267f38a398c28dd213bad4acc58dce0199a/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=810b9267f38a398c28dd213bad4acc58dce0199a", "patch": "@@ -84,13 +84,59 @@ pub struct Ipv4Addr {\n /// IPv6 addresses are defined as 128-bit integers in [IETF RFC 4291].\n /// They are usually represented as eight 16-bit segments.\n ///\n-/// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n-///\n /// The size of an `Ipv6Addr` struct may vary depending on the target operating\n /// system.\n ///\n /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n ///\n+/// # Embedding IPv4 Addresses\n+///\n+/// See [`IpAddr`] for a type encompassing both IPv4 and IPv6 addresses.\n+///\n+/// To assist in the transition from IPv4 to IPv6 two types of IPv6 addresses that embed an IPv4 address were defined:\n+/// IPv4-compatible and IPv4-mapped addresses. Of these IPv4-compatible addresses have been officially deprecated.\n+///\n+/// Both types of addresses are not assigned any special meaning by this implementation,\n+/// other than what the relevant standards prescribe. This means that an address like `::ffff:127.0.0.1`,\n+/// while representing an IPv4 loopback address, is not itself an IPv6 loopback address; only `::1` is.\n+/// To handle these so called \"IPv4-in-IPv6\" addresses, they have to first be converted to their canonical IPv4 address.\n+///\n+/// ### IPv4-Compatible IPv6 Addresses\n+///\n+/// IPv4-compatible IPv6 addresses are defined in [IETF RFC 4291 Section 2.5.5.1], and have been officially deprecated.\n+/// The RFC describes the format of an \"IPv4-Compatible IPv6 address\" as follows:\n+///\n+/// ```text\n+/// |                80 bits               | 16 |      32 bits        |\n+/// +--------------------------------------+--------------------------+\n+/// |0000..............................0000|0000|    IPv4 address     |\n+/// +--------------------------------------+----+---------------------+\n+/// ```\n+/// So `::a.b.c.d` would be an IPv4-compatible IPv6 address representing the IPv4 address `a.b.c.d`.\n+///\n+/// To convert from an IPv4 address to an IPv4-compatible IPv6 address, use [`Ipv4Addr::to_ipv6_compatible`].\n+/// Use [`Ipv6Addr::to_ipv4`] to convert an IPv4-compatible IPv6 address to the canonical IPv4 address.\n+///\n+/// [IETF RFC 4291 Section 2.5.5.1]: https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.1\n+///\n+/// ### IPv4-Mapped IPv6 Addresses\n+///\n+/// IPv4-mapped IPv6 addresses are defined in [IETF RFC 4291 Section 2.5.5.2].\n+/// The RFC describes the format of an \"IPv4-Mapped IPv6 address\" as follows:\n+///\n+/// ```text\n+/// |                80 bits               | 16 |      32 bits        |\n+/// +--------------------------------------+--------------------------+\n+/// |0000..............................0000|FFFF|    IPv4 address     |\n+/// +--------------------------------------+----+---------------------+\n+/// ```\n+/// So `::ffff:a.b.c.d` would be an IPv4-mapped IPv6 address representing the IPv4 address `a.b.c.d`.\n+///\n+/// To convert from an IPv4 address to an IPv4-mapped IPv6 address, use [`Ipv4Addr::to_ipv6_mapped`].\n+/// Use [`Ipv6Addr::to_ipv4`] to convert an IPv4-mapped IPv6 address to the canonical IPv4 address.\n+///\n+/// [IETF RFC 4291 Section 2.5.5.2]: https://datatracker.ietf.org/doc/html/rfc4291#section-2.5.5.2\n+///\n /// # Textual representation\n ///\n /// `Ipv6Addr` provides a [`FromStr`] implementation. There are many ways to represent\n@@ -766,13 +812,14 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-compatible [`IPv6` address].\n+    /// Converts this address to an [IPv4-compatible] [`IPv6` address].\n     ///\n     /// `a.b.c.d` becomes `::a.b.c.d`\n     ///\n-    /// This isn't typically the method you want; these addresses don't typically\n-    /// function on modern systems. Use `to_ipv6_mapped` instead.\n+    /// Note that IPv4-compatible addresses have been officially deprecated.\n+    /// If you don't explicitly need an IPv4-compatible address for legacy reasons, consider using `to_ipv6_mapped` instead.\n     ///\n+    /// [IPv4-compatible]: Ipv6Addr#ipv4-compatible-ipv6-addresses\n     /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n@@ -795,10 +842,11 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Converts this address to an IPv4-mapped [`IPv6` address].\n+    /// Converts this address to an [IPv4-mapped] [`IPv6` address].\n     ///\n     /// `a.b.c.d` becomes `::ffff:a.b.c.d`\n     ///\n+    /// [IPv4-mapped]: Ipv6Addr#ipv4-mapped-ipv6-addresses\n     /// [`IPv6` address]: Ipv6Addr\n     ///\n     /// # Examples\n@@ -1201,11 +1249,13 @@ impl Ipv6Addr {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::UNSPECIFIED.octets())\n     }\n \n-    /// Returns [`true`] if this is a loopback address (::1).\n+    /// Returns [`true`] if this is the [loopback address] (`::1`),\n+    /// as defined in [IETF RFC 4291 section 2.5.3].\n     ///\n-    /// This property is defined in [IETF RFC 4291].\n+    /// Contrary to IPv4, in IPv6 there is only one loopback address.\n     ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [loopback address]: Ipv6Addr::LOCALHOST\n+    /// [IETF RFC 4291 section 2.5.3]: https://tools.ietf.org/html/rfc4291#section-2.5.3\n     ///\n     /// # Examples\n     ///\n@@ -1476,13 +1526,14 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n-    /// Converts this address to an [`IPv4` address] if it's an \"IPv4-mapped IPv6 address\"\n-    /// defined in [IETF RFC 4291 section 2.5.5.2], otherwise returns [`None`].\n+    /// Converts this address to an [`IPv4` address] if it's an [IPv4-mapped] address,\n+    /// as defined in [IETF RFC 4291 section 2.5.5.2], otherwise returns [`None`].\n     ///\n     /// `::ffff:a.b.c.d` becomes `a.b.c.d`.\n     /// All addresses *not* starting with `::ffff` will return `None`.\n     ///\n     /// [`IPv4` address]: Ipv4Addr\n+    /// [IPv4-mapped]: Ipv6Addr\n     /// [IETF RFC 4291 section 2.5.5.2]: https://tools.ietf.org/html/rfc4291#section-2.5.5.2\n     ///\n     /// # Examples\n@@ -1509,12 +1560,19 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Converts this address to an [`IPv4` address]. Returns [`None`] if this address is\n-    /// neither IPv4-compatible or IPv4-mapped.\n+    /// Converts this address to an [`IPv4` address] if it is either\n+    /// an [IPv4-compatible] address as defined in [IETF RFC 4291 section 2.5.5.1],\n+    /// or an [IPv4-mapped] address as defined in [IETF RFC 4291 section 2.5.5.2],\n+    /// otherwise returns [`None`].\n     ///\n     /// `::a.b.c.d` and `::ffff:a.b.c.d` become `a.b.c.d`\n+    /// All addresses *not* starting with either all zeroes or `::ffff` will return `None`.\n     ///\n-    /// [`IPv4` address]: Ipv4Addr\n+    /// [IPv4 address]: Ipv4Addr\n+    /// [IPv4-compatible]: Ipv6Addr#ipv4-compatible-ipv6-addresses\n+    /// [IPv4-mapped]: Ipv6Addr#ipv4-mapped-ipv6-addresses\n+    /// [IETF RFC 4291 section 2.5.5.1]: https://tools.ietf.org/html/rfc4291#section-2.5.5.1\n+    /// [IETF RFC 4291 section 2.5.5.2]: https://tools.ietf.org/html/rfc4291#section-2.5.5.2\n     ///\n     /// # Examples\n     ///"}]}