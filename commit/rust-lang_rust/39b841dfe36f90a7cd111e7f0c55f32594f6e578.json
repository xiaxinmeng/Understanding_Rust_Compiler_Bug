{"sha": "39b841dfe36f90a7cd111e7f0c55f32594f6e578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Yjg0MWRmZTM2ZjkwYTdjZDExMWU3ZjBjNTVmMzI1OTRmNmU1Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-10T10:46:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-10T10:46:38Z"}, "message": "Auto merge of #79621 - usbalbin:constier_maybe_uninit, r=RalfJung\n\nConstier maybe uninit\n\nI was playing around trying to make `[T; N]::zip()` in #79451 be `const fn`. One of the things I bumped into was `MaybeUninit::assume_init`. Is there any reason for the intrinsic `assert_inhabited<T>()` and therefore `MaybeUninit::assume_init` not being `const`?\n\n---\n\nI have as best as I could tried to follow the instruction in [library/core/src/intrinsics.rs](https://github.com/rust-lang/rust/blob/master/library/core/src/intrinsics.rs#L11). I have no idea what I am doing but it seems to compile after some slight changes after the copy paste. Is this anywhere near how this should be done?\n\nAlso any ideas for name of the feature gate? I guess `const_maybe_assume_init` is quite misleading since I have added some more methods. Should I add test? If so what should be tested?", "tree": {"sha": "c9f02b5c949e4bf4e1a4aa7eab89ca3b130f13e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9f02b5c949e4bf4e1a4aa7eab89ca3b130f13e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b841dfe36f90a7cd111e7f0c55f32594f6e578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b841dfe36f90a7cd111e7f0c55f32594f6e578", "html_url": "https://github.com/rust-lang/rust/commit/39b841dfe36f90a7cd111e7f0c55f32594f6e578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b841dfe36f90a7cd111e7f0c55f32594f6e578/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e413d89aa706060ddc347e1e06d551ec86d3f471", "url": "https://api.github.com/repos/rust-lang/rust/commits/e413d89aa706060ddc347e1e06d551ec86d3f471", "html_url": "https://github.com/rust-lang/rust/commit/e413d89aa706060ddc347e1e06d551ec86d3f471"}, {"sha": "077527170bd112d97bdbb288ae8771930bcaa5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/077527170bd112d97bdbb288ae8771930bcaa5b7", "html_url": "https://github.com/rust-lang/rust/commit/077527170bd112d97bdbb288ae8771930bcaa5b7"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "0e610e3755222744912037e98e0fe7658b1d5002", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -20,6 +20,7 @@ pub enum ConstEvalErrKind {\n     ModifiedGlobal,\n     AssertFailure(AssertKind<ConstInt>),\n     Panic { msg: Symbol, line: u32, col: u32, file: Symbol },\n+    Abort(String),\n }\n \n // The errors become `MachineStop` with plain strings when being raised.\n@@ -46,6 +47,7 @@ impl fmt::Display for ConstEvalErrKind {\n             Panic { msg, line, col, file } => {\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col)\n             }\n+            Abort(ref msg) => write!(f, \"{}\", msg),\n         }\n     }\n }"}, {"sha": "740c965e591bf7a41ac6f3191d62b4d6c08baf44", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -384,6 +384,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         Err(ConstEvalErrKind::AssertFailure(err).into())\n     }\n \n+    fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>, msg: String) -> InterpResult<'tcx, !> {\n+        Err(ConstEvalErrKind::Abort(msg).into())\n+    }\n+\n     fn ptr_to_int(_mem: &Memory<'mir, 'tcx, Self>, _ptr: Pointer) -> InterpResult<'tcx, u64> {\n         Err(ConstEvalErrKind::NeedsRfc(\"pointer-to-integer cast\".to_string()).into())\n     }"}, {"sha": "2ffb7a05f25c01f3faa6d47751555e6b8c08f2f6", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -126,7 +126,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             None => match intrinsic_name {\n                 sym::transmute => throw_ub_format!(\"transmuting to uninhabited type\"),\n                 sym::unreachable => throw_ub!(Unreachable),\n-                sym::abort => M::abort(self)?,\n+                sym::abort => M::abort(self, \"the program aborted execution\".to_owned())?,\n                 // Unsupported diverging intrinsic.\n                 _ => return Ok(false),\n             },\n@@ -407,6 +407,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::transmute => {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n+            sym::assert_inhabited => {\n+                let ty = instance.substs.type_at(0);\n+                let layout = self.layout_of(ty)?;\n+\n+                if layout.abi.is_uninhabited() {\n+                    // The run-time intrinsic panics just to get a good backtrace; here we abort\n+                    // since there is no problem showing a backtrace even for aborts.\n+                    M::abort(self, format!(\"attempted to instantiate uninhabited type `{}`\", ty))?;\n+                }\n+            }\n             sym::simd_insert => {\n                 let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n                 let elem = args[2];"}, {"sha": "74625569432c3b59a64f5a16fb98d5d81a2ea35b", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -176,7 +176,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ) -> InterpResult<'tcx>;\n \n     /// Called to evaluate `Abort` MIR terminator.\n-    fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n+    fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>, _msg: String) -> InterpResult<'tcx, !> {\n         throw_unsup_format!(\"aborting execution is not supported\")\n     }\n "}, {"sha": "a2931325a28636cdc7287d2b0a07c641945f4d24", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -110,7 +110,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Abort => {\n-                M::abort(self)?;\n+                M::abort(self, \"the program aborted execution\".to_owned())?;\n             }\n \n             // When we encounter Resume, we've finished unwinding"}, {"sha": "52921822693854f19ea8434be128d0cbb9ac165b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -815,6 +815,7 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit"}, {"sha": "5b19bf6b80f388d5b04c475f9dd9a6c46d2760fd", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -70,6 +70,7 @@\n #![feature(cfg_target_has_atomic)]\n #![cfg_attr(not(bootstrap), feature(const_heap))]\n #![feature(const_alloc_layout)]\n+#![feature(const_assert_type)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]\n #![feature(const_checked_int_methods)]\n@@ -93,6 +94,7 @@\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_raw_ptr_comparison)]\n+#![feature(const_raw_ptr_deref)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]\n@@ -101,6 +103,8 @@\n #![feature(const_type_name)]\n #![feature(const_likely)]\n #![feature(const_unreachable_unchecked)]\n+#![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_maybe_uninit_as_ptr)]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "8800d7714cf47afa50a3161ea95368c41fb88c9d", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -314,8 +314,9 @@ impl<T> MaybeUninit<T> {\n     /// let data = read(&mut buf);\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n     #[inline(always)]\n-    pub fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n+    pub const fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         // SAFETY: An uninitialized `[MaybeUninit<_>; LEN]` is valid.\n         unsafe { MaybeUninit::<[MaybeUninit<T>; LEN]>::uninit().assume_init() }\n     }\n@@ -372,8 +373,9 @@ impl<T> MaybeUninit<T> {\n     /// skip running the destructor. For your convenience, this also returns a mutable\n     /// reference to the (now safely initialized) contents of `self`.\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n-    pub fn write(&mut self, val: T) -> &mut T {\n+    pub const fn write(&mut self, val: T) -> &mut T {\n         *self = MaybeUninit::new(val);\n         // SAFETY: We just initialized this value.\n         unsafe { self.assume_init_mut() }\n@@ -503,9 +505,10 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n-    pub unsafe fn assume_init(self) -> T {\n+    pub const unsafe fn assume_init(self) -> T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n         unsafe {\n@@ -666,13 +669,14 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn assume_init_ref(&self) -> &T {\n+    pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n         unsafe {\n             intrinsics::assert_inhabited::<T>();\n-            &*self.value\n+            &*self.as_ptr()\n         }\n     }\n \n@@ -788,13 +792,14 @@ impl<T> MaybeUninit<T> {\n     // to uninitialized data (e.g., in `libcore/fmt/float.rs`).  We should make\n     // a final decision about the rules before stabilization.\n     #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn assume_init_mut(&mut self) -> &mut T {\n+    pub const unsafe fn assume_init_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // This also means that `self` must be a `value` variant.\n         unsafe {\n             intrinsics::assert_inhabited::<T>();\n-            &mut *self.value\n+            &mut *self.as_mut_ptr()\n         }\n     }\n \n@@ -810,8 +815,9 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_ref`]: MaybeUninit::assume_init_ref\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n+    pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n         // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that\n         // `slice` is initialized, and`MaybeUninit` is guaranteed to have the same layout as `T`.\n         // The pointer obtained is valid since it refers to memory owned by `slice` which is a\n@@ -831,24 +837,27 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_mut`]: MaybeUninit::assume_init_mut\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n     #[inline(always)]\n-    pub unsafe fn slice_assume_init_mut(slice: &mut [Self]) -> &mut [T] {\n+    pub const unsafe fn slice_assume_init_mut(slice: &mut [Self]) -> &mut [T] {\n         // SAFETY: similar to safety notes for `slice_get_ref`, but we have a\n         // mutable reference which is also guaranteed to be valid for writes.\n         unsafe { &mut *(slice as *mut [Self] as *mut [T]) }\n     }\n \n     /// Gets a pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n-    pub fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n+    pub const fn slice_as_ptr(this: &[MaybeUninit<T>]) -> *const T {\n         this.as_ptr() as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n-    pub fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n+    pub const fn slice_as_mut_ptr(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this.as_mut_ptr() as *mut T\n     }\n }"}, {"sha": "2aa3598a0d94faa15bd77b937b320160a8e12a54", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -11,6 +11,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_maybe_uninit_assume_init)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}, {"sha": "268c2ed283f64edb94c316e48246368b8b286b41", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -129,3 +129,11 @@ fn test_discriminant_send_sync() {\n     is_send_sync::<Discriminant<Regular>>();\n     is_send_sync::<Discriminant<NotSendSync>>();\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn assume_init_good() {\n+    const TRUE: bool = unsafe { MaybeUninit::<bool>::new(true).assume_init() };\n+\n+    assert!(TRUE);\n+}"}, {"sha": "77370e1ccc59e2e74d8d27ed7b6a59765264b4d1", "filename": "src/test/ui/assume-type-intrinsics.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/src%2Ftest%2Fui%2Fassume-type-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/src%2Ftest%2Fui%2Fassume-type-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassume-type-intrinsics.rs?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -0,0 +1,13 @@\n+// error-pattern: any use of this value will cause an error\n+\n+#![feature(never_type)]\n+#![feature(const_maybe_uninit_assume_init)]\n+\n+#[allow(invalid_value)]\n+fn main() {\n+    use std::mem::MaybeUninit;\n+\n+    const _BAD: () = unsafe {\n+        MaybeUninit::<!>::uninit().assume_init();\n+    };\n+}"}, {"sha": "6f400086a548c0edf8d7978f7f122ee930fcb40c", "filename": "src/test/ui/assume-type-intrinsics.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39b841dfe36f90a7cd111e7f0c55f32594f6e578/src%2Ftest%2Fui%2Fassume-type-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39b841dfe36f90a7cd111e7f0c55f32594f6e578/src%2Ftest%2Fui%2Fassume-type-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassume-type-intrinsics.stderr?ref=39b841dfe36f90a7cd111e7f0c55f32594f6e578", "patch": "@@ -0,0 +1,21 @@\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/mem/maybe_uninit.rs:LL:COL\n+   |\n+LL |               intrinsics::assert_inhabited::<T>();\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               attempted to instantiate uninhabited type `!`\n+   |               inside `MaybeUninit::<!>::assume_init` at $SRC_DIR/core/src/mem/maybe_uninit.rs:LL:COL\n+   |               inside `_BAD` at $DIR/assume-type-intrinsics.rs:11:9\n+   | \n+  ::: $DIR/assume-type-intrinsics.rs:10:5\n+   |\n+LL | /     const _BAD: () = unsafe {\n+LL | |         MaybeUninit::<!>::uninit().assume_init();\n+LL | |     };\n+   | |______-\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: aborting due to previous error\n+"}]}