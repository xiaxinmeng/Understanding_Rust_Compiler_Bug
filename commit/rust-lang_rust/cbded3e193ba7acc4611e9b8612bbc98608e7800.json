{"sha": "cbded3e193ba7acc4611e9b8612bbc98608e7800", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZGVkM2UxOTNiYTdhY2M0NjExZTliODYxMmJiYzk4NjA4ZTc4MDA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-12T17:34:01Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-12T17:53:29Z"}, "message": "build-manifest: use var_os instead of var to check if vars exist\n\nThis will prevent the tool mistakenly ignoring the variables if they\nhappen to contain non-utf8 data.", "tree": {"sha": "56ef1015d5ff96fd88c19b77d87e733d77c6543c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56ef1015d5ff96fd88c19b77d87e733d77c6543c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbded3e193ba7acc4611e9b8612bbc98608e7800", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+EmBkACgkQPgar6Auq\n8Zz/AhAAkveFMWXyA/xf0eUGLf8qltFRBj0AMuk6lRoS2N/kp+ooU98hUZa95SsJ\nQ8BdFk2gx4Z3aNUbnVa3D0BFw+kMGlOA+Au8NH2mOsxSdX3htYEQtBln4JNiMRfu\nkwte1rqqFlm4RP/m/UzqTWYt6dJ8655LD26Jdf2ucT92jAonITd6SCmivtkJ3o8K\nN0plCvgRHg512zkIoUs9sLBjKTE8aPc0bICduIhxQVcRA7wAsRt2BeEqUnnLmbQE\nYFmzfzrCeRwdq1/sqfxV3dD02jcXovf6VtumpL9KDqngLXkahQsIHYKnr4x9jCsg\nqmvHP2CW8862peO/5dQlnuwlHsvlvJCxj2hFnxGRJHmtfcwjcEBfiWc4WBzongdJ\no4DNAI5ikE+grASWC71hnlijSST3NPAbadiBtypPD+BBFOePHWnzvw9rvdPoVW6E\nYJ+e6VDKFjwNOppNju12L2nc1O8eo0hk26TkY7m2S1fbVbX/uzfTLvTovN8G1J3r\nqQVV4HG8XTHdIbocpZRTV+L+UhHLcZ7kAAyfOZWEkq2CNim4AivDJeZ/yxwsSiKh\nX5PtYL7K6cjL3VbeCwjWbcG2cNy2fPIvcm/WhtJsLE2CtktQgMDPodnZ87mDcdXK\nSrlGMfoQNUg0C1HQf0d1UYk0VCMCGZJMMh8JkFezobMeQENl8ns=\n=5ddq\n-----END PGP SIGNATURE-----", "payload": "tree 56ef1015d5ff96fd88c19b77d87e733d77c6543c\nparent f3d07b36ed7609a7826200479d8d472d36f0a995\nauthor Pietro Albini <pietro@pietroalbini.org> 1602524041 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1602525209 +0200\n\nbuild-manifest: use var_os instead of var to check if vars exist\n\nThis will prevent the tool mistakenly ignoring the variables if they\nhappen to contain non-utf8 data.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbded3e193ba7acc4611e9b8612bbc98608e7800", "html_url": "https://github.com/rust-lang/rust/commit/cbded3e193ba7acc4611e9b8612bbc98608e7800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbded3e193ba7acc4611e9b8612bbc98608e7800/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3d07b36ed7609a7826200479d8d472d36f0a995", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d07b36ed7609a7826200479d8d472d36f0a995", "html_url": "https://github.com/rust-lang/rust/commit/f3d07b36ed7609a7826200479d8d472d36f0a995"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "1515f46e03ac266cb363dced5baa8c8336d04452", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbded3e193ba7acc4611e9b8612bbc98608e7800/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbded3e193ba7acc4611e9b8612bbc98608e7800/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=cbded3e193ba7acc4611e9b8612bbc98608e7800", "patch": "@@ -205,13 +205,13 @@ fn main() {\n     //\n     // Once the old release process is fully decommissioned, the environment variable, all the\n     // related code in this tool and ./x.py dist hash-and-sign can be removed.\n-    let legacy = env::var(\"BUILD_MANIFEST_LEGACY\").is_ok();\n+    let legacy = env::var_os(\"BUILD_MANIFEST_LEGACY\").is_some();\n \n     let num_threads = if legacy {\n         // Avoid overloading the old server in legacy mode.\n         1\n-    } else if let Ok(num) = env::var(\"BUILD_MANIFEST_NUM_THREADS\") {\n-        num.parse().expect(\"invalid number for BUILD_MANIFEST_NUM_THREADS\")\n+    } else if let Some(num) = env::var_os(\"BUILD_MANIFEST_NUM_THREADS\") {\n+        num.to_str().unwrap().parse().expect(\"invalid number for BUILD_MANIFEST_NUM_THREADS\")\n     } else {\n         num_cpus::get()\n     };"}]}