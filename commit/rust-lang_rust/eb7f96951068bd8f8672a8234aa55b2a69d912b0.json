{"sha": "eb7f96951068bd8f8672a8234aa55b2a69d912b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViN2Y5Njk1MTA2OGJkOGY4NjcyYTgyMzRhYTU1YjJhNjlkOTEyYjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-01T12:27:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-01T12:27:52Z"}, "message": "Merge #6683\n\n6683: Emit macro diagnostics when lowering bodies r=matklad a=jonas-schievink\n\nChanges `Expander::enter_expand` to return an `ExpandResult`, and adds any contained errors to the body diagnostic list.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "30e949b7972420131a4367369c38b3bf2c5f66fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e949b7972420131a4367369c38b3bf2c5f66fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7f96951068bd8f8672a8234aa55b2a69d912b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfxjbICRBK7hj4Ov3rIwAAdHIIAFwDRJbsvCiaTvXYv5oom9OT\n/2vLttkwIS/20aOPiNUGVwIMQT8Ye4Q6RvuoH299zyc262YZuZica8tSver5KwYc\nVHNMASgwwRk2nprHopXc/OGPO9Ql6ldtqbcnq4nNLMCOfKE21fgy+zdejDdAVGjW\nxyLgM62a2XaDpU+iB4s268rnr9dKHQET1SfgRvmQjfsB/i8wDD4RKZ/Dj79wXNgl\nkCPmzDlFi1Dt5mLAaqRR5fZSlUcPaU9sBVtb5rid9UzutFTJQm7/ryw9xpt9Wb2I\n3oiN1cyEsujNNemEc598dVDfy5ZG3ngzVYAIvEJdsLAipUDc0JKKpHEQ+JlS2b4=\n=7U34\n-----END PGP SIGNATURE-----\n", "payload": "tree 30e949b7972420131a4367369c38b3bf2c5f66fa\nparent 75e037fcf75691a3a87d0cb37ea660dd7105ffba\nparent ea7b81fef990e281b4b958cff7357544076d4b15\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606825672 +0000\ncommitter GitHub <noreply@github.com> 1606825672 +0000\n\nMerge #6683\n\n6683: Emit macro diagnostics when lowering bodies r=matklad a=jonas-schievink\n\nChanges `Expander::enter_expand` to return an `ExpandResult`, and adds any contained errors to the body diagnostic list.\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f96951068bd8f8672a8234aa55b2a69d912b0", "html_url": "https://github.com/rust-lang/rust/commit/eb7f96951068bd8f8672a8234aa55b2a69d912b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f96951068bd8f8672a8234aa55b2a69d912b0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e037fcf75691a3a87d0cb37ea660dd7105ffba", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e037fcf75691a3a87d0cb37ea660dd7105ffba", "html_url": "https://github.com/rust-lang/rust/commit/75e037fcf75691a3a87d0cb37ea660dd7105ffba"}, {"sha": "ea7b81fef990e281b4b958cff7357544076d4b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7b81fef990e281b4b958cff7357544076d4b15", "html_url": "https://github.com/rust-lang/rust/commit/ea7b81fef990e281b4b958cff7357544076d4b15"}], "stats": {"total": 116, "additions": 88, "deletions": 28}, "files": [{"sha": "33eb5e78c449f24516b08f45675f3871df16a0ad", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=eb7f96951068bd8f8672a8234aa55b2a69d912b0", "patch": "@@ -14,8 +14,8 @@ use cfg::CfgOptions;\n use drop_bomb::DropBomb;\n use either::Either;\n use hir_expand::{\n-    ast_id_map::AstIdMap, diagnostics::DiagnosticSink, hygiene::Hygiene, AstId, HirFileId, InFile,\n-    MacroDefId,\n+    ast_id_map::AstIdMap, diagnostics::DiagnosticSink, hygiene::Hygiene, AstId, ExpandResult,\n+    HirFileId, InFile, MacroDefId,\n };\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, AstPtr};\n@@ -102,11 +102,11 @@ impl Expander {\n         db: &dyn DefDatabase,\n         local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n-    ) -> Option<(Mark, T)> {\n+    ) -> ExpandResult<Option<(Mark, T)>> {\n         self.recursion_limit += 1;\n         if self.recursion_limit > EXPANSION_RECURSION_LIMIT {\n             mark::hit!(your_stack_belongs_to_me);\n-            return None;\n+            return ExpandResult::str_err(\"reached recursion limit during macro expansion\".into());\n         }\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n@@ -120,28 +120,55 @@ impl Expander {\n             self.resolve_path_as_macro(db, &path)\n         };\n \n-        if let Some(call_id) = macro_call.as_call_id(db, self.crate_def_map.krate, resolver) {\n-            let file_id = call_id.as_file();\n-            if let Some(node) = db.parse_or_expand(file_id) {\n-                if let Some(expr) = T::cast(node) {\n-                    log::debug!(\"macro expansion {:#?}\", expr.syntax());\n-\n-                    let mark = Mark {\n-                        file_id: self.current_file_id,\n-                        ast_id_map: mem::take(&mut self.ast_id_map),\n-                        bomb: DropBomb::new(\"expansion mark dropped\"),\n-                    };\n-                    self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n-                    self.current_file_id = file_id;\n-                    self.ast_id_map = db.ast_id_map(file_id);\n-                    return Some((mark, expr));\n+        let call_id = match macro_call.as_call_id(db, self.crate_def_map.krate, resolver) {\n+            Some(it) => it,\n+            None => {\n+                // FIXME: this can mean other things too, but `as_call_id` doesn't provide enough\n+                // info.\n+                return ExpandResult::only_err(mbe::ExpandError::Other(\n+                    \"failed to parse or resolve macro invocation\".into(),\n+                ));\n+            }\n+        };\n+\n+        let err = db.macro_expand_error(call_id);\n+\n+        let file_id = call_id.as_file();\n+\n+        let raw_node = match db.parse_or_expand(file_id) {\n+            Some(it) => it,\n+            None => {\n+                // Only `None` if the macro expansion produced no usable AST.\n+                if err.is_none() {\n+                    log::warn!(\"no error despite `parse_or_expand` failing\");\n                 }\n+\n+                return ExpandResult::only_err(err.unwrap_or_else(|| {\n+                    mbe::ExpandError::Other(\"failed to parse macro invocation\".into())\n+                }));\n             }\n-        }\n+        };\n+\n+        let node = match T::cast(raw_node) {\n+            Some(it) => it,\n+            None => {\n+                // This can happen without being an error, so only forward previous errors.\n+                return ExpandResult { value: None, err };\n+            }\n+        };\n+\n+        log::debug!(\"macro expansion {:#?}\", node.syntax());\n+\n+        let mark = Mark {\n+            file_id: self.current_file_id,\n+            ast_id_map: mem::take(&mut self.ast_id_map),\n+            bomb: DropBomb::new(\"expansion mark dropped\"),\n+        };\n+        self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n+        self.current_file_id = file_id;\n+        self.ast_id_map = db.ast_id_map(file_id);\n \n-        // FIXME: Instead of just dropping the error from expansion\n-        // report it\n-        None\n+        ExpandResult { value: Some((mark, node)), err }\n     }\n \n     pub(crate) fn exit(&mut self, db: &dyn DefDatabase, mut mark: Mark) {"}, {"sha": "1de7d30e200e87c12edf2046ed2e7ccdaef25023", "filename": "crates/hir_def/src/body/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fdiagnostics.rs?ref=eb7f96951068bd8f8672a8234aa55b2a69d912b0", "patch": "@@ -2,11 +2,13 @@\n \n use hir_expand::diagnostics::DiagnosticSink;\n \n-use crate::diagnostics::InactiveCode;\n+use crate::diagnostics::{InactiveCode, MacroError, UnresolvedProcMacro};\n \n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum BodyDiagnostic {\n     InactiveCode(InactiveCode),\n+    MacroError(MacroError),\n+    UnresolvedProcMacro(UnresolvedProcMacro),\n }\n \n impl BodyDiagnostic {\n@@ -15,6 +17,12 @@ impl BodyDiagnostic {\n             BodyDiagnostic::InactiveCode(diag) => {\n                 sink.push(diag.clone());\n             }\n+            BodyDiagnostic::MacroError(diag) => {\n+                sink.push(diag.clone());\n+            }\n+            BodyDiagnostic::UnresolvedProcMacro(diag) => {\n+                sink.push(diag.clone());\n+            }\n         }\n     }\n }"}, {"sha": "2c41c000599e21e04c85708cdd5fb4974a1c497b", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=eb7f96951068bd8f8672a8234aa55b2a69d912b0", "patch": "@@ -8,7 +8,7 @@ use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    HirFileId, MacroDefId, MacroDefKind,\n+    ExpandError, HirFileId, MacroDefId, MacroDefKind,\n };\n use rustc_hash::FxHashMap;\n use syntax::{\n@@ -25,7 +25,7 @@ use crate::{\n     body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n-    diagnostics::InactiveCode,\n+    diagnostics::{InactiveCode, MacroError, UnresolvedProcMacro},\n     expr::{\n         dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal,\n         LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n@@ -561,7 +561,32 @@ impl ExprCollector<'_> {\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n                 } else {\n                     let macro_call = self.expander.to_source(AstPtr::new(&e));\n-                    match self.expander.enter_expand(self.db, Some(&self.body.item_scope), e) {\n+                    let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n+\n+                    match res.err {\n+                        Some(ExpandError::UnresolvedProcMacro) => {\n+                            self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedProcMacro(\n+                                UnresolvedProcMacro {\n+                                    file: self.expander.current_file_id,\n+                                    node: syntax_ptr.clone().into(),\n+                                    precise_location: None,\n+                                    macro_name: None,\n+                                },\n+                            ));\n+                        }\n+                        Some(err) => {\n+                            self.source_map.diagnostics.push(BodyDiagnostic::MacroError(\n+                                MacroError {\n+                                    file: self.expander.current_file_id,\n+                                    node: syntax_ptr.clone().into(),\n+                                    message: err.to_string(),\n+                                },\n+                            ));\n+                        }\n+                        None => {}\n+                    }\n+\n+                    match res.value {\n                         Some((mark, expansion)) => {\n                             self.source_map\n                                 .expansions"}, {"sha": "146045938323f52c6f89a04bc262e4358e896550", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f96951068bd8f8672a8234aa55b2a69d912b0/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=eb7f96951068bd8f8672a8234aa55b2a69d912b0", "patch": "@@ -257,7 +257,7 @@ fn collect_items(\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let call = ast_id_map.get(call.ast_id).to_node(&root);\n \n-                if let Some((mark, mac)) = expander.enter_expand(db, None, call) {\n+                if let Some((mark, mac)) = expander.enter_expand(db, None, call).value {\n                     let src: InFile<ast::MacroItems> = expander.to_source(mac);\n                     let item_tree = db.item_tree(src.file_id);\n                     let iter ="}]}