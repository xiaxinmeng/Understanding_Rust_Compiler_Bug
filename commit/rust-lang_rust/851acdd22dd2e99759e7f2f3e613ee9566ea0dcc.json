{"sha": "851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MWFjZGQyMmRkMmU5OTc1OWU3ZjJmM2U2MTNlZTk1NjZlYTBkY2M=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-08-19T15:45:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-09-22T19:01:21Z"}, "message": "core: fix deprecated warnings", "tree": {"sha": "96508bcb735cdff5176cbd8c046670b9a42552e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96508bcb735cdff5176cbd8c046670b9a42552e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "html_url": "https://github.com/rust-lang/rust/commit/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb5b3eb3228df648a08b02c85eddcd9b9cc85bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb5b3eb3228df648a08b02c85eddcd9b9cc85bd", "html_url": "https://github.com/rust-lang/rust/commit/7bb5b3eb3228df648a08b02c85eddcd9b9cc85bd"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "d01cd012031db45cbb99f4d51c008d8eba174fc1", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n-use mem;\n+use mem::MaybeUninit;\n use num::flt2dec;\n \n // Don't inline this so callers don't use the stack space this function\n@@ -20,11 +20,11 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n-                                                    false, &mut buf, &mut parts);\n+                                                    false, buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -38,10 +38,11 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 4]>::uninitialized();\n         let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n-                                                 sign, precision, false, &mut buf, &mut parts);\n+                                                 sign, precision, false, buf.get_mut(),\n+                                                 parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -75,11 +76,11 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n-        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n-        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; 1024]>::uninitialized(); // enough for f32 and f64\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n         let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n                                                   *num, sign, precision,\n-                                                  upper, &mut buf, &mut parts);\n+                                                  upper, buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n@@ -94,11 +95,11 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n {\n     unsafe {\n         // enough for f32 and f64\n-        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n-        let mut parts: [flt2dec::Part; 6] = mem::uninitialized();\n+        let mut buf = MaybeUninit::<[u8; flt2dec::MAX_SIG_DIGITS]>::uninitialized();\n+        let mut parts = MaybeUninit::<[flt2dec::Part; 6]>::uninitialized();\n         let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n                                                      *num, sign, (0, 0), upper,\n-                                                     &mut buf, &mut parts);\n+                                                     buf.get_mut(), parts.get_mut());\n         fmt.pad_formatted_parts(&formatted)\n     }\n }"}, {"sha": "3b7646fa2686f600ee759b3b2798a964f8cf3932", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "patch": "@@ -246,6 +246,8 @@ macro_rules! test_v512 { ($item:item) => {}; }\n #[allow(unused_macros)]\n macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n #[path = \"../stdsimd/coresimd/mod.rs\"]\n+// replacing uses of mem::{uninitialized,zeroed} with MaybeUninit needs to be in the stdsimd repo\n+#[allow(deprecated)]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n #[cfg(not(stage0))] // allow changes to how stdsimd works in stage0"}, {"sha": "caea88815145cf6cf614c9122107be0b10bd4f18", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "patch": "@@ -22,7 +22,7 @@ use ops::CoerceUnsized;\n use fmt;\n use hash;\n use marker::{PhantomData, Unsize};\n-use mem;\n+use mem::{self, MaybeUninit};\n use nonzero::NonZero;\n \n use cmp::Ordering::{self, Less, Equal, Greater};\n@@ -142,16 +142,12 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with\n-    let mut tmp: T = mem::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n \n     // Perform the swap\n-    copy_nonoverlapping(x, &mut tmp, 1);\n+    copy_nonoverlapping(x, tmp.get_mut(), 1);\n     copy(y, x, 1); // `x` and `y` may overlap\n-    copy_nonoverlapping(&tmp, y, 1);\n-\n-    // y and t now point to the same thing, but we need to completely forget `tmp`\n-    // because it's no longer relevant.\n-    mem::forget(tmp);\n+    copy_nonoverlapping(tmp.get_ref(), y, 1);\n }\n \n /// Swaps a sequence of values at two mutable locations of the same type.\n@@ -224,8 +220,8 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     while i + block_size <= len {\n         // Create some uninitialized memory as scratch space\n         // Declaring `t` here avoids aligning the stack when this loop is unused\n-        let mut t: Block = mem::uninitialized();\n-        let t = &mut t as *mut _ as *mut u8;\n+        let mut t = mem::MaybeUninit::<Block>::uninitialized();\n+        let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n \n@@ -239,10 +235,10 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n \n     if i < len {\n         // Swap any remaining bytes\n-        let mut t: UnalignedBlock = mem::uninitialized();\n+        let mut t = mem::MaybeUninit::<UnalignedBlock>::uninitialized();\n         let rem = len - i;\n \n-        let t = &mut t as *mut _ as *mut u8;\n+        let t = t.as_mut_ptr() as *mut u8;\n         let x = x.add(i);\n         let y = y.add(i);\n \n@@ -296,9 +292,9 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n-    let mut tmp: T = mem::uninitialized();\n-    copy_nonoverlapping(src, &mut tmp, 1);\n-    tmp\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n+    copy_nonoverlapping(src, tmp.get_mut(), 1);\n+    tmp.into_inner()\n }\n \n /// Reads the value from `src` without moving it. This leaves the\n@@ -330,11 +326,11 @@ pub unsafe fn read<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n-    let mut tmp: T = mem::uninitialized();\n+    let mut tmp = MaybeUninit::<T>::uninitialized();\n     copy_nonoverlapping(src as *const u8,\n-                        &mut tmp as *mut T as *mut u8,\n+                        tmp.as_mut_ptr() as *mut u8,\n                         mem::size_of::<T>());\n-    tmp\n+    tmp.into_inner()\n }\n \n /// Overwrites a memory location with the given value without reading or"}, {"sha": "affe525ae46e97969bfeaf7f62109997bdbaf140", "filename": "src/libcore/slice/rotate.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Frotate.rs?ref=851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp;\n-use mem;\n+use mem::{self, MaybeUninit};\n use ptr;\n \n /// Rotation is much faster if it has access to a little bit of memory. This\n@@ -26,9 +26,6 @@ union RawArray<T> {\n }\n \n impl<T> RawArray<T> {\n-    fn new() -> Self {\n-        unsafe { mem::uninitialized() }\n-    }\n     fn ptr(&self) -> *mut T {\n         unsafe { &self.typed as *const T as *mut T }\n     }\n@@ -88,8 +85,8 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mid: *mut T, mut right: usize) {\n         }\n     }\n \n-    let rawarray = RawArray::new();\n-    let buf = rawarray.ptr();\n+    let rawarray = MaybeUninit::<RawArray<T>>::uninitialized();\n+    let buf = rawarray.get_ref().ptr();\n \n     let dim = mid.sub(left).add(right);\n     if left <= right {"}, {"sha": "cf0c5d876abda042fa53d046057c20c05128f0c6", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/851acdd22dd2e99759e7f2f3e613ee9566ea0dcc/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=851acdd22dd2e99759e7f2f3e613ee9566ea0dcc", "patch": "@@ -17,7 +17,7 @@\n //! stable sorting implementation.\n \n use cmp;\n-use mem;\n+use mem::{self, MaybeUninit};\n use ptr;\n \n /// When dropped, copies from `src` into `dest`.\n@@ -226,14 +226,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l: [u8; BLOCK] = unsafe { mem::uninitialized() };\n+    let mut offsets_l = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r: [u8; BLOCK] = unsafe { mem::uninitialized() };\n+    let mut offsets_r = MaybeUninit::<[u8; BLOCK]>::uninitialized();\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.\n@@ -272,8 +272,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_l == end_l {\n             // Trace `block_l` elements from the left side.\n-            start_l = offsets_l.as_mut_ptr();\n-            end_l = offsets_l.as_mut_ptr();\n+            start_l = unsafe { offsets_l.get_mut().as_mut_ptr() };\n+            end_l = unsafe { offsets_l.get_mut().as_mut_ptr() };\n             let mut elem = l;\n \n             for i in 0..block_l {\n@@ -288,8 +288,8 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n \n         if start_r == end_r {\n             // Trace `block_r` elements from the right side.\n-            start_r = offsets_r.as_mut_ptr();\n-            end_r = offsets_r.as_mut_ptr();\n+            start_r = unsafe { offsets_r.get_mut().as_mut_ptr() };\n+            end_r = unsafe {  offsets_r.get_mut().as_mut_ptr() };\n             let mut elem = r;\n \n             for i in 0..block_r {"}]}