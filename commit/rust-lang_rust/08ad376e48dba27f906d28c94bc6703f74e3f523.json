{"sha": "08ad376e48dba27f906d28c94bc6703f74e3f523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YWQzNzZlNDhkYmEyN2Y5MDZkMjhjOTRiYzY3MDNmNzRlM2Y1MjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-08T00:28:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-08T00:28:24Z"}, "message": "Auto merge of #49704 - leodasvacas:fix-#49344, r=nikomatsakis\n\nFix regression in defaults #49344\n\nFixes #49344 by not checking the well-formedness wrt defaults of predicates that contain lifetimes, which is consistent with not checking generic predicates.\n\nr? @nikomatsakis", "tree": {"sha": "6f6cd4e1d037ef91b35f27e1af6001063be51ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f6cd4e1d037ef91b35f27e1af6001063be51ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08ad376e48dba27f906d28c94bc6703f74e3f523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08ad376e48dba27f906d28c94bc6703f74e3f523", "html_url": "https://github.com/rust-lang/rust/commit/08ad376e48dba27f906d28c94bc6703f74e3f523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08ad376e48dba27f906d28c94bc6703f74e3f523/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056f589fb8bcd70e7caa2bc7b3ede45624bb8e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/056f589fb8bcd70e7caa2bc7b3ede45624bb8e6d", "html_url": "https://github.com/rust-lang/rust/commit/056f589fb8bcd70e7caa2bc7b3ede45624bb8e6d"}, {"sha": "933f9ebaae36c15ac917142033ec5f80e066d119", "url": "https://api.github.com/repos/rust-lang/rust/commits/933f9ebaae36c15ac917142033ec5f80e066d119", "html_url": "https://github.com/rust-lang/rust/commit/933f9ebaae36c15ac917142033ec5f80e066d119"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "7dc73a1d5f01977a45aa07581030c55753b5414c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08ad376e48dba27f906d28c94bc6703f74e3f523/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ad376e48dba27f906d28c94bc6703f74e3f523/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=08ad376e48dba27f906d28c94bc6703f74e3f523", "patch": "@@ -423,12 +423,18 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                     _ => t.super_visit_with(self)\n                 }\n             }\n+\n+            fn visit_region(&mut self, _: ty::Region<'tcx>) -> bool {\n+                true\n+            }\n         }\n         let mut param_count = CountParams { params: FxHashSet() };\n-        pred.visit_with(&mut param_count);\n+        let has_region = pred.visit_with(&mut param_count);\n         let substituted_pred = pred.subst(fcx.tcx, substs);\n-        // Don't check non-defaulted params, dependent defaults or preds with multiple params.\n-        if substituted_pred.references_error() || param_count.params.len() > 1 {\n+        // Don't check non-defaulted params, dependent defaults (including lifetimes)\n+        // or preds with multiple params.\n+        if substituted_pred.references_error() || param_count.params.len() > 1\n+            || has_region {\n             continue;\n         }\n         // Avoid duplication of predicates that contain no parameters, for example."}, {"sha": "9b06bf837ae0ccf266e24f63ce341dfb7cf1afc1", "filename": "src/test/run-pass/defaults-well-formedness.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08ad376e48dba27f906d28c94bc6703f74e3f523/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08ad376e48dba27f906d28c94bc6703f74e3f523/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs?ref=08ad376e48dba27f906d28c94bc6703f74e3f523", "patch": "@@ -27,4 +27,8 @@ trait SelfBound<T: Copy=Self> {}\n // Not even for well-formedness.\n struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n \n+// Issue #49344, predicates with lifetimes should not be checked.\n+trait Scope<'a> {}\n+struct Request<'a, S: Scope<'a> = i32>(S, &'a ());\n+\n fn main() {}"}]}