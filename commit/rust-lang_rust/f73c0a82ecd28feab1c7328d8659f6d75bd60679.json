{"sha": "f73c0a82ecd28feab1c7328d8659f6d75bd60679", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3M2MwYTgyZWNkMjhmZWFiMWM3MzI4ZDg2NTlmNmQ3NWJkNjA2Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-31T06:16:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-31T06:16:12Z"}, "message": "Auto merge of #30598 - est31:macro_export_help_note, r=Manishearth\n\nThe current help message is too much about \"normal\" macros to be used\nas general message. Keep it for normal macros, and add custom help and\nerror messages for macro definitions.", "tree": {"sha": "ec20fc47818a0de1bb5ad72683b2d2a4ff976dc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec20fc47818a0de1bb5ad72683b2d2a4ff976dc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73c0a82ecd28feab1c7328d8659f6d75bd60679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73c0a82ecd28feab1c7328d8659f6d75bd60679", "html_url": "https://github.com/rust-lang/rust/commit/f73c0a82ecd28feab1c7328d8659f6d75bd60679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73c0a82ecd28feab1c7328d8659f6d75bd60679/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a351c776500dc7ed59e343c47e125f96a7d1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a351c776500dc7ed59e343c47e125f96a7d1f4", "html_url": "https://github.com/rust-lang/rust/commit/19a351c776500dc7ed59e343c47e125f96a7d1f4"}, {"sha": "40a9481f8776446bf4bce3f89d81330791b179cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a9481f8776446bf4bce3f89d81330791b179cf", "html_url": "https://github.com/rust-lang/rust/commit/40a9481f8776446bf4bce3f89d81330791b179cf"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "db746af998d9f91f8799b564c7115a6acca61753", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f73c0a82ecd28feab1c7328d8659f6d75bd60679", "patch": "@@ -67,7 +67,7 @@ use parse::classify;\n use parse::common::{SeqSep, seq_sep_none, seq_sep_trailing_allowed};\n use parse::lexer::{Reader, TokenAndSpan};\n use parse::obsolete::{ParserObsoleteMethods, ObsoleteSyntax};\n-use parse::token::{self, MatchNt, SubstNt, SpecialVarNt, InternedString};\n+use parse::token::{self, intern, MatchNt, SubstNt, SpecialVarNt, InternedString};\n use parse::token::{keywords, special_idents, SpecialMacroVar};\n use parse::{new_sub_parser_from_file, ParseSess};\n use util::parser::{AssocOp, Fixity};\n@@ -4622,10 +4622,22 @@ impl<'a> Parser<'a> {\n     fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) {\n         match visa {\n             Public => {\n-                self.diagnostic().struct_span_err(span, \"can't qualify macro invocation with `pub`\")\n-                                 .fileline_help(span, \"try adjusting the macro to put `pub` inside \\\n-                                                       the invocation\")\n-                                 .emit();\n+                let is_macro_rules: bool = match self.token {\n+                    token::Ident(sid, _) => sid.name == intern(\"macro_rules\"),\n+                    _ => false,\n+                };\n+                if is_macro_rules {\n+                    self.diagnostic().struct_span_err(span, \"can't qualify macro_rules \\\n+                                                             invocation with `pub`\")\n+                                     .fileline_help(span, \"did you mean #[macro_export]?\")\n+                                     .emit();\n+                } else {\n+                    self.diagnostic().struct_span_err(span, \"can't qualify macro \\\n+                                                             invocation with `pub`\")\n+                                     .fileline_help(span, \"try adjusting the macro to put `pub` \\\n+                                                           inside the invocation\")\n+                                     .emit();\n+                }\n             }\n             Inherited => (),\n         }"}, {"sha": "8809e9a257ddb0bd46cdb9abb22249102c508c8f", "filename": "src/test/parse-fail/pub-item-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Ftest%2Fparse-fail%2Fpub-item-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Ftest%2Fparse-fail%2Fpub-item-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpub-item-macro.rs?ref=f73c0a82ecd28feab1c7328d8659f6d75bd60679", "previous_filename": "src/test/compile-fail/pub-item-macro.rs"}, {"sha": "93b992f2f8af22d15d82a0b3968cf4173a387ddc", "filename": "src/test/parse-fail/pub-macro-rules.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Ftest%2Fparse-fail%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Ftest%2Fparse-fail%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpub-macro-rules.rs?ref=f73c0a82ecd28feab1c7328d8659f6d75bd60679", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_use] mod bleh {\n+    pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation with `pub`\n+    //~^ HELP did you mean #[macro_export]?\n+        ($n:ident) => (\n+            fn $n () -> i32 {\n+                1\n+            }\n+        )\n+    }\n+\n+}\n+\n+foo!(meh);\n+\n+fn main() {\n+    println!(\"{}\", meh());\n+}"}, {"sha": "198fa5b9aca0bf4009c238cc2ed2651278b86a15", "filename": "src/test/parse-fail/pub-method-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Ftest%2Fparse-fail%2Fpub-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73c0a82ecd28feab1c7328d8659f6d75bd60679/src%2Ftest%2Fparse-fail%2Fpub-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpub-method-macro.rs?ref=f73c0a82ecd28feab1c7328d8659f6d75bd60679", "previous_filename": "src/test/compile-fail/pub-method-macro.rs"}]}