{"sha": "51705698bd66919435e4fcbc25d96bd7fc5583f4", "node_id": "C_kwDOAAsO6NoAKDUxNzA1Njk4YmQ2NjkxOTQzNWU0ZmNiYzI1ZDk2YmQ3ZmM1NTgzZjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T13:39:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T13:39:31Z"}, "message": "Auto merge of #12931 - oxalica:feat/la-arena-apis, r=lnicola\n\nAdd more constructors and entry-APIs for la-arena\n\n`la-arena` on crates.io is quite helpful when just a thin wrapper for Vec with u32 indices is needed.\nBut the current API is not ergonomic enough.\n\nThis PR\n- Adds `ArenaMap::new`. Not sure why only `Arena` has it now.\n- Adds `Arena{,Map}::with_capacity` for known-size storage.\n- Adds entry-API for `ArenaMap` for easier `.entry(idx).or_default().push(value)` or `.entry(idx).or_insert(...)` operations.", "tree": {"sha": "56c051f5283efd2328aea8d5c725f31090af8335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56c051f5283efd2328aea8d5c725f31090af8335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51705698bd66919435e4fcbc25d96bd7fc5583f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51705698bd66919435e4fcbc25d96bd7fc5583f4", "html_url": "https://github.com/rust-lang/rust/commit/51705698bd66919435e4fcbc25d96bd7fc5583f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51705698bd66919435e4fcbc25d96bd7fc5583f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3792720086faccb3ee085558ad082c979785f437", "url": "https://api.github.com/repos/rust-lang/rust/commits/3792720086faccb3ee085558ad082c979785f437", "html_url": "https://github.com/rust-lang/rust/commit/3792720086faccb3ee085558ad082c979785f437"}, {"sha": "10f870eff44f07e3e8dc241e5cc11e0fa4d50ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f870eff44f07e3e8dc241e5cc11e0fa4d50ae3", "html_url": "https://github.com/rust-lang/rust/commit/10f870eff44f07e3e8dc241e5cc11e0fa4d50ae3"}], "stats": {"total": 131, "additions": 129, "deletions": 2}, "files": [{"sha": "a3fe59e946ee9be8e60789c8b016d8231c9c48b4", "filename": "lib/la-arena/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51705698bd66919435e4fcbc25d96bd7fc5583f4/lib%2Fla-arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51705698bd66919435e4fcbc25d96bd7fc5583f4/lib%2Fla-arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Flib.rs?ref=51705698bd66919435e4fcbc25d96bd7fc5583f4", "patch": "@@ -12,7 +12,7 @@ use std::{\n };\n \n mod map;\n-pub use map::ArenaMap;\n+pub use map::{ArenaMap, Entry, OccupiedEntry, VacantEntry};\n \n /// The raw index of a value in an arena.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -208,6 +208,16 @@ impl<T> Arena<T> {\n         Arena { data: Vec::new() }\n     }\n \n+    /// Create a new empty arena with specific capacity.\n+    ///\n+    /// ```\n+    /// let arena: la_arena::Arena<i32> = la_arena::Arena::with_capacity(42);\n+    /// assert!(arena.is_empty());\n+    /// ```\n+    pub fn with_capacity(capacity: usize) -> Arena<T> {\n+        Arena { data: Vec::with_capacity(capacity) }\n+    }\n+\n     /// Empties the arena, removing all contained values.\n     ///\n     /// ```"}, {"sha": "f74ec5d97cb95bfde9783d58382d2725abc5088a", "filename": "lib/la-arena/src/map.rs", "status": "modified", "additions": 118, "deletions": 1, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/51705698bd66919435e4fcbc25d96bd7fc5583f4/lib%2Fla-arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51705698bd66919435e4fcbc25d96bd7fc5583f4/lib%2Fla-arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Fmap.rs?ref=51705698bd66919435e4fcbc25d96bd7fc5583f4", "patch": "@@ -11,6 +11,16 @@ pub struct ArenaMap<IDX, V> {\n }\n \n impl<T, V> ArenaMap<Idx<T>, V> {\n+    /// Creates a new empty map.\n+    pub const fn new() -> Self {\n+        Self { v: Vec::new(), _ty: PhantomData }\n+    }\n+\n+    /// Create a new empty map with specific capacity.\n+    pub fn with_capacity(capacity: usize) -> Self {\n+        Self { v: Vec::with_capacity(capacity), _ty: PhantomData }\n+    }\n+\n     /// Inserts a value associated with a given arena index into the map.\n     pub fn insert(&mut self, idx: Idx<T>, t: V) {\n         let idx = Self::to_idx(idx);\n@@ -46,6 +56,16 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n         self.v.iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n     }\n \n+    /// Gets the given key's corresponding entry in the map for in-place manipulation.\n+    pub fn entry(&mut self, idx: Idx<T>) -> Entry<'_, Idx<T>, V> {\n+        let idx = Self::to_idx(idx);\n+        self.v.resize_with((idx + 1).max(self.v.len()), || None);\n+        match &mut self.v[idx] {\n+            slot @ Some(_) => Entry::Occupied(OccupiedEntry { slot, _ty: PhantomData }),\n+            slot @ None => Entry::Vacant(VacantEntry { slot, _ty: PhantomData }),\n+        }\n+    }\n+\n     fn to_idx(idx: Idx<T>) -> usize {\n         u32::from(idx.into_raw()) as usize\n     }\n@@ -70,6 +90,103 @@ impl<T, V> std::ops::IndexMut<Idx<V>> for ArenaMap<Idx<V>, T> {\n \n impl<T, V> Default for ArenaMap<Idx<V>, T> {\n     fn default() -> Self {\n-        ArenaMap { v: Vec::new(), _ty: PhantomData }\n+        Self::new()\n+    }\n+}\n+\n+/// A view into a single entry in a map, which may either be vacant or occupied.\n+///\n+/// This `enum` is constructed from the [`entry`] method on [`ArenaMap`].\n+///\n+/// [`entry`]: ArenaMap::entry\n+pub enum Entry<'a, IDX, V> {\n+    /// A vacant entry.\n+    Vacant(VacantEntry<'a, IDX, V>),\n+    /// An occupied entry.\n+    Occupied(OccupiedEntry<'a, IDX, V>),\n+}\n+\n+impl<'a, IDX, V> Entry<'a, IDX, V> {\n+    /// Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to\n+    /// the value in the entry.\n+    pub fn or_insert(self, default: V) -> &'a mut V {\n+        match self {\n+            Self::Vacant(ent) => ent.insert(default),\n+            Self::Occupied(ent) => ent.into_mut(),\n+        }\n+    }\n+\n+    /// Ensures a value is in the entry by inserting the result of the default function if empty, and returns\n+    /// a mutable reference to the value in the entry.\n+    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Self::Vacant(ent) => ent.insert(default()),\n+            Self::Occupied(ent) => ent.into_mut(),\n+        }\n+    }\n+\n+    /// Provides in-place mutable access to an occupied entry before any potential inserts into the map.\n+    pub fn and_modify<F: FnOnce(&mut V)>(mut self, f: F) -> Self {\n+        if let Self::Occupied(ent) = &mut self {\n+            f(ent.get_mut());\n+        }\n+        self\n+    }\n+}\n+\n+impl<'a, IDX, V> Entry<'a, IDX, V>\n+where\n+    V: Default,\n+{\n+    /// Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference\n+    /// to the value in the entry.\n+    pub fn or_default(self) -> &'a mut V {\n+        self.or_insert_with(Default::default)\n+    }\n+}\n+\n+/// A view into an vacant entry in a [`ArenaMap`]. It is part of the [`Entry`] enum.\n+pub struct VacantEntry<'a, IDX, V> {\n+    slot: &'a mut Option<V>,\n+    _ty: PhantomData<IDX>,\n+}\n+\n+impl<'a, IDX, V> VacantEntry<'a, IDX, V> {\n+    /// Sets the value of the entry with the `VacantEntry`\u2019s key, and returns a mutable reference to it.\n+    pub fn insert(self, value: V) -> &'a mut V {\n+        self.slot.insert(value)\n+    }\n+}\n+\n+/// A view into an occupied entry in a [`ArenaMap`]. It is part of the [`Entry`] enum.\n+pub struct OccupiedEntry<'a, IDX, V> {\n+    slot: &'a mut Option<V>,\n+    _ty: PhantomData<IDX>,\n+}\n+\n+impl<'a, IDX, V> OccupiedEntry<'a, IDX, V> {\n+    /// Gets a reference to the value in the entry.\n+    pub fn get(&self) -> &V {\n+        self.slot.as_ref().expect(\"Occupied\")\n+    }\n+\n+    /// Gets a mutable reference to the value in the entry.\n+    pub fn get_mut(&mut self) -> &mut V {\n+        self.slot.as_mut().expect(\"Occupied\")\n+    }\n+\n+    /// Converts the entry into a mutable reference to its value.\n+    pub fn into_mut(self) -> &'a mut V {\n+        self.slot.as_mut().expect(\"Occupied\")\n+    }\n+\n+    /// Sets the value of the entry with the `OccupiedEntry`\u2019s key, and returns the entry\u2019s old value.\n+    pub fn insert(&mut self, value: V) -> V {\n+        self.slot.replace(value).expect(\"Occupied\")\n+    }\n+\n+    /// Takes the value of the entry out of the map, and returns it.\n+    pub fn remove(self) -> V {\n+        self.slot.take().expect(\"Occupied\")\n     }\n }"}]}