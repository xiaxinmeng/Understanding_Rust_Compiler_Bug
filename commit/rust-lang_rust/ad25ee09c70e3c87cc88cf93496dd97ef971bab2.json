{"sha": "ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "node_id": "C_kwDOAAsO6NoAKGFkMjVlZTA5YzcwZTNjODdjYzg4Y2Y5MzQ5NmRkOTdlZjk3MWJhYjI", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-15T14:49:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-15T21:28:16Z"}, "message": "mark issue-91139 and issue-92096 as FIXME\n\nThese were \"fixed\" as part of switching on NLL but seems\nto be due to another problem. Preliminary investigation\nsuggests they are both PROBABLY \"implied bounds\" related.", "tree": {"sha": "4c17874ec3fbdfbdeb119eff3fe229b60a6b731c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c17874ec3fbdfbdeb119eff3fe229b60a6b731c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "html_url": "https://github.com/rust-lang/rust/commit/ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12912b9cde4791dead52e49ae87f80c579bc0cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/12912b9cde4791dead52e49ae87f80c579bc0cd5", "html_url": "https://github.com/rust-lang/rust/commit/12912b9cde4791dead52e49ae87f80c579bc0cd5"}], "stats": {"total": 85, "additions": 82, "deletions": 3}, "files": [{"sha": "092fa939c308d5d9a3899d99c667c1d6562c46a5", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "patch": "@@ -1,5 +1,3 @@\n-//check-pass\n-\n #![feature(generic_associated_types)]\n \n trait Foo<T> {\n@@ -16,6 +14,22 @@ impl<T> Foo<T> for () {\n \n fn foo<T>() {\n     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+    //~^ ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //~| ERROR `T` does not live long enough\n+    //\n+    // FIXME: This error is bogus, but it arises because we try to validate\n+    // that `<() as Foo<T>>::Type<'a>` is valid, which requires proving\n+    // that `T: 'a`. Since `'a` is higher-ranked, this becomes\n+    // `for<'a> T: 'a`, which is not true. Of course, the error is bogus\n+    // because there *ought* to be an implied bound stating that `'a` is\n+    // not any lifetime but specifically\n+    // \"some `'a` such that `<() as Foo<T>>::Type<'a>\" is valid\".\n }\n \n pub fn main() {}"}, {"sha": "6c5092978c84b40084ee52c0eea7936c30de3fcb", "filename": "src/test/ui/generic-associated-types/issue-91139.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr?ref=ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "patch": "@@ -0,0 +1,50 @@\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:12\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:12\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:12\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:12\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:58\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |                                                          ^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:58\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |                                                          ^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:58\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |                                                          ^^^^^^^^^\n+\n+error: `T` does not live long enough\n+  --> $DIR/issue-91139.rs:16:58\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |                                                          ^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "59dd7ea5563454122da19ed9b8684e4afebbbdbd", "filename": "src/test/ui/generic-associated-types/issue-92096.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs?ref=ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-// check-pass\n \n #![feature(generic_associated_types)]\n \n@@ -18,6 +17,14 @@ where\n     C: Client + Send + Sync,\n {\n     async move { c.connect().await }\n+    //~^ ERROR `C` does not live long enough\n+    //\n+    // FIXME. This is because we infer at some point a value of\n+    //\n+    // impl Future<Output = <C as Client>::Connection<'_>>\n+    //\n+    // and then we somehow fail the WF check because `where C: 'a` is not known,\n+    // but I'm not entirely sure how that comes about.\n }\n \n fn main() {}"}, {"sha": "ca61a0f435e93123b27523c4c37571e2495e08c2", "filename": "src/test/ui/generic-associated-types/issue-92096.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad25ee09c70e3c87cc88cf93496dd97ef971bab2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.stderr?ref=ad25ee09c70e3c87cc88cf93496dd97ef971bab2", "patch": "@@ -0,0 +1,8 @@\n+error: `C` does not live long enough\n+  --> $DIR/issue-92096.rs:19:5\n+   |\n+LL |     async move { c.connect().await }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}