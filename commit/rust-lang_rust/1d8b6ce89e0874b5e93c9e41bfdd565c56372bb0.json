{"sha": "1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOGI2Y2U4OWUwODc0YjVlOTNjOWU0MWJmZGQ1NjVjNTYzNzJiYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-16T02:40:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-16T02:40:52Z"}, "message": "Auto merge of #66453 - Centril:rollup-w1ohzxs, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #66350 (protect creation of destructors by a mutex)\n - #66407 (Add more tests for fixed ICEs)\n - #66415 (Add --force-run-in-process unstable option to libtest)\n - #66427 (Move the JSON error emitter to librustc_errors)\n - #66441 (libpanic_unwind for Miri: make sure we have the SEH lang items when needed)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "363c94e009f1ebf5b5b562c34caac92815a497e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363c94e009f1ebf5b5b562c34caac92815a497e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "html_url": "https://github.com/rust-lang/rust/commit/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82161cda33406ae8dda08b3e4afe97a44b193792", "url": "https://api.github.com/repos/rust-lang/rust/commits/82161cda33406ae8dda08b3e4afe97a44b193792", "html_url": "https://github.com/rust-lang/rust/commit/82161cda33406ae8dda08b3e4afe97a44b193792"}, {"sha": "ae9a62633aa0c92f826ffe0d82e9e03b41a66de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9a62633aa0c92f826ffe0d82e9e03b41a66de1", "html_url": "https://github.com/rust-lang/rust/commit/ae9a62633aa0c92f826ffe0d82e9e03b41a66de1"}], "stats": {"total": 391, "additions": 193, "deletions": 198}, "files": [{"sha": "d3bc70c666f018b1eaad0863ee5b2d636c2f89c2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -4439,6 +4439,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena\",\n  \"cfg-if\",\n+ \"log\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n  \"rustc_macros\","}, {"sha": "5f345c2133f6b5c2313f3c7c99fcc65907a443f5", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -39,6 +39,11 @@ cfg_if::cfg_if! {\n     if #[cfg(miri)] {\n         #[path = \"miri.rs\"]\n         mod imp;\n+        // On MSVC we need the SEH lang items as well...\n+        // This should match the conditions of the `seh.rs` import below.\n+        #[cfg(all(target_env = \"msvc\", not(target_arch = \"aarch64\")))]\n+        #[allow(unused)]\n+        mod seh;\n     } else if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod imp;"}, {"sha": "4fbc8da9cbf026433f99e33b0172f8f9dab3e8bb", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -22,7 +22,7 @@ use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n-use syntax::json::JsonEmitter;\n+use errors::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::{ParseSess, ProcessCfgMod};\n use syntax::symbol::Symbol;"}, {"sha": "f35a31d59fe62bd648b5a50e54459b0a03262022", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -23,7 +23,8 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Handler, Level, FatalError, DiagnosticId, SourceMapperDyn};\n+use rustc_errors::{Handler, Level, FatalError, DiagnosticId};\n+use syntax_pos::source_map::SourceMap;\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n@@ -1679,7 +1680,7 @@ impl Emitter for SharedEmitter {\n         }\n         drop(self.sender.send(SharedEmitterMessage::AbortIfErrors));\n     }\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         None\n     }\n }"}, {"sha": "4c5d0178b2c64d049ffc17adb2b737b0b1536c93", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -6,9 +6,10 @@\n //! [annotate_snippets]: https://docs.rs/crate/annotate-snippets/\n \n use syntax_pos::{SourceFile, MultiSpan, Loc};\n+use syntax_pos::source_map::SourceMap;\n use crate::{\n     Level, CodeSuggestion, Diagnostic, Emitter,\n-    SourceMapperDyn, SubDiagnostic, DiagnosticId\n+    SubDiagnostic, DiagnosticId\n };\n use crate::emitter::FileWithAnnotatedLines;\n use rustc_data_structures::sync::Lrc;\n@@ -20,7 +21,7 @@ use annotate_snippets::formatter::DisplayListFormatter;\n \n /// Generates diagnostics using annotate-snippet\n pub struct AnnotateSnippetEmitterWriter {\n-    source_map: Option<Lrc<SourceMapperDyn>>,\n+    source_map: Option<Lrc<SourceMap>>,\n     /// If true, hides the longer explanation text\n     short_message: bool,\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n@@ -49,7 +50,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n                                    &suggestions);\n     }\n \n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         self.source_map.as_ref()\n     }\n \n@@ -61,7 +62,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n /// Collects all the data needed to generate the data structures needed for the\n /// `annotate-snippets` library.\n struct DiagnosticConverter<'a> {\n-    source_map: Option<Lrc<SourceMapperDyn>>,\n+    source_map: Option<Lrc<SourceMap>>,\n     level: Level,\n     message: String,\n     code: Option<DiagnosticId>,\n@@ -168,7 +169,7 @@ impl<'a>  DiagnosticConverter<'a> {\n \n impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n         external_macro_backtrace: bool,\n     ) -> Self {"}, {"sha": "ea779982ba961b4de8387eba92e7edcd1a3eadb7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -10,10 +10,11 @@\n use Destination::*;\n \n use syntax_pos::{SourceFile, Span, MultiSpan};\n+use syntax_pos::source_map::SourceMap;\n \n use crate::{\n     Level, CodeSuggestion, Diagnostic, SubDiagnostic, pluralize,\n-    SuggestionStyle, SourceMapper, SourceMapperDyn, DiagnosticId,\n+    SuggestionStyle, DiagnosticId,\n };\n use crate::Level::Error;\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n@@ -49,7 +50,7 @@ impl HumanReadableErrorType {\n     pub fn new_emitter(\n         self,\n         dst: Box<dyn Write + Send>,\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n         external_macro_backtrace: bool,\n@@ -192,7 +193,7 @@ pub trait Emitter {\n         true\n     }\n \n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>>;\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>>;\n \n     /// Formats the substitutions of the primary_span\n     ///\n@@ -271,7 +272,7 @@ pub trait Emitter {\n     // point directly at <*macros>. Since these are often difficult to read, this\n     // will change the span to point at the use site.\n     fn fix_multispans_in_std_macros(&self,\n-                                    source_map: &Option<Lrc<SourceMapperDyn>>,\n+                                    source_map: &Option<Lrc<SourceMap>>,\n                                     span: &mut MultiSpan,\n                                     children: &mut Vec<SubDiagnostic>,\n                                     level: &Level,\n@@ -311,7 +312,7 @@ pub trait Emitter {\n     // <*macros>. Since these locations are often difficult to read, we move these Spans from\n     // <*macros> to their corresponding use site.\n     fn fix_multispan_in_std_macros(&self,\n-                                   source_map: &Option<Lrc<SourceMapperDyn>>,\n+                                   source_map: &Option<Lrc<SourceMap>>,\n                                    span: &mut MultiSpan,\n                                    always_backtrace: bool) -> bool {\n         let sm = match source_map {\n@@ -397,7 +398,7 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         self.sm.as_ref()\n     }\n \n@@ -428,7 +429,7 @@ impl Emitter for EmitterWriter {\n pub struct SilentEmitter;\n \n impl Emitter for SilentEmitter {\n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> { None }\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> { None }\n     fn emit_diagnostic(&mut self, _: &Diagnostic) {}\n }\n \n@@ -476,7 +477,7 @@ impl ColorConfig {\n /// Handles the writing of `HumanReadableErrorType::Default` and `HumanReadableErrorType::Short`\n pub struct EmitterWriter {\n     dst: Destination,\n-    sm: Option<Lrc<SourceMapperDyn>>,\n+    sm: Option<Lrc<SourceMap>>,\n     short_message: bool,\n     teach: bool,\n     ui_testing: bool,\n@@ -495,7 +496,7 @@ pub struct FileWithAnnotatedLines {\n impl EmitterWriter {\n     pub fn stderr(\n         color_config: ColorConfig,\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n@@ -515,7 +516,7 @@ impl EmitterWriter {\n \n     pub fn new(\n         dst: Box<dyn Write + Send>,\n-        source_map: Option<Lrc<SourceMapperDyn>>,\n+        source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n         teach: bool,\n         colored: bool,\n@@ -1685,7 +1686,7 @@ impl FileWithAnnotatedLines {\n     /// This helps us quickly iterate over the whole message (including secondary file spans)\n     pub fn collect_annotations(\n         msp: &MultiSpan,\n-        source_map: &Option<Lrc<SourceMapperDyn>>\n+        source_map: &Option<Lrc<SourceMap>>\n     ) -> Vec<FileWithAnnotatedLines> {\n         fn add_annotation_to_file(file_vec: &mut Vec<FileWithAnnotatedLines>,\n                                   file: Lrc<SourceFile>,\n@@ -2067,7 +2068,7 @@ impl<'a> Drop for WritableDst<'a> {\n }\n \n /// Whether the original and suggested code are visually similar enough to warrant extra wording.\n-pub fn is_case_difference(sm: &dyn SourceMapper, suggested: &str, sp: Span) -> bool {\n+pub fn is_case_difference(sm: &SourceMap, suggested: &str, sp: Span) -> bool {\n     // FIXME: this should probably be extended to also account for `FO0` \u2192 `FOO` and unicode.\n     let found = sm.span_to_snippet(sp).unwrap();\n     let ascii_confusables = &['c', 'f', 'i', 'k', 'o', 's', 'u', 'v', 'w', 'x', 'y', 'z'];"}, {"sha": "ebbd49bd84a73ad510ade87fb17c4ab30f014aa6", "filename": "src/librustc_errors/json.rs", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -9,15 +9,15 @@\n \n // FIXME: spec the JSON output properly.\n \n-use crate::source_map::{SourceMap, FilePathMapping};\n+use syntax_pos::source_map::{SourceMap, FilePathMapping};\n \n-use errors::registry::Registry;\n-use errors::{SubDiagnostic, CodeSuggestion, SourceMapper, SourceMapperDyn};\n-use errors::{DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, HumanReadableErrorType};\n+use crate::registry::Registry;\n+use crate::{SubDiagnostic, CodeSuggestion};\n+use crate::{DiagnosticId, Applicability};\n+use crate::emitter::{Emitter, HumanReadableErrorType};\n \n use syntax_pos::{MacroBacktrace, Span, SpanLabel, MultiSpan};\n-use rustc_data_structures::sync::{self, Lrc};\n+use rustc_data_structures::sync::Lrc;\n use std::io::{self, Write};\n use std::path::Path;\n use std::vec;\n@@ -31,7 +31,7 @@ mod tests;\n pub struct JsonEmitter {\n     dst: Box<dyn Write + Send>,\n     registry: Option<Registry>,\n-    sm: Lrc<dyn SourceMapper + sync::Send + sync::Sync>,\n+    sm: Lrc<SourceMap>,\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n@@ -92,7 +92,7 @@ impl JsonEmitter {\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_diagnostic(&mut self, diag: &errors::Diagnostic) {\n+    fn emit_diagnostic(&mut self, diag: &crate::Diagnostic) {\n         let data = Diagnostic::from_errors_diagnostic(diag, self);\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n@@ -116,7 +116,7 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn source_map(&self) -> Option<&Lrc<SourceMapperDyn>> {\n+    fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n         Some(&self.sm)\n     }\n \n@@ -212,7 +212,7 @@ struct ArtifactNotification<'a> {\n }\n \n impl Diagnostic {\n-    fn from_errors_diagnostic(diag: &errors::Diagnostic,\n+    fn from_errors_diagnostic(diag: &crate::Diagnostic,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n         let sugg = diag.suggestions.iter().map(|sugg| {", "previous_filename": "src/libsyntax/json.rs"}, {"sha": "4ab5cd21b0b00e95507b6fae69a9549a2fcd6d9b", "filename": "src/librustc_errors/json/tests.rs", "status": "renamed", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson%2Ftests.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -1,11 +1,10 @@\n use super::*;\n \n use crate::json::JsonEmitter;\n-use crate::source_map::{FilePathMapping, SourceMap};\n-use crate::with_default_globals;\n+use syntax_pos::source_map::{FilePathMapping, SourceMap};\n \n-use errors::emitter::{ColorConfig, HumanReadableErrorType};\n-use errors::Handler;\n+use crate::emitter::{ColorConfig, HumanReadableErrorType};\n+use crate::Handler;\n use rustc_serialize::json::decode;\n use syntax_pos::{BytePos, Span};\n \n@@ -40,6 +39,13 @@ impl<T: Write> Write for Shared<T> {\n     }\n }\n \n+fn with_default_globals(f: impl FnOnce()) {\n+    let globals = syntax_pos::Globals::new(syntax_pos::edition::DEFAULT_EDITION);\n+    syntax_pos::GLOBALS.set(&globals, || {\n+        syntax_pos::GLOBALS.set(&globals, f)\n+    })\n+}\n+\n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     let expected_output = TestData { spans: vec![expected_output] };", "previous_filename": "src/libsyntax/json/tests.rs"}, {"sha": "17765ef9deefa25df550aebe9041fe0c312e400e", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 58, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -18,6 +18,8 @@ use registry::Registry;\n use rustc_data_structures::sync::{self, Lrc, Lock};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n+use syntax_pos::source_map::SourceMap;\n+use syntax_pos::{Loc, Span, MultiSpan};\n \n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -35,17 +37,7 @@ mod snippet;\n pub mod registry;\n mod styled_buffer;\n mod lock;\n-\n-use syntax_pos::{\n-    BytePos,\n-    FileLinesResult,\n-    FileName,\n-    Loc,\n-    MultiSpan,\n-    SourceFile,\n-    Span,\n-    SpanSnippetError,\n-};\n+pub mod json;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n@@ -150,26 +142,12 @@ pub struct SubstitutionPart {\n     pub snippet: String,\n }\n \n-pub type SourceMapperDyn = dyn SourceMapper + sync::Send + sync::Sync;\n-\n-pub trait SourceMapper {\n-    fn lookup_char_pos(&self, pos: BytePos) -> Loc;\n-    fn span_to_lines(&self, sp: Span) -> FileLinesResult;\n-    fn span_to_string(&self, sp: Span) -> String;\n-    fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError>;\n-    fn span_to_filename(&self, sp: Span) -> FileName;\n-    fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n-    fn call_span_if_macro(&self, sp: Span) -> Span;\n-    fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool;\n-    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize;\n-}\n-\n impl CodeSuggestion {\n     /// Returns the assembled code suggestions, whether they should be shown with an underline\n     /// and whether the substitution only differs in capitalization.\n     pub fn splice_lines(\n         &self,\n-        cm: &SourceMapperDyn,\n+        cm: &SourceMap,\n     ) -> Vec<(String, Vec<SubstitutionPart>, bool)> {\n         use syntax_pos::{CharPos, Pos};\n \n@@ -259,36 +237,7 @@ impl CodeSuggestion {\n     }\n }\n \n-/// Used as a return value to signify a fatal error occurred. (It is also\n-/// used as the argument to panic at the moment, but that will eventually\n-/// not be true.)\n-#[derive(Copy, Clone, Debug)]\n-#[must_use]\n-pub struct FatalError;\n-\n-pub struct FatalErrorMarker;\n-\n-// Don't implement Send on FatalError. This makes it impossible to panic!(FatalError).\n-// We don't want to invoke the panic handler and print a backtrace for fatal errors.\n-impl !Send for FatalError {}\n-\n-impl FatalError {\n-    pub fn raise(self) -> ! {\n-        panic::resume_unwind(Box::new(FatalErrorMarker))\n-    }\n-}\n-\n-impl fmt::Display for FatalError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"parser fatal error\")\n-    }\n-}\n-\n-impl error::Error for FatalError {\n-    fn description(&self) -> &str {\n-        \"The parser has encountered a fatal error\"\n-    }\n-}\n+pub use syntax_pos::fatal_error::{FatalError, FatalErrorMarker};\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n@@ -405,7 +354,7 @@ impl Handler {\n         color_config: ColorConfig,\n         can_emit_warnings: bool,\n         treat_err_as_bug: Option<usize>,\n-        cm: Option<Lrc<SourceMapperDyn>>,\n+        cm: Option<Lrc<SourceMap>>,\n     ) -> Self {\n         Self::with_tty_emitter_and_flags(\n             color_config,\n@@ -420,7 +369,7 @@ impl Handler {\n \n     pub fn with_tty_emitter_and_flags(\n         color_config: ColorConfig,\n-        cm: Option<Lrc<SourceMapperDyn>>,\n+        cm: Option<Lrc<SourceMap>>,\n         flags: HandlerFlags,\n     ) -> Self {\n         let emitter = Box::new(EmitterWriter::stderr("}, {"sha": "507732a9107fb166476651f796975f16a0e0d7d5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -18,7 +18,7 @@ use syntax::ast::CRATE_NODE_ID;\n use syntax::source_map;\n use syntax::attr;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::json::JsonEmitter;\n+use errors::json::JsonEmitter;\n use syntax::symbol::sym;\n use syntax_pos::DUMMY_SP;\n use errors;"}, {"sha": "268fb770eae2c4f966ee6a80f5f5ba46790f80ea", "filename": "src/libstd/sys/hermit/thread_local.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Fthread_local.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -3,6 +3,7 @@\n use crate::collections::BTreeMap;\n use crate::ptr;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys_common::mutex::Mutex;\n \n pub type Key = usize;\n \n@@ -11,6 +12,7 @@ type Dtor = unsafe extern fn(*mut u8);\n static NEXT_KEY: AtomicUsize = AtomicUsize::new(0);\n \n static mut KEYS: *mut BTreeMap<Key, Option<Dtor>> = ptr::null_mut();\n+static KEYS_LOCK: Mutex = Mutex::new();\n \n #[thread_local]\n static mut LOCALS: *mut BTreeMap<Key, *mut u8> = ptr::null_mut();\n@@ -32,6 +34,7 @@ unsafe fn locals() -> &'static mut BTreeMap<Key, *mut u8> {\n #[inline]\n pub unsafe fn create(dtor: Option<Dtor>) -> Key {\n     let key = NEXT_KEY.fetch_add(1, Ordering::SeqCst);\n+    let _guard = KEYS_LOCK.lock();\n     keys().insert(key, dtor);\n     key\n }"}, {"sha": "e3eca75dfe7e70951b26fdb7a238759bfad360a3", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -87,12 +87,10 @@ pub mod util {\n     pub mod map_in_place;\n }\n \n-pub mod json;\n-\n pub mod ast;\n pub mod attr;\n pub mod expand;\n-pub mod source_map;\n+pub use syntax_pos::source_map;\n pub mod entry;\n pub mod feature_gate;\n pub mod mut_visit;"}, {"sha": "659780d7a434b61167b3deadb6fd2eccc8625dcb", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -67,7 +67,8 @@ pub fn inject(\n                 PanicStrategy::Unwind\n             }\n             (PanicStrategy::Abort, false) => {\n-                span_diagnostic.err(\"building tests with panic=abort is not yet supported\");\n+                span_diagnostic.err(\"building tests with panic=abort is not supported \\\n+                                     without `-Zpanic_abort_tests`\");\n                 PanicStrategy::Unwind\n             }\n             (PanicStrategy::Unwind, _) => PanicStrategy::Unwind,"}, {"sha": "2cac76085d297c645a864c44f54e4c05358f1a2b", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -18,3 +18,4 @@ arena = { path = \"../libarena\" }\n scoped-tls = \"1.0\"\n unicode-width = \"0.1.4\"\n cfg-if = \"0.1.2\"\n+log = \"0.4\""}, {"sha": "cf7c677d59d951ab847535105830cf3c72cb9b2a", "filename": "src/libsyntax_pos/fatal_error.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Ffatal_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Ffatal_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Ffatal_error.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,30 @@\n+/// Used as a return value to signify a fatal error occurred. (It is also\n+/// used as the argument to panic at the moment, but that will eventually\n+/// not be true.)\n+#[derive(Copy, Clone, Debug)]\n+#[must_use]\n+pub struct FatalError;\n+\n+pub struct FatalErrorMarker;\n+\n+// Don't implement Send on FatalError. This makes it impossible to panic!(FatalError).\n+// We don't want to invoke the panic handler and print a backtrace for fatal errors.\n+impl !Send for FatalError {}\n+\n+impl FatalError {\n+    pub fn raise(self) -> ! {\n+        std::panic::resume_unwind(Box::new(FatalErrorMarker))\n+    }\n+}\n+\n+impl std::fmt::Display for FatalError {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(f, \"parser fatal error\")\n+    }\n+}\n+\n+impl std::error::Error for FatalError {\n+    fn description(&self) -> &str {\n+        \"The parser has encountered a fatal error\"\n+    }\n+}"}, {"sha": "b88d6dbc3f3790434d0168bee1c99c2ae2a928f2", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -16,6 +16,8 @@\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n \n+pub mod source_map;\n+\n pub mod edition;\n use edition::Edition;\n pub mod hygiene;\n@@ -29,6 +31,7 @@ pub mod symbol;\n pub use symbol::{Symbol, sym};\n \n mod analyze_source_file;\n+pub mod fatal_error;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{Lrc, Lock};"}, {"sha": "77d9807225ec82be4d50cb2cc411657d77c6f5f4", "filename": "src/libsyntax_pos/source_map.rs", "status": "renamed", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsource_map.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -7,8 +7,8 @@\n //! within the `SourceMap`, which upon request can be converted to line and column\n //! information, source code snippets, etc.\n \n-pub use syntax_pos::*;\n-pub use syntax_pos::hygiene::{ExpnKind, ExpnData};\n+pub use crate::*;\n+pub use crate::hygiene::{ExpnKind, ExpnData};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -22,8 +22,6 @@ use std::fs;\n use std::io;\n use log::debug;\n \n-use errors::SourceMapper;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -216,7 +214,7 @@ impl SourceMap {\n         self.try_new_source_file(filename, src)\n             .unwrap_or_else(|OffsetOverflowError| {\n                 eprintln!(\"fatal error: rustc does not support files larger than 4GB\");\n-                errors::FatalError.raise()\n+                crate::fatal_error::FatalError.raise()\n             })\n     }\n \n@@ -956,28 +954,15 @@ impl SourceMap {\n \n         None\n     }\n-}\n-\n-impl SourceMapper for SourceMap {\n-    fn lookup_char_pos(&self, pos: BytePos) -> Loc {\n-        self.lookup_char_pos(pos)\n-    }\n-    fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n-        self.span_to_lines(sp)\n-    }\n-    fn span_to_string(&self, sp: Span) -> String {\n-        self.span_to_string(sp)\n-    }\n-    fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n-        self.span_to_snippet(sp)\n-    }\n-    fn span_to_filename(&self, sp: Span) -> FileName {\n-        self.span_to_filename(sp)\n-    }\n-    fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span> {\n-        self.merge_spans(sp_lhs, sp_rhs)\n+    pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n+        source_file.add_external_src(\n+            || match source_file.name {\n+                FileName::Real(ref name) => self.file_loader.read_file(name).ok(),\n+                _ => None,\n+            }\n+        )\n     }\n-    fn call_span_if_macro(&self, sp: Span) -> Span {\n+    pub fn call_span_if_macro(&self, sp: Span) -> Span {\n         if self.span_to_filename(sp.clone()).is_macros() {\n             let v = sp.macro_backtrace();\n             if let Some(use_site) = v.last() {\n@@ -986,17 +971,6 @@ impl SourceMapper for SourceMap {\n         }\n         sp\n     }\n-    fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {\n-        source_file.add_external_src(\n-            || match source_file.name {\n-                FileName::Real(ref name) => self.file_loader.read_file(name).ok(),\n-                _ => None,\n-            }\n-        )\n-    }\n-    fn doctest_offset_line(&self, file: &FileName, line: usize) -> usize {\n-        self.doctest_offset_line(file, line)\n-    }\n }\n \n #[derive(Clone)]", "previous_filename": "src/libsyntax/source_map.rs"}, {"sha": "15254336bbfa5dd8049113c24f230d165f16a02e", "filename": "src/libsyntax_pos/source_map/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibsyntax_pos%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsource_map%2Ftests.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "previous_filename": "src/libsyntax/source_map/tests.rs"}, {"sha": "c97cb0e0605a220ba4afb255356de3f45493fb21", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -13,6 +13,7 @@ pub struct TestOpts {\n     pub list: bool,\n     pub filter: Option<String>,\n     pub filter_exact: bool,\n+    pub force_run_in_process: bool,\n     pub exclude_should_panic: bool,\n     pub run_ignored: RunIgnored,\n     pub run_tests: bool,\n@@ -46,6 +47,7 @@ fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"\", \"include-ignored\", \"Run ignored and not ignored tests\")\n         .optflag(\"\", \"ignored\", \"Run only ignored tests\")\n+        .optflag(\"\", \"force-run-in-process\", \"Forces tests to run in-process when panic=abort\")\n         .optflag(\"\", \"exclude-should-panic\", \"Excludes tests marked as should_panic\")\n         .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n         .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n@@ -233,6 +235,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n     let allow_unstable = get_allow_unstable(&matches)?;\n \n     // Unstable flags\n+    let force_run_in_process = unstable_optflag!(matches, allow_unstable, \"force-run-in-process\");\n     let exclude_should_panic = unstable_optflag!(matches, allow_unstable, \"exclude-should-panic\");\n     let include_ignored = unstable_optflag!(matches, allow_unstable, \"include-ignored\");\n     let time_options = get_time_options(&matches, allow_unstable)?;\n@@ -259,6 +262,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n         list,\n         filter,\n         filter_exact: exact,\n+        force_run_in_process,\n         exclude_should_panic,\n         run_ignored,\n         run_tests,"}, {"sha": "7647978b3d975dfd0f69667ecf4a95bc6953caf9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -254,7 +254,7 @@ where\n     let mut pending = 0;\n \n     let (tx, rx) = channel::<CompletedTest>();\n-    let run_strategy = if opts.options.panic_abort {\n+    let run_strategy = if opts.options.panic_abort && !opts.force_run_in_process {\n         RunStrategy::SpawnPrimary\n     } else {\n         RunStrategy::InProcess"}, {"sha": "5f55b647f5e78f6470ce34621df048bfbfd217eb", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -24,6 +24,7 @@ impl TestOpts {\n             list: false,\n             filter: None,\n             filter_exact: false,\n+            force_run_in_process: false,\n             exclude_should_panic: false,\n             run_ignored: RunIgnored::No,\n             run_tests: false,"}, {"sha": "22229db8000a8e24e64a6afc6fa014f2617ba902", "filename": "src/test/ui/extern/issue-36122-accessing-externed-dst.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    extern {\n+        static symbol: [usize]; //~ ERROR: the size for values of type\n+    }\n+    println!(\"{}\", symbol[0]);\n+}"}, {"sha": "add3a8e79267d5f588dc4fa9ba5953df5f17da77", "filename": "src/test/ui/extern/issue-36122-accessing-externed-dst.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-36122-accessing-externed-dst.stderr?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n+  --> $DIR/issue-36122-accessing-externed-dst.rs:3:24\n+   |\n+LL |         static symbol: [usize];\n+   |                        ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[usize]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "25699f9fe111e1687085e7b433a233b4e2d1fb78", "filename": "src/test/ui/parser/issue-58094-missing-right-square-bracket.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,4 @@\n+// Fixed in #66054.\n+// ignore-tidy-trailing-newlines\n+// error-pattern: aborting due to 2 previous errors\n+#[\u0405\n\\ No newline at end of file"}, {"sha": "2c987da81d83354119432e277a1057476be2d723", "filename": "src/test/ui/parser/issue-58094-missing-right-square-bracket.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.stderr?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,16 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/issue-58094-missing-right-square-bracket.rs:4:4\n+   |\n+LL | #[\u0405\n+   |  - ^\n+   |  |\n+   |  un-closed delimiter\n+\n+error: expected item after attributes\n+  --> $DIR/issue-58094-missing-right-square-bracket.rs:4:4\n+   |\n+LL | #[\u0405\n+   |    ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4adb161d9ee4b09b17c2b2e2c4f8e676e9e22d2f", "filename": "src/test/ui/test-panic-abort-disabled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:building tests with panic=abort is not yet supported\n+// error-pattern:building tests with panic=abort is not supported\n // no-prefer-dynamic\n // compile-flags: --test -Cpanic=abort\n // run-flags: --test-threads=1"}, {"sha": "9c65c7360c108792e1a2afe635734dff787c1516", "filename": "src/test/ui/test-panic-abort-disabled.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-disabled.stderr?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -1,4 +1,4 @@\n-error: building tests with panic=abort is not yet supported\n+error: building tests with panic=abort is not supported without `-Zpanic_abort_tests`\n \n error: aborting due to previous error\n "}, {"sha": "eec5e962b431e55ef2bcd69fcc003fd0c255a629", "filename": "src/test/ui/unboxed-closures/issue-30904.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/82161cda33406ae8dda08b3e4afe97a44b193792/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82161cda33406ae8dda08b3e4afe97a44b193792/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs?ref=82161cda33406ae8dda08b3e4afe97a44b193792", "patch": "@@ -1,36 +0,0 @@\n-#![feature(fn_traits, unboxed_closures)]\n-\n-fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n-\n-struct Compose<F,G>(F,G);\n-impl<T,F,G> FnOnce<(T,)> for Compose<F,G>\n-where F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n-    type Output = G::Output;\n-    extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n-        (self.1)((self.0)(x))\n-    }\n-}\n-\n-struct Str<'a>(&'a str);\n-fn mk_str<'a>(s: &'a str) -> Str<'a> { Str(s) }\n-\n-fn main() {\n-    let _: for<'a> fn(&'a str) -> Str<'a> = mk_str;\n-    // expected concrete lifetime, found bound lifetime parameter 'a\n-    let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n-    //~^ ERROR: mismatched types\n-\n-    test(|_: &str| {});\n-    test(mk_str);\n-    // expected concrete lifetime, found bound lifetime parameter 'x\n-    test(Str); //~ ERROR: type mismatch in function arguments\n-\n-    test(Compose(|_: &str| {}, |_| {}));\n-    test(Compose(mk_str, |_| {}));\n-    // internal compiler error: cannot relate bound region:\n-    //   ReLateBound(DebruijnIndex { depth: 2 },\n-    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n-    //<= ReSkolemized(0,\n-    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n-    test(Compose(Str, |_| {}));\n-}"}, {"sha": "943cbe0ccc2978d63f48c0db601cd66a50b7754b", "filename": "src/test/ui/unboxed-closures/issue-30904.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/82161cda33406ae8dda08b3e4afe97a44b193792/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82161cda33406ae8dda08b3e4afe97a44b193792/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr?ref=82161cda33406ae8dda08b3e4afe97a44b193792", "patch": "@@ -1,24 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-30904.rs:20:45\n-   |\n-LL |     let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n-   |                                             ^^^ expected concrete lifetime, found bound lifetime parameter 'a\n-   |\n-   = note: expected type `for<'a> fn(&'a str) -> Str<'a>`\n-              found type `fn(&str) -> Str<'_> {Str::<'_>}`\n-\n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-30904.rs:26:10\n-   |\n-LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n-   |    ----    -------------------------- required by this bound in `test`\n-...\n-LL | struct Str<'a>(&'a str);\n-   | ------------------------ found signature of `fn(&str) -> _`\n-...\n-LL |     test(Str);\n-   |          ^^^ expected signature of `for<'x> fn(&'x str) -> _`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "5a2cbab9a15002396a4327965b7387268435717f", "filename": "src/test/ui/unboxed-closures/issue-30906.nll.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.nll.stderr?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30906.rs:15:5\n+   |\n+LL |     test(Compose(f, |_| {}));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "03cce832775151a665ec8b3894255558502d0659", "filename": "src/test/ui/unboxed-closures/issue-30906.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,18 @@\n+#![feature(fn_traits, unboxed_closures)]\n+\n+fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+\n+struct Compose<F,G>(F,G);\n+impl<T,F,G> FnOnce<(T,)> for Compose<F,G>\n+where F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n+    type Output = G::Output;\n+    extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n+        (self.1)((self.0)(x))\n+    }\n+}\n+\n+fn bad<T>(f: fn(&'static str) -> T) {\n+    test(Compose(f, |_| {})); //~ ERROR: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "5c3a1154e74c18fd6fda706bd8962ff911e2a137", "filename": "src/test/ui/unboxed-closures/issue-30906.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30906.stderr?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-30906.rs:15:5\n+   |\n+LL |     test(Compose(f, |_| {}));\n+   |     ^^^^ one type is more general than the other\n+   |\n+   = note: expected type `std::ops::FnOnce<(&'x str,)>`\n+              found type `std::ops::FnOnce<(&str,)>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7930d1249e7dc7da088317734e90abe877215ae8", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=1d8b6ce89e0874b5e93c9e41bfdd565c56372bb0", "patch": "@@ -1,4 +1,4 @@\n-//! These structs are a subset of the ones found in `syntax::json`.\n+//! These structs are a subset of the ones found in `rustc_errors::json`.\n //! They are only used for deserialization of JSON output provided by libtest.\n \n use crate::errors::{Error, ErrorKind};"}]}