{"sha": "02d84d89e029d58469f0ee9d6d7d15a894b5236f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZDg0ZDg5ZTAyOWQ1ODQ2OWYwZWU5ZDZkN2QxNWE4OTRiNTIzNmY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-12-19T18:08:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-12-19T18:22:07Z"}, "message": "libcore: add splitn to split a string N times.", "tree": {"sha": "8bf2e125f4922b7429d7b7a45c1b27d7f670b577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bf2e125f4922b7429d7b7a45c1b27d7f670b577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02d84d89e029d58469f0ee9d6d7d15a894b5236f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02d84d89e029d58469f0ee9d6d7d15a894b5236f", "html_url": "https://github.com/rust-lang/rust/commit/02d84d89e029d58469f0ee9d6d7d15a894b5236f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02d84d89e029d58469f0ee9d6d7d15a894b5236f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e54e74be4254ac374b5496888d14987dede0008", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e54e74be4254ac374b5496888d14987dede0008", "html_url": "https://github.com/rust-lang/rust/commit/8e54e74be4254ac374b5496888d14987dede0008"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "080c7ffc1cf53e772ac068d77c32c91756975575", "filename": "src/libcore/str.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/02d84d89e029d58469f0ee9d6d7d15a894b5236f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d84d89e029d58469f0ee9d6d7d15a894b5236f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=02d84d89e029d58469f0ee9d6d7d15a894b5236f", "patch": "@@ -6,11 +6,11 @@ String manipulation.\n \n export eq, lteq, hash, is_empty, is_not_empty, is_whitespace, byte_len,\n        byte_len_range, index,\n-       rindex, find, starts_with, ends_with, substr, slice, split, split_str,\n-       concat, connect, to_upper, replace, char_slice, trim_left, trim_right,\n-       trim, unshift_char, shift_char, pop_char, push_char, is_utf8,\n-       from_chars, to_chars, char_len, char_len_range, char_at, bytes,\n-       is_ascii, shift_byte, pop_byte,\n+       rindex, find, starts_with, ends_with, substr, slice, split, splitn,\n+       split_str, concat, connect, to_upper, replace, char_slice, trim_left,\n+       trim_right, trim, unshift_char, shift_char, pop_char, push_char,\n+       is_utf8, from_chars, to_chars, char_len, char_len_range, char_at,\n+       bytes, is_ascii, shift_byte, pop_byte,\n        unsafe_from_byte, unsafe_from_bytes, from_char, char_range_at,\n        str_from_cstr, sbuf, as_buf, push_byte, utf8_char_width, safe_slice,\n        contains, iter_chars, loop_chars, loop_chars_sub,\n@@ -744,6 +744,32 @@ fn split(s: str, sep: u8) -> [str] {\n     ret v;\n }\n \n+/*\n+Function: splitn\n+\n+Split a string at each occurance of a given separator up to count times.\n+\n+Returns:\n+\n+A vector containing all the strings between each occurance of the separator\n+*/\n+fn splitn(s: str, sep: u8, count: uint) -> [str] {\n+    let v = [];\n+    let accum = \"\";\n+    let n = count;\n+    let ends_with_sep: bool = false;\n+    for c in s {\n+        if n > 0u && c == sep {\n+            n -= 1u;\n+            v += [accum];\n+            accum = \"\";\n+            ends_with_sep = true;\n+        } else { accum += unsafe_from_byte(c); ends_with_sep = false; }\n+    }\n+    if byte_len(accum) != 0u || ends_with_sep { v += [accum]; }\n+    ret v;\n+}\n+\n /*\n Function: split_str\n "}, {"sha": "b70cafe739281875804172437e0368a389e50411", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/02d84d89e029d58469f0ee9d6d7d15a894b5236f/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02d84d89e029d58469f0ee9d6d7d15a894b5236f/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=02d84d89e029d58469f0ee9d6d7d15a894b5236f", "patch": "@@ -41,22 +41,37 @@ fn test_index_and_rindex() {\n \n #[test]\n fn test_split() {\n-    fn t(s: str, c: char, i: int, k: str) {\n-        log \"splitting: \" + s;\n-        log i;\n+    fn t(s: str, c: char, u: [str]) {\n+        log \"split: \" + s;\n         let v = str::split(s, c as u8);\n         log \"split to: \";\n-        for z: str in v { log z; }\n-        log \"comparing: \" + v[i] + \" vs. \" + k;\n-        assert (str::eq(v[i], k));\n+        log v;\n+        assert (vec::all2(v, u, { |a,b| a == b }));\n     }\n-    t(\"abc.hello.there\", '.', 0, \"abc\");\n-    t(\"abc.hello.there\", '.', 1, \"hello\");\n-    t(\"abc.hello.there\", '.', 2, \"there\");\n-    t(\".hello.there\", '.', 0, \"\");\n-    t(\".hello.there\", '.', 1, \"hello\");\n-    t(\"...hello.there.\", '.', 3, \"hello\");\n-    t(\"...hello.there.\", '.', 5, \"\");\n+    t(\"abc.hello.there\", '.', [\"abc\", \"hello\", \"there\"]);\n+    t(\".hello.there\", '.', [\"\", \"hello\", \"there\"]);\n+    t(\"...hello.there.\", '.', [\"\", \"\", \"\", \"hello\", \"there\", \"\"]);\n+}\n+\n+#[test]\n+fn test_splitn() {\n+    fn t(s: str, c: char, n: uint, u: [str]) {\n+        log \"splitn: \" + s;\n+        let v = str::splitn(s, c as u8, n);\n+        log \"split to: \";\n+        log v;\n+        log \"comparing vs. \";\n+        log u;\n+        assert (vec::all2(v, u, { |a,b| a == b }));\n+    }\n+    t(\"abc.hello.there\", '.', 0u, [\"abc.hello.there\"]);\n+    t(\"abc.hello.there\", '.', 1u, [\"abc\", \"hello.there\"]);\n+    t(\"abc.hello.there\", '.', 2u, [\"abc\", \"hello\", \"there\"]);\n+    t(\"abc.hello.there\", '.', 3u, [\"abc\", \"hello\", \"there\"]);\n+    t(\".hello.there\", '.', 0u, [\".hello.there\"]);\n+    t(\".hello.there\", '.', 1u, [\"\", \"hello.there\"]);\n+    t(\"...hello.there.\", '.', 3u, [\"\", \"\", \"\", \"hello.there.\"]);\n+    t(\"...hello.there.\", '.', 5u, [\"\", \"\", \"\", \"hello\", \"there\", \"\"]);\n }\n \n #[test]"}]}