{"sha": "4348e23b269739657d934b532ad061bfd6d92309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDhlMjNiMjY5NzM5NjU3ZDkzNGI1MzJhZDA2MWJmZDZkOTIzMDk=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2014-05-25T10:10:11Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2014-05-27T18:11:15Z"}, "message": "std: Remove String's to_owned", "tree": {"sha": "4dece24751feb7145444c52fd05a1c5f7ca2de9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dece24751feb7145444c52fd05a1c5f7ca2de9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4348e23b269739657d934b532ad061bfd6d92309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4348e23b269739657d934b532ad061bfd6d92309", "html_url": "https://github.com/rust-lang/rust/commit/4348e23b269739657d934b532ad061bfd6d92309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4348e23b269739657d934b532ad061bfd6d92309/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7fe4ffe3d8315dfe98bee6d040b5a0381daab91", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7fe4ffe3d8315dfe98bee6d040b5a0381daab91", "html_url": "https://github.com/rust-lang/rust/commit/c7fe4ffe3d8315dfe98bee6d040b5a0381daab91"}], "stats": {"total": 880, "additions": 442, "deletions": 438}, "files": [{"sha": "a82e574556a02b04244ecf90c40e8c3bbde7f466", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -314,10 +314,10 @@ pub fn is_test(config: &Config, testfile: &Path) -> bool {\n     // Pretty-printer does not work with .rc files yet\n     let valid_extensions =\n         match config.mode {\n-          Pretty => vec!(\".rs\".to_owned()),\n-          _ => vec!(\".rc\".to_owned(), \".rs\".to_owned())\n+          Pretty => vec!(\".rs\".to_string()),\n+          _ => vec!(\".rc\".to_string(), \".rs\".to_string())\n         };\n-    let invalid_prefixes = vec!(\".\".to_owned(), \"#\".to_owned(), \"~\".to_owned());\n+    let invalid_prefixes = vec!(\".\".to_string(), \"#\".to_string(), \"~\".to_string());\n     let name = testfile.filename_str().unwrap();\n \n     let mut valid = false;"}, {"sha": "f1dd783214a5b75271b5618be07dcdf2c3c2b94e", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -1034,7 +1034,7 @@ fn compose_and_run_compiler(\n \n     let aux_dir = aux_output_dir_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n-    let extra_link_args = vec!(\"-L\".to_owned(), aux_dir.as_str().unwrap().to_owned());\n+    let extra_link_args = vec!(\"-L\".to_string(), aux_dir.as_str().unwrap().to_owned());\n \n     for rel_ab in props.aux_builds.iter() {\n         let abs_ab = config.aux_base.join(rel_ab.as_slice());"}, {"sha": "2f002dcfb9a706a4a8128fc292c72345e41209a1", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -3538,7 +3538,7 @@ allocated on the heap (unlike closures). An example of creating and calling a\n procedure:\n \n ```rust\n-let string = \"Hello\".to_owned();\n+let string = \"Hello\".to_string();\n \n // Creates a new procedure, passing it to the `spawn` function.\n spawn(proc() {"}, {"sha": "0b5d499c533bc37d7bac5da57568bde590690000", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -988,10 +988,10 @@ mod tests {\n     #[test]\n     fn test_to_str() {\n         let zerolen = Bitv::new(0u, false);\n-        assert_eq!(zerolen.to_str(), \"\".to_owned());\n+        assert_eq!(zerolen.to_str(), \"\".to_string());\n \n         let eightbits = Bitv::new(8u, false);\n-        assert_eq!(eightbits.to_str(), \"00000000\".to_owned());\n+        assert_eq!(eightbits.to_str(), \"00000000\".to_string());\n     }\n \n     #[test]\n@@ -1014,7 +1014,7 @@ mod tests {\n         let mut b = bitv::Bitv::new(2, false);\n         b.set(0, true);\n         b.set(1, false);\n-        assert_eq!(b.to_str(), \"10\".to_owned());\n+        assert_eq!(b.to_str(), \"10\".to_string());\n     }\n \n     #[test]\n@@ -1343,7 +1343,7 @@ mod tests {\n     #[test]\n     fn test_from_bools() {\n         assert!(from_bools([true, false, true, true]).to_str() ==\n-            \"1011\".to_owned());\n+            \"1011\".to_string());\n     }\n \n     #[test]"}, {"sha": "184a59303f3a4c2e5fa7ee375f7c10afe81b9ac7", "filename": "src/libcollections/btree.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -778,81 +778,81 @@ mod test_btree {\n     //Tests the functionality of the insert methods (which are unfinished).\n     #[test]\n     fn insert_test_one() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n-        let is_insert = b.insert(2, \"xyz\".to_owned());\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n+        let is_insert = b.insert(2, \"xyz\".to_string());\n         //println!(\"{}\", is_insert.clone().to_str());\n         assert!(is_insert.root.is_leaf());\n     }\n \n     #[test]\n     fn insert_test_two() {\n-        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_owned());\n-        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_owned());\n-        let leaf_elt_3 = LeafElt::new(3, \"ccc\".to_owned());\n+        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_string());\n+        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_string());\n+        let leaf_elt_3 = LeafElt::new(3, \"ccc\".to_string());\n         let n = Node::new_leaf(vec!(leaf_elt_1, leaf_elt_2, leaf_elt_3));\n         let b = BTree::new_with_node_len(n, 3, 2);\n-        //println!(\"{}\", b.clone().insert(4, \"ddd\".to_owned()).to_str());\n-        assert!(b.insert(4, \"ddd\".to_owned()).root.is_leaf());\n+        //println!(\"{}\", b.clone().insert(4, \"ddd\".to_string()).to_str());\n+        assert!(b.insert(4, \"ddd\".to_string()).root.is_leaf());\n     }\n \n     #[test]\n     fn insert_test_three() {\n-        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_owned());\n-        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_owned());\n-        let leaf_elt_3 = LeafElt::new(3, \"ccc\".to_owned());\n-        let leaf_elt_4 = LeafElt::new(4, \"ddd\".to_owned());\n+        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_string());\n+        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_string());\n+        let leaf_elt_3 = LeafElt::new(3, \"ccc\".to_string());\n+        let leaf_elt_4 = LeafElt::new(4, \"ddd\".to_string());\n         let n = Node::new_leaf(vec!(leaf_elt_1, leaf_elt_2, leaf_elt_3, leaf_elt_4));\n         let b = BTree::new_with_node_len(n, 3, 2);\n-        //println!(\"{}\", b.clone().insert(5, \"eee\".to_owned()).to_str());\n-        assert!(!b.insert(5, \"eee\".to_owned()).root.is_leaf());\n+        //println!(\"{}\", b.clone().insert(5, \"eee\".to_string()).to_str());\n+        assert!(!b.insert(5, \"eee\".to_string()).root.is_leaf());\n     }\n \n     #[test]\n     fn insert_test_four() {\n-        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_owned());\n-        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_owned());\n-        let leaf_elt_3 = LeafElt::new(3, \"ccc\".to_owned());\n-        let leaf_elt_4 = LeafElt::new(4, \"ddd\".to_owned());\n+        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_string());\n+        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_string());\n+        let leaf_elt_3 = LeafElt::new(3, \"ccc\".to_string());\n+        let leaf_elt_4 = LeafElt::new(4, \"ddd\".to_string());\n         let n = Node::new_leaf(vec!(leaf_elt_1, leaf_elt_2, leaf_elt_3, leaf_elt_4));\n         let mut b = BTree::new_with_node_len(n, 3, 2);\n-        b = b.clone().insert(5, \"eee\".to_owned());\n-        b = b.clone().insert(6, \"fff\".to_owned());\n-        b = b.clone().insert(7, \"ggg\".to_owned());\n-        b = b.clone().insert(8, \"hhh\".to_owned());\n-        b = b.clone().insert(0, \"omg\".to_owned());\n+        b = b.clone().insert(5, \"eee\".to_string());\n+        b = b.clone().insert(6, \"fff\".to_string());\n+        b = b.clone().insert(7, \"ggg\".to_string());\n+        b = b.clone().insert(8, \"hhh\".to_string());\n+        b = b.clone().insert(0, \"omg\".to_string());\n         //println!(\"{}\", b.clone().to_str());\n         assert!(!b.root.is_leaf());\n     }\n \n     #[test]\n     fn bsearch_test_one() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n         assert_eq!(Some(1), b.root.bsearch_node(2));\n     }\n \n     #[test]\n     fn bsearch_test_two() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n         assert_eq!(Some(0), b.root.bsearch_node(0));\n     }\n \n     #[test]\n     fn bsearch_test_three() {\n-        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_owned());\n-        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_owned());\n-        let leaf_elt_3 = LeafElt::new(4, \"ccc\".to_owned());\n-        let leaf_elt_4 = LeafElt::new(5, \"ddd\".to_owned());\n+        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_string());\n+        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_string());\n+        let leaf_elt_3 = LeafElt::new(4, \"ccc\".to_string());\n+        let leaf_elt_4 = LeafElt::new(5, \"ddd\".to_string());\n         let n = Node::new_leaf(vec!(leaf_elt_1, leaf_elt_2, leaf_elt_3, leaf_elt_4));\n         let b = BTree::new_with_node_len(n, 3, 2);\n         assert_eq!(Some(2), b.root.bsearch_node(3));\n     }\n \n     #[test]\n     fn bsearch_test_four() {\n-        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_owned());\n-        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_owned());\n-        let leaf_elt_3 = LeafElt::new(4, \"ccc\".to_owned());\n-        let leaf_elt_4 = LeafElt::new(5, \"ddd\".to_owned());\n+        let leaf_elt_1 = LeafElt::new(1, \"aaa\".to_string());\n+        let leaf_elt_2 = LeafElt::new(2, \"bbb\".to_string());\n+        let leaf_elt_3 = LeafElt::new(4, \"ccc\".to_string());\n+        let leaf_elt_4 = LeafElt::new(5, \"ddd\".to_string());\n         let n = Node::new_leaf(vec!(leaf_elt_1, leaf_elt_2, leaf_elt_3, leaf_elt_4));\n         let b = BTree::new_with_node_len(n, 3, 2);\n         assert_eq!(Some(4), b.root.bsearch_node(800));\n@@ -861,48 +861,48 @@ mod test_btree {\n     //Tests the functionality of the get method.\n     #[test]\n     fn get_test() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n         let val = b.get(1);\n-        assert_eq!(val, Some(\"abc\".to_owned()));\n+        assert_eq!(val, Some(\"abc\".to_string()));\n     }\n \n     //Tests the BTree's clone() method.\n     #[test]\n     fn btree_clone_test() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n         let b2 = b.clone();\n         assert!(b.root == b2.root)\n     }\n \n     //Tests the BTree's cmp() method when one node is \"less than\" another.\n     #[test]\n     fn btree_cmp_test_less() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n-        let b2 = BTree::new(2, \"bcd\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n+        let b2 = BTree::new(2, \"bcd\".to_string(), 2);\n         assert!(&b.cmp(&b2) == &Less)\n     }\n \n     //Tests the BTree's cmp() method when two nodes are equal.\n     #[test]\n     fn btree_cmp_test_eq() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n-        let b2 = BTree::new(1, \"bcd\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n+        let b2 = BTree::new(1, \"bcd\".to_string(), 2);\n         assert!(&b.cmp(&b2) == &Equal)\n     }\n \n     //Tests the BTree's cmp() method when one node is \"greater than\" another.\n     #[test]\n     fn btree_cmp_test_greater() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n-        let b2 = BTree::new(2, \"bcd\".to_owned(), 2);\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n+        let b2 = BTree::new(2, \"bcd\".to_string(), 2);\n         assert!(&b2.cmp(&b) == &Greater)\n     }\n \n     //Tests the BTree's to_str() method.\n     #[test]\n     fn btree_tostr_test() {\n-        let b = BTree::new(1, \"abc\".to_owned(), 2);\n-        assert_eq!(b.to_str(), \"Key: 1, value: abc;\".to_owned())\n+        let b = BTree::new(1, \"abc\".to_string(), 2);\n+        assert_eq!(b.to_str(), \"Key: 1, value: abc;\".to_string())\n     }\n \n }"}, {"sha": "0fe1cb6ee72418d1499898590b3967b610a507a6", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -2026,9 +2026,9 @@ mod test_map {\n         let mut m = HashMap::new();\n \n         let (foo, bar, baz) = (1,2,3);\n-        m.insert(\"foo\".to_owned(), foo);\n-        m.insert(\"bar\".to_owned(), bar);\n-        m.insert(\"baz\".to_owned(), baz);\n+        m.insert(\"foo\".to_string(), foo);\n+        m.insert(\"bar\".to_string(), bar);\n+        m.insert(\"baz\".to_string(), baz);\n \n \n         assert_eq!(m.find_equiv(&(\"foo\")), Some(&foo));\n@@ -2313,8 +2313,8 @@ mod test_set {\n \n         let set_str = format!(\"{}\", set);\n \n-        assert!(set_str == \"{1, 2}\".to_owned() || set_str == \"{2, 1}\".to_owned());\n-        assert_eq!(format!(\"{}\", empty), \"{}\".to_owned());\n+        assert!(set_str == \"{1, 2}\".to_string() || set_str == \"{2, 1}\".to_string());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_string());\n     }\n }\n "}, {"sha": "f4a6cdaa712025cb9ba8bbd4d29b3bd354233ae6", "filename": "src/libcollections/lru_cache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flru_cache.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -319,15 +319,15 @@ mod tests {\n         cache.put(1, 10);\n         cache.put(2, 20);\n         cache.put(3, 30);\n-        assert_eq!(cache.to_str(), \"{3: 30, 2: 20, 1: 10}\".to_owned());\n+        assert_eq!(cache.to_str(), \"{3: 30, 2: 20, 1: 10}\".to_string());\n         cache.put(2, 22);\n-        assert_eq!(cache.to_str(), \"{2: 22, 3: 30, 1: 10}\".to_owned());\n+        assert_eq!(cache.to_str(), \"{2: 22, 3: 30, 1: 10}\".to_string());\n         cache.put(6, 60);\n-        assert_eq!(cache.to_str(), \"{6: 60, 2: 22, 3: 30}\".to_owned());\n+        assert_eq!(cache.to_str(), \"{6: 60, 2: 22, 3: 30}\".to_string());\n         cache.get(&3);\n-        assert_eq!(cache.to_str(), \"{3: 30, 6: 60, 2: 22}\".to_owned());\n+        assert_eq!(cache.to_str(), \"{3: 30, 6: 60, 2: 22}\".to_string());\n         cache.change_capacity(2);\n-        assert_eq!(cache.to_str(), \"{3: 30, 6: 60}\".to_owned());\n+        assert_eq!(cache.to_str(), \"{3: 30, 6: 60}\".to_string());\n     }\n \n     #[test]\n@@ -338,6 +338,6 @@ mod tests {\n         cache.clear();\n         assert!(cache.get(&1).is_none());\n         assert!(cache.get(&2).is_none());\n-        assert_eq!(cache.to_str(), \"{}\".to_owned());\n+        assert_eq!(cache.to_str(), \"{}\".to_string());\n     }\n }"}, {"sha": "731911185ff7e4e0b382cb2c5e0772977507e99f", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -140,7 +140,7 @@ pub struct RadixFmt<T, R>(T, R);\n ///\n /// ~~~\n /// use std::fmt::radix;\n-/// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_owned());\n+/// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ~~~\n pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n     RadixFmt(x, Radix::new(base))"}, {"sha": "6135f4dcca4211a2290afb2e5080a9d7e1a97f2e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -552,7 +552,7 @@ mod tests {\n \n     #[test]\n     fn test_replace() {\n-        let mut x = Some(\"test\".to_owned());\n+        let mut x = Some(\"test\".to_string());\n         let y = replace(&mut x, None);\n         assert!(x.is_none());\n         assert!(y.is_some());\n@@ -576,7 +576,7 @@ mod tests {\n         }\n \n         unsafe {\n-            assert!(Vec::from_slice([76u8]) == transmute(\"L\".to_owned()));\n+            assert!(Vec::from_slice([76u8]) == transmute(\"L\".to_string()));\n         }\n     }\n }"}, {"sha": "31313050165a6d022f7a5af436a35293274dde0a", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -925,15 +925,15 @@ pub trait MutableVector<'a, T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = ~[\"foo\".to_owned(), \"bar\".to_owned(), \"baz\".to_owned()];\n+    /// let mut v = ~[\"foo\".to_string(), \"bar\".to_string(), \"baz\".to_string()];\n     ///\n     /// unsafe {\n-    ///     // `\"baz\".to_owned()` is deallocated.\n-    ///     v.unsafe_set(2, \"qux\".to_owned());\n+    ///     // `\"baz\".to_string()` is deallocated.\n+    ///     v.unsafe_set(2, \"qux\".to_string());\n     ///\n     ///     // Out of bounds: could cause a crash, or overwriting\n     ///     // other data, or something else.\n-    ///     // v.unsafe_set(10, \"oops\".to_owned());\n+    ///     // v.unsafe_set(10, \"oops\".to_string());\n     /// }\n     /// ```\n     unsafe fn unsafe_set(self, index: uint, val: T);\n@@ -945,10 +945,10 @@ pub trait MutableVector<'a, T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let mut v = [\"foo\".to_owned(), \"bar\".to_owned()];\n+    /// let mut v = [\"foo\".to_string(), \"bar\".to_string()];\n     ///\n-    /// // memory leak! `\"bar\".to_owned()` is not deallocated.\n-    /// unsafe { v.init_elem(1, \"baz\".to_owned()); }\n+    /// // memory leak! `\"bar\".to_string()` is not deallocated.\n+    /// unsafe { v.init_elem(1, \"baz\".to_string()); }\n     /// ```\n     unsafe fn init_elem(self, i: uint, val: T);\n "}, {"sha": "0738462b8260eb70dd7e557a2ef54d7fe731d515", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -728,7 +728,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n         each_split_within(desc_normalized_whitespace.as_slice(),\n                           54,\n                           |substr| {\n-            desc_rows.push(substr.to_owned());\n+            desc_rows.push(substr.to_string());\n             true\n         });\n "}, {"sha": "177b90f2e1acd2c4f7b1976c29a46e7e17d24a39", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -1103,24 +1103,24 @@ mod tests {\n \n         assert_eq!(\n             test_wrapper(\"prog\", [\"aaa\", \"bbb\", \"ccc\"]),\n-            \"prog aaa bbb ccc\".to_owned()\n+            \"prog aaa bbb ccc\".to_string()\n         );\n \n         assert_eq!(\n             test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", [\"aaa\"]),\n-            \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\".to_owned()\n+            \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\".to_string()\n         );\n         assert_eq!(\n             test_wrapper(\"C:\\\\Program Files\\\\test\", [\"aa\\\"bb\"]),\n-            \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\".to_owned()\n+            \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\".to_string()\n         );\n         assert_eq!(\n             test_wrapper(\"echo\", [\"a b c\"]),\n-            \"echo \\\"a b c\\\"\".to_owned()\n+            \"echo \\\"a b c\\\"\".to_string()\n         );\n         assert_eq!(\n             test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", []),\n-            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_owned()\n+            \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_string()\n         );\n     }\n }"}, {"sha": "0b1efd3cfbb78bc3b2c28426ab6012c097a9c192", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -703,7 +703,7 @@ pub fn exported_name(path: PathElems, hash: &str, vers: &str) -> String {\n     let vers = if vers.len() > 0 && !char::is_XID_start(vers.char_at(0)) {\n         format!(\"v{}\", vers)\n     } else {\n-        vers.to_owned()\n+        vers.to_string()\n     };\n \n     mangle(path, Some(hash), Some(vers.as_slice()))"}, {"sha": "998a88bcea9e56c2dbd8182da7b9118fe5386881", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -399,10 +399,10 @@ fn monitor(f: proc():Send) {\n                 }\n \n                 let xs = [\n-                    \"the compiler hit an unexpected failure path. this is a bug.\".to_owned(),\n+                    \"the compiler hit an unexpected failure path. this is a bug.\".to_string(),\n                     format!(\"we would appreciate a bug report: {}\",\n                             BUG_REPORT_URL),\n-                    \"run with `RUST_BACKTRACE=1` for a backtrace\".to_owned(),\n+                    \"run with `RUST_BACKTRACE=1` for a backtrace\".to_string(),\n                 ];\n                 for note in xs.iter() {\n                     emitter.emit(None, note.as_slice(), diagnostic::Note)"}, {"sha": "9fd1fb674501d886db113737fb51df2a43add169", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -451,7 +451,7 @@ fn parse_fn_style(c: char) -> FnStyle {\n fn parse_abi_set(st: &mut PState) -> abi::Abi {\n     assert_eq!(next(st), '[');\n     scan(st, |c| c == ']', |bytes| {\n-        let abi_str = str::from_utf8(bytes).unwrap().to_owned();\n+        let abi_str = str::from_utf8(bytes).unwrap().to_string();\n         abi::lookup(abi_str.as_slice()).expect(abi_str)\n     })\n }"}, {"sha": "946d2b4a969b9138c72ce623f21064506b7953a8", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -5540,18 +5540,18 @@ impl<'a> Resolver<'a> {\n         for (&name, import_resolution) in import_resolutions.iter() {\n             let value_repr;\n             match import_resolution.target_for_namespace(ValueNS) {\n-                None => { value_repr = \"\".to_owned(); }\n+                None => { value_repr = \"\".to_string(); }\n                 Some(_) => {\n-                    value_repr = \" value:?\".to_owned();\n+                    value_repr = \" value:?\".to_string();\n                     // FIXME #4954\n                 }\n             }\n \n             let type_repr;\n             match import_resolution.target_for_namespace(TypeNS) {\n-                None => { type_repr = \"\".to_owned(); }\n+                None => { type_repr = \"\".to_string(); }\n                 Some(_) => {\n-                    type_repr = \" type:?\".to_owned();\n+                    type_repr = \" type:?\".to_string();\n                     // FIXME #4954\n                 }\n             }"}, {"sha": "ee0a802de3f17f257c5412e63c2bb0c0888cc2d7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -1106,9 +1106,9 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n \n     debug!(\"new_fn_ctxt(path={}, id={}, param_substs={})\",\n            if id == -1 {\n-               \"\".to_owned()\n+               \"\".to_string()\n            } else {\n-               ccx.tcx.map.path_to_str(id).to_owned()\n+               ccx.tcx.map.path_to_str(id).to_string()\n            },\n            id, param_substs.map(|s| s.repr(ccx.tcx())));\n "}, {"sha": "94f17172d58f0864fa2870d664b577029bdc410a", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -1146,28 +1146,28 @@ fn basic_type_metadata(cx: &CrateContext, t: ty::t) -> DIType {\n     debug!(\"basic_type_metadata: {:?}\", ty::get(t));\n \n     let (name, encoding) = match ty::get(t).sty {\n-        ty::ty_nil => (\"()\".to_owned(), DW_ATE_unsigned),\n-        ty::ty_bot => (\"!\".to_owned(), DW_ATE_unsigned),\n-        ty::ty_bool => (\"bool\".to_owned(), DW_ATE_boolean),\n-        ty::ty_char => (\"char\".to_owned(), DW_ATE_unsigned_char),\n+        ty::ty_nil => (\"()\".to_string(), DW_ATE_unsigned),\n+        ty::ty_bot => (\"!\".to_string(), DW_ATE_unsigned),\n+        ty::ty_bool => (\"bool\".to_string(), DW_ATE_boolean),\n+        ty::ty_char => (\"char\".to_string(), DW_ATE_unsigned_char),\n         ty::ty_int(int_ty) => match int_ty {\n-            ast::TyI => (\"int\".to_owned(), DW_ATE_signed),\n-            ast::TyI8 => (\"i8\".to_owned(), DW_ATE_signed),\n-            ast::TyI16 => (\"i16\".to_owned(), DW_ATE_signed),\n-            ast::TyI32 => (\"i32\".to_owned(), DW_ATE_signed),\n-            ast::TyI64 => (\"i64\".to_owned(), DW_ATE_signed)\n+            ast::TyI => (\"int\".to_string(), DW_ATE_signed),\n+            ast::TyI8 => (\"i8\".to_string(), DW_ATE_signed),\n+            ast::TyI16 => (\"i16\".to_string(), DW_ATE_signed),\n+            ast::TyI32 => (\"i32\".to_string(), DW_ATE_signed),\n+            ast::TyI64 => (\"i64\".to_string(), DW_ATE_signed)\n         },\n         ty::ty_uint(uint_ty) => match uint_ty {\n-            ast::TyU => (\"uint\".to_owned(), DW_ATE_unsigned),\n-            ast::TyU8 => (\"u8\".to_owned(), DW_ATE_unsigned),\n-            ast::TyU16 => (\"u16\".to_owned(), DW_ATE_unsigned),\n-            ast::TyU32 => (\"u32\".to_owned(), DW_ATE_unsigned),\n-            ast::TyU64 => (\"u64\".to_owned(), DW_ATE_unsigned)\n+            ast::TyU => (\"uint\".to_string(), DW_ATE_unsigned),\n+            ast::TyU8 => (\"u8\".to_string(), DW_ATE_unsigned),\n+            ast::TyU16 => (\"u16\".to_string(), DW_ATE_unsigned),\n+            ast::TyU32 => (\"u32\".to_string(), DW_ATE_unsigned),\n+            ast::TyU64 => (\"u64\".to_string(), DW_ATE_unsigned)\n         },\n         ty::ty_float(float_ty) => match float_ty {\n-            ast::TyF32 => (\"f32\".to_owned(), DW_ATE_float),\n-            ast::TyF64 => (\"f64\".to_owned(), DW_ATE_float),\n-            ast::TyF128 => (\"f128\".to_owned(), DW_ATE_float)\n+            ast::TyF32 => (\"f32\".to_string(), DW_ATE_float),\n+            ast::TyF64 => (\"f64\".to_string(), DW_ATE_float),\n+            ast::TyF128 => (\"f128\".to_string(), DW_ATE_float)\n         },\n         _ => cx.sess().bug(\"debuginfo::basic_type_metadata - t is invalid type\")\n     };"}, {"sha": "4b81463ed795f3dc9d9854b0d41491c6b0ae24eb", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n           ty::ty_rptr(_, ref mt) => {\n               match ty::get(mt.ty).sty {\n                   ty::ty_vec(ref mt, None) => {\n-                      let (name, extra) = (\"slice\".to_owned(), Vec::new());\n+                      let (name, extra) = (\"slice\".to_string(), Vec::new());\n                       let extra = extra.append(self.c_mt(mt).as_slice());\n                       self.visit(format!(\"evec_{}\", name).as_slice(),\n                                  extra.as_slice())"}, {"sha": "4421c84e86f3c93325f1a7925615650331f75f06", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -228,15 +228,15 @@ pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,\n                              content_expr: &ast::Expr)\n                              -> DatumBlock<'a, Expr> {\n     /*!\n-     * ~[...] and \"...\".to_owned() allocate boxes in the exchange heap and write\n+     * ~[...] and \"...\".to_string() allocate boxes in the exchange heap and write\n      * the array elements into them.\n      */\n \n     debug!(\"trans_uniq_vstore(vstore_expr={})\", bcx.expr_to_str(vstore_expr));\n     let fcx = bcx.fcx;\n     let ccx = fcx.ccx;\n \n-    // Handle \"\".to_owned().\n+    // Handle \"\".to_string().\n     match content_expr.node {\n         ast::ExprLit(lit) => {\n             match lit.node {"}, {"sha": "d287abfcda1f77cf6da35f7c30c1345faba8d50f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -2707,7 +2707,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                     let error = if vst == ast::ExprVstoreSlice {\n                         \"`&\\\"string\\\"` has been removed; use `\\\"string\\\"` instead\"\n                     } else {\n-                        \"`~\\\"string\\\"` has been removed; use `\\\"string\\\".to_owned()` instead\"\n+                        \"`~\\\"string\\\"` has been removed; use `\\\"string\\\".to_string()` instead\"\n                     };\n                     tcx.sess.span_err(expr.span, error);\n                     ty::mk_err()"}, {"sha": "1cbee01db284f46c10774890213f61c6679d52cd", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -808,7 +808,7 @@ impl<'a> Rebuilder<'a> {\n             // choice of lifetime name deterministic and thus easier to test.\n             let mut names = Vec::new();\n             for rn in region_names.iter() {\n-                let lt_name = token::get_name(*rn).get().to_owned();\n+                let lt_name = token::get_name(*rn).get().to_string();\n                 names.push(lt_name);\n             }\n             names.sort();"}, {"sha": "e4636e1c7c6d721d32ae97faf60527cecf790bc5", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -46,11 +46,11 @@ static EMPTY_SOURCE_STR: &str = \"/* Hello, world! */\";\n \n fn setup_env(test_name: &str, source_string: &str) -> Env {\n     let messages = @DVec();\n-    let matches = getopts(vec!(\"-Z\".to_owned(), \"verbose\".to_owned()), optgroups()).get();\n+    let matches = getopts(vec!(\"-Z\".to_string(), \"verbose\".to_string()), optgroups()).get();\n     let diag = diagnostic::collect(messages);\n-    let sessopts = build_session_options(\"rustc\".to_owned(), &matches, diag);\n+    let sessopts = build_session_options(\"rustc\".to_string(), &matches, diag);\n     let sess = build_session(sessopts, None, diag);\n-    let cfg = build_configuration(sess, \"whatever\".to_owned(), str_input(\"\".to_owned()));\n+    let cfg = build_configuration(sess, \"whatever\".to_string(), str_input(\"\".to_string()));\n     let dm = HashMap();\n     let amap = HashMap();\n     let freevars = HashMap();"}, {"sha": "625ee8f418caa930238f64ef8c5be1bfcc6ecce8", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -198,7 +198,7 @@ fn path(w: &mut fmt::Formatter, path: &clean::Path, print_all: bool,\n     let cache = cache_key.get().unwrap();\n     let abs_root = root(&**cache, loc.as_slice());\n     let rel_root = match path.segments.get(0).name.as_slice() {\n-        \"self\" => Some(\"./\".to_owned()),\n+        \"self\" => Some(\"./\".to_string()),\n         _ => None,\n     };\n "}, {"sha": "80caad84863727db90b172adc950908177226ff1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -197,7 +197,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n         // Extract the text provided\n         let s = if text.is_null() {\n-            \"\".to_owned()\n+            \"\".to_string()\n         } else {\n             unsafe {\n                 str::raw::from_buf_len((*text).data, (*text).size as uint)"}, {"sha": "ecbda89ee6101ed812ce582c0a01dc9b0becb48e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -378,7 +378,7 @@ pub fn run(mut krate: clean::Crate, dst: Path) -> io::IoResult<()> {\n \n         try!(write!(&mut w, r\"]\\};\"));\n \n-        str::from_utf8(w.unwrap().as_slice()).unwrap().to_owned()\n+        str::from_utf8(w.unwrap().as_slice()).unwrap().to_string()\n     };\n \n     // Write out the shared files. Note that these are shared among all rustdoc\n@@ -1057,7 +1057,7 @@ impl<'a> Item<'a> {\n         if ast_util::is_local(self.item.def_id) {\n             let mut path = Vec::new();\n             clean_srcpath(self.item.source.filename.as_bytes(), |component| {\n-                path.push(component.to_owned());\n+                path.push(component.to_string());\n             });\n             let href = if self.item.source.loline == self.item.source.hiline {\n                 format!(\"{}\", self.item.source.loline)\n@@ -1087,7 +1087,7 @@ impl<'a> Item<'a> {\n             let cache = cache_key.get().unwrap();\n             let path = cache.external_paths.get(&self.item.def_id);\n             let root = match *cache.extern_locations.get(&self.item.def_id.krate) {\n-                Remote(ref s) => s.to_strbuf(),\n+                Remote(ref s) => s.to_string(),\n                 Local => format!(\"{}/..\", self.cx.root_path),\n                 Unknown => return None,\n             };"}, {"sha": "ea58f1f3fc6470adf414bc0b84e5dfa932e9a760", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -346,14 +346,14 @@ mod unindent_tests {\n \n     #[test]\n     fn should_unindent() {\n-        let s = \"    line1\\n    line2\".to_owned();\n+        let s = \"    line1\\n    line2\".to_string();\n         let r = unindent(s.as_slice());\n         assert_eq!(r.as_slice(), \"line1\\nline2\");\n     }\n \n     #[test]\n     fn should_unindent_multiple_paragraphs() {\n-        let s = \"    line1\\n\\n    line2\".to_owned();\n+        let s = \"    line1\\n\\n    line2\".to_string();\n         let r = unindent(s.as_slice());\n         assert_eq!(r.as_slice(), \"line1\\n\\nline2\");\n     }\n@@ -362,7 +362,7 @@ mod unindent_tests {\n     fn should_leave_multiple_indent_levels() {\n         // Line 2 is indented another level beyond the\n         // base indentation and should be preserved\n-        let s = \"    line1\\n\\n        line2\".to_owned();\n+        let s = \"    line1\\n\\n        line2\".to_string();\n         let r = unindent(s.as_slice());\n         assert_eq!(r.as_slice(), \"line1\\n\\n    line2\");\n     }\n@@ -374,14 +374,14 @@ mod unindent_tests {\n         //\n         // #[doc = \"Start way over here\n         //          and continue here\"]\n-        let s = \"line1\\n    line2\".to_owned();\n+        let s = \"line1\\n    line2\".to_string();\n         let r = unindent(s.as_slice());\n         assert_eq!(r.as_slice(), \"line1\\nline2\");\n     }\n \n     #[test]\n     fn should_not_ignore_first_line_indent_in_a_single_line_para() {\n-        let s = \"line1\\n\\n    line2\".to_owned();\n+        let s = \"line1\\n\\n    line2\".to_string();\n         let r = unindent(s.as_slice());\n         assert_eq!(r.as_slice(), \"line1\\n\\n    line2\");\n     }"}, {"sha": "b24e1f238b7755093e5f22ffd2e0d21002156c1b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -179,8 +179,8 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n \n         // Add the new dylib search path var\n         let newpath = DynamicLibrary::create_path(path.as_slice());\n-        env.push((var.to_owned(),\n-                  str::from_utf8(newpath.as_slice()).unwrap().to_owned()));\n+        env.push((var.to_string(),\n+                  str::from_utf8(newpath.as_slice()).unwrap().to_string()));\n         env\n     };\n     match Command::new(exe).env(env.as_slice()).output() {\n@@ -265,7 +265,7 @@ impl Collector {\n         };\n         self.cnt += 1;\n         let libs = self.libs.clone();\n-        let cratename = self.cratename.to_owned();\n+        let cratename = self.cratename.to_string();\n         let loose_feature_gating = self.loose_feature_gating;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {"}, {"sha": "fea473f35b4a1ee3b49fbdcb180768c40d63cd5d", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -389,10 +389,10 @@ fn test_show() {\n \n #[test]\n fn test_to_str() {\n-    assert_eq!(parse(\"1.2.3\").unwrap().to_str(), \"1.2.3\".to_owned());\n-    assert_eq!(parse(\"1.2.3-alpha1\").unwrap().to_str(), \"1.2.3-alpha1\".to_owned());\n-    assert_eq!(parse(\"1.2.3+build.42\").unwrap().to_str(), \"1.2.3+build.42\".to_owned());\n-    assert_eq!(parse(\"1.2.3-alpha1+42\").unwrap().to_str(), \"1.2.3-alpha1+42\".to_owned());\n+    assert_eq!(parse(\"1.2.3\").unwrap().to_str(), \"1.2.3\".to_string());\n+    assert_eq!(parse(\"1.2.3-alpha1\").unwrap().to_str(), \"1.2.3-alpha1\".to_string());\n+    assert_eq!(parse(\"1.2.3+build.42\").unwrap().to_str(), \"1.2.3+build.42\".to_string());\n+    assert_eq!(parse(\"1.2.3-alpha1+42\").unwrap().to_str(), \"1.2.3-alpha1+42\".to_string());\n }\n \n #[test]"}, {"sha": "983d76a08442bdb9885ad0eb812c7c340e39d950", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -669,7 +669,7 @@ mod tests {\n     #[test]\n     fn test_clone_noleak() {\n         fn foo(f: |c: &CString|) {\n-            let s = \"test\".to_owned();\n+            let s = \"test\".to_string();\n             let c = s.to_c_str();\n             // give the closure a non-owned CString\n             let mut c_ = c.with_ref(|c| unsafe { CString::new(c, false) } );"}, {"sha": "174ea00d2862f1c776ab10a9c18155f66cef5f49", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -34,12 +34,12 @@ format arguments directly while performing minimal allocations.\n Some examples of the `format!` extension are:\n \n ```rust\n-format!(\"Hello\");                 // => \"Hello\".to_owned()\n-format!(\"Hello, {:s}!\", \"world\"); // => \"Hello, world!\".to_owned()\n-format!(\"The number is {:d}\", 1); // => \"The number is 1\".to_owned()\n-format!(\"{:?}\", ~[3, 4]);         // => \"~[3, 4]\".to_owned()\n-format!(\"{value}\", value=4);      // => \"4\".to_owned()\n-format!(\"{} {}\", 1, 2);           // => \"1 2\".to_owned()\n+format!(\"Hello\");                 // => \"Hello\".to_string()\n+format!(\"Hello, {:s}!\", \"world\"); // => \"Hello, world!\".to_string()\n+format!(\"The number is {:d}\", 1); // => \"The number is 1\".to_string()\n+format!(\"{:?}\", ~[3, 4]);         // => \"~[3, 4]\".to_string()\n+format!(\"{value}\", value=4);      // => \"4\".to_string()\n+format!(\"{} {}\", 1, 2);           // => \"1 2\".to_string()\n ```\n \n From these, you can see that the first argument is a format string. It is\n@@ -62,7 +62,7 @@ iterator over the argument. Each time a \"next argument\" specifier is seen, the\n iterator advances. This leads to behavior like this:\n \n ```rust\n-format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\".to_owned()\n+format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\".to_string()\n ```\n \n The internal iterator over the argument has not been advanced by the time the\n@@ -89,9 +89,9 @@ identifier '=' expression\n For example, the following `format!` expressions all use named argument:\n \n ```rust\n-format!(\"{argument}\", argument = \"test\");       // => \"test\".to_owned()\n-format!(\"{name} {}\", 1, name = 2);              // => \"2 1\".to_owned()\n-format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3); // => \"a 3 ()\".to_owned()\n+format!(\"{argument}\", argument = \"test\");       // => \"test\".to_string()\n+format!(\"{name} {}\", 1, name = 2);              // => \"2 1\".to_string()\n+format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3); // => \"a 3 ()\".to_string()\n ```\n \n It is illegal to put positional parameters (those without names) after arguments\n@@ -330,7 +330,7 @@ to reference the string value of the argument which was selected upon. As an\n example:\n \n ```rust\n-format!(\"{0, select, other{#}}\", \"hello\"); // => \"hello\".to_owned()\n+format!(\"{0, select, other{#}}\", \"hello\"); // => \"hello\".to_string()\n ```\n \n This example is the equivalent of `{0:s}` essentially.\n@@ -543,7 +543,7 @@ pub trait Poly {\n /// use std::fmt;\n ///\n /// let s = format_args!(fmt::format, \"Hello, {}!\", \"world\");\n-/// assert_eq!(s, \"Hello, world!\".to_owned());\n+/// assert_eq!(s, \"Hello, world!\".to_string());\n /// ```\n pub fn format(args: &Arguments) -> string::String{\n     let mut output = io::MemWriter::new();"}, {"sha": "8e95263d48e095adf6b5fe6e6333a58d44911dd0", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -27,8 +27,8 @@\n  *     phone: u64,\n  * }\n  *\n- * let person1 = Person { id: 5, name: \"Janet\".to_owned(), phone: 555_666_7777 };\n- * let person2 = Person { id: 5, name: \"Bob\".to_owned(), phone: 555_666_7777 };\n+ * let person1 = Person { id: 5, name: \"Janet\".to_string(), phone: 555_666_7777 };\n+ * let person2 = Person { id: 5, name: \"Bob\".to_string(), phone: 555_666_7777 };\n  *\n  * assert!(hash::hash(&person1) != hash::hash(&person2));\n  * ```\n@@ -54,8 +54,8 @@\n  *     }\n  * }\n  *\n- * let person1 = Person { id: 5, name: \"Janet\".to_owned(), phone: 555_666_7777 };\n- * let person2 = Person { id: 5, name: \"Bob\".to_owned(), phone: 555_666_7777 };\n+ * let person1 = Person { id: 5, name: \"Janet\".to_string(), phone: 555_666_7777 };\n+ * let person2 = Person { id: 5, name: \"Bob\".to_string(), phone: 555_666_7777 };\n  *\n  * assert!(hash::hash(&person1) == hash::hash(&person2));\n  * ```"}, {"sha": "c16c77373575b01e6f40c9e2c0b48e4ba78f1583", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -1315,7 +1315,7 @@ pub trait Buffer: Reader {\n     /// use std::io;\n     ///\n     /// let mut reader = io::stdin();\n-    /// let input = reader.read_line().ok().unwrap_or(\"nothing\".to_owned());\n+    /// let input = reader.read_line().ok().unwrap_or(\"nothing\".to_string());\n     /// ```\n     ///\n     /// # Error"}, {"sha": "ca75f33f0fe327530c92b3fcdaf491d4069e5fda", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -396,7 +396,7 @@ pub trait OwnedVector<T> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// let v = ~[\"a\".to_owned(), \"b\".to_owned()];\n+    /// let v = ~[\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.move_iter() {\n     ///   // s has type ~str, not &~str\n     ///   println!(\"{}\", s);\n@@ -1186,7 +1186,7 @@ mod tests {\n             assert_eq!(it.next(), None);\n         }\n         {\n-            let v = [\"Hello\".to_owned()];\n+            let v = [\"Hello\".to_string()];\n             let mut it = v.permutations();\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);"}, {"sha": "988c029c9b9321ae2f99814f7d0d5fd7a81e049a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 84, "deletions": 81, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -330,7 +330,7 @@ Section: Misc\n /// // \ud834\udd1emusic\n /// let mut v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n ///              0x0073, 0x0069, 0x0063];\n-/// assert_eq!(str::from_utf16(v), Some(\"\ud834\udd1emusic\".to_owned()));\n+/// assert_eq!(str::from_utf16(v), Some(\"\ud834\udd1emusic\".to_string()));\n ///\n /// // \ud834\udd1emu<invalid>ic\n /// v[4] = 0xD800;\n@@ -360,7 +360,7 @@ pub fn from_utf16(v: &[u16]) -> Option<String> {\n ///          0xD834];\n ///\n /// assert_eq!(str::from_utf16_lossy(v),\n-///            \"\ud834\udd1emus\\uFFFDic\\uFFFD\".to_owned());\n+///            \"\ud834\udd1emus\\uFFFDic\\uFFFD\".to_string());\n /// ```\n pub fn from_utf16_lossy(v: &[u16]) -> String {\n     utf16_items(v).map(|c| c.to_char_lossy()).collect()\n@@ -609,7 +609,7 @@ impl<'a> StrAllocating for MaybeOwned<'a> {\n     #[inline]\n     fn into_owned(self) -> String {\n         match self {\n-            Slice(s) => s.to_owned(),\n+            Slice(s) => s.to_string(),\n             Owned(s) => s\n         }\n     }\n@@ -625,7 +625,7 @@ impl<'a> Clone for MaybeOwned<'a> {\n     fn clone(&self) -> MaybeOwned<'a> {\n         match *self {\n             Slice(s) => Slice(s),\n-            Owned(ref s) => Owned(s.to_owned())\n+            Owned(ref s) => Owned(s.to_string())\n         }\n     }\n }\n@@ -710,7 +710,7 @@ pub mod raw {\n             let a = ~[65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n             let b = a.as_ptr();\n             let c = from_buf_len(b, 3u);\n-            assert_eq!(c, \"AAA\".to_owned());\n+            assert_eq!(c, \"AAA\".to_string());\n         }\n     }\n }\n@@ -771,11 +771,11 @@ pub trait StrAllocating: Str {\n     ///\n     /// ```rust\n     /// let s = \"Do you know the muffin man,\n-    /// The muffin man, the muffin man, ...\".to_owned();\n+    /// The muffin man, the muffin man, ...\".to_string();\n     ///\n     /// assert_eq!(s.replace(\"muffin man\", \"little lamb\"),\n     ///            \"Do you know the little lamb,\n-    /// The little lamb, the little lamb, ...\".to_owned());\n+    /// The little lamb, the little lamb, ...\".to_string());\n     ///\n     /// // not found, so no change.\n     /// assert_eq!(s.replace(\"cookie monster\", \"little lamb\"), s);\n@@ -793,7 +793,8 @@ pub trait StrAllocating: Str {\n         result\n     }\n \n-    /// Copy a slice into a new `String`.\n+    #[allow(missing_doc)]\n+    #[deprecated = \"obsolete, use `to_string`\"]\n     #[inline]\n     fn to_owned(&self) -> String {\n         use slice::Vector;\n@@ -888,7 +889,7 @@ pub trait StrAllocating: Str {\n impl<'a> StrAllocating for &'a str {\n     #[inline]\n     fn into_owned(self) -> String {\n-        self.to_owned()\n+        self.to_string()\n     }\n }\n \n@@ -981,17 +982,17 @@ mod tests {\n \n     #[test]\n     fn test_collect() {\n-        let empty = \"\".to_owned();\n+        let empty = \"\".to_string();\n         let s: String = empty.as_slice().chars().collect();\n         assert_eq!(empty, s);\n-        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\".to_owned();\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\".to_string();\n         let s: String = data.as_slice().chars().collect();\n         assert_eq!(data, s);\n     }\n \n     #[test]\n     fn test_into_bytes() {\n-        let data = \"asdf\".to_owned();\n+        let data = \"asdf\".to_string();\n         let buf = data.into_bytes();\n         assert_eq!(bytes!(\"asdf\"), buf.as_slice());\n     }\n@@ -1045,24 +1046,24 @@ mod tests {\n         fn t(v: &[String], s: &str) {\n             assert_eq!(v.concat(), s.to_str().into_owned());\n         }\n-        t([\"you\".to_owned(), \"know\".to_owned(), \"I'm\".to_owned(),\n-          \"no\".to_owned(), \"good\".to_owned()], \"youknowI'mnogood\");\n+        t([\"you\".to_string(), \"know\".to_string(), \"I'm\".to_string(),\n+          \"no\".to_string(), \"good\".to_string()], \"youknowI'mnogood\");\n         let v: &[String] = [];\n         t(v, \"\");\n-        t([\"hi\".to_owned()], \"hi\");\n+        t([\"hi\".to_string()], \"hi\");\n     }\n \n     #[test]\n     fn test_connect() {\n         fn t(v: &[String], sep: &str, s: &str) {\n             assert_eq!(v.connect(sep), s.to_str().into_owned());\n         }\n-        t([\"you\".to_owned(), \"know\".to_owned(), \"I'm\".to_owned(),\n-           \"no\".to_owned(), \"good\".to_owned()],\n+        t([\"you\".to_string(), \"know\".to_string(), \"I'm\".to_string(),\n+           \"no\".to_string(), \"good\".to_string()],\n           \" \", \"you know I'm no good\");\n         let v: &[String] = [];\n         t(v, \" \", \"\");\n-        t([\"hi\".to_owned()], \" \", \"hi\");\n+        t([\"hi\".to_string()], \" \", \"hi\");\n     }\n \n     #[test]\n@@ -1089,11 +1090,11 @@ mod tests {\n \n     #[test]\n     fn test_repeat() {\n-        assert_eq!(\"x\".repeat(4), \"xxxx\".to_owned());\n-        assert_eq!(\"hi\".repeat(4), \"hihihihi\".to_owned());\n-        assert_eq!(\"\u0e44\u0e17\u534e\".repeat(3), \"\u0e44\u0e17\u534e\u0e44\u0e17\u534e\u0e44\u0e17\u534e\".to_owned());\n-        assert_eq!(\"\".repeat(4), \"\".to_owned());\n-        assert_eq!(\"hi\".repeat(0), \"\".to_owned());\n+        assert_eq!(\"x\".repeat(4), \"xxxx\".to_string());\n+        assert_eq!(\"hi\".repeat(4), \"hihihihi\".to_string());\n+        assert_eq!(\"\u0e44\u0e17\u534e\".repeat(3), \"\u0e44\u0e17\u534e\u0e44\u0e17\u534e\u0e44\u0e17\u534e\".to_string());\n+        assert_eq!(\"\".repeat(4), \"\".to_string());\n+        assert_eq!(\"hi\".repeat(0), \"\".to_string());\n     }\n \n     #[test]\n@@ -1157,13 +1158,13 @@ mod tests {\n     #[test]\n     fn test_replace() {\n         let a = \"a\";\n-        assert_eq!(\"\".replace(a, \"b\"), \"\".to_owned());\n-        assert_eq!(\"a\".replace(a, \"b\"), \"b\".to_owned());\n-        assert_eq!(\"ab\".replace(a, \"b\"), \"bb\".to_owned());\n+        assert_eq!(\"\".replace(a, \"b\"), \"\".to_string());\n+        assert_eq!(\"a\".replace(a, \"b\"), \"b\".to_string());\n+        assert_eq!(\"ab\".replace(a, \"b\"), \"bb\".to_string());\n         let test = \"test\";\n         assert!(\" test test \".replace(test, \"toast\") ==\n-            \" toast toast \".to_owned());\n-        assert_eq!(\" test test \".replace(test, \"\"), \"   \".to_owned());\n+            \" toast toast \".to_string());\n+        assert_eq!(\" test test \".replace(test, \"\"), \"   \".to_string());\n     }\n \n     #[test]\n@@ -1466,7 +1467,7 @@ mod tests {\n             let a = box [65, 65, 65, 65, 65, 65, 65, 0];\n             let b = a.as_ptr();\n             let c = raw::from_c_str(b);\n-            assert_eq!(c, \"AAAAAAA\".to_owned());\n+            assert_eq!(c, \"AAAAAAA\".to_string());\n         }\n     }\n \n@@ -1488,7 +1489,7 @@ mod tests {\n     fn test_as_bytes_fail() {\n         // Don't double free. (I'm not sure if this exercises the\n         // original problem code path anymore.)\n-        let s = \"\".to_owned();\n+        let s = \"\".to_string();\n         let _bytes = s.as_bytes();\n         fail!();\n     }\n@@ -1577,21 +1578,21 @@ mod tests {\n     #[test]\n     fn test_utf16() {\n         let pairs =\n-            [(\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\".to_owned(),\n+            [(\"\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\\n\".to_string(),\n               vec![0xd800_u16, 0xdf45_u16, 0xd800_u16, 0xdf3f_u16,\n                 0xd800_u16, 0xdf3b_u16, 0xd800_u16, 0xdf46_u16,\n                 0xd800_u16, 0xdf39_u16, 0xd800_u16, 0xdf3b_u16,\n                 0xd800_u16, 0xdf30_u16, 0x000a_u16]),\n \n-             (\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\".to_owned(),\n+             (\"\ud801\udc12\ud801\udc49\ud801\udc2e\ud801\udc40\ud801\udc32\ud801\udc4b \ud801\udc0f\ud801\udc32\ud801\udc4d\\n\".to_string(),\n               vec![0xd801_u16, 0xdc12_u16, 0xd801_u16,\n                 0xdc49_u16, 0xd801_u16, 0xdc2e_u16, 0xd801_u16,\n                 0xdc40_u16, 0xd801_u16, 0xdc32_u16, 0xd801_u16,\n                 0xdc4b_u16, 0x0020_u16, 0xd801_u16, 0xdc0f_u16,\n                 0xd801_u16, 0xdc32_u16, 0xd801_u16, 0xdc4d_u16,\n                 0x000a_u16]),\n \n-             (\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\".to_owned(),\n+             (\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u00b7\ud800\udf0c\ud800\udf04\ud800\udf15\ud800\udf04\ud800\udf0b\ud800\udf09\ud800\udf11\\n\".to_string(),\n               vec![0xd800_u16, 0xdf00_u16, 0xd800_u16, 0xdf16_u16,\n                 0xd800_u16, 0xdf0b_u16, 0xd800_u16, 0xdf04_u16,\n                 0xd800_u16, 0xdf11_u16, 0xd800_u16, 0xdf09_u16,\n@@ -1600,7 +1601,7 @@ mod tests {\n                 0xdf04_u16, 0xd800_u16, 0xdf0b_u16, 0xd800_u16,\n                 0xdf09_u16, 0xd800_u16, 0xdf11_u16, 0x000a_u16 ]),\n \n-             (\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\".to_owned(),\n+             (\"\ud801\udc8b\ud801\udc98\ud801\udc88\ud801\udc91\ud801\udc9b\ud801\udc92 \ud801\udc95\ud801\udc93 \ud801\udc88\ud801\udc9a\ud801\udc8d \ud801\udc8f\ud801\udc9c\ud801\udc92\ud801\udc96\ud801\udc86 \ud801\udc95\ud801\udc86\\n\".to_string(),\n               vec![0xd801_u16, 0xdc8b_u16, 0xd801_u16, 0xdc98_u16,\n                 0xd801_u16, 0xdc88_u16, 0xd801_u16, 0xdc91_u16,\n                 0xd801_u16, 0xdc9b_u16, 0xd801_u16, 0xdc92_u16,\n@@ -1613,7 +1614,7 @@ mod tests {\n                 0xd801_u16, 0xdc95_u16, 0xd801_u16, 0xdc86_u16,\n                 0x000a_u16 ]),\n              // Issue #12318, even-numbered non-BMP planes\n-             (\"\\U00020000\".to_owned(),\n+             (\"\\U00020000\".to_string(),\n               vec![0xD840, 0xDC00])];\n \n         for p in pairs.iter() {\n@@ -1648,15 +1649,16 @@ mod tests {\n     fn test_utf16_lossy() {\n         // completely positive cases tested above.\n         // lead + eof\n-        assert_eq!(from_utf16_lossy([0xD800]), \"\\uFFFD\".to_owned());\n+        assert_eq!(from_utf16_lossy([0xD800]), \"\\uFFFD\".to_string());\n         // lead + lead\n-        assert_eq!(from_utf16_lossy([0xD800, 0xD800]), \"\\uFFFD\\uFFFD\".to_owned());\n+        assert_eq!(from_utf16_lossy([0xD800, 0xD800]), \"\\uFFFD\\uFFFD\".to_string());\n \n         // isolated trail\n-        assert_eq!(from_utf16_lossy([0x0061, 0xDC00]), \"a\\uFFFD\".to_owned());\n+        assert_eq!(from_utf16_lossy([0x0061, 0xDC00]), \"a\\uFFFD\".to_string());\n \n         // general\n-        assert_eq!(from_utf16_lossy([0xD800, 0xd801, 0xdc8b, 0xD800]), \"\\uFFFD\ud801\udc8b\\uFFFD\".to_owned());\n+        assert_eq!(from_utf16_lossy([0xD800, 0xd801, 0xdc8b, 0xD800]),\n+                   \"\\uFFFD\ud801\udc8b\\uFFFD\".to_string());\n     }\n \n     #[test]\n@@ -1701,27 +1703,27 @@ mod tests {\n \n     #[test]\n     fn test_escape_unicode() {\n-        assert_eq!(\"abc\".escape_unicode(), \"\\\\x61\\\\x62\\\\x63\".to_owned());\n-        assert_eq!(\"a c\".escape_unicode(), \"\\\\x61\\\\x20\\\\x63\".to_owned());\n-        assert_eq!(\"\\r\\n\\t\".escape_unicode(), \"\\\\x0d\\\\x0a\\\\x09\".to_owned());\n-        assert_eq!(\"'\\\"\\\\\".escape_unicode(), \"\\\\x27\\\\x22\\\\x5c\".to_owned());\n-        assert_eq!(\"\\x00\\x01\\xfe\\xff\".escape_unicode(), \"\\\\x00\\\\x01\\\\xfe\\\\xff\".to_owned());\n-        assert_eq!(\"\\u0100\\uffff\".escape_unicode(), \"\\\\u0100\\\\uffff\".to_owned());\n-        assert_eq!(\"\\U00010000\\U0010ffff\".escape_unicode(), \"\\\\U00010000\\\\U0010ffff\".to_owned());\n-        assert_eq!(\"ab\\ufb00\".escape_unicode(), \"\\\\x61\\\\x62\\\\ufb00\".to_owned());\n-        assert_eq!(\"\\U0001d4ea\\r\".escape_unicode(), \"\\\\U0001d4ea\\\\x0d\".to_owned());\n+        assert_eq!(\"abc\".escape_unicode(), \"\\\\x61\\\\x62\\\\x63\".to_string());\n+        assert_eq!(\"a c\".escape_unicode(), \"\\\\x61\\\\x20\\\\x63\".to_string());\n+        assert_eq!(\"\\r\\n\\t\".escape_unicode(), \"\\\\x0d\\\\x0a\\\\x09\".to_string());\n+        assert_eq!(\"'\\\"\\\\\".escape_unicode(), \"\\\\x27\\\\x22\\\\x5c\".to_string());\n+        assert_eq!(\"\\x00\\x01\\xfe\\xff\".escape_unicode(), \"\\\\x00\\\\x01\\\\xfe\\\\xff\".to_string());\n+        assert_eq!(\"\\u0100\\uffff\".escape_unicode(), \"\\\\u0100\\\\uffff\".to_string());\n+        assert_eq!(\"\\U00010000\\U0010ffff\".escape_unicode(), \"\\\\U00010000\\\\U0010ffff\".to_string());\n+        assert_eq!(\"ab\\ufb00\".escape_unicode(), \"\\\\x61\\\\x62\\\\ufb00\".to_string());\n+        assert_eq!(\"\\U0001d4ea\\r\".escape_unicode(), \"\\\\U0001d4ea\\\\x0d\".to_string());\n     }\n \n     #[test]\n     fn test_escape_default() {\n-        assert_eq!(\"abc\".escape_default(), \"abc\".to_owned());\n-        assert_eq!(\"a c\".escape_default(), \"a c\".to_owned());\n-        assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\".to_owned());\n-        assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\".to_owned());\n-        assert_eq!(\"\\u0100\\uffff\".escape_default(), \"\\\\u0100\\\\uffff\".to_owned());\n-        assert_eq!(\"\\U00010000\\U0010ffff\".escape_default(), \"\\\\U00010000\\\\U0010ffff\".to_owned());\n-        assert_eq!(\"ab\\ufb00\".escape_default(), \"ab\\\\ufb00\".to_owned());\n-        assert_eq!(\"\\U0001d4ea\\r\".escape_default(), \"\\\\U0001d4ea\\\\r\".to_owned());\n+        assert_eq!(\"abc\".escape_default(), \"abc\".to_string());\n+        assert_eq!(\"a c\".escape_default(), \"a c\".to_string());\n+        assert_eq!(\"\\r\\n\\t\".escape_default(), \"\\\\r\\\\n\\\\t\".to_string());\n+        assert_eq!(\"'\\\"\\\\\".escape_default(), \"\\\\'\\\\\\\"\\\\\\\\\".to_string());\n+        assert_eq!(\"\\u0100\\uffff\".escape_default(), \"\\\\u0100\\\\uffff\".to_string());\n+        assert_eq!(\"\\U00010000\\U0010ffff\".escape_default(), \"\\\\U00010000\\\\U0010ffff\".to_string());\n+        assert_eq!(\"ab\\ufb00\".escape_default(), \"ab\\\\ufb00\".to_string());\n+        assert_eq!(\"\\U0001d4ea\\r\".escape_default(), \"\\\\U0001d4ea\\\\r\".to_string());\n     }\n \n     #[test]\n@@ -2043,9 +2045,10 @@ mod tests {\n             v.iter().map(|x| x.len()).sum()\n         }\n \n-        let s = \"01234\".to_owned();\n+        let s = \"01234\".to_string();\n         assert_eq!(5, sum_len([\"012\", \"\", \"34\"]));\n-        assert_eq!(5, sum_len([\"01\".to_owned(), \"2\".to_owned(), \"34\".to_owned(), \"\".to_owned()]));\n+        assert_eq!(5, sum_len([\"01\".to_string(), \"2\".to_string(),\n+                               \"34\".to_string(), \"\".to_string()]));\n         assert_eq!(5, sum_len([s.as_slice()]));\n     }\n \n@@ -2064,10 +2067,10 @@ mod tests {\n     #[test]\n     fn test_str_from_utf8_owned() {\n         let xs = Vec::from_slice(bytes!(\"hello\"));\n-        assert_eq!(from_utf8_owned(xs), Ok(\"hello\".to_owned()));\n+        assert_eq!(from_utf8_owned(xs), Ok(\"hello\".to_string()));\n \n         let xs = Vec::from_slice(bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n-        assert_eq!(from_utf8_owned(xs), Ok(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_owned()));\n+        assert_eq!(from_utf8_owned(xs), Ok(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_string()));\n \n         let xs = Vec::from_slice(bytes!(\"hello\", 0xff));\n         assert_eq!(from_utf8_owned(xs),\n@@ -2083,28 +2086,28 @@ mod tests {\n         assert_eq!(from_utf8_lossy(xs), Slice(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\"));\n \n         let xs = bytes!(\"Hello\", 0xC2, \" There\", 0xFF, \" Goodbye\");\n-        assert_eq!(from_utf8_lossy(xs), Owned(\"Hello\\uFFFD There\\uFFFD Goodbye\".to_owned()));\n+        assert_eq!(from_utf8_lossy(xs), Owned(\"Hello\\uFFFD There\\uFFFD Goodbye\".to_string()));\n \n         let xs = bytes!(\"Hello\", 0xC0, 0x80, \" There\", 0xE6, 0x83, \" Goodbye\");\n-        assert_eq!(from_utf8_lossy(xs), Owned(\"Hello\\uFFFD\\uFFFD There\\uFFFD Goodbye\".to_owned()));\n+        assert_eq!(from_utf8_lossy(xs), Owned(\"Hello\\uFFFD\\uFFFD There\\uFFFD Goodbye\".to_string()));\n \n         let xs = bytes!(0xF5, \"foo\", 0xF5, 0x80, \"bar\");\n-        assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFDfoo\\uFFFD\\uFFFDbar\".to_owned()));\n+        assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFDfoo\\uFFFD\\uFFFDbar\".to_string()));\n \n         let xs = bytes!(0xF1, \"foo\", 0xF1, 0x80, \"bar\", 0xF1, 0x80, 0x80, \"baz\");\n-        assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFDfoo\\uFFFDbar\\uFFFDbaz\".to_owned()));\n+        assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFDfoo\\uFFFDbar\\uFFFDbaz\".to_string()));\n \n         let xs = bytes!(0xF4, \"foo\", 0xF4, 0x80, \"bar\", 0xF4, 0xBF, \"baz\");\n-        assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFDfoo\\uFFFDbar\\uFFFD\\uFFFDbaz\".to_owned()));\n+        assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFDfoo\\uFFFDbar\\uFFFD\\uFFFDbaz\".to_string()));\n \n         let xs = bytes!(0xF0, 0x80, 0x80, 0x80, \"foo\", 0xF0, 0x90, 0x80, 0x80, \"bar\");\n         assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\\n-                                               foo\\U00010000bar\".to_owned()));\n+                                               foo\\U00010000bar\".to_string()));\n \n         // surrogates\n         let xs = bytes!(0xED, 0xA0, 0x80, \"foo\", 0xED, 0xBF, 0xBF, \"bar\");\n         assert_eq!(from_utf8_lossy(xs), Owned(\"\\uFFFD\\uFFFD\\uFFFDfoo\\\n-                                               \\uFFFD\\uFFFD\\uFFFDbar\".to_owned()));\n+                                               \\uFFFD\\uFFFD\\uFFFDbar\".to_string()));\n     }\n \n     #[test]\n@@ -2118,18 +2121,18 @@ mod tests {\n         let s = Slice(\"abcde\");\n         assert_eq!(s.len(), 5);\n         assert_eq!(s.as_slice(), \"abcde\");\n-        assert_eq!(s.to_str(), \"abcde\".to_strbuf());\n-        assert_eq!(format_strbuf!(\"{}\", s), \"abcde\".to_strbuf());\n-        assert!(s.lt(&Owned(\"bcdef\".to_owned())));\n+        assert_eq!(s.to_str(), \"abcde\".to_string());\n+        assert_eq!(format_strbuf!(\"{}\", s), \"abcde\".to_string());\n+        assert!(s.lt(&Owned(\"bcdef\".to_string())));\n         assert_eq!(Slice(\"\"), Default::default());\n \n-        let o = Owned(\"abcde\".to_owned());\n+        let o = Owned(\"abcde\".to_string());\n         assert_eq!(o.len(), 5);\n         assert_eq!(o.as_slice(), \"abcde\");\n         assert_eq!(o.to_str(), \"abcde\".to_strbuf());\n         assert_eq!(format_strbuf!(\"{}\", o), \"abcde\".to_strbuf());\n         assert!(o.lt(&Slice(\"bcdef\")));\n-        assert_eq!(Owned(\"\".to_owned()), Default::default());\n+        assert_eq!(Owned(\"\".to_string()), Default::default());\n \n         assert!(s.cmp(&o) == Equal);\n         assert!(s.equiv(&o));\n@@ -2144,31 +2147,31 @@ mod tests {\n         assert!(s.is_slice());\n         assert!(!s.is_owned());\n \n-        let o = Owned(\"abcde\".to_owned());\n+        let o = Owned(\"abcde\".to_string());\n         assert!(!o.is_slice());\n         assert!(o.is_owned());\n     }\n \n     #[test]\n     fn test_maybe_owned_clone() {\n-        assert_eq!(Owned(\"abcde\".to_owned()), Slice(\"abcde\").clone());\n-        assert_eq!(Owned(\"abcde\".to_owned()), Owned(\"abcde\".to_owned()).clone());\n+        assert_eq!(Owned(\"abcde\".to_string()), Slice(\"abcde\").clone());\n+        assert_eq!(Owned(\"abcde\".to_string()), Owned(\"abcde\".to_string()).clone());\n         assert_eq!(Slice(\"abcde\"), Slice(\"abcde\").clone());\n-        assert_eq!(Slice(\"abcde\"), Owned(\"abcde\".to_owned()).clone());\n+        assert_eq!(Slice(\"abcde\"), Owned(\"abcde\".to_string()).clone());\n     }\n \n     #[test]\n     fn test_maybe_owned_into_owned() {\n-        assert_eq!(Slice(\"abcde\").into_owned(), \"abcde\".to_owned());\n-        assert_eq!(Owned(\"abcde\".to_owned()).into_owned(), \"abcde\".to_owned());\n+        assert_eq!(Slice(\"abcde\").into_owned(), \"abcde\".to_string());\n+        assert_eq!(Owned(\"abcde\".to_string()).into_owned(), \"abcde\".to_string());\n     }\n \n     #[test]\n     fn test_into_maybe_owned() {\n         assert_eq!(\"abcde\".into_maybe_owned(), Slice(\"abcde\"));\n-        assert_eq!((\"abcde\".to_owned()).into_maybe_owned(), Slice(\"abcde\"));\n-        assert_eq!(\"abcde\".into_maybe_owned(), Owned(\"abcde\".to_owned()));\n-        assert_eq!((\"abcde\".to_owned()).into_maybe_owned(), Owned(\"abcde\".to_owned()));\n+        assert_eq!((\"abcde\".to_string()).into_maybe_owned(), Slice(\"abcde\"));\n+        assert_eq!(\"abcde\".into_maybe_owned(), Owned(\"abcde\".to_string()));\n+        assert_eq!((\"abcde\".to_string()).into_maybe_owned(), Owned(\"abcde\".to_string()));\n     }\n }\n "}, {"sha": "37244b26ad5965c4984afda3e9077d81a0d35c1d", "filename": "src/libstd/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -295,7 +295,7 @@ fn test_unnamed_task() {\n \n #[test]\n fn test_owned_named_task() {\n-    TaskBuilder::new().named(\"ada lovelace\".to_owned()).spawn(proc() {\n+    TaskBuilder::new().named(\"ada lovelace\".to_string()).spawn(proc() {\n         with_task_name(|name| {\n             assert!(name.unwrap() == \"ada lovelace\");\n         })\n@@ -367,7 +367,7 @@ fn test_back_to_the_future_result() {\n #[test]\n fn test_try_success() {\n     match try(proc() {\n-        \"Success!\".to_owned()\n+        \"Success!\".to_string()\n     }).as_ref().map(|s| s.as_slice()) {\n         result::Ok(\"Success!\") => (),\n         _ => fail!()"}, {"sha": "24330584714fa964fbb6d9d2308eeafaa4325030", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -669,7 +669,7 @@ impl<T> Vec<T> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let v = vec!(\"a\".to_owned(), \"b\".to_owned());\n+    /// let v = vec!(\"a\".to_string(), \"b\".to_string());\n     /// for s in v.move_iter() {\n     ///     // s has type String, not &String\n     ///     println!(\"{}\", s);\n@@ -874,13 +874,14 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     /// ```rust\n-    /// let mut v = vec!(\"foo\".to_owned(), \"bar\".to_owned(), \"baz\".to_owned(), \"qux\".to_owned());\n+    /// let mut v = vec!(\"foo\".to_string(), \"bar\".to_string(),\n+    ///                  \"baz\".to_string(), \"qux\".to_string());\n     ///\n-    /// assert_eq!(v.swap_remove(1), Some(\"bar\".to_owned()));\n-    /// assert_eq!(v, vec!(\"foo\".to_owned(), \"qux\".to_owned(), \"baz\".to_owned()));\n+    /// assert_eq!(v.swap_remove(1), Some(\"bar\".to_string()));\n+    /// assert_eq!(v, vec!(\"foo\".to_string(), \"qux\".to_string(), \"baz\".to_string()));\n     ///\n-    /// assert_eq!(v.swap_remove(0), Some(\"foo\".to_owned()));\n-    /// assert_eq!(v, vec!(\"baz\".to_owned(), \"qux\".to_owned()));\n+    /// assert_eq!(v.swap_remove(0), Some(\"foo\".to_string()));\n+    /// assert_eq!(v, vec!(\"baz\".to_string(), \"qux\".to_string()));\n     ///\n     /// assert_eq!(v.swap_remove(2), None);\n     /// ```"}, {"sha": "eefa4da82a1c361dbc2c4b36397f5bf4a6b702be", "filename": "src/libsync/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsync%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsync%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -60,10 +60,10 @@ mod test {\n     pub fn DuplexStream1() {\n         let (left, right) = duplex();\n \n-        left.send(\"abc\".to_owned());\n+        left.send(\"abc\".to_string());\n         right.send(123);\n \n         assert!(left.recv() == 123);\n-        assert!(right.recv() == \"abc\".to_owned());\n+        assert!(right.recv() == \"abc\".to_string());\n     }\n }"}, {"sha": "0ce19e8f00a58aa83aa976dbd9278b2dfadf265e", "filename": "src/libsync/future.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ffuture.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -143,34 +143,34 @@ mod test {\n \n     #[test]\n     fn test_from_value() {\n-        let mut f = Future::from_value(\"snail\".to_owned());\n-        assert_eq!(f.get(), \"snail\".to_owned());\n+        let mut f = Future::from_value(\"snail\".to_string());\n+        assert_eq!(f.get(), \"snail\".to_string());\n     }\n \n     #[test]\n     fn test_from_receiver() {\n         let (tx, rx) = channel();\n-        tx.send(\"whale\".to_owned());\n+        tx.send(\"whale\".to_string());\n         let mut f = Future::from_receiver(rx);\n-        assert_eq!(f.get(), \"whale\".to_owned());\n+        assert_eq!(f.get(), \"whale\".to_string());\n     }\n \n     #[test]\n     fn test_from_fn() {\n-        let mut f = Future::from_fn(proc() \"brail\".to_owned());\n-        assert_eq!(f.get(), \"brail\".to_owned());\n+        let mut f = Future::from_fn(proc() \"brail\".to_string());\n+        assert_eq!(f.get(), \"brail\".to_string());\n     }\n \n     #[test]\n     fn test_interface_get() {\n-        let mut f = Future::from_value(\"fail\".to_owned());\n-        assert_eq!(f.get(), \"fail\".to_owned());\n+        let mut f = Future::from_value(\"fail\".to_string());\n+        assert_eq!(f.get(), \"fail\".to_string());\n     }\n \n     #[test]\n     fn test_interface_unwrap() {\n-        let f = Future::from_value(\"fail\".to_owned());\n-        assert_eq!(f.unwrap(), \"fail\".to_owned());\n+        let f = Future::from_value(\"fail\".to_string());\n+        assert_eq!(f.unwrap(), \"fail\".to_string());\n     }\n \n     #[test]\n@@ -181,8 +181,8 @@ mod test {\n \n     #[test]\n     fn test_spawn() {\n-        let mut f = Future::spawn(proc() \"bale\".to_owned());\n-        assert_eq!(f.get(), \"bale\".to_owned());\n+        let mut f = Future::spawn(proc() \"bale\".to_string());\n+        assert_eq!(f.get(), \"bale\".to_string());\n     }\n \n     #[test]"}, {"sha": "fea165eb2ceb2eb90f406412043f7dbe67cec040", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -52,7 +52,7 @@ impl fmt::Show for CrateId {\n impl FromStr for CrateId {\n     fn from_str(s: &str) -> Option<CrateId> {\n         let pieces: Vec<&str> = s.splitn('#', 1).collect();\n-        let path = pieces.get(0).to_owned();\n+        let path = pieces.get(0).to_string();\n \n         if path.as_slice().starts_with(\"/\") || path.as_slice().ends_with(\"/\") ||\n             path.as_slice().starts_with(\".\") || path.is_empty() {"}, {"sha": "06916d5ac098aef90ba903b2ba2fa29e6a832304", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -57,7 +57,7 @@ pub fn expand_asm(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n     let mut inputs = Vec::new();\n-    let mut cons = \"\".to_owned();\n+    let mut cons = \"\".to_string();\n     let mut volatile = false;\n     let mut alignstack = false;\n     let mut dialect = ast::AsmAtt;"}, {"sha": "d6b7e84b5355d64cd6a570535e76c73a50144482", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -36,7 +36,7 @@ impl<D:Decoder> Decodable for node_id {\n     fn decode(d: &D) -> Node {\n         d.read_struct(\"Node\", 1, || {\n             Node {\n-                id: d.read_field(\"x\".to_owned(), 0, || decode(d))\n+                id: d.read_field(\"x\".to_string(), 0, || decode(d))\n             }\n         })\n     }\n@@ -73,8 +73,8 @@ would yield functions like:\n         fn decode(d: &D) -> spanned<T> {\n             d.read_rec(|| {\n                 {\n-                    node: d.read_field(\"node\".to_owned(), 0, || decode(d)),\n-                    span: d.read_field(\"span\".to_owned(), 1, || decode(d)),\n+                    node: d.read_field(\"node\".to_string(), 0, || decode(d)),\n+                    span: d.read_field(\"span\".to_string(), 1, || decode(d)),\n                 }\n             })\n         }"}, {"sha": "ce8ada7071b3b4df60711326f5133830aa699ab2", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -430,11 +430,11 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n \n         LIT_INT(i, ity) => {\n             let s_ity = match ity {\n-                ast::TyI => \"TyI\".to_owned(),\n-                ast::TyI8 => \"TyI8\".to_owned(),\n-                ast::TyI16 => \"TyI16\".to_owned(),\n-                ast::TyI32 => \"TyI32\".to_owned(),\n-                ast::TyI64 => \"TyI64\".to_owned()\n+                ast::TyI => \"TyI\".to_string(),\n+                ast::TyI8 => \"TyI8\".to_string(),\n+                ast::TyI16 => \"TyI16\".to_string(),\n+                ast::TyI32 => \"TyI32\".to_string(),\n+                ast::TyI64 => \"TyI64\".to_string()\n             };\n             let e_ity = cx.expr_ident(sp, id_ext(s_ity.as_slice()));\n \n@@ -447,11 +447,11 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n \n         LIT_UINT(u, uty) => {\n             let s_uty = match uty {\n-                ast::TyU => \"TyU\".to_owned(),\n-                ast::TyU8 => \"TyU8\".to_owned(),\n-                ast::TyU16 => \"TyU16\".to_owned(),\n-                ast::TyU32 => \"TyU32\".to_owned(),\n-                ast::TyU64 => \"TyU64\".to_owned()\n+                ast::TyU => \"TyU\".to_string(),\n+                ast::TyU8 => \"TyU8\".to_string(),\n+                ast::TyU16 => \"TyU16\".to_string(),\n+                ast::TyU32 => \"TyU32\".to_string(),\n+                ast::TyU64 => \"TyU64\".to_string()\n             };\n             let e_uty = cx.expr_ident(sp, id_ext(s_uty.as_slice()));\n \n@@ -472,9 +472,9 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> @ast::Expr {\n \n         LIT_FLOAT(fident, fty) => {\n             let s_fty = match fty {\n-                ast::TyF32 => \"TyF32\".to_owned(),\n-                ast::TyF64 => \"TyF64\".to_owned(),\n-                ast::TyF128 => \"TyF128\".to_owned()\n+                ast::TyF32 => \"TyF32\".to_string(),\n+                ast::TyF64 => \"TyF64\".to_string(),\n+                ast::TyF128 => \"TyF128\".to_string()\n             };\n             let e_fty = cx.expr_ident(sp, id_ext(s_fty.as_slice()));\n "}, {"sha": "b5ddd6cd20f74270bd3e54b19408ad8ffa6ab800", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -4159,7 +4159,7 @@ impl<'a> Parser<'a> {\n                 outer_attrs, \"path\") {\n             Some(d) => (dir_path.join(d), true),\n             None => {\n-                let mod_name = mod_string.get().to_owned();\n+                let mod_name = mod_string.get().to_string();\n                 let default_path_str = format!(\"{}.rs\", mod_name);\n                 let secondary_path_str = format!(\"{}/mod.rs\", mod_name);\n                 let default_path = dir_path.join(default_path_str.as_slice());"}, {"sha": "33589f29624f0f5ede49c0b35da7324ca0b79168", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -217,7 +217,7 @@ pub fn parse(file: &mut io::Reader, longnames: bool)\n     // don't read NUL\n     let bytes = try!(file.read_exact(names_bytes as uint - 1));\n     let names_str = match str::from_utf8(bytes.as_slice()) {\n-        Some(s) => s.to_owned(),\n+        Some(s) => s.to_string(),\n         None => return Err(\"input not utf-8\".to_strbuf()),\n     };\n "}, {"sha": "0398738ee0aec27bf6781634a9a44ec7ca6ec101", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -1026,8 +1026,8 @@ pub fn run_test(opts: &TestOpts,\n             let stdout = ChanWriter::new(tx.clone());\n             let stderr = ChanWriter::new(tx);\n             let mut task = TaskBuilder::new().named(match desc.name {\n-                DynTestName(ref name) => name.clone().to_owned(),\n-                StaticTestName(name) => name.to_owned(),\n+                DynTestName(ref name) => name.clone().to_string(),\n+                StaticTestName(name) => name.to_string(),\n             });\n             if nocapture {\n                 drop((stdout, stderr));"}, {"sha": "1c51ea055d04e3ab30a09831eee315dd7511fcac", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -14,9 +14,9 @@ use std::uint;\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"10000000\".to_owned())\n+        vec!(\"\".to_string(), \"10000000\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"100000\".to_owned())\n+        vec!(\"\".to_string(), \"100000\".to_string())\n     } else {\n         args.move_iter().collect()\n     };"}, {"sha": "108093acfb4983a25c0a1fc02ffcf0612a3ee75d", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -63,9 +63,9 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"100\".to_owned(), \"10000\".to_owned())\n+        vec!(\"\".to_string(), \"100\".to_string(), \"10000\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"10\".to_owned(), \"100\".to_owned())\n+        vec!(\"\".to_string(), \"10\".to_string(), \"100\".to_string())\n     } else {\n         args.clone().move_iter().collect()\n     };"}, {"sha": "38a894c4b3d8bf9674b2186e2c00aa467cb27dc7", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -64,9 +64,9 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"100\".to_owned(), \"10000\".to_owned())\n+        vec!(\"\".to_string(), \"100\".to_string(), \"10000\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"10\".to_owned(), \"100\".to_owned())\n+        vec!(\"\".to_string(), \"10\".to_string(), \"100\".to_string())\n     } else {\n         args.clone().move_iter().collect()\n     };"}, {"sha": "d8eceec6321df17a1f69c6e6d2ff14e014ca8bb1", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -25,9 +25,9 @@ fn ack(m: int, n: int) -> int {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"12\".to_owned())\n+        vec!(\"\".to_string(), \"12\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"8\".to_owned())\n+        vec!(\"\".to_string(), \"8\".to_string())\n     } else {\n         args.move_iter().collect()\n     };"}, {"sha": "83db926ad6cfa53fc8d8c6d795efbadb05d5a33b", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -21,9 +21,9 @@ fn fib(n: int) -> int {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"40\".to_owned())\n+        vec!(\"\".to_string(), \"40\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"30\".to_owned())\n+        vec!(\"\".to_string(), \"30\".to_string())\n     } else {\n         args.move_iter().collect()\n     };"}, {"sha": "f774be582a158fa259ec7d506348aa813c6f1f97", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -32,9 +32,9 @@ fn check_sequential(min: uint, max: uint, map: &SmallIntMap<uint>) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"100000\".to_owned(), \"100\".to_owned())\n+        vec!(\"\".to_string(), \"100000\".to_string(), \"100\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"10000\".to_owned(), \"50\".to_owned())\n+        vec!(\"\".to_string(), \"10000\".to_string(), \"50\".to_string())\n     } else {\n         args.move_iter().collect()\n     };"}, {"sha": "9235882d1f4980b7d06656f4a5b659e6c8eaebc5", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -67,7 +67,7 @@ impl Sudoku {\n \n     pub fn read(mut reader: BufferedReader<StdReader>) -> Sudoku {\n         /* assert first line is exactly \"9,9\" */\n-        assert!(reader.read_line().unwrap() == \"9,9\".to_owned());\n+        assert!(reader.read_line().unwrap() == \"9,9\".to_string());\n \n         let mut g = Vec::from_fn(10u, { |_i| vec!(0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8) });\n         for line in reader.lines() {"}, {"sha": "c631e3e04f2efe894d44b48b16a082496e614de2", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -41,9 +41,9 @@ fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"100000\".to_owned())\n+        vec!(\"\".to_string(), \"100000\".to_string())\n     } else if args.len() <= 1 {\n-        vec!(\"\".to_owned(), \"100\".to_owned())\n+        vec!(\"\".to_string(), \"100\".to_string())\n     } else {\n         args.clone().move_iter().collect()\n     };"}, {"sha": "c980d531bb5ebdab4334b9f3c79f63206ac84ecc", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -49,9 +49,9 @@ fn calc(children: uint, parent_wait_chan: &Sender<Sender<Sender<int>>>) {\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"30\".to_owned())\n+        vec!(\"\".to_string(), \"30\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"10\".to_owned())\n+        vec!(\"\".to_string(), \"10\".to_string())\n     } else {\n         args\n     };"}, {"sha": "8b090d6d7fb79f245709f3453291a7bca803d967", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -25,9 +25,9 @@ fn g() { }\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        vec!(\"\".to_owned(), \"400\".to_owned())\n+        vec!(\"\".to_string(), \"400\".to_string())\n     } else if args.len() <= 1u {\n-        vec!(\"\".to_owned(), \"10\".to_owned())\n+        vec!(\"\".to_string(), \"10\".to_string())\n     } else {\n         args.move_iter().collect()\n     };"}, {"sha": "c7b573562e3484747c7d272b28e7cd9f7d9ddc19", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -19,7 +19,7 @@ fn arg_closure() {\n }\n \n fn let_pat() {\n-    let &_x = &\"hi\".to_owned();\n+    let &_x = &\"hi\".to_string();\n     //~^ ERROR cannot move out of dereference of `&`-pointer\n }\n "}, {"sha": "8a93790d5a2989f9f8930a068684da86b331b57f", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-deref.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n pub fn main() {\n-    let _x = *Rc::new(\"hi\".to_owned());\n+    let _x = *Rc::new(\"hi\".to_string());\n     //~^ ERROR cannot move out of dereference of `&`-pointer\n }"}, {"sha": "ba1d3a9ddba795c749f2e6b5a4660cbfcf71cbc8", "filename": "src/test/compile-fail/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let msg;\n-    match Some(\"Hello\".to_owned()) {\n+    match Some(\"Hello\".to_string()) {\n         Some(ref m) => { //~ ERROR borrowed value does not live long enough\n             msg = m;\n         },"}, {"sha": "ac5ec1236ff9d083294b9503ac261c84022f0436", "filename": "src/test/compile-fail/circular_modules_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcircular_modules_main.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -12,7 +12,7 @@\n mod circular_modules_hello; //~ERROR: circular modules\n \n pub fn hi_str() -> String {\n-  \"Hi!\".to_owned()\n+  \"Hi!\".to_string()\n }\n \n fn main() {"}, {"sha": "9186dada780c039efa6895bb33587755cbb2567e", "filename": "src/test/compile-fail/error-should-say-copy-not-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -13,5 +13,5 @@\n fn check_bound<T:Copy>(_: T) {}\n \n fn main() {\n-    check_bound(\"nocopy\".to_owned()); //~ ERROR does not fulfill `Copy`\n+    check_bound(\"nocopy\".to_string()); //~ ERROR does not fulfill `Copy`\n }"}, {"sha": "8a99633b4fc112641ddbb7a310cedb21823d2a0f", "filename": "src/test/compile-fail/issue-10412.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10412.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -26,7 +26,7 @@ impl<'self> Serializable<str> for &'self str { //~ ERROR no longer a special lif\n \n fn main() {\n     println!(\"hello\");\n-    let x = \"foo\".to_owned();\n+    let x = \"foo\".to_string();\n     let y = x;\n     println!(\"{}\", y);\n }"}, {"sha": "e920976069accd0d536127e3e33b06962f8db187", "filename": "src/test/compile-fail/issue-6458-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo(b: bool) -> Result<bool,String> {\n-    Err(\"bar\".to_owned());\n+    Err(\"bar\".to_string());\n     //~^ ERROR: cannot determine a type for this expression: unconstrained type\n }\n "}, {"sha": "97287c147d73f2d8f7da88bde0c2a923c23bb46b", "filename": "src/test/compile-fail/moves-based-on-type-capture-clause-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -11,7 +11,7 @@\n use std::task;\n \n fn main() {\n-    let x = \"Hello world!\".to_owned();\n+    let x = \"Hello world!\".to_string();\n     task::spawn(proc() {\n         println!(\"{}\", x);\n     });"}, {"sha": "f30360af46eb4128fb0b0652c05b21638b417317", "filename": "src/test/compile-fail/moves-based-on-type-distribute-copy-over-paren.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -15,37 +15,37 @@ struct Foo<A> { f: A }\n fn touch<A>(_a: &A) {}\n \n fn f00() {\n-    let x = \"hi\".to_owned();\n+    let x = \"hi\".to_string();\n     let _y = Foo { f:x }; //~ NOTE `x` moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f05() {\n-    let x = \"hi\".to_owned();\n+    let x = \"hi\".to_string();\n     let _y = Foo { f:(((x))) }; //~ NOTE `x` moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f10() {\n-    let x = \"hi\".to_owned();\n+    let x = \"hi\".to_string();\n     let _y = Foo { f:x.clone() };\n     touch(&x);\n }\n \n fn f20() {\n-    let x = \"hi\".to_owned();\n+    let x = \"hi\".to_string();\n     let _y = Foo { f:(x).clone() };\n     touch(&x);\n }\n \n fn f30() {\n-    let x = \"hi\".to_owned();\n+    let x = \"hi\".to_string();\n     let _y = Foo { f:((x)).clone() };\n     touch(&x);\n }\n \n fn f40() {\n-    let x = \"hi\".to_owned();\n+    let x = \"hi\".to_string();\n     let _y = Foo { f:(((((((x)).clone()))))) };\n     touch(&x);\n }"}, {"sha": "65ae25396c8d625502a099a354afc2676ab1e144", "filename": "src/test/compile-fail/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,7 +17,7 @@ fn guard(_s: String) -> bool {fail!()}\n fn touch<A>(_a: &A) {}\n \n fn f10() {\n-    let x = Foo {f: \"hi\".to_owned()};\n+    let x = Foo {f: \"hi\".to_string()};\n \n     let y = match x {\n         Foo {f} => {} //~ NOTE moved here"}, {"sha": "3521347705b95b668d5441bee750ced19a8acaa9", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -20,7 +20,7 @@ struct R<'a> {\n }\n \n fn innocent_looking_victim() {\n-    let mut x = Some(\"hello\".to_owned());\n+    let mut x = Some(\"hello\".to_string());\n     conspirator(|f, writer| {\n         if writer {\n             x = None;"}, {"sha": "f772b96c697b7b9cc996e9f23584debc18892d31", "filename": "src/test/compile-fail/multitrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmultitrait.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -14,5 +14,5 @@ struct S {\n \n impl Cmp, ToStr for S { //~ ERROR: expected `{` but found `,`\n   fn eq(&&other: S) { false }\n-  fn to_str(&self) -> String { \"hi\".to_owned() }\n+  fn to_str(&self) -> String { \"hi\".to_string() }\n }"}, {"sha": "d1e50638138c40fc5df877766079165dc75bcc6a", "filename": "src/test/compile-fail/syntax-extension-minor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -13,8 +13,8 @@\n #![feature(concat_idents)]\n \n pub fn main() {\n-    let asdf_fdsa = \"<.<\".to_owned();\n-    assert_eq!(concat_idents!(asd, f_f, dsa), \"<.<\".to_owned());\n+    let asdf_fdsa = \"<.<\".to_string();\n+    assert_eq!(concat_idents!(asd, f_f, dsa), \"<.<\".to_string());\n     //~^ ERROR: unresolved name `asdf_fdsa`\n \n     assert!(stringify!(use_mention_distinction) =="}, {"sha": "5f4d51918edc0e901b0b33a39016fce3ef28ea28", "filename": "src/test/compile-fail/trait-coercion-generic-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -24,7 +24,7 @@ impl Trait<&'static str> for Struct {\n }\n \n fn main() {\n-    let person = \"Fred\".to_owned();\n+    let person = \"Fred\".to_string();\n     let person: &str = person.as_slice();  //~ ERROR `person` does not live long enough\n     let s: Box<Trait<&'static str>> = box Struct { person: person };\n }"}, {"sha": "e2167ca446f2cc1db1bafbcae2160ec7e4167dea", "filename": "src/test/compile-fail/use-after-move-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = \"Hello!\".to_owned();\n+    let x = \"Hello!\".to_string();\n     let _y = x;\n     println!(\"{}\", x); //~ ERROR use of moved value\n }"}, {"sha": "5cf6d838f253fc987ae2b2cc8a8fea6afb25e326", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -15,10 +15,10 @@ fn main() {\n     let _y =\n         match x {\n             Some(_) =>\n-            [\"some(_)\".to_owned(), \"not\".to_owned(), \"SO\".to_owned(),\n-             \"long\".to_owned(), \"string\".to_owned()],\n+            [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n+             \"long\".to_string(), \"string\".to_string()],\n             None =>\n-            [\"none\".to_owned(), \"a\".to_owned(), \"a\".to_owned(),\n-             \"a\".to_owned(), \"a\".to_owned()]\n+            [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n+             \"a\".to_string(), \"a\".to_string()]\n         };\n }"}, {"sha": "bb14a74fc183e8ce0daf2f1a80f70da8da15c908", "filename": "src/test/pretty/match-naked-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let x = Some(3);\n     let _y =\n         match x {\n-            Some(_) => \"some(_)\".to_owned(),\n-            None => \"none\".to_owned()\n+            Some(_) => \"some(_)\".to_string(),\n+            None => \"none\".to_string()\n         };\n }"}, {"sha": "ea643fd26d93d360e9172adf46cc968447cd7c26", "filename": "src/test/run-fail/fail-task-name-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -13,7 +13,7 @@\n use std::task::TaskBuilder;\n \n fn main() {\n-    TaskBuilder::new().named(\"owned name\".to_owned()).try(proc() {\n+    TaskBuilder::new().named(\"owned name\".to_string()).try(proc() {\n         fail!(\"test\");\n         1\n     }).unwrap()"}, {"sha": "08c8461afe02929d79a55131485fce9ed5ffd054", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,7 +17,7 @@ fn failfn() {\n }\n \n fn main() {\n-    let x = @\"hi\".to_owned();\n+    let x = @\"hi\".to_string();\n     failfn();\n     println!(\"{:?}\", x);\n }"}, {"sha": "4af77c434829a14d72d80335ad63d8489cac2cb2", "filename": "src/test/run-fail/unwind-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-fail%2Funwind-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-fail%2Funwind-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-match.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -16,9 +16,9 @@ fn test_box() {\n     @0;\n }\n fn test_str() {\n-  let res = match false { true => { \"happy\".to_owned() },\n+  let res = match false { true => { \"happy\".to_string() },\n      _ => fail!(\"non-exhaustive match failure\") };\n-  assert_eq!(res, \"happy\".to_owned());\n+  assert_eq!(res, \"happy\".to_string());\n }\n fn main() {\n     test_box();"}, {"sha": "36b525c134b9940e7e01d6c26ca984edaa42f4a5", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -57,20 +57,20 @@ fn main() {\n     let cx = mk_ctxt();\n \n     let abc = quote_expr!(cx, 23);\n-    check_pp(ext_cx, abc,  pprust::print_expr, \"23\".to_owned());\n+    check_pp(ext_cx, abc,  pprust::print_expr, \"23\".to_string());\n \n \n     let ty = quote_ty!(cx, int);\n-    check_pp(ext_cx, ty, pprust::print_type, \"int\".to_owned());\n+    check_pp(ext_cx, ty, pprust::print_type, \"int\".to_string());\n \n     let item = quote_item!(cx, static x : int = 10;).get();\n-    check_pp(ext_cx, item, pprust::print_item, \"static x: int = 10;\".to_owned());\n+    check_pp(ext_cx, item, pprust::print_item, \"static x: int = 10;\".to_string());\n \n     let stmt = quote_stmt!(cx, let x = 20;);\n-    check_pp(ext_cx, *stmt, pprust::print_stmt, \"let x = 20;\".to_owned());\n+    check_pp(ext_cx, *stmt, pprust::print_stmt, \"let x = 20;\".to_string());\n \n     let pat = quote_pat!(cx, Some(_));\n-    check_pp(ext_cx, pat, pprust::print_pat, \"Some(_)\".to_owned());\n+    check_pp(ext_cx, pat, pprust::print_pat, \"Some(_)\".to_string());\n \n }\n \n@@ -82,7 +82,7 @@ fn check_pp<T>(cx: fake_ext_ctxt,\n         pp::eof(pp.s);\n     });\n     stdout().write_line(s);\n-    if expect != \"\".to_owned() {\n+    if expect != \"\".to_string() {\n         println!(\"expect: '%s', got: '%s'\", expect, s);\n         assert_eq!(s, expect);\n     }"}, {"sha": "4adf10636e6a7897d94afb5551418a4d1e47f1da", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -15,7 +15,7 @@ struct Point { x : int }\n \n pub fn main() {\n     assert_eq!(14,14);\n-    assert_eq!(\"abc\".to_owned(),\"abc\".to_owned());\n+    assert_eq!(\"abc\".to_string(),\"abc\".to_string());\n     assert_eq!(box Point{x:34},box Point{x:34});\n     assert_eq!(&Point{x:34},&Point{x:34});\n     assert_eq!(@Point{x:34},@Point{x:34});"}, {"sha": "ba41b1ffe9d037386847c7bbb105d1763a6ff500", "filename": "src/test/run-pass/box-compare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-compare.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -12,6 +12,6 @@\n \n pub fn main() {\n     assert!((@1 < @3));\n-    assert!((@@\"hello \".to_owned() > @@\"hello\".to_owned()));\n-    assert!((@@@\"hello\".to_owned() != @@@\"there\".to_owned()));\n+    assert!((@@\"hello \".to_string() > @@\"hello\".to_string()));\n+    assert!((@@@\"hello\".to_string() != @@@\"there\".to_string()));\n }"}, {"sha": "beffc171cd5cdb1723791d6fc71f1db1c1da0a28", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,14 +17,14 @@ use cci_nested_lib::*;\n \n pub fn main() {\n     let lst = new_int_alist();\n-    alist_add(&lst, 22, \"hi\".to_owned());\n-    alist_add(&lst, 44, \"ho\".to_owned());\n-    assert_eq!(alist_get(&lst, 22), \"hi\".to_owned());\n-    assert_eq!(alist_get(&lst, 44), \"ho\".to_owned());\n+    alist_add(&lst, 22, \"hi\".to_string());\n+    alist_add(&lst, 44, \"ho\".to_string());\n+    assert_eq!(alist_get(&lst, 22), \"hi\".to_string());\n+    assert_eq!(alist_get(&lst, 44), \"ho\".to_string());\n \n     let lst = new_int_alist_2();\n-    alist_add(&lst, 22, \"hi\".to_owned());\n-    alist_add(&lst, 44, \"ho\".to_owned());\n-    assert_eq!(alist_get(&lst, 22), \"hi\".to_owned());\n-    assert_eq!(alist_get(&lst, 44), \"ho\".to_owned());\n+    alist_add(&lst, 22, \"hi\".to_string());\n+    alist_add(&lst, 44, \"ho\".to_string());\n+    assert_eq!(alist_get(&lst, 22), \"hi\".to_string());\n+    assert_eq!(alist_get(&lst, 44), \"ho\".to_string());\n }"}, {"sha": "94c78522df40e39600a109fb546888c92617bf36", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -14,11 +14,11 @@ use cci_class_6::kitties::cat;\n \n pub fn main() {\n   let mut nyan : cat<char> = cat::<char>(52u, 99, vec!('p'));\n-  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_owned()));\n+  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak(vec!(1u,2u,3u));\n   assert_eq!(nyan.meow_count(), 55u);\n-  kitty.speak(vec!(\"meow\".to_owned(), \"mew\".to_owned(), \"purr\".to_owned(), \"chirp\".to_owned()));\n+  kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n   assert_eq!(kitty.meow_count(), 1004u);\n }"}, {"sha": "4f94673a2c027ef7b647f15527afc8b7cb26babb", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -33,11 +33,11 @@ fn cat<U>(in_x : uint, in_y : int, in_info: Vec<U> ) -> cat<U> {\n \n pub fn main() {\n   let mut nyan : cat<int> = cat::<int>(52u, 99, vec!(9));\n-  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_owned()));\n+  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak(vec!(1,2,3));\n   assert_eq!(nyan.meow_count(), 55u);\n-  kitty.speak(vec!(\"meow\".to_owned(), \"mew\".to_owned(), \"purr\".to_owned(), \"chirp\".to_owned()));\n+  kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n   assert_eq!(kitty.meow_count(), 1004u);\n }"}, {"sha": "5597d5fa01135c42d1c89667ffb6ff598cc18851", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -26,9 +26,9 @@ pub fn main() {\n     let args = os::args();\n     let args = args.as_slice();\n \n-    // Here, the rvalue `\"signal\".to_owned()` requires cleanup. Older versions\n+    // Here, the rvalue `\"signal\".to_string()` requires cleanup. Older versions\n     // of the code had a problem that the cleanup scope for this\n-    // expression was the end of the `if`, and as the `\"signal\".to_owned()`\n+    // expression was the end of the `if`, and as the `\"signal\".to_string()`\n     // expression was never evaluated, we wound up trying to clean\n     // uninitialized memory.\n "}, {"sha": "7ca4e25a74d339e1d4ed5935066469f86ff016d0", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -18,7 +18,7 @@ struct F { field: int }\n \n pub fn main() {\n     /*foo(1);\n-    foo(\"hi\".to_owned());\n+    foo(\"hi\".to_string());\n     foo(~[1, 2, 3]);\n     foo(F{field: 42});\n     foo((1, 2u));"}, {"sha": "77c7a08f4ca1761db87023b3ffa9ab2ec1cfed03", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -18,12 +18,12 @@ pub fn main() {\n     unsafe {\n         let foo = &A as *u8;\n         assert_eq!(str::raw::from_utf8(A), \"hi\");\n-        assert_eq!(str::raw::from_buf_len(foo, A.len()), \"hi\".to_owned());\n-        assert_eq!(str::raw::from_buf_len(C, B.len()), \"hi\".to_owned());\n+        assert_eq!(str::raw::from_buf_len(foo, A.len()), \"hi\".to_string());\n+        assert_eq!(str::raw::from_buf_len(C, B.len()), \"hi\".to_string());\n         assert!(*C == A[0]);\n         assert!(*(&B[0] as *u8) == A[0]);\n \n         let bar = str::raw::from_utf8(A).to_c_str();\n-        assert_eq!(bar.with_ref(|buf| str::raw::from_c_str(buf)), \"hi\".to_owned());\n+        assert_eq!(bar.with_ref(|buf| str::raw::from_c_str(buf)), \"hi\".to_string());\n     }\n }"}, {"sha": "3918f7eb73d805f16364879c6917a9ba910fd90d", "filename": "src/test/run-pass/expr-if-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-box.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,8 +17,8 @@ fn test_box() {\n }\n \n fn test_str() {\n-    let rs = if true { \"happy\".to_owned() } else { \"sad\".to_owned() };\n-    assert_eq!(rs, \"happy\".to_owned());\n+    let rs = if true { \"happy\".to_string() } else { \"sad\".to_string() };\n+    assert_eq!(rs, \"happy\".to_string());\n }\n \n pub fn main() { test_box(); test_str(); }"}, {"sha": "457d3e8d98642d6e83a8b9faeeb8fdcbc40849ae", "filename": "src/test/run-pass/expr-match-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-box.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,9 +17,9 @@ fn test_box() {\n }\n \n fn test_str() {\n-    let res = match true { true => { \"happy\".to_owned() },\n+    let res = match true { true => { \"happy\".to_string() },\n                          _ => fail!(\"not happy at all\") };\n-    assert_eq!(res, \"happy\".to_owned());\n+    assert_eq!(res, \"happy\".to_string());\n }\n \n pub fn main() { test_box(); test_str(); }"}, {"sha": "52d7c4cb170ebe1b5cc6ce311de6bd6d3fd8a319", "filename": "src/test/run-pass/generic-tag-corruption.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -14,4 +14,4 @@\n // This used to cause memory corruption in stage 0.\n enum thing<K> { some(K), }\n \n-pub fn main() { let _x = some(\"hi\".to_owned()); }\n+pub fn main() { let _x = some(\"hi\".to_string()); }"}, {"sha": "3b09cf0373eb1bf93482f07e3fd47ae0faa88d02", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -52,7 +52,7 @@ pub fn main() {\n     t!(format!(\"{}\", 1.0f32), \"1\");\n     t!(format!(\"{}\", 1.0f64), \"1\");\n     t!(format!(\"{}\", \"a\"), \"a\");\n-    t!(format!(\"{}\", \"a\".to_owned()), \"a\");\n+    t!(format!(\"{}\", \"a\".to_string()), \"a\");\n     t!(format!(\"{}\", false), \"false\");\n     t!(format!(\"{}\", 'a'), \"a\");\n \n@@ -66,7 +66,7 @@ pub fn main() {\n     t!(format!(\"{:x}\", 10u), \"a\");\n     t!(format!(\"{:X}\", 10u), \"A\");\n     t!(format!(\"{:s}\", \"foo\"), \"foo\");\n-    t!(format!(\"{:s}\", \"foo\".to_owned()), \"foo\");\n+    t!(format!(\"{:s}\", \"foo\".to_string()), \"foo\");\n     t!(format!(\"{:p}\", 0x1234 as *int), \"0x1234\");\n     t!(format!(\"{:p}\", 0x1234 as *mut int), \"0x1234\");\n     t!(format!(\"{:d}\", A), \"aloha\");"}, {"sha": "b2b16c4ef84201229444bce76a2f29037727d7c4", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -11,22 +11,22 @@\n pub fn main() {\n     let x = 2;\n     let x_message = match x {\n-      0 .. 1     => { \"not many\".to_owned() }\n-      _          => { \"lots\".to_owned() }\n+      0 .. 1     => { \"not many\".to_string() }\n+      _          => { \"lots\".to_string() }\n     };\n-    assert_eq!(x_message, \"lots\".to_owned());\n+    assert_eq!(x_message, \"lots\".to_string());\n \n     let y = 2i;\n     let y_message = match y {\n-      0 .. 1     => { \"not many\".to_owned() }\n-      _          => { \"lots\".to_owned() }\n+      0 .. 1     => { \"not many\".to_string() }\n+      _          => { \"lots\".to_string() }\n     };\n-    assert_eq!(y_message, \"lots\".to_owned());\n+    assert_eq!(y_message, \"lots\".to_string());\n \n     let z = 1u64;\n     let z_message = match z {\n-      0 .. 1     => { \"not many\".to_owned() }\n-      _          => { \"lots\".to_owned() }\n+      0 .. 1     => { \"not many\".to_string() }\n+      _          => { \"lots\".to_string() }\n     };\n-    assert_eq!(z_message, \"not many\".to_owned());\n+    assert_eq!(z_message, \"not many\".to_string());\n }"}, {"sha": "7d5bd9d6a74db57c3614deece86a932dab8f0bbf", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n pub fn main () {\n-  let mut line = \"\".to_owned();\n+  let mut line = \"\".to_string();\n   let mut i = 0;\n-  while line != \"exit\".to_owned() {\n-    line = if i == 9 { \"exit\".to_owned() } else { \"notexit\".to_owned() };\n+  while line != \"exit\".to_string() {\n+    line = if i == 9 { \"exit\".to_string() } else { \"notexit\".to_string() };\n     i += 1;\n   }\n }"}, {"sha": "9d71aea01d01da7931a94c0a53a0e161fda80adc", "filename": "src/test/run-pass/issue-1974.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-1974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-1974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1974.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -11,8 +11,8 @@\n // Issue 1974\n // Don't double free the condition allocation\n pub fn main() {\n-    let s = \"hej\".to_owned();\n-    while s != \"\".to_owned() {\n+    let s = \"hej\".to_string();\n+    while s != \"\".to_string() {\n         return;\n     }\n }"}, {"sha": "3422b9a799dfe6c82c5192ddff1e38b4af88a2fb", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,7 +17,7 @@ fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax:> {\n }\n \n fn deadcode() {\n-    perform_hax(box \"deadcode\".to_owned());\n+    perform_hax(box \"deadcode\".to_string());\n }\n \n pub fn main() {"}, {"sha": "8a5391773bb592d879a202d4e1c9c9d18f8fcd5d", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -17,7 +17,7 @@ fn perform_hax<T: 'static>(x: Box<T>) -> Box<hax:> {\n }\n \n fn deadcode() {\n-    perform_hax(box \"deadcode\".to_owned());\n+    perform_hax(box \"deadcode\".to_string());\n }\n \n pub fn main() {"}, {"sha": "5542418ebddb2621fe961ebf6d628f657a4be591", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -30,14 +30,14 @@ enum square {\n impl fmt::Show for square {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", match *self {\n-          bot => { \"R\".to_owned() }\n-          wall => { \"#\".to_owned() }\n-          rock => { \"*\".to_owned() }\n-          lambda => { \"\\\\\".to_owned() }\n-          closed_lift => { \"L\".to_owned() }\n-          open_lift => { \"O\".to_owned() }\n-          earth => { \".\".to_owned() }\n-          empty => { \" \".to_owned() }\n+          bot => { \"R\".to_string() }\n+          wall => { \"#\".to_string() }\n+          rock => { \"*\".to_string() }\n+          lambda => { \"\\\\\".to_string() }\n+          closed_lift => { \"L\".to_string() }\n+          open_lift => { \"O\".to_string() }\n+          earth => { \".\".to_string() }\n+          empty => { \" \".to_string() }\n         })\n     }\n }"}, {"sha": "ac93742342377a0cd7f23db8d4b28fce9d95a50e", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -31,8 +31,8 @@ fn check_strs(actual: &str, expected: &str) -> bool\n \n pub fn main()\n {\n-// assert!(check_strs(fmt!(\"%?\", Text(@\"foo\".to_owned())), \"Text(@~\\\"foo\\\")\"));\n-// assert!(check_strs(fmt!(\"%?\", ETag(@~[\"foo\".to_owned()], @\"bar\".to_owned())),\n+// assert!(check_strs(fmt!(\"%?\", Text(@\"foo\".to_string())), \"Text(@~\\\"foo\\\")\"));\n+// assert!(check_strs(fmt!(\"%?\", ETag(@~[\"foo\".to_string()], @\"bar\".to_string())),\n //                    \"ETag(@~[ ~\\\"foo\\\" ], @~\\\"bar\\\")\"));\n \n     let t = Text(@\"foo\".to_strbuf());"}, {"sha": "b27720b8579a4b4a51c511d8b366944cbffc0dfd", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -97,12 +97,12 @@ priv fn parse_response(io: @io::Reader) -> Result {\n }\n \n priv fn cmd_to_str(cmd: ~[String]) -> String {\n-  let mut res = \"*\".to_owned();\n+  let mut res = \"*\".to_string();\n   res.push_str(cmd.len().to_str());\n   res.push_str(\"\\r\\n\");\n     for s in cmd.iter() {\n-    res.push_str([\"$\".to_owned(), s.len().to_str(), \"\\r\\n\".to_owned(),\n-                  (*s).clone(), \"\\r\\n\".to_owned()].concat() );\n+    res.push_str([\"$\".to_string(), s.len().to_str(), \"\\r\\n\".to_string(),\n+                  (*s).clone(), \"\\r\\n\".to_string()].concat() );\n     }\n   res\n }\n@@ -117,7 +117,7 @@ fn query(cmd: ~[String], sb: TcpSocketBuf) -> Result {\n \n fn query2(cmd: ~[String]) -> Result {\n   let _cmd = cmd_to_str(cmd);\n-    io::with_str_reader(\"$3\\r\\nXXX\\r\\n\".to_owned())(|sb| {\n+    io::with_str_reader(\"$3\\r\\nXXX\\r\\n\".to_string())(|sb| {\n     let res = parse_response(@sb as @io::Reader);\n     println!(\"{:?}\", res);\n     res"}, {"sha": "b260e0af9e3ad728d46f22c35be9a8217ae67749", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     for i in x.iter() { println!(\"{:?}\", *i); y += *i; }\n     println!(\"{:?}\", y);\n     assert_eq!(y, 6);\n-    let s = \"hello there\".to_owned();\n+    let s = \"hello there\".to_string();\n     let mut i: int = 0;\n     for c in s.as_slice().bytes() {\n         if i == 0 { assert!((c == 'h' as u8)); }"}, {"sha": "7f9a4593780a5a35ebfe93645fd28b233dad3931", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         return\n     }\n \n-    let env = [(\"RUST_LOG\".to_owned(), \"debug\".to_owned())];\n+    let env = [(\"RUST_LOG\".to_string(), \"debug\".to_string())];\n     let p = Command::new(args[0].as_slice())\n                     .arg(\"child\").env(env.as_slice())\n                     .spawn().unwrap().wait_with_output().unwrap();"}, {"sha": "d17bf8500e06ea0e095e8b121890721c25d1c6c1", "filename": "src/test/run-pass/match-pipe-binding.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -10,10 +10,10 @@\n \n fn test1() {\n     // from issue 6338\n-    match ((1, \"a\".to_owned()), (2, \"b\".to_owned())) {\n+    match ((1, \"a\".to_string()), (2, \"b\".to_string())) {\n         ((1, a), (2, b)) | ((2, b), (1, a)) => {\n-                assert_eq!(a, \"a\".to_owned());\n-                assert_eq!(b, \"b\".to_owned());\n+                assert_eq!(a, \"a\".to_string());\n+                assert_eq!(b, \"b\".to_string());\n             },\n             _ => fail!(),\n     }"}, {"sha": "7fd37969e672116d3bba22b9c58aca682396ab53", "filename": "src/test/run-pass/moves-based-on-type-capture-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmoves-based-on-type-capture-clause.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -11,7 +11,7 @@\n use std::task;\n \n pub fn main() {\n-    let x = \"Hello world!\".to_owned();\n+    let x = \"Hello world!\".to_string();\n     task::spawn(proc() {\n         println!(\"{}\", x);\n     });"}, {"sha": "c6f3dae7fc177c18cf117d5b4284d257f0befdc3", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -40,8 +40,8 @@ impl<K:Eq,V:Clone> Index<K,V> for AssociationList<K,V> {\n }\n \n pub fn main() {\n-    let foo = \"foo\".to_owned();\n-    let bar = \"bar\".to_owned();\n+    let foo = \"foo\".to_string();\n+    let bar = \"bar\".to_string();\n \n     let mut list = AssociationList {pairs: Vec::new()};\n     list.push(foo.clone(), 22);"}, {"sha": "c9d5d02c2478f30c612d36c156052eb457542a4b", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -30,7 +30,7 @@ pub fn main() {\n     *i.borrow_mut() = 5;\n     assert_eq!((i_value, *i.borrow()), (2, 5));\n \n-    let s = Rc::new(\"foo\".to_owned());\n+    let s = Rc::new(\"foo\".to_string());\n     assert!(s.equiv(&(\"foo\")));\n     assert_eq!(s.as_slice(), \"foo\");\n "}, {"sha": "b28494109deb750330465e7ca317c0af97c3d724", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -28,8 +28,8 @@ pub fn main() {\n     *(*i).borrow_mut() = 5;\n     assert_eq!((i_value, *(*i).borrow()), (2, 5));\n \n-    let s = Rc::new(\"foo\".to_owned());\n-    assert_eq!(*s, \"foo\".to_owned());\n+    let s = Rc::new(\"foo\".to_string());\n+    assert_eq!(*s, \"foo\".to_string());\n     assert_eq!((*s).as_slice(), \"foo\");\n \n     let mut_s = Rc::new(RefCell::new(String::from_str(\"foo\")));"}, {"sha": "bf7a8fabff33b4025a68ad70d6a8bc31b11e829c", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -35,7 +35,7 @@ fn rename_directory() {\n             })\n         });\n         assert!((ostream as uint != 0u));\n-        let s = \"hello\".to_owned();\n+        let s = \"hello\".to_string();\n         \"hello\".with_c_str(|buf| {\n             let write_len = libc::fwrite(buf as *libc::c_void,\n                                          1u as libc::size_t,"}, {"sha": "90faf97893a0fb016ab0469168fd515339f987fa", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -18,35 +18,35 @@ use std::option::Some;\n pub fn main() {\n     let mut map: HashMap<SendStr, uint> = HashMap::new();\n     assert!(map.insert(Slice(\"foo\"), 42));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 42));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 42));\n     assert!(!map.insert(Slice(\"foo\"), 42));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 42));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 42));\n \n     assert!(!map.insert(Slice(\"foo\"), 43));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 44));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 44));\n     assert!(!map.insert(Slice(\"foo\"), 45));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 46));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 46));\n \n     let v = 46;\n \n-    assert_eq!(map.find(&Owned(\"foo\".to_owned())), Some(&v));\n+    assert_eq!(map.find(&Owned(\"foo\".to_string())), Some(&v));\n     assert_eq!(map.find(&Slice(\"foo\")), Some(&v));\n \n     let (a, b, c, d) = (50, 51, 52, 53);\n \n     assert!(map.insert(Slice(\"abc\"), a));\n-    assert!(map.insert(Owned(\"bcd\".to_owned()), b));\n+    assert!(map.insert(Owned(\"bcd\".to_string()), b));\n     assert!(map.insert(Slice(\"cde\"), c));\n-    assert!(map.insert(Owned(\"def\".to_owned()), d));\n+    assert!(map.insert(Owned(\"def\".to_string()), d));\n \n     assert!(!map.insert(Slice(\"abc\"), a));\n-    assert!(!map.insert(Owned(\"bcd\".to_owned()), b));\n+    assert!(!map.insert(Owned(\"bcd\".to_string()), b));\n     assert!(!map.insert(Slice(\"cde\"), c));\n-    assert!(!map.insert(Owned(\"def\".to_owned()), d));\n+    assert!(!map.insert(Owned(\"def\".to_string()), d));\n \n-    assert!(!map.insert(Owned(\"abc\".to_owned()), a));\n+    assert!(!map.insert(Owned(\"abc\".to_string()), a));\n     assert!(!map.insert(Slice(\"bcd\"), b));\n-    assert!(!map.insert(Owned(\"cde\".to_owned()), c));\n+    assert!(!map.insert(Owned(\"cde\".to_string()), c));\n     assert!(!map.insert(Slice(\"def\"), d));\n \n     assert_eq!(map.find_equiv(&(\"abc\")), Some(&a));"}, {"sha": "9c727314ffbf50900f5ffaf2b210ee0b925f9624", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -19,50 +19,50 @@ use std::option::Some;\n pub fn main() {\n     let mut map: TreeMap<SendStr, uint> = TreeMap::new();\n     assert!(map.insert(Slice(\"foo\"), 42));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 42));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 42));\n     assert!(!map.insert(Slice(\"foo\"), 42));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 42));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 42));\n \n     assert!(!map.insert(Slice(\"foo\"), 43));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 44));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 44));\n     assert!(!map.insert(Slice(\"foo\"), 45));\n-    assert!(!map.insert(Owned(\"foo\".to_owned()), 46));\n+    assert!(!map.insert(Owned(\"foo\".to_string()), 46));\n \n     let v = 46;\n \n-    assert_eq!(map.find(&Owned(\"foo\".to_owned())), Some(&v));\n+    assert_eq!(map.find(&Owned(\"foo\".to_string())), Some(&v));\n     assert_eq!(map.find(&Slice(\"foo\")), Some(&v));\n \n     let (a, b, c, d) = (50, 51, 52, 53);\n \n     assert!(map.insert(Slice(\"abc\"), a));\n-    assert!(map.insert(Owned(\"bcd\".to_owned()), b));\n+    assert!(map.insert(Owned(\"bcd\".to_string()), b));\n     assert!(map.insert(Slice(\"cde\"), c));\n-    assert!(map.insert(Owned(\"def\".to_owned()), d));\n+    assert!(map.insert(Owned(\"def\".to_string()), d));\n \n     assert!(!map.insert(Slice(\"abc\"), a));\n-    assert!(!map.insert(Owned(\"bcd\".to_owned()), b));\n+    assert!(!map.insert(Owned(\"bcd\".to_string()), b));\n     assert!(!map.insert(Slice(\"cde\"), c));\n-    assert!(!map.insert(Owned(\"def\".to_owned()), d));\n+    assert!(!map.insert(Owned(\"def\".to_string()), d));\n \n-    assert!(!map.insert(Owned(\"abc\".to_owned()), a));\n+    assert!(!map.insert(Owned(\"abc\".to_string()), a));\n     assert!(!map.insert(Slice(\"bcd\"), b));\n-    assert!(!map.insert(Owned(\"cde\".to_owned()), c));\n+    assert!(!map.insert(Owned(\"cde\".to_string()), c));\n     assert!(!map.insert(Slice(\"def\"), d));\n \n     assert_eq!(map.find(&Slice(\"abc\")), Some(&a));\n     assert_eq!(map.find(&Slice(\"bcd\")), Some(&b));\n     assert_eq!(map.find(&Slice(\"cde\")), Some(&c));\n     assert_eq!(map.find(&Slice(\"def\")), Some(&d));\n \n-    assert_eq!(map.find(&Owned(\"abc\".to_owned())), Some(&a));\n-    assert_eq!(map.find(&Owned(\"bcd\".to_owned())), Some(&b));\n-    assert_eq!(map.find(&Owned(\"cde\".to_owned())), Some(&c));\n-    assert_eq!(map.find(&Owned(\"def\".to_owned())), Some(&d));\n+    assert_eq!(map.find(&Owned(\"abc\".to_string())), Some(&a));\n+    assert_eq!(map.find(&Owned(\"bcd\".to_string())), Some(&b));\n+    assert_eq!(map.find(&Owned(\"cde\".to_string())), Some(&c));\n+    assert_eq!(map.find(&Owned(\"def\".to_string())), Some(&d));\n \n     assert!(map.pop(&Slice(\"foo\")).is_some());\n     assert_eq!(map.move_iter().map(|(k, v)| format_strbuf!(\"{}{}\", k, v))\n                               .collect::<Vec<String>>()\n                               .concat(),\n-               \"abc50bcd51cde52def53\".to_owned());\n+               \"abc50bcd51cde52def53\".to_string());\n }"}, {"sha": "ef14e0ba931b5525d42131e35a5315c1ab610ec5", "filename": "src/test/run-pass/seq-compare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fseq-compare.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -10,9 +10,9 @@\n \n \n pub fn main() {\n-    assert!((\"hello\".to_owned() < \"hellr\".to_owned()));\n-    assert!((\"hello \".to_owned() > \"hello\".to_owned()));\n-    assert!((\"hello\".to_owned() != \"there\".to_owned()));\n+    assert!((\"hello\".to_string() < \"hellr\".to_string()));\n+    assert!((\"hello \".to_string() > \"hello\".to_string()));\n+    assert!((\"hello\".to_string() != \"there\".to_string()));\n     assert!((vec!(1, 2, 3, 4) > vec!(1, 2, 3)));\n     assert!((vec!(1, 2, 3) < vec!(1, 2, 3, 4)));\n     assert!((vec!(1, 2, 4, 4) > vec!(1, 2, 3, 4)));"}, {"sha": "75d7b3ed2cde5b944110c222d747f64839b65394", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -11,7 +11,7 @@\n \n \n pub fn main() {\n-    let s = \"hello\".to_owned();\n+    let s = \"hello\".to_string();\n     let c: u8 = s.as_slice()[4];\n     println!(\"{:?}\", c);\n     assert_eq!(c, 0x6f as u8);"}, {"sha": "e8c18607f95a03b9caf79daf2f140f2f4f6c7f2f", "filename": "src/test/run-pass/struct-lit-functional-no-fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -25,8 +25,8 @@ pub fn main() {\n     assert_eq!(foo, foo_);\n \n     let foo = Foo {\n-        bar: \"one\".to_owned(),\n-        baz: \"two\".to_owned()\n+        bar: \"one\".to_string(),\n+        baz: \"two\".to_string()\n     };\n \n     let foo_ = foo.clone();"}, {"sha": "18336a603187de5a2bffd509f10a67bf62ab7f52", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -36,7 +36,7 @@ fn test_vec() {\n \n fn test_str() {\n     let (tx, rx) = channel();\n-    let s0 = \"test\".to_owned();\n+    let s0 = \"test\".to_string();\n     tx.send(s0);\n     let s1 = rx.recv();\n     assert_eq!(s1.as_slice()[0], 't' as u8);"}, {"sha": "fc4acfd5bb3c29314bf4500ee71e6a1578b1b523", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -36,5 +36,5 @@ impl<T: Clone> Getter<T> for Option<T> {\n \n pub fn main() {\n     assert_eq!(3.do_get2(), (3, 3));\n-    assert_eq!(Some(\"hi\".to_owned()).do_get2(), (\"hi\".to_owned(), \"hi\".to_owned()));\n+    assert_eq!(Some(\"hi\".to_string()).do_get2(), (\"hi\".to_string(), \"hi\".to_string()));\n }"}, {"sha": "4061a475e6cadf86f9c2ae52da615f33227dc277", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4348e23b269739657d934b532ad061bfd6d92309/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=4348e23b269739657d934b532ad061bfd6d92309", "patch": "@@ -29,7 +29,7 @@ fn make_uniq_closure<A:Send>(a: A) -> proc():Send -> uint {\n fn empty_pointy() -> @RefCell<Pointy> {\n     return @RefCell::new(Pointy {\n         a : none,\n-        d : make_uniq_closure(\"hi\".to_owned())\n+        d : make_uniq_closure(\"hi\".to_string())\n     })\n }\n "}]}