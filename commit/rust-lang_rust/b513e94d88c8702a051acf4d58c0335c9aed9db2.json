{"sha": "b513e94d88c8702a051acf4d58c0335c9aed9db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTNlOTRkODhjODcwMmEwNTFhY2Y0ZDU4YzAzMzVjOWFlZDlkYjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T22:03:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T22:03:22Z"}, "message": "Conditionals", "tree": {"sha": "5656edeea3efc1288c3157298980fce5fa701726", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5656edeea3efc1288c3157298980fce5fa701726"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b513e94d88c8702a051acf4d58c0335c9aed9db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b513e94d88c8702a051acf4d58c0335c9aed9db2", "html_url": "https://github.com/rust-lang/rust/commit/b513e94d88c8702a051acf4d58c0335c9aed9db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b513e94d88c8702a051acf4d58c0335c9aed9db2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b84fbf36d04e54f68f914f724c8e804233d3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b84fbf36d04e54f68f914f724c8e804233d3aa", "html_url": "https://github.com/rust-lang/rust/commit/e4b84fbf36d04e54f68f914f724c8e804233d3aa"}], "stats": {"total": 148, "additions": 141, "deletions": 7}, "files": [{"sha": "9f80b3ebf53ed67a73c179c7beef58a1ccac9cf5", "filename": "src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -135,6 +135,7 @@ Grammar(\n         \"PATH_EXPR\",\n         \"LAMBDA_EXPR\",\n         \"IF_EXPR\",\n+        \"WHILE_EXPR\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n         \"MATCH_EXPR\","}, {"sha": "6a0d47d82ba434c84b67315bf57a04e79bade79b", "filename": "src/grammar/expressions/atom.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/src%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/src%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fatom.rs?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n pub(super) const ATOM_EXPR_FIRST: TokenSet =\n     token_set_union![\n         LITERAL_FIRST,\n-        token_set![L_PAREN, PIPE, MOVE_KW, IF_KW, MATCH_KW, UNSAFE_KW, L_CURLY, RETURN_KW,\n+        token_set![L_PAREN, PIPE, MOVE_KW, IF_KW, WHILE_KW, MATCH_KW, UNSAFE_KW, L_CURLY, RETURN_KW,\n                    IDENT, SELF_KW, SUPER_KW, COLONCOLON ],\n     ];\n \n@@ -47,6 +47,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n         PIPE => lambda_expr(p),\n         MOVE_KW if la == PIPE => lambda_expr(p),\n         IF_KW => if_expr(p),\n+        WHILE_KW => while_expr(p),\n         MATCH_KW => match_expr(p),\n         UNSAFE_KW if la == L_CURLY => block_expr(p),\n         L_CURLY => block_expr(p),\n@@ -97,7 +98,8 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n fn if_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(IF_KW));\n     let m = p.start();\n-    if_head(p);\n+    p.bump();\n+    cond(p);\n     block(p);\n     if p.at(ELSE_KW) {\n         p.bump();\n@@ -110,10 +112,28 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, IF_EXPR)\n }\n \n-fn if_head(p: &mut Parser) {\n-    assert!(p.at(IF_KW));\n+// test while_expr\n+// fn foo() {\n+//     while true {};\n+//     while let Some(x) = it.next() {};\n+// }\n+fn while_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(WHILE_KW));\n+    let m = p.start();\n     p.bump();\n-    expr_no_struct(p);\n+    cond(p);\n+    block(p);\n+    m.complete(p, WHILE_EXPR)\n+}\n+\n+// test cond\n+// fn foo() { if let Some(_) = None {} }\n+fn cond(p: &mut Parser) {\n+    if p.eat(LET_KW) {\n+        patterns::pattern(p);\n+        p.expect(EQ);\n+    }\n+    expr_no_struct(p)\n }\n \n // test match_expr\n@@ -152,8 +172,8 @@ fn match_arm(p: &mut Parser) {\n             break;\n         }\n     }\n-    if p.at(IF_KW) {\n-        if_head(p)\n+    if p.eat(IF_KW) {\n+        expr_no_struct(p);\n     }\n     p.expect(FAT_ARROW);\n     expr(p);"}, {"sha": "1d3d3b9c1e1591530ed0706090daf7392aa87926", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -125,6 +125,7 @@ pub enum SyntaxKind {\n     PATH_EXPR,\n     LAMBDA_EXPR,\n     IF_EXPR,\n+    WHILE_EXPR,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n     MATCH_EXPR,\n@@ -343,6 +344,7 @@ impl SyntaxKind {\n             PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n             LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n+            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n             BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n             MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },"}, {"sha": "fdb37ee6f331722b675f0a9e44136d657637db6c", "filename": "tests/data/parser/inline/0076_cond.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0076_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0076_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0076_cond.rs?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -0,0 +1 @@\n+fn foo() { if let Some(_) = None {} }"}, {"sha": "22eed8458232c7ee480ea6e3d900f559a7141883", "filename": "tests/data/parser/inline/0076_cond.txt", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0076_cond.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0076_cond.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0076_cond.txt?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -0,0 +1,42 @@\n+FILE@[0; 38)\n+  FN_ITEM@[0; 38)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 38)\n+      L_CURLY@[9; 10)\n+      IF_EXPR@[10; 36)\n+        WHITESPACE@[10; 11)\n+        IF_KW@[11; 13)\n+        WHITESPACE@[13; 14)\n+        LET_KW@[14; 17)\n+        TUPLE_PAT@[17; 26)\n+          PATH@[17; 22)\n+            PATH_SEGMENT@[17; 22)\n+              NAME_REF@[17; 22)\n+                WHITESPACE@[17; 18)\n+                IDENT@[18; 22) \"Some\"\n+          L_PAREN@[22; 23)\n+          PLACEHOLDER_PAT@[23; 24)\n+            UNDERSCORE@[23; 24)\n+          R_PAREN@[24; 25)\n+          WHITESPACE@[25; 26)\n+        EQ@[26; 27)\n+        PATH_EXPR@[27; 33)\n+          PATH@[27; 33)\n+            PATH_SEGMENT@[27; 33)\n+              NAME_REF@[27; 33)\n+                WHITESPACE@[27; 28)\n+                IDENT@[28; 32) \"None\"\n+                WHITESPACE@[32; 33)\n+        BLOCK_EXPR@[33; 36)\n+          L_CURLY@[33; 34)\n+          R_CURLY@[34; 35)\n+          WHITESPACE@[35; 36)\n+      R_CURLY@[36; 37)\n+      WHITESPACE@[37; 38)"}, {"sha": "293046a0494e626625ca8c0e6b2ac7b796b9c985", "filename": "tests/data/parser/inline/0077_while_expr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0077_while_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0077_while_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0077_while_expr.rs?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    while true {};\n+    while let Some(x) = it.next() {};\n+}"}, {"sha": "447b4b88070e5d54962c3d7eb297196fbb872428", "filename": "tests/data/parser/inline/0077_while_expr.txt", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0077_while_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b513e94d88c8702a051acf4d58c0335c9aed9db2/tests%2Fdata%2Fparser%2Finline%2F0077_while_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0077_while_expr.txt?ref=b513e94d88c8702a051acf4d58c0335c9aed9db2", "patch": "@@ -0,0 +1,64 @@\n+FILE@[0; 70)\n+  FN_ITEM@[0; 70)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 70)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 34)\n+        WHILE_EXPR@[10; 28)\n+          WHITESPACE@[10; 15)\n+          WHILE_KW@[15; 20)\n+          LITERAL@[20; 26)\n+            WHITESPACE@[20; 21)\n+            TRUE_KW@[21; 25)\n+            WHITESPACE@[25; 26)\n+          BLOCK_EXPR@[26; 28)\n+            L_CURLY@[26; 27)\n+            R_CURLY@[27; 28)\n+        SEMI@[28; 29)\n+        WHITESPACE@[29; 34)\n+      EXPR_STMT@[34; 68)\n+        WHILE_EXPR@[34; 66)\n+          WHILE_KW@[34; 39)\n+          WHITESPACE@[39; 40)\n+          LET_KW@[40; 43)\n+          TUPLE_PAT@[43; 52)\n+            PATH@[43; 48)\n+              PATH_SEGMENT@[43; 48)\n+                NAME_REF@[43; 48)\n+                  WHITESPACE@[43; 44)\n+                  IDENT@[44; 48) \"Some\"\n+            L_PAREN@[48; 49)\n+            BIND_PAT@[49; 50)\n+              NAME@[49; 50)\n+                IDENT@[49; 50) \"x\"\n+            R_PAREN@[50; 51)\n+            WHITESPACE@[51; 52)\n+          EQ@[52; 53)\n+          METHOD_CALL_EXPR@[53; 64)\n+            PATH_EXPR@[53; 56)\n+              PATH@[53; 56)\n+                PATH_SEGMENT@[53; 56)\n+                  NAME_REF@[53; 56)\n+                    WHITESPACE@[53; 54)\n+                    IDENT@[54; 56) \"it\"\n+            DOT@[56; 57)\n+            NAME_REF@[57; 61)\n+              IDENT@[57; 61) \"next\"\n+            ARG_LIST@[61; 64)\n+              L_PAREN@[61; 62)\n+              R_PAREN@[62; 63)\n+              WHITESPACE@[63; 64)\n+          BLOCK_EXPR@[64; 66)\n+            L_CURLY@[64; 65)\n+            R_CURLY@[65; 66)\n+        SEMI@[66; 67)\n+        WHITESPACE@[67; 68)\n+      R_CURLY@[68; 69)\n+      WHITESPACE@[69; 70)"}]}