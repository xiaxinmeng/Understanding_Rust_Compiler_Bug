{"sha": "977200310abe3ca6c71d467e585654537b5309c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzIwMDMxMGFiZTNjYTZjNzFkNDY3ZTU4NTY1NDUzN2I1MzA5YzI=", "commit": {"author": {"name": "Pirh", "email": "pirh.badger@gmail.com", "date": "2017-10-08T18:09:16Z"}, "committer": {"name": "Pirh", "email": "pirh.badger@gmail.com", "date": "2017-10-08T18:09:16Z"}, "message": "Remove ./ prefix from relative URLs\n\nAlso remove trailing whitespace to pass tidy checks.", "tree": {"sha": "271b8231479b22a391d3dbfb1c215d3250587cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271b8231479b22a391d3dbfb1c215d3250587cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977200310abe3ca6c71d467e585654537b5309c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977200310abe3ca6c71d467e585654537b5309c2", "html_url": "https://github.com/rust-lang/rust/commit/977200310abe3ca6c71d467e585654537b5309c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977200310abe3ca6c71d467e585654537b5309c2/comments", "author": null, "committer": null, "parents": [{"sha": "19029d5627218aa01f52c68b27dec71d39974cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/19029d5627218aa01f52c68b27dec71d39974cd7", "html_url": "https://github.com/rust-lang/rust/commit/19029d5627218aa01f52c68b27dec71d39974cd7"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "af64e68182084ef080e17cced756f0e54d023040", "filename": "src/libstd/process.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/977200310abe3ca6c71d467e585654537b5309c2/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977200310abe3ca6c71d467e585654537b5309c2/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=977200310abe3ca6c71d467e585654537b5309c2", "patch": "@@ -745,10 +745,10 @@ impl fmt::Debug for Output {\n /// Describes what to do with a standard I/O stream for a child process when\n /// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n ///\n-/// [`stdin`]: ./struct.Command.html#method.stdin\n-/// [`stdout`]: ./struct.Command.html#method.stdout\n-/// [`stderr`]: ./struct.Command.html#method.stderr\n-/// [`Command`]: ./struct.Command.html\n+/// [`stdin`]: struct.Command.html#method.stdin\n+/// [`stdout`]: struct.Command.html#method.stdout\n+/// [`stderr`]: struct.Command.html#method.stderr\n+/// [`Command`]: struct.Command.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(imp::Stdio);\n \n@@ -783,12 +783,12 @@ impl Stdio {\n     ///     .stdout(Stdio::piped())\n     ///     .spawn()\n     ///     .expect(\"Failed to spawn child process\");\n-    /// \n+    ///\n     /// {\n     ///     let mut stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n     ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n     /// }\n-    /// \n+    ///\n     /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");\n     /// ```\n@@ -818,13 +818,13 @@ impl Stdio {\n     ///\n     /// ```no_run\n     /// use std::process::{Command, Stdio};\n-    ///  \n+    ///\n     /// let output = Command::new(\"rev\")\n     ///     .stdin(Stdio::inherit())\n     ///     .stdout(Stdio::piped())\n     ///     .output()\n     ///     .expect(\"Failed to execute command\");\n-    /// \n+    ///\n     /// println!(\"You piped in the reverse of: {}\", String::from_utf8_lossy(&output.stdout));\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -854,13 +854,13 @@ impl Stdio {\n     ///\n     /// ```no_run\n     /// use std::process::{Command, Stdio};\n-    /// \n+    ///\n     /// let output = Command::new(\"rev\")\n     ///     .stdin(Stdio::null())\n     ///     .stdout(Stdio::piped())\n     ///     .output()\n     ///     .expect(\"Failed to execute command\");\n-    ///  \n+    ///\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n     /// // Ignores any piped-in input\n     /// ```"}]}