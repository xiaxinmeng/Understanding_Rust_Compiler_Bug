{"sha": "0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "node_id": "C_kwDOAAsO6NoAKDBlNjc0YjNlYzVlMmMyMzhlNjc1NmQ1MTJmYTM5ZWZjMWNlZWI3NGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-29T09:56:30Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-29T09:56:30Z"}, "message": "Some tracing cleanups", "tree": {"sha": "2d679726c7a8bf12af0e7378a9593499b6183659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d679726c7a8bf12af0e7378a9593499b6183659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "html_url": "https://github.com/rust-lang/rust/commit/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0", "html_url": "https://github.com/rust-lang/rust/commit/493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "70cdf903038253e6be9d3fdadad9afc5860ff8c9", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "patch": "@@ -28,7 +28,7 @@ use std::ffi::CStr;\n use std::iter;\n use std::ops::Deref;\n use std::ptr;\n-use tracing::debug;\n+use tracing::{debug, instrument};\n \n // All Builders must have an llfn associated with them\n #[must_use]\n@@ -464,15 +464,15 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn load_operand(&mut self, place: PlaceRef<'tcx, &'ll Value>) -> OperandRef<'tcx, &'ll Value> {\n-        debug!(\"PlaceRef::load: {:?}\", place);\n-\n         assert_eq!(place.llextra.is_some(), place.layout.is_unsized());\n \n         if place.layout.is_zst() {\n             return OperandRef::new_zst(self, place.layout);\n         }\n \n+        #[instrument(level = \"trace\", skip(bx))]\n         fn scalar_load_metadata<'a, 'll, 'tcx>(\n             bx: &mut Builder<'a, 'll, 'tcx>,\n             load: &'ll Value,"}, {"sha": "d8b09f8ec2e7362c8db70be607d68236f5107f00", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "patch": "@@ -1623,7 +1623,7 @@ extern \"C\" {\n         B: &Builder<'a>,\n         Val: &'a Value,\n         DestTy: &'a Type,\n-        IsSized: bool,\n+        IsSigned: bool,\n     ) -> &'a Value;\n \n     // Comparisons"}, {"sha": "95281b3d4c304829135863f508d00178fe6969b1", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "patch": "@@ -204,6 +204,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     }\n \n     /// Obtain the actual discriminant of a value.\n+    #[instrument(level = \"trace\", skip(bx))]\n     pub fn codegen_get_discr<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         self,\n         bx: &mut Bx,\n@@ -420,12 +421,12 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+    #[instrument(level = \"debug\", skip(self, bx))]\n     pub fn codegen_place(\n         &mut self,\n         bx: &mut Bx,\n         place_ref: mir::PlaceRef<'tcx>,\n     ) -> PlaceRef<'tcx, Bx::Value> {\n-        debug!(\"codegen_place(place_ref={:?})\", place_ref);\n         let cx = self.cx;\n         let tcx = self.cx.tcx();\n "}, {"sha": "6a87da3ba89105f677490f4deb9caeb3d81acacf", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "patch": "@@ -15,14 +15,13 @@ use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_target::abi::{Abi, Int, Variants};\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+    #[instrument(level = \"debug\", skip(self, bx))]\n     pub fn codegen_rvalue(\n         &mut self,\n         mut bx: Bx,\n         dest: PlaceRef<'tcx, Bx::Value>,\n         rvalue: &mir::Rvalue<'tcx>,\n     ) -> Bx {\n-        debug!(\"codegen_rvalue(dest.llval={:?}, rvalue={:?})\", dest.llval, rvalue);\n-\n         match *rvalue {\n             mir::Rvalue::Use(ref operand) => {\n                 let cg_operand = self.codegen_operand(&mut bx, operand);"}, {"sha": "f452f29883f939a86d35bd16b92b81913eac60d1", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "patch": "@@ -6,9 +6,8 @@ use crate::traits::BuilderMethods;\n use crate::traits::*;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n+    #[instrument(level = \"debug\", skip(self, bx))]\n     pub fn codegen_statement(&mut self, mut bx: Bx, statement: &mir::Statement<'tcx>) -> Bx {\n-        debug!(\"codegen_statement(statement={:?})\", statement);\n-\n         self.set_debug_loc(&mut bx, statement.source_info);\n         match statement.kind {\n             mir::StatementKind::Assign(box (ref place, ref rvalue)) => {"}, {"sha": "e1ca813bda1c65e7129adbe855101ddf66aeb7b3", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e674b3ec5e2c238e6756d512fa39efc1ceeb74a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=0e674b3ec5e2c238e6756d512fa39efc1ceeb74a", "patch": "@@ -32,13 +32,14 @@ impl<'tcx> Cx<'tcx> {\n         exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()\n     }\n \n+    #[instrument(level = \"debug\", skip(self, hir_expr))]\n     pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {\n         let temp_lifetime =\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, hir_expr.hir_id.local_id);\n         let expr_scope =\n             region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };\n \n-        debug!(\"Expr::make_mirror(): id={}, span={:?}\", hir_expr.hir_id, hir_expr.span);\n+        debug!(?hir_expr.hir_id, ?hir_expr.span);\n \n         let mut expr = self.make_mirror_unadjusted(hir_expr);\n \n@@ -49,7 +50,7 @@ impl<'tcx> Cx<'tcx> {\n \n         // Now apply adjustments, if any.\n         for adjustment in self.typeck_results.expr_adjustments(hir_expr) {\n-            debug!(\"make_mirror: expr={:?} applying adjustment={:?}\", expr, adjustment);\n+            trace!(?expr, ?adjustment);\n             let span = expr.span;\n             expr =\n                 self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));"}]}