{"sha": "9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOGM2NGI5OTY2YTJlNmZlNmIwMjI0OTFlYjNmYjdiYjgxZWMyOTI=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-26T11:49:22Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-26T11:49:22Z"}, "message": "Push try! to call site of interpolated_or_expr_span!", "tree": {"sha": "a688a07dcbe84f2a82c61887be97523ecc62baa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a688a07dcbe84f2a82c61887be97523ecc62baa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "html_url": "https://github.com/rust-lang/rust/commit/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc8f4ff80a4343bacfcab9629eb681e576dee48", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc8f4ff80a4343bacfcab9629eb681e576dee48", "html_url": "https://github.com/rust-lang/rust/commit/2bc8f4ff80a4343bacfcab9629eb681e576dee48"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "4c818da633607f81787595da1f530cffb9d0dd5d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9d8c64b9966a2e6fe6b022491eb3fb7bb81ec292", "patch": "@@ -239,12 +239,13 @@ macro_rules! interpolated_or_expr_span {\n     ($p:expr, $parse_expr:expr) => {\n         {\n             let is_interpolated = $p.token.is_interpolated();\n-            let e = $parse_expr;\n-            if is_interpolated {\n-                ($p.last_span, e)\n-            } else {\n-                (e.span, e)\n-            }\n+            $parse_expr.map(|e| {\n+                if is_interpolated {\n+                    ($p.last_span, e)\n+                } else {\n+                    (e.span, e)\n+                }\n+            })\n         }\n     }\n }\n@@ -2338,7 +2339,7 @@ impl<'a> Parser<'a> {\n                                   -> PResult<'a, P<Expr>> {\n         let attrs = try!(self.parse_or_use_outer_attributes(already_parsed_attrs));\n \n-        let (span, b) = interpolated_or_expr_span!(self, try!(self.parse_bottom_expr()));\n+        let (span, b) = try!(interpolated_or_expr_span!(self, self.parse_bottom_expr()));\n         self.parse_dot_or_call_expr_with(b, span.lo, attrs)\n     }\n \n@@ -2724,30 +2725,30 @@ impl<'a> Parser<'a> {\n         let ex = match self.token {\n             token::Not => {\n                 self.bump();\n-                let (span, e) = interpolated_or_expr_span!(self,\n-                                                           try!(self.parse_prefix_expr(None)));\n+                let (span, e) = try!(interpolated_or_expr_span!(self,\n+                                                           self.parse_prefix_expr(None)));\n                 hi = span.hi;\n                 self.mk_unary(UnNot, e)\n             }\n             token::BinOp(token::Minus) => {\n                 self.bump();\n-                let (span, e) = interpolated_or_expr_span!(self,\n-                                                           try!(self.parse_prefix_expr(None)));\n+                let (span, e) = try!(interpolated_or_expr_span!(self,\n+                                                           self.parse_prefix_expr(None)));\n                 hi = span.hi;\n                 self.mk_unary(UnNeg, e)\n             }\n             token::BinOp(token::Star) => {\n                 self.bump();\n-                let (span, e) = interpolated_or_expr_span!(self,\n-                                                           try!(self.parse_prefix_expr(None)));\n+                let (span, e) = try!(interpolated_or_expr_span!(self,\n+                                                           self.parse_prefix_expr(None)));\n                 hi = span.hi;\n                 self.mk_unary(UnDeref, e)\n             }\n             token::BinOp(token::And) | token::AndAnd => {\n                 try!(self.expect_and());\n                 let m = try!(self.parse_mutability());\n-                let (span, e) = interpolated_or_expr_span!(self,\n-                                                           try!(self.parse_prefix_expr(None)));\n+                let (span, e) = try!(interpolated_or_expr_span!(self,\n+                                                           self.parse_prefix_expr(None)));\n                 hi = span.hi;\n                 ExprAddrOf(m, e)\n             }\n@@ -2766,8 +2767,8 @@ impl<'a> Parser<'a> {\n             }\n             token::Ident(..) if self.token.is_keyword(keywords::Box) => {\n                 self.bump();\n-                let (span, e) = interpolated_or_expr_span!(self,\n-                                                           try!(self.parse_prefix_expr(None)));\n+                let (span, e) = try!(interpolated_or_expr_span!(self,\n+                                                           self.parse_prefix_expr(None)));\n                 hi = span.hi;\n                 ExprBox(e)\n             }"}]}