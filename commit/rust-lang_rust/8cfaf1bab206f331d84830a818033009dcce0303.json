{"sha": "8cfaf1bab206f331d84830a818033009dcce0303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZmFmMWJhYjIwNmYzMzFkODQ4MzBhODE4MDMzMDA5ZGNjZTAzMDM=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-12-13T02:11:15Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-12-13T02:23:52Z"}, "message": "Trait item lifetime resolution for GATs", "tree": {"sha": "df045bfa25fc0c05cf9bafedcd4aaecdad28d6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df045bfa25fc0c05cf9bafedcd4aaecdad28d6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cfaf1bab206f331d84830a818033009dcce0303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cfaf1bab206f331d84830a818033009dcce0303", "html_url": "https://github.com/rust-lang/rust/commit/8cfaf1bab206f331d84830a818033009dcce0303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cfaf1bab206f331d84830a818033009dcce0303/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442b7bd10ab1955832fac39e47671327747033c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/442b7bd10ab1955832fac39e47671327747033c6", "html_url": "https://github.com/rust-lang/rust/commit/442b7bd10ab1955832fac39e47671327747033c6"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "d455108dad2c98dcd346204fa8c29d8e00af0ee3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 67, "deletions": 20, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/8cfaf1bab206f331d84830a818033009dcce0303/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cfaf1bab206f331d84830a818033009dcce0303/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=8cfaf1bab206f331d84830a818033009dcce0303", "patch": "@@ -624,30 +624,77 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        let tcx = self.tcx;\n-        if let hir::TraitItemKind::Method(ref sig, _) = trait_item.node {\n-            self.visit_early_late(\n-                Some(tcx.hir.get_parent(trait_item.id)),\n-                &sig.decl,\n-                &trait_item.generics,\n-                |this| intravisit::walk_trait_item(this, trait_item),\n-            )\n-        } else {\n-            intravisit::walk_trait_item(self, trait_item);\n+        use self::hir::TraitItemKind::*;\n+        match trait_item.node {\n+            Method(ref sig, _) => {\n+                let tcx = self.tcx;\n+                self.visit_early_late(\n+                    Some(tcx.hir.get_parent(trait_item.id)),\n+                    &sig.decl,\n+                    &trait_item.generics,\n+                    |this| intravisit::walk_trait_item(this, trait_item),\n+                );\n+            },\n+            Type(ref bounds, ref ty) => {\n+                let generics = &trait_item.generics;\n+                let mut index = self.next_early_index();\n+                debug!(\"visit_ty: index = {}\", index);\n+                let lifetimes = generics.lifetimes.iter()\n+                    .map(|lt_def| Region::early(&self.tcx.hir, &mut index, lt_def))\n+                    .collect();\n+\n+                let next_early_index = index + generics.ty_params.len() as u32;\n+                let scope = Scope::Binder { lifetimes, next_early_index, s: self.scope };\n+                self.with(scope, |_old_scope, this| {\n+                    this.visit_generics(generics);\n+                    for bound in bounds {\n+                        this.visit_ty_param_bound(bound);\n+                    }\n+                    if let Some(ty) = ty {\n+                        this.visit_ty(ty);\n+                    }\n+                });\n+            },\n+            Const(_, _) => {\n+                // Only methods and types support generics.\n+                assert!(!trait_item.generics.is_parameterized());\n+                intravisit::walk_trait_item(self, trait_item);\n+            },\n         }\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        let tcx = self.tcx;\n-        if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n-            self.visit_early_late(\n-                Some(tcx.hir.get_parent(impl_item.id)),\n-                &sig.decl,\n-                &impl_item.generics,\n-                |this| intravisit::walk_impl_item(this, impl_item),\n-            )\n-        } else {\n-            intravisit::walk_impl_item(self, impl_item);\n+        use self::hir::ImplItemKind::*;\n+        match impl_item.node {\n+            Method(ref sig, _) => {\n+                let tcx = self.tcx;\n+                self.visit_early_late(\n+                    Some(tcx.hir.get_parent(impl_item.id)),\n+                    &sig.decl,\n+                    &impl_item.generics,\n+                    |this| intravisit::walk_impl_item(this, impl_item),\n+                )\n+            },\n+            Type(ref ty) => {\n+                let generics = &impl_item.generics;\n+                let mut index = self.next_early_index();\n+                debug!(\"visit_ty: index = {}\", index);\n+                let lifetimes = generics.lifetimes.iter()\n+                    .map(|lt_def| Region::early(&self.tcx.hir, &mut index, lt_def))\n+                    .collect();\n+\n+                let next_early_index = index + generics.ty_params.len() as u32;\n+                let scope = Scope::Binder { lifetimes, next_early_index, s: self.scope };\n+                self.with(scope, |_old_scope, this| {\n+                    this.visit_generics(generics);\n+                    this.visit_ty(ty);\n+                });\n+            },\n+            Const(_, _) => {\n+                // Only methods and types support generics.\n+                assert!(!impl_item.generics.is_parameterized());\n+                intravisit::walk_impl_item(self, impl_item);\n+            },\n         }\n     }\n "}]}