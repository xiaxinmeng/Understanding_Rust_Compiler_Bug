{"sha": "adfacc5031837f410a30c2e1218c9d767c7f59eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZmFjYzUwMzE4MzdmNDEwYTMwYzJlMTIxOGM5ZDc2N2M3ZjU5ZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T18:55:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-29T18:55:20Z"}, "message": "rustc: Add a --time-passes option", "tree": {"sha": "520397e4e2687c5758da26fe7b0525e7792de4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/520397e4e2687c5758da26fe7b0525e7792de4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adfacc5031837f410a30c2e1218c9d767c7f59eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adfacc5031837f410a30c2e1218c9d767c7f59eb", "html_url": "https://github.com/rust-lang/rust/commit/adfacc5031837f410a30c2e1218c9d767c7f59eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adfacc5031837f410a30c2e1218c9d767c7f59eb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d24ff49e1578bf28de3cad808c8d68437c44d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d24ff49e1578bf28de3cad808c8d68437c44d4", "html_url": "https://github.com/rust-lang/rust/commit/f0d24ff49e1578bf28de3cad808c8d68437c44d4"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "29d43c0b4c729cc9de6b078d46133d3b6d6e8d8c", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/adfacc5031837f410a30c2e1218c9d767c7f59eb/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfacc5031837f410a30c2e1218c9d767c7f59eb/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=adfacc5031837f410a30c2e1218c9d767c7f59eb", "patch": "@@ -4,6 +4,7 @@ import front.creader;\n import front.parser;\n import front.token;\n import front.eval;\n+import front.ast;\n import middle.trans;\n import middle.resolve;\n import middle.capture;\n@@ -19,6 +20,7 @@ import std.option.none;\n import std._str;\n import std._vec;\n import std.io;\n+import std.Time;\n \n import std.GetOpts;\n import std.GetOpts.optopt;\n@@ -52,7 +54,7 @@ fn default_environment(session.session sess,\n \n fn parse_input(session.session sess,\n                       parser.parser p,\n-                      str input) -> @front.ast.crate {\n+                      str input) -> @ast.crate {\n     if (_str.ends_with(input, \".rc\")) {\n         ret parser.parse_crate_from_crate_file(p);\n     } else if (_str.ends_with(input, \".rs\")) {\n@@ -62,6 +64,18 @@ fn parse_input(session.session sess,\n     fail;\n }\n \n+fn time[T](bool do_it, str what, fn()->T thunk) -> T {\n+    if (!do_it) { ret thunk(); }\n+\n+    auto start = Time.get_time();\n+    auto rv = thunk();\n+    auto end = Time.get_time();\n+\n+    // FIXME: Actually do timeval math.\n+    log_err #fmt(\"time: %s took %u s\", what, (end.sec - start.sec) as uint);\n+    ret rv;\n+}\n+\n fn compile_input(session.session sess,\n                         eval.env env,\n                         str input, str output,\n@@ -70,23 +84,34 @@ fn compile_input(session.session sess,\n                         bool verify,\n                         bool save_temps,\n                         trans.output_type ot,\n+                        bool time_passes,\n                         vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n     auto p = parser.new_parser(sess, env, def, input, 0u);\n-    auto crate = parse_input(sess, p, input);\n+    auto crate = time[@ast.crate](time_passes, \"parsing\",\n+        bind parse_input(sess, p, input));\n     if (ot == trans.output_type_none) {ret;}\n \n-    crate = creader.read_crates(sess, crate, library_search_paths);\n-    crate = resolve.resolve_crate(sess, crate);\n-    capture.check_for_captures(sess, crate);\n+    crate = time[@ast.crate](time_passes, \"external crate reading\",\n+        bind creader.read_crates(sess, crate, library_search_paths));\n+    crate = time[@ast.crate](time_passes, \"resolution\",\n+        bind resolve.resolve_crate(sess, crate));\n+    time[()](time_passes, \"capture checking\",\n+        bind capture.check_for_captures(sess, crate));\n \n     auto ty_cx = ty.mk_ctxt(sess);\n-    auto typeck_result = typeck.check_crate(ty_cx, crate);\n+    auto typeck_result =\n+        time[typeck.typecheck_result](time_passes, \"typechecking\",\n+        bind typeck.check_crate(ty_cx, crate));\n     crate = typeck_result._0;\n     auto type_cache = typeck_result._1;\n-    crate = typestate_check.check_crate(crate);\n-    trans.trans_crate(sess, crate, ty_cx, type_cache, output, shared,\n-                      optimize, verify, save_temps, ot);\n+\n+    crate = time[@ast.crate](time_passes, \"typestate checking\",\n+        bind typestate_check.check_crate(crate));\n+\n+    time[()](time_passes, \"translation\",\n+        bind trans.trans_crate(sess, crate, ty_cx, type_cache, output, shared,\n+                               optimize, verify, save_temps, ot));\n }\n \n fn pretty_print_input(session.session sess,\n@@ -114,6 +139,7 @@ options:\n     -S                 compile only; do not assemble or link\n     -c                 compile and assemble, but do not link\n     --save-temps       write intermediate files in addition to normal output\n+    --time-passes      time the individual phases of the compiler\n     -h                 display this message\\n\\n\");\n }\n \n@@ -135,15 +161,16 @@ fn main(vec[str] args) {\n \n     auto crate_cache = common.new_int_hash[session.crate_metadata]();\n     auto target_crate_num = 0;\n-    let vec[@front.ast.meta_item] md = vec();\n+    let vec[@ast.meta_item] md = vec();\n     auto sess = session.session(target_crate_num, target_cfg, crate_cache,\n                                 md, front.codemap.new_codemap());\n \n     auto opts = vec(optflag(\"h\"), optflag(\"glue\"),\n                     optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"),\n-                    optflag(\"save-temps\"), optflag(\"noverify\"));\n+                    optflag(\"save-temps\"), optflag(\"time-passes\"),\n+                    optflag(\"noverify\"));\n     auto binary = _vec.shift[str](args);\n     auto match;\n     alt (GetOpts.getopts(args, opts)) {\n@@ -173,6 +200,7 @@ fn main(vec[str] args) {\n     auto save_temps = opt_present(match, \"save-temps\");\n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n     auto optimize = opt_present(match, \"O\");\n+    auto time_passes = opt_present(match, \"time-passes\");\n     auto n_inputs = _vec.len[str](match.free);\n \n     if (glue) {\n@@ -205,12 +233,12 @@ fn main(vec[str] args) {\n                 auto ofile = _str.concat(parts);\n                 compile_input(sess, env, ifile, ofile, shared,\n                               optimize, verify, save_temps, ot,\n-                              library_search_paths);\n+                              time_passes, library_search_paths);\n             }\n             case (some[str](?ofile)) {\n                 compile_input(sess, env, ifile, ofile, shared,\n                               optimize, verify, save_temps, ot,\n-                              library_search_paths);\n+                              time_passes, library_search_paths);\n             }\n         }\n     }"}, {"sha": "335614d2e153a621b0d0e393ded7f7b86d22df2c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adfacc5031837f410a30c2e1218c9d767c7f59eb/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfacc5031837f410a30c2e1218c9d767c7f59eb/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=adfacc5031837f410a30c2e1218c9d767c7f59eb", "patch": "@@ -7661,7 +7661,7 @@ fn create_crate_map(@crate_ctxt ccx) -> ValueRef {\n }\n \n fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n-               &ty.type_cache type_cache, str output, bool shared,\n+               ty.type_cache type_cache, str output, bool shared,\n                bool optimize, bool verify, bool save_temps, output_type ot) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),"}]}