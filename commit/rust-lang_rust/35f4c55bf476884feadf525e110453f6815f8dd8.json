{"sha": "35f4c55bf476884feadf525e110453f6815f8dd8", "node_id": "C_kwDOAAsO6NoAKDM1ZjRjNTViZjQ3Njg4NGZlYWRmNTI1ZTExMDQ1M2Y2ODE1ZjhkZDg", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-07-04T03:09:42Z"}, "committer": {"name": "Yacin Tmimi", "email": "yacintmimi@gmail.com", "date": "2022-07-05T12:51:36Z"}, "message": "refactor: remove some unnecessary clones", "tree": {"sha": "a4fddca3e706b6f3add2e1a9409d5731400bc4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4fddca3e706b6f3add2e1a9409d5731400bc4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35f4c55bf476884feadf525e110453f6815f8dd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35f4c55bf476884feadf525e110453f6815f8dd8", "html_url": "https://github.com/rust-lang/rust/commit/35f4c55bf476884feadf525e110453f6815f8dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35f4c55bf476884feadf525e110453f6815f8dd8/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae63f0018a7e18deb7ac0063379c2350a631fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae63f0018a7e18deb7ac0063379c2350a631fca", "html_url": "https://github.com/rust-lang/rust/commit/2ae63f0018a7e18deb7ac0063379c2350a631fca"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "5bccb22db4c172d2e4641b2c2039ddfd599a823e", "filename": "src/chains.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=35f4c55bf476884feadf525e110453f6815f8dd8", "patch": "@@ -70,8 +70,8 @@ use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::Shape;\n use crate::source_map::SpanUtils;\n use crate::utils::{\n-    self, first_line_width, last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n-    trimmed_last_line_width, wrap_str,\n+    self, filtered_str_fits, first_line_width, last_line_extendable, last_line_width, mk_sp,\n+    rewrite_ident, trimmed_last_line_width, wrap_str,\n };\n \n pub(crate) fn rewrite_chain(\n@@ -810,15 +810,14 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n                 .visual_indent(self.offset)\n                 .sub_width(self.offset)?;\n             let rewrite = item.rewrite(context, child_shape)?;\n-            match wrap_str(rewrite, context.config.max_width(), shape) {\n-                Some(rewrite) => root_rewrite.push_str(&rewrite),\n-                None => {\n-                    // We couldn't fit in at the visual indent, try the last\n-                    // indent.\n-                    let rewrite = item.rewrite(context, parent_shape)?;\n-                    root_rewrite.push_str(&rewrite);\n-                    self.offset = 0;\n-                }\n+            if filtered_str_fits(&rewrite, context.config.max_width(), shape) {\n+                root_rewrite.push_str(&rewrite);\n+            } else {\n+                // We couldn't fit in at the visual indent, try the last\n+                // indent.\n+                let rewrite = item.rewrite(context, parent_shape)?;\n+                root_rewrite.push_str(&rewrite);\n+                self.offset = 0;\n             }\n \n             self.shared.children = &self.shared.children[1..];"}, {"sha": "13d068d0c2dd5d34bce46e55641ca9b860c087da", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=35f4c55bf476884feadf525e110453f6815f8dd8", "patch": "@@ -29,9 +29,9 @@ use crate::spanned::Spanned;\n use crate::string::{rewrite_string, StringFormat};\n use crate::types::{rewrite_path, PathContext};\n use crate::utils::{\n-    colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n-    last_line_extendable, last_line_width, mk_sp, outer_attributes, semicolon_for_expr,\n-    unicode_str_width, wrap_str,\n+    colon_spaces, contains_skip, count_newlines, filtered_str_fits, first_line_ends_with,\n+    inner_attributes, last_line_extendable, last_line_width, mk_sp, outer_attributes,\n+    semicolon_for_expr, unicode_str_width, wrap_str,\n };\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -2037,8 +2037,7 @@ fn choose_rhs<R: Rewrite>(\n \n             match (orig_rhs, new_rhs) {\n                 (Some(ref orig_rhs), Some(ref new_rhs))\n-                    if wrap_str(new_rhs.clone(), context.config.max_width(), new_shape)\n-                        .is_none() =>\n+                    if !filtered_str_fits(&new_rhs, context.config.max_width(), new_shape) =>\n                 {\n                     Some(format!(\"{}{}\", before_space_str, orig_rhs))\n                 }"}, {"sha": "e78ef1f80667839b232687e733f860d1f3b06970", "filename": "src/macros.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=35f4c55bf476884feadf525e110453f6815f8dd8", "patch": "@@ -35,8 +35,8 @@ use crate::shape::{Indent, Shape};\n use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n use crate::utils::{\n-    format_visibility, indent_next_line, is_empty_line, mk_sp, remove_trailing_white_spaces,\n-    rewrite_ident, trim_left_preserve_layout, wrap_str, NodeIdExt,\n+    filtered_str_fits, format_visibility, indent_next_line, is_empty_line, mk_sp,\n+    remove_trailing_white_spaces, rewrite_ident, trim_left_preserve_layout, NodeIdExt,\n };\n use crate::visitor::FmtVisitor;\n \n@@ -1241,15 +1241,14 @@ impl MacroBranch {\n                 }\n             }\n         };\n-        let new_body = wrap_str(\n-            new_body_snippet.snippet.to_string(),\n-            config.max_width(),\n-            shape,\n-        )?;\n+\n+        if !filtered_str_fits(&new_body_snippet.snippet, config.max_width(), shape) {\n+            return None;\n+        }\n \n         // Indent the body since it is in a block.\n         let indent_str = body_indent.to_string(&config);\n-        let mut new_body = LineClasses::new(new_body.trim_end())\n+        let mut new_body = LineClasses::new(new_body_snippet.snippet.trim_end())\n             .enumerate()\n             .fold(\n                 (String::new(), true),"}, {"sha": "0e87d6bb50e2d6438aac98a61eb39ea9b07d4804", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35f4c55bf476884feadf525e110453f6815f8dd8/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=35f4c55bf476884feadf525e110453f6815f8dd8", "patch": "@@ -384,14 +384,15 @@ macro_rules! skip_out_of_file_lines_range_visitor {\n // Wraps String in an Option. Returns Some when the string adheres to the\n // Rewrite constraints defined for the Rewrite trait and None otherwise.\n pub(crate) fn wrap_str(s: String, max_width: usize, shape: Shape) -> Option<String> {\n-    if is_valid_str(&filter_normal_code(&s), max_width, shape) {\n+    if filtered_str_fits(&s, max_width, shape) {\n         Some(s)\n     } else {\n         None\n     }\n }\n \n-fn is_valid_str(snippet: &str, max_width: usize, shape: Shape) -> bool {\n+pub(crate) fn filtered_str_fits(snippet: &str, max_width: usize, shape: Shape) -> bool {\n+    let snippet = &filter_normal_code(snippet);\n     if !snippet.is_empty() {\n         // First line must fits with `shape.width`.\n         if first_line_width(snippet) > shape.width {"}]}