{"sha": "df21a6f040a7011d509769a61ac7af9502636b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjFhNmYwNDBhNzAxMWQ1MDk3NjlhNjFhYzdhZjk1MDI2MzZiMzM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-18T15:29:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-18T15:29:39Z"}, "message": "Rollup merge of #62696 - chocol4te:fix_#62194, r=estebank\n\nCheck that trait is exported or public before adding hint\n\nCloses #62194.\n\nThis PR checks the `AccessLevels` of a trait to check whether adding the intercrate ambiguity hint is valid or not.\n\nI am unsure of both the use of `.unwrap()` as well as removing hints for [downstream *and* [upstream](https://github.com/rust-lang/rust/blob/92b0f52584c9375505ecdefdd7855b93a5919d51/src/librustc/traits/select.rs#L112-L142).", "tree": {"sha": "f689334b3263e364c5f76f6e3780cb7dafedbbcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f689334b3263e364c5f76f6e3780cb7dafedbbcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df21a6f040a7011d509769a61ac7af9502636b33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdMJBjCRBK7hj4Ov3rIwAAdHIIAKI04dbCR4xgDZL1aM2BxZLx\nit+1cMqsBn/wxPPXBb9Uwt/4Ssk1+VjPEUwrf3Bm7zlmerCb817Kl99Y09xLyAqq\nkUIQT6lXy0P6I6h37LHMby3opQ0+K6rGxn/YT+t4oXZf/qXdSwZt3bor0T5He8hT\n3wHlHajtwaqA2ZXhqXJbuH3z3/clLuoigOmFD3WlsTTY0A3g/iirhuKV/KcbwskZ\nyHi/+Xz36a+C7xf4/d4bKtE67oroW2vOAnSZXotD6ZevhSvaq67v8FEF6sOqGiU8\neg3DSIsyG6taOOy0W7JSHBktY78R34aiB8UqDMdoEM98OPYHrOnREk3CaFv9a/A=\n=wLV/\n-----END PGP SIGNATURE-----\n", "payload": "tree f689334b3263e364c5f76f6e3780cb7dafedbbcd\nparent cc16d0486933e02237190366de2eb43df2215c11\nparent 3c119443767553d31c4c028a7c5519750897fc0a\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563463779 -0400\ncommitter GitHub <noreply@github.com> 1563463779 -0400\n\nRollup merge of #62696 - chocol4te:fix_#62194, r=estebank\n\nCheck that trait is exported or public before adding hint\n\nCloses #62194.\n\nThis PR checks the `AccessLevels` of a trait to check whether adding the intercrate ambiguity hint is valid or not.\n\nI am unsure of both the use of `.unwrap()` as well as removing hints for [downstream *and* [upstream](https://github.com/rust-lang/rust/blob/92b0f52584c9375505ecdefdd7855b93a5919d51/src/librustc/traits/select.rs#L112-L142).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df21a6f040a7011d509769a61ac7af9502636b33", "html_url": "https://github.com/rust-lang/rust/commit/df21a6f040a7011d509769a61ac7af9502636b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df21a6f040a7011d509769a61ac7af9502636b33/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc16d0486933e02237190366de2eb43df2215c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc16d0486933e02237190366de2eb43df2215c11", "html_url": "https://github.com/rust-lang/rust/commit/cc16d0486933e02237190366de2eb43df2215c11"}, {"sha": "3c119443767553d31c4c028a7c5519750897fc0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c119443767553d31c4c028a7c5519750897fc0a", "html_url": "https://github.com/rust-lang/rust/commit/3c119443767553d31c4c028a7c5519750897fc0a"}], "stats": {"total": 29, "additions": 7, "deletions": 22}, "files": [{"sha": "8a84fca14380996cb0eb229a82843879e80cfdca", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -366,8 +366,13 @@ pub(super) fn specialization_graph_provider(\n                     }\n                 }\n \n-                for cause in &overlap.intercrate_ambiguity_causes {\n-                    cause.add_intercrate_ambiguity_hint(&mut err);\n+                let access_levels = tcx.privacy_access_levels(impl_def_id.krate);\n+                if let Some(id) = tcx.hir().as_local_hir_id(impl_def_id) {\n+                    if access_levels.is_exported(id) || access_levels.is_public(id) {\n+                        for cause in &overlap.intercrate_ambiguity_causes {\n+                            cause.add_intercrate_ambiguity_hint(&mut err);\n+                        }\n+                    }\n                 }\n \n                 if overlap.involves_placeholder {"}, {"sha": "dea948ff8abbb2f3d48439f34e8e8ae342b543ca", "filename": "src/test/ui/coherence/coherence-overlap-upstream.old.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.old.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -5,8 +5,6 @@ LL | impl<T> Foo for T where T: Remote {}\n    | --------------------------------- first implementation here\n LL | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n-   |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "dea948ff8abbb2f3d48439f34e8e8ae342b543ca", "filename": "src/test/ui/coherence/coherence-overlap-upstream.re.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-upstream.re.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -5,8 +5,6 @@ LL | impl<T> Foo for T where T: Remote {}\n    | --------------------------------- first implementation here\n LL | impl Foo for i16 {}\n    | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n-   |\n-   = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "0ec4f0bb8e74dbb66a598cf1d4a99ca72f671069", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.old.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.old.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n ...\n LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "0ec4f0bb8e74dbb66a598cf1d4a99ca72f671069", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_tuple.re.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_tuple.re.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n ...\n LL | impl MyTrait for lib::MyFundamentalStruct<(MyType,)> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyFundamentalStruct<(MyType,)>`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyFundamentalStruct<(MyType,)>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "e5862fdda7c58ffb08bdd15d35c9c413cc923599", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.old.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.old.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n ...\n LL | impl MyTrait for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "e5862fdda7c58ffb08bdd15d35c9c413cc923599", "filename": "src/test/ui/coherence/coherence_copy_like_err_struct.re.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_struct.re.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n ...\n LL | impl MyTrait for lib::MyStruct<MyType> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `lib::MyStruct<MyType>`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `lib::MyStruct<MyType>` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "a3c4ef8e105a2cfd62a4e3e89028c5ff64491d96", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.old.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.old.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n ...\n LL | impl MyTrait for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "a3c4ef8e105a2cfd62a4e3e89028c5ff64491d96", "filename": "src/test/ui/coherence/coherence_copy_like_err_tuple.re.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_tuple.re.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | impl<T: lib::MyCopy> MyTrait for T { }\n ...\n LL | impl MyTrait for (MyType,) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(MyType,)`\n-   |\n-   = note: upstream crates may add new impl of trait `lib::MyCopy` for type `(MyType,)` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "777e1fc9c27ea2f5f3cf263466213ad9464ec8ff", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -6,8 +6,6 @@ LL | #[derive(Clone)]\n ...\n LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n    | ------------------------------------------- first implementation here\n-   |\n-   = note: upstream crates may add new impl of trait `std::clone::Clone` for type `[_]` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "583c580d341ba720ac98b2397bc44283f1bfa43d", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df21a6f040a7011d509769a61ac7af9502636b33/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=df21a6f040a7011d509769a61ac7af9502636b33", "patch": "@@ -10,8 +10,6 @@ LL | | }\n LL | \n LL |   impl IntoPyDictPointer for ()\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n-   |\n-   = note: upstream crates may add new impl of trait `std::iter::Iterator` for type `()` in future versions\n \n error: aborting due to previous error\n "}]}