{"sha": "6f271dc49ce729a76eb702fcb6d15960aaf8c297", "node_id": "C_kwDOAAsO6NoAKDZmMjcxZGM0OWNlNzI5YTc2ZWI3MDJmY2I2ZDE1OTYwYWFmOGMyOTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-04T16:26:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-17T09:36:12Z"}, "message": "Cache dominators.", "tree": {"sha": "224bce0e8ec9c2295d2a69d71a4649be41d62be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224bce0e8ec9c2295d2a69d71a4649be41d62be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f271dc49ce729a76eb702fcb6d15960aaf8c297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f271dc49ce729a76eb702fcb6d15960aaf8c297", "html_url": "https://github.com/rust-lang/rust/commit/6f271dc49ce729a76eb702fcb6d15960aaf8c297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f271dc49ce729a76eb702fcb6d15960aaf8c297/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1267f630e01d19dcd9247ffb3a795aba0df461", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1267f630e01d19dcd9247ffb3a795aba0df461", "html_url": "https://github.com/rust-lang/rust/commit/aa1267f630e01d19dcd9247ffb3a795aba0df461"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "da9241253eeddc8d5cd13d6ebd409b9dee3e4110", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=6f271dc49ce729a76eb702fcb6d15960aaf8c297", "patch": "@@ -2382,7 +2382,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut back_edge_stack = Vec::new();\n \n         predecessor_locations(self.body, location).for_each(|predecessor| {\n-            if location.dominates(predecessor, self.dominators()) {\n+            if location.dominates(predecessor, self.dominators) {\n                 back_edge_stack.push(predecessor)\n             } else {\n                 stack.push(predecessor);\n@@ -2494,7 +2494,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             let mut has_predecessor = false;\n             predecessor_locations(self.body, location).for_each(|predecessor| {\n-                if location.dominates(predecessor, self.dominators()) {\n+                if location.dominates(predecessor, self.dominators) {\n                     back_edge_stack.push(predecessor)\n                 } else {\n                     stack.push(predecessor);"}, {"sha": "036391d074da846be9df2f31310b115aaebeec07", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=6f271dc49ce729a76eb702fcb6d15960aaf8c297", "patch": "@@ -46,7 +46,7 @@ struct InvalidationGenerator<'cx, 'tcx> {\n     all_facts: &'cx mut AllFacts,\n     location_table: &'cx LocationTable,\n     body: &'cx Body<'tcx>,\n-    dominators: Dominators<BasicBlock>,\n+    dominators: &'cx Dominators<BasicBlock>,\n     borrow_set: &'cx BorrowSet<'tcx>,\n }\n "}, {"sha": "4412687b007d97924e867a4912ad63ad79c0e97f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=6f271dc49ce729a76eb702fcb6d15960aaf8c297", "patch": "@@ -43,7 +43,6 @@ use rustc_target::abi::FieldIdx;\n \n use either::Either;\n use smallvec::SmallVec;\n-use std::cell::OnceCell;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::ops::Deref;\n@@ -331,7 +330,7 @@ fn do_mir_borrowck<'tcx>(\n                 used_mut: Default::default(),\n                 used_mut_upvars: SmallVec::new(),\n                 borrow_set: Rc::clone(&borrow_set),\n-                dominators: Default::default(),\n+                dominators: promoted_body.basic_blocks.dominators(),\n                 upvars: Vec::new(),\n                 local_names: IndexVec::from_elem(None, &promoted_body.local_decls),\n                 region_names: RefCell::default(),\n@@ -360,7 +359,7 @@ fn do_mir_borrowck<'tcx>(\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n         borrow_set: Rc::clone(&borrow_set),\n-        dominators: Default::default(),\n+        dominators: body.basic_blocks.dominators(),\n         upvars,\n         local_names,\n         region_names: RefCell::default(),\n@@ -592,7 +591,7 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     borrow_set: Rc<BorrowSet<'tcx>>,\n \n     /// Dominators for MIR\n-    dominators: OnceCell<Dominators<BasicBlock>>,\n+    dominators: &'cx Dominators<BasicBlock>,\n \n     /// Information about upvars not necessarily preserved in types or MIR\n     upvars: Vec<Upvar<'tcx>>,\n@@ -1103,7 +1102,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 (Read(kind), BorrowKind::Unique | BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n-                    if !is_active(this.dominators(), borrow, location) {\n+                    if !is_active(this.dominators, borrow, location) {\n                         assert!(allow_two_phase_borrow(borrow.kind));\n                         return Control::Continue;\n                     }\n@@ -2267,10 +2266,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<FieldIdx> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n-\n-    fn dominators(&self) -> &Dominators<BasicBlock> {\n-        self.dominators.get_or_init(|| self.body.basic_blocks.dominators())\n-    }\n }\n \n mod error {"}, {"sha": "835074806e90f159acb9b547cfcc38d21073770d", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=6f271dc49ce729a76eb702fcb6d15960aaf8c297", "patch": "@@ -84,7 +84,7 @@ impl DefLocation {\n \n struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     fx: &'mir FunctionCx<'a, 'tcx, Bx>,\n-    dominators: Dominators<mir::BasicBlock>,\n+    dominators: &'mir Dominators<mir::BasicBlock>,\n     locals: IndexVec<mir::Local, LocalKind>,\n }\n "}, {"sha": "27a43c0a0e9007da5b73c1a163f8b86e98b64daf", "filename": "compiler/rustc_middle/src/mir/basic_blocks.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs?ref=6f271dc49ce729a76eb702fcb6d15960aaf8c297", "patch": "@@ -28,6 +28,8 @@ struct Cache {\n     switch_sources: OnceCell<SwitchSources>,\n     is_cyclic: OnceCell<bool>,\n     postorder: OnceCell<Vec<BasicBlock>>,\n+    dominator_tree: OnceCell<DominatorTree<BasicBlock>>,\n+    dominators: OnceCell<Dominators<BasicBlock>>,\n }\n \n impl<'tcx> BasicBlocks<'tcx> {\n@@ -42,12 +44,12 @@ impl<'tcx> BasicBlocks<'tcx> {\n         *self.cache.is_cyclic.get_or_init(|| graph::is_cyclic(self))\n     }\n \n-    pub fn dominator_tree(&self) -> DominatorTree<BasicBlock> {\n-        dominator_tree(&self)\n+    pub fn dominator_tree(&self) -> &DominatorTree<BasicBlock> {\n+        self.cache.dominator_tree.get_or_init(|| dominator_tree(&self))\n     }\n \n-    pub fn dominators(&self) -> Dominators<BasicBlock> {\n-        dominators(&self.dominator_tree())\n+    pub fn dominators(&self) -> &Dominators<BasicBlock> {\n+        self.cache.dominators.get_or_init(|| dominators(self.dominator_tree()))\n     }\n \n     /// Returns predecessors for each basic block."}, {"sha": "c2b7e7c2d27960cb78df89dc5c102e3b0a3058d9", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f271dc49ce729a76eb702fcb6d15960aaf8c297/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=6f271dc49ce729a76eb702fcb6d15960aaf8c297", "patch": "@@ -68,8 +68,11 @@ impl SsaLocals {\n         let assignment_order = Vec::with_capacity(body.local_decls.len());\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n-        let dominators =\n-            if body.basic_blocks.len() > 2 { Some(body.basic_blocks.dominators()) } else { None };\n+        let dominators = if body.basic_blocks.len() > 2 {\n+            Some(body.basic_blocks.dominators().clone())\n+        } else {\n+            None\n+        };\n         let dominators = SmallDominators { inner: dominators };\n \n         let direct_uses = IndexVec::from_elem(0, &body.local_decls);"}]}