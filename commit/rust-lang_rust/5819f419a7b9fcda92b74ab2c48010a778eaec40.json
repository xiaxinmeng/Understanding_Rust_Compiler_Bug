{"sha": "5819f419a7b9fcda92b74ab2c48010a778eaec40", "node_id": "C_kwDOAAsO6NoAKDU4MTlmNDE5YTdiOWZjZGE5MmI3NGFiMmM0ODAxMGE3NzhlYWVjNDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T16:43:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T16:43:46Z"}, "message": "Auto merge of #102783 - RalfJung:tls, r=thomcc\n\nsync thread_local key conditions exactly with what the macro uses\n\nThis makes the `cfg` in `mod.rs` syntactically the same as those in `local.rs`.\n\nI don't think this should actually change anything, but seems better to be consistent?\nI looked into this due to https://github.com/rust-lang/rust/issues/102549, but this PR would make it *less* likely that `__OsLocalKeyInner` is going to get provided, so this cannot help with that issue.\n\nr? `@thomcc`", "tree": {"sha": "2f988c8cb12dabcb2f6d76595bfcbabcf1ab2016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f988c8cb12dabcb2f6d76595bfcbabcf1ab2016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5819f419a7b9fcda92b74ab2c48010a778eaec40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5819f419a7b9fcda92b74ab2c48010a778eaec40", "html_url": "https://github.com/rust-lang/rust/commit/5819f419a7b9fcda92b74ab2c48010a778eaec40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5819f419a7b9fcda92b74ab2c48010a778eaec40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1c3b385b6673b6ef37d80dfabe048e993c2ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1c3b385b6673b6ef37d80dfabe048e993c2ae2", "html_url": "https://github.com/rust-lang/rust/commit/ee1c3b385b6673b6ef37d80dfabe048e993c2ae2"}, {"sha": "5218e24f2c590a434de53e9ad3a68b4516e4938b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5218e24f2c590a434de53e9ad3a68b4516e4938b", "html_url": "https://github.com/rust-lang/rust/commit/5218e24f2c590a434de53e9ad3a68b4516e4938b"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "d7fd2130f7ccec5f84ff93187651e12d3550afc0", "filename": "library/std/src/sys/unix/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=5819f419a7b9fcda92b74ab2c48010a778eaec40", "patch": "@@ -17,6 +17,7 @@\n     target_os = \"redox\",\n     target_os = \"emscripten\"\n ))]\n+#[cfg_attr(target_family = \"wasm\", allow(unused))] // might remain unused depending on target details (e.g. wasm32-unknown-emscripten)\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::mem;\n     use crate::sys_common::thread_local_dtor::register_dtor_fallback;"}, {"sha": "84660ea588156908166e40832b6ace041b3df601", "filename": "library/std/src/sys/unsupported/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_local_dtor.rs?ref=5819f419a7b9fcda92b74ab2c48010a778eaec40", "patch": "@@ -1,5 +1,6 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n+#[cfg_attr(target_family = \"wasm\", allow(unused))] // unused on wasm32-unknown-unknown\n pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern \"C\" fn(*mut u8)) {\n     // FIXME: right now there is no concept of \"thread exit\", but this is likely\n     // going to show up at some point in the form of an exported symbol that the"}, {"sha": "5d267891bb0ed3b1538541624a3922134bbbb3b1", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=5819f419a7b9fcda92b74ab2c48010a778eaec40", "patch": "@@ -901,7 +901,7 @@ pub mod statik {\n }\n \n #[doc(hidden)]\n-#[cfg(target_thread_local)]\n+#[cfg(all(target_thread_local, not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),))]\n pub mod fast {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n@@ -1037,7 +1037,10 @@ pub mod fast {\n }\n \n #[doc(hidden)]\n-#[cfg(not(target_thread_local))]\n+#[cfg(all(\n+    not(target_thread_local),\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n pub mod os {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;"}, {"sha": "5d4a236bd2c3384542d0e6974adc0328dc9b04e7", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5819f419a7b9fcda92b74ab2c48010a778eaec40/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=5819f419a7b9fcda92b74ab2c48010a778eaec40", "patch": "@@ -150,6 +150,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![deny(unsafe_op_in_unsafe_fn)]\n+// Under `test`, `__FastLocalKeyInner` seems unused.\n+#![cfg_attr(test, allow(dead_code))]\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests;\n@@ -192,32 +194,40 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n-// Select the type used by the thread_local! macro to access TLS keys. There\n-// are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n+// Provide the type used by the thread_local! macro to access TLS keys. This\n+// needs to be kept in sync with the macro itself (in `local.rs`).\n+// There are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n // type is accessed via platform-specific API calls and is slow, while the \"fast\"\n // key type is accessed via code generated via LLVM, where TLS keys are set up\n // by the elf linker. \"static\" is for single-threaded platforms where a global\n // static is sufficient.\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(target_thread_local)]\n #[cfg(not(test))]\n+#[cfg(all(\n+    target_thread_local,\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n #[doc(hidden)]\n pub use self::local::fast::Key as __FastLocalKeyInner;\n-#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(target_thread_local)]\n-#[cfg(test)] // when building for tests, use real std's key\n-pub use realstd::thread::__FastLocalKeyInner;\n \n+// when building for tests, use real std's type\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(target_thread_local)]\n #[cfg(test)]\n-pub use self::local::fast::Key as __FastLocalKeyInnerUnused; // we import this anyway to silence 'unused' warnings\n+#[cfg(all(\n+    target_thread_local,\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n+pub use realstd::thread::__FastLocalKeyInner;\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n+#[cfg(all(\n+    not(target_thread_local),\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n #[doc(hidden)]\n-#[cfg(not(target_thread_local))]\n pub use self::local::os::Key as __OsLocalKeyInner;\n+\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n #[doc(hidden)]"}, {"sha": "32baeec4359c1079a40d7cb0a2ef8d24d531c8d8", "filename": "src/test/ui/threads-sendsync/issue-43733-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5819f419a7b9fcda92b74ab2c48010a778eaec40/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5819f419a7b9fcda92b74ab2c48010a778eaec40/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733-2.rs?ref=5819f419a7b9fcda92b74ab2c48010a778eaec40", "patch": "@@ -1,5 +1,5 @@\n+// ignore-wasm32\n // dont-check-compiler-stderr\n-\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n // On platforms *without* `#[thread_local]`, use"}, {"sha": "935e02944b97f4283c09caed4c06e49e8ab48a32", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5819f419a7b9fcda92b74ab2c48010a778eaec40/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5819f419a7b9fcda92b74ab2c48010a778eaec40/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=5819f419a7b9fcda92b74ab2c48010a778eaec40", "patch": "@@ -1,8 +1,8 @@\n+// ignore-wasm32\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n // normalize-stderr-test: \"__FastLocalKeyInner::<T>::get\" -> \"$$LOCALKEYINNER::<T>::get\"\n // normalize-stderr-test: \"__OsLocalKeyInner::<T>::get\" -> \"$$LOCALKEYINNER::<T>::get\"\n-\n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n "}]}