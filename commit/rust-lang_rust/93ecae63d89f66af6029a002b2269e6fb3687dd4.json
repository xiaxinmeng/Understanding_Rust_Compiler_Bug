{"sha": "93ecae63d89f66af6029a002b2269e6fb3687dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZWNhZTYzZDg5ZjY2YWY2MDI5YTAwMmIyMjY5ZTZmYjM2ODdkZDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-14T01:41:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-14T01:41:15Z"}, "message": "Rollup merge of #57451 - dlrobertson:can_use_as_ref_nit, r=estebank\n\nsuggestion-diagnostics: as_ref improve snippet\n\nImprove the code snippet suggested in suggestion-diagnostics when\nsuggesting the use of as_ref.\n\nGiven:\n\n```rust\nfn test(x: &usize) {}\nfn main() {\n    Some(42).map(|x| test(x));\n}\n```\n\nSuggest\n\n```\n  help: consider using `as_ref` instead: `as_ref().map`\n```\n\nInstead of\n\n```\n  help: consider using `as_ref` instead: `as_ref().`\n```", "tree": {"sha": "098b268f58da59c4fd385b6e8e4bb860ef36984a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098b268f58da59c4fd385b6e8e4bb860ef36984a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ecae63d89f66af6029a002b2269e6fb3687dd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZMc7CRBK7hj4Ov3rIwAAdHIIAA7fqPaZN7r46Za/9eHJMUmr\n5b7cAv4zrnZOnM+w9ekn+FLYeu8AN1VhBA5HwgWsMZIBFTwnLjdwmlEioEWWfghg\nOle5H0uUXw7DpVDLKZmJ8Z6f1LE4fs3k+lH/XEimQTPx/ket5Dltzhsw/CoT/Ujb\nXoXzm+EJVHA/JlDmXlHRiaUsZWrzOtoy7cEHIyfwR/cIyKyAMeZ62bDYh2O7zz1p\nVu6sZ02k1gldIImCt05I44t0hgJbKUcQf7mgATMwUYl1ZXzQHPbdmDMlGo08QFp8\ntWaVHcVSblO2gRTUCQT1+Dvwv2RQZQqGQ5V2wQKgm4O6FVm8e/PYQ8O51pO8LgY=\n=Ql8U\n-----END PGP SIGNATURE-----\n", "payload": "tree 098b268f58da59c4fd385b6e8e4bb860ef36984a\nparent 4772dc8087b1d0f2bab6d064fd930e596c82d439\nparent 285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550108475 +0100\ncommitter GitHub <noreply@github.com> 1550108475 +0100\n\nRollup merge of #57451 - dlrobertson:can_use_as_ref_nit, r=estebank\n\nsuggestion-diagnostics: as_ref improve snippet\n\nImprove the code snippet suggested in suggestion-diagnostics when\nsuggesting the use of as_ref.\n\nGiven:\n\n```rust\nfn test(x: &usize) {}\nfn main() {\n    Some(42).map(|x| test(x));\n}\n```\n\nSuggest\n\n```\n  help: consider using `as_ref` instead: `as_ref().map`\n```\n\nInstead of\n\n```\n  help: consider using `as_ref` instead: `as_ref().`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ecae63d89f66af6029a002b2269e6fb3687dd4", "html_url": "https://github.com/rust-lang/rust/commit/93ecae63d89f66af6029a002b2269e6fb3687dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ecae63d89f66af6029a002b2269e6fb3687dd4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4772dc8087b1d0f2bab6d064fd930e596c82d439", "url": "https://api.github.com/repos/rust-lang/rust/commits/4772dc8087b1d0f2bab6d064fd930e596c82d439", "html_url": "https://github.com/rust-lang/rust/commit/4772dc8087b1d0f2bab6d064fd930e596c82d439"}, {"sha": "285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc", "html_url": "https://github.com/rust-lang/rust/commit/285d4a7eb67cdf3ebba4b8fe60a5c5a6abf3edfc"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "bb9fc872b85d28065309456fdaede00533302649", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93ecae63d89f66af6029a002b2269e6fb3687dd4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ecae63d89f66af6029a002b2269e6fb3687dd4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=93ecae63d89f66af6029a002b2269e6fb3687dd4", "patch": "@@ -210,7 +210,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// ```\n     /// opt.map(|arg| { takes_ref(arg) });\n     /// ```\n-    fn can_use_as_ref(&self, expr: &hir::Expr) -> Option<(Span, &'static str, String)> {\n+    fn can_use_as_ref(\n+        &self,\n+        expr: &hir::Expr,\n+    ) -> Option<(Span, &'static str, String)> {\n         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = expr.node {\n             if let hir::def::Def::Local(id) = path.def {\n                 let parent = self.tcx.hir().get_parent_node(id);\n@@ -233,10 +236,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             self_ty.starts_with(\"std::option::Option\") ||\n                             self_ty.starts_with(\"std::result::Result\")\n                         ) && (name == \"map\" || name == \"and_then\");\n-                        if is_as_ref_able {\n-                            return Some((span.shrink_to_lo(),\n-                                         \"consider using `as_ref` instead\",\n-                                         \"as_ref().\".into()));\n+                        match (is_as_ref_able, self.sess().source_map().span_to_snippet(*span)) {\n+                            (true, Ok(src)) => {\n+                                return Some((*span, \"consider using `as_ref` instead\",\n+                                             format!(\"as_ref().{}\", src)));\n+                            },\n+                            _ => ()\n                         }\n                     }\n                 }"}, {"sha": "8143acc957b4ca243a802a432355645c413dd6e0", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93ecae63d89f66af6029a002b2269e6fb3687dd4/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93ecae63d89f66af6029a002b2269e6fb3687dd4/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=93ecae63d89f66af6029a002b2269e6fb3687dd4", "patch": "@@ -2,9 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:6:27\n    |\n LL |   opt.map(|arg| takes_ref(arg));\n-   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       ---                 ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().map`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`\n@@ -13,9 +13,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:37\n    |\n LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n-   |       -                             ^^^ expected &Foo, found struct `Foo`\n+   |       --------                      ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().and_then`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`\n@@ -24,9 +24,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:27\n    |\n LL |   opt.map(|arg| takes_ref(arg));\n-   |       -                   ^^^ expected &Foo, found struct `Foo`\n+   |       ---                 ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().map`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`\n@@ -35,9 +35,9 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:13:35\n    |\n LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |       -                           ^^^ expected &Foo, found struct `Foo`\n+   |       --------                    ^^^ expected &Foo, found struct `Foo`\n    |       |\n-   |       help: consider using `as_ref` instead: `as_ref().`\n+   |       help: consider using `as_ref` instead: `as_ref().and_then`\n    |\n    = note: expected type `&Foo`\n               found type `Foo`"}]}