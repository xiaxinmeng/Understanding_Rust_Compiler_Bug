{"sha": "27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "node_id": "C_kwDOAAsO6NoAKDI3YjQzMGJjYjM2ZTQ2Y2M1ZGNmZDg4ZWM2Y2VjMjYzOWFkMjQ2N2M", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-03-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-03-16T21:55:45Z"}, "message": "Tweak implementation of overflow checking assertions\n\nExtract and reuse logic controlling behaviour of overflow checking\nassertions instead of duplicating it three times.", "tree": {"sha": "9bb26a194c35f8cfa1b4141210a21e14d63e1bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb26a194c35f8cfa1b4141210a21e14d63e1bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "html_url": "https://github.com/rust-lang/rust/commit/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e386217dd996d293b3bde2285f6f5f4f502d7c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/e386217dd996d293b3bde2285f6f5f4f502d7c17", "html_url": "https://github.com/rust-lang/rust/commit/e386217dd996d293b3bde2285f6f5f4f502d7c17"}], "stats": {"total": 60, "additions": 19, "deletions": 41}, "files": [{"sha": "1b8e9312e2f587f6095a2643f35844aad980b54a", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -346,17 +346,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 crate::abi::codegen_return(fx);\n             }\n             TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n-                if !fx.tcx.sess.overflow_checks() {\n-                    let overflow_not_to_check = match msg {\n-                        AssertKind::OverflowNeg(..) => true,\n-                        AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n-                    if overflow_not_to_check {\n-                        let target = fx.get_block(*target);\n-                        fx.bcx.ins().jump(target, &[]);\n-                        continue;\n-                    }\n+                if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n+                    let target = fx.get_block(*target);\n+                    fx.bcx.ins().jump(target, &[]);\n+                    continue;\n                 }\n                 let cond = codegen_operand(fx, cond).load_scalar(fx);\n "}, {"sha": "f9aa2aecf65bc550296c1391af305275d6a06d3f", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -563,15 +563,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // with #[rustc_inherit_overflow_checks] and inlined from\n         // another crate (mostly core::num generic/#[inline] fns),\n         // while the current crate doesn't use overflow checks.\n-        if !bx.cx().check_overflow() {\n-            let overflow_not_to_check = match msg {\n-                AssertKind::OverflowNeg(..) => true,\n-                AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                _ => false,\n-            };\n-            if overflow_not_to_check {\n-                const_cond = Some(expected);\n-            }\n+        if !bx.cx().check_overflow() && msg.is_optional_overflow_check() {\n+            const_cond = Some(expected);\n         }\n \n         // Don't codegen the panic block if success if known."}, {"sha": "c134d3a6b2f2a41b40bfc5f70ecbebd5f4776050", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -155,7 +155,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Whether Assert(OverflowNeg) and Assert(Overflow) MIR terminators should actually\n     /// check for overflow.\n-    fn ignore_checkable_overflow_assertions(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n+    fn ignore_optional_overflow_checks(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n     /// Entry point for obtaining the MIR of anything that should get evaluated.\n     /// So not just functions and shims, but also const/static initializers, anonymous\n@@ -474,7 +474,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     }\n \n     #[inline(always)]\n-    fn ignore_checkable_overflow_assertions(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n+    fn ignore_optional_overflow_checks(_ecx: &InterpCx<$mir, $tcx, Self>) -> bool {\n         false\n     }\n "}, {"sha": "c2d1bc11c37b5e62edc51a9344de56ac23ea04b4", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -138,12 +138,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let ignored = M::ignore_checkable_overflow_assertions(self)\n-                    && match msg {\n-                        mir::AssertKind::OverflowNeg(..) => true,\n-                        mir::AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n+                let ignored =\n+                    M::ignore_optional_overflow_checks(self) && msg.is_optional_overflow_check();\n                 let cond_val = self.read_scalar(&self.eval_operand(cond, None)?)?.to_bool()?;\n                 if ignored || expected == cond_val {\n                     self.go_to_block(target);"}, {"sha": "3b26eb8a8ed3b4ac33742fafdcb118c6477d48d8", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -1274,6 +1274,13 @@ impl<'tcx> BasicBlockData<'tcx> {\n }\n \n impl<O> AssertKind<O> {\n+    /// Returns true if this an overflow checking assertion controlled by -C overflow-checks.\n+    pub fn is_optional_overflow_check(&self) -> bool {\n+        use AssertKind::*;\n+        use BinOp::*;\n+        matches!(self, OverflowNeg(..) | Overflow(Add | Sub | Mul | Shl | Shr, ..))\n+    }\n+\n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n     /// The caller is expected to handle `BoundsCheck` separately.\n@@ -1998,16 +2005,6 @@ impl BorrowKind {\n     }\n }\n \n-impl BinOp {\n-    /// The checkable operators are those whose overflow checking behavior is controlled by\n-    /// -Coverflow-checks option. The remaining operators have either no overflow conditions (e.g.,\n-    /// BitAnd, BitOr, BitXor) or are always checked for overflow (e.g., Div, Rem).\n-    pub fn is_checkable(self) -> bool {\n-        use self::BinOp::*;\n-        matches!(self, Add | Sub | Mul | Shl | Shr)\n-    }\n-}\n-\n impl<'tcx> Debug for Rvalue<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::Rvalue::*;"}, {"sha": "b16b6616415aab79f5fba0ee3ac487f4a607a228", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -646,8 +646,7 @@ pub enum TerminatorKind<'tcx> {\n     /// When overflow checking is disabled and this is run-time MIR (as opposed to compile-time MIR\n     /// that is used for CTFE), the following variants of this terminator behave as `goto target`:\n     /// - `OverflowNeg(..)`,\n-    /// - `Overflow(op, ..)` if op is a \"checkable\" operation (add, sub, mul, shl, shr, but NOT\n-    /// div or rem).\n+    /// - `Overflow(op, ..)` if op is add, sub, mul, shl, shr, but NOT div or rem.\n     Assert {\n         cond: Operand<'tcx>,\n         expected: bool,"}, {"sha": "3a14704d9cc4ad8ce6afd6e6b0c607cb76be3f02", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b430bcb36e46cc5dcfd88ec6cec2639ad2467c/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=27b430bcb36e46cc5dcfd88ec6cec2639ad2467c", "patch": "@@ -822,7 +822,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for MiriMachine<'mir, 'tcx> {\n     }\n \n     #[inline(always)]\n-    fn ignore_checkable_overflow_assertions(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n+    fn ignore_optional_overflow_checks(ecx: &MiriInterpCx<'mir, 'tcx>) -> bool {\n         !ecx.tcx.sess.overflow_checks()\n     }\n "}]}