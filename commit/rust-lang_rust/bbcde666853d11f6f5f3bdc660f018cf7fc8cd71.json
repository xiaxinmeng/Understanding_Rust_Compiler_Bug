{"sha": "bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "node_id": "C_kwDOAAsO6NoAKGJiY2RlNjY2ODUzZDExZjZmNWYzYmRjNjYwZjAxOGNmN2ZjOGNkNzE", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-09-28T12:27:32Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2022-09-28T12:27:32Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "28df6eeea41c8e772bb65a172962f74282db1de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28df6eeea41c8e772bb65a172962f74282db1de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmM0PbYACgkQHKDfKvWd\naKWdTQ//cAFsrud/JqSw3wvp9fXLrD3IVdsLa4VzeGej6y+yhx23ovi6wpCLYTDv\n/UeO5LJjyRrUVbNiVwztQDXMZxso2BjiPszofE+Mmxea0F/WcrGGM74gYLzy35Et\nRUGiGqij8SytovKDe+tY4LkZYShlOf9QJcW8kPYVHXpSUKKNsE0YqyKUvq9DcaQV\n6z74YLa2DDy/QFeIA5O6X+d/hby27Qj8fb+p399tzhtY03nk85Z850gZSEcAOgik\n864htyRI0qlk6CUBA/MHm6mpqGpJb73zhAw8TxOFF02gtrCMUPev7YGz6WgA/Z/d\n4PtXJKHE8ztfcMcLl+xK7Z6FGsbK+gi4o4+hWRWSLf4NDyI+pHVg/K8z48G7ZYAN\nyqaswsaavA4lA6sDmevmGIejQlxXIIzWWCCUHNWlql9FsGbl5grEOnZcPVNnlCSO\n47Q6kzuucDw/fBwUWiis6Aw7fZTDdxdLRdoRq6DY1bmQwqyHA3aSegJEKLwgnJim\n+JCmDfVz1j5fX8jNeUmUp0jbqAXRjJzpewqOXM6aY3BEphOIzSlcwv2eyOzhEnAp\nk25eCIu+OOIkhP0D85bJ/ZgUUhG78yg24FHUcwbc0oyTt/DZx/ePl1JT8Nxc1M+f\njdRf8Nv98fu5tXYArUlpRVdbicEfE+nyaPfx/VMqphkRcVlH18Q=\n=b7E7\n-----END PGP SIGNATURE-----", "payload": "tree 28df6eeea41c8e772bb65a172962f74282db1de1\nparent e5ce6d18df883f593e72f7958bebdc3ebcdbe85e\nparent 0f6932a1f7623663e50922225ea304340949c051\nauthor Philipp Krones <hello@philkrones.com> 1664368052 +0200\ncommitter Philipp Krones <hello@philkrones.com> 1664368052 +0200\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "html_url": "https://github.com/rust-lang/rust/commit/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ce6d18df883f593e72f7958bebdc3ebcdbe85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ce6d18df883f593e72f7958bebdc3ebcdbe85e", "html_url": "https://github.com/rust-lang/rust/commit/e5ce6d18df883f593e72f7958bebdc3ebcdbe85e"}, {"sha": "0f6932a1f7623663e50922225ea304340949c051", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6932a1f7623663e50922225ea304340949c051", "html_url": "https://github.com/rust-lang/rust/commit/0f6932a1f7623663e50922225ea304340949c051"}], "stats": {"total": 5391, "additions": 3672, "deletions": 1719}, "files": [{"sha": "ef6140152ffca50f6cff224cb49fec97284f4451", "filename": "CHANGELOG.md", "status": "modified", "additions": 154, "deletions": 2, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -6,11 +6,161 @@ document.\n \n ## Unreleased / In Rust Nightly\n \n-[d7b5cbf0...master](https://github.com/rust-lang/rust-clippy/compare/d7b5cbf0...master)\n+[3c7e7dbc...master](https://github.com/rust-lang/rust-clippy/compare/3c7e7dbc...master)\n+\n+## Rust 1.64\n+\n+Current stable, released 2022-09-22\n+\n+[d7b5cbf0...3c7e7dbc](https://github.com/rust-lang/rust-clippy/compare/d7b5cbf0...3c7e7dbc)\n+\n+### New Lints\n+\n+* [`arithmetic_side_effects`]\n+  [#9130](https://github.com/rust-lang/rust-clippy/pull/9130)\n+* [`invalid_utf8_in_unchecked`]\n+  [#9105](https://github.com/rust-lang/rust-clippy/pull/9105)\n+* [`assertions_on_result_states`]\n+  [#9225](https://github.com/rust-lang/rust-clippy/pull/9225)\n+* [`manual_find`]\n+  [#8649](https://github.com/rust-lang/rust-clippy/pull/8649)\n+* [`manual_retain`]\n+  [#8972](https://github.com/rust-lang/rust-clippy/pull/8972)\n+* [`default_instead_of_iter_empty`]\n+  [#8989](https://github.com/rust-lang/rust-clippy/pull/8989)\n+* [`manual_rem_euclid`]\n+  [#9031](https://github.com/rust-lang/rust-clippy/pull/9031)\n+* [`obfuscated_if_else`]\n+  [#9148](https://github.com/rust-lang/rust-clippy/pull/9148)\n+* [`std_instead_of_core`]\n+  [#9103](https://github.com/rust-lang/rust-clippy/pull/9103)\n+* [`std_instead_of_alloc`]\n+  [#9103](https://github.com/rust-lang/rust-clippy/pull/9103)\n+* [`alloc_instead_of_core`]\n+  [#9103](https://github.com/rust-lang/rust-clippy/pull/9103)\n+* [`explicit_auto_deref`]\n+  [#8355](https://github.com/rust-lang/rust-clippy/pull/8355)\n+\n+\n+### Moves and Deprecations\n+\n+* Moved [`format_push_string`] to `restriction` (now allow-by-default)\n+  [#9161](https://github.com/rust-lang/rust-clippy/pull/9161)\n+\n+### Enhancements\n+\n+* [`significant_drop_in_scrutinee`]: Now gives more context in the lint message\n+  [#8981](https://github.com/rust-lang/rust-clippy/pull/8981)\n+* [`single_match`], [`single_match_else`]: Now catches more `Option` cases\n+  [#8985](https://github.com/rust-lang/rust-clippy/pull/8985)\n+* [`unused_async`]: Now works for async methods\n+  [#9025](https://github.com/rust-lang/rust-clippy/pull/9025)\n+* [`manual_filter_map`], [`manual_find_map`]: Now lint more expressions\n+  [#8958](https://github.com/rust-lang/rust-clippy/pull/8958)\n+* [`question_mark`]: Now works for simple `if let` expressions\n+  [#8356](https://github.com/rust-lang/rust-clippy/pull/8356)\n+* [`undocumented_unsafe_blocks`]: Now finds comments before the start of closures\n+  [#9117](https://github.com/rust-lang/rust-clippy/pull/9117)\n+* [`trait_duplication_in_bounds`]: Now catches duplicate bounds in where clauses\n+  [#8703](https://github.com/rust-lang/rust-clippy/pull/8703)\n+* [`shadow_reuse`], [`shadow_same`], [`shadow_unrelated`]: Now lint in const blocks\n+  [#9124](https://github.com/rust-lang/rust-clippy/pull/9124)\n+* [`slow_vector_initialization`]: Now detects cases with `vec.capacity()`\n+  [#8953](https://github.com/rust-lang/rust-clippy/pull/8953)\n+* [`unused_self`]: Now respects the `avoid-breaking-exported-api` config option\n+  [#9199](https://github.com/rust-lang/rust-clippy/pull/9199)\n+* [`box_collection`]: Now supports all std collections\n+  [#9170](https://github.com/rust-lang/rust-clippy/pull/9170)\n+\n+### False Positive Fixes\n+\n+* [`significant_drop_in_scrutinee`]: Now ignores calls to `IntoIterator::into_iter`\n+  [#9140](https://github.com/rust-lang/rust-clippy/pull/9140)\n+* [`while_let_loop`]: Now ignores cases when the significant drop order would change\n+  [#8981](https://github.com/rust-lang/rust-clippy/pull/8981)\n+* [`branches_sharing_code`]: Now ignores cases where moved variables have a significant\n+  drop or variable modifications can affect the conditions\n+  [#9138](https://github.com/rust-lang/rust-clippy/pull/9138)\n+* [`let_underscore_lock`]: Now ignores bindings that aren't locked\n+  [#8990](https://github.com/rust-lang/rust-clippy/pull/8990)\n+* [`trivially_copy_pass_by_ref`]: Now tracks lifetimes and ignores cases where unsafe\n+  pointers are used\n+  [#8639](https://github.com/rust-lang/rust-clippy/pull/8639)\n+* [`let_unit_value`]: No longer ignores `#[allow]` attributes on the value\n+  [#9082](https://github.com/rust-lang/rust-clippy/pull/9082)\n+* [`declare_interior_mutable_const`]: Now ignores the `thread_local!` macro\n+  [#9015](https://github.com/rust-lang/rust-clippy/pull/9015)\n+* [`if_same_then_else`]: Now ignores branches with `todo!` and `unimplemented!`\n+  [#9006](https://github.com/rust-lang/rust-clippy/pull/9006)\n+* [`enum_variant_names`]: Now ignores names with `_` prefixes\n+  [#9032](https://github.com/rust-lang/rust-clippy/pull/9032)\n+* [`let_unit_value`]: Now ignores cases, where the unit type is manually specified\n+  [#9056](https://github.com/rust-lang/rust-clippy/pull/9056)\n+* [`match_same_arms`]: Now ignores branches with `todo!`\n+  [#9207](https://github.com/rust-lang/rust-clippy/pull/9207)\n+* [`assign_op_pattern`]: Ignores cases that break borrowing rules\n+  [#9214](https://github.com/rust-lang/rust-clippy/pull/9214)\n+* [`extra_unused_lifetimes`]: No longer triggers in derive macros\n+  [#9037](https://github.com/rust-lang/rust-clippy/pull/9037)\n+* [`mismatching_type_param_order`]: Now ignores complicated generic parameters\n+  [#9146](https://github.com/rust-lang/rust-clippy/pull/9146)\n+* [`equatable_if_let`]: No longer lints in macros\n+  [#9074](https://github.com/rust-lang/rust-clippy/pull/9074)\n+* [`new_without_default`]: Now ignores generics and lifetime parameters on `fn new`\n+  [#9115](https://github.com/rust-lang/rust-clippy/pull/9115)\n+* [`needless_borrow`]: Now ignores cases that result in the execution of different traits\n+  [#9096](https://github.com/rust-lang/rust-clippy/pull/9096)\n+* [`declare_interior_mutable_const`]: No longer triggers in thread-local initializers\n+  [#9246](https://github.com/rust-lang/rust-clippy/pull/9246)\n+\n+### Suggestion Fixes/Improvements\n+\n+* [`type_repetition_in_bounds`]: The suggestion now works with maybe bounds\n+  [#9132](https://github.com/rust-lang/rust-clippy/pull/9132)\n+* [`transmute_ptr_to_ref`]: Now suggests `pointer::cast` when possible\n+  [#8939](https://github.com/rust-lang/rust-clippy/pull/8939)\n+* [`useless_format`]: Now suggests the correct variable name\n+  [#9237](https://github.com/rust-lang/rust-clippy/pull/9237)\n+* [`or_fun_call`]: The lint emission will now only span over the `unwrap_or` call\n+  [#9144](https://github.com/rust-lang/rust-clippy/pull/9144)\n+* [`neg_multiply`]: Now suggests adding parentheses around suggestion if needed\n+  [#9026](https://github.com/rust-lang/rust-clippy/pull/9026)\n+* [`unnecessary_lazy_evaluations`]: Now suggest for `bool::then_some` for lazy evaluation\n+  [#9099](https://github.com/rust-lang/rust-clippy/pull/9099)\n+* [`manual_flatten`]: Improved message for long code snippets\n+  [#9156](https://github.com/rust-lang/rust-clippy/pull/9156)\n+* [`explicit_counter_loop`]: The suggestion is now machine applicable\n+  [#9149](https://github.com/rust-lang/rust-clippy/pull/9149)\n+* [`needless_borrow`]: Now keeps parentheses around fields, when needed\n+  [#9210](https://github.com/rust-lang/rust-clippy/pull/9210)\n+* [`while_let_on_iterator`]: The suggestion now works in `FnOnce` closures\n+  [#9134](https://github.com/rust-lang/rust-clippy/pull/9134)\n+\n+### ICE Fixes\n+\n+* Fix ICEs related to `#![feature(generic_const_exprs)]` usage\n+  [#9241](https://github.com/rust-lang/rust-clippy/pull/9241)\n+* Fix ICEs related to reference lints\n+  [#9093](https://github.com/rust-lang/rust-clippy/pull/9093)\n+* [`question_mark`]: Fix ICE on zero field tuple structs\n+  [#9244](https://github.com/rust-lang/rust-clippy/pull/9244)\n+\n+### Documentation Improvements\n+\n+* [`needless_option_take`]: Now includes a \"What it does\" and \"Why is this bad?\" section.\n+  [#9022](https://github.com/rust-lang/rust-clippy/pull/9022)\n+\n+### Others\n+\n+* Using `--cap-lints=allow` and only `--force-warn`ing some will now work with Clippy's driver\n+  [#9036](https://github.com/rust-lang/rust-clippy/pull/9036)\n+* Clippy now tries to read the `rust-version` from `Cargo.toml` to identify the\n+  minimum supported rust version\n+  [#8774](https://github.com/rust-lang/rust-clippy/pull/8774)\n \n ## Rust 1.63\n \n-Current stable, released 2022-08-11\n+Released 2022-08-11\n \n [7c21f91b...d7b5cbf0](https://github.com/rust-lang/rust-clippy/compare/7c21f91b...d7b5cbf0)\n \n@@ -3609,6 +3759,7 @@ Released 2018-09-13\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection\n+[`box_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_default\n [`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\n@@ -4124,6 +4275,7 @@ Released 2018-09-13\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n [`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n [`uninit_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec\n+[`uninlined_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n [`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash"}, {"sha": "5e960fdbcf1189504a85270d7c3e53b43d87ff7c", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -28,7 +28,7 @@ tempfile = { version = \"3.2\", optional = true }\n termize = \"0.1\"\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.8\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.9\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n toml = \"0.5\"\n@@ -42,6 +42,7 @@ filetime = \"0.2\"\n rustc-workspace-hack = \"1.0\"\n \n # UI test dependencies\n+clap = { version = \"3.1\", features = [\"derive\"] }\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\""}, {"sha": "2562314418172b67b8d8aaf1cc5ba68d281d1f4d", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -82,16 +82,16 @@ pub fn run(check: bool, verbose: bool) {\n     fn output_err(err: CliError) {\n         match err {\n             CliError::CommandFailed(command, stderr) => {\n-                eprintln!(\"error: A command failed! `{}`\\nstderr: {}\", command, stderr);\n+                eprintln!(\"error: A command failed! `{command}`\\nstderr: {stderr}\");\n             },\n             CliError::IoError(err) => {\n-                eprintln!(\"error: {}\", err);\n+                eprintln!(\"error: {err}\");\n             },\n             CliError::RustfmtNotInstalled => {\n                 eprintln!(\"error: rustfmt nightly is not installed.\");\n             },\n             CliError::WalkDirError(err) => {\n-                eprintln!(\"error: {}\", err);\n+                eprintln!(\"error: {err}\");\n             },\n             CliError::IntellijSetupActive => {\n                 eprintln!("}, {"sha": "d3e036692040f6f03294892956ef1de9cd3e812f", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -41,7 +41,7 @@ fn main() {\n                 matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n-                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n+                Err(e) => eprintln!(\"Unable to create lint: {e}\"),\n             }\n         },\n         Some((\"setup\", sub_command)) => match sub_command.subcommand() {"}, {"sha": "9e15f1504fa91f6e6f2c883380f52d5355862c7a", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 74, "deletions": 93, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,5 +1,5 @@\n use crate::clippy_project_root;\n-use indoc::{indoc, writedoc};\n+use indoc::{formatdoc, writedoc};\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -23,7 +23,7 @@ impl<T> Context for io::Result<T> {\n         match self {\n             Ok(t) => Ok(t),\n             Err(e) => {\n-                let message = format!(\"{}: {}\", text.as_ref(), e);\n+                let message = format!(\"{}: {e}\", text.as_ref());\n                 Err(io::Error::new(ErrorKind::Other, message))\n             },\n         }\n@@ -72,7 +72,7 @@ fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n         let lint_contents = get_lint_file_contents(lint, enable_msrv);\n         let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n         write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())?;\n-        println!(\"Generated lint file: `{}`\", lint_path);\n+        println!(\"Generated lint file: `{lint_path}`\");\n \n         Ok(())\n     }\n@@ -86,7 +86,7 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n \n         path.push(\"src\");\n         fs::create_dir(&path)?;\n-        let header = format!(\"// compile-flags: --crate-name={}\", lint_name);\n+        let header = format!(\"// compile-flags: --crate-name={lint_name}\");\n         write_file(path.join(\"main.rs\"), get_test_file_contents(lint_name, Some(&header)))?;\n \n         Ok(())\n@@ -106,7 +106,7 @@ fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n         let test_contents = get_test_file_contents(lint.name, None);\n         write_file(lint.project_root.join(&test_path), test_contents)?;\n \n-        println!(\"Generated test file: `{}`\", test_path);\n+        println!(\"Generated test file: `{test_path}`\");\n     }\n \n     Ok(())\n@@ -186,38 +186,36 @@ pub(crate) fn get_stabilization_version() -> String {\n }\n \n fn get_test_file_contents(lint_name: &str, header_commands: Option<&str>) -> String {\n-    let mut contents = format!(\n-        indoc! {\"\n-            #![allow(unused)]\n-            #![warn(clippy::{})]\n-\n-            fn main() {{\n-                // test code goes here\n-            }}\n-        \"},\n-        lint_name\n+    let mut contents = formatdoc!(\n+        r#\"\n+        #![allow(unused)]\n+        #![warn(clippy::{lint_name})]\n+\n+        fn main() {{\n+            // test code goes here\n+        }}\n+    \"#\n     );\n \n     if let Some(header) = header_commands {\n-        contents = format!(\"{}\\n{}\", header, contents);\n+        contents = format!(\"{header}\\n{contents}\");\n     }\n \n     contents\n }\n \n fn get_manifest_contents(lint_name: &str, hint: &str) -> String {\n-    format!(\n-        indoc! {r#\"\n-            # {}\n-\n-            [package]\n-            name = \"{}\"\n-            version = \"0.1.0\"\n-            publish = false\n-\n-            [workspace]\n-        \"#},\n-        hint, lint_name\n+    formatdoc!(\n+        r#\"\n+        # {hint}\n+\n+        [package]\n+        name = \"{lint_name}\"\n+        version = \"0.1.0\"\n+        publish = false\n+\n+        [workspace]\n+    \"#\n     )\n }\n \n@@ -238,85 +236,70 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     let name_upper = lint_name.to_uppercase();\n \n     result.push_str(&if enable_msrv {\n-        format!(\n-            indoc! {\"\n-                use clippy_utils::msrvs;\n-                {pass_import}\n-                use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n-                use rustc_semver::RustcVersion;\n-                use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n+        formatdoc!(\n+            r#\"\n+            use clippy_utils::msrvs;\n+            {pass_import}\n+            use rustc_lint::{{{context_import}, {pass_type}, LintContext}};\n+            use rustc_semver::RustcVersion;\n+            use rustc_session::{{declare_tool_lint, impl_lint_pass}};\n \n-            \"},\n-            pass_type = pass_type,\n-            pass_import = pass_import,\n-            context_import = context_import,\n+        \"#\n         )\n     } else {\n-        format!(\n-            indoc! {\"\n-                {pass_import}\n-                use rustc_lint::{{{context_import}, {pass_type}}};\n-                use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n-\n-            \"},\n-            pass_import = pass_import,\n-            pass_type = pass_type,\n-            context_import = context_import\n+        formatdoc!(\n+            r#\"\n+            {pass_import}\n+            use rustc_lint::{{{context_import}, {pass_type}}};\n+            use rustc_session::{{declare_lint_pass, declare_tool_lint}};\n+\n+        \"#\n         )\n     });\n \n     let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n-        format!(\n-            indoc! {\"\n-                pub struct {name_camel} {{\n-                    msrv: Option<RustcVersion>,\n-                }}\n+        formatdoc!(\n+            r#\"\n+            pub struct {name_camel} {{\n+                msrv: Option<RustcVersion>,\n+            }}\n \n-                impl {name_camel} {{\n-                    #[must_use]\n-                    pub fn new(msrv: Option<RustcVersion>) -> Self {{\n-                        Self {{ msrv }}\n-                    }}\n+            impl {name_camel} {{\n+                #[must_use]\n+                pub fn new(msrv: Option<RustcVersion>) -> Self {{\n+                    Self {{ msrv }}\n                 }}\n+            }}\n \n-                impl_lint_pass!({name_camel} => [{name_upper}]);\n+            impl_lint_pass!({name_camel} => [{name_upper}]);\n \n-                impl {pass_type}{pass_lifetimes} for {name_camel} {{\n-                    extract_msrv_attr!({context_import});\n-                }}\n+            impl {pass_type}{pass_lifetimes} for {name_camel} {{\n+                extract_msrv_attr!({context_import});\n+            }}\n \n-                // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n-                // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n-                // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n-            \"},\n-            pass_type = pass_type,\n-            pass_lifetimes = pass_lifetimes,\n-            name_upper = name_upper,\n-            name_camel = name_camel,\n-            context_import = context_import,\n+            // TODO: Add MSRV level to `clippy_utils/src/msrvs.rs` if needed.\n+            // TODO: Add MSRV test to `tests/ui/min_rust_version_attr.rs`.\n+            // TODO: Update msrv config comment in `clippy_lints/src/utils/conf.rs`\n+        \"#\n         )\n     } else {\n-        format!(\n-            indoc! {\"\n-                declare_lint_pass!({name_camel} => [{name_upper}]);\n+        formatdoc!(\n+            r#\"\n+            declare_lint_pass!({name_camel} => [{name_upper}]);\n \n-                impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n-            \"},\n-            pass_type = pass_type,\n-            pass_lifetimes = pass_lifetimes,\n-            name_upper = name_upper,\n-            name_camel = name_camel,\n+            impl {pass_type}{pass_lifetimes} for {name_camel} {{}}\n+        \"#\n         )\n     });\n \n     result\n }\n \n fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n-    format!(\n-        indoc! {r#\"\n+    formatdoc!(\n+        r#\"\n             declare_clippy_lint! {{\n                 /// ### What it does\n                 ///\n@@ -330,15 +313,13 @@ fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n                 /// ```rust\n                 /// // example code which does not raise clippy warning\n                 /// ```\n-                #[clippy::version = \"{version}\"]\n+                #[clippy::version = \"{}\"]\n                 pub {name_upper},\n                 {category},\n                 \"default lint description\"\n             }}\n-        \"#},\n-        version = get_stabilization_version(),\n-        name_upper = name_upper,\n-        category = category,\n+        \"#,\n+        get_stabilization_version(),\n     )\n }\n \n@@ -352,7 +333,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n         _ => {},\n     }\n \n-    let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{}\", ty));\n+    let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{ty}\"));\n     assert!(\n         ty_dir.exists() && ty_dir.is_dir(),\n         \"Directory `{}` does not exist!\",\n@@ -412,10 +393,10 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n     }\n \n     write_file(lint_file_path.as_path(), lint_file_contents)?;\n-    println!(\"Generated lint file: `clippy_lints/src/{}/{}.rs`\", ty, lint.name);\n+    println!(\"Generated lint file: `clippy_lints/src/{ty}/{}.rs`\", lint.name);\n     println!(\n-        \"Be sure to add a call to `{}::check` in `clippy_lints/src/{}/mod.rs`!\",\n-        lint.name, ty\n+        \"Be sure to add a call to `{}::check` in `clippy_lints/src/{ty}/mod.rs`!\",\n+        lint.name\n     );\n \n     Ok(())\n@@ -542,7 +523,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n         .chain(std::iter::once(&*lint_name_upper))\n         .filter(|s| !s.is_empty())\n     {\n-        let _ = write!(new_arr_content, \"\\n    {},\", ident);\n+        let _ = write!(new_arr_content, \"\\n    {ident},\");\n     }\n     new_arr_content.push('\\n');\n "}, {"sha": "2e0794f12fa19c2eab6c7f1463ed8e0c9530637c", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -10,8 +10,8 @@ use std::time::{Duration, SystemTime};\n /// Panics if the python commands could not be spawned\n pub fn run(port: u16, lint: Option<&String>) -> ! {\n     let mut url = Some(match lint {\n-        None => format!(\"http://localhost:{}\", port),\n-        Some(lint) => format!(\"http://localhost:{}/#{}\", port, lint),\n+        None => format!(\"http://localhost:{port}\"),\n+        Some(lint) => format!(\"http://localhost:{port}/#{lint}\"),\n     });\n \n     loop {"}, {"sha": "1de5b1940bae1a7e1595490f4411afb3347a45b7", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -30,10 +30,7 @@ pub fn install_hook(force_override: bool) {\n             println!(\"info: the hook can be removed with `cargo dev remove git-hook`\");\n             println!(\"git hook successfully installed\");\n         },\n-        Err(err) => eprintln!(\n-            \"error: unable to copy `{}` to `{}` ({})\",\n-            HOOK_SOURCE_FILE, HOOK_TARGET_FILE, err\n-        ),\n+        Err(err) => eprintln!(\"error: unable to copy `{HOOK_SOURCE_FILE}` to `{HOOK_TARGET_FILE}` ({err})\"),\n     }\n }\n \n@@ -77,7 +74,7 @@ pub fn remove_hook() {\n \n fn delete_git_hook_file(path: &Path) -> bool {\n     if let Err(err) = fs::remove_file(path) {\n-        eprintln!(\"error: unable to delete existing pre-commit git hook ({})\", err);\n+        eprintln!(\"error: unable to delete existing pre-commit git hook ({err})\");\n         false\n     } else {\n         true"}, {"sha": "b64e79733eb2453ecc1c1741b71eb6d12a7e858a", "filename": "clippy_dev/src/setup/intellij.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fintellij.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -60,7 +60,7 @@ fn check_and_get_rustc_dir(rustc_path: &str) -> Result<PathBuf, ()> {\n                 path = absolute_path;\n             },\n             Err(err) => {\n-                eprintln!(\"error: unable to get the absolute path of rustc ({})\", err);\n+                eprintln!(\"error: unable to get the absolute path of rustc ({err})\");\n                 return Err(());\n             },\n         };\n@@ -103,14 +103,14 @@ fn inject_deps_into_project(rustc_source_dir: &Path, project: &ClippyProjectInfo\n fn read_project_file(file_path: &str) -> Result<String, ()> {\n     let path = Path::new(file_path);\n     if !path.exists() {\n-        eprintln!(\"error: unable to find the file `{}`\", file_path);\n+        eprintln!(\"error: unable to find the file `{file_path}`\");\n         return Err(());\n     }\n \n     match fs::read_to_string(path) {\n         Ok(content) => Ok(content),\n         Err(err) => {\n-            eprintln!(\"error: the file `{}` could not be read ({})\", file_path, err);\n+            eprintln!(\"error: the file `{file_path}` could not be read ({err})\");\n             Err(())\n         },\n     }\n@@ -124,10 +124,7 @@ fn inject_deps_into_manifest(\n ) -> std::io::Result<()> {\n     // do not inject deps if we have already done so\n     if cargo_toml.contains(RUSTC_PATH_SECTION) {\n-        eprintln!(\n-            \"warn: dependencies are already setup inside {}, skipping file\",\n-            manifest_path\n-        );\n+        eprintln!(\"warn: dependencies are already setup inside {manifest_path}, skipping file\");\n         return Ok(());\n     }\n \n@@ -142,11 +139,7 @@ fn inject_deps_into_manifest(\n \n     let new_deps = extern_crates.map(|dep| {\n         // format the dependencies that are going to be put inside the Cargo.toml\n-        format!(\n-            \"{dep} = {{ path = \\\"{source_path}/{dep}\\\" }}\\n\",\n-            dep = dep,\n-            source_path = rustc_source_dir.display()\n-        )\n+        format!(\"{dep} = {{ path = \\\"{}/{dep}\\\" }}\\n\", rustc_source_dir.display())\n     });\n \n     // format a new [dependencies]-block with the new deps we need to inject\n@@ -163,11 +156,11 @@ fn inject_deps_into_manifest(\n     // etc\n     let new_manifest = cargo_toml.replacen(\"[dependencies]\\n\", &all_deps, 1);\n \n-    // println!(\"{}\", new_manifest);\n+    // println!(\"{new_manifest}\");\n     let mut file = File::create(manifest_path)?;\n     file.write_all(new_manifest.as_bytes())?;\n \n-    println!(\"info: successfully setup dependencies inside {}\", manifest_path);\n+    println!(\"info: successfully setup dependencies inside {manifest_path}\");\n \n     Ok(())\n }\n@@ -214,8 +207,8 @@ fn remove_rustc_src_from_project(project: &ClippyProjectInfo) -> bool {\n         },\n         Err(err) => {\n             eprintln!(\n-                \"error: unable to open file `{}` to remove rustc dependencies for {} ({})\",\n-                project.cargo_file, project.name, err\n+                \"error: unable to open file `{}` to remove rustc dependencies for {} ({err})\",\n+                project.cargo_file, project.name\n             );\n             false\n         },"}, {"sha": "dbcdc9b59e529cedc693e813bb40adeea591b549", "filename": "clippy_dev/src/setup/vscode.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fvscode.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -17,10 +17,7 @@ pub fn install_tasks(force_override: bool) {\n             println!(\"info: the task file can be removed with `cargo dev remove vscode-tasks`\");\n             println!(\"vscode tasks successfully installed\");\n         },\n-        Err(err) => eprintln!(\n-            \"error: unable to copy `{}` to `{}` ({})\",\n-            TASK_SOURCE_FILE, TASK_TARGET_FILE, err\n-        ),\n+        Err(err) => eprintln!(\"error: unable to copy `{TASK_SOURCE_FILE}` to `{TASK_TARGET_FILE}` ({err})\"),\n     }\n }\n \n@@ -44,23 +41,17 @@ fn check_install_precondition(force_override: bool) -> bool {\n                 return delete_vs_task_file(path);\n             }\n \n-            eprintln!(\n-                \"error: there is already a `task.json` file inside the `{}` directory\",\n-                VSCODE_DIR\n-            );\n+            eprintln!(\"error: there is already a `task.json` file inside the `{VSCODE_DIR}` directory\");\n             println!(\"info: use the `--force-override` flag to override the existing `task.json` file\");\n             return false;\n         }\n     } else {\n         match fs::create_dir(vs_dir_path) {\n             Ok(_) => {\n-                println!(\"info: created `{}` directory for clippy\", VSCODE_DIR);\n+                println!(\"info: created `{VSCODE_DIR}` directory for clippy\");\n             },\n             Err(err) => {\n-                eprintln!(\n-                    \"error: the task target directory `{}` could not be created ({})\",\n-                    VSCODE_DIR, err\n-                );\n+                eprintln!(\"error: the task target directory `{VSCODE_DIR}` could not be created ({err})\");\n             },\n         }\n     }\n@@ -82,7 +73,7 @@ pub fn remove_tasks() {\n \n fn delete_vs_task_file(path: &Path) -> bool {\n     if let Err(err) = fs::remove_file(path) {\n-        eprintln!(\"error: unable to delete the existing `tasks.json` file ({})\", err);\n+        eprintln!(\"error: unable to delete the existing `tasks.json` file ({err})\");\n         return false;\n     }\n "}, {"sha": "93955bee3f4dd92c414258c555c57bb3a8304a9b", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 46, "deletions": 52, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -86,7 +86,7 @@ fn generate_lint_files(\n                 )\n                 .sorted()\n             {\n-                writeln!(res, \"[`{}`]: {}#{}\", lint, DOCS_LINK, lint).unwrap();\n+                writeln!(res, \"[`{lint}`]: {DOCS_LINK}#{lint}\").unwrap();\n             }\n         },\n     );\n@@ -99,7 +99,7 @@ fn generate_lint_files(\n         \"// end lints modules, do not remove this comment, it\u2019s used in `update_lints`\",\n         |res| {\n             for lint_mod in usable_lints.iter().map(|l| &l.module).unique().sorted() {\n-                writeln!(res, \"mod {};\", lint_mod).unwrap();\n+                writeln!(res, \"mod {lint_mod};\").unwrap();\n             }\n         },\n     );\n@@ -129,7 +129,7 @@ fn generate_lint_files(\n     for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n         let content = gen_lint_group_list(&lint_group, lints.iter());\n         process_file(\n-            &format!(\"clippy_lints/src/lib.register_{}.rs\", lint_group),\n+            &format!(\"clippy_lints/src/lib.register_{lint_group}.rs\"),\n             update_mode,\n             &content,\n         );\n@@ -190,9 +190,9 @@ fn print_lint_names(header: &str, lints: &BTreeSet<String>) -> bool {\n     if lints.is_empty() {\n         return false;\n     }\n-    println!(\"{}\", header);\n+    println!(\"{header}\");\n     for lint in lints.iter().sorted() {\n-        println!(\"    {}\", lint);\n+        println!(\"    {lint}\");\n     }\n     println!();\n     true\n@@ -205,16 +205,16 @@ pub fn print_lints() {\n     let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n \n     for (lint_group, mut lints) in grouped_by_lint_group {\n-        println!(\"\\n## {}\", lint_group);\n+        println!(\"\\n## {lint_group}\");\n \n         lints.sort_by_key(|l| l.name.clone());\n \n         for lint in lints {\n-            println!(\"* [{}]({}#{}) ({})\", lint.name, DOCS_LINK, lint.name, lint.desc);\n+            println!(\"* [{}]({DOCS_LINK}#{}) ({})\", lint.name, lint.name, lint.desc);\n         }\n     }\n \n-    println!(\"there are {} lints\", usable_lint_count);\n+    println!(\"there are {usable_lint_count} lints\");\n }\n \n /// Runs the `rename_lint` command.\n@@ -235,10 +235,10 @@ pub fn print_lints() {\n #[allow(clippy::too_many_lines)]\n pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n     if let Some((prefix, _)) = old_name.split_once(\"::\") {\n-        panic!(\"`{}` should not contain the `{}` prefix\", old_name, prefix);\n+        panic!(\"`{old_name}` should not contain the `{prefix}` prefix\");\n     }\n     if let Some((prefix, _)) = new_name.split_once(\"::\") {\n-        panic!(\"`{}` should not contain the `{}` prefix\", new_name, prefix);\n+        panic!(\"`{new_name}` should not contain the `{prefix}` prefix\");\n     }\n \n     let (mut lints, deprecated_lints, mut renamed_lints) = gather_all();\n@@ -251,28 +251,26 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n             found_new_name = true;\n         }\n     }\n-    let old_lint_index = old_lint_index.unwrap_or_else(|| panic!(\"could not find lint `{}`\", old_name));\n+    let old_lint_index = old_lint_index.unwrap_or_else(|| panic!(\"could not find lint `{old_name}`\"));\n \n     let lint = RenamedLint {\n-        old_name: format!(\"clippy::{}\", old_name),\n+        old_name: format!(\"clippy::{old_name}\"),\n         new_name: if uplift {\n             new_name.into()\n         } else {\n-            format!(\"clippy::{}\", new_name)\n+            format!(\"clippy::{new_name}\")\n         },\n     };\n \n     // Renamed lints and deprecated lints shouldn't have been found in the lint list, but check just in\n     // case.\n     assert!(\n         !renamed_lints.iter().any(|l| lint.old_name == l.old_name),\n-        \"`{}` has already been renamed\",\n-        old_name\n+        \"`{old_name}` has already been renamed\"\n     );\n     assert!(\n         !deprecated_lints.iter().any(|l| lint.old_name == l.name),\n-        \"`{}` has already been deprecated\",\n-        old_name\n+        \"`{old_name}` has already been deprecated\"\n     );\n \n     // Update all lint level attributes. (`clippy::lint_name`)\n@@ -309,14 +307,12 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n     if uplift {\n         write_file(Path::new(\"tests/ui/rename.rs\"), &gen_renamed_lints_test(&renamed_lints));\n         println!(\n-            \"`{}` has be uplifted. All the code inside `clippy_lints` related to it needs to be removed manually.\",\n-            old_name\n+            \"`{old_name}` has be uplifted. All the code inside `clippy_lints` related to it needs to be removed manually.\"\n         );\n     } else if found_new_name {\n         write_file(Path::new(\"tests/ui/rename.rs\"), &gen_renamed_lints_test(&renamed_lints));\n         println!(\n-            \"`{}` is already defined. The old linting code inside `clippy_lints` needs to be updated/removed manually.\",\n-            new_name\n+            \"`{new_name}` is already defined. The old linting code inside `clippy_lints` needs to be updated/removed manually.\"\n         );\n     } else {\n         // Rename the lint struct and source files sharing a name with the lint.\n@@ -327,25 +323,25 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n \n         // Rename test files. only rename `.stderr` and `.fixed` files if the new test name doesn't exist.\n         if try_rename_file(\n-            Path::new(&format!(\"tests/ui/{}.rs\", old_name)),\n-            Path::new(&format!(\"tests/ui/{}.rs\", new_name)),\n+            Path::new(&format!(\"tests/ui/{old_name}.rs\")),\n+            Path::new(&format!(\"tests/ui/{new_name}.rs\")),\n         ) {\n             try_rename_file(\n-                Path::new(&format!(\"tests/ui/{}.stderr\", old_name)),\n-                Path::new(&format!(\"tests/ui/{}.stderr\", new_name)),\n+                Path::new(&format!(\"tests/ui/{old_name}.stderr\")),\n+                Path::new(&format!(\"tests/ui/{new_name}.stderr\")),\n             );\n             try_rename_file(\n-                Path::new(&format!(\"tests/ui/{}.fixed\", old_name)),\n-                Path::new(&format!(\"tests/ui/{}.fixed\", new_name)),\n+                Path::new(&format!(\"tests/ui/{old_name}.fixed\")),\n+                Path::new(&format!(\"tests/ui/{new_name}.fixed\")),\n             );\n         }\n \n         // Try to rename the file containing the lint if the file name matches the lint's name.\n         let replacements;\n         let replacements = if lint.module == old_name\n             && try_rename_file(\n-                Path::new(&format!(\"clippy_lints/src/{}.rs\", old_name)),\n-                Path::new(&format!(\"clippy_lints/src/{}.rs\", new_name)),\n+                Path::new(&format!(\"clippy_lints/src/{old_name}.rs\")),\n+                Path::new(&format!(\"clippy_lints/src/{new_name}.rs\")),\n             ) {\n             // Edit the module name in the lint list. Note there could be multiple lints.\n             for lint in lints.iter_mut().filter(|l| l.module == old_name) {\n@@ -356,14 +352,14 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n         } else if !lint.module.contains(\"::\")\n             // Catch cases like `methods/lint_name.rs` where the lint is stored in `methods/mod.rs`\n             && try_rename_file(\n-                Path::new(&format!(\"clippy_lints/src/{}/{}.rs\", lint.module, old_name)),\n-                Path::new(&format!(\"clippy_lints/src/{}/{}.rs\", lint.module, new_name)),\n+                Path::new(&format!(\"clippy_lints/src/{}/{old_name}.rs\", lint.module)),\n+                Path::new(&format!(\"clippy_lints/src/{}/{new_name}.rs\", lint.module)),\n             )\n         {\n             // Edit the module name in the lint list. Note there could be multiple lints, or none.\n-            let renamed_mod = format!(\"{}::{}\", lint.module, old_name);\n+            let renamed_mod = format!(\"{}::{old_name}\", lint.module);\n             for lint in lints.iter_mut().filter(|l| l.module == renamed_mod) {\n-                lint.module = format!(\"{}::{}\", lint.module, new_name);\n+                lint.module = format!(\"{}::{new_name}\", lint.module);\n             }\n             replacements = [(&*old_name_upper, &*new_name_upper), (old_name, new_name)];\n             replacements.as_slice()\n@@ -379,7 +375,7 @@ pub fn rename(old_name: &str, new_name: &str, uplift: bool) {\n         }\n \n         generate_lint_files(UpdateMode::Change, &lints, &deprecated_lints, &renamed_lints);\n-        println!(\"{} has been successfully renamed\", old_name);\n+        println!(\"{old_name} has been successfully renamed\");\n     }\n \n     println!(\"note: `cargo uitest` still needs to be run to update the test results\");\n@@ -408,7 +404,7 @@ pub fn deprecate(name: &str, reason: Option<&String>) {\n         });\n \n         generate_lint_files(UpdateMode::Change, &lints, &deprecated_lints, &renamed_lints);\n-        println!(\"info: `{}` has successfully been deprecated\", name);\n+        println!(\"info: `{name}` has successfully been deprecated\");\n \n         if reason == DEFAULT_DEPRECATION_REASON {\n             println!(\"note: the deprecation reason must be updated in `clippy_lints/src/deprecated_lints.rs`\");\n@@ -421,7 +417,7 @@ pub fn deprecate(name: &str, reason: Option<&String>) {\n     let name_upper = name.to_uppercase();\n \n     let (mut lints, deprecated_lints, renamed_lints) = gather_all();\n-    let Some(lint) = lints.iter().find(|l| l.name == name_lower) else { eprintln!(\"error: failed to find lint `{}`\", name); return; };\n+    let Some(lint) = lints.iter().find(|l| l.name == name_lower) else { eprintln!(\"error: failed to find lint `{name}`\"); return; };\n \n     let mod_path = {\n         let mut mod_path = PathBuf::from(format!(\"clippy_lints/src/{}\", lint.module));\n@@ -450,7 +446,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n     }\n \n     fn remove_test_assets(name: &str) {\n-        let test_file_stem = format!(\"tests/ui/{}\", name);\n+        let test_file_stem = format!(\"tests/ui/{name}\");\n         let path = Path::new(&test_file_stem);\n \n         // Some lints have their own directories, delete them\n@@ -512,8 +508,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n                     fs::read_to_string(path).unwrap_or_else(|_| panic!(\"failed to read `{}`\", path.to_string_lossy()));\n \n                 eprintln!(\n-                    \"warn: you will have to manually remove any code related to `{}` from `{}`\",\n-                    name,\n+                    \"warn: you will have to manually remove any code related to `{name}` from `{}`\",\n                     path.display()\n                 );\n \n@@ -528,7 +523,7 @@ fn remove_lint_declaration(name: &str, path: &Path, lints: &mut Vec<Lint>) -> io\n                 content.replace_range(lint.declaration_range.clone(), \"\");\n \n                 // Remove the module declaration (mod xyz;)\n-                let mod_decl = format!(\"\\nmod {};\", name);\n+                let mod_decl = format!(\"\\nmod {name};\");\n                 content = content.replacen(&mod_decl, \"\", 1);\n \n                 remove_impl_lint_pass(&lint.name.to_uppercase(), &mut content);\n@@ -621,13 +616,13 @@ fn round_to_fifty(count: usize) -> usize {\n fn process_file(path: impl AsRef<Path>, update_mode: UpdateMode, content: &str) {\n     if update_mode == UpdateMode::Check {\n         let old_content =\n-            fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {}\", path.as_ref().display(), e));\n+            fs::read_to_string(&path).unwrap_or_else(|e| panic!(\"Cannot read from {}: {e}\", path.as_ref().display()));\n         if content != old_content {\n             exit_with_failure();\n         }\n     } else {\n         fs::write(&path, content.as_bytes())\n-            .unwrap_or_else(|e| panic!(\"Cannot write to {}: {}\", path.as_ref().display(), e));\n+            .unwrap_or_else(|e| panic!(\"Cannot write to {}: {e}\", path.as_ref().display()));\n     }\n }\n \n@@ -731,11 +726,10 @@ fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lin\n \n     let _ = writeln!(\n         output,\n-        \"store.register_group(true, \\\"clippy::{0}\\\", Some(\\\"clippy_{0}\\\"), vec![\",\n-        group_name\n+        \"store.register_group(true, \\\"clippy::{group_name}\\\", Some(\\\"clippy_{group_name}\\\"), vec![\",\n     );\n     for (module, name) in details {\n-        let _ = writeln!(output, \"    LintId::of({}::{}),\", module, name);\n+        let _ = writeln!(output, \"    LintId::of({module}::{name}),\");\n     }\n     output.push_str(\"])\\n\");\n \n@@ -783,7 +777,7 @@ fn gen_register_lint_list<'a>(\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        let _ = writeln!(output, \"    {}::{},\", module_name, lint_name);\n+        let _ = writeln!(output, \"    {module_name}::{lint_name},\");\n     }\n     output.push_str(\"])\\n\");\n \n@@ -841,7 +835,7 @@ fn gather_all() -> (Vec<Lint>, Vec<DeprecatedLint>, Vec<RenamedLint>) {\n     for (rel_path, file) in clippy_lints_src_files() {\n         let path = file.path();\n         let contents =\n-            fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n+            fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {e}\", path.display()));\n         let module = rel_path\n             .components()\n             .map(|c| c.as_os_str().to_str().unwrap())\n@@ -1050,7 +1044,7 @@ fn remove_line_splices(s: &str) -> String {\n         .trim_matches('#')\n         .strip_prefix('\"')\n         .and_then(|s| s.strip_suffix('\"'))\n-        .unwrap_or_else(|| panic!(\"expected quoted string, found `{}`\", s));\n+        .unwrap_or_else(|| panic!(\"expected quoted string, found `{s}`\"));\n     let mut res = String::with_capacity(s.len());\n     unescape::unescape_literal(s, unescape::Mode::Str, &mut |range, ch| {\n         if ch.is_ok() {\n@@ -1076,18 +1070,18 @@ fn replace_region_in_file(\n     end: &str,\n     write_replacement: impl FnMut(&mut String),\n ) {\n-    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {}\", path.display(), e));\n+    let contents = fs::read_to_string(path).unwrap_or_else(|e| panic!(\"Cannot read from `{}`: {e}\", path.display()));\n     let new_contents = match replace_region_in_text(&contents, start, end, write_replacement) {\n         Ok(x) => x,\n-        Err(delim) => panic!(\"Couldn't find `{}` in file `{}`\", delim, path.display()),\n+        Err(delim) => panic!(\"Couldn't find `{delim}` in file `{}`\", path.display()),\n     };\n \n     match update_mode {\n         UpdateMode::Check if contents != new_contents => exit_with_failure(),\n         UpdateMode::Check => (),\n         UpdateMode::Change => {\n             if let Err(e) = fs::write(path, new_contents.as_bytes()) {\n-                panic!(\"Cannot write to `{}`: {}\", path.display(), e);\n+                panic!(\"Cannot write to `{}`: {e}\", path.display());\n             }\n         },\n     }\n@@ -1135,7 +1129,7 @@ fn try_rename_file(old_name: &Path, new_name: &Path) -> bool {\n \n #[allow(clippy::needless_pass_by_value)]\n fn panic_file(error: io::Error, name: &Path, action: &str) -> ! {\n-    panic!(\"failed to {} file `{}`: {}\", action, name.display(), error)\n+    panic!(\"failed to {action} file `{}`: {error}\", name.display())\n }\n \n fn rewrite_file(path: &Path, f: impl FnOnce(&str) -> Option<String>) {"}, {"sha": "badd391302b6f2bf37a2dd6fa18ad1c6723d45b5", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -18,7 +18,7 @@ quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n-tempfile = { version = \"3.2\", optional = true }\n+tempfile = { version = \"3.3.0\", optional = true }\n toml = \"0.5\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }"}, {"sha": "724490fb49592f64c5b770de45124e741dcb08c0", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -92,7 +92,7 @@ impl ApproxConstant {\n                         cx,\n                         APPROX_CONSTANT,\n                         e.span,\n-                        &format!(\"approximate value of `{}::consts::{}` found\", module, &name),\n+                        &format!(\"approximate value of `{module}::consts::{}` found\", &name),\n                         None,\n                         \"consider using the constant directly\",\n                     );\n@@ -126,7 +126,7 @@ fn is_approx_const(constant: f64, value: &str, min_digits: usize) -> bool {\n         // The value is a truncated constant\n         true\n     } else {\n-        let round_const = format!(\"{:.*}\", value.len() - 2, constant);\n+        let round_const = format!(\"{constant:.*}\", value.len() - 2);\n         value == round_const\n     }\n }"}, {"sha": "ad31d708f64d5cf18411222d4ecc9fdf4a85e6f8", "filename": "clippy_lints/src/asm_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasm_syntax.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -44,7 +44,7 @@ fn check_expr_asm_syntax(lint: &'static Lint, cx: &EarlyContext<'_>, expr: &Expr\n                 cx,\n                 lint,\n                 expr.span,\n-                &format!(\"{} x86 assembly syntax used\", style),\n+                &format!(\"{style} x86 assembly syntax used\"),\n                 None,\n                 &format!(\"use {} x86 assembly syntax\", !style),\n             );"}, {"sha": "a36df55d0bdafe5891baf90b8ece12041b5edc21", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -60,9 +60,9 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnConstants {\n                 cx,\n                 ASSERTIONS_ON_CONSTANTS,\n                 macro_call.span,\n-                &format!(\"`assert!(false{})` should probably be replaced\", assert_arg),\n+                &format!(\"`assert!(false{assert_arg})` should probably be replaced\"),\n                 None,\n-                &format!(\"use `panic!({})` or `unreachable!({0})`\", panic_arg),\n+                &format!(\"use `panic!({panic_arg})` or `unreachable!({panic_arg})`\"),\n             );\n         }\n     }"}, {"sha": "f6d6c23bb6ed2a29803c4dad4313f906225cfd67", "filename": "clippy_lints/src/assertions_on_result_states.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -69,9 +69,8 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         \"called `assert!` with `Result::is_ok`\",\n                         \"replace with\",\n                         format!(\n-                            \"{}.unwrap(){}\",\n-                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0,\n-                            semicolon\n+                            \"{}.unwrap(){semicolon}\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n                         ),\n                         app,\n                     );\n@@ -84,9 +83,8 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n                         \"called `assert!` with `Result::is_err`\",\n                         \"replace with\",\n                         format!(\n-                            \"{}.unwrap_err(){}\",\n-                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0,\n-                            semicolon\n+                            \"{}.unwrap_err(){semicolon}\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n                         ),\n                         app,\n                     );"}, {"sha": "5f45c69d7f98d1aa11a474688aa655c8e1904d02", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -541,10 +541,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribut\n                     cx,\n                     INLINE_ALWAYS,\n                     attr.span,\n-                    &format!(\n-                        \"you have declared `#[inline(always)]` on `{}`. This is usually a bad idea\",\n-                        name\n-                    ),\n+                    &format!(\"you have declared `#[inline(always)]` on `{name}`. This is usually a bad idea\"),\n                 );\n             }\n         }\n@@ -720,7 +717,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                 let mut unix_suggested = false;\n \n                 for (os, span) in mismatched {\n-                    let sugg = format!(\"target_os = \\\"{}\\\"\", os);\n+                    let sugg = format!(\"target_os = \\\"{os}\\\"\");\n                     diag.span_suggestion(span, \"try\", sugg, Applicability::MaybeIncorrect);\n \n                     if !unix_suggested && is_unix(os) {"}, {"sha": "4df4d6ddf416764241517468c5199649ea5eb26e", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -117,8 +117,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n                             );\n                         }\n                     } else {\n-                        let span =\n-                            block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n+                        let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n                         if span.from_expansion() || expr.span.from_expansion() {\n                             return;\n                         }"}, {"sha": "4bd55c1429c3b452dfe6aada32088ed771abdfb9", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -98,9 +98,9 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n             cx,\n             BOOL_ASSERT_COMPARISON,\n             macro_call.span,\n-            &format!(\"used `{}!` with a literal bool\", macro_name),\n+            &format!(\"used `{macro_name}!` with a literal bool\"),\n             \"replace it with\",\n-            format!(\"{}!(..)\", non_eq_mac),\n+            format!(\"{non_eq_mac}!(..)\"),\n             Applicability::MaybeIncorrect,\n         );\n     }"}, {"sha": "2a15cbc7a3c3b0a981eb29511b505bd36f063000", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -263,9 +263,8 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n             }\n             .and_then(|op| {\n                 Some(format!(\n-                    \"{}{}{}\",\n+                    \"{}{op}{}\",\n                     snippet_opt(cx, lhs.span)?,\n-                    op,\n                     snippet_opt(cx, rhs.span)?\n                 ))\n             })\n@@ -285,7 +284,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                     let path: &str = path.ident.name.as_str();\n                     a == path\n                 })\n-                .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, receiver.span)?, neg_method)))\n+                .and_then(|(_, neg_method)| Some(format!(\"{}.{neg_method}()\", snippet_opt(cx, receiver.span)?)))\n         },\n         _ => None,\n     }"}, {"sha": "792183ac40814ef90355cd13e94a3bd72ce3cfbf", "filename": "clippy_lints/src/box_default.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,61 @@\n+use clippy_utils::{diagnostics::span_lint_and_help, is_default_equivalent, path_def_id};\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// checks for `Box::new(T::default())`, which is better written as\n+    /// `Box::<T>::default()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// First, it's more complex, involving two calls instead of one.\n+    /// Second, `Box::default()` can be faster\n+    /// [in certain cases](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n+    ///\n+    /// ### Known problems\n+    /// The lint may miss some cases (e.g. Box::new(String::from(\"\"))).\n+    /// On the other hand, it will trigger on cases where the `default`\n+    /// code comes from a macro that does something different based on\n+    /// e.g. target operating system.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x: Box<String> = Box::new(Default::default());\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x: Box<String> = Box::default();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub BOX_DEFAULT,\n+    perf,\n+    \"Using Box::new(T::default()) instead of Box::default()\"\n+}\n+\n+declare_lint_pass!(BoxDefault => [BOX_DEFAULT]);\n+\n+impl LateLintPass<'_> for BoxDefault {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::Call(box_new, [arg]) = expr.kind\n+            && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = box_new.kind\n+            && let ExprKind::Call(..) = arg.kind\n+            && !in_external_macro(cx.sess(), expr.span)\n+            && expr.span.eq_ctxt(arg.span)\n+            && seg.ident.name == sym::new\n+            && path_def_id(cx, ty) == cx.tcx.lang_items().owned_box()\n+            && is_default_equivalent(cx, arg)\n+        {\n+            span_lint_and_help(\n+                cx,\n+                BOX_DEFAULT,\n+                expr.span,\n+                \"`Box::new(_)` of default value\",\n+                None,\n+                \"use `Box::default()` instead\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "805121bcced3b562393279e500a4b3823b50b94e", "filename": "clippy_lints/src/cargo/common_metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -40,7 +40,7 @@ pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata, ignore_publish: b\n }\n \n fn missing_warning(cx: &LateContext<'_>, package: &cargo_metadata::Package, field: &str) {\n-    let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n+    let message = format!(\"package `{}` is missing `{field}` metadata\", package.name);\n     span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, &message);\n }\n "}, {"sha": "37c169dbd95e3807599248b01c6366a6854303b7", "filename": "clippy_lints/src/cargo/feature_name.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -57,10 +57,8 @@ fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {\n         },\n         DUMMY_SP,\n         &format!(\n-            \"the \\\"{}\\\" {} in the feature name \\\"{}\\\" is {}\",\n-            substring,\n+            \"the \\\"{substring}\\\" {} in the feature name \\\"{feature}\\\" is {}\",\n             if is_prefix { \"prefix\" } else { \"suffix\" },\n-            feature,\n             if is_negative { \"negative\" } else { \"redundant\" }\n         ),\n         None,"}, {"sha": "3a872e54c9a2b2134dc6861e66823c716792c93d", "filename": "clippy_lints/src/cargo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -196,7 +196,7 @@ impl LateLintPass<'_> for Cargo {\n                 },\n                 Err(e) => {\n                     for lint in NO_DEPS_LINTS {\n-                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", e));\n+                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {e}\"));\n                     }\n                 },\n             }\n@@ -212,7 +212,7 @@ impl LateLintPass<'_> for Cargo {\n                 },\n                 Err(e) => {\n                     for lint in WITH_DEPS_LINTS {\n-                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", e));\n+                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {e}\"));\n                     }\n                 },\n             }"}, {"sha": "f9b17d45e9fbab74a837fad8048cfe2358fbb246", "filename": "clippy_lints/src/cargo/multiple_crate_versions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,7 +37,7 @@ pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata) {\n                         cx,\n                         MULTIPLE_CRATE_VERSIONS,\n                         DUMMY_SP,\n-                        &format!(\"multiple versions for dependency `{}`: {}\", name, versions),\n+                        &format!(\"multiple versions for dependency `{name}`: {versions}\"),\n                     );\n                 }\n             }"}, {"sha": "294d22d34de953994576fd8beca4b6c52f691934", "filename": "clippy_lints/src/casts/borrow_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fborrow_as_ptr.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n             expr.span,\n             \"borrow as raw pointer\",\n             \"try\",\n-            format!(\"{}::ptr::{}!({})\", core_or_std, macro_name, snip),\n+            format!(\"{core_or_std}::ptr::{macro_name}!({snip})\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "13c403234dad5e8b44a41dfe87b99a5f24d25b4b", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -41,15 +41,9 @@ pub(super) fn check(\n     );\n \n     let message = if cast_from.is_bool() {\n-        format!(\n-            \"casting `{0:}` to `{1:}` is more cleanly stated with `{1:}::from(_)`\",\n-            cast_from, cast_to\n-        )\n+        format!(\"casting `{cast_from:}` to `{cast_to:}` is more cleanly stated with `{cast_to:}::from(_)`\")\n     } else {\n-        format!(\n-            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n-            cast_from, cast_to\n-        )\n+        format!(\"casting `{cast_from}` to `{cast_to}` may become silently lossy if you later change the type\")\n     };\n \n     span_lint_and_sugg(\n@@ -58,7 +52,7 @@ pub(super) fn check(\n         expr.span,\n         &message,\n         \"try\",\n-        format!(\"{}::from({})\", cast_to, sugg),\n+        format!(\"{cast_to}::from({sugg})\"),\n         applicability,\n     );\n }"}, {"sha": "88deb4565eb216cb801b49e659418ffd42b74131", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -103,10 +103,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 return;\n             }\n \n-            format!(\n-                \"casting `{}` to `{}` may truncate the value{}\",\n-                cast_from, cast_to, suffix,\n-            )\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n         },\n \n         (ty::Adt(def, _), true) if def.is_enum() => {\n@@ -142,20 +139,17 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                     CAST_ENUM_TRUNCATION,\n                     expr.span,\n                     &format!(\n-                        \"casting `{}::{}` to `{}` will truncate the value{}\",\n-                        cast_from, variant.name, cast_to, suffix,\n+                        \"casting `{cast_from}::{}` to `{cast_to}` will truncate the value{suffix}\",\n+                        variant.name,\n                     ),\n                 );\n                 return;\n             }\n-            format!(\n-                \"casting `{}` to `{}` may truncate the value{}\",\n-                cast_from, cast_to, suffix,\n-            )\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value{suffix}\",)\n         },\n \n         (ty::Float(_), true) => {\n-            format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to)\n+            format!(\"casting `{cast_from}` to `{cast_to}` may truncate the value\")\n         },\n \n         (ty::Float(FloatTy::F64), false) if matches!(cast_to.kind(), &ty::Float(FloatTy::F32)) => {"}, {"sha": "28ecdea7ea06c3d4e238adf9f54c2342e4d06f30", "filename": "clippy_lints/src/casts/cast_possible_wrap.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -35,10 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, ca\n             cx,\n             CAST_POSSIBLE_WRAP,\n             expr.span,\n-            &format!(\n-                \"casting `{}` to `{}` may wrap around the value{}\",\n-                cast_from, cast_to, suffix,\n-            ),\n+            &format!(\"casting `{cast_from}` to `{cast_to}` may wrap around the value{suffix}\",),\n         );\n     }\n }"}, {"sha": "97054a0d10154682178d0fd28023502ca00528e6", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -49,9 +49,7 @@ fn lint_cast_ptr_alignment<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, cast_f\n             CAST_PTR_ALIGNMENT,\n             expr.span,\n             &format!(\n-                \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n-                cast_from,\n-                cast_to,\n+                \"casting from `{cast_from}` to a more-strictly-aligned pointer (`{cast_to}`) ({} < {} bytes)\",\n                 from_layout.align.abi.bytes(),\n                 to_layout.align.abi.bytes(),\n             ),"}, {"sha": "a20a97d4e56daccaaf0d739537c240216d2fd545", "filename": "clippy_lints/src/casts/cast_sign_loss.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -14,10 +14,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, c\n             cx,\n             CAST_SIGN_LOSS,\n             expr.span,\n-            &format!(\n-                \"casting `{}` to `{}` may lose the sign of the value\",\n-                cast_from, cast_to\n-            ),\n+            &format!(\"casting `{cast_from}` to `{cast_to}` may lose the sign of the value\"),\n         );\n     }\n }"}, {"sha": "d31d10d22b92b8997a77631d71d86ddc21dcdd38", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -35,8 +35,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: Optio\n                     CAST_SLICE_DIFFERENT_SIZES,\n                     expr.span,\n                     &format!(\n-                        \"casting between raw pointers to `[{}]` (element size {}) and `[{}]` (element size {}) does not adjust the count\",\n-                        start_ty.ty, from_size, end_ty.ty, to_size,\n+                        \"casting between raw pointers to `[{}]` (element size {from_size}) and `[{}]` (element size {to_size}) does not adjust the count\",\n+                        start_ty.ty, end_ty.ty,\n                     ),\n                     |diag| {\n                         let ptr_snippet = source::snippet(cx, left_cast.span, \"..\");"}, {"sha": "82e07c98a7e0179da0a9b721ae2f540b3eec7f03", "filename": "clippy_lints/src/casts/char_lit_as_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -31,7 +31,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                         diag.span_suggestion(\n                             expr.span,\n                             \"use a byte literal instead\",\n-                            format!(\"b{}\", snippet),\n+                            format!(\"b{snippet}\"),\n                             applicability,\n                         );\n                     }"}, {"sha": "a26bfab4e7c1568d22b62eae3780169dd0bf79e5", "filename": "clippy_lints/src/casts/fn_to_numeric_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -25,9 +25,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                     cx,\n                     FN_TO_NUMERIC_CAST,\n                     expr.span,\n-                    &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                    &format!(\"casting function pointer `{from_snippet}` to `{cast_to}`\"),\n                     \"try\",\n-                    format!(\"{} as usize\", from_snippet),\n+                    format!(\"{from_snippet} as usize\"),\n                     applicability,\n                 );\n             }"}, {"sha": "75654129408e68ef0ccbd3b3b300f91185874313", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_any.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,9 +23,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                 cx,\n                 FN_TO_NUMERIC_CAST_ANY,\n                 expr.span,\n-                &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                &format!(\"casting function pointer `{from_snippet}` to `{cast_to}`\"),\n                 \"did you mean to invoke the function?\",\n-                format!(\"{}() as {}\", from_snippet, cast_to),\n+                format!(\"{from_snippet}() as {cast_to}\"),\n                 applicability,\n             );\n         },"}, {"sha": "556be1d1506657a4f8d80bd6ce563f770c508155", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_with_truncation.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -24,12 +24,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n                     cx,\n                     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n                     expr.span,\n-                    &format!(\n-                        \"casting function pointer `{}` to `{}`, which truncates the value\",\n-                        from_snippet, cast_to\n-                    ),\n+                    &format!(\"casting function pointer `{from_snippet}` to `{cast_to}`, which truncates the value\"),\n                     \"try\",\n-                    format!(\"{} as usize\", from_snippet),\n+                    format!(\"{from_snippet} as usize\"),\n                     applicability,\n                 );\n             }"}, {"sha": "c2b9253ec35dc8bccd9efc5ce3269b7965338ea5", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -33,15 +33,15 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: Option<RustcVer\n             let turbofish = match &cast_to_hir_ty.kind {\n                     TyKind::Infer => Cow::Borrowed(\"\"),\n                     TyKind::Ptr(mut_ty) if matches!(mut_ty.ty.kind, TyKind::Infer) => Cow::Borrowed(\"\"),\n-                    _ => Cow::Owned(format!(\"::<{}>\", to_pointee_ty)),\n+                    _ => Cow::Owned(format!(\"::<{to_pointee_ty}>\")),\n                 };\n             span_lint_and_sugg(\n                 cx,\n                 PTR_AS_PTR,\n                 expr.span,\n                 \"`as` casting between raw pointers without changing its mutability\",\n                 \"try `pointer::cast`, a safer alternative\",\n-                format!(\"{}.cast{}()\", cast_expr_sugg.maybe_par(), turbofish),\n+                format!(\"{}.cast{turbofish}()\", cast_expr_sugg.maybe_par()),\n                 applicability,\n             );\n         }"}, {"sha": "ea29f5d12c677da1b664b0a5fc9f18b4acb489a6", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -71,10 +71,7 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         UNNECESSARY_CAST,\n                         expr.span,\n-                        &format!(\n-                            \"casting to the same type is unnecessary (`{}` -> `{}`)\",\n-                            cast_from, cast_to\n-                        ),\n+                        &format!(\"casting to the same type is unnecessary (`{cast_from}` -> `{cast_to}`)\"),\n                         \"try\",\n                         literal_str,\n                         Applicability::MachineApplicable,\n@@ -101,9 +98,9 @@ fn lint_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &st\n         cx,\n         UNNECESSARY_CAST,\n         expr.span,\n-        &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n+        &format!(\"casting {literal_kind_name} literal to `{cast_to}` is unnecessary\"),\n         \"try\",\n-        format!(\"{}_{}\", matchless.trim_end_matches('.'), cast_to),\n+        format!(\"{}_{cast_to}\", matchless.trim_end_matches('.')),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "1d113c7cbee6ccb3a78b591373df92e5adf8ee66", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n                     item.span,\n                     \"checked cast can be simplified\",\n                     \"try\",\n-                    format!(\"{}::try_from({}).is_ok()\", to_type, snippet),\n+                    format!(\"{to_type}::try_from({snippet}).is_ok()\"),\n                     applicability,\n                 );\n             }"}, {"sha": "fed04ae7f3d59ad9e175e0776ac27637062d8730", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -107,8 +107,7 @@ impl CognitiveComplexity {\n                 COGNITIVE_COMPLEXITY,\n                 fn_span,\n                 &format!(\n-                    \"the function has a cognitive complexity of ({}/{})\",\n-                    rust_cc,\n+                    \"the function has a cognitive complexity of ({rust_cc}/{})\",\n                     self.limit.limit()\n                 ),\n                 None,"}, {"sha": "7f937de1dd3120f594436fc8facb97be30e72316", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     cx,\n                     DEFAULT_TRAIT_ACCESS,\n                     expr.span,\n-                    &format!(\"calling `{}` is more clear than this expression\", replacement),\n+                    &format!(\"calling `{replacement}` is more clear than this expression\"),\n                     \"try\",\n                     replacement,\n                     Applicability::Unspecified, // First resolve the TODO above\n@@ -210,7 +210,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     .map(|(field, rhs)| {\n                         // extract and store the assigned value for help message\n                         let value_snippet = snippet_with_macro_callsite(cx, rhs.span, \"..\");\n-                        format!(\"{}: {}\", field, value_snippet)\n+                        format!(\"{field}: {value_snippet}\")\n                     })\n                     .collect::<Vec<String>>()\n                     .join(\", \");\n@@ -227,20 +227,20 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                             .map(ToString::to_string)\n                             .collect::<Vec<_>>()\n                             .join(\", \");\n-                        format!(\"{}::<{}>\", adt_def_ty_name, &tys_str)\n+                        format!(\"{adt_def_ty_name}::<{}>\", &tys_str)\n                     } else {\n                         binding_type.to_string()\n                     }\n                 };\n \n                 let sugg = if ext_with_default {\n                     if field_list.is_empty() {\n-                        format!(\"{}::default()\", binding_type)\n+                        format!(\"{binding_type}::default()\")\n                     } else {\n-                        format!(\"{} {{ {}, ..Default::default() }}\", binding_type, field_list)\n+                        format!(\"{binding_type} {{ {field_list}, ..Default::default() }}\")\n                     }\n                 } else {\n-                    format!(\"{} {{ {} }}\", binding_type, field_list)\n+                    format!(\"{binding_type} {{ {field_list} }}\")\n                 };\n \n                 // span lint once per statement that binds default\n@@ -250,10 +250,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                     first_assign.unwrap().span,\n                     \"field assignment outside of initializer for an instance created with Default::default()\",\n                     Some(local.span),\n-                    &format!(\n-                        \"consider initializing the variable with `{}` and removing relevant reassignments\",\n-                        sugg\n-                    ),\n+                    &format!(\"consider initializing the variable with `{sugg}` and removing relevant reassignments\"),\n                 );\n                 self.reassigned_linted.insert(span);\n             }"}, {"sha": "1ad929864b2a0061bcbb413afce05ec4e171fdf7", "filename": "clippy_lints/src/default_instead_of_iter_empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_instead_of_iter_empty.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,7 +23,7 @@ declare_clippy_lint! {\n     /// let _ = std::iter::empty::<usize>();\n     /// let iter: std::iter::Empty<usize> = std::iter::empty();\n     /// ```\n-    #[clippy::version = \"1.63.0\"]\n+    #[clippy::version = \"1.64.0\"]\n     pub DEFAULT_INSTEAD_OF_ITER_EMPTY,\n     style,\n     \"check `std::iter::Empty::default()` and replace with `std::iter::empty()`\""}, {"sha": "3ed9cd36a2292a171e0ff63e7e2574ef5c8e7aea", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -95,8 +95,8 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n                         src\n                     } else {\n                         match lit.node {\n-                            LitKind::Int(src, _) => format!(\"{}\", src),\n-                            LitKind::Float(src, _) => format!(\"{}\", src),\n+                            LitKind::Int(src, _) => format!(\"{src}\"),\n+                            LitKind::Float(src, _) => format!(\"{src}\"),\n                             _ => return,\n                         }\n                     };"}, {"sha": "741edc1319609004c4e9ed087025aae0f70c5856", "filename": "clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,10 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{self as hir, HirId, Item, ItemKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "029b082c141641970c36a66b3fdb9c50413ddf7d", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -135,7 +135,7 @@ declare_clippy_lint! {\n     /// let x = String::new();\n     /// let y: &str = &x;\n     /// ```\n-    #[clippy::version = \"1.60.0\"]\n+    #[clippy::version = \"1.64.0\"]\n     pub EXPLICIT_AUTO_DEREF,\n     complexity,\n     \"dereferencing when the compiler would automatically dereference\"\n@@ -1308,7 +1308,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n             };\n \n             let expr_str = if !expr_is_macro_call && is_final_ufcs && expr.precedence().order() < PREC_PREFIX {\n-                format!(\"({})\", expr_str)\n+                format!(\"({expr_str})\")\n             } else {\n                 expr_str.into_owned()\n             };\n@@ -1322,7 +1322,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                     Mutability::Mut => \"explicit `deref_mut` method call\",\n                 },\n                 \"try this\",\n-                format!(\"{}{}{}\", addr_of_str, deref_str, expr_str),\n+                format!(\"{addr_of_str}{deref_str}{expr_str}\"),\n                 app,\n             );\n         },\n@@ -1336,7 +1336,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                     && !has_enclosing_paren(&snip)\n                     && (expr.precedence().order() < data.position.precedence() || calls_field)\n                 {\n-                    format!(\"({})\", snip)\n+                    format!(\"({snip})\")\n                 } else {\n                     snip.into()\n                 };\n@@ -1379,9 +1379,9 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                     let (snip, snip_is_macro) = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app);\n                     let sugg =\n                         if !snip_is_macro && expr.precedence().order() < precedence && !has_enclosing_paren(&snip) {\n-                            format!(\"{}({})\", prefix, snip)\n+                            format!(\"{prefix}({snip})\")\n                         } else {\n-                            format!(\"{}{}\", prefix, snip)\n+                            format!(\"{prefix}{snip}\")\n                         };\n                     diag.span_suggestion(data.span, \"try this\", sugg, app);\n                 },\n@@ -1460,14 +1460,14 @@ impl Dereferencing {\n                             } else {\n                                 pat.always_deref = false;\n                                 let snip = snippet_with_context(cx, e.span, parent.span.ctxt(), \"..\", &mut pat.app).0;\n-                                pat.replacements.push((e.span, format!(\"&{}\", snip)));\n+                                pat.replacements.push((e.span, format!(\"&{snip}\")));\n                             }\n                         },\n                         _ if !e.span.from_expansion() => {\n                             // Double reference might be needed at this point.\n                             pat.always_deref = false;\n                             let snip = snippet_with_applicability(cx, e.span, \"..\", &mut pat.app);\n-                            pat.replacements.push((e.span, format!(\"&{}\", snip)));\n+                            pat.replacements.push((e.span, format!(\"&{snip}\")));\n                         },\n                         // Edge case for macros. The span of the identifier will usually match the context of the\n                         // binding, but not if the identifier was created in a macro. e.g. `concat_idents` and proc"}, {"sha": "3fac93dcc90c504f2f26dc9df219a1688b4f9ac9", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -191,7 +191,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.63.0\"]\n     pub DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n-    style,\n+    nursery,\n     \"deriving `PartialEq` on a type that can implement `Eq`, without implementing `Eq`\"\n }\n "}, {"sha": "b02f87c07db73b0805a1e03dcd2433bd2f2a7dff", "filename": "clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -106,7 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n                 reason: Some(reason), ..\n             } = conf\n             {\n-                diag.note(&format!(\"{} (from clippy.toml)\", reason));\n+                diag.note(&format!(\"{reason} (from clippy.toml)\"));\n             }\n         });\n     }"}, {"sha": "084190f00132ce04e9b0ffb600165cc320b8ff16", "filename": "clippy_lints/src/disallowed_script_idents.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_script_idents.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -99,8 +99,7 @@ impl EarlyLintPass for DisallowedScriptIdents {\n                         DISALLOWED_SCRIPT_IDENTS,\n                         span,\n                         &format!(\n-                            \"identifier `{}` has a Unicode script that is not allowed by configuration: {}\",\n-                            symbol_str,\n+                            \"identifier `{symbol_str}` has a Unicode script that is not allowed by configuration: {}\",\n                             script.full_name()\n                         ),\n                     );"}, {"sha": "debcd75ae75b6cbe83495a7a9586d3dc25805d69", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,9 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{\n-    def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, Ty, TyKind, UseKind,\n-};\n+use rustc_hir::{def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, Ty, TyKind, UseKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -92,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n                 conf::DisallowedType::Simple(path) => (path, None),\n                 conf::DisallowedType::WithReason { path, reason } => (\n                     path,\n-                    reason.as_ref().map(|reason| format!(\"{} (from clippy.toml)\", reason)),\n+                    reason.as_ref().map(|reason| format!(\"{reason} (from clippy.toml)\")),\n                 ),\n             };\n             let segs: Vec<_> = path.split(\"::\").collect();\n@@ -130,7 +128,7 @@ fn emit(cx: &LateContext<'_>, name: &str, span: Span, reason: Option<&str>) {\n         cx,\n         DISALLOWED_TYPES,\n         span,\n-        &format!(\"`{}` is not allowed according to config\", name),\n+        &format!(\"`{name}` is not allowed according to config\"),\n         |diag| {\n             if let Some(reason) = reason {\n                 diag.note(reason);"}, {"sha": "fd143a9d77c1092165e7f2de1074bab2828cc9db", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -237,7 +237,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                         panic_span: None,\n                     };\n                     fpu.visit_expr(body.value);\n-                    lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+                    lint_for_missing_headers(\n+                        cx,\n+                        item.def_id.def_id,\n+                        item.span,\n+                        sig,\n+                        headers,\n+                        Some(body_id),\n+                        fpu.panic_span,\n+                    );\n                 }\n             },\n             hir::ItemKind::Impl(impl_) => {\n@@ -287,7 +295,15 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n                 panic_span: None,\n             };\n             fpu.visit_expr(body.value);\n-            lint_for_missing_headers(cx, item.def_id.def_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(\n+                cx,\n+                item.def_id.def_id,\n+                item.span,\n+                sig,\n+                headers,\n+                Some(body_id),\n+                fpu.panic_span,\n+            );\n         }\n     }\n }\n@@ -790,7 +806,7 @@ fn check_word(cx: &LateContext<'_>, word: &str, span: Span) {\n                 diag.span_suggestion_with_style(\n                     span,\n                     \"try\",\n-                    format!(\"`{}`\", snippet),\n+                    format!(\"`{snippet}`\"),\n                     applicability,\n                     // always show the suggestion in a separate line, since the\n                     // inline presentation adds another pair of backticks"}, {"sha": "4721a7b370567c5ebb3a23275de952275d3a2912", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,7 +1,8 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::get_parent_node;\n use clippy_utils::is_must_use_func_call;\n use clippy_utils::ty::{is_copy, is_must_use_ty, is_type_lang_item};\n-use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_hir::{Arm, Expr, ExprKind, LangItem, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -202,11 +203,13 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             && let Some(fn_name) = cx.tcx.get_diagnostic_name(def_id)\n         {\n             let arg_ty = cx.typeck_results().expr_ty(arg);\n+            let is_copy = is_copy(cx, arg_ty);\n+            let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n                 sym::mem_drop if arg_ty.is_ref() => (DROP_REF, DROP_REF_SUMMARY),\n                 sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n-                sym::mem_drop if is_copy(cx, arg_ty) => (DROP_COPY, DROP_COPY_SUMMARY),\n-                sym::mem_forget if is_copy(cx, arg_ty) => (FORGET_COPY, FORGET_COPY_SUMMARY),\n+                sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n+                sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),\n                 sym::mem_drop if is_type_lang_item(cx, arg_ty, LangItem::ManuallyDrop) => {\n                     span_lint_and_help(\n                         cx,\n@@ -221,7 +224,9 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n                 sym::mem_drop\n                     if !(arg_ty.needs_drop(cx.tcx, cx.param_env)\n                         || is_must_use_func_call(cx, arg)\n-                        || is_must_use_ty(cx, arg_ty)) =>\n+                        || is_must_use_ty(cx, arg_ty)\n+                        || drop_is_single_call_in_arm\n+                        ) =>\n                 {\n                     (DROP_NON_DROP, DROP_NON_DROP_SUMMARY)\n                 },\n@@ -236,8 +241,23 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n                 expr.span,\n                 msg,\n                 Some(arg.span),\n-                &format!(\"argument has type `{}`\", arg_ty),\n+                &format!(\"argument has type `{arg_ty}`\"),\n             );\n         }\n     }\n }\n+\n+// dropping returned value of a function like in the following snippet is considered idiomatic, see\n+// #9482 for examples match <var> {\n+//     <pat> => drop(fn_with_side_effect_and_returning_some_value()),\n+//     ..\n+// }\n+fn is_single_call_in_arm<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'_>, drop_expr: &'tcx Expr<'_>) -> bool {\n+    if matches!(arg.kind, ExprKind::Call(..) | ExprKind::MethodCall(..)) {\n+        let parent_node = get_parent_node(cx.tcx, drop_expr.hir_id);\n+        if let Some(Node::Arm(Arm { body, .. })) = &parent_node {\n+            return body.hir_id == drop_expr.hir_id;\n+        }\n+    }\n+    false\n+}"}, {"sha": "9c834cf014485e824ee47e27593a91a19381ea49", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -113,13 +113,8 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n                     ),\n                 };\n                 format!(\n-                    \"if let {}::{} = {}.entry({}) {} else {}\",\n+                    \"if let {}::{entry_kind} = {map_str}.entry({key_str}) {then_str} else {else_str}\",\n                     map_ty.entry_path(),\n-                    entry_kind,\n-                    map_str,\n-                    key_str,\n-                    then_str,\n-                    else_str,\n                 )\n             } else {\n                 // if .. { insert } else { insert }\n@@ -137,16 +132,11 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n                 let indent_str = snippet_indent(cx, expr.span);\n                 let indent_str = indent_str.as_deref().unwrap_or(\"\");\n                 format!(\n-                    \"match {}.entry({}) {{\\n{indent}    {entry}::{} => {}\\n\\\n-                        {indent}    {entry}::{} => {}\\n{indent}}}\",\n-                    map_str,\n-                    key_str,\n-                    then_entry,\n+                    \"match {map_str}.entry({key_str}) {{\\n{indent_str}    {entry}::{then_entry} => {}\\n\\\n+                        {indent_str}    {entry}::{else_entry} => {}\\n{indent_str}}}\",\n                     reindent_multiline(then_str.into(), true, Some(4 + indent_str.len())),\n-                    else_entry,\n                     reindent_multiline(else_str.into(), true, Some(4 + indent_str.len())),\n                     entry = map_ty.entry_path(),\n-                    indent = indent_str,\n                 )\n             }\n         } else {\n@@ -163,20 +153,16 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n                     then_search.snippet_occupied(cx, then_expr.span, &mut app)\n                 };\n                 format!(\n-                    \"if let {}::{} = {}.entry({}) {}\",\n+                    \"if let {}::{entry_kind} = {map_str}.entry({key_str}) {body_str}\",\n                     map_ty.entry_path(),\n-                    entry_kind,\n-                    map_str,\n-                    key_str,\n-                    body_str,\n                 )\n             } else if let Some(insertion) = then_search.as_single_insertion() {\n                 let value_str = snippet_with_context(cx, insertion.value.span, then_expr.span.ctxt(), \"..\", &mut app).0;\n                 if contains_expr.negated {\n                     if insertion.value.can_have_side_effects() {\n-                        format!(\"{}.entry({}).or_insert_with(|| {});\", map_str, key_str, value_str)\n+                        format!(\"{map_str}.entry({key_str}).or_insert_with(|| {value_str});\")\n                     } else {\n-                        format!(\"{}.entry({}).or_insert({});\", map_str, key_str, value_str)\n+                        format!(\"{map_str}.entry({key_str}).or_insert({value_str});\")\n                     }\n                 } else {\n                     // TODO: suggest using `if let Some(v) = map.get_mut(k) { .. }` here.\n@@ -186,7 +172,7 @@ impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n             } else {\n                 let block_str = then_search.snippet_closure(cx, then_expr.span, &mut app);\n                 if contains_expr.negated {\n-                    format!(\"{}.entry({}).or_insert_with(|| {});\", map_str, key_str, block_str)\n+                    format!(\"{map_str}.entry({key_str}).or_insert_with(|| {block_str});\")\n                 } else {\n                     // TODO: suggest using `if let Some(v) = map.get_mut(k) { .. }` here.\n                     // This would need to be a different lint."}, {"sha": "b019d07d53d11fb1318d1be1f082f8493e699a9b", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -202,12 +202,11 @@ fn check_variant(cx: &LateContext<'_>, threshold: u64, def: &EnumDef<'_>, item_n\n         cx,\n         ENUM_VARIANT_NAMES,\n         span,\n-        &format!(\"all variants have the same {}fix: `{}`\", what, value),\n+        &format!(\"all variants have the same {what}fix: `{value}`\"),\n         None,\n         &format!(\n-            \"remove the {}fixes and use full paths to \\\n-             the variants instead of glob imports\",\n-            what\n+            \"remove the {what}fixes and use full paths to \\\n+             the variants instead of glob imports\"\n         ),\n     );\n }"}, {"sha": "f5aa0dcf9a463c196e7e98c4de228431750fe806", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -51,9 +51,7 @@ fn unary_pattern(pat: &Pat<'_>) -> bool {\n             false\n         },\n         PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n-        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => {\n-            !etc.as_opt_usize().is_some() && array_rec(a)\n-        }\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.as_opt_usize().is_some() && array_rec(a),\n         PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n         PatKind::Path(_) | PatKind::Lit(_) => true,\n     }\n@@ -93,9 +91,8 @@ impl<'tcx> LateLintPass<'tcx> for PatternEquality {\n                     \"this pattern matching can be expressed using equality\",\n                     \"try\",\n                     format!(\n-                        \"{} == {}\",\n+                        \"{} == {pat_str}\",\n                         snippet_with_context(cx, let_expr.init.span, expr.span.ctxt(), \"..\", &mut applicability).0,\n-                        pat_str,\n                     ),\n                     applicability,\n                 );"}, {"sha": "2e608fe527fdceee413e19f8b30da78b85f49a43", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,6 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir;\n use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node, Pat, PatKind};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n@@ -10,7 +11,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::kw;\n use rustc_target::spec::abi::Abi;\n-use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n@@ -177,7 +177,13 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "710fceceae57d0da3dc388b912bfef7b11336056", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n \n                             then {\n                                 // Mutable closure is used after current expr; we cannot consume it.\n-                                snippet = format!(\"&mut {}\", snippet);\n+                                snippet = format!(\"&mut {snippet}\");\n                             }\n                         }\n                         diag.span_suggestion(\n@@ -157,7 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                     diag.span_suggestion(\n                         expr.span,\n                         \"replace the closure with the method itself\",\n-                        format!(\"{}::{}\", name, path.ident.name),\n+                        format!(\"{name}::{}\", path.ident.name),\n                         Applicability::MachineApplicable,\n                     );\n                 })"}, {"sha": "be6242bd20b8464fc84f16b81e44d8aeed3e3c0f", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -97,7 +97,7 @@ impl LateLintPass<'_> for ExhaustiveItems {\n                     item.span,\n                     msg,\n                     |diag| {\n-                        let sugg = format!(\"#[non_exhaustive]\\n{}\", indent);\n+                        let sugg = format!(\"#[non_exhaustive]\\n{indent}\");\n                         diag.span_suggestion(suggestion_span,\n                                              \"try adding #[non_exhaustive]\",\n                                              sugg,"}, {"sha": "c0ea6f338a230b51d9864dc2dcc8e89a56558ed3", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -80,12 +80,12 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n                 // used.\n                 let (used, sugg_mac) = if let Some(macro_name) = calling_macro {\n                     (\n-                        format!(\"{}!({}(), ...)\", macro_name, dest_name),\n+                        format!(\"{macro_name}!({dest_name}(), ...)\"),\n                         macro_name.replace(\"write\", \"print\"),\n                     )\n                 } else {\n                     (\n-                        format!(\"{}().write_fmt(...)\", dest_name),\n+                        format!(\"{dest_name}().write_fmt(...)\"),\n                         \"print\".into(),\n                     )\n                 };\n@@ -100,9 +100,9 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n                     cx,\n                     EXPLICIT_WRITE,\n                     expr.span,\n-                    &format!(\"use of `{}.unwrap()`\", used),\n+                    &format!(\"use of `{used}.unwrap()`\"),\n                     \"try this\",\n-                    format!(\"{}{}!({})\", prefix, sugg_mac, inputs_snippet),\n+                    format!(\"{prefix}{sugg_mac}!({inputs_snippet})\"),\n                     applicability,\n                 )\n             }"}, {"sha": "6fee7fb308ce7f9905a8d505dbffa5f7f4f758ad", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -173,9 +173,9 @@ impl FloatFormat {\n         T: fmt::UpperExp + fmt::LowerExp + fmt::Display,\n     {\n         match self {\n-            Self::LowerExp => format!(\"{:e}\", f),\n-            Self::UpperExp => format!(\"{:E}\", f),\n-            Self::Normal => format!(\"{}\", f),\n+            Self::LowerExp => format!(\"{f:e}\"),\n+            Self::UpperExp => format!(\"{f:E}\"),\n+            Self::Normal => format!(\"{f}\"),\n         }\n     }\n }"}, {"sha": "e71afec12a77c5abb3523383d1c5d92786fcfa1d", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -142,8 +142,7 @@ fn prepare_receiver_sugg<'a>(cx: &LateContext<'_>, mut expr: &'a Expr<'a>) -> Su\n         if let ast::LitKind::Float(sym, ast::LitFloatType::Unsuffixed) = lit.node;\n         then {\n             let op = format!(\n-                \"{}{}{}\",\n-                suggestion,\n+                \"{suggestion}{}{}\",\n                 // Check for float literals without numbers following the decimal\n                 // separator such as `2.` and adds a trailing zero\n                 if sym.as_str().ends_with('.') {\n@@ -172,7 +171,7 @@ fn check_log_base(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, ar\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n-            format!(\"{}.{}()\", Sugg::hir(cx, receiver, \"..\").maybe_par(), method),\n+            format!(\"{}.{method}()\", Sugg::hir(cx, receiver, \"..\").maybe_par()),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -251,7 +250,7 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, receiver: &Expr<'_>, args:\n                 expr.span,\n                 \"exponent for bases 2 and e can be computed more accurately\",\n                 \"consider using\",\n-                format!(\"{}.{}()\", prepare_receiver_sugg(cx, &args[0]), method),\n+                format!(\"{}.{method}()\", prepare_receiver_sugg(cx, &args[0])),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "bc0c68f535a96f23e1cfd0d9b75ef55665b7d875", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n                 [_] => {\n                     // Simulate macro expansion, converting {{ and }} to { and }.\n                     let s_expand = format_args.format_string.snippet.replace(\"{{\", \"{\").replace(\"}}\", \"}\");\n-                    let sugg = format!(\"{}.to_string()\", s_expand);\n+                    let sugg = format!(\"{s_expand}.to_string()\");\n                     span_useless_format(cx, call_site, sugg, applicability);\n                 },\n                 [..] => {},"}, {"sha": "89d81bdd4850ee72c511c832781d119bd0b0f97f", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 149, "deletions": 26, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,16 +1,18 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n-use clippy_utils::is_diag_trait_item;\n-use clippy_utils::macros::{is_format_macro, FormatArgsExpn};\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n+use clippy_utils::macros::{is_format_macro, FormatArgsExpn, FormatParam, FormatParamUsage};\n+use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n use clippy_utils::ty::implements_trait;\n+use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId};\n+use rustc_hir::{Expr, ExprKind, HirId, Path, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, ExpnData, ExpnKind, Span, Symbol};\n \n declare_clippy_lint! {\n@@ -64,7 +66,67 @@ declare_clippy_lint! {\n     \"`to_string` applied to a type that implements `Display` in format args\"\n }\n \n-declare_lint_pass!(FormatArgs => [FORMAT_IN_FORMAT_ARGS, TO_STRING_IN_FORMAT_ARGS]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detect when a variable is not inlined in a format string,\n+    /// and suggests to inline it.\n+    ///\n+    /// ### Why is this bad?\n+    /// Non-inlined code is slightly more difficult to read and understand,\n+    /// as it requires arguments to be matched against the format string.\n+    /// The inlined syntax, where allowed, is simpler.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let var = 42;\n+    /// # let width = 1;\n+    /// # let prec = 2;\n+    /// format!(\"{}\", var);\n+    /// format!(\"{v:?}\", v = var);\n+    /// format!(\"{0} {0}\", var);\n+    /// format!(\"{0:1$}\", var, width);\n+    /// format!(\"{:.*}\", prec, var);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// # let width = 1;\n+    /// # let prec = 2;\n+    /// format!(\"{var}\");\n+    /// format!(\"{var:?}\");\n+    /// format!(\"{var} {var}\");\n+    /// format!(\"{var:width$}\");\n+    /// format!(\"{var:.prec$}\");\n+    /// ```\n+    ///\n+    /// ### Known Problems\n+    ///\n+    /// There may be a false positive if the format string is expanded from certain proc macros:\n+    ///\n+    /// ```ignore\n+    /// println!(indoc!(\"{}\"), var);\n+    /// ```\n+    ///\n+    /// If a format string contains a numbered argument that cannot be inlined\n+    /// nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n+    #[clippy::version = \"1.65.0\"]\n+    pub UNINLINED_FORMAT_ARGS,\n+    pedantic,\n+    \"using non-inlined variables in `format!` calls\"\n+}\n+\n+impl_lint_pass!(FormatArgs => [FORMAT_IN_FORMAT_ARGS, UNINLINED_FORMAT_ARGS, TO_STRING_IN_FORMAT_ARGS]);\n+\n+pub struct FormatArgs {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl FormatArgs {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -86,9 +148,73 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                     check_format_in_format_args(cx, outermost_expn_data.call_site, name, arg.param.value);\n                     check_to_string_in_format_args(cx, name, arg.param.value);\n                 }\n+                if meets_msrv(self.msrv, msrvs::FORMAT_ARGS_CAPTURE) {\n+                    check_uninlined_args(cx, &format_args, outermost_expn_data.call_site);\n+                }\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n+}\n+\n+fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span) {\n+    if args.format_string.span.from_expansion() {\n+        return;\n+    }\n+\n+    let mut fixes = Vec::new();\n+    // If any of the arguments are referenced by an index number,\n+    // and that argument is not a simple variable and cannot be inlined,\n+    // we cannot remove any other arguments in the format string,\n+    // because the index numbers might be wrong after inlining.\n+    // Example of an un-inlinable format:  print!(\"{}{1}\", foo, 2)\n+    if !args.params().all(|p| check_one_arg(cx, &p, &mut fixes)) || fixes.is_empty() {\n+        return;\n+    }\n+\n+    // FIXME: Properly ignore a rare case where the format string is wrapped in a macro.\n+    // Example:  `format!(indoc!(\"{}\"), foo);`\n+    // If inlined, they will cause a compilation error:\n+    //     > to avoid ambiguity, `format_args!` cannot capture variables\n+    //     > when the format string is expanded from a macro\n+    // @Alexendoo explanation:\n+    //     > indoc! is a proc macro that is producing a string literal with its span\n+    //     > set to its input it's not marked as from expansion, and since it's compatible\n+    //     > tokenization wise clippy_utils::is_from_proc_macro wouldn't catch it either\n+    // This might be a relatively expensive test, so do it only we are ready to replace.\n+    // See more examples in tests/ui/uninlined_format_args.rs\n+\n+    span_lint_and_then(\n+        cx,\n+        UNINLINED_FORMAT_ARGS,\n+        call_site,\n+        \"variables can be used directly in the `format!` string\",\n+        |diag| {\n+            diag.multipart_suggestion(\"change this to\", fixes, Applicability::MachineApplicable);\n+        },\n+    );\n+}\n+\n+fn check_one_arg(cx: &LateContext<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n+    if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n+        && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n+        && let Path { span, segments, .. } = path\n+        && let [segment] = segments\n+    {\n+        let replacement = match param.usage {\n+            FormatParamUsage::Argument => segment.ident.name.to_string(),\n+            FormatParamUsage::Width => format!(\"{}$\", segment.ident.name),\n+            FormatParamUsage::Precision => format!(\".{}$\", segment.ident.name),\n+        };\n+        fixes.push((param.span, replacement));\n+        let arg_span = expand_past_previous_comma(cx, *span);\n+        fixes.push((arg_span, String::new()));\n+        true  // successful inlining, continue checking\n+    } else {\n+        // if we can't inline a numbered argument, we can't continue\n+        param.kind != Numbered\n+    }\n }\n \n fn outermost_expn_data(expn_data: ExpnData) -> ExpnData {\n@@ -99,12 +225,7 @@ fn outermost_expn_data(expn_data: ExpnData) -> ExpnData {\n     }\n }\n \n-fn check_format_in_format_args(\n-    cx: &LateContext<'_>,\n-    call_site: Span,\n-    name: Symbol,\n-    arg: &Expr<'_>,\n-) {\n+fn check_format_in_format_args(cx: &LateContext<'_>, call_site: Span, name: Symbol, arg: &Expr<'_>) {\n     let expn_data = arg.span.ctxt().outer_expn_data();\n     if expn_data.call_site.from_expansion() {\n         return;\n@@ -117,11 +238,10 @@ fn check_format_in_format_args(\n         cx,\n         FORMAT_IN_FORMAT_ARGS,\n         call_site,\n-        &format!(\"`format!` in `{}!` args\", name),\n+        &format!(\"`format!` in `{name}!` args\"),\n         |diag| {\n             diag.help(&format!(\n-                \"combine the `format!(..)` arguments with the outer `{}!(..)` call\",\n-                name\n+                \"combine the `format!(..)` arguments with the outer `{name}!(..)` call\"\n             ));\n             diag.help(\"or consider changing `format!` to `format_args!`\");\n         },\n@@ -149,8 +269,7 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n                     TO_STRING_IN_FORMAT_ARGS,\n                     value.span.with_lo(receiver.span.hi()),\n                     &format!(\n-                        \"`to_string` applied to a type that implements `Display` in `{}!` args\",\n-                        name\n+                        \"`to_string` applied to a type that implements `Display` in `{name}!` args\"\n                     ),\n                     \"remove this\",\n                     String::new(),\n@@ -162,16 +281,13 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n                     TO_STRING_IN_FORMAT_ARGS,\n                     value.span,\n                     &format!(\n-                        \"`to_string` applied to a type that implements `Display` in `{}!` args\",\n-                        name\n+                        \"`to_string` applied to a type that implements `Display` in `{name}!` args\"\n                     ),\n                     \"use this\",\n                     format!(\n-                        \"{}{:*>width$}{}\",\n+                        \"{}{:*>n_needed_derefs$}{receiver_snippet}\",\n                         if needs_ref { \"&\" } else { \"\" },\n-                        \"\",\n-                        receiver_snippet,\n-                        width = n_needed_derefs\n+                        \"\"\n                     ),\n                     Applicability::MachineApplicable,\n                 );\n@@ -180,9 +296,12 @@ fn check_to_string_in_format_args(cx: &LateContext<'_>, name: Symbol, value: &Ex\n     }\n }\n \n-// Returns true if `hir_id` is referred to by multiple format params\n+/// Returns true if `hir_id` is referred to by multiple format params\n fn is_aliased(args: &FormatArgsExpn<'_>, hir_id: HirId) -> bool {\n-    args.params().filter(|param| param.value.hir_id == hir_id).at_most_one().is_err()\n+    args.params()\n+        .filter(|param| param.value.hir_id == hir_id)\n+        .at_most_one()\n+        .is_err()\n }\n \n fn count_needed_derefs<'tcx, I>(mut ty: Ty<'tcx>, mut iter: I) -> (usize, Ty<'tcx>)\n@@ -192,7 +311,11 @@ where\n     let mut n_total = 0;\n     let mut n_needed = 0;\n     loop {\n-        if let Some(Adjustment { kind: Adjust::Deref(overloaded_deref), target }) = iter.next() {\n+        if let Some(Adjustment {\n+            kind: Adjust::Deref(overloaded_deref),\n+            target,\n+        }) = iter.next()\n+        {\n             n_total += 1;\n             if overloaded_deref.is_some() {\n                 n_needed = n_total;"}, {"sha": "ed1342a54654301fe24541e0f9dc25b5d7b4a989", "filename": "clippy_lints/src/format_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformat_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformat_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_impl.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -214,12 +214,12 @@ fn check_print_in_format_impl(cx: &LateContext<'_>, expr: &Expr<'_>, impl_trait:\n                 cx,\n                 PRINT_IN_FORMAT_IMPL,\n                 macro_call.span,\n-                &format!(\"use of `{}!` in `{}` impl\", name, impl_trait.name),\n+                &format!(\"use of `{name}!` in `{}` impl\", impl_trait.name),\n                 \"replace with\",\n                 if let Some(formatter_name) = impl_trait.formatter_name {\n-                    format!(\"{}!({}, ..)\", replacement, formatter_name)\n+                    format!(\"{replacement}!({formatter_name}, ..)\")\n                 } else {\n-                    format!(\"{}!(..)\", replacement)\n+                    format!(\"{replacement}!(..)\")\n                 },\n                 Applicability::HasPlaceholders,\n             );"}, {"sha": "a866a68987d02c04d8f5c44f8d7ee83210d59295", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -154,11 +154,10 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n                             eqop_span,\n                             &format!(\n                                 \"this looks like you are trying to use `.. {op}= ..`, but you \\\n-                                 really are doing `.. = ({op} ..)`\",\n-                                op = op\n+                                 really are doing `.. = ({op} ..)`\"\n                             ),\n                             None,\n-                            &format!(\"to remove this lint, use either `{op}=` or `= {op}`\", op = op),\n+                            &format!(\"to remove this lint, use either `{op}=` or `= {op}`\"),\n                         );\n                     }\n                 }\n@@ -191,16 +190,12 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n                 SUSPICIOUS_UNARY_OP_FORMATTING,\n                 eqop_span,\n                 &format!(\n-                    \"by not having a space between `{binop}` and `{unop}` it looks like \\\n-                     `{binop}{unop}` is a single operator\",\n-                    binop = binop_str,\n-                    unop = unop_str\n+                    \"by not having a space between `{binop_str}` and `{unop_str}` it looks like \\\n+                     `{binop_str}{unop_str}` is a single operator\"\n                 ),\n                 None,\n                 &format!(\n-                    \"put a space between `{binop}` and `{unop}` and remove the space after `{unop}`\",\n-                    binop = binop_str,\n-                    unop = unop_str\n+                    \"put a space between `{binop_str}` and `{unop_str}` and remove the space after `{unop_str}`\"\n                 ),\n             );\n         }\n@@ -246,12 +241,11 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n                 cx,\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n-                &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n+                &format!(\"this is an `else {else_desc}` but the formatting might hide it\"),\n                 None,\n                 &format!(\n                     \"to remove this lint, remove the `else` or remove the new line between \\\n-                     `else` and `{}`\",\n-                    else_desc,\n+                     `else` and `{else_desc}`\",\n                 ),\n             );\n         }\n@@ -320,11 +314,10 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n                 cx,\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n-                &format!(\"this looks like {} but the `else` is missing\", looks_like),\n+                &format!(\"this looks like {looks_like} but the `else` is missing\"),\n                 None,\n                 &format!(\n-                    \"to remove this lint, add the missing `else` or add a new line before {}\",\n-                    next_thing,\n+                    \"to remove this lint, add the missing `else` or add a new line before {next_thing}\",\n                 ),\n             );\n         }"}, {"sha": "2a82473be8c5e6e9d3527adbd614caac5f02d43e", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n                     exp.span,\n                     \"this call to `from_str_radix` can be replaced with a call to `str::parse`\",\n                     \"try\",\n-                    format!(\"{}.parse::<{}>()\", sugg, prim_ty.name_str()),\n+                    format!(\"{sugg}.parse::<{}>()\", prim_ty.name_str()),\n                     Applicability::MaybeIncorrect\n                 );\n             }"}, {"sha": "977c8ee594f4ccc34b55573a420200a078c6206b", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -47,7 +47,8 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id.def_id).is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id.def_id).is_none()\n+        {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,\n@@ -143,7 +144,7 @@ fn check_must_use_candidate<'tcx>(\n             diag.span_suggestion(\n                 fn_span,\n                 \"add the attribute\",\n-                format!(\"#[must_use] {}\", snippet),\n+                format!(\"#[must_use] {snippet}\"),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "1e08922a616645395f649004a7cf121daf0ff793", "filename": "clippy_lints/src/functions/too_many_arguments.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -59,10 +59,7 @@ fn check_arg_number(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, fn_span: Span,\n             cx,\n             TOO_MANY_ARGUMENTS,\n             fn_span,\n-            &format!(\n-                \"this function has too many arguments ({}/{})\",\n-                args, too_many_arguments_threshold\n-            ),\n+            &format!(\"this function has too many arguments ({args}/{too_many_arguments_threshold})\"),\n         );\n     }\n }"}, {"sha": "f83f8b40f94b75eff950f62fa8e3f25936a97c42", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -78,10 +78,7 @@ pub(super) fn check_fn(\n             cx,\n             TOO_MANY_LINES,\n             span,\n-            &format!(\n-                \"this function has too many lines ({}/{})\",\n-                line_count, too_many_lines_threshold\n-            ),\n+            &format!(\"this function has too many lines ({line_count}/{too_many_lines_threshold})\"),\n         );\n     }\n }"}, {"sha": "0800e0644f7f31cee5a76a1d79d04467bba33cf1", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -84,15 +84,15 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n         {\n             let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n             let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n-                format!(\"({})\", cond_snip)\n+                format!(\"({cond_snip})\")\n             } else {\n                 cond_snip.into_owned()\n             };\n             let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n             let mut method_body = if then_block.stmts.is_empty() {\n                 arg_snip.into_owned()\n             } else {\n-                format!(\"{{ /* snippet */ {} }}\", arg_snip)\n+                format!(\"{{ /* snippet */ {arg_snip} }}\")\n             };\n             let method_name = if switch_to_eager_eval(cx, expr) && meets_msrv(self.msrv, msrvs::BOOL_THEN_SOME) {\n                 \"then_some\"\n@@ -102,14 +102,13 @@ impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n             };\n \n             let help = format!(\n-                \"consider using `bool::{}` like: `{}.{}({})`\",\n-                method_name, cond_snip, method_name, method_body,\n+                \"consider using `bool::{method_name}` like: `{cond_snip}.{method_name}({method_body})`\",\n             );\n             span_lint_and_help(\n                 cx,\n                 IF_THEN_SOME_ELSE_NONE,\n                 expr.span,\n-                &format!(\"this could be simplified with `bool::{}`\", method_name),\n+                &format!(\"this could be simplified with `bool::{method_name}`\"),\n                 None,\n                 &help,\n             );"}, {"sha": "93efe957b1dc27bf2f9d7c43594f1408b2cf73a6", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -5,14 +5,14 @@ use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{Ty, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n use if_chain::if_chain;\n \n@@ -89,8 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                     (\n                         generics_suggestion_span,\n                         format!(\n-                            \"<{}{}S: ::std::hash::BuildHasher{}>\",\n-                            generics_snip,\n+                            \"<{generics_snip}{}S: ::std::hash::BuildHasher{}>\",\n                             if generics_snip.is_empty() { \"\" } else { \", \" },\n                             if vis.suggestions.is_empty() {\n                                 \"\"\n@@ -263,8 +262,8 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n \n     fn type_arguments(&self) -> String {\n         match *self {\n-            ImplicitHasherType::HashMap(.., ref k, ref v) => format!(\"{}, {}\", k, v),\n-            ImplicitHasherType::HashSet(.., ref t) => format!(\"{}\", t),\n+            ImplicitHasherType::HashMap(.., ref k, ref v) => format!(\"{k}, {v}\"),\n+            ImplicitHasherType::HashSet(.., ref t) => format!(\"{t}\"),\n         }\n     }\n "}, {"sha": "cfc988da2335d3afb46303e376be2e79086e469a", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -53,7 +53,7 @@ fn lint_return(cx: &LateContext<'_>, emission_place: HirId, span: Span) {\n         span,\n         \"missing `return` statement\",\n         |diag| {\n-            diag.span_suggestion(span, \"add `return` as shown\", format!(\"return {}\", snip), app);\n+            diag.span_suggestion(span, \"add `return` as shown\", format!(\"return {snip}\"), app);\n         },\n     );\n }\n@@ -71,7 +71,7 @@ fn lint_break(cx: &LateContext<'_>, emission_place: HirId, break_span: Span, exp\n             diag.span_suggestion(\n                 break_span,\n                 \"change `break` to `return` as shown\",\n-                format!(\"return {}\", snip),\n+                format!(\"return {snip}\"),\n                 app,\n             );\n         },"}, {"sha": "f0dbe17d83a5c0a75689336febc47b4e77385ef3", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -170,7 +170,7 @@ fn print_lint_and_sugg(cx: &LateContext<'_>, var_name: &str, expr: &Expr<'_>) {\n         expr.span,\n         \"implicitly performing saturating subtraction\",\n         \"try\",\n-        format!(\"{} = {}.saturating_sub({});\", var_name, var_name, '1'),\n+        format!(\"{var_name} = {var_name}.saturating_sub({});\", '1'),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "e2f2d3d42e6953bef10b31fbd370d661444ece5a", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                 let mut fields_snippet = String::new();\n                 let (last_ident, idents) = ordered_fields.split_last().unwrap();\n                 for ident in idents {\n-                    let _ = write!(fields_snippet, \"{}, \", ident);\n+                    let _ = write!(fields_snippet, \"{ident}, \");\n                 }\n                 fields_snippet.push_str(&last_ident.to_string());\n \n@@ -100,10 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                         String::new()\n                     };\n \n-                let sugg = format!(\"{} {{ {}{} }}\",\n+                let sugg = format!(\"{} {{ {fields_snippet}{base_snippet} }}\",\n                     snippet(cx, qpath.span(), \"..\"),\n-                    fields_snippet,\n-                    base_snippet,\n                     );\n \n                 span_lint_and_sugg("}, {"sha": "c7b5badaae51b0c21a392cc9762a65be80c63016", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -139,14 +139,14 @@ fn lint_slice(cx: &LateContext<'_>, slice: &SliceLintInformation) {\n         .map(|(index, _)| *index)\n         .collect::<FxHashSet<_>>();\n \n-    let value_name = |index| format!(\"{}_{}\", slice.ident.name, index);\n+    let value_name = |index| format!(\"{}_{index}\", slice.ident.name);\n \n     if let Some(max_index) = used_indices.iter().max() {\n         let opt_ref = if slice.needs_ref { \"ref \" } else { \"\" };\n         let pat_sugg_idents = (0..=*max_index)\n             .map(|index| {\n                 if used_indices.contains(&index) {\n-                    format!(\"{}{}\", opt_ref, value_name(index))\n+                    format!(\"{opt_ref}{}\", value_name(index))\n                 } else {\n                     \"_\".to_string()\n                 }"}, {"sha": "d0e603dcf4ef5b8c724b352d82a4afb45685c1f5", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -131,23 +131,19 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n             INHERENT_TO_STRING_SHADOW_DISPLAY,\n             item.span,\n             &format!(\n-                \"type `{}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\",\n-                self_type\n+                \"type `{self_type}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\"\n             ),\n             None,\n-            &format!(\"remove the inherent method from type `{}`\", self_type),\n+            &format!(\"remove the inherent method from type `{self_type}`\"),\n         );\n     } else {\n         span_lint_and_help(\n             cx,\n             INHERENT_TO_STRING,\n             item.span,\n-            &format!(\n-                \"implementation of inherent method `to_string(&self) -> String` for type `{}`\",\n-                self_type\n-            ),\n+            &format!(\"implementation of inherent method `to_string(&self) -> String` for type `{self_type}`\"),\n             None,\n-            &format!(\"implement trait `Display` for type `{}` instead\", self_type),\n+            &format!(\"implement trait `Display` for type `{self_type}` instead\"),\n         );\n     }\n }"}, {"sha": "d609a5ca4d4653fcadcdd476ec1a181cbd349235", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -51,7 +51,7 @@ fn check_attrs(cx: &LateContext<'_>, name: Symbol, attrs: &[Attribute]) {\n             cx,\n             INLINE_FN_WITHOUT_BODY,\n             attr.span,\n-            &format!(\"use of `#[inline]` on trait method `{}` which has no body\", name),\n+            &format!(\"use of `#[inline]` on trait method `{name}` which has no body\"),\n             |diag| {\n                 diag.suggest_remove_item(cx, attr.span, \"remove\", Applicability::MachineApplicable);\n             },"}, {"sha": "33491da3fc5aff094bc504c462bbd8281a5596a0", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -138,8 +138,8 @@ impl IntPlusOne {\n         if let Some(snippet) = snippet_opt(cx, node.span) {\n             if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n                 let rec = match side {\n-                    Side::Lhs => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n-                    Side::Rhs => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                    Side::Lhs => Some(format!(\"{snippet} {binop_string} {other_side_snippet}\")),\n+                    Side::Rhs => Some(format!(\"{other_side_snippet} {binop_string} {snippet}\")),\n                 };\n                 return rec;\n             }"}, {"sha": "ea9f046fb973645f0c3573e56303c0bdf873a100", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -80,10 +80,7 @@ fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefI\n                 cx,\n                 ITER_NOT_RETURNING_ITERATOR,\n                 sig.span,\n-                &format!(\n-                    \"this method is named `{}` but its return type does not implement `Iterator`\",\n-                    name\n-                ),\n+                &format!(\"this method is named `{name}` but its return type does not implement `Iterator`\"),\n             );\n         }\n     }"}, {"sha": "76c83ab47d09561a9caf4ec22e161db2ce04ee18", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -2,12 +2,12 @@ use clippy_utils::diagnostics::span_lint_and_then;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{BytePos, Pos, Span};\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "3a563736fb077b7ae51d3016ff63c9c0c4434182", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -210,7 +210,8 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.def_id.def_id) && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n+    if cx.access_levels.is_exported(visited_trait.def_id.def_id)\n+        && trait_items.iter().any(|i| is_named_self(cx, i, sym::len))\n     {\n         let mut current_and_super_traits = DefIdSet::default();\n         fill_trait_set(visited_trait.def_id.to_def_id(), &mut current_and_super_traits, cx);\n@@ -278,15 +279,13 @@ impl<'tcx> LenOutput<'tcx> {\n             _ => \"\",\n         };\n         match self {\n-            Self::Integral => format!(\"expected signature: `({}self) -> bool`\", self_ref),\n-            Self::Option(_) => format!(\n-                \"expected signature: `({}self) -> bool` or `({}self) -> Option<bool>\",\n-                self_ref, self_ref\n-            ),\n-            Self::Result(..) => format!(\n-                \"expected signature: `({}self) -> bool` or `({}self) -> Result<bool>\",\n-                self_ref, self_ref\n-            ),\n+            Self::Integral => format!(\"expected signature: `({self_ref}self) -> bool`\"),\n+            Self::Option(_) => {\n+                format!(\"expected signature: `({self_ref}self) -> bool` or `({self_ref}self) -> Option<bool>\")\n+            },\n+            Self::Result(..) => {\n+                format!(\"expected signature: `({self_ref}self) -> bool` or `({self_ref}self) -> Result<bool>\")\n+            },\n         }\n     }\n }\n@@ -326,17 +325,15 @@ fn check_for_is_empty<'tcx>(\n     let (msg, is_empty_span, self_kind) = match is_empty {\n         None => (\n             format!(\n-                \"{} `{}` has a public `len` method, but no `is_empty` method\",\n-                item_kind,\n+                \"{item_kind} `{}` has a public `len` method, but no `is_empty` method\",\n                 item_name.as_str(),\n             ),\n             None,\n             None,\n         ),\n         Some(is_empty) if !cx.access_levels.is_exported(is_empty.def_id.expect_local()) => (\n             format!(\n-                \"{} `{}` has a public `len` method, but a private `is_empty` method\",\n-                item_kind,\n+                \"{item_kind} `{}` has a public `len` method, but a private `is_empty` method\",\n                 item_name.as_str(),\n             ),\n             Some(cx.tcx.def_span(is_empty.def_id)),\n@@ -348,8 +345,7 @@ fn check_for_is_empty<'tcx>(\n         {\n             (\n                 format!(\n-                    \"{} `{}` has a public `len` method, but the `is_empty` method has an unexpected signature\",\n-                    item_kind,\n+                    \"{item_kind} `{}` has a public `len` method, but the `is_empty` method has an unexpected signature\",\n                     item_name.as_str(),\n                 ),\n                 Some(cx.tcx.def_span(is_empty.def_id)),\n@@ -419,10 +415,9 @@ fn check_len(\n                 LEN_ZERO,\n                 span,\n                 &format!(\"length comparison to {}\", if compare_to == 0 { \"zero\" } else { \"one\" }),\n-                &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+                &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n                 format!(\n-                    \"{}{}.is_empty()\",\n-                    op,\n+                    \"{op}{}.is_empty()\",\n                     snippet_with_applicability(cx, receiver.span, \"_\", &mut applicability)\n                 ),\n                 applicability,\n@@ -439,10 +434,9 @@ fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Ex\n             COMPARISON_TO_EMPTY,\n             span,\n             \"comparison to empty slice\",\n-            &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+            &format!(\"using `{op}is_empty` is clearer and more explicit\"),\n             format!(\n-                \"{}{}.is_empty()\",\n-                op,\n+                \"{op}{}.is_empty()\",\n                 snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n             ),\n             applicability,"}, {"sha": "13071d64441a081d416fdc5782db70f195e32e51", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -106,8 +106,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                     // use mutably after the `if`\n \n                     let sug = format!(\n-                        \"let {mut}{name} = if {cond} {{{then} {value} }} else {{{else} {default} }};\",\n-                        mut=mutability,\n+                        \"let {mutability}{name} = if {cond} {{{then} {value} }} else {{{else} {default} }};\",\n                         name=ident.name,\n                         cond=snippet(cx, cond.span, \"_\"),\n                         then=if then.stmts.len() > 1 { \" ..;\" } else { \"\" },"}, {"sha": "435411642a75cc9d9865c67038dc8c4c651a5bc4", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -21,6 +21,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(booleans::NONMINIMAL_BOOL),\n     LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n     LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n+    LintId::of(box_default::BOX_DEFAULT),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n@@ -44,7 +45,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n     LintId::of(derive::DERIVE_HASH_XOR_EQ),\n     LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n     LintId::of(disallowed_names::DISALLOWED_NAMES),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),"}, {"sha": "ee08d802ccfbf7e8452cce8403474beea1afdb9b", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -60,6 +60,7 @@ store.register_lints(&[\n     booleans::NONMINIMAL_BOOL,\n     booleans::OVERLY_COMPLEX_BOOL_EXPR,\n     borrow_deref_ref::BORROW_DEREF_REF,\n+    box_default::BOX_DEFAULT,\n     cargo::CARGO_COMMON_METADATA,\n     cargo::MULTIPLE_CRATE_VERSIONS,\n     cargo::NEGATIVE_FEATURE_NAMES,\n@@ -159,6 +160,7 @@ store.register_lints(&[\n     format::USELESS_FORMAT,\n     format_args::FORMAT_IN_FORMAT_ARGS,\n     format_args::TO_STRING_IN_FORMAT_ARGS,\n+    format_args::UNINLINED_FORMAT_ARGS,\n     format_impl::PRINT_IN_FORMAT_IMPL,\n     format_impl::RECURSIVE_FORMAT_IMPL,\n     format_push_string::FORMAT_PUSH_STRING,"}, {"sha": "87be0052028fb2bbb2ebb859714f4639fae23801", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -6,6 +6,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n     LintId::of(cognitive_complexity::COGNITIVE_COMPLEXITY),\n     LintId::of(copies::BRANCHES_SHARING_CODE),\n+    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(equatable_if_let::EQUATABLE_IF_LET),\n     LintId::of(fallible_impl_from::FALLIBLE_IMPL_FROM),\n     LintId::of(floating_point_arithmetic::IMPRECISE_FLOPS),\n@@ -30,6 +31,8 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(strings::STRING_LIT_AS_BYTES),\n     LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n     LintId::of(trailing_empty_array::TRAILING_EMPTY_ARRAY),\n+    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n+    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n     LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n     LintId::of(unused_peekable::UNUSED_PEEKABLE),\n     LintId::of(unused_rounding::UNUSED_ROUNDING),"}, {"sha": "4eaabfbcc5fabaddfc7dc24e100fd1fa81bdf249", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS),\n     LintId::of(excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS),\n     LintId::of(excessive_bools::STRUCT_EXCESSIVE_BOOLS),\n+    LintId::of(format_args::UNINLINED_FORMAT_ARGS),\n     LintId::of(functions::MUST_USE_CANDIDATE),\n     LintId::of(functions::TOO_MANY_LINES),\n     LintId::of(if_not_else::IF_NOT_ELSE),\n@@ -88,8 +89,6 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(return_self_not_must_use::RETURN_SELF_NOT_MUST_USE),\n     LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n     LintId::of(strings::STRING_ADD_ASSIGN),\n-    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n-    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n     LintId::of(types::LINKEDLIST),\n     LintId::of(types::OPTION_OPTION),"}, {"sha": "8e927470e02ffea36f947a6133ba0dacb98f4226", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -3,6 +3,7 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n+    LintId::of(box_default::BOX_DEFAULT),\n     LintId::of(entry::MAP_ENTRY),\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),"}, {"sha": "ab7c4034b0e6aa303bd5b1104287fc98157528de", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -15,7 +15,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n     LintId::of(default_instead_of_iter_empty::DEFAULT_INSTEAD_OF_ITER_EMPTY),\n     LintId::of(dereference::NEEDLESS_BORROW),\n-    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n     LintId::of(disallowed_names::DISALLOWED_NAMES),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),"}, {"sha": "fde8aa9f92173d69f960fd5bd65568a062b5b362", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -31,6 +31,7 @@ extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_hir;\n+extern crate rustc_hir_analysis;\n extern crate rustc_hir_pretty;\n extern crate rustc_index;\n extern crate rustc_infer;\n@@ -43,7 +44,6 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n extern crate rustc_trait_selection;\n-extern crate rustc_hir_analysis;\n \n #[macro_use]\n extern crate clippy_utils;\n@@ -180,6 +180,7 @@ mod bool_assert_comparison;\n mod bool_to_int_with_if;\n mod booleans;\n mod borrow_deref_ref;\n+mod box_default;\n mod cargo;\n mod casts;\n mod checked_conversions;\n@@ -416,8 +417,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n             sess.err(&format!(\n-                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n-                s\n+                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n             ));\n             None\n         })\n@@ -433,8 +433,7 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n     let clippy_msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n             sess.err(&format!(\n-                \"error reading Clippy's configuration file. `{}` is not a valid Rust version\",\n-                s\n+                \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n             ));\n             None\n         })\n@@ -445,8 +444,7 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n             // if both files have an msrv, let's compare them and emit a warning if they differ\n             if clippy_msrv != cargo_msrv {\n                 sess.warn(&format!(\n-                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{}` from `clippy.toml`\",\n-                    clippy_msrv\n+                    \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n                 ));\n             }\n \n@@ -465,7 +463,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n         Err(error) => {\n-            sess.struct_err(&format!(\"error finding Clippy's configuration file: {}\", error))\n+            sess.struct_err(&format!(\"error finding Clippy's configuration file: {error}\"))\n                 .emit();\n             return Conf::default();\n         },\n@@ -535,8 +533,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|_| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n         store.register_late_pass(|_| Box::new(utils::internal_lints::IfChainStyle));\n         store.register_late_pass(|_| Box::new(utils::internal_lints::InvalidPaths));\n-        store.register_late_pass(|_| Box::new(utils::internal_lints::InterningDefinedSymbol::default()));\n-        store.register_late_pass(|_| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n+        store.register_late_pass(|_| Box::<utils::internal_lints::InterningDefinedSymbol>::default());\n+        store.register_late_pass(|_| Box::<utils::internal_lints::LintWithoutLintPass>::default());\n         store.register_late_pass(|_| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n         store.register_late_pass(|_| Box::new(utils::internal_lints::OuterExpnDataPass));\n         store.register_late_pass(|_| Box::new(utils::internal_lints::MsrvAttrImpl));\n@@ -629,10 +627,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             msrv,\n         ))\n     });\n-    store.register_late_pass(|_| Box::new(shadow::Shadow::default()));\n+    store.register_late_pass(|_| Box::<shadow::Shadow>::default());\n     store.register_late_pass(|_| Box::new(unit_types::UnitTypes));\n     store.register_late_pass(|_| Box::new(loops::Loops));\n-    store.register_late_pass(|_| Box::new(main_recursion::MainRecursion::default()));\n+    store.register_late_pass(|_| Box::<main_recursion::MainRecursion>::default());\n     store.register_late_pass(|_| Box::new(lifetimes::Lifetimes));\n     store.register_late_pass(|_| Box::new(entry::HashMapPass));\n     store.register_late_pass(|_| Box::new(minmax::MinMaxPass));\n@@ -666,7 +664,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(format::UselessFormat));\n     store.register_late_pass(|_| Box::new(swap::Swap));\n     store.register_late_pass(|_| Box::new(overflow_check_conditional::OverflowCheckConditional));\n-    store.register_late_pass(|_| Box::new(new_without_default::NewWithoutDefault::default()));\n+    store.register_late_pass(|_| Box::<new_without_default::NewWithoutDefault>::default());\n     let disallowed_names = conf.disallowed_names.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move |_| Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n@@ -705,7 +703,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(ref_option_ref::RefOptionRef));\n     store.register_late_pass(|_| Box::new(infinite_iter::InfiniteIter));\n     store.register_late_pass(|_| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n-    store.register_late_pass(|_| Box::new(useless_conversion::UselessConversion::default()));\n+    store.register_late_pass(|_| Box::<useless_conversion::UselessConversion>::default());\n     store.register_late_pass(|_| Box::new(implicit_hasher::ImplicitHasher));\n     store.register_late_pass(|_| Box::new(fallible_impl_from::FallibleImplFrom));\n     store.register_late_pass(|_| Box::new(question_mark::QuestionMark));\n@@ -775,7 +773,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             upper_case_acronyms_aggressive,\n         ))\n     });\n-    store.register_late_pass(|_| Box::new(default::Default::default()));\n+    store.register_late_pass(|_| Box::<default::Default>::default());\n     store.register_late_pass(move |_| Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n     store.register_late_pass(|_| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n     store.register_late_pass(|_| Box::new(exit::Exit));\n@@ -798,7 +796,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n     store.register_late_pass(move |_| Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n-    store.register_late_pass(|_| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n+    store.register_late_pass(|_| Box::<redundant_pub_crate::RedundantPubCrate>::default());\n     store.register_late_pass(|_| Box::new(unnamed_address::UnnamedAddress));\n     store.register_late_pass(move |_| Box::new(dereference::Dereferencing::new(msrv)));\n     store.register_late_pass(|_| Box::new(option_if_let_else::OptionIfLetElse));\n@@ -816,7 +814,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n-    store.register_late_pass(|_| Box::new(macro_use::MacroUseImports::default()));\n+    store.register_late_pass(|_| Box::<macro_use::MacroUseImports>::default());\n     store.register_late_pass(|_| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n     store.register_late_pass(|_| Box::new(unwrap_in_result::UnwrapInResult));\n     store.register_late_pass(|_| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n@@ -829,7 +827,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(strings::StrToString));\n     store.register_late_pass(|_| Box::new(strings::StringToString));\n     store.register_late_pass(|_| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n-    store.register_late_pass(|_| Box::new(vec_init_then_push::VecInitThenPush::default()));\n+    store.register_late_pass(|_| Box::<vec_init_then_push::VecInitThenPush>::default());\n     store.register_late_pass(|_| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|_| Box::new(from_str_radix_10::FromStrRadix10));\n     store.register_late_pass(move |_| Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n@@ -857,7 +855,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move |_| Box::new(format_args::FormatArgs));\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv)));\n     store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));\n@@ -867,7 +865,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|_| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));\n-    store.register_late_pass(|_| Box::new(only_used_in_recursion::OnlyUsedInRecursion::default()));\n+    store.register_late_pass(|_| Box::<only_used_in_recursion::OnlyUsedInRecursion>::default());\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n     store.register_late_pass(move |_| Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n@@ -876,7 +874,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n-    store.register_late_pass(|_| Box::new(write::Write::default()));\n+    store.register_late_pass(|_| Box::<write::Write>::default());\n     store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n     store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n     store.register_late_pass(|_| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n@@ -886,7 +884,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n     store.register_late_pass(|_| Box::new(strings::TrimSplitWhitespace));\n     store.register_late_pass(|_| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n-    store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n+    store.register_early_pass(|| Box::<duplicate_mod::DuplicateMod>::default());\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n     store.register_late_pass(|_| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n@@ -898,13 +896,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n-    store.register_late_pass(|_| Box::new(std_instead_of_core::StdReexports::default()));\n+    store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n     store.register_late_pass(|_| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));\n     store.register_late_pass(|_| Box::new(manual_string_new::ManualStringNew));\n     store.register_late_pass(|_| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n     store.register_late_pass(|_| Box::new(bool_to_int_with_if::BoolToIntWithIf));\n+    store.register_late_pass(|_| Box::new(box_default::BoxDefault));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "aef253303a8f490c913afb282d710d0967bd4b3e", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n-    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -276,7 +276,7 @@ fn could_use_elision<'tcx>(\n         let mut checker = BodyLifetimeChecker {\n             lifetimes_used_in_body: false,\n         };\n-        checker.visit_expr(&body.value);\n+        checker.visit_expr(body.value);\n         if checker.lifetimes_used_in_body {\n             return false;\n         }"}, {"sha": "25f19b9c6e6c771281a212748b21487ed9b8cf50", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -478,7 +478,7 @@ impl DecimalLiteralRepresentation {\n             if num_lit.radix == Radix::Decimal;\n             if val >= u128::from(self.threshold);\n             then {\n-                let hex = format!(\"{:#X}\", val);\n+                let hex = format!(\"{val:#X}\");\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n                 let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n                     warning_type.display(num_lit.format(), cx, lit.span);"}, {"sha": "14f2234813277c7c5ae4226278798c26548aa012", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -44,11 +44,10 @@ pub(super) fn check<'tcx>(\n                                 cx,\n                                 EXPLICIT_COUNTER_LOOP,\n                                 span,\n-                                &format!(\"the variable `{}` is used as a loop counter\", name),\n+                                &format!(\"the variable `{name}` is used as a loop counter\"),\n                                 \"consider using\",\n                                 format!(\n-                                    \"for ({}, {}) in {}.enumerate()\",\n-                                    name,\n+                                    \"for ({name}, {}) in {}.enumerate()\",\n                                     snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n                                     make_iterator_snippet(cx, arg, &mut applicability),\n                                 ),\n@@ -65,24 +64,21 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n                         span,\n-                        &format!(\"the variable `{}` is used as a loop counter\", name),\n+                        &format!(\"the variable `{name}` is used as a loop counter\"),\n                         |diag| {\n                             diag.span_suggestion(\n                                 span,\n                                 \"consider using\",\n                                 format!(\n-                                    \"for ({}, {}) in (0_{}..).zip({})\",\n-                                    name,\n+                                    \"for ({name}, {}) in (0_{int_name}..).zip({})\",\n                                     snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                                    int_name,\n                                     make_iterator_snippet(cx, arg, &mut applicability),\n                                 ),\n                                 applicability,\n                             );\n \n                             diag.note(&format!(\n-                                \"`{}` is of type `{}`, making it ineligible for `Iterator::enumerate`\",\n-                                name, int_name\n+                                \"`{name}` is of type `{int_name}`, making it ineligible for `Iterator::enumerate`\"\n                             ));\n                         },\n                     );"}, {"sha": "b1f2941622abbc0af06154094d30a18aeca34a7c", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, m\n         \"it is more concise to loop over references to containers instead of using explicit \\\n          iteration methods\",\n         \"to write this more concisely, try\",\n-        format!(\"&{}{}\", muta, object),\n+        format!(\"&{muta}{object}\"),\n         applicability,\n     );\n }"}, {"sha": "ed620460dbe660f95fc1cb5fcd46a17cc2f16365", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -38,15 +38,15 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, arg: &'tcx\n                     cx,\n                     FOR_KV_MAP,\n                     arg_span,\n-                    &format!(\"you seem to want to iterate on a map's {}s\", kind),\n+                    &format!(\"you seem to want to iterate on a map's {kind}s\"),\n                     |diag| {\n                         let map = sugg::Sugg::hir(cx, arg, \"map\");\n                         multispan_sugg(\n                             diag,\n                             \"use the corresponding method\",\n                             vec![\n                                 (pat_span, snippet(cx, new_pat_span, kind).into_owned()),\n-                                (arg_span, format!(\"{}.{}s{}()\", map.maybe_par(), kind, mutbl)),\n+                                (arg_span, format!(\"{}.{kind}s{mutbl}()\", map.maybe_par())),\n                             ],\n                         );\n                     },"}, {"sha": "1b36d452647ed3d200c06fdbbf64043b4f8ef5d2", "filename": "clippy_lints/src/loops/manual_flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(\n         then {\n             let if_let_type = if some_ctor { \"Some\" } else { \"Ok\" };\n             // Prepare the error message\n-            let msg = format!(\"unnecessary `if let` since only the `{}` variant of the iterator element is used\", if_let_type);\n+            let msg = format!(\"unnecessary `if let` since only the `{if_let_type}` variant of the iterator element is used\");\n \n             // Prepare the help message\n             let mut applicability = Applicability::MaybeIncorrect;"}, {"sha": "c87fc4f90e21659fcfd9b8e4a22cb9db6e8d7be9", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -177,13 +177,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     let dst = if dst_offset == sugg::EMPTY && dst_limit == sugg::EMPTY {\n         dst_base_str\n     } else {\n-        format!(\n-            \"{}[{}..{}]\",\n-            dst_base_str,\n-            dst_offset.maybe_par(),\n-            dst_limit.maybe_par()\n-        )\n-        .into()\n+        format!(\"{dst_base_str}[{}..{}]\", dst_offset.maybe_par(), dst_limit.maybe_par()).into()\n     };\n \n     let method_str = if is_copy(cx, elem_ty) {\n@@ -193,10 +187,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     };\n \n     format!(\n-        \"{}.{}(&{}[{}..{}]);\",\n-        dst,\n-        method_str,\n-        src_base_str,\n+        \"{dst}.{method_str}(&{src_base_str}[{}..{}]);\",\n         src_offset.maybe_par(),\n         src_limit.maybe_par()\n     )"}, {"sha": "c0a0444485e3b8b8a2b3ce4a26169e57d9a0489d", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -635,7 +635,7 @@ declare_clippy_lint! {\n     ///     arr.into_iter().find(|&el| el == 1)\n     /// }\n     /// ```\n-    #[clippy::version = \"1.61.0\"]\n+    #[clippy::version = \"1.64.0\"]\n     pub MANUAL_FIND,\n     complexity,\n     \"manual implementation of `Iterator::find`\""}, {"sha": "0ee42b61c9a509f7197c4d6f2d63a7b2d41e4a34", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -4,11 +4,11 @@ use clippy_utils::{get_enclosing_block, higher, path_to_local};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, Node, PatKind};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n-use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n     if_chain! {\n@@ -114,7 +114,13 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "66f9e28596e87cedda9ae44c8508a19523be8341", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -45,7 +45,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n                         let (arg, pred) = contains_arg\n                             .strip_prefix('&')\n                             .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n-                        format!(\"any(|{}| x == {})\", arg, pred)\n+                        format!(\"any(|{arg}| x == {pred})\")\n                     }\n                     _ => return,\n                 }\n@@ -141,9 +141,9 @@ impl IterFunction {\n             IterFunctionKind::Contains(span) => {\n                 let s = snippet(cx, *span, \"..\");\n                 if let Some(stripped) = s.strip_prefix('&') {\n-                    format!(\".any(|x| x == {})\", stripped)\n+                    format!(\".any(|x| x == {stripped})\")\n                 } else {\n-                    format!(\".any(|x| x == *{})\", s)\n+                    format!(\".any(|x| x == *{s})\")\n                 }\n             },\n         }"}, {"sha": "00cfc6d49f19a7f3043a70ff8d1f7760471466cd", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -145,7 +145,7 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         arg.span,\n-                        &format!(\"the loop variable `{}` is used to index `{}`\", ident.name, indexed),\n+                        &format!(\"the loop variable `{}` is used to index `{indexed}`\", ident.name),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n@@ -154,24 +154,24 @@ pub(super) fn check<'tcx>(\n                                     (pat.span, format!(\"({}, <item>)\", ident.name)),\n                                     (\n                                         arg.span,\n-                                        format!(\"{}.{}().enumerate(){}{}\", indexed, method, method_1, method_2),\n+                                        format!(\"{indexed}.{method}().enumerate(){method_1}{method_2}\"),\n                                     ),\n                                 ],\n                             );\n                         },\n                     );\n                 } else {\n                     let repl = if starts_at_zero && take_is_empty {\n-                        format!(\"&{}{}\", ref_mut, indexed)\n+                        format!(\"&{ref_mut}{indexed}\")\n                     } else {\n-                        format!(\"{}.{}(){}{}\", indexed, method, method_1, method_2)\n+                        format!(\"{indexed}.{method}(){method_1}{method_2}\")\n                     };\n \n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_RANGE_LOOP,\n                         arg.span,\n-                        &format!(\"the loop variable `{}` is only used to index `{}`\", ident.name, indexed),\n+                        &format!(\"the loop variable `{}` is only used to index `{indexed}`\", ident.name),\n                         |diag| {\n                             multispan_sugg(\n                                 diag,"}, {"sha": "16b00ad663787cd4c495d5acc9b48917b41be5a9", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -42,6 +42,7 @@ pub(super) fn check(\n     }\n }\n \n+#[derive(Copy, Clone)]\n enum NeverLoopResult {\n     // A break/return always get triggered but not necessarily for the main loop.\n     AlwaysBreak,\n@@ -51,8 +52,8 @@ enum NeverLoopResult {\n }\n \n #[must_use]\n-fn absorb_break(arg: &NeverLoopResult) -> NeverLoopResult {\n-    match *arg {\n+fn absorb_break(arg: NeverLoopResult) -> NeverLoopResult {\n+    match arg {\n         NeverLoopResult::AlwaysBreak | NeverLoopResult::Otherwise => NeverLoopResult::Otherwise,\n         NeverLoopResult::MayContinueMainLoop => NeverLoopResult::MayContinueMainLoop,\n     }\n@@ -92,19 +93,29 @@ fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult\n }\n \n fn never_loop_block(block: &Block<'_>, main_loop_id: HirId) -> NeverLoopResult {\n-    let mut iter = block.stmts.iter().filter_map(stmt_to_expr).chain(block.expr);\n+    let mut iter = block\n+        .stmts\n+        .iter()\n+        .filter_map(stmt_to_expr)\n+        .chain(block.expr.map(|expr| (expr, None)));\n     never_loop_expr_seq(&mut iter, main_loop_id)\n }\n \n-fn never_loop_expr_seq<'a, T: Iterator<Item = &'a Expr<'a>>>(es: &mut T, main_loop_id: HirId) -> NeverLoopResult {\n-    es.map(|e| never_loop_expr(e, main_loop_id))\n-        .fold(NeverLoopResult::Otherwise, combine_seq)\n+fn never_loop_expr_seq<'a, T: Iterator<Item = (&'a Expr<'a>, Option<&'a Block<'a>>)>>(\n+    es: &mut T,\n+    main_loop_id: HirId,\n+) -> NeverLoopResult {\n+    es.map(|(e, els)| {\n+        let e = never_loop_expr(e, main_loop_id);\n+        els.map_or(e, |els| combine_branches(e, never_loop_block(els, main_loop_id)))\n+    })\n+    .fold(NeverLoopResult::Otherwise, combine_seq)\n }\n \n-fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n+fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'tcx Block<'tcx>>)> {\n     match stmt.kind {\n-        StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some(e),\n-        StmtKind::Local(local) => local.init,\n+        StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some((e, None)),\n+        StmtKind::Local(local) => local.init.map(|init| (init, local.els)),\n         StmtKind::Item(..) => None,\n     }\n }\n@@ -139,7 +150,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Index(e1, e2) => never_loop_expr_all(&mut [e1, e2].iter().copied(), main_loop_id),\n         ExprKind::Loop(b, _, _, _) => {\n             // Break can come from the inner loop so remove them.\n-            absorb_break(&never_loop_block(b, main_loop_id))\n+            absorb_break(never_loop_block(b, main_loop_id))\n         },\n         ExprKind::If(e, e2, e3) => {\n             let e1 = never_loop_expr(e, main_loop_id);\n@@ -211,9 +222,5 @@ fn for_to_if_let_sugg(cx: &LateContext<'_>, iterator: &Expr<'_>, pat: &Pat<'_>)\n     let pat_snippet = snippet(cx, pat.span, \"_\");\n     let iter_snippet = make_iterator_snippet(cx, iterator, &mut Applicability::Unspecified);\n \n-    format!(\n-        \"if let Some({pat}) = {iter}.next()\",\n-        pat = pat_snippet,\n-        iter = iter_snippet\n-    )\n+    format!(\"if let Some({pat_snippet}) = {iter_snippet}.next()\")\n }"}, {"sha": "07edee46fa657639fb29f0ddada7e638ff34cf1d", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -30,10 +30,7 @@ pub(super) fn check<'tcx>(\n             vec.span,\n             \"it looks like the same item is being pushed into this Vec\",\n             None,\n-            &format!(\n-                \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n-                item_str, vec_str, item_str\n-            ),\n+            &format!(\"try using vec![{item_str};SIZE] or {vec_str}.resize(NEW_SIZE, {item_str})\"),\n         );\n     }\n "}, {"sha": "b6f4cf7bbb37f149eccda55bbc0ef40b2f08def9", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -5,12 +5,12 @@ use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_hir_analysis::hir_ty_to_ty;\n use std::iter::Iterator;\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -344,9 +344,8 @@ pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic\n                     _ => arg,\n                 };\n                 format!(\n-                    \"{}.{}()\",\n+                    \"{}.{method_name}()\",\n                     sugg::Sugg::hir_with_applicability(cx, caller, \"_\", applic_ref).maybe_par(),\n-                    method_name,\n                 )\n             },\n             _ => format!("}, {"sha": "1c6f0264cb543390654ed08a617c5d7faa35bc55", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -67,7 +67,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         expr.span.with_hi(scrutinee_expr.span.hi()),\n         \"this loop could be written as a `for` loop\",\n         \"try\",\n-        format!(\"for {} in {}{}\", loop_var, iterator, by_ref),\n+        format!(\"for {loop_var} in {iterator}{by_ref}\"),\n         applicability,\n     );\n }"}, {"sha": "f5617a905ff872992c96cfc9ad9c16b380dbce92", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -35,7 +35,8 @@ struct PathAndSpan {\n     span: Span,\n }\n \n-/// `MacroRefData` includes the name of the macro.\n+/// `MacroRefData` includes the name of the macro\n+/// and the path from `SourceMap::span_to_filename`.\n #[derive(Debug, Clone)]\n pub struct MacroRefData {\n     name: String,\n@@ -189,17 +190,17 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         let mut suggestions = vec![];\n         for ((root, span, hir_id), path) in used {\n             if path.len() == 1 {\n-                suggestions.push((span, format!(\"{}::{}\", root, path[0]), hir_id));\n+                suggestions.push((span, format!(\"{root}::{}\", path[0]), hir_id));\n             } else {\n-                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \")), hir_id));\n+                suggestions.push((span, format!(\"{root}::{{{}}}\", path.join(\", \")), hir_id));\n             }\n         }\n \n         // If mac_refs is not empty we have encountered an import we could not handle\n         // such as `std::prelude::v1::foo` or some other macro that expands to an import.\n         if self.mac_refs.is_empty() {\n             for (span, import, hir_id) in suggestions {\n-                let help = format!(\"use {};\", import);\n+                let help = format!(\"use {import};\");\n                 span_lint_hir_and_then(\n                     cx,\n                     MACRO_USE_IMPORTS,"}, {"sha": "9a0a26c0991b3eb59dd9a50caf98308f2ca217d1", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -74,11 +74,11 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                             if let Some(ret_pos) = position_before_rarrow(&header_snip);\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n-                                let help = format!(\"make the function `async` and {}\", ret_sugg);\n+                                let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,\n                                     &help,\n-                                    format!(\"async {}{}\", &header_snip[..ret_pos], ret_snip),\n+                                    format!(\"async {}{ret_snip}\", &header_snip[..ret_pos]),\n                                     Applicability::MachineApplicable\n                                 );\n \n@@ -196,7 +196,7 @@ fn suggested_ret(cx: &LateContext<'_>, output: &Ty<'_>) -> Option<(&'static str,\n         },\n         _ => {\n             let sugg = \"return the output of the future directly\";\n-            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {}\", snip)))\n+            snippet_opt(cx, output.span).map(|snip| (sugg, format!(\" -> {snip}\")))\n         },\n     }\n }"}, {"sha": "6a42275322b4399218b58239de3d5b38187f8e74", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -133,7 +133,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n                             diag.span_suggestion(\n                                 header_span,\n                                 \"add the attribute\",\n-                                format!(\"#[non_exhaustive] {}\", snippet),\n+                                format!(\"#[non_exhaustive] {snippet}\"),\n                                 Applicability::Unspecified,\n                             );\n                         }\n@@ -207,7 +207,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                             diag.span_suggestion(\n                                 header_span,\n                                 \"add the attribute\",\n-                                format!(\"#[non_exhaustive] {}\", snippet),\n+                                format!(\"#[non_exhaustive] {snippet}\"),\n                                 Applicability::Unspecified,\n                             );\n                     }"}, {"sha": "6f25a2ed8e434f60b11025d4943f6127a9848f1c", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// let x: i32 = 24;\n     /// let rem = x.rem_euclid(4);\n     /// ```\n-    #[clippy::version = \"1.63.0\"]\n+    #[clippy::version = \"1.64.0\"]\n     pub MANUAL_REM_EUCLID,\n     complexity,\n     \"manually reimplementing `rem_euclid`\""}, {"sha": "570fe73681830f3b7d12bf5844e761a3759fa91b", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// let mut vec = vec![0, 1, 2];\n     /// vec.retain(|x| x % 2 == 0);\n     /// ```\n-    #[clippy::version = \"1.63.0\"]\n+    #[clippy::version = \"1.64.0\"]\n     pub MANUAL_RETAIN,\n     perf,\n     \"`retain()` is simpler and the same functionalitys\"\n@@ -153,15 +153,15 @@ fn suggest(cx: &LateContext<'_>, parent_expr: &hir::Expr<'_>, left_expr: &hir::E\n         && let [filter_params] = filter_body.params\n         && let Some(sugg) = match filter_params.pat.kind {\n             hir::PatKind::Binding(_, _, filter_param_ident, None) => {\n-                Some(format!(\"{}.retain(|{}| {})\", snippet(cx, left_expr.span, \"..\"), filter_param_ident, snippet(cx, filter_body.value.span, \"..\")))\n+                Some(format!(\"{}.retain(|{filter_param_ident}| {})\", snippet(cx, left_expr.span, \"..\"), snippet(cx, filter_body.value.span, \"..\")))\n             },\n             hir::PatKind::Tuple([key_pat, value_pat], _) => {\n                 make_sugg(cx, key_pat, value_pat, left_expr, filter_body)\n             },\n             hir::PatKind::Ref(pat, _) => {\n                 match pat.kind {\n                     hir::PatKind::Binding(_, _, filter_param_ident, None) => {\n-                        Some(format!(\"{}.retain(|{}| {})\", snippet(cx, left_expr.span, \"..\"), filter_param_ident, snippet(cx, filter_body.value.span, \"..\")))\n+                        Some(format!(\"{}.retain(|{filter_param_ident}| {})\", snippet(cx, left_expr.span, \"..\"), snippet(cx, filter_body.value.span, \"..\")))\n                     },\n                     _ => None\n                 }\n@@ -190,23 +190,19 @@ fn make_sugg(\n     match (&key_pat.kind, &value_pat.kind) {\n         (hir::PatKind::Binding(_, _, key_param_ident, None), hir::PatKind::Binding(_, _, value_param_ident, None)) => {\n             Some(format!(\n-                \"{}.retain(|{}, &mut {}| {})\",\n+                \"{}.retain(|{key_param_ident}, &mut {value_param_ident}| {})\",\n                 snippet(cx, left_expr.span, \"..\"),\n-                key_param_ident,\n-                value_param_ident,\n                 snippet(cx, filter_body.value.span, \"..\")\n             ))\n         },\n         (hir::PatKind::Binding(_, _, key_param_ident, None), hir::PatKind::Wild) => Some(format!(\n-            \"{}.retain(|{}, _| {})\",\n+            \"{}.retain(|{key_param_ident}, _| {})\",\n             snippet(cx, left_expr.span, \"..\"),\n-            key_param_ident,\n             snippet(cx, filter_body.value.span, \"..\")\n         )),\n         (hir::PatKind::Wild, hir::PatKind::Binding(_, _, value_param_ident, None)) => Some(format!(\n-            \"{}.retain(|_, &mut {}| {})\",\n+            \"{}.retain(|_, &mut {value_param_ident}| {})\",\n             snippet(cx, left_expr.span, \"..\"),\n-            value_param_ident,\n             snippet(cx, filter_body.value.span, \"..\")\n         )),\n         _ => None,"}, {"sha": "0976940afac355fcc9f9b02f9796cf4262023018", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -108,15 +108,14 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n                     };\n \n                     let test_span = expr.span.until(then.span);\n-                    span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {} manually\", kind_word), |diag| {\n-                        diag.span_note(test_span, &format!(\"the {} was tested here\", kind_word));\n+                    span_lint_and_then(cx, MANUAL_STRIP, strippings[0], &format!(\"stripping a {kind_word} manually\"), |diag| {\n+                        diag.span_note(test_span, &format!(\"the {kind_word} was tested here\"));\n                         multispan_sugg(\n                             diag,\n-                            &format!(\"try using the `strip_{}` method\", kind_word),\n+                            &format!(\"try using the `strip_{kind_word}` method\"),\n                             vec![(test_span,\n-                                  format!(\"if let Some(<stripped>) = {}.strip_{}({}) \",\n+                                  format!(\"if let Some(<stripped>) = {}.strip_{kind_word}({}) \",\n                                           snippet(cx, target_arg.span, \"..\"),\n-                                          kind_word,\n                                           snippet(cx, pattern.span, \"..\")))]\n                             .into_iter().chain(strippings.into_iter().map(|span| (span, \"<stripped>\".into()))),\n                         );"}, {"sha": "df5684541e9074b01b8dd183801d47d51ccf6dfa", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -194,10 +194,7 @@ fn let_binding_name(cx: &LateContext<'_>, var_arg: &hir::Expr<'_>) -> String {\n \n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n-    format!(\n-        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type `()`\",\n-        map_type, function_type\n-    )\n+    format!(\"called `map(f)` on an `{map_type}` value where `f` is a {function_type} that returns the unit type `()`\")\n }\n \n fn lint_map_unit_fn("}, {"sha": "a020282d234f9bba5625d435b574314d4055e6ba", "filename": "clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -70,17 +70,15 @@ impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n                 let trimmed_ok = snippet_with_applicability(cx, let_expr.span.until(ok_path.ident.span), \"\", &mut applicability);\n                 let sugg = format!(\n-                    \"{} let Ok({}) = {}\",\n-                    ifwhile,\n-                    some_expr_string,\n+                    \"{ifwhile} let Ok({some_expr_string}) = {}\",\n                     trimmed_ok.trim().trim_end_matches('.'),\n                 );\n                 span_lint_and_sugg(\n                     cx,\n                     MATCH_RESULT_OK,\n                     expr.span.with_hi(let_expr.span.hi()),\n                     \"matching on `Some` with `ok()` is redundant\",\n-                    &format!(\"consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    &format!(\"consider matching on `Ok({some_expr_string})` and removing the call to `ok` instead\"),\n                     sugg,\n                     applicability,\n                 );"}, {"sha": "96b8339550cee967e59833fd6688a265a5df6347", "filename": "clippy_lints/src/matches/manual_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_map.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -144,7 +144,7 @@ fn check<'tcx>(\n     let scrutinee = peel_hir_expr_refs(scrutinee).0;\n     let (scrutinee_str, _) = snippet_with_context(cx, scrutinee.span, expr_ctxt, \"..\", &mut app);\n     let scrutinee_str = if scrutinee.span.ctxt() == expr.span.ctxt() && scrutinee.precedence().order() < PREC_POSTFIX {\n-        format!(\"({})\", scrutinee_str)\n+        format!(\"({scrutinee_str})\")\n     } else {\n         scrutinee_str.into()\n     };\n@@ -172,9 +172,9 @@ fn check<'tcx>(\n                 };\n                 let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n                 if some_expr.needs_unsafe_block {\n-                    format!(\"|{}{}| unsafe {{ {} }}\", annotation, some_binding, expr_snip)\n+                    format!(\"|{annotation}{some_binding}| unsafe {{ {expr_snip} }}\")\n                 } else {\n-                    format!(\"|{}{}| {}\", annotation, some_binding, expr_snip)\n+                    format!(\"|{annotation}{some_binding}| {expr_snip}\")\n                 }\n             }\n         }\n@@ -183,9 +183,9 @@ fn check<'tcx>(\n         let pat_snip = snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0;\n         let expr_snip = snippet_with_context(cx, some_expr.expr.span, expr_ctxt, \"..\", &mut app).0;\n         if some_expr.needs_unsafe_block {\n-            format!(\"|{}| unsafe {{ {} }}\", pat_snip, expr_snip)\n+            format!(\"|{pat_snip}| unsafe {{ {expr_snip} }}\")\n         } else {\n-            format!(\"|{}| {}\", pat_snip, expr_snip)\n+            format!(\"|{pat_snip}| {expr_snip}\")\n         }\n     } else {\n         // Refutable bindings and mixed reference annotations can't be handled by `map`.\n@@ -199,9 +199,9 @@ fn check<'tcx>(\n         \"manual implementation of `Option::map`\",\n         \"try this\",\n         if else_pat.is_none() && is_else_clause(cx.tcx, expr) {\n-            format!(\"{{ {}{}.map({}) }}\", scrutinee_str, as_ref_str, body_str)\n+            format!(\"{{ {scrutinee_str}{as_ref_str}.map({body_str}) }}\")\n         } else {\n-            format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str)\n+            format!(\"{scrutinee_str}{as_ref_str}.map({body_str})\")\n         },\n         app,\n     );"}, {"sha": "2fe7fe98a2e8f51ab3d8ee937626c03f158a43e1", "filename": "clippy_lints/src/matches/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_unwrap_or.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -42,12 +42,10 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, scrutinee:\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n-                &format!(\"this pattern reimplements `{}::unwrap_or`\", ty_name),\n+                &format!(\"this pattern reimplements `{ty_name}::unwrap_or`\"),\n                 \"replace with\",\n                 format!(\n-                    \"{}.unwrap_or({})\",\n-                    suggestion,\n-                    reindented_or_body,\n+                    \"{suggestion}.unwrap_or({reindented_or_body})\",\n                 ),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "39d30212f36a3f2a95d46b0df87af46b6595f5f6", "filename": "clippy_lints/src/matches/match_as_ref.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_as_ref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -45,13 +45,11 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr:\n                 cx,\n                 MATCH_AS_REF,\n                 expr.span,\n-                &format!(\"use `{}()` instead\", suggestion),\n+                &format!(\"use `{suggestion}()` instead\"),\n                 \"try this\",\n                 format!(\n-                    \"{}.{}(){}\",\n+                    \"{}.{suggestion}(){cast}\",\n                     snippet_with_applicability(cx, ex.span, \"_\", &mut applicability),\n-                    suggestion,\n-                    cast,\n                 ),\n                 applicability,\n             );"}, {"sha": "107fad32393cff30de3f84055901358f70685798", "filename": "clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -112,7 +112,7 @@ where\n                     .join(\" | \")\n             };\n             let pat_and_guard = if let Some(Guard::If(g)) = first_guard {\n-                format!(\"{} if {}\", pat, snippet_with_applicability(cx, g.span, \"..\", &mut applicability))\n+                format!(\"{pat} if {}\", snippet_with_applicability(cx, g.span, \"..\", &mut applicability))\n             } else {\n                 pat\n             };\n@@ -131,10 +131,9 @@ where\n                 &format!(\"{} expression looks like `matches!` macro\", if is_if_let { \"if let .. else\" } else { \"match\" }),\n                 \"try this\",\n                 format!(\n-                    \"{}matches!({}, {})\",\n+                    \"{}matches!({}, {pat_and_guard})\",\n                     if b0 { \"\" } else { \"!\" },\n                     snippet_with_applicability(cx, ex_new.span, \"..\", &mut applicability),\n-                    pat_and_guard,\n                 ),\n                 applicability,\n             );"}, {"sha": "37049f83577513605c6ea63000e4662101898138", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -134,7 +134,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                     diag.span_suggestion(\n                         keep_arm.pat.span,\n                         \"try merging the arm patterns\",\n-                        format!(\"{} | {}\", keep_pat_snip, move_pat_snip),\n+                        format!(\"{keep_pat_snip} | {move_pat_snip}\"),\n                         Applicability::MaybeIncorrect,\n                     )\n                     .help(\"or try changing either arm body\")"}, {"sha": "68682cedf1de434bcce702c5c5abb13e4f97a53f", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -75,12 +75,11 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                 Some(AssignmentExpr::Local { span, pat_span }) => (\n                     span,\n                     format!(\n-                        \"let {} = {};\\n{}let {} = {};\",\n+                        \"let {} = {};\\n{}let {} = {snippet_body};\",\n                         snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n                         snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n                         \" \".repeat(indent_of(cx, expr.span).unwrap_or(0)),\n-                        snippet_with_applicability(cx, pat_span, \"..\", &mut applicability),\n-                        snippet_body\n+                        snippet_with_applicability(cx, pat_span, \"..\", &mut applicability)\n                     ),\n                 ),\n                 None => {\n@@ -110,10 +109,8 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n             if ex.can_have_side_effects() {\n                 let indent = \" \".repeat(indent_of(cx, expr.span).unwrap_or(0));\n                 let sugg = format!(\n-                    \"{};\\n{}{}\",\n-                    snippet_with_applicability(cx, ex.span, \"..\", &mut applicability),\n-                    indent,\n-                    snippet_body\n+                    \"{};\\n{indent}{snippet_body}\",\n+                    snippet_with_applicability(cx, ex.span, \"..\", &mut applicability)\n                 );\n \n                 span_lint_and_sugg(\n@@ -178,10 +175,10 @@ fn sugg_with_curlies<'a>(\n     let (mut cbrace_start, mut cbrace_end) = (String::new(), String::new());\n     if let Some(parent_expr) = get_parent_expr(cx, match_expr) {\n         if let ExprKind::Closure { .. } = parent_expr.kind {\n-            cbrace_end = format!(\"\\n{}}}\", indent);\n+            cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the closure\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n-            cbrace_start = format!(\"{{\\n{}\", indent);\n+            cbrace_start = format!(\"{{\\n{indent}\");\n         }\n     }\n \n@@ -190,10 +187,10 @@ fn sugg_with_curlies<'a>(\n     let parent_node_id = cx.tcx.hir().get_parent_node(match_expr.hir_id);\n     if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n         if let ExprKind::Match(..) = arm.body.kind {\n-            cbrace_end = format!(\"\\n{}}}\", indent);\n+            cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the match\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n-            cbrace_start = format!(\"{{\\n{}\", indent);\n+            cbrace_start = format!(\"{{\\n{indent}\");\n         }\n     }\n \n@@ -204,13 +201,8 @@ fn sugg_with_curlies<'a>(\n     });\n \n     format!(\n-        \"{}let {} = {};\\n{}{}{}{}\",\n-        cbrace_start,\n+        \"{cbrace_start}let {} = {};\\n{indent}{assignment_str}{snippet_body}{cbrace_end}\",\n         snippet_with_applicability(cx, bind_names, \"..\", applicability),\n-        snippet_with_applicability(cx, matched_vars, \"..\", applicability),\n-        indent,\n-        assignment_str,\n-        snippet_body,\n-        cbrace_end\n+        snippet_with_applicability(cx, matched_vars, \"..\", applicability)\n     )\n }"}, {"sha": "6647322caa37a846520edfc81251261d9e312c6c", "filename": "clippy_lints/src/matches/match_str_case_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_str_case_mismatch.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -118,8 +118,8 @@ fn lint(cx: &LateContext<'_>, case_method: &CaseMethod, bad_case_span: Span, bad\n         MATCH_STR_CASE_MISMATCH,\n         bad_case_span,\n         \"this `match` arm has a differing case than its expression\",\n-        &format!(\"consider changing the case of this arm to respect `{}`\", method_str),\n-        format!(\"\\\"{}\\\"\", suggestion),\n+        &format!(\"consider changing the case of this arm to respect `{method_str}`\"),\n+        format!(\"\\\"{suggestion}\\\"\"),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "42f1e2629d41a79ee766973a2e32635afffc6942", "filename": "clippy_lints/src/matches/match_wild_err_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_err_arm.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -38,7 +38,7 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'\n                             span_lint_and_note(cx,\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n-                                &format!(\"`Err({})` matches all errors\", ident_bind_name),\n+                                &format!(\"`Err({ident_bind_name})` matches all errors\"),\n                                 None,\n                                 \"match each error separately or use the error output, or use `.expect(msg)` if the error case is unreachable\",\n                             );"}, {"sha": "9cbffbe61f15243ec917430e446f7bba10325a5c", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -9,9 +9,9 @@ use clippy_utils::{\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{Arm, BindingAnnotation, ByRef, Expr, ExprKind, FnRetTy, Guard, Node, Pat, PatKind, Path, QPath};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n pub(crate) fn check_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if arms.len() > 1 && expr_ty_matches_p_ty(cx, ex, expr) && check_all_arms(cx, ex, arms) {"}, {"sha": "11495cca97ddce8f083e1e734a270d105d2cc286", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{higher, is_lang_ctor, is_trait_method};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{self, OptionSome, OptionNone, PollPending, PollReady, ResultOk, ResultErr};\n+use rustc_hir::LangItem::{self, OptionNone, OptionSome, PollPending, PollReady, ResultErr, ResultOk};\n use rustc_hir::{Arm, Expr, ExprKind, Node, Pat, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, subst::GenericArgKind, DefIdTree, Ty};\n@@ -138,7 +138,7 @@ fn find_sugg_for_if_let<'tcx>(\n         cx,\n         REDUNDANT_PATTERN_MATCHING,\n         let_pat.span,\n-        &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n+        &format!(\"redundant pattern matching, consider using `{good_method}`\"),\n         |diag| {\n             // if/while let ... = ... { ... }\n             // ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -162,7 +162,7 @@ fn find_sugg_for_if_let<'tcx>(\n                 .maybe_par()\n                 .to_string();\n \n-            diag.span_suggestion(span, \"try this\", format!(\"{} {}.{}\", keyword, sugg, good_method), app);\n+            diag.span_suggestion(span, \"try this\", format!(\"{keyword} {sugg}.{good_method}\"), app);\n \n             if needs_drop {\n                 diag.note(\"this will change drop order of the result, as well as all temporaries\");\n@@ -213,7 +213,6 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                 if patterns.len() == 1 =>\n             {\n                 if let PatKind::Wild = patterns[0].kind {\n-\n                     find_good_method_for_match(\n                         cx,\n                         arms,\n@@ -253,12 +252,12 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                 cx,\n                 REDUNDANT_PATTERN_MATCHING,\n                 expr.span,\n-                &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n+                &format!(\"redundant pattern matching, consider using `{good_method}`\"),\n                 |diag| {\n                     diag.span_suggestion(\n                         span,\n                         \"try this\",\n-                        format!(\"{}.{}\", snippet(cx, result_expr.span, \"_\"), good_method),\n+                        format!(\"{}.{good_method}\", snippet(cx, result_expr.span, \"_\")),\n                         Applicability::MaybeIncorrect, // snippet\n                     );\n                 },\n@@ -269,8 +268,8 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n \n #[derive(Clone, Copy)]\n enum Item {\n-  Lang(LangItem),\n-  Diag(Symbol, Symbol),\n+    Lang(LangItem),\n+    Diag(Symbol, Symbol),\n }\n \n fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expected_item: Item) -> bool {\n@@ -285,15 +284,16 @@ fn is_pat_variant(cx: &LateContext<'_>, pat: &Pat<'_>, path: &QPath<'_>, expecte\n             let ty = cx.typeck_results().pat_ty(pat);\n \n             if is_type_diagnostic_item(cx, ty, expected_ty) {\n-                let variant = ty.ty_adt_def()\n+                let variant = ty\n+                    .ty_adt_def()\n                     .expect(\"struct pattern type is not an ADT\")\n                     .variant_of_res(cx.qpath_res(path, pat.hir_id));\n \n-                return variant.name == expected_variant\n+                return variant.name == expected_variant;\n             }\n \n             false\n-        }\n+        },\n     }\n }\n \n@@ -311,17 +311,13 @@ fn find_good_method_for_match<'a>(\n     let pat_left = arms[0].pat;\n     let pat_right = arms[1].pat;\n \n-    let body_node_pair = if (\n-        is_pat_variant(cx, pat_left, path_left, expected_item_left)\n-    ) && (\n-        is_pat_variant(cx, pat_right, path_right, expected_item_right)\n-    ) {\n+    let body_node_pair = if (is_pat_variant(cx, pat_left, path_left, expected_item_left))\n+        && (is_pat_variant(cx, pat_right, path_right, expected_item_right))\n+    {\n         (&arms[0].body.kind, &arms[1].body.kind)\n-    } else if (\n-        is_pat_variant(cx, pat_left, path_left, expected_item_right)\n-    ) && (\n-        is_pat_variant(cx, pat_right, path_right, expected_item_left)\n-    ) {\n+    } else if (is_pat_variant(cx, pat_left, path_left, expected_item_right))\n+        && (is_pat_variant(cx, pat_right, path_right, expected_item_left))\n+    {\n         (&arms[1].body.kind, &arms[0].body.kind)\n     } else {\n         return None;"}, {"sha": "85269e533a066861ad3454d82d0a67185ee3277c", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -50,13 +50,13 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n     let trailing_indent = \" \".repeat(indent_of(cx, found.found_span).unwrap_or(0));\n \n     let replacement = if found.lint_suggestion == LintSuggestion::MoveAndDerefToCopy {\n-        format!(\"let value = *{};\\n{}\", original, trailing_indent)\n+        format!(\"let value = *{original};\\n{trailing_indent}\")\n     } else if found.is_unit_return_val {\n         // If the return value of the expression to be moved is unit, then we don't need to\n         // capture the result in a temporary -- we can just replace it completely with `()`.\n-        format!(\"{};\\n{}\", original, trailing_indent)\n+        format!(\"{original};\\n{trailing_indent}\")\n     } else {\n-        format!(\"let value = {};\\n{}\", original, trailing_indent)\n+        format!(\"let value = {original};\\n{trailing_indent}\")\n     };\n \n     let suggestion_message = if found.lint_suggestion == LintSuggestion::MoveOnly {"}, {"sha": "d496107ffd6b85a76a903cf912663ca1fd62369b", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -99,23 +99,21 @@ fn report_single_pattern(\n \n             let msg = \"you seem to be trying to use `match` for an equality check. Consider using `if`\";\n             let sugg = format!(\n-                \"if {} == {}{} {}{}\",\n+                \"if {} == {}{} {}{els_str}\",\n                 snippet(cx, ex.span, \"..\"),\n                 // PartialEq for different reference counts may not exist.\n                 \"&\".repeat(ref_count_diff),\n                 snippet(cx, arms[0].pat.span, \"..\"),\n                 expr_block(cx, arms[0].body, None, \"..\", Some(expr.span)),\n-                els_str,\n             );\n             (msg, sugg)\n         } else {\n             let msg = \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\";\n             let sugg = format!(\n-                \"if let {} = {} {}{}\",\n+                \"if let {} = {} {}{els_str}\",\n                 snippet(cx, arms[0].pat.span, \"..\"),\n                 snippet(cx, ex.span, \"..\"),\n                 expr_block(cx, arms[0].body, None, \"..\", Some(expr.span)),\n-                els_str,\n             );\n             (msg, sugg)\n         }"}, {"sha": "a3ec1ff24820c616128f7d293a69a336ed233a90", "filename": "clippy_lints/src/matches/try_err.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Ftry_err.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -61,9 +61,9 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, scrutine\n                 \"return \"\n             };\n             let suggestion = if err_ty == expr_err_ty {\n-                format!(\"{}{}{}{}\", ret_prefix, prefix, origin_snippet, suffix)\n+                format!(\"{ret_prefix}{prefix}{origin_snippet}{suffix}\")\n             } else {\n-                format!(\"{}{}{}.into(){}\", ret_prefix, prefix, origin_snippet, suffix)\n+                format!(\"{ret_prefix}{prefix}{origin_snippet}.into(){suffix}\")\n             };\n \n             span_lint_and_sugg("}, {"sha": "cc26b0f7fa82d38a5b2af682db29f3265a77d0c2", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -85,7 +85,7 @@ pub(crate) trait BindInsteadOfMap {\n \n                 let closure_args_snip = snippet(cx, closure_args_span, \"..\");\n                 let option_snip = snippet(cx, recv.span, \"..\");\n-                let note = format!(\"{}.{}({} {})\", option_snip, Self::GOOD_METHOD_NAME, closure_args_snip, some_inner_snip);\n+                let note = format!(\"{option_snip}.{}({closure_args_snip} {some_inner_snip})\", Self::GOOD_METHOD_NAME);\n                 span_lint_and_sugg(\n                     cx,\n                     BIND_INSTEAD_OF_MAP,"}, {"sha": "2e96346be977e839716708929bfeede60207d612", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         cx,\n         BYTES_NTH,\n         expr.span,\n-        &format!(\"called `.bytes().nth()` on a `{}`\", caller_type),\n+        &format!(\"called `.bytes().nth()` on a `{caller_type}`\"),\n         \"try\",\n         format!(\n             \"{}.as_bytes().get({})\","}, {"sha": "56b7fbb9d4bc88243d597b975cbde2159885a8aa", "filename": "clippy_lints/src/methods/chars_cmp.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -33,12 +33,11 @@ pub(super) fn check(\n                 cx,\n                 lint,\n                 info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n+                &format!(\"you should use the `{suggest}` method\"),\n                 \"like this\",\n-                format!(\"{}{}.{}({})\",\n+                format!(\"{}{}.{suggest}({})\",\n                         if info.eq { \"\" } else { \"!\" },\n                         snippet_with_applicability(cx, args[0].0.span, \"..\", &mut applicability),\n-                        suggest,\n                         snippet_with_applicability(cx, arg_char.span, \"..\", &mut applicability)),\n                 applicability,\n             );"}, {"sha": "7e808760663a1a4b370bd33daeebedca134fc1f9", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -26,12 +26,11 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 lint,\n                 info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n+                &format!(\"you should use the `{suggest}` method\"),\n                 \"like this\",\n-                format!(\"{}{}.{}('{}')\",\n+                format!(\"{}{}.{suggest}('{}')\",\n                         if info.eq { \"\" } else { \"!\" },\n                         snippet_with_applicability(cx, args[0].0.span, \"..\", &mut applicability),\n-                        suggest,\n                         c.escape_default()),\n                 applicability,\n             );"}, {"sha": "7c7938dd2e8b04f5e76fc1f10c4eb654bbcf2f93", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -49,8 +49,7 @@ pub(super) fn check(\n                 expr.span,\n                 &format!(\n                     \"using `clone` on a double-reference; \\\n-                    this will copy the reference of type `{}` instead of cloning the inner type\",\n-                    ty\n+                    this will copy the reference of type `{ty}` instead of cloning the inner type\"\n                 ),\n                 |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n@@ -62,11 +61,11 @@ pub(super) fn check(\n                         }\n                         let refs = \"&\".repeat(n + 1);\n                         let derefs = \"*\".repeat(n);\n-                        let explicit = format!(\"<{}{}>::clone({})\", refs, ty, snip);\n+                        let explicit = format!(\"<{refs}{ty}>::clone({snip})\");\n                         diag.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n-                            format!(\"{}({}{}).clone()\", refs, derefs, snip.deref()),\n+                            format!(\"{refs}({derefs}{}).clone()\", snip.deref()),\n                             Applicability::MaybeIncorrect,\n                         );\n                         diag.span_suggestion(\n@@ -121,16 +120,16 @@ pub(super) fn check(\n         let (help, sugg) = if deref_count == 0 {\n             (\"try removing the `clone` call\", snip.into())\n         } else if parent_is_suffix_expr {\n-            (\"try dereferencing it\", format!(\"({}{})\", \"*\".repeat(deref_count), snip))\n+            (\"try dereferencing it\", format!(\"({}{snip})\", \"*\".repeat(deref_count)))\n         } else {\n-            (\"try dereferencing it\", format!(\"{}{}\", \"*\".repeat(deref_count), snip))\n+            (\"try dereferencing it\", format!(\"{}{snip}\", \"*\".repeat(deref_count)))\n         };\n \n         span_lint_and_sugg(\n             cx,\n             CLONE_ON_COPY,\n             expr.span,\n-            &format!(\"using `clone` on type `{}` which implements the `Copy` trait\", ty),\n+            &format!(\"using `clone` on type `{ty}` which implements the `Copy` trait\"),\n             help,\n             sugg,\n             app,"}, {"sha": "355f53532e2689beeda54d174fcaa50d82aab670", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check(\n             expr.span,\n             \"using `.clone()` on a ref-counted pointer\",\n             \"try this\",\n-            format!(\"{}::<{}>::clone(&{})\", caller_type, subst.type_at(0), snippet),\n+            format!(\"{caller_type}::<{}>::clone(&{snippet})\", subst.type_at(0)),\n             Applicability::Unspecified, // Sometimes unnecessary ::<_> after Rc/Arc/Weak\n         );\n     }"}, {"sha": "d0cf411dfd34caca494b9675d518fe742a1c4653", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -143,9 +143,9 @@ pub(super) fn check<'tcx>(\n             cx,\n             EXPECT_FUN_CALL,\n             span_replace_word,\n-            &format!(\"use of `{}` followed by a function call\", name),\n+            &format!(\"use of `{name}` followed by a function call\"),\n             \"try this\",\n-            format!(\"unwrap_or_else({} panic!({}))\", closure_args, sugg),\n+            format!(\"unwrap_or_else({closure_args} panic!({sugg}))\"),\n             applicability,\n         );\n         return;\n@@ -160,12 +160,9 @@ pub(super) fn check<'tcx>(\n         cx,\n         EXPECT_FUN_CALL,\n         span_replace_word,\n-        &format!(\"use of `{}` followed by a function call\", name),\n+        &format!(\"use of `{name}` followed by a function call\"),\n         \"try this\",\n-        format!(\n-            \"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\",\n-            closure_args, arg_root_snippet\n-        ),\n+        format!(\"unwrap_or_else({closure_args} {{ panic!(\\\"{{}}\\\", {arg_root_snippet}) }})\"),\n         applicability,\n     );\n }"}, {"sha": "60f8283c3e09d21a5ed913fb33fb153ed40ff1b4", "filename": "clippy_lints/src/methods/filetype_is_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             span = expr.span;\n         }\n     }\n-    let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n-    let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n+    let lint_msg = format!(\"`{lint_unary}FileType::is_file()` only {verb} regular files\");\n+    let help_msg = format!(\"use `{help_unary}FileType::is_dir()` instead\");\n     span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n }"}, {"sha": "ddf8a1f09b87d4b21b21704bc4bd1209a10600ad", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -32,7 +32,7 @@ pub(super) fn check<'tcx>(\n                 expr.span,\n                 msg,\n                 \"try this\",\n-                format!(\"{}.find_map({})\", iter_snippet, filter_snippet),\n+                format!(\"{iter_snippet}.find_map({filter_snippet})\"),\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "edcec0fc1015ea7c52cb358ac30c8dabb2fe67fa", "filename": "clippy_lints/src/methods/filter_next.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -32,7 +32,7 @@ pub(super) fn check<'tcx>(\n                 expr.span,\n                 msg,\n                 \"try this\",\n-                format!(\"{}.find({})\", iter_snippet, filter_snippet),\n+                format!(\"{iter_snippet}.find({filter_snippet})\"),\n                 Applicability::MachineApplicable,\n             );\n         } else {"}, {"sha": "66dfce3682b59b59d885427234be5741db401e99", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Exp\n             // `expr` implements `FromIterator` trait\n             let iter_expr = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n             let turbofish = extract_turbofish(cx, expr, ty);\n-            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, turbofish);\n+            let sugg = format!(\"{iter_expr}.collect::<{turbofish}>()\");\n             span_lint_and_sugg(\n                 cx,\n                 FROM_ITER_INSTEAD_OF_COLLECT,\n@@ -63,7 +63,7 @@ fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'_>) ->\n                             if e == type_specifier { None } else { Some((*e).to_string()) }\n                         }).collect::<Vec<_>>();\n                         // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n-                        format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n+                        format!(\"{}{type_specifier}\", without_ts.join(\"::\"))\n                     } else {\n                         // type is not explicitly specified so wildcards are needed\n                         // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n@@ -72,7 +72,7 @@ fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'_>) ->\n                         let end = ty_str.find('>').unwrap_or(ty_str.len());\n                         let nb_wildcard = ty_str[start..end].split(',').count();\n                         let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n-                        format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+                        format!(\"{}<{wildcards}>\", elements.join(\"::\"))\n                     }\n                 }\n             }"}, {"sha": "cb17af608a3f06f74505ab5769a0108412470810", "filename": "clippy_lints/src/methods/get_first.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_first.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -29,9 +29,9 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 GET_FIRST,\n                 expr.span,\n-                &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n+                &format!(\"accessing first element with `{slice_name}.get(0)`\"),\n                 \"try\",\n-                format!(\"{}.first()\", slice_name),\n+                format!(\"{slice_name}.first()\"),\n                 app,\n             );\n         }"}, {"sha": "ffc3a4d780e5d324be025959b3a2d90dd0b6c6ab", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -71,16 +71,11 @@ pub(super) fn check<'tcx>(\n         cx,\n         GET_UNWRAP,\n         span,\n-        &format!(\n-            \"called `.get{0}().unwrap()` on a {1}. Using `[]` is more clear and more concise\",\n-            mut_str, caller_type\n-        ),\n+        &format!(\"called `.get{mut_str}().unwrap()` on a {caller_type}. Using `[]` is more clear and more concise\"),\n         \"try this\",\n         format!(\n-            \"{}{}[{}]\",\n-            borrow_str,\n-            snippet_with_applicability(cx, recv.span, \"..\", &mut applicability),\n-            get_args_str\n+            \"{borrow_str}{}[{get_args_str}]\",\n+            snippet_with_applicability(cx, recv.span, \"..\", &mut applicability)\n         ),\n         applicability,\n     );"}, {"sha": "429cdc1918d79d7c03d1d5b24fe1bff04c8e7afb", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -26,12 +26,12 @@ pub fn check(cx: &LateContext<'_>, method_name: &str, expr: &hir::Expr<'_>, recv\n                 cx,\n                 IMPLICIT_CLONE,\n                 expr.span,\n-                &format!(\"implicitly cloning a `{}` by calling `{}` on its dereferenced type\", ty_name, method_name),\n+                &format!(\"implicitly cloning a `{ty_name}` by calling `{method_name}` on its dereferenced type\"),\n                 \"consider using\",\n                 if ref_count > 1 {\n-                    format!(\"({}{}).clone()\", \"*\".repeat(ref_count - 1), recv_snip)\n+                    format!(\"({}{recv_snip}).clone()\", \"*\".repeat(ref_count - 1))\n                 } else {\n-                    format!(\"{}.clone()\", recv_snip)\n+                    format!(\"{recv_snip}.clone()\")\n                 },\n                 app,\n             );"}, {"sha": "e5dc3711b0b47d7f73a3fd572ccf6d5edd295bd4", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -34,18 +34,17 @@ pub fn check<'tcx>(\n                 cx,\n                 INEFFICIENT_TO_STRING,\n                 expr.span,\n-                &format!(\"calling `to_string` on `{}`\", arg_ty),\n+                &format!(\"calling `to_string` on `{arg_ty}`\"),\n                 |diag| {\n                     diag.help(&format!(\n-                        \"`{}` implements `ToString` through a slower blanket impl, but `{}` has a fast specialization of `ToString`\",\n-                        self_ty, deref_self_ty\n+                        \"`{self_ty}` implements `ToString` through a slower blanket impl, but `{deref_self_ty}` has a fast specialization of `ToString`\"\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;\n                     let arg_snippet = snippet_with_applicability(cx, receiver.span, \"..\", &mut applicability);\n                     diag.span_suggestion(\n                         expr.span,\n                         \"try dereferencing the receiver\",\n-                        format!(\"({}{}).to_string()\", \"*\".repeat(deref_count), arg_snippet),\n+                        format!(\"({}{arg_snippet}).to_string()\", \"*\".repeat(deref_count)),\n                         applicability,\n                     );\n                 },"}, {"sha": "be56b63506a4be475be73426c827852b1241c455", "filename": "clippy_lints/src/methods/into_iter_on_ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -30,8 +30,7 @@ pub(super) fn check(\n                 INTO_ITER_ON_REF,\n                 method_span,\n                 &format!(\n-                    \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n-                    method_name, kind,\n+                    \"this `.into_iter()` call is equivalent to `.{method_name}()` and will not consume the `{kind}`\",\n                 ),\n                 \"call directly\",\n                 method_name.to_string(),"}, {"sha": "304024e80666f882e7eaff6bce448c734e1d3348", "filename": "clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,12 +37,11 @@ pub(super) fn check<'tcx>(\n             cx,\n             IS_DIGIT_ASCII_RADIX,\n             expr.span,\n-            &format!(\"use of `char::is_digit` with literal radix of {}\", num),\n+            &format!(\"use of `char::is_digit` with literal radix of {num}\"),\n             \"try\",\n             format!(\n-                \"{}.{}()\",\n-                snippet_with_applicability(cx, self_arg.span, \"..\", &mut applicability),\n-                replacement\n+                \"{}.{replacement}()\",\n+                snippet_with_applicability(cx, self_arg.span, \"..\", &mut applicability)\n             ),\n             applicability,\n         );"}, {"sha": "bde6f92b076ebae374c76d47eab0820c34fd86e4", "filename": "clippy_lints/src/methods/iter_cloned_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -20,8 +20,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, method_name: &str, expr: &hir:\n                 cx,\n                 ITER_CLONED_COLLECT,\n                 to_replace,\n-                &format!(\"called `iter().{}().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n-                more readable\", method_name),\n+                &format!(\"called `iter().{method_name}().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n+                more readable\"),\n                 \"try\",\n                 \".to_vec()\".to_string(),\n                 Applicability::MachineApplicable,"}, {"sha": "bcddc7c786a50d3750163531d0ba6bc15b6802a5", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         cx,\n         ITER_COUNT,\n         expr.span,\n-        &format!(\"called `.{}().count()` on a `{}`\", iter_method, caller_type),\n+        &format!(\"called `.{iter_method}().count()` on a `{caller_type}`\"),\n         \"try\",\n         format!(\n             \"{}.len()\","}, {"sha": "2244ebfb129277036c95e95013d0a39d8f213a60", "filename": "clippy_lints/src/methods/iter_kv_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -54,19 +54,19 @@ pub(super) fn check<'tcx>(\n                         cx,\n                         ITER_KV_MAP,\n                         expr.span,\n-                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{}.{}{}s()\", recv_snippet, into_prefix, replacement_kind),\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s()\"),\n                         applicability,\n                     );\n                 } else {\n                     span_lint_and_sugg(\n                         cx,\n                         ITER_KV_MAP,\n                         expr.span,\n-                        &format!(\"iterating on a map's {}s\", replacement_kind),\n+                        &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{}.{}{}s().map(|{}| {})\", recv_snippet, into_prefix, replacement_kind, binded_ident,\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{binded_ident}| {})\",\n                             snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n                         applicability,\n                     );"}, {"sha": "83c1bf203467a447aca66f9e0f2692d555dd246a", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,7 +37,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, cal\n                 let suggest = if start_idx == 0 {\n                     format!(\"{}.first()\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability))\n                 } else {\n-                    format!(\"{}.get({})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability), start_idx)\n+                    format!(\"{}.get({start_idx})\", snippet_with_applicability(cx, caller_var.span, \"..\", &mut applicability))\n                 };\n                 span_lint_and_sugg(\n                     cx,"}, {"sha": "ceee12784cbb789e46785d44a51569c892654229", "filename": "clippy_lints/src/methods/iter_nth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -32,8 +32,8 @@ pub(super) fn check<'tcx>(\n         cx,\n         ITER_NTH,\n         expr.span,\n-        &format!(\"called `.iter{0}().nth()` on a {1}\", mut_str, caller_type),\n+        &format!(\"called `.iter{mut_str}().nth()` on a {caller_type}\"),\n         None,\n-        &format!(\"calling `.get{}()` is both faster and more readable\", mut_str),\n+        &format!(\"calling `.get{mut_str}()` is both faster and more readable\"),\n     );\n }"}, {"sha": "3da230e12d7fe017867fe9dee9abaa6c56842811", "filename": "clippy_lints/src/methods/iter_with_drain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_with_drain.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span\n             cx,\n             ITER_WITH_DRAIN,\n             span.with_hi(expr.span.hi()),\n-            &format!(\"`drain(..)` used on a `{}`\", ty_name),\n+            &format!(\"`drain(..)` used on a `{ty_name}`\"),\n             \"try this\",\n             \"into_iter()\".to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "c5c0ace7729c4bf99f8481e14906ca6680839075", "filename": "clippy_lints/src/methods/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,9 +37,7 @@ pub(super) fn check<'tcx>(\n                 \"this pattern reimplements `Option::ok_or`\",\n                 \"replace with\",\n                 format!(\n-                    \"{}.ok_or({})\",\n-                    recv_snippet,\n-                    reindented_err_arg_snippet\n+                    \"{recv_snippet}.ok_or({reindented_err_arg_snippet})\"\n                 ),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "ec694cf6882e5c28a5ad490dee73401fccdb5da7", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -57,11 +57,10 @@ pub fn check(\n         super::MANUAL_SATURATING_ARITHMETIC,\n         expr.span,\n         \"manual saturating arithmetic\",\n-        &format!(\"try using `saturating_{}`\", arith),\n+        &format!(\"try using `saturating_{arith}`\"),\n         format!(\n-            \"{}.saturating_{}({})\",\n+            \"{}.saturating_{arith}({})\",\n             snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n-            arith,\n             snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n         ),\n         applicability,"}, {"sha": "67e504af161cd02fa1f76e55cccad2756dee3537", "filename": "clippy_lints/src/methods/manual_str_repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -91,7 +91,7 @@ pub(super) fn check(\n                 collect_expr.span,\n                 \"manual implementation of `str::repeat` using iterators\",\n                 \"try this\",\n-                format!(\"{}.repeat({})\", val_str, count_snip),\n+                format!(\"{val_str}.repeat({count_snip})\"),\n                 app\n             )\n         }"}, {"sha": "7ce14ec080b15fa42177d583cb2802526a414adf", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -111,11 +111,10 @@ fn lint_explicit_closure(cx: &LateContext<'_>, replace: Span, root: Span, is_cop\n         MAP_CLONE,\n         replace,\n         message,\n-        &format!(\"consider calling the dedicated `{}` method\", sugg_method),\n+        &format!(\"consider calling the dedicated `{sugg_method}` method\"),\n         format!(\n-            \"{}.{}()\",\n+            \"{}.{sugg_method}()\",\n             snippet_with_applicability(cx, root, \"..\", &mut applicability),\n-            sugg_method,\n         ),\n         applicability,\n     );"}, {"sha": "361ffcb5ef3fb2e9f93af8110ad60be7298b4d1c", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -20,12 +20,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, map_\n             cx,\n             MAP_FLATTEN,\n             expr.span.with_lo(map_span.lo()),\n-            &format!(\"called `map(..).flatten()` on `{}`\", caller_ty_name),\n-            &format!(\n-                \"try replacing `map` with `{}` and remove the `.flatten()`\",\n-                method_to_use\n-            ),\n-            format!(\"{}({})\", method_to_use, closure_snippet),\n+            &format!(\"called `map(..).flatten()` on `{caller_ty_name}`\"),\n+            &format!(\"try replacing `map` with `{method_to_use}` and remove the `.flatten()`\"),\n+            format!(\"{method_to_use}({closure_snippet})\"),\n             applicability,\n         );\n     }"}, {"sha": "0f25ef82ed42a642d424f51260e3f49d3db74399", "filename": "clippy_lints/src/methods/map_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_identity.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check(\n                 MAP_IDENTITY,\n                 sugg_span,\n                 \"unnecessary map of the identity function\",\n-                &format!(\"remove the call to `{}`\", name),\n+                &format!(\"remove the call to `{name}`\"),\n                 String::new(),\n                 Applicability::MachineApplicable,\n             )"}, {"sha": "74fdead216b0a5f7c3df156b51c21cf83a1a59ac", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -65,7 +65,7 @@ pub(super) fn check<'tcx>(\n                 expr.span,\n                 msg,\n                 \"try this\",\n-                format!(\"{}.map_or_else({}, {})\", var_snippet, unwrap_snippet, map_snippet),\n+                format!(\"{var_snippet}.map_or_else({unwrap_snippet}, {map_snippet})\"),\n                 Applicability::MachineApplicable,\n             );\n             return true;"}, {"sha": "cfcf9596c50d3f32638475a2f06277916257195e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 40, "deletions": 47, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -109,13 +109,13 @@ use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, PrimTy, QPath, TraitItem, TraitItemKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -3255,65 +3255,59 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n-        if_chain! {\n-            if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n-            if let Some(first_arg) = iter_input_pats(sig.decl, cx.tcx.hir().body(id)).next();\n-\n-            let method_sig = cx.tcx.fn_sig(impl_item.def_id.def_id);\n+        if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {\n+            let method_sig = cx.tcx.fn_sig(impl_item.def_id);\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n-\n-            let first_arg_ty = method_sig.inputs().iter().next();\n-\n-            // check conventions w.r.t. conversion method names and predicates\n-            if let Some(first_arg_ty) = first_arg_ty;\n-\n-            then {\n-                // if this impl block implements a trait, lint in trait definition instead\n-                if !implements_trait && cx.access_levels.is_exported(impl_item.def_id.def_id) {\n-                    // check missing trait implementations\n-                    for method_config in &TRAIT_METHODS {\n-                        if name == method_config.method_name &&\n-                            sig.decl.inputs.len() == method_config.param_count &&\n-                            method_config.output_type.matches(&sig.decl.output) &&\n-                            method_config.self_kind.matches(cx, self_ty, *first_arg_ty) &&\n-                            fn_header_equals(method_config.fn_header, sig.header) &&\n-                            method_config.lifetime_param_cond(impl_item)\n-                        {\n-                            span_lint_and_help(\n-                                cx,\n-                                SHOULD_IMPLEMENT_TRAIT,\n-                                impl_item.span,\n-                                &format!(\n-                                    \"method `{}` can be confused for the standard trait method `{}::{}`\",\n-                                    method_config.method_name,\n-                                    method_config.trait_name,\n-                                    method_config.method_name\n-                                ),\n-                                None,\n-                                &format!(\n-                                    \"consider implementing the trait `{}` or choosing a less ambiguous method name\",\n-                                    method_config.trait_name\n-                                )\n-                            );\n-                        }\n+            let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n+            // if this impl block implements a trait, lint in trait definition instead\n+            if !implements_trait && cx.access_levels.is_exported(impl_item.def_id.def_id) {\n+                // check missing trait implementations\n+                for method_config in &TRAIT_METHODS {\n+                    if name == method_config.method_name\n+                        && sig.decl.inputs.len() == method_config.param_count\n+                        && method_config.output_type.matches(&sig.decl.output)\n+                        // in case there is no first arg, since we already have checked the number of arguments\n+                        // it's should be always true\n+                        && first_arg_ty_opt.map_or(true, |first_arg_ty| method_config\n+                            .self_kind.matches(cx, self_ty, first_arg_ty)\n+                            )\n+                        && fn_header_equals(method_config.fn_header, sig.header)\n+                        && method_config.lifetime_param_cond(impl_item)\n+                    {\n+                        span_lint_and_help(\n+                            cx,\n+                            SHOULD_IMPLEMENT_TRAIT,\n+                            impl_item.span,\n+                            &format!(\n+                                \"method `{}` can be confused for the standard trait method `{}::{}`\",\n+                                method_config.method_name, method_config.trait_name, method_config.method_name\n+                            ),\n+                            None,\n+                            &format!(\n+                                \"consider implementing the trait `{}` or choosing a less ambiguous method name\",\n+                                method_config.trait_name\n+                            ),\n+                        );\n                     }\n                 }\n+            }\n \n-                if sig.decl.implicit_self.has_implicit_self()\n+            if sig.decl.implicit_self.has_implicit_self()\n                     && !(self.avoid_breaking_exported_api\n-                        && cx.access_levels.is_exported(impl_item.def_id.def_id))\n+                    && cx.access_levels.is_exported(impl_item.def_id.def_id))\n+                    && let Some(first_arg) = iter_input_pats(sig.decl, cx.tcx.hir().body(id)).next()\n+                    && let Some(first_arg_ty) = first_arg_ty_opt\n                 {\n                     wrong_self_convention::check(\n                         cx,\n                         name,\n                         self_ty,\n-                        *first_arg_ty,\n+                        first_arg_ty,\n                         first_arg.pat.span,\n                         implements_trait,\n                         false\n                     );\n                 }\n-            }\n         }\n \n         // if this impl block implements a trait, lint in trait definition instead\n@@ -3799,7 +3793,6 @@ const TRAIT_METHODS: [ShouldImplTraitCase; 30] = [\n     ShouldImplTraitCase::new(\"std::borrow::BorrowMut\", \"borrow_mut\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n     ShouldImplTraitCase::new(\"std::clone::Clone\", \"clone\",  1,  FN_HEADER,  SelfKind::Ref,  OutType::Any, true),\n     ShouldImplTraitCase::new(\"std::cmp::Ord\", \"cmp\",  2,  FN_HEADER,  SelfKind::Ref,  OutType::Any, true),\n-    // FIXME: default doesn't work\n     ShouldImplTraitCase::new(\"std::default::Default\", \"default\",  0,  FN_HEADER,  SelfKind::No,  OutType::Any, true),\n     ShouldImplTraitCase::new(\"std::ops::Deref\", \"deref\",  1,  FN_HEADER,  SelfKind::Ref,  OutType::Ref, true),\n     ShouldImplTraitCase::new(\"std::ops::DerefMut\", \"deref_mut\",  1,  FN_HEADER,  SelfKind::RefMut,  OutType::Ref, true),\n@@ -3827,7 +3820,7 @@ enum SelfKind {\n     Value,\n     Ref,\n     RefMut,\n-    No,\n+    No, // When we want the first argument type to be different than `Self`\n }\n \n impl SelfKind {"}, {"sha": "6fb92d1c663cf6de9ee7a7421656186fad5d7908", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -98,13 +98,12 @@ pub(super) fn check<'tcx>(\n             format!(\".as_ref().map({})\", snippet(cx, map_arg.span, \"..\"))\n         };\n         let method_hint = if is_mut { \"as_deref_mut\" } else { \"as_deref\" };\n-        let hint = format!(\"{}.{}()\", snippet(cx, as_ref_recv.span, \"..\"), method_hint);\n-        let suggestion = format!(\"try using {} instead\", method_hint);\n+        let hint = format!(\"{}.{method_hint}()\", snippet(cx, as_ref_recv.span, \"..\"));\n+        let suggestion = format!(\"try using {method_hint} instead\");\n \n         let msg = format!(\n-            \"called `{0}` on an Option value. This can be done more directly \\\n-            by calling `{1}` instead\",\n-            current_method, hint\n+            \"called `{current_method}` on an Option value. This can be done more directly \\\n+            by calling `{hint}` instead\"\n         );\n         span_lint_and_sugg(\n             cx,"}, {"sha": "76572425346b0f02385da3b0254e393a86813f8d", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -87,7 +87,7 @@ pub(super) fn check<'tcx>(\n                     expr.span,\n                     msg,\n                     \"try using `map` instead\",\n-                    format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n+                    format!(\"{self_snippet}.map({arg_snippet} {func_snippet})\"),\n                     Applicability::MachineApplicable,\n                 );\n             }\n@@ -102,7 +102,7 @@ pub(super) fn check<'tcx>(\n             expr.span,\n             msg,\n             \"try using `and_then` instead\",\n-            format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            format!(\"{self_snippet}.and_then({func_snippet})\"),\n             Applicability::MachineApplicable,\n         );\n     } else if f_arg_is_some {\n@@ -115,7 +115,7 @@ pub(super) fn check<'tcx>(\n             expr.span,\n             msg,\n             \"try using `ok` instead\",\n-            format!(\"{0}.ok()\", self_snippet),\n+            format!(\"{self_snippet}.ok()\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "30421a6dd5afb458261b436cfc4d23dcce6ba57c", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -65,9 +65,8 @@ pub(super) fn check<'tcx>(\n             \"map_or(<a>, <f>)\"\n         };\n         let msg = &format!(\n-            \"called `map(<f>).unwrap_or({})` on an `Option` value. \\\n-            This can be done more directly by calling `{}` instead\",\n-            arg, suggest\n+            \"called `map(<f>).unwrap_or({arg})` on an `Option` value. \\\n+            This can be done more directly by calling `{suggest}` instead\"\n         );\n \n         span_lint_and_then(cx, MAP_UNWRAP_OR, expr.span, msg, |diag| {\n@@ -82,10 +81,10 @@ pub(super) fn check<'tcx>(\n             ];\n \n             if !unwrap_snippet_none {\n-                suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{}, \", unwrap_snippet)));\n+                suggestion.push((map_arg_span.with_hi(map_arg_span.lo()), format!(\"{unwrap_snippet}, \")));\n             }\n \n-            diag.multipart_suggestion(&format!(\"use `{}` instead\", suggest), suggestion, applicability);\n+            diag.multipart_suggestion(&format!(\"use `{suggest}` instead\"), suggestion, applicability);\n         });\n     }\n }"}, {"sha": "6a35024d0361240596283a3e116b9e5b39eceb8d", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -62,9 +62,9 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     OR_FUN_CALL,\n                     method_span.with_hi(span.hi()),\n-                    &format!(\"use of `{}` followed by a call to `{}`\", name, path),\n+                    &format!(\"use of `{name}` followed by a call to `{path}`\"),\n                     \"try this\",\n-                    format!(\"{}()\", sugg),\n+                    format!(\"{sugg}()\"),\n                     Applicability::MachineApplicable,\n                 );\n \n@@ -131,7 +131,7 @@ pub(super) fn check<'tcx>(\n \n                     if use_lambda {\n                         let l_arg = if fn_has_arguments { \"_\" } else { \"\" };\n-                        format!(\"|{}| {}\", l_arg, snippet).into()\n+                        format!(\"|{l_arg}| {snippet}\").into()\n                     } else {\n                         snippet\n                     }\n@@ -141,9 +141,9 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     OR_FUN_CALL,\n                     span_replace_word,\n-                    &format!(\"use of `{}` followed by a function call\", name),\n+                    &format!(\"use of `{name}` followed by a function call\"),\n                     \"try this\",\n-                    format!(\"{}_{}({})\", name, suffix, sugg),\n+                    format!(\"{name}_{suffix}({sugg})\"),\n                     Applicability::HasPlaceholders,\n                 );\n             }"}, {"sha": "324c9c17b5a9a36a7ad6a8fdf82fc16e18fca695", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -30,10 +30,7 @@ pub(super) fn check<'tcx>(\n     let option_check_method = if is_some { \"is_some\" } else { \"is_none\" };\n     // lint if caller of search is an Iterator\n     if is_trait_method(cx, is_some_recv, sym::Iterator) {\n-        let msg = format!(\n-            \"called `{}()` after searching an `Iterator` with `{}`\",\n-            option_check_method, search_method\n-        );\n+        let msg = format!(\"called `{option_check_method}()` after searching an `Iterator` with `{search_method}`\");\n         let search_snippet = snippet(cx, search_arg.span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -86,8 +83,7 @@ pub(super) fn check<'tcx>(\n                     &msg,\n                     \"use `!_.any()` instead\",\n                     format!(\n-                        \"!{}.any({})\",\n-                        iter,\n+                        \"!{iter}.any({})\",\n                         any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                     ),\n                     applicability,\n@@ -119,7 +115,7 @@ pub(super) fn check<'tcx>(\n             if is_string_or_str_slice(search_recv);\n             if is_string_or_str_slice(search_arg);\n             then {\n-                let msg = format!(\"called `{}()` after calling `find()` on a string\", option_check_method);\n+                let msg = format!(\"called `{option_check_method}()` after calling `find()` on a string\");\n                 match option_check_method {\n                     \"is_some\" => {\n                         let mut applicability = Applicability::MachineApplicable;\n@@ -130,7 +126,7 @@ pub(super) fn check<'tcx>(\n                             method_span.with_hi(expr.span.hi()),\n                             &msg,\n                             \"use `contains()` instead\",\n-                            format!(\"contains({})\", find_arg),\n+                            format!(\"contains({find_arg})\"),\n                             applicability,\n                         );\n                     },\n@@ -144,7 +140,7 @@ pub(super) fn check<'tcx>(\n                             expr.span,\n                             &msg,\n                             \"use `!_.contains()` instead\",\n-                            format!(\"!{}.contains({})\", string, find_arg),\n+                            format!(\"!{string}.contains({find_arg})\"),\n                             applicability,\n                         );\n                     },"}, {"sha": "44a7ad394fa0c45b4e7b1ad4b96a1f2e5b5206b2", "filename": "clippy_lints/src/methods/single_char_insert_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, receiver: &hir::\n         let base_string_snippet =\n             snippet_with_applicability(cx, receiver.span.source_callsite(), \"_\", &mut applicability);\n         let pos_arg = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n-        let sugg = format!(\"{}.insert({}, {})\", base_string_snippet, pos_arg, extension_string);\n+        let sugg = format!(\"{base_string_snippet}.insert({pos_arg}, {extension_string})\");\n         span_lint_and_sugg(\n             cx,\n             SINGLE_CHAR_ADD_STR,"}, {"sha": "0698bd6a0c5237b0942877943b57803eeb98885c", "filename": "clippy_lints/src/methods/single_char_push_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, receiver: &hir::\n     if let Some(extension_string) = get_hint_if_single_char_arg(cx, &args[0], &mut applicability) {\n         let base_string_snippet =\n             snippet_with_applicability(cx, receiver.span.source_callsite(), \"..\", &mut applicability);\n-        let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n+        let sugg = format!(\"{base_string_snippet}.push({extension_string})\");\n         span_lint_and_sugg(\n             cx,\n             SINGLE_CHAR_ADD_STR,"}, {"sha": "09c8ca4cbe44ccfd7358540ee07a50a7cd602998", "filename": "clippy_lints/src/methods/stable_sort_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstable_sort_primitive.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -17,11 +17,11 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, recv: &'tcx\n             cx,\n             STABLE_SORT_PRIMITIVE,\n             e.span,\n-            &format!(\"used `sort` on primitive type `{}`\", slice_type),\n+            &format!(\"used `sort` on primitive type `{slice_type}`\"),\n             |diag| {\n                 let mut app = Applicability::MachineApplicable;\n                 let recv_snip = snippet_with_context(cx, recv.span, e.span.ctxt(), \"..\", &mut app).0;\n-                diag.span_suggestion(e.span, \"try\", format!(\"{}.sort_unstable()\", recv_snip), app);\n+                diag.span_suggestion(e.span, \"try\", format!(\"{recv_snip}.sort_unstable()\"), app);\n                 diag.note(\n                     \"an unstable sort typically performs faster without any observable difference for this data type\",\n                 );"}, {"sha": "6974260f70dbd4f4da082253a3ed0e16fbaeb1e0", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -34,9 +34,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n             \"calling `.extend(_.chars())`\",\n             \"try this\",\n             format!(\n-                \"{}.push_str({}{})\",\n+                \"{}.push_str({ref_str}{})\",\n                 snippet_with_applicability(cx, recv.span, \"..\", &mut applicability),\n-                ref_str,\n                 snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n             ),\n             applicability,"}, {"sha": "219a9edd65768eeb3124f3c174375e5fce335058", "filename": "clippy_lints/src/methods/suspicious_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_splitn.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -24,10 +24,10 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n             }\n \n             let (msg, note_msg) = if count == 0 {\n-                (format!(\"`{}` called with `0` splits\", method_name),\n+                (format!(\"`{method_name}` called with `0` splits\"),\n                 \"the resulting iterator will always return `None`\")\n             } else {\n-                (format!(\"`{}` called with `1` split\", method_name),\n+                (format!(\"`{method_name}` called with `1` split\"),\n                 if self_ty.is_slice() {\n                     \"the resulting iterator will always return the entire slice followed by `None`\"\n                 } else {"}, {"sha": "15c1c618c5137e76069e3b0e3b02008b1e5bb8fa", "filename": "clippy_lints/src/methods/suspicious_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -24,9 +24,9 @@ pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) -\n                 cx,\n                 SUSPICIOUS_TO_OWNED,\n                 expr.span,\n-                &format!(\"this `to_owned` call clones the {0} itself and does not cause the {0} contents to become owned\", input_type),\n+                &format!(\"this `to_owned` call clones the {input_type} itself and does not cause the {input_type} contents to become owned\"),\n                 \"consider using, depending on intent\",\n-                format!(\"{0}.clone()` or `{0}.into_owned()\", recv_snip),\n+                format!(\"{recv_snip}.clone()` or `{recv_snip}.into_owned()\"),\n                 app,\n             );\n             return true;"}, {"sha": "ee16982d52487577f7b5a2f9ac20e9151ab791f3", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -54,7 +54,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n                 UNNECESSARY_FIND_MAP\n             },\n             expr.span,\n-            &format!(\"this `.{}` can be written more simply using `.{}`\", name, sugg),\n+            &format!(\"this `.{name}` can be written more simply using `.{sugg}`\"),\n         );\n     }\n }"}, {"sha": "aa87dead38f01ce4a4f97732c507fee973d18917", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -49,15 +49,12 @@ pub(super) fn check(\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if replacement_has_args {\n                     format!(\n-                        \"{replacement}(|{s}| {r})\",\n-                        replacement = replacement_method_name,\n-                        s = second_arg_ident,\n+                        \"{replacement_method_name}(|{second_arg_ident}| {r})\",\n                         r = snippet_with_applicability(cx, right_expr.span, \"EXPR\", &mut applicability),\n                     )\n                 } else {\n                     format!(\n-                        \"{replacement}()\",\n-                        replacement = replacement_method_name,\n+                        \"{replacement_method_name}()\",\n                     )\n                 };\n "}, {"sha": "1966a85f7a7356de70229800e36e5eed18905b2b", "filename": "clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -68,7 +68,7 @@ pub fn check_for_loop_iter(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 expr.span,\n-                &format!(\"unnecessary use of `{}`\", method_name),\n+                &format!(\"unnecessary use of `{method_name}`\"),\n                 |diag| {\n                     // If `check_into_iter_call_arg` called `check_for_loop_iter` because a call to\n                     // a `to_owned`-like function was removed, then the next suggestion may be"}, {"sha": "ec9859fa298b68df058afab72b7e7786fc5c8ab5", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -58,8 +58,8 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(cx, UNNECESSARY_LAZY_EVALUATIONS, expr.span, msg, |diag| {\n                         diag.span_suggestion(\n                             span,\n-                            &format!(\"use `{}(..)` instead\", simplify_using),\n-                            format!(\"{}({})\", simplify_using, snippet(cx, body_expr.span, \"..\")),\n+                            &format!(\"use `{simplify_using}(..)` instead\"),\n+                            format!(\"{simplify_using}({})\", snippet(cx, body_expr.span, \"..\")),\n                             applicability,\n                         );\n                     });"}, {"sha": "9ab0d614114699400375b7073a5dde46c326327c", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -8,6 +8,7 @@ use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trai\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, LangItem, Node};\n+use rustc_hir_analysis::check::{FnCtxt, Inherited};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::Mutability;\n@@ -18,7 +19,6 @@ use rustc_middle::ty::{self, ParamTy, PredicateKind, ProjectionPredicate, TraitP\n use rustc_semver::RustcVersion;\n use rustc_span::{sym, Symbol};\n use rustc_trait_selection::traits::{query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause};\n-use rustc_hir_analysis::check::{FnCtxt, Inherited};\n use std::cmp::max;\n \n use super::UNNECESSARY_TO_OWNED;\n@@ -132,12 +132,11 @@ fn check_addr_of_expr(\n                     cx,\n                     UNNECESSARY_TO_OWNED,\n                     parent.span,\n-                    &format!(\"unnecessary use of `{}`\", method_name),\n+                    &format!(\"unnecessary use of `{method_name}`\"),\n                     \"use\",\n                     format!(\n-                        \"{:&>width$}{}\",\n+                        \"{:&>width$}{receiver_snippet}\",\n                         \"\",\n-                        receiver_snippet,\n                         width = n_target_refs - n_receiver_refs\n                     ),\n                     Applicability::MachineApplicable,\n@@ -154,7 +153,7 @@ fn check_addr_of_expr(\n                             cx,\n                             UNNECESSARY_TO_OWNED,\n                             parent.span,\n-                            &format!(\"unnecessary use of `{}`\", method_name),\n+                            &format!(\"unnecessary use of `{method_name}`\"),\n                             \"use\",\n                             receiver_snippet,\n                             Applicability::MachineApplicable,\n@@ -164,7 +163,7 @@ fn check_addr_of_expr(\n                             cx,\n                             UNNECESSARY_TO_OWNED,\n                             expr.span.with_lo(receiver.span.hi()),\n-                            &format!(\"unnecessary use of `{}`\", method_name),\n+                            &format!(\"unnecessary use of `{method_name}`\"),\n                             \"remove this\",\n                             String::new(),\n                             Applicability::MachineApplicable,\n@@ -181,9 +180,9 @@ fn check_addr_of_expr(\n                         cx,\n                         UNNECESSARY_TO_OWNED,\n                         parent.span,\n-                        &format!(\"unnecessary use of `{}`\", method_name),\n+                        &format!(\"unnecessary use of `{method_name}`\"),\n                         \"use\",\n-                        format!(\"{}.as_ref()\", receiver_snippet),\n+                        format!(\"{receiver_snippet}.as_ref()\"),\n                         Applicability::MachineApplicable,\n                     );\n                     return true;\n@@ -228,9 +227,9 @@ fn check_into_iter_call_arg(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 parent.span,\n-                &format!(\"unnecessary use of `{}`\", method_name),\n+                &format!(\"unnecessary use of `{method_name}`\"),\n                 \"use\",\n-                format!(\"{}.iter().{}()\", receiver_snippet, cloned_or_copied),\n+                format!(\"{receiver_snippet}.iter().{cloned_or_copied}()\"),\n                 Applicability::MaybeIncorrect,\n             );\n             return true;\n@@ -275,9 +274,9 @@ fn check_other_call_arg<'tcx>(\n                 cx,\n                 UNNECESSARY_TO_OWNED,\n                 maybe_arg.span,\n-                &format!(\"unnecessary use of `{}`\", method_name),\n+                &format!(\"unnecessary use of `{method_name}`\"),\n                 \"use\",\n-                format!(\"{:&>width$}{}\", \"\", receiver_snippet, width = n_refs),\n+                format!(\"{:&>n_refs$}{receiver_snippet}\", \"\"),\n                 Applicability::MachineApplicable,\n             );\n             return true;"}, {"sha": "0380a82411ae102826ec31e2f9a609ef5889260c", "filename": "clippy_lints/src/methods/useless_asref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str,\n                 cx,\n                 USELESS_ASREF,\n                 expr.span,\n-                &format!(\"this call to `{}` does nothing\", call_name),\n+                &format!(\"this call to `{call_name}` does nothing\"),\n                 \"try this\",\n                 snippet_with_applicability(cx, recvr.span, \"..\", &mut applicability).to_string(),\n                 applicability,"}, {"sha": "1fbf783b8860e1d701f1801cf9ddf272bad3b288", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -61,20 +61,20 @@ impl Convention {\n impl fmt::Display for Convention {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n-            Self::Eq(this) => format!(\"`{}`\", this).fmt(f),\n-            Self::StartsWith(this) => format!(\"`{}*`\", this).fmt(f),\n-            Self::EndsWith(this) => format!(\"`*{}`\", this).fmt(f),\n-            Self::NotEndsWith(this) => format!(\"`~{}`\", this).fmt(f),\n+            Self::Eq(this) => format!(\"`{this}`\").fmt(f),\n+            Self::StartsWith(this) => format!(\"`{this}*`\").fmt(f),\n+            Self::EndsWith(this) => format!(\"`*{this}`\").fmt(f),\n+            Self::NotEndsWith(this) => format!(\"`~{this}`\").fmt(f),\n             Self::IsSelfTypeCopy(is_true) => {\n                 format!(\"`self` type is{} `Copy`\", if is_true { \"\" } else { \" not\" }).fmt(f)\n             },\n             Self::ImplementsTrait(is_true) => {\n                 let (negation, s_suffix) = if is_true { (\"\", \"s\") } else { (\" does not\", \"\") };\n-                format!(\"method{} implement{} a trait\", negation, s_suffix).fmt(f)\n+                format!(\"method{negation} implement{s_suffix} a trait\").fmt(f)\n             },\n             Self::IsTraitItem(is_true) => {\n                 let suffix = if is_true { \" is\" } else { \" is not\" };\n-                format!(\"method{} a trait item\", suffix).fmt(f)\n+                format!(\"method{suffix} a trait item\").fmt(f)\n             },\n         }\n     }\n@@ -138,8 +138,7 @@ pub(super) fn check<'tcx>(\n                 WRONG_SELF_CONVENTION,\n                 first_arg_span,\n                 &format!(\n-                    \"{} usually take {}\",\n-                    suggestion,\n+                    \"{suggestion} usually take {}\",\n                     &self_kinds\n                         .iter()\n                         .map(|k| k.description())"}, {"sha": "381458b91e679e54a8009262b7f677985ee54775", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                     (\"\", sugg_init.addr())\n                 };\n                 let tyopt = if let Some(ty) = local.ty {\n-                    format!(\": &{mutopt}{ty}\", mutopt=mutopt, ty=snippet(cx, ty.span, \"..\"))\n+                    format!(\": &{mutopt}{ty}\", ty=snippet(cx, ty.span, \"..\"))\n                 } else {\n                     String::new()\n                 };\n@@ -195,8 +195,6 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                             format!(\n                                 \"let {name}{tyopt} = {initref};\",\n                                 name=snippet(cx, name.span, \"..\"),\n-                                tyopt=tyopt,\n-                                initref=initref,\n                             ),\n                             Applicability::MachineApplicable,\n                         );\n@@ -222,8 +220,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                             stmt.span,\n                             \"replace it with\",\n                             format!(\n-                                \"if {} {{ {}; }}\",\n-                                sugg,\n+                                \"if {sugg} {{ {}; }}\",\n                                 &snippet(cx, b.span, \"..\"),\n                             ),\n                             Applicability::MachineApplicable, // snippet\n@@ -275,9 +272,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 USED_UNDERSCORE_BINDING,\n                 expr.span,\n                 &format!(\n-                    \"used binding `{}` which is prefixed with an underscore. A leading \\\n-                     underscore signals that a binding will not be used\",\n-                    binding\n+                    \"used binding `{binding}` which is prefixed with an underscore. A leading \\\n+                     underscore signals that a binding will not be used\"\n                 ),\n             );\n         }\n@@ -328,12 +324,12 @@ fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>)\n             };\n \n             let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {\n-                (format!(\"{}()\", sugg_fn), Applicability::MachineApplicable)\n+                (format!(\"{sugg_fn}()\"), Applicability::MachineApplicable)\n             } else if let Some(mut_ty_snip) = snippet_opt(cx, mut_ty.ty.span) {\n-                (format!(\"{}::<{}>()\", sugg_fn, mut_ty_snip), Applicability::MachineApplicable)\n+                (format!(\"{sugg_fn}::<{mut_ty_snip}>()\"), Applicability::MachineApplicable)\n             } else {\n                 // `MaybeIncorrect` as type inference may not work with the suggested code\n-                (format!(\"{}()\", sugg_fn), Applicability::MaybeIncorrect)\n+                (format!(\"{sugg_fn}()\"), Applicability::MaybeIncorrect)\n             };\n             span_lint_and_sugg(cx, ZERO_PTR, span, msg, \"try\", sugg, appl);\n         }"}, {"sha": "62c6ca32d31a9da1012cb2fc51a73d976273050e", "filename": "clippy_lints/src/misc_early/literal_suffix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fliteral_suffix.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -18,19 +18,19 @@ pub(super) fn check(cx: &EarlyContext<'_>, lit: &Lit, lit_snip: &str, suffix: &s\n                 cx,\n                 SEPARATED_LITERAL_SUFFIX,\n                 lit.span,\n-                &format!(\"{} type suffix should not be separated by an underscore\", sugg_type),\n+                &format!(\"{sugg_type} type suffix should not be separated by an underscore\"),\n                 \"remove the underscore\",\n-                format!(\"{}{}\", &lit_snip[..maybe_last_sep_idx], suffix),\n+                format!(\"{}{suffix}\", &lit_snip[..maybe_last_sep_idx]),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n             span_lint_and_sugg(\n                 cx,\n                 UNSEPARATED_LITERAL_SUFFIX,\n                 lit.span,\n-                &format!(\"{} type suffix should be separated by an underscore\", sugg_type),\n+                &format!(\"{sugg_type} type suffix should be separated by an underscore\"),\n                 \"add an underscore\",\n-                format!(\"{}_{}\", &lit_snip[..=maybe_last_sep_idx], suffix),\n+                format!(\"{}_{suffix}\", &lit_snip[..=maybe_last_sep_idx]),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "c8227ca44505723ea05d174266c2321734d68b3f", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -357,9 +357,8 @@ impl EarlyLintPass for MiscEarlyLints {\n                             DUPLICATE_UNDERSCORE_ARGUMENT,\n                             *correspondence,\n                             &format!(\n-                                \"`{}` already exists, having another argument having almost the same \\\n-                                 name makes code comprehension and documentation more difficult\",\n-                                arg_name\n+                                \"`{arg_name}` already exists, having another argument having almost the same \\\n+                                 name makes code comprehension and documentation more difficult\"\n                             ),\n                         );\n                     }"}, {"sha": "676e5d40bb776c4723a34b5aaecdbba77422f709", "filename": "clippy_lints/src/misc_early/unneeded_field_pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Funneeded_field_pattern.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                 pat.span,\n                 \"all the struct fields are matched to a wildcard pattern, consider using `..`\",\n                 None,\n-                &format!(\"try with `{} {{ .. }}` instead\", type_name),\n+                &format!(\"try with `{type_name} {{ .. }}` instead\"),\n             );\n             return;\n         }\n@@ -63,7 +63,7 @@ pub(super) fn check(cx: &EarlyContext<'_>, pat: &Pat) {\n                             \"you matched a field with a wildcard pattern, consider using `..` \\\n                              instead\",\n                             None,\n-                            &format!(\"try with `{} {{ {}, .. }}`\", type_name, normal[..].join(\", \")),\n+                            &format!(\"try with `{type_name} {{ {}, .. }}`\", normal[..].join(\", \")),\n                         );\n                     }\n                 }"}, {"sha": "6dd76a6531e496e497cff2f30bf6e0457bfed11c", "filename": "clippy_lints/src/mismatching_type_param_order.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -91,10 +91,9 @@ impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n                 let type_name = segment.ident;\n                 for (i, (impl_param_name, impl_param_span)) in impl_params.iter().enumerate() {\n                     if mismatch_param_name(i, impl_param_name, &type_param_names_hashmap) {\n-                        let msg = format!(\"`{}` has a similarly named generic type parameter `{}` in its declaration, but in a different order\",\n-                                          type_name, impl_param_name);\n-                        let help = format!(\"try `{}`, or a name that does not conflict with `{}`'s generic params\",\n-                                           type_param_names[i], type_name);\n+                        let msg = format!(\"`{type_name}` has a similarly named generic type parameter `{impl_param_name}` in its declaration, but in a different order\");\n+                        let help = format!(\"try `{}`, or a name that does not conflict with `{type_name}`'s generic params\",\n+                                           type_param_names[i]);\n                         span_lint_and_help(\n                             cx,\n                             MISMATCHING_TYPE_PARAM_ORDER,"}, {"sha": "71cc0d0a81cd2dd8bc909dd8780c79f857b919a0", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -8,12 +8,12 @@ use rustc_hir as hir;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "641dbb7f7a7454f3831677a0c52250d42e5001e1", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -8,6 +8,7 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_from_proc_macro;\n+use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -103,7 +104,7 @@ impl MissingDoc {\n                 cx,\n                 MISSING_DOCS_IN_PRIVATE_ITEMS,\n                 sp,\n-                &format!(\"missing documentation for {} {}\", article, desc),\n+                &format!(\"missing documentation for {article} {desc}\"),\n             );\n         }\n     }"}, {"sha": "697e6fd24dd11577603ffc750bb20215e8a18d57", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -90,9 +90,7 @@ impl LateLintPass<'_> for ImportRename {\n                     \"this import should be renamed\",\n                     \"try\",\n                     format!(\n-                        \"{} as {}\",\n-                        import,\n-                        name,\n+                        \"{import} as {name}\",\n                     ),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "655df5419ac640b87897c0fccf3b10787250c4d3", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -65,7 +65,7 @@ fn check_missing_inline_attrs(cx: &LateContext<'_>, attrs: &[ast::Attribute], sp\n             cx,\n             MISSING_INLINE_IN_PUBLIC_ITEMS,\n             sp,\n-            &format!(\"missing `#[inline]` for {}\", desc),\n+            &format!(\"missing `#[inline]` for {desc}\"),\n         );\n     }\n }"}, {"sha": "4547ed7eafc861925fb142320d3624a62c99dbc3", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -87,7 +87,7 @@ fn check_arguments<'tcx>(\n                                 cx,\n                                 UNNECESSARY_MUT_PASSED,\n                                 argument.span,\n-                                &format!(\"the {} `{}` doesn't need a mutable reference\", fn_kind, name),\n+                                &format!(\"the {fn_kind} `{name}` doesn't need a mutable reference\"),\n                             );\n                         }\n                     },"}, {"sha": "3ef0c6634598474189ba0b5415d733304b2d2671", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -56,10 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for DebugAssertWithMutCall {\n                     cx,\n                     DEBUG_ASSERT_WITH_MUT_CALL,\n                     span,\n-                    &format!(\n-                        \"do not call a function with mutable arguments inside of `{}!`\",\n-                        macro_name\n-                    ),\n+                    &format!(\"do not call a function with mutable arguments inside of `{macro_name}!`\"),\n                 );\n             }\n         }\n@@ -95,10 +92,6 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                 self.found = true;\n                 return;\n             },\n-            ExprKind::If(..) => {\n-                self.found = true;\n-                return;\n-            },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.typeck_results().adjustments().get(expr.hir_id) {\n                     if adj"}, {"sha": "09cb53331763d04f5188d36089dee85f1e360b77", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -84,9 +84,8 @@ impl<'tcx> LateLintPass<'tcx> for Mutex {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\n-                        \"consider using an `{}` instead of a `Mutex` here; if you just want the locking \\\n-                         behavior and not the internal type, consider using `Mutex<()>`\",\n-                        atomic_name\n+                        \"consider using an `{atomic_name}` instead of a `Mutex` here; if you just want the locking \\\n+                         behavior and not the internal type, consider using `Mutex<()>`\"\n                     );\n                     match *mutex_param.kind() {\n                         ty::Uint(t) if t != ty::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),"}, {"sha": "6f0e755466e5a4524099df8f37f6954fddbd8ab3", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -309,7 +309,7 @@ fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str,\n         expr.span,\n         message,\n         None,\n-        &format!(\"{}\\n{}\", header, snip),\n+        &format!(\"{header}\\n{snip}\"),\n     );\n }\n \n@@ -322,10 +322,7 @@ fn suggestion_snippet_for_continue_inside_if<'a>(cx: &EarlyContext<'_>, data: &'\n \n     let indent_if = indent_of(cx, data.if_expr.span).unwrap_or(0);\n     format!(\n-        \"{indent}if {} {}\\n{indent}{}\",\n-        cond_code,\n-        continue_code,\n-        else_code,\n+        \"{indent}if {cond_code} {continue_code}\\n{indent}{else_code}\",\n         indent = \" \".repeat(indent_if),\n     )\n }\n@@ -349,7 +346,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n             let span = cx.sess().source_map().stmt_span(stmt.span, data.loop_block.span);\n             let snip = snippet_block(cx, span, \"..\", None).into_owned();\n             snip.lines()\n-                .map(|line| format!(\"{}{}\", \" \".repeat(indent), line))\n+                .map(|line| format!(\"{}{line}\", \" \".repeat(indent)))\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\")\n         })\n@@ -358,10 +355,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n \n     let indent_if = indent_of(cx, data.if_expr.span).unwrap_or(0);\n     format!(\n-        \"{indent_if}if {} {}\\n{indent}// merged code follows:\\n{}\\n{indent_if}}}\",\n-        cond_code,\n-        block_code,\n-        to_annex,\n+        \"{indent_if}if {cond_code} {block_code}\\n{indent}// merged code follows:\\n{to_annex}\\n{indent_if}}}\",\n         indent = \" \".repeat(indent),\n         indent_if = \" \".repeat(indent_if),\n     )"}, {"sha": "cbad53f4450b2ad4737f967e04baef489103287c", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -287,7 +287,7 @@ fn check<'tcx>(\n \n                     diag.span_suggestion(\n                         assign.lhs_span,\n-                        &format!(\"declare `{}` here\", binding_name),\n+                        &format!(\"declare `{binding_name}` here\"),\n                         let_snippet,\n                         Applicability::MachineApplicable,\n                     );\n@@ -307,8 +307,8 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{}` here\", binding_name),\n-                        format!(\"{} = \", let_snippet),\n+                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n \n@@ -338,8 +338,8 @@ fn check<'tcx>(\n \n                     diag.span_suggestion_verbose(\n                         usage.stmt.span.shrink_to_lo(),\n-                        &format!(\"declare `{}` here\", binding_name),\n-                        format!(\"{} = \", let_snippet),\n+                        &format!(\"declare `{binding_name}` here\"),\n+                        format!(\"{let_snippet} = \"),\n                         applicability,\n                     );\n "}, {"sha": "178c973981b1b5da2f4e15e198cad7c9c6c1f075", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -12,17 +12,17 @@ use rustc_hir::{\n     BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Mutability, Node, PatKind, QPath, TyKind,\n };\n use rustc_hir::{HirIdMap, HirIdSet};\n+use rustc_hir_analysis::expr_use_visitor as euv;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::kw;\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n-use rustc_hir_analysis::expr_use_visitor as euv;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -186,6 +186,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 if !is_self(arg);\n                 if !ty.is_mutable_ptr();\n                 if !is_copy(cx, ty);\n+                if ty.is_sized(cx.tcx.at(DUMMY_SP), cx.param_env);\n                 if !allowed_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n@@ -236,7 +237,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{}` to\", x)),\n+                                                |x| Cow::from(format!(\"change `{x}` to\")),\n                                             )\n                                             .as_ref(),\n                                         suggestion,\n@@ -266,7 +267,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                                         snippet_opt(cx, span)\n                                             .map_or(\n                                                 \"change the call to\".into(),\n-                                                |x| Cow::from(format!(\"change `{}` to\", x))\n+                                                |x| Cow::from(format!(\"change `{x}` to\"))\n                                             )\n                                             .as_ref(),\n                                         suggestion,\n@@ -341,5 +342,11 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }"}, {"sha": "59b6492e112c05453c4dc24cdbf50d2c070d2ef7", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -134,7 +134,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 NEEDLESS_QUESTION_MARK,\n                 expr.span,\n                 \"question mark operator is useless here\",\n-                &format!(\"try removing question mark and `{}`\", sugg_remove),\n+                &format!(\"try removing question mark and `{sugg_remove}`\"),\n                 format!(\"{}\", snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "fb9a4abd0b4b03e4128c08107a57333b9949c044", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -62,9 +62,9 @@ fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n             let mut applicability = Applicability::MachineApplicable;\n             let snip = snippet_with_applicability(cx, exp.span, \"..\", &mut applicability);\n             let suggestion = if exp.precedence().order() < PREC_PREFIX && !has_enclosing_paren(&snip) {\n-                format!(\"-({})\", snip)\n+                format!(\"-({snip})\")\n             } else {\n-                format!(\"-{}\", snip)\n+                format!(\"-{snip}\")\n             };\n             span_lint_and_sugg(\n                     cx,"}, {"sha": "6017117e1eccf7c15a7773aea4e999d5e536635c", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -136,8 +136,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                     id,\n                                     impl_item.span,\n                                     &format!(\n-                                        \"you should consider adding a `Default` implementation for `{}`\",\n-                                        self_type_snip\n+                                        \"you should consider adding a `Default` implementation for `{self_type_snip}`\"\n                                     ),\n                                     |diag| {\n                                         diag.suggest_prepend_item(\n@@ -161,9 +160,9 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n fn create_new_without_default_suggest_msg(self_type_snip: &str, generics_sugg: &str) -> String {\n     #[rustfmt::skip]\n     format!(\n-\"impl{} Default for {} {{\n+\"impl{generics_sugg} Default for {self_type_snip} {{\n     fn default() -> Self {{\n         Self::new()\n     }}\n-}}\", generics_sugg, self_type_snip)\n+}}\")\n }"}, {"sha": "2c839d029c6f7a5bd482145e1cc5257af862e76b", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -13,14 +13,14 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{\n     BodyId, Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind, UnOp,\n };\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, InnerSpan, Span, DUMMY_SP};\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n // FIXME: this is a correctness problem but there's no suitable\n // warn-by-default category.\n@@ -149,6 +149,9 @@ fn is_value_unfrozen_raw<'tcx>(\n             // the fact that we have to dig into every structs to search enums\n             // leads us to the point checking `UnsafeCell` directly is the only option.\n             ty::Adt(ty_def, ..) if ty_def.is_unsafe_cell() => true,\n+            // As of 2022-09-08 miri doesn't track which union field is active so there's no safe way to check the\n+            // contained value.\n+            ty::Adt(def, ..) if def.is_union() => false,\n             ty::Array(..) | ty::Adt(..) | ty::Tuple(..) => {\n                 let val = cx.tcx.destructure_mir_constant(cx.param_env, val);\n                 val.fields.iter().any(|field| inner(cx, *field))"}, {"sha": "9f6917c146f633d6fb58279644ee7e626fe624f0", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -112,10 +112,7 @@ impl<'a, 'tcx> SimilarNamesLocalVisitor<'a, 'tcx> {\n                 self.cx,\n                 MANY_SINGLE_CHAR_NAMES,\n                 span,\n-                &format!(\n-                    \"{} bindings with single-character names in scope\",\n-                    num_single_char_names\n-                ),\n+                &format!(\"{num_single_char_names} bindings with single-character names in scope\"),\n             );\n         }\n     }"}, {"sha": "0ca0befc13515e92f16c59e871215ce4c815ff90", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -3,16 +3,17 @@ use std::{\n     hash::{Hash, Hasher},\n };\n \n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use serde::{de, Deserialize};\n \n declare_clippy_lint! {\n@@ -39,8 +40,8 @@ declare_clippy_lint! {\n \n const BRACES: &[(&str, &str)] = &[(\"(\", \")\"), (\"{\", \"}\"), (\"[\", \"]\")];\n \n-/// The (name, (open brace, close brace), source snippet)\n-type MacroInfo<'a> = (Symbol, &'a (String, String), String);\n+/// The (callsite span, (open brace, close brace), source snippet)\n+type MacroInfo<'a> = (Span, &'a (String, String), String);\n \n #[derive(Clone, Debug, Default)]\n pub struct MacroBraces {\n@@ -62,33 +63,29 @@ impl_lint_pass!(MacroBraces => [NONSTANDARD_MACRO_BRACES]);\n \n impl EarlyLintPass for MacroBraces {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, item.span, self) {\n-            let span = item.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, item.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, stmt.span, self) {\n-            let span = stmt.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, stmt.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, expr.span, self) {\n-            let span = expr.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, expr.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n-        if let Some((name, braces, snip)) = is_offending_macro(cx, ty.span, self) {\n-            let span = ty.span.ctxt().outer_expn_data().call_site;\n-            emit_help(cx, snip, braces, name, span);\n+        if let Some((span, braces, snip)) = is_offending_macro(cx, ty.span, self) {\n+            emit_help(cx, &snip, braces, span);\n             self.done.insert(span);\n         }\n     }\n@@ -102,48 +99,44 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n                 .last()\n                 .map_or(false, |e| e.macro_def_id.map_or(false, DefId::is_local))\n     };\n+    let span_call_site = span.ctxt().outer_expn_data().call_site;\n     if_chain! {\n         if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n         let name = mac_name.as_str();\n         if let Some(braces) = mac_braces.macro_braces.get(name);\n-        if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n+        if let Some(snip) = snippet_opt(cx, span_call_site);\n         // we must check only invocation sites\n         // https://github.com/rust-lang/rust-clippy/issues/7422\n-        if snip.starts_with(&format!(\"{}!\", name));\n+        if snip.starts_with(&format!(\"{name}!\"));\n         if unnested_or_local();\n         // make formatting consistent\n         let c = snip.replace(' ', \"\");\n-        if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n-        if !mac_braces.done.contains(&span.ctxt().outer_expn_data().call_site);\n+        if !c.starts_with(&format!(\"{name}!{}\", braces.0));\n+        if !mac_braces.done.contains(&span_call_site);\n         then {\n-            Some((mac_name, braces, snip))\n+            Some((span_call_site, braces, snip))\n         } else {\n             None\n         }\n     }\n }\n \n-fn emit_help(cx: &EarlyContext<'_>, snip: String, braces: &(String, String), name: Symbol, span: Span) {\n-    let with_space = &format!(\"! {}\", braces.0);\n-    let without_space = &format!(\"!{}\", braces.0);\n-    let mut help = snip;\n-    for b in BRACES.iter().filter(|b| b.0 != braces.0) {\n-        help = help.replace(b.0, &braces.0).replace(b.1, &braces.1);\n-        // Only `{` traditionally has space before the brace\n-        if braces.0 != \"{\" && help.contains(with_space) {\n-            help = help.replace(with_space, without_space);\n-        } else if braces.0 == \"{\" && help.contains(without_space) {\n-            help = help.replace(without_space, with_space);\n-        }\n+fn emit_help(cx: &EarlyContext<'_>, snip: &str, braces: &(String, String), span: Span) {\n+    if let Some((macro_name, macro_args_str)) = snip.split_once('!') {\n+        let mut macro_args = macro_args_str.trim().to_string();\n+        // now remove the wrong braces\n+        macro_args.remove(0);\n+        macro_args.pop();\n+        span_lint_and_sugg(\n+            cx,\n+            NONSTANDARD_MACRO_BRACES,\n+            span,\n+            &format!(\"use of irregular braces for `{macro_name}!` macro\"),\n+            \"consider writing\",\n+            format!(\"{macro_name}!{}{macro_args}{}\", braces.0, braces.1),\n+            Applicability::MachineApplicable,\n+        );\n     }\n-    span_lint_and_help(\n-        cx,\n-        NONSTANDARD_MACRO_BRACES,\n-        span,\n-        &format!(\"use of irregular braces for `{}!` macro\", name),\n-        Some(span),\n-        &format!(\"consider writing `{}`\", help),\n-    );\n }\n \n fn macro_braces(conf: FxHashSet<MacroMatcher>) -> FxHashMap<String, (String, String)> {\n@@ -273,9 +266,7 @@ impl<'de> Deserialize<'de> for MacroMatcher {\n                         .iter()\n                         .find(|b| b.0 == brace)\n                         .map(|(o, c)| ((*o).to_owned(), (*c).to_owned()))\n-                        .ok_or_else(|| {\n-                            de::Error::custom(&format!(\"expected one of `(`, `{{`, `[` found `{}`\", brace))\n-                        })?,\n+                        .ok_or_else(|| de::Error::custom(&format!(\"expected one of `(`, `{{`, `[` found `{brace}`\")))?,\n                 })\n             }\n         }"}, {"sha": "f380a5065827d04e2730f62b6398cef13c756d09", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -102,7 +102,7 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n         // construct a replacement escape\n         // the maximum value is \\077, or \\x3f, so u8 is sufficient here\n         if let Ok(n) = u8::from_str_radix(&contents[from + 1..to], 8) {\n-            write!(suggest_1, \"\\\\x{:02x}\", n).unwrap();\n+            write!(suggest_1, \"\\\\x{n:02x}\").unwrap();\n         }\n \n         // append the null byte as \\x00 and the following digits literally"}, {"sha": "d29ca37eaeb809a2c27ec9aadfd9714966d96cba", "filename": "clippy_lints/src/operators/absurd_extreme_comparisons.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fabsurd_extreme_comparisons.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -34,13 +34,12 @@ pub(super) fn check<'tcx>(\n         };\n \n         let help = format!(\n-            \"because `{}` is the {} value for this type, {}\",\n+            \"because `{}` is the {} value for this type, {conclusion}\",\n             snippet(cx, culprit.expr.span, \"x\"),\n             match culprit.which {\n                 ExtremeType::Minimum => \"minimum\",\n                 ExtremeType::Maximum => \"maximum\",\n-            },\n-            conclusion\n+            }\n         );\n \n         span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, None, &help);"}, {"sha": "c8a374d90b5592917b077eeee5429857b4965407", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -9,7 +9,6 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::Ty;\n use rustc_session::impl_lint_pass;\n use rustc_span::source_map::{Span, Spanned};\n \n@@ -78,28 +77,47 @@ impl ArithmeticSideEffects {\n         )\n     }\n \n-    /// Explicit integers like `1` or `i32::MAX`. Does not take into consideration references.\n-    fn is_literal_integer(expr: &hir::Expr<'_>, expr_refs: Ty<'_>) -> bool {\n-        let is_integral = expr_refs.is_integral();\n-        let is_literal = matches!(expr.kind, hir::ExprKind::Lit(_));\n-        is_integral && is_literal\n-    }\n-\n+    // Common entry-point to avoid code duplication.\n     fn issue_lint(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n         let msg = \"arithmetic operation that can potentially result in unexpected side-effects\";\n         span_lint(cx, ARITHMETIC_SIDE_EFFECTS, expr.span, msg);\n         self.expr_span = Some(expr.span);\n     }\n \n+    /// * If `expr` is a literal integer like `1` or `i32::MAX`, returns itself.\n+    /// * Is `expr` is a literal integer reference like `&199`, returns the literal integer without\n+    ///   references.\n+    /// * If `expr` is anything else, returns `None`.\n+    fn literal_integer<'expr, 'tcx>(\n+        cx: &LateContext<'tcx>,\n+        expr: &'expr hir::Expr<'tcx>,\n+    ) -> Option<&'expr hir::Expr<'tcx>> {\n+        let expr_refs = cx.typeck_results().expr_ty(expr).peel_refs();\n+\n+        if !expr_refs.is_integral() {\n+            return None;\n+        }\n+\n+        if matches!(expr.kind, hir::ExprKind::Lit(_)) {\n+            return Some(expr);\n+        }\n+\n+        if let hir::ExprKind::AddrOf(.., inn) = expr.kind && let hir::ExprKind::Lit(_) = inn.kind {\n+            return Some(inn)\n+        }\n+\n+        None\n+    }\n+\n     /// Manages when the lint should be triggered. Operations in constant environments, hard coded\n     /// types, custom allowed types and non-constant operations that won't overflow are ignored.\n-    fn manage_bin_ops(\n+    fn manage_bin_ops<'tcx>(\n         &mut self,\n-        cx: &LateContext<'_>,\n-        expr: &hir::Expr<'_>,\n+        cx: &LateContext<'tcx>,\n+        expr: &hir::Expr<'tcx>,\n         op: &Spanned<hir::BinOpKind>,\n-        lhs: &hir::Expr<'_>,\n-        rhs: &hir::Expr<'_>,\n+        lhs: &hir::Expr<'tcx>,\n+        rhs: &hir::Expr<'tcx>,\n     ) {\n         if constant_simple(cx, cx.typeck_results(), expr).is_some() {\n             return;\n@@ -119,14 +137,11 @@ impl ArithmeticSideEffects {\n         if self.is_allowed_ty(cx, lhs) || self.is_allowed_ty(cx, rhs) {\n             return;\n         }\n-        let has_valid_op = match (\n-            Self::is_literal_integer(lhs, cx.typeck_results().expr_ty(lhs).peel_refs()),\n-            Self::is_literal_integer(rhs, cx.typeck_results().expr_ty(rhs).peel_refs()),\n-        ) {\n-            (true, true) => true,\n-            (true, false) => Self::has_valid_op(op, lhs),\n-            (false, true) => Self::has_valid_op(op, rhs),\n-            (false, false) => false,\n+        let has_valid_op = match (Self::literal_integer(cx, lhs), Self::literal_integer(cx, rhs)) {\n+            (None, None) => false,\n+            (None, Some(local_expr)) => Self::has_valid_op(op, local_expr),\n+            (Some(local_expr), None) => Self::has_valid_op(op, local_expr),\n+            (Some(_), Some(_)) => true,\n         };\n         if !has_valid_op {\n             self.issue_lint(cx, expr);\n@@ -135,7 +150,7 @@ impl ArithmeticSideEffects {\n }\n \n impl<'tcx> LateLintPass<'tcx> for ArithmeticSideEffects {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'tcx>) {\n         if self.expr_span.is_some() || self.const_span.map_or(false, |sp| sp.contains(expr.span)) {\n             return;\n         }"}, {"sha": "2d5d5d143ffaff88d452ecd05cb79c9571dae343", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -7,11 +7,11 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_lint::LateContext;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::BorrowKind;\n use rustc_trait_selection::infer::TyCtxtInferExt;\n-use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use super::ASSIGN_OP_PATTERN;\n \n@@ -55,7 +55,7 @@ pub(super) fn check<'tcx>(\n                                 diag.span_suggestion(\n                                     expr.span,\n                                     \"replace it with\",\n-                                    format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r),\n+                                    format!(\"{snip_a} {}= {snip_r}\", op.node.as_str()),\n                                     Applicability::MachineApplicable,\n                                 );\n                             }"}, {"sha": "1369b3e74625cacdb849ad510ff2e930f0de943a", "filename": "clippy_lints/src/operators/bit_mask.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fbit_mask.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -64,10 +64,7 @@ fn check_bit_mask(\n                             cx,\n                             BAD_BIT_MASK,\n                             span,\n-                            &format!(\n-                                \"incompatible bit mask: `_ & {}` can never be equal to `{}`\",\n-                                mask_value, cmp_value\n-                            ),\n+                            &format!(\"incompatible bit mask: `_ & {mask_value}` can never be equal to `{cmp_value}`\"),\n                         );\n                     }\n                 } else if mask_value == 0 {\n@@ -80,10 +77,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ | {}` can never be equal to `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ | {mask_value}` can never be equal to `{cmp_value}`\"),\n                     );\n                 }\n             },\n@@ -96,10 +90,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ & {}` will always be lower than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ & {mask_value}` will always be lower than `{cmp_value}`\"),\n                     );\n                 } else if mask_value == 0 {\n                     span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n@@ -111,10 +102,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ | {}` will never be lower than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ | {mask_value}` will never be lower than `{cmp_value}`\"),\n                     );\n                 } else {\n                     check_ineffective_lt(cx, span, mask_value, cmp_value, \"|\");\n@@ -130,10 +118,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ & {}` will never be higher than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ & {mask_value}` will never be higher than `{cmp_value}`\"),\n                     );\n                 } else if mask_value == 0 {\n                     span_lint(cx, BAD_BIT_MASK, span, \"&-masking with zero\");\n@@ -145,10 +130,7 @@ fn check_bit_mask(\n                         cx,\n                         BAD_BIT_MASK,\n                         span,\n-                        &format!(\n-                            \"incompatible bit mask: `_ | {}` will always be higher than `{}`\",\n-                            mask_value, cmp_value\n-                        ),\n+                        &format!(\"incompatible bit mask: `_ | {mask_value}` will always be higher than `{cmp_value}`\"),\n                     );\n                 } else {\n                     check_ineffective_gt(cx, span, mask_value, cmp_value, \"|\");\n@@ -167,10 +149,7 @@ fn check_ineffective_lt(cx: &LateContext<'_>, span: Span, m: u128, c: u128, op:\n             cx,\n             INEFFECTIVE_BIT_MASK,\n             span,\n-            &format!(\n-                \"ineffective bit mask: `x {} {}` compared to `{}`, is the same as x compared directly\",\n-                op, m, c\n-            ),\n+            &format!(\"ineffective bit mask: `x {op} {m}` compared to `{c}`, is the same as x compared directly\"),\n         );\n     }\n }\n@@ -181,10 +160,7 @@ fn check_ineffective_gt(cx: &LateContext<'_>, span: Span, m: u128, c: u128, op:\n             cx,\n             INEFFECTIVE_BIT_MASK,\n             span,\n-            &format!(\n-                \"ineffective bit mask: `x {} {}` compared to `{}`, is the same as x compared directly\",\n-                op, m, c\n-            ),\n+            &format!(\"ineffective bit mask: `x {op} {m}` compared to `{c}`, is the same as x compared directly\"),\n         );\n     }\n }"}, {"sha": "c9c777f1bd8d8854e66e19f4c0fa77b17a3bc059", "filename": "clippy_lints/src/operators/cmp_owned.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -99,7 +99,7 @@ fn check_op(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool)\n             let expr_snip;\n             let eq_impl;\n             if with_deref.is_implemented() {\n-                expr_snip = format!(\"*{}\", arg_snip);\n+                expr_snip = format!(\"*{arg_snip}\");\n                 eq_impl = with_deref;\n             } else {\n                 expr_snip = arg_snip.to_string();\n@@ -121,17 +121,15 @@ fn check_op(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool)\n                 };\n                 if eq_impl.ty_eq_other {\n                     hint = format!(\n-                        \"{}{}{}\",\n-                        expr_snip,\n+                        \"{expr_snip}{}{}\",\n                         snippet(cx, cmp_span, \"..\"),\n                         snippet(cx, other.span, \"..\")\n                     );\n                 } else {\n                     hint = format!(\n-                        \"{}{}{}\",\n+                        \"{}{}{expr_snip}\",\n                         snippet(cx, other.span, \"..\"),\n-                        snippet(cx, cmp_span, \"..\"),\n-                        expr_snip\n+                        snippet(cx, cmp_span, \"..\")\n                     );\n                 }\n             }"}, {"sha": "49e662cacb0c374720d1a8d404f5856b48852acf", "filename": "clippy_lints/src/operators/duration_subsec.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fduration_subsec.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -31,12 +31,11 @@ pub(crate) fn check<'tcx>(\n             cx,\n             DURATION_SUBSEC,\n             expr.span,\n-            &format!(\"calling `{}()` is more concise than this calculation\", suggested_fn),\n+            &format!(\"calling `{suggested_fn}()` is more concise than this calculation\"),\n             \"try\",\n             format!(\n-                \"{}.{}()\",\n-                snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability),\n-                suggested_fn\n+                \"{}.{suggested_fn}()\",\n+                snippet_with_applicability(cx, self_arg.span, \"_\", &mut applicability)\n             ),\n             applicability,\n         );"}, {"sha": "67913f7392c0490d05a26213809d04051ed9d5ac", "filename": "clippy_lints/src/operators/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Feq_op.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn check_assert<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n             cx,\n             EQ_OP,\n             lhs.span.to(rhs.span),\n-            &format!(\"identical args used in this `{}!` macro call\", macro_name),\n+            &format!(\"identical args used in this `{macro_name}!` macro call\"),\n         );\n     }\n }"}, {"sha": "ae805147f07a20155444857085a60eb120f604fe", "filename": "clippy_lints/src/operators/misrefactored_assign_op.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmisrefactored_assign_op.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -47,18 +47,14 @@ fn lint_misrefactored_assign_op(\n             if let (Some(snip_a), Some(snip_r)) = (snippet_opt(cx, assignee.span), snippet_opt(cx, rhs_other.span)) {\n                 let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n                 let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n-                let long = format!(\"{} = {}\", snip_a, sugg::make_binop(op.into(), a, r));\n+                let long = format!(\"{snip_a} = {}\", sugg::make_binop(op.into(), a, r));\n                 diag.span_suggestion(\n                     expr.span,\n                     &format!(\n-                        \"did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n-                        snip_a,\n-                        snip_a,\n-                        op.as_str(),\n-                        snip_r,\n-                        long\n+                        \"did you mean `{snip_a} = {snip_a} {} {snip_r}` or `{long}`? Consider replacing it with\",\n+                        op.as_str()\n                     ),\n-                    format!(\"{} {}= {}\", snip_a, op.as_str(), snip_r),\n+                    format!(\"{snip_a} {}= {snip_r}\", op.as_str()),\n                     Applicability::MaybeIncorrect,\n                 );\n                 diag.span_suggestion("}, {"sha": "b8a20d5ebe9bd689e7d996fea0dff6e86d9dcdd4", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -67,7 +67,7 @@ declare_clippy_lint! {\n     /// Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n     /// or can panic (`/`, `%`).\n     ///\n-    /// Known safe built-in types like `Wrapping` or `Saturing`, floats, operations in constant\n+    /// Known safe built-in types like `Wrapping` or `Saturating`, floats, operations in constant\n     /// environments, allowed types and non-constant operations that won't overflow are ignored.\n     ///\n     /// ### Why is this bad?"}, {"sha": "ab5fb1787004e79f8ef198802f90705b608e7ec9", "filename": "clippy_lints/src/operators/needless_bitwise_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fneedless_bitwise_bool.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, op: BinOpKind, lhs: &Exp\n                 if let Some(lhs_snip) = snippet_opt(cx, lhs.span)\n                     && let Some(rhs_snip) = snippet_opt(cx, rhs.span)\n                 {\n-                    let sugg = format!(\"{} {} {}\", lhs_snip, op_str, rhs_snip);\n+                    let sugg = format!(\"{lhs_snip} {op_str} {rhs_snip}\");\n                     diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n                 }\n             },"}, {"sha": "1229c202f5a0993dbecf0a9e76eff8d25936ea63", "filename": "clippy_lints/src/operators/ptr_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n                     expr.span,\n                     LINT_MSG,\n                     \"try\",\n-                    format!(\"std::ptr::eq({}, {})\", left_snip, right_snip),\n+                    format!(\"std::ptr::eq({left_snip}, {right_snip})\"),\n                     Applicability::MachineApplicable,\n                     );\n             }"}, {"sha": "7c9d5320a3a8b0e30f5706fd39447d33c026e40a", "filename": "clippy_lints/src/operators/self_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fself_assignment.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -14,7 +14,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, lhs: &'tcx\n             cx,\n             SELF_ASSIGNMENT,\n             e.span,\n-            &format!(\"self-assignment of `{}` to `{}`\", rhs, lhs),\n+            &format!(\"self-assignment of `{rhs}` to `{lhs}`\"),\n         );\n     }\n }"}, {"sha": "fbf65e92b322a7c8e92cbe67614d69a1ebe5c2f0", "filename": "clippy_lints/src/operators/verbose_bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fverbose_bit_mask.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check<'tcx>(\n                 diag.span_suggestion(\n                     e.span,\n                     \"try\",\n-                    format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n+                    format!(\"{sugg}.trailing_zeros() >= {}\", n.count_ones()),\n                     Applicability::MaybeIncorrect,\n                 );\n             },"}, {"sha": "256d24500011ff485dff99839fb3a5b38c936b77", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -163,7 +163,7 @@ fn try_get_option_occurence<'tcx>(\n             return Some(OptionOccurence {\n                 option: format_option_in_sugg(cx, cond_expr, as_ref, as_mut),\n                 method_sugg: method_sugg.to_string(),\n-                some_expr: format!(\"|{}{}| {}\", capture_mut, capture_name, Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),\n+                some_expr: format!(\"|{capture_mut}{capture_name}| {}\", Sugg::hir_with_macro_callsite(cx, some_body, \"..\")),\n                 none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir_with_macro_callsite(cx, none_body, \"..\")),\n             });\n         }"}, {"sha": "45e98de10ace4985308194b806b8f3645fc01a8d", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -209,7 +209,7 @@ impl<'tcx> PassByRefOrValue {\n                             cx,\n                             TRIVIALLY_COPY_PASS_BY_REF,\n                             input.span,\n-                            &format!(\"this argument ({} byte) is passed by reference, but would be more efficient if passed by value (limit: {} byte)\", size, self.ref_min_size),\n+                            &format!(\"this argument ({size} byte) is passed by reference, but would be more efficient if passed by value (limit: {} byte)\", self.ref_min_size),\n                             \"consider passing by value instead\",\n                             value_type,\n                             Applicability::Unspecified,\n@@ -237,7 +237,7 @@ impl<'tcx> PassByRefOrValue {\n                                 cx,\n                                 LARGE_TYPES_PASSED_BY_VALUE,\n                                 input.span,\n-                                &format!(\"this argument ({} byte) is passed by value, but might be more efficient if passed by reference (limit: {} byte)\", size, self.value_max_size),\n+                                &format!(\"this argument ({size} byte) is passed by value, but might be more efficient if passed by reference (limit: {} byte)\", self.value_max_size),\n                                 \"consider passing by reference instead\",\n                                 format!(\"&{}\", snippet(cx, input.span, \"_\")),\n                                 Applicability::MaybeIncorrect,"}, {"sha": "85e0710eb50d897117cb90c023370bde3fab5907", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -463,7 +463,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                                     diag.span_suggestion(\n                                         hir_ty.span,\n                                         \"change this to\",\n-                                        format!(\"&{}{}\", mutability.prefix_str(), ty_name),\n+                                        format!(\"&{}{ty_name}\", mutability.prefix_str()),\n                                         Applicability::Unspecified,\n                                     );\n                                 }"}, {"sha": "b0a5d1a6758285d268071ffbc1e2a586dfa2da45", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for PtrOffsetWithCast {\n             None => return,\n         };\n \n-        let msg = format!(\"use of `{}` with a `usize` casted to an `isize`\", method);\n+        let msg = format!(\"use of `{method}` with a `usize` casted to an `isize`\");\n         if let Some(sugg) = build_suggestion(cx, method, receiver_expr, cast_lhs_expr) {\n             span_lint_and_sugg(\n                 cx,\n@@ -124,7 +124,7 @@ fn build_suggestion<'tcx>(\n ) -> Option<String> {\n     let receiver = snippet_opt(cx, receiver_expr.span)?;\n     let cast_lhs = snippet_opt(cx, cast_lhs_expr.span)?;\n-    Some(format!(\"{}.{}({})\", receiver, method.suggestion(), cast_lhs))\n+    Some(format!(\"{receiver}.{}({cast_lhs})\", method.suggestion()))\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "0b3d5d174804af201e89e182e8aecaf429442752", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -3,8 +3,8 @@ use clippy_utils::higher;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{\n-    eq_expr_value, get_parent_node, is_else_clause, is_lang_ctor, path_to_local, path_to_local_id, peel_blocks,\n-    peel_blocks_with_stmt,\n+    eq_expr_value, get_parent_node, in_constant, is_else_clause, is_lang_ctor, path_to_local, path_to_local_id,\n+    peel_blocks, peel_blocks_with_stmt,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -97,12 +97,12 @@ fn check_is_none_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr: &Ex\n                 !matches!(caller.kind, ExprKind::Call(..) | ExprKind::MethodCall(..));\n             let sugg = if let Some(else_inner) = r#else {\n                 if eq_expr_value(cx, caller, peel_blocks(else_inner)) {\n-                    format!(\"Some({}?)\", receiver_str)\n+                    format!(\"Some({receiver_str}?)\")\n                 } else {\n                     return;\n                 }\n             } else {\n-                format!(\"{}{}?;\", receiver_str, if by_ref { \".as_ref()\" } else { \"\" })\n+                format!(\"{receiver_str}{}?;\", if by_ref { \".as_ref()\" } else { \"\" })\n             };\n \n             span_lint_and_sugg(\n@@ -135,8 +135,7 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n             let receiver_str = snippet_with_applicability(cx, let_expr.span, \"..\", &mut applicability);\n             let requires_semi = matches!(get_parent_node(cx.tcx, expr.hir_id), Some(Node::Stmt(_)));\n             let sugg = format!(\n-                \"{}{}?{}\",\n-                receiver_str,\n+                \"{receiver_str}{}?{}\",\n                 if by_ref == ByRef::Yes { \".as_ref()\" } else { \"\" },\n                 if requires_semi { \";\" } else { \"\" }\n             );\n@@ -224,7 +223,9 @@ fn expr_return_none_or_err(\n \n impl<'tcx> LateLintPass<'tcx> for QuestionMark {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        check_is_none_or_err_and_early_return(cx, expr);\n-        check_if_let_some_or_err_and_early_return(cx, expr);\n+        if !in_constant(cx, expr.hir_id) {\n+            check_is_none_or_err_and_early_return(cx, expr);\n+            check_if_let_some_or_err_and_early_return(cx, expr);\n+        }\n     }\n }"}, {"sha": "c6fbb5e805ab2812a6da2d7db80b5ca4ec7d834d", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -243,9 +243,9 @@ fn check_possible_range_contains(\n                 cx,\n                 MANUAL_RANGE_CONTAINS,\n                 span,\n-                &format!(\"manual `{}::contains` implementation\", range_type),\n+                &format!(\"manual `{range_type}::contains` implementation\"),\n                 \"use\",\n-                format!(\"({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n+                format!(\"({lo}{space}{range_op}{hi}).contains(&{name})\"),\n                 applicability,\n             );\n         } else if !combine_and && ord == Some(l.ord) {\n@@ -273,9 +273,9 @@ fn check_possible_range_contains(\n                 cx,\n                 MANUAL_RANGE_CONTAINS,\n                 span,\n-                &format!(\"manual `!{}::contains` implementation\", range_type),\n+                &format!(\"manual `!{range_type}::contains` implementation\"),\n                 \"use\",\n-                format!(\"!({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n+                format!(\"!({lo}{space}{range_op}{hi}).contains(&{name})\"),\n                 applicability,\n             );\n         }\n@@ -372,14 +372,14 @@ fn check_exclusive_range_plus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                             diag.span_suggestion(\n                                 span,\n                                 \"use\",\n-                                format!(\"({}..={})\", start, end),\n+                                format!(\"({start}..={end})\"),\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n                             diag.span_suggestion(\n                                 span,\n                                 \"use\",\n-                                format!(\"{}..={}\", start, end),\n+                                format!(\"{start}..={end}\"),\n                                 Applicability::MachineApplicable, // snippet\n                             );\n                         }\n@@ -408,7 +408,7 @@ fn check_inclusive_range_minus_one(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                     diag.span_suggestion(\n                         expr.span,\n                         \"use\",\n-                        format!(\"{}..{}\", start, end),\n+                        format!(\"{start}..{end}\"),\n                         Applicability::MachineApplicable, // snippet\n                     );\n                 },\n@@ -486,7 +486,7 @@ fn check_reversed_empty_range(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                                 expr.span,\n                                 \"consider using the following if you are attempting to iterate over this \\\n                                  range in reverse\",\n-                                format!(\"({}{}{}).rev()\", end_snippet, dots, start_snippet),\n+                                format!(\"({end_snippet}{dots}{start_snippet}).rev()\"),\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }"}, {"sha": "ae80b6f126916b7b5539c4885bfbd3ffa046698c", "filename": "clippy_lints/src/read_zero_byte_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -101,9 +101,8 @@ impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n                                 next_stmt_span,\n                                 \"reading zero byte data to `Vec`\",\n                                 \"try\",\n-                                format!(\"{}.resize({}, 0); {}\",\n+                                format!(\"{}.resize({len}, 0); {}\",\n                                     ident.as_str(),\n-                                    len,\n                                     snippet(cx, next_stmt_span, \"..\")\n                                 ),\n                                 applicability,"}, {"sha": "464f6827e1d54b2bb4f1f8a796b27228364ce8fd", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                     cx,\n                     REDUNDANT_PUB_CRATE,\n                     span,\n-                    &format!(\"pub(crate) {} inside private module\", descr),\n+                    &format!(\"pub(crate) {descr} inside private module\"),\n                     |diag| {\n                         diag.span_suggestion(\n                             item.vis_span,"}, {"sha": "245a02ea26e61d35d2fa3842c436fc002556f2a7", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -127,9 +127,9 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n \n                     let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n                     let sugg = if (deref_count != 0 || !reborrow_str.is_empty()) && needs_parens_for_prefix {\n-                        format!(\"({}{}{})\", reborrow_str, \"*\".repeat(deref_count), snip)\n+                        format!(\"({reborrow_str}{}{snip})\", \"*\".repeat(deref_count))\n                     } else {\n-                        format!(\"{}{}{}\", reborrow_str, \"*\".repeat(deref_count), snip)\n+                        format!(\"{reborrow_str}{}{snip}\", \"*\".repeat(deref_count))\n                     };\n \n                     (lint, help_str, sugg)\n@@ -141,9 +141,9 @@ impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n                         if deref_ty == expr_ty {\n                             let snip = snippet_with_context(cx, indexed.span, ctxt, \"..\", &mut app).0;\n                             let sugg = if needs_parens_for_prefix {\n-                                format!(\"(&{}{}*{})\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n+                                format!(\"(&{}{}*{snip})\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count))\n                             } else {\n-                                format!(\"&{}{}*{}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count), snip)\n+                                format!(\"&{}{}*{snip}\", mutability.prefix_str(), \"*\".repeat(indexed_ref_count))\n                             };\n                             (DEREF_BY_SLICING_LINT, \"dereference the original value instead\", sugg)\n                         } else {"}, {"sha": "60ba62c4a4332532f2b42d46732005c7b3a10174", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -67,7 +67,7 @@ impl RedundantStaticLifetimes {\n                         TyKind::Path(..) | TyKind::Slice(..) | TyKind::Array(..) | TyKind::Tup(..) => {\n                             if lifetime.ident.name == rustc_span::symbol::kw::StaticLifetime {\n                                 let snip = snippet(cx, borrow_type.ty.span, \"<type>\");\n-                                let sugg = format!(\"&{}\", snip);\n+                                let sugg = format!(\"&{snip}\");\n                                 span_lint_and_then(\n                                     cx,\n                                     REDUNDANT_STATIC_LIFETIMES,"}, {"sha": "1fda58fa54de1e4ee233794abcec3578fb0edcce", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -172,7 +172,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n                     );\n                 },\n                 Err(e) => {\n-                    span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {}\", e));\n+                    span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {e}\"));\n                 },\n             }\n         }\n@@ -200,7 +200,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n                 );\n             },\n             Err(e) => {\n-                span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {}\", e));\n+                span_lint(cx, INVALID_REGEX, expr.span, &format!(\"regex syntax error: {e}\"));\n             },\n         }\n     }"}, {"sha": "f758f4cff8ba1521f08802c556ef662cfd4ff22e", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 75, "deletions": 98, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint_hir_and_then;\n+use clippy_utils::diagnostics::{span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_opt, snippet_with_context};\n use clippy_utils::{fn_def_id, path_to_local_id};\n use if_chain::if_chain;\n@@ -72,6 +72,27 @@ enum RetReplacement {\n     Unit,\n }\n \n+impl RetReplacement {\n+    fn sugg_help(self) -> &'static str {\n+        match self {\n+            Self::Empty => \"remove `return`\",\n+            Self::Block => \"replace `return` with an empty block\",\n+            Self::Unit => \"replace `return` with a unit value\",\n+        }\n+    }\n+}\n+\n+impl ToString for RetReplacement {\n+    fn to_string(&self) -> String {\n+        match *self {\n+            Self::Empty => \"\",\n+            Self::Block => \"{}\",\n+            Self::Unit => \"()\",\n+        }\n+        .to_string()\n+    }\n+}\n+\n declare_lint_pass!(Return => [LET_AND_RETURN, NEEDLESS_RETURN]);\n \n impl<'tcx> LateLintPass<'tcx> for Return {\n@@ -139,62 +160,67 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, body.value, Some(body.value.span), replacement);\n+                check_final_expr(cx, body.value, vec![], replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n-                if let ExprKind::Block(block, _) = body.value.kind {\n-                    check_block_return(cx, block);\n-                }\n+                check_block_return(cx, &body.value.kind, vec![]);\n             },\n         }\n     }\n }\n \n-fn check_block_return<'tcx>(cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n-    if let Some(expr) = block.expr {\n-        check_final_expr(cx, expr, Some(expr.span), RetReplacement::Empty);\n-    } else if let Some(stmt) = block.stmts.iter().last() {\n-        match stmt.kind {\n-            StmtKind::Expr(expr) | StmtKind::Semi(expr) => {\n-                check_final_expr(cx, expr, Some(stmt.span), RetReplacement::Empty);\n-            },\n-            _ => (),\n+// if `expr` is a block, check if there are needless returns in it\n+fn check_block_return<'tcx>(cx: &LateContext<'tcx>, expr_kind: &ExprKind<'tcx>, semi_spans: Vec<Span>) {\n+    if let ExprKind::Block(block, _) = expr_kind {\n+        if let Some(block_expr) = block.expr {\n+            check_final_expr(cx, block_expr, semi_spans, RetReplacement::Empty);\n+        } else if let Some(stmt) = block.stmts.iter().last() {\n+            match stmt.kind {\n+                StmtKind::Expr(expr) => {\n+                    check_final_expr(cx, expr, semi_spans, RetReplacement::Empty);\n+                },\n+                StmtKind::Semi(semi_expr) => {\n+                    let mut semi_spans_and_this_one = semi_spans;\n+                    // we only want the span containing the semicolon so we can remove it later. From `entry.rs:382`\n+                    if let Some(semicolon_span) = stmt.span.trim_start(semi_expr.span) {\n+                        semi_spans_and_this_one.push(semicolon_span);\n+                        check_final_expr(cx, semi_expr, semi_spans_and_this_one, RetReplacement::Empty);\n+                    }\n+                },\n+                _ => (),\n+            }\n         }\n     }\n }\n \n fn check_final_expr<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n-    span: Option<Span>,\n+    semi_spans: Vec<Span>, /* containing all the places where we would need to remove semicolons if finding an\n+                            * needless return */\n     replacement: RetReplacement,\n ) {\n-    match expr.kind {\n+    let peeled_drop_expr = expr.peel_drop_temps();\n+    match &peeled_drop_expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n                     emit_return_lint(\n                         cx,\n-                        inner.map_or(expr.hir_id, |inner| inner.hir_id),\n-                        span.expect(\"`else return` is not possible\"),\n+                        peeled_drop_expr.span,\n+                        semi_spans,\n                         inner.as_ref().map(|i| i.span),\n                         replacement,\n                     );\n                 }\n             }\n         },\n-        // a whole block? check it!\n-        ExprKind::Block(block, _) => {\n-            check_block_return(cx, block);\n-        },\n         ExprKind::If(_, then, else_clause_opt) => {\n-            if let ExprKind::Block(ifblock, _) = then.kind {\n-                check_block_return(cx, ifblock);\n-            }\n+            check_block_return(cx, &then.kind, semi_spans.clone());\n             if let Some(else_clause) = else_clause_opt {\n-                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n+                check_block_return(cx, &else_clause.kind, semi_spans);\n             }\n         },\n         // a match expr, check all arms\n@@ -203,93 +229,44 @@ fn check_final_expr<'tcx>(\n         // (except for unit type functions) so we don't match it\n         ExprKind::Match(_, arms, MatchSource::Normal) => {\n             for arm in arms.iter() {\n-                check_final_expr(cx, arm.body, Some(arm.body.span), RetReplacement::Unit);\n+                check_final_expr(cx, arm.body, semi_spans.clone(), RetReplacement::Unit);\n             }\n         },\n-        ExprKind::DropTemps(expr) => check_final_expr(cx, expr, None, RetReplacement::Empty),\n-        _ => (),\n+        // if it's a whole block, check it\n+        other_expr_kind => check_block_return(cx, other_expr_kind, semi_spans),\n     }\n }\n \n fn emit_return_lint(\n     cx: &LateContext<'_>,\n-    emission_place: HirId,\n     ret_span: Span,\n+    semi_spans: Vec<Span>,\n     inner_span: Option<Span>,\n     replacement: RetReplacement,\n ) {\n     if ret_span.from_expansion() {\n         return;\n     }\n-    match inner_span {\n-        Some(inner_span) => {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_hir_and_then(\n-                cx,\n-                NEEDLESS_RETURN,\n-                emission_place,\n-                ret_span,\n-                \"unneeded `return` statement\",\n-                |diag| {\n-                    let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n-                    diag.span_suggestion(ret_span, \"remove `return`\", snippet, applicability);\n-                },\n-            );\n-        },\n-        None => match replacement {\n-            RetReplacement::Empty => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"remove `return`\",\n-                            String::new(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n-            RetReplacement::Block => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with an empty block\",\n-                            \"{}\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n-            RetReplacement::Unit => {\n-                span_lint_hir_and_then(\n-                    cx,\n-                    NEEDLESS_RETURN,\n-                    emission_place,\n-                    ret_span,\n-                    \"unneeded `return` statement\",\n-                    |diag| {\n-                        diag.span_suggestion(\n-                            ret_span,\n-                            \"replace `return` with a unit value\",\n-                            \"()\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    },\n-                );\n-            },\n+    let mut applicability = Applicability::MachineApplicable;\n+    let return_replacement = inner_span.map_or_else(\n+        || replacement.to_string(),\n+        |inner_span| {\n+            let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n+            snippet.to_string()\n         },\n-    }\n+    );\n+    let sugg_help = if inner_span.is_some() {\n+        \"remove `return`\"\n+    } else {\n+        replacement.sugg_help()\n+    };\n+    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n+        diag.span_suggestion_hidden(ret_span, sugg_help, return_replacement, applicability);\n+        // for each parent statement, we need to remove the semicolon\n+        for semi_stmt_span in semi_spans {\n+            diag.tool_only_span_suggestion(semi_stmt_span, \"remove this semicolon\", \"\", applicability);\n+        }\n+    });\n }\n \n fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {"}, {"sha": "dead36e3bea8f124d00e128cebc06372a0ee9bcc", "filename": "clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsame_name_method.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -55,11 +55,11 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n             if matches!(cx.tcx.def_kind(id.def_id), DefKind::Impl)\n                 && let item = cx.tcx.hir().item(id)\n                 && let ItemKind::Impl(Impl {\n-                  items,\n-                  of_trait,\n-                  self_ty,\n-                  ..\n-                                      }) = &item.kind\n+                    items,\n+                    of_trait,\n+                    self_ty,\n+                    ..\n+                }) = &item.kind\n                 && let TyKind::Path(QPath::Resolved(_, Path { res, .. })) = self_ty.kind\n             {\n                 if !map.contains_key(res) {\n@@ -108,7 +108,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                     |diag| {\n                                         diag.span_note(\n                                             trait_method_span,\n-                                            &format!(\"existing `{}` defined here\", method_name),\n+                                            &format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );\n@@ -151,7 +151,7 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n                                         // iterate on trait_spans?\n                                         diag.span_note(\n                                             trait_spans[0],\n-                                            &format!(\"existing `{}` defined here\", method_name),\n+                                            &format!(\"existing `{method_name}` defined here\"),\n                                         );\n                                     },\n                                 );"}, {"sha": "66638eed998371394176d11b826b5a9a5c74bcc4", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for SemicolonIfNothingReturned {\n                 }\n \n                 let sugg = sugg::Sugg::hir_with_macro_callsite(cx, expr, \"..\");\n-                let suggestion = format!(\"{0};\", sugg);\n+                let suggestion = format!(\"{sugg};\");\n                 span_lint_and_sugg(\n                     cx,\n                     SEMICOLON_IF_NOTHING_RETURNED,"}, {"sha": "e57ab8cd7a3ac3d22ee0a71dd81fe22f31e00e45", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -174,7 +174,7 @@ impl SlowVectorInit {\n             diag.span_suggestion(\n                 vec_alloc.allocation_expr.span,\n                 \"consider replace allocation with\",\n-                format!(\"vec![0; {}]\", len_expr),\n+                format!(\"vec![0; {len_expr}]\"),\n                 Applicability::Unspecified,\n             );\n         });"}, {"sha": "d6b336bef943ec9510ec68221d34da9599a411e0", "filename": "clippy_lints/src/std_instead_of_core.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstd_instead_of_core.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,6 +1,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{def::Res, HirId, Path, PathSegment};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, symbol::kw, Span};\n \n@@ -94,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for StdReexports {\n     fn check_path(&mut self, cx: &LateContext<'tcx>, path: &Path<'tcx>, _: HirId) {\n         if let Res::Def(_, def_id) = path.res\n             && let Some(first_segment) = get_first_segment(path)\n+            && is_stable(cx, def_id)\n         {\n             let (lint, msg, help) = match first_segment.ident.name {\n                 sym::std => match cx.tcx.crate_name(def_id.krate) {\n@@ -146,3 +149,22 @@ fn get_first_segment<'tcx>(path: &Path<'tcx>) -> Option<&'tcx PathSegment<'tcx>>\n         _ => None,\n     }\n }\n+\n+/// Checks if all ancestors of `def_id` are stable, to avoid linting\n+/// [unstable moves](https://github.com/rust-lang/rust/pull/95956)\n+fn is_stable(cx: &LateContext<'_>, mut def_id: DefId) -> bool {\n+    loop {\n+        if cx\n+            .tcx\n+            .lookup_stability(def_id)\n+            .map_or(false, |stability| stability.is_unstable())\n+        {\n+            return false;\n+        }\n+\n+        match cx.tcx.opt_parent(def_id) {\n+            Some(parent) => def_id = parent,\n+            None => return true,\n+        }\n+    }\n+}"}, {"sha": "d356c99c8fc470c1cdd6371e3589acdbc3a8b8c4", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -284,7 +284,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n                     e.span,\n                     \"calling a slice of `as_bytes()` with `from_utf8` should be not necessary\",\n                     \"try\",\n-                    format!(\"Some(&{}[{}])\", snippet_app, snippet(cx, right.span, \"..\")),\n+                    format!(\"Some(&{snippet_app}[{}])\", snippet(cx, right.span, \"..\")),\n                     applicability\n                 )\n             }\n@@ -500,8 +500,8 @@ impl<'tcx> LateLintPass<'tcx> for TrimSplitWhitespace {\n                     cx,\n                     TRIM_SPLIT_WHITESPACE,\n                     trim_span.with_hi(split_ws_span.lo()),\n-                    &format!(\"found call to `str::{}` before `str::split_whitespace`\", trim_fn_name),\n-                    &format!(\"remove `{}()`\", trim_fn_name),\n+                    &format!(\"found call to `str::{trim_fn_name}` before `str::split_whitespace`\"),\n+                    &format!(\"remove `{trim_fn_name}()`\"),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "03324c66e8efcf9796fc9314c6f1ab961ad878c8", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for StrlenOnCStrings {\n                     span,\n                     \"using `libc::strlen` on a `CString` or `CStr` value\",\n                     \"try this\",\n-                    format!(\"{}.{}().len()\", val_name, method_name),\n+                    format!(\"{val_name}.{method_name}().len()\"),\n                     app,\n                 );\n             }"}, {"sha": "eef9bdc78494002515ec1e615bc726062eaaf1bd", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -326,8 +326,7 @@ fn replace_left_sugg(\n     applicability: &mut Applicability,\n ) -> String {\n     format!(\n-        \"{} {} {}\",\n-        left_suggestion,\n+        \"{left_suggestion} {} {}\",\n         binop.op.to_string(),\n         snippet_with_applicability(cx, binop.right.span, \"..\", applicability),\n     )\n@@ -340,10 +339,9 @@ fn replace_right_sugg(\n     applicability: &mut Applicability,\n ) -> String {\n     format!(\n-        \"{} {} {}\",\n+        \"{} {} {right_suggestion}\",\n         snippet_with_applicability(cx, binop.left.span, \"..\", applicability),\n         binop.op.to_string(),\n-        right_suggestion,\n     )\n }\n \n@@ -676,9 +674,8 @@ fn suggestion_with_swapped_ident(\n         }\n \n         Some(format!(\n-            \"{}{}{}\",\n+            \"{}{new_ident}{}\",\n             snippet_with_applicability(cx, expr.span.with_hi(current_ident.span.lo()), \"..\", applicability),\n-            new_ident,\n             snippet_with_applicability(cx, expr.span.with_lo(current_ident.span.hi()), \"..\", applicability),\n         ))\n     })"}, {"sha": "f46c21e126552f1681438ac10ae6399a2776a963", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -96,7 +96,7 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n                             cx,\n                             MANUAL_SWAP,\n                             span,\n-                            &format!(\"this looks like you are swapping elements of `{}` manually\", slice),\n+                            &format!(\"this looks like you are swapping elements of `{slice}` manually\"),\n                             \"try\",\n                             format!(\n                                 \"{}.swap({}, {})\",\n@@ -121,16 +121,16 @@ fn generate_swap_warning(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>, spa\n         cx,\n         MANUAL_SWAP,\n         span,\n-        &format!(\"this looks like you are swapping `{}` and `{}` manually\", first, second),\n+        &format!(\"this looks like you are swapping `{first}` and `{second}` manually\"),\n         |diag| {\n             diag.span_suggestion(\n                 span,\n                 \"try\",\n-                format!(\"{}::mem::swap({}, {})\", sugg, first.mut_addr(), second.mut_addr()),\n+                format!(\"{sugg}::mem::swap({}, {})\", first.mut_addr(), second.mut_addr()),\n                 applicability,\n             );\n             if !is_xor_based {\n-                diag.note(&format!(\"or maybe you should use `{}::mem::replace`?\", sugg));\n+                diag.note(&format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n             }\n         },\n     );\n@@ -182,7 +182,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                 let rhs0 = Sugg::hir_opt(cx, rhs0);\n                 let (what, lhs, rhs) = if let (Some(first), Some(second)) = (lhs0, rhs0) {\n                     (\n-                        format!(\" `{}` and `{}`\", first, second),\n+                        format!(\" `{first}` and `{second}`\"),\n                         first.mut_addr().to_string(),\n                         second.mut_addr().to_string(),\n                     )\n@@ -196,22 +196,19 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n                 span_lint_and_then(cx,\n                     ALMOST_SWAPPED,\n                     span,\n-                    &format!(\"this looks like you are trying to swap{}\", what),\n+                    &format!(\"this looks like you are trying to swap{what}\"),\n                     |diag| {\n                         if !what.is_empty() {\n                             diag.span_suggestion(\n                                 span,\n                                 \"try\",\n                                 format!(\n-                                    \"{}::mem::swap({}, {})\",\n-                                    sugg,\n-                                    lhs,\n-                                    rhs,\n+                                    \"{sugg}::mem::swap({lhs}, {rhs})\",\n                                 ),\n                                 Applicability::MaybeIncorrect,\n                             );\n                             diag.note(\n-                                &format!(\"or maybe you should use `{}::mem::replace`?\", sugg)\n+                                &format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n                             );\n                         }\n                     });"}, {"sha": "d085dda3582bee65c259b7827294b0a582e818e5", "filename": "clippy_lints/src/swap_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap_ptr_to_ref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -58,7 +58,7 @@ impl LateLintPass<'_> for SwapPtrToRef {\n                         let mut app = Applicability::MachineApplicable;\n                         let snip1 = snippet_with_context(cx, arg1_span.unwrap_or(arg1.span), ctxt, \"..\", &mut app).0;\n                         let snip2 = snippet_with_context(cx, arg2_span.unwrap_or(arg2.span), ctxt, \"..\", &mut app).0;\n-                        diag.span_suggestion(e.span, \"use ptr::swap\", format!(\"core::ptr::swap({}, {})\", snip1, snip2), app);\n+                        diag.span_suggestion(e.span, \"use ptr::swap\", format!(\"core::ptr::swap({snip1}, {snip2})\"), app);\n                     }\n                 }\n             );"}, {"sha": "2512500a6be73d1db226109368e558bcd553f9df", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -84,9 +84,9 @@ impl<'tcx> LateLintPass<'tcx> for ToDigitIsSome {\n                         \"use of `.to_digit(..).is_some()`\",\n                         \"try this\",\n                         if is_method_call {\n-                            format!(\"{}.is_digit({})\", char_arg_snip, radix_snip)\n+                            format!(\"{char_arg_snip}.is_digit({radix_snip})\")\n                         } else {\n-                            format!(\"char::is_digit({}, {})\", char_arg_snip, radix_snip)\n+                            format!(\"char::is_digit({char_arg_snip}, {radix_snip})\")\n                         },\n                         applicability,\n                     );"}, {"sha": "bb146441f87f93c0369776571d5691ac50308fcc", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -215,9 +215,8 @@ impl TraitBounds {\n                         .map(|(_, _, span)| snippet_with_applicability(cx, span, \"..\", &mut applicability))\n                         .join(\" + \");\n                     let hint_string = format!(\n-                        \"consider combining the bounds: `{}: {}`\",\n+                        \"consider combining the bounds: `{}: {trait_bounds}`\",\n                         snippet(cx, p.bounded_ty.span, \"_\"),\n-                        trait_bounds,\n                     );\n                     span_lint_and_help(\n                         cx,"}, {"sha": "c4b9d82fc735bb05cbacea7481aee9f8c31bebd6", "filename": "clippy_lints/src/transmute/crosspointer_transmute.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -13,10 +13,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                 cx,\n                 CROSSPOINTER_TRANSMUTE,\n                 e.span,\n-                &format!(\n-                    \"transmute from a type (`{}`) to the type that it points to (`{}`)\",\n-                    from_ty, to_ty\n-                ),\n+                &format!(\"transmute from a type (`{from_ty}`) to the type that it points to (`{to_ty}`)\"),\n             );\n             true\n         },\n@@ -25,10 +22,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                 cx,\n                 CROSSPOINTER_TRANSMUTE,\n                 e.span,\n-                &format!(\n-                    \"transmute from a type (`{}`) to a pointer to that type (`{}`)\",\n-                    from_ty, to_ty\n-                ),\n+                &format!(\"transmute from a type (`{from_ty}`) to a pointer to that type (`{to_ty}`)\"),\n             );\n             true\n         },"}, {"sha": "5ecba512b0fd64e9b0414f6dab5216031c37a989", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_FLOAT_TO_INT,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                 |diag| {\n                     let mut sugg = sugg::Sugg::hir(cx, arg, \"..\");\n \n@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(\n                         if let ExprKind::Lit(lit) = &arg.kind;\n                         if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n                         then {\n-                            let op = format!(\"{}{}\", sugg, float_ty.name_str()).into();\n+                            let op = format!(\"{sugg}{}\", float_ty.name_str()).into();\n                             match sugg {\n                                 sugg::Sugg::MaybeParen(_) => sugg = sugg::Sugg::MaybeParen(op),\n                                 _ => sugg = sugg::Sugg::NonParen(op)"}, {"sha": "58227c53de2f1c13c1015b3b6d4d5a8707079cee", "filename": "clippy_lints/src/transmute/transmute_int_to_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_INT_TO_BOOL,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `bool`\", from_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `bool`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let zero = sugg::Sugg::NonParen(Cow::from(\"0\"));"}, {"sha": "7d31c375f8cf2607c9ea00f45800138d07daaf62", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,7 +23,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_INT_TO_CHAR,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `char`\", from_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `char`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let arg = if let ty::Int(_) = from_ty.kind() {\n@@ -34,7 +34,7 @@ pub(super) fn check<'tcx>(\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using\",\n-                        format!(\"std::char::from_u32({}).unwrap()\", arg),\n+                        format!(\"std::char::from_u32({arg}).unwrap()\"),\n                         Applicability::Unspecified,\n                     );\n                 },"}, {"sha": "cc3422edbbf13333c6987f0611064e3d9ee6abb3", "filename": "clippy_lints/src/transmute/transmute_int_to_float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_INT_TO_FLOAT,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let arg = if let ty::Int(int_ty) = from_ty.kind() {\n@@ -36,7 +36,7 @@ pub(super) fn check<'tcx>(\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using\",\n-                        format!(\"{}::from_bits({})\", to_ty, arg),\n+                        format!(\"{to_ty}::from_bits({arg})\"),\n                         Applicability::Unspecified,\n                     );\n                 },"}, {"sha": "009d5a7c8ae182a7f0559cde03f2262ed62dfeaa", "filename": "clippy_lints/src/transmute/transmute_num_to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_num_to_bytes.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -31,13 +31,13 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_NUM_TO_BYTES,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     diag.span_suggestion(\n                         e.span,\n                         \"consider using `to_ne_bytes()`\",\n-                        format!(\"{}.to_ne_bytes()\", arg),\n+                        format!(\"{arg}.to_ne_bytes()\"),\n                         Applicability::Unspecified,\n                     );\n                 },"}, {"sha": "12d0b866e1c9bbcada978b4d065557fea93080d8", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -25,10 +25,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 TRANSMUTE_PTR_TO_REF,\n                 e.span,\n-                &format!(\n-                    \"transmute from a pointer type (`{}`) to a reference type (`{}`)\",\n-                    from_ty, to_ty\n-                ),\n+                &format!(\"transmute from a pointer type (`{from_ty}`) to a reference type (`{to_ty}`)\"),\n                 |diag| {\n                     let arg = sugg::Sugg::hir(cx, arg, \"..\");\n                     let (deref, cast) = if *mutbl == Mutability::Mut {\n@@ -41,26 +38,25 @@ pub(super) fn check<'tcx>(\n                     let sugg = if let Some(ty) = get_explicit_type(path) {\n                         let ty_snip = snippet_with_applicability(cx, ty.span, \"..\", &mut app);\n                         if meets_msrv(msrv, msrvs::POINTER_CAST) {\n-                            format!(\"{}{}.cast::<{}>()\", deref, arg.maybe_par(), ty_snip)\n+                            format!(\"{deref}{}.cast::<{ty_snip}>()\", arg.maybe_par())\n                         } else if from_ptr_ty.has_erased_regions() {\n-                            sugg::make_unop(deref, arg.as_ty(format!(\"{} () as {} {}\", cast, cast, ty_snip)))\n-                                .to_string()\n+                            sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {ty_snip}\"))).to_string()\n                         } else {\n-                            sugg::make_unop(deref, arg.as_ty(format!(\"{} {}\", cast, ty_snip))).to_string()\n+                            sugg::make_unop(deref, arg.as_ty(format!(\"{cast} {ty_snip}\"))).to_string()\n                         }\n                     } else if from_ptr_ty.ty == *to_ref_ty {\n                         if from_ptr_ty.has_erased_regions() {\n                             if meets_msrv(msrv, msrvs::POINTER_CAST) {\n-                                format!(\"{}{}.cast::<{}>()\", deref, arg.maybe_par(), to_ref_ty)\n+                                format!(\"{deref}{}.cast::<{to_ref_ty}>()\", arg.maybe_par())\n                             } else {\n-                                sugg::make_unop(deref, arg.as_ty(format!(\"{} () as {} {}\", cast, cast, to_ref_ty)))\n+                                sugg::make_unop(deref, arg.as_ty(format!(\"{cast} () as {cast} {to_ref_ty}\")))\n                                     .to_string()\n                             }\n                         } else {\n                             sugg::make_unop(deref, arg).to_string()\n                         }\n                     } else {\n-                        sugg::make_unop(deref, arg.as_ty(format!(\"{} {}\", cast, to_ref_ty))).to_string()\n+                        sugg::make_unop(deref, arg.as_ty(format!(\"{cast} {to_ref_ty}\"))).to_string()\n                     };\n \n                     diag.span_suggestion(e.span, \"try\", sugg, app);"}, {"sha": "afb7f2e13269648a14178a7a03253a7b3817732a", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -38,7 +38,7 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_BYTES_TO_STR,\n                     e.span,\n-                    &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                    &format!(\"transmute from a `{from_ty}` to a `{to_ty}`\"),\n                     \"consider using\",\n                     if const_context {\n                         format!(\"std::str::from_utf8_unchecked{postfix}({snippet})\")"}, {"sha": "1c99a02e6c71ebc85a016fb3f75b0193c8bbf791", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -75,10 +75,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n+                    &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -89,10 +89,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute to `{}` which has an undefined layout\", to_ty_orig),\n+                    &format!(\"transmute to `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty.peel_refs() {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n+                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -116,8 +116,7 @@ pub(super) fn check<'tcx>(\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n                     &format!(\n-                        \"transmute from `{}` to `{}`, both of which have an undefined layout\",\n-                        from_ty_orig, to_ty_orig\n+                        \"transmute from `{from_ty_orig}` to `{to_ty_orig}`, both of which have an undefined layout\"\n                     ),\n                     |diag| {\n                         if let Some(same_adt_did) = same_adt_did {\n@@ -127,10 +126,10 @@ pub(super) fn check<'tcx>(\n                             ));\n                         } else {\n                             if from_ty_orig.peel_refs() != from_ty {\n-                                diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                                diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                             }\n                             if to_ty_orig.peel_refs() != to_ty {\n-                                diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n+                                diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                             }\n                         }\n                     },\n@@ -145,10 +144,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute from `{}` which has an undefined layout\", from_ty_orig),\n+                    &format!(\"transmute from `{from_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if from_ty_orig.peel_refs() != from_ty {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", from_ty));\n+                            diag.note(&format!(\"the contained type `{from_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );\n@@ -162,10 +161,10 @@ pub(super) fn check<'tcx>(\n                     cx,\n                     TRANSMUTE_UNDEFINED_REPR,\n                     e.span,\n-                    &format!(\"transmute into `{}` which has an undefined layout\", to_ty_orig),\n+                    &format!(\"transmute into `{to_ty_orig}` which has an undefined layout\"),\n                     |diag| {\n                         if to_ty_orig.peel_refs() != to_ty {\n-                            diag.note(&format!(\"the contained type `{}` has an undefined layout\", to_ty));\n+                            diag.note(&format!(\"the contained type `{to_ty}` has an undefined layout\"));\n                         }\n                     },\n                 );"}, {"sha": "6b444922a7cc755b7907a28a12617dc6eacb2ede", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -21,10 +21,7 @@ pub(super) fn check<'tcx>(\n             cx,\n             TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n             e.span,\n-            &format!(\n-                \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n-                from_ty, to_ty\n-            ),\n+            &format!(\"transmute from `{from_ty}` to `{to_ty}` which could be expressed as a pointer cast instead\"),\n             |diag| {\n                 if let Some(arg) = sugg::Sugg::hir_opt(cx, arg) {\n                     let sugg = arg.as_ty(&to_ty.to_string()).to_string();"}, {"sha": "b1445311b711215f4c50ff0909d64a2c2578006d", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,10 +37,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                     cx,\n                     UNSOUND_COLLECTION_TRANSMUTE,\n                     e.span,\n-                    &format!(\n-                        \"transmute from `{}` to `{}` with mismatched layout is unsound\",\n-                        from_ty, to_ty\n-                    ),\n+                    &format!(\"transmute from `{from_ty}` to `{to_ty}` with mismatched layout is unsound\"),\n                 );\n                 true\n             } else {"}, {"sha": "f919bbd5afca3f823c9458c815ae7f8fab5e9fbe", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(\n                 cx,\n                 USELESS_TRANSMUTE,\n                 e.span,\n-                &format!(\"transmute from a type (`{}`) to itself\", from_ty),\n+                &format!(\"transmute from a type (`{from_ty}`) to itself\"),\n             );\n             true\n         },"}, {"sha": "b567d92230bb1cbe4085a444dbb6843b7b7a81bc", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,8 +1,11 @@\n use rustc_hir::Expr;\n+use rustc_hir_analysis::check::{\n+    cast::{self, CastCheckResult},\n+    FnCtxt, Inherited,\n+};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n-use rustc_hir_analysis::check::{cast::{self, CastCheckResult}, FnCtxt, Inherited};\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment"}, {"sha": "d1965565b9261a3462a1734d905a56afdd7dc038", "filename": "clippy_lints/src/transmute/wrong_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -13,7 +13,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty\n                 cx,\n                 WRONG_TRANSMUTE,\n                 e.span,\n-                &format!(\"transmute from a `{}` to a pointer\", from_ty),\n+                &format!(\"transmute from a `{from_ty}` to a pointer\"),\n             );\n             true\n         },"}, {"sha": "9c6629958401b24231f7852b77c20ec9dc53d16f", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -49,15 +49,15 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                     let inner_snippet = snippet(cx, inner.span, \"..\");\n                     let suggestion = match &inner.kind {\n                         TyKind::TraitObject(bounds, lt_bound, _) if bounds.len() > 1 || !lt_bound.is_elided() => {\n-                            format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            format!(\"&{ltopt}({})\", &inner_snippet)\n                         },\n                         TyKind::Path(qpath)\n                             if get_bounds_if_impl_trait(cx, qpath, inner.hir_id)\n                                 .map_or(false, |bounds| bounds.len() > 1) =>\n                         {\n-                            format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            format!(\"&{ltopt}({})\", &inner_snippet)\n                         },\n-                        _ => format!(\"&{}{}\", ltopt, &inner_snippet),\n+                        _ => format!(\"&{ltopt}{}\", &inner_snippet),\n                     };\n                     span_lint_and_sugg(\n                         cx,"}, {"sha": "08020ce663817e1f2b8a60871d206068740d7474", "filename": "clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -16,7 +16,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 _ => \"<..>\",\n             };\n \n-            let box_content = format!(\"{outer}{generic}\", outer = item_type);\n+            let box_content = format!(\"{item_type}{generic}\");\n             span_lint_and_help(\n                 cx,\n                 BOX_COLLECTION,"}, {"sha": "b81d2c1cbc484b30131e14c02d85954c827effe5", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -352,8 +352,10 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         match item.kind {\n             ImplItemKind::Const(ty, _) => {\n-                let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n-                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()).def_id)\n+                let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx\n+                    .tcx\n+                    .hir()\n+                    .find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()).def_id)\n                 {\n                     matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n                 } else {"}, {"sha": "6b9de64e24c93875b41de0b5fdd09de632acdcf1", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 hir_ty.span,\n                 \"usage of `Rc<T>` when T is a buffer type\",\n                 \"try\",\n-                format!(\"Rc<{}>\", alternate),\n+                format!(\"Rc<{alternate}>\"),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n@@ -57,7 +57,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 hir_ty.span,\n                 \"usage of `Arc<T>` when T is a buffer type\",\n                 \"try\",\n-                format!(\"Arc<{}>\", alternate),\n+                format!(\"Arc<{alternate}>\"),\n                 Applicability::MachineApplicable,\n             );\n         } else if let Some(ty) = qpath_generic_tys(qpath).next() {"}, {"sha": "ecb67200539089276fd008fabd402e02c335ae2b", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -3,9 +3,9 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::{path_def_id, qpath_generic_tys};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n use super::{utils, REDUNDANT_ALLOCATION};\n \n@@ -27,13 +27,11 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             cx,\n             REDUNDANT_ALLOCATION,\n             hir_ty.span,\n-            &format!(\"usage of `{}<{}>`\", outer_sym, generic_snippet),\n+            &format!(\"usage of `{outer_sym}<{generic_snippet}>`\"),\n             |diag| {\n-                diag.span_suggestion(hir_ty.span, \"try\", format!(\"{}\", generic_snippet), applicability);\n+                diag.span_suggestion(hir_ty.span, \"try\", format!(\"{generic_snippet}\"), applicability);\n                 diag.note(&format!(\n-                    \"`{generic}` is already a pointer, `{outer}<{generic}>` allocates a pointer on the heap\",\n-                    outer = outer_sym,\n-                    generic = generic_snippet\n+                    \"`{generic_snippet}` is already a pointer, `{outer_sym}<{generic_snippet}>` allocates a pointer on the heap\"\n                 ));\n             },\n         );\n@@ -72,19 +70,16 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             cx,\n             REDUNDANT_ALLOCATION,\n             hir_ty.span,\n-            &format!(\"usage of `{}<{}<{}>>`\", outer_sym, inner_sym, generic_snippet),\n+            &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n                 diag.span_suggestion(\n                     hir_ty.span,\n                     \"try\",\n-                    format!(\"{}<{}>\", outer_sym, generic_snippet),\n+                    format!(\"{outer_sym}<{generic_snippet}>\"),\n                     applicability,\n                 );\n                 diag.note(&format!(\n-                    \"`{inner}<{generic}>` is already on the heap, `{outer}<{inner}<{generic}>>` makes an extra allocation\",\n-                    outer = outer_sym,\n-                    inner = inner_sym,\n-                    generic = generic_snippet\n+                    \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n             },\n         );\n@@ -94,19 +89,13 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n             cx,\n             REDUNDANT_ALLOCATION,\n             hir_ty.span,\n-            &format!(\"usage of `{}<{}<{}>>`\", outer_sym, inner_sym, generic_snippet),\n+            &format!(\"usage of `{outer_sym}<{inner_sym}<{generic_snippet}>>`\"),\n             |diag| {\n                 diag.note(&format!(\n-                    \"`{inner}<{generic}>` is already on the heap, `{outer}<{inner}<{generic}>>` makes an extra allocation\",\n-                    outer = outer_sym,\n-                    inner = inner_sym,\n-                    generic = generic_snippet\n+                    \"`{inner_sym}<{generic_snippet}>` is already on the heap, `{outer_sym}<{inner_sym}<{generic_snippet}>>` makes an extra allocation\"\n                 ));\n                 diag.help(&format!(\n-                    \"consider using just `{outer}<{generic}>` or `{inner}<{generic}>`\",\n-                    outer = outer_sym,\n-                    inner = inner_sym,\n-                    generic = generic_snippet\n+                    \"consider using just `{outer_sym}<{generic_snippet}>` or `{inner_sym}<{generic_snippet}>`\"\n                 ));\n             },\n         );"}, {"sha": "6c329d8cdf196a9b4311f6c242b0fc5a1c153372", "filename": "clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -4,11 +4,11 @@ use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::LateContext;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::TypeVisitable;\n use rustc_span::symbol::sym;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n use super::VEC_BOX;\n "}, {"sha": "bde7c318f448cc4ed2c612e62464e8189735ce9c", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -2,6 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher::{get_vec_init_kind, VecInitKind};\n use clippy_utils::ty::{is_type_diagnostic_item, is_uninit_value_valid_for_ty};\n use clippy_utils::{is_lint_allowed, path_to_local_id, peel_hir_expr_while, SpanlessEq};\n+use rustc_ast::ast::LitKind;\n use rustc_hir::{Block, Expr, ExprKind, HirId, PatKind, PathSegment, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -211,9 +212,12 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n         }\n     });\n     match expr.kind {\n-        ExprKind::MethodCall(path, self_expr, [_], _) => {\n+        ExprKind::MethodCall(path, self_expr, [arg], _) => {\n             let self_type = cx.typeck_results().expr_ty(self_expr).peel_refs();\n-            if is_type_diagnostic_item(cx, self_type, sym::Vec) && path.ident.name.as_str() == \"set_len\" {\n+            if is_type_diagnostic_item(cx, self_type, sym::Vec)\n+                && path.ident.name.as_str() == \"set_len\"\n+                && !is_literal_zero(arg)\n+            {\n                 Some((self_expr, expr.span))\n             } else {\n                 None\n@@ -222,3 +226,13 @@ fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Opt\n         _ => None,\n     }\n }\n+\n+fn is_literal_zero(arg: &Expr<'_>) -> bool {\n+    if let ExprKind::Lit(lit) = &arg.kind\n+        && let LitKind::Int(0, _) = lit.node\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "57aff5367dd155af70592424eaf95cc1355093d3", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -157,8 +157,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n                                 span,\n                                 &format!(\n                                     \"this closure returns \\\n-                                   the unit type which also implements {}\",\n-                                    trait_name\n+                                   the unit type which also implements {trait_name}\"\n                                 ),\n                             );\n                         },\n@@ -169,8 +168,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitReturnExpectingOrd {\n                                 span,\n                                 &format!(\n                                     \"this closure returns \\\n-                                   the unit type which also implements {}\",\n-                                    trait_name\n+                                   the unit type which also implements {trait_name}\"\n                                 ),\n                                 Some(last_semi),\n                                 \"probably caused by this trailing semicolon\","}, {"sha": "f6d3fb00f4ee5220926e4ffe3c261fc1d9a4a42f", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -74,7 +74,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n         cx,\n         UNIT_ARG,\n         expr.span,\n-        &format!(\"passing {}unit value{} to a function\", singular, plural),\n+        &format!(\"passing {singular}unit value{plural} to a function\"),\n         |db| {\n             let mut or = \"\";\n             args_to_recover\n@@ -129,7 +129,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n \n                 if arg_snippets_without_empty_blocks.is_empty() {\n                     db.multipart_suggestion(\n-                        &format!(\"use {}unit literal{} instead\", singular, plural),\n+                        &format!(\"use {singular}unit literal{plural} instead\"),\n                         args_to_recover\n                             .iter()\n                             .map(|arg| (arg.span, \"()\".to_string()))\n@@ -143,8 +143,7 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                     db.span_suggestion(\n                         expr.span,\n                         &format!(\n-                            \"{}move the expression{} in front of the call and replace {} with the unit literal `()`\",\n-                            or, empty_or_s, it_or_them\n+                            \"{or}move the expression{empty_or_s} in front of the call and replace {it_or_them} with the unit literal `()`\"\n                         ),\n                         sugg,\n                         applicability,"}, {"sha": "226495dcbda34ea2098281eb3ec1bd5a4711e290", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 cx,\n                 UNIT_CMP,\n                 macro_call.span,\n-                &format!(\"`{}` of unit values detected. This will always {}\", macro_name, result),\n+                &format!(\"`{macro_name}` of unit values detected. This will always {result}\"),\n             );\n         }\n         return;\n@@ -40,9 +40,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 UNIT_CMP,\n                 expr.span,\n                 &format!(\n-                    \"{}-comparison of unit values detected. This will always be {}\",\n-                    op.as_str(),\n-                    result\n+                    \"{}-comparison of unit values detected. This will always be {result}\",\n+                    op.as_str()\n                 ),\n             );\n         }"}, {"sha": "bc0dd263d88ab2fdf0234097a2c6894609de7630", "filename": "clippy_lints/src/unnecessary_self_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -57,7 +57,7 @@ impl EarlyLintPass for UnnecessarySelfImports {\n                             format!(\n                                 \"{}{};\",\n                                 last_segment.ident,\n-                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {}\", alias) } else { String::new() },\n+                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "83ef3b0fac8741fb6f46cf8f1c2724f15ddba649", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -153,11 +153,8 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n                 )\n             } else {\n                 (\n-                    format!(\n-                        \"this function's return value is unnecessarily wrapped by `{}`\",\n-                        return_type_label\n-                    ),\n-                    format!(\"remove `{}` from the return type...\", return_type_label),\n+                    format!(\"this function's return value is unnecessarily wrapped by `{return_type_label}`\"),\n+                    format!(\"remove `{return_type_label}` from the return type...\"),\n                     inner_type.to_string(),\n                     \"...and then change returning expressions\",\n                 )"}, {"sha": "32cd468120141ec5a4c79a5b1dc1c0f946ab906c", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -65,10 +65,7 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n             cx,\n             UNSAFE_REMOVED_FROM_NAME,\n             span,\n-            &format!(\n-                \"removed `unsafe` from the name of `{}` in use as `{}`\",\n-                old_str, new_str\n-            ),\n+            &format!(\"removed `unsafe` from the name of `{old_str}` in use as `{new_str}`\"),\n         );\n     }\n }"}, {"sha": "3164937293b6893e7e1ecaca177505494b3623d1", "filename": "clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_rounding.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -58,8 +58,8 @@ impl EarlyLintPass for UnusedRounding {\n                 cx,\n                 UNUSED_ROUNDING,\n                 expr.span,\n-                &format!(\"used the `{}` method with a whole number float\", method_name),\n-                &format!(\"remove the `{}` method call\", method_name),\n+                &format!(\"used the `{method_name}` method with a whole number float\"),\n+                &format!(\"remove the `{method_name}` method call\"),\n                 float,\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "ea878043c04e3b789e351f99796d55b590d242d3", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -257,9 +257,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             expr.hir_id,\n                             expr.span,\n                             &format!(\n-                                \"called `{}` on `{}` after checking its variant with `{}`\",\n+                                \"called `{}` on `{unwrappable_variable_name}` after checking its variant with `{}`\",\n                                 method_name.ident.name,\n-                                unwrappable_variable_name,\n                                 unwrappable.check_name.ident.as_str(),\n                             ),\n                             |diag| {\n@@ -268,9 +267,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                                         unwrappable.check.span.with_lo(unwrappable.if_expr.span.lo()),\n                                         \"try\",\n                                         format!(\n-                                            \"if let {} = {}\",\n-                                            suggested_pattern,\n-                                            unwrappable_variable_name,\n+                                            \"if let {suggested_pattern} = {unwrappable_variable_name}\",\n                                         ),\n                                         // We don't track how the unwrapped value is used inside the\n                                         // block or suggest deleting the unwrap, so we can't offer a"}, {"sha": "2ab58f06d6b8d714f62d1c2cdd6b7ff151f097c7", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -93,7 +93,7 @@ fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n             cx,\n             UPPER_CASE_ACRONYMS,\n             span,\n-            &format!(\"name `{}` contains a capitalized acronym\", ident),\n+            &format!(\"name `{ident}` contains a capitalized acronym\"),\n             \"consider making the acronym lowercase, except the initial letter\",\n             corrected,\n             Applicability::MaybeIncorrect,"}, {"sha": "fadf49990acda7c4c7746263c00a38997da6168a", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -12,11 +12,11 @@ use rustc_hir::{\n     Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Pat, PatKind, Path, QPath,\n     TyKind,\n };\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "50c5a832430af1fb424a184fd01539ec83be2f75", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            &format!(\"useless conversion to the same type: `{}`\", b),\n+                            &format!(\"useless conversion to the same type: `{b}`\"),\n                             \"consider removing `.into()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            &format!(\"useless conversion to the same type: `{}`\", b),\n+                            &format!(\"useless conversion to the same type: `{b}`\"),\n                             \"consider removing `.into_iter()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -118,7 +118,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            &format!(\"useless conversion to the same type: `{}`\", b),\n+                            &format!(\"useless conversion to the same type: `{b}`\"),\n                             None,\n                             \"consider removing `.try_into()`\",\n                         );\n@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    &format!(\"useless conversion to the same type: `{}`\", b),\n+                                    &format!(\"useless conversion to the same type: `{b}`\"),\n                                     None,\n                                     &hint,\n                                 );\n@@ -165,7 +165,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    &format!(\"useless conversion to the same type: `{}`\", b),\n+                                    &format!(\"useless conversion to the same type: `{b}`\"),\n                                     &sugg_msg,\n                                     sugg.to_string(),\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "e069de8cb5c7e5148cba5f9789f9e98809c20dde", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -739,7 +739,7 @@ fn path_to_string(path: &QPath<'_>) -> String {\n                     *s += \", \";\n                     write!(s, \"{:?}\", segment.ident.as_str()).unwrap();\n                 },\n-                other => write!(s, \"/* unimplemented: {:?}*/\", other).unwrap(),\n+                other => write!(s, \"/* unimplemented: {other:?}*/\").unwrap(),\n             },\n             QPath::LangItem(..) => panic!(\"path_to_string: called for lang item qpath\"),\n         }"}, {"sha": "a8265b50f273f35fa69b3aed06c672e19be6de4d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -213,7 +213,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT, DEPRECATED_CFG_ATTR, INDEX_REFUTABLE_SLICE, MAP_CLONE, BORROW_AS_PTR, MANUAL_BITS, ERR_EXPECT, CAST_ABS_TO_UNSIGNED, UNINLINED_FORMAT_ARGS.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),\n@@ -482,16 +482,13 @@ pub fn format_error(error: Box<dyn Error>) -> String {\n                     let field = fields.get(index).copied().unwrap_or_default();\n                     write!(\n                         msg,\n-                        \"{:separator_width$}{:field_width$}\",\n-                        \" \",\n-                        field,\n-                        separator_width = SEPARATOR_WIDTH,\n-                        field_width = column_width\n+                        \"{:SEPARATOR_WIDTH$}{field:column_width$}\",\n+                        \" \"\n                     )\n                     .unwrap();\n                 }\n             }\n-            write!(msg, \"\\n{}\", suffix).unwrap();\n+            write!(msg, \"\\n{suffix}\").unwrap();\n             msg\n         } else {\n             s"}, {"sha": "bc3f920a087aeeeb8b096fc1f48a1557903b5522", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,6 +23,7 @@ use rustc_hir::{\n     BinOpKind, Block, Closure, Expr, ExprKind, HirId, Item, Local, MutTy, Mutability, Node, Path, Stmt, StmtKind, Ty,\n     TyKind, UnOp,\n };\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::interpret::ConstValue;\n@@ -32,7 +33,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Symbol;\n use rustc_span::{sym, BytePos, Span};\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n use std::borrow::{Borrow, Cow};\n \n@@ -530,7 +530,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n                     cx,\n                     LINT_WITHOUT_LINT_PASS,\n                     lint_span,\n-                    &format!(\"the lint `{}` is not added to any `LintPass`\", lint_name),\n+                    &format!(\"the lint `{lint_name}` is not added to any `LintPass`\"),\n                 );\n             }\n         }\n@@ -666,7 +666,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n                     path.ident.span,\n                     \"usage of a compiler lint function\",\n                     None,\n-                    &format!(\"please use the Clippy variant of this function: `{}`\", sugg),\n+                    &format!(\"please use the Clippy variant of this function: `{sugg}`\"),\n                 );\n             }\n         }\n@@ -854,13 +854,8 @@ fn suggest_help(\n         \"this call is collapsible\",\n         \"collapse into\",\n         format!(\n-            \"span_lint_and_help({}, {}, {}, {}, {}, {})\",\n-            and_then_snippets.cx,\n-            and_then_snippets.lint,\n-            and_then_snippets.span,\n-            and_then_snippets.msg,\n-            &option_span,\n-            help\n+            \"span_lint_and_help({}, {}, {}, {}, {}, {help})\",\n+            and_then_snippets.cx, and_then_snippets.lint, and_then_snippets.span, and_then_snippets.msg, &option_span,\n         ),\n         Applicability::MachineApplicable,\n     );\n@@ -886,13 +881,8 @@ fn suggest_note(\n         \"this call is collapsible\",\n         \"collapse into\",\n         format!(\n-            \"span_lint_and_note({}, {}, {}, {}, {}, {})\",\n-            and_then_snippets.cx,\n-            and_then_snippets.lint,\n-            and_then_snippets.span,\n-            and_then_snippets.msg,\n-            note_span,\n-            note\n+            \"span_lint_and_note({}, {}, {}, {}, {note_span}, {note})\",\n+            and_then_snippets.cx, and_then_snippets.lint, and_then_snippets.span, and_then_snippets.msg,\n         ),\n         Applicability::MachineApplicable,\n     );\n@@ -927,7 +917,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n                     expr.span,\n                     \"usage of `clippy_utils::ty::match_type()` on a type diagnostic item\",\n                     \"try\",\n-                    format!(\"clippy_utils::ty::is_type_diagnostic_item({}, {}, sym::{})\", cx_snippet, ty_snippet, item_name),\n+                    format!(\"clippy_utils::ty::is_type_diagnostic_item({cx_snippet}, {ty_snippet}, sym::{item_name})\"),\n                     Applicability::MaybeIncorrect,\n                 );\n             }"}, {"sha": "c84191bb01034bf0c18b426af5e35805e2d9b2c4", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 33, "deletions": 64, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -64,46 +64,6 @@ const DEFAULT_LINT_LEVELS: &[(&str, &str)] = &[\n /// This prefix is in front of the lint groups in the lint store. The prefix will be trimmed\n /// to only keep the actual lint group in the output.\n const CLIPPY_LINT_GROUP_PREFIX: &str = \"clippy::\";\n-\n-/// This template will be used to format the configuration section in the lint documentation.\n-/// The `configurations` parameter will be replaced with one or multiple formatted\n-/// `ClippyConfiguration` instances. See `CONFIGURATION_VALUE_TEMPLATE` for further customizations\n-macro_rules! CONFIGURATION_SECTION_TEMPLATE {\n-    () => {\n-        r#\"\n-### Configuration\n-This lint has the following configuration variables:\n-\n-{configurations}\n-\"#\n-    };\n-}\n-/// This template will be used to format an individual `ClippyConfiguration` instance in the\n-/// lint documentation.\n-///\n-/// The format function will provide strings for the following parameters: `name`, `ty`, `doc` and\n-/// `default`\n-macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n-    () => {\n-        \"* `{name}`: `{ty}`: {doc} (defaults to `{default}`)\\n\"\n-    };\n-}\n-\n-macro_rules! RENAMES_SECTION_TEMPLATE {\n-    () => {\n-        r#\"\n-### Past names\n-\n-{names}\n-\"#\n-    };\n-}\n-macro_rules! RENAME_VALUE_TEMPLATE {\n-    () => {\n-        \"* `{name}`\\n\"\n-    };\n-}\n-\n const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n@@ -205,7 +165,16 @@ impl MetadataCollector {\n             .filter(|config| config.lints.iter().any(|lint| lint == lint_name))\n             .map(ToString::to_string)\n             .reduce(|acc, x| acc + &x)\n-            .map(|configurations| format!(CONFIGURATION_SECTION_TEMPLATE!(), configurations = configurations))\n+            .map(|configurations| {\n+                format!(\n+                    r#\"\n+### Configuration\n+This lint has the following configuration variables:\n+\n+{configurations}\n+\"#\n+                )\n+            })\n     }\n }\n \n@@ -291,16 +260,13 @@ fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Pa\n                             continue;\n                         }\n \n-                        panic!(\"lint `{}` has an unterminated code block\", lint_name)\n+                        panic!(\"lint `{lint_name}` has an unterminated code block\")\n                     }\n \n                     break;\n                 },\n                 Some(line) if line.trim_start() == \"{{produces}}\" => {\n-                    panic!(\n-                        \"lint `{}` has marker {{{{produces}}}} with an ignored or missing code block\",\n-                        lint_name\n-                    )\n+                    panic!(\"lint `{lint_name}` has marker {{{{produces}}}} with an ignored or missing code block\")\n                 },\n                 Some(line) => {\n                     let line = line.trim();\n@@ -319,7 +285,7 @@ fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Pa\n             match lines.next() {\n                 Some(line) if line.trim_start() == \"```\" => break,\n                 Some(line) => example.push(line),\n-                None => panic!(\"lint `{}` has an unterminated code block\", lint_name),\n+                None => panic!(\"lint `{lint_name}` has an unterminated code block\"),\n             }\n         }\n \n@@ -336,10 +302,9 @@ fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Pa\n                             <summary>Produces</summary>\\n\\\n                             \\n\\\n                             ```text\\n\\\n-                            {}\\n\\\n+                            {output}\\n\\\n                             ```\\n\\\n-                        </details>\",\n-                            output\n+                        </details>\"\n                         ),\n                     );\n \n@@ -394,7 +359,7 @@ fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root\n         panic!(\"failed to write to `{}`: {e}\", file.as_path().to_string_lossy());\n     }\n \n-    let prefixed_name = format!(\"{}{lint_name}\", CLIPPY_LINT_GROUP_PREFIX);\n+    let prefixed_name = format!(\"{CLIPPY_LINT_GROUP_PREFIX}{lint_name}\");\n \n     let mut cmd = Command::new(\"cargo\");\n \n@@ -417,7 +382,7 @@ fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root\n     let output = cmd\n         .arg(file.as_path())\n         .output()\n-        .unwrap_or_else(|e| panic!(\"failed to run `{:?}`: {e}\", cmd));\n+        .unwrap_or_else(|e| panic!(\"failed to run `{cmd:?}`: {e}\"));\n \n     let tmp_file_path = file.to_string_lossy();\n     let stderr = std::str::from_utf8(&output.stderr).unwrap();\n@@ -441,8 +406,7 @@ fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root\n         let rendered: Vec<&str> = msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n         let non_json: Vec<&str> = stderr.lines().filter(|line| !line.starts_with('{')).collect();\n         panic!(\n-            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n-            lint_name,\n+            \"did not find lint `{lint_name}` in output of example, got:\\n{}\\n{}\",\n             non_json.join(\"\\n\"),\n             rendered.join(\"\\n\")\n         );\n@@ -588,13 +552,10 @@ fn to_kebab(config_name: &str) -> String {\n \n impl fmt::Display for ClippyConfiguration {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n+        writeln!(\n             f,\n-            CONFIGURATION_VALUE_TEMPLATE!(),\n-            name = self.name,\n-            ty = self.config_type,\n-            doc = self.doc,\n-            default = self.default\n+            \"* `{}`: `{}`: {} (defaults to `{}`)\",\n+            self.name, self.config_type, self.doc, self.default\n         )\n     }\n }\n@@ -811,7 +772,7 @@ fn get_lint_group_and_level_or_lint(\n                 lint_collection_error_item(\n                     cx,\n                     item,\n-                    &format!(\"Unable to determine lint level for found group `{}`\", group),\n+                    &format!(\"Unable to determine lint level for found group `{group}`\"),\n                 );\n                 None\n             }\n@@ -869,7 +830,7 @@ fn collect_renames(lints: &mut Vec<LintMetadata>) {\n                         if name == lint_name;\n                         if let Some(past_name) = k.strip_prefix(CLIPPY_LINT_GROUP_PREFIX);\n                         then {\n-                            write!(collected, RENAME_VALUE_TEMPLATE!(), name = past_name).unwrap();\n+                            writeln!(collected, \"* `{past_name}`\").unwrap();\n                             names.push(past_name.to_string());\n                         }\n                     }\n@@ -882,7 +843,15 @@ fn collect_renames(lints: &mut Vec<LintMetadata>) {\n         }\n \n         if !collected.is_empty() {\n-            write!(&mut lint.docs, RENAMES_SECTION_TEMPLATE!(), names = collected).unwrap();\n+            write!(\n+                &mut lint.docs,\n+                r#\"\n+### Past names\n+\n+{collected}\n+\"#\n+            )\n+            .unwrap();\n         }\n     }\n }\n@@ -895,7 +864,7 @@ fn lint_collection_error_item(cx: &LateContext<'_>, item: &Item<'_>, message: &s\n         cx,\n         INTERNAL_METADATA_COLLECTOR,\n         item.ident.span,\n-        &format!(\"metadata collection error for `{}`: {}\", item.ident.name, message),\n+        &format!(\"metadata collection error for `{}`: {message}\", item.ident.name),\n     );\n }\n "}, {"sha": "301eed9a1fbfe72d995d687ed792358b45e4b6bf", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -173,7 +173,7 @@ impl LateLintPass<'_> for WildcardImports {\n                 let sugg = if braced_glob {\n                     imports_string\n                 } else {\n-                    format!(\"{}::{}\", import_source_snippet, imports_string)\n+                    format!(\"{import_source_snippet}::{imports_string}\")\n                 };\n \n                 let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {"}, {"sha": "3d3686604b72a1711039551318fb2de705091369", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::macros::{root_macro_call_first_node, FormatArgsExpn, MacroCall};\n-use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n use rustc_ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirIdMap, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{sym, BytePos, Span};\n+use rustc_span::{sym, BytePos};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -542,10 +542,3 @@ fn conservative_unescape(literal: &str) -> Result<String, UnescapeErr> {\n \n     if err { Err(UnescapeErr::Lint) } else { Ok(unescaped) }\n }\n-\n-// Expand from `writeln!(o, \"\")` to `writeln!(o, \"\")`\n-//                          ^^                 ^^^^\n-fn expand_past_previous_comma(cx: &LateContext<'_>, span: Span) -> Span {\n-    let extended = cx.sess().source_map().span_extend_to_prev_char(span, ',', true);\n-    extended.with_lo(extended.lo() - BytePos(1))\n-}"}, {"sha": "9b3de35dbd3cded6bc3e2073f7b6d3aedff2cd56", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -57,8 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for ZeroDiv {\n                     \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     None,\n                     &format!(\n-                        \"consider using `{}::NAN` if you would like a constant representing NaN\",\n-                        float_type,\n+                        \"consider using `{float_type}::NAN` if you would like a constant representing NaN\",\n                     ),\n                 );\n             }"}, {"sha": "6cf2a955fd5c638b4eba415bbc29e6a629d51cf0", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -2,12 +2,12 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{is_normalizable, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::{self as hir, HirId, ItemKind, Node};\n+use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::layout::LayoutOf as _;\n use rustc_middle::ty::{Adt, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n-use rustc_hir_analysis::hir_ty_to_ty;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -69,10 +69,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n \n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-    let second_parent_id = cx\n-        .tcx\n-        .hir()\n-        .get_parent_item(parent_id.into()).def_id;\n+    let second_parent_id = cx.tcx.hir().get_parent_item(parent_id.into()).def_id;\n     if let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(second_parent_id) {\n         if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;"}, {"sha": "d9b22664fd25b5ce5d5d7956a6142022ddf597be", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -131,12 +131,12 @@ pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'s\n         match attr.style {\n             ast::AttrStyle::Inner if unique_attr.is_none() => unique_attr = Some(attr.clone()),\n             ast::AttrStyle::Inner => {\n-                sess.struct_span_err(attr.span, &format!(\"`{}` is defined multiple times\", name))\n+                sess.struct_span_err(attr.span, &format!(\"`{name}` is defined multiple times\"))\n                     .span_note(unique_attr.as_ref().unwrap().span, \"first definition found here\")\n                     .emit();\n             },\n             ast::AttrStyle::Outer => {\n-                sess.span_err(attr.span, &format!(\"`{}` cannot be an outer attribute\", name));\n+                sess.span_err(attr.span, &format!(\"`{name}` cannot be an outer attribute\"));\n             },\n         }\n     }"}, {"sha": "12e53e07c97c96df6a42df13bf1c48ce712a93b0", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -18,12 +18,11 @@ fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n             diag.help(&format!(\n-                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n+                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{lint}\",\n                 &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n                     // extract just major + minor version and ignore patch versions\n                     format!(\"rust-{}\", n.rsplit_once('.').unwrap().1)\n-                }),\n-                lint\n+                })\n             ));\n         }\n     }"}, {"sha": "c2c52d08a3c127ed13626d00ac303a8da4171cd7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -23,6 +23,7 @@ extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;\n+extern crate rustc_hir_analysis;\n extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n@@ -32,7 +33,6 @@ extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n extern crate rustc_trait_selection;\n-extern crate rustc_hir_analysis;\n \n #[macro_use]\n pub mod sym_helper;\n@@ -120,7 +120,7 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n         return Some(version);\n     } else if let Some(sess) = sess {\n         if let Some(span) = span {\n-            sess.span_err(span, &format!(\"`{}` is not a valid Rust version\", msrv));\n+            sess.span_err(span, &format!(\"`{msrv}` is not a valid Rust version\"));\n         }\n     }\n     None\n@@ -1386,8 +1386,8 @@ pub fn is_integer_literal(expr: &Expr<'_>, value: u128) -> bool {\n /// Examples of coercions can be found in the Nomicon at\n /// <https://doc.rust-lang.org/nomicon/coercions.html>.\n ///\n-/// See `rustc_middle::ty::adjustment::Adjustment` and `rustc_hir_analysis::check::coercion` for more\n-/// information on adjustments and coercions.\n+/// See `rustc_middle::ty::adjustment::Adjustment` and `rustc_hir_analysis::check::coercion` for\n+/// more information on adjustments and coercions.\n pub fn is_adjusted(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     cx.typeck_results().adjustments().get(e.hir_id).is_some()\n }"}, {"sha": "079c8f50f12a2076039f6a119d52731e6abb6cbd", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -392,7 +392,7 @@ impl FormatString {\n         unescape_literal(inner, mode, &mut |_, ch| match ch {\n             Ok(ch) => unescaped.push(ch),\n             Err(e) if !e.is_fatal() => (),\n-            Err(e) => panic!(\"{:?}\", e),\n+            Err(e) => panic!(\"{e:?}\"),\n         });\n \n         let mut parts = Vec::new();\n@@ -545,19 +545,32 @@ fn span_from_inner(base: SpanData, inner: rpf::InnerSpan) -> Span {\n     )\n }\n \n+/// How a format parameter is used in the format string\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum FormatParamKind {\n     /// An implicit parameter , such as `{}` or `{:?}`.\n     Implicit,\n-    /// A parameter with an explicit number, or an asterisk precision. e.g. `{1}`, `{0:?}`,\n-    /// `{:.0$}` or `{:.*}`.\n+    /// A parameter with an explicit number, e.g. `{1}`, `{0:?}`, or `{:.0$}`\n     Numbered,\n+    /// A parameter with an asterisk precision. e.g. `{:.*}`.\n+    Starred,\n     /// A named parameter with a named `value_arg`, such as the `x` in `format!(\"{x}\", x = 1)`.\n     Named(Symbol),\n     /// An implicit named parameter, such as the `y` in `format!(\"{y}\")`.\n     NamedInline(Symbol),\n }\n \n+/// Where a format parameter is being used in the format string\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum FormatParamUsage {\n+    /// Appears as an argument, e.g. `format!(\"{}\", foo)`\n+    Argument,\n+    /// Appears as a width, e.g. `format!(\"{:width$}\", foo, width = 1)`\n+    Width,\n+    /// Appears as a precision, e.g. `format!(\"{:.precision$}\", foo, precision = 1)`\n+    Precision,\n+}\n+\n /// A `FormatParam` is any place in a `FormatArgument` that refers to a supplied value, e.g.\n ///\n /// ```\n@@ -573,6 +586,8 @@ pub struct FormatParam<'tcx> {\n     pub value: &'tcx Expr<'tcx>,\n     /// How this parameter refers to its `value`.\n     pub kind: FormatParamKind,\n+    /// Where this format param is being used - argument/width/precision\n+    pub usage: FormatParamUsage,\n     /// Span of the parameter, may be zero width. Includes the whitespace of implicit parameters.\n     ///\n     /// ```text\n@@ -585,6 +600,7 @@ pub struct FormatParam<'tcx> {\n impl<'tcx> FormatParam<'tcx> {\n     fn new(\n         mut kind: FormatParamKind,\n+        usage: FormatParamUsage,\n         position: usize,\n         inner: rpf::InnerSpan,\n         values: &FormatArgsValues<'tcx>,\n@@ -599,7 +615,12 @@ impl<'tcx> FormatParam<'tcx> {\n             kind = FormatParamKind::NamedInline(name);\n         }\n \n-        Some(Self { value, kind, span })\n+        Some(Self {\n+            value,\n+            kind,\n+            usage,\n+            span,\n+        })\n     }\n }\n \n@@ -618,22 +639,35 @@ pub enum Count<'tcx> {\n \n impl<'tcx> Count<'tcx> {\n     fn new(\n+        usage: FormatParamUsage,\n         count: rpf::Count<'_>,\n         position: Option<usize>,\n         inner: Option<rpf::InnerSpan>,\n         values: &FormatArgsValues<'tcx>,\n     ) -> Option<Self> {\n         Some(match count {\n             rpf::Count::CountIs(val) => Self::Is(val, span_from_inner(values.format_string_span, inner?)),\n-            rpf::Count::CountIsName(name, span) => Self::Param(FormatParam::new(\n+            rpf::Count::CountIsName(name, _) => Self::Param(FormatParam::new(\n                 FormatParamKind::Named(Symbol::intern(name)),\n+                usage,\n                 position?,\n-                span,\n+                inner?,\n+                values,\n+            )?),\n+            rpf::Count::CountIsParam(_) => Self::Param(FormatParam::new(\n+                FormatParamKind::Numbered,\n+                usage,\n+                position?,\n+                inner?,\n+                values,\n+            )?),\n+            rpf::Count::CountIsStar(_) => Self::Param(FormatParam::new(\n+                FormatParamKind::Starred,\n+                usage,\n+                position?,\n+                inner?,\n                 values,\n             )?),\n-            rpf::Count::CountIsParam(_) | rpf::Count::CountIsStar(_) => {\n-                Self::Param(FormatParam::new(FormatParamKind::Numbered, position?, inner?, values)?)\n-            },\n             rpf::Count::CountImplied => Self::Implied,\n         })\n     }\n@@ -676,8 +710,20 @@ impl<'tcx> FormatSpec<'tcx> {\n             fill: spec.fill,\n             align: spec.align,\n             flags: spec.flags,\n-            precision: Count::new(spec.precision, positions.precision, spec.precision_span, values)?,\n-            width: Count::new(spec.width, positions.width, spec.width_span, values)?,\n+            precision: Count::new(\n+                FormatParamUsage::Precision,\n+                spec.precision,\n+                positions.precision,\n+                spec.precision_span,\n+                values,\n+            )?,\n+            width: Count::new(\n+                FormatParamUsage::Width,\n+                spec.width,\n+                positions.width,\n+                spec.width_span,\n+                values,\n+            )?,\n             r#trait: match spec.ty {\n                 \"\" => sym::Display,\n                 \"?\" => sym::Debug,\n@@ -723,7 +769,7 @@ pub struct FormatArg<'tcx> {\n pub struct FormatArgsExpn<'tcx> {\n     /// The format string literal.\n     pub format_string: FormatString,\n-    // The format arguments, such as `{:?}`.\n+    /// The format arguments, such as `{:?}`.\n     pub args: Vec<FormatArg<'tcx>>,\n     /// Has an added newline due to `println!()`/`writeln!()`/etc. The last format string part will\n     /// include this added newline.\n@@ -797,6 +843,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                                 // NamedInline is handled by `FormatParam::new()`\n                                 rpf::Position::ArgumentNamed(name) => FormatParamKind::Named(Symbol::intern(name)),\n                             },\n+                            FormatParamUsage::Argument,\n                             position.value,\n                             parsed_arg.position_span,\n                             &values,"}, {"sha": "904091c57e83755fa61df4c99709ec3be32af012", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -13,6 +13,7 @@ macro_rules! msrv_aliases {\n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n     1,62,0 { BOOL_THEN_SOME }\n+    1,58,0 { FORMAT_ARGS_CAPTURE }\n     1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN, ARRAY_INTO_ITERATOR }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, UNSIGNED_ABS }"}, {"sha": "5a0721486e33f2531ee3e7ac50b28f2ac038de90", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -33,10 +33,10 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Trait(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n-                ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {:#?}\", predicate),\n-                ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {:#?}\", predicate),\n+                ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),\n+                ty::PredicateKind::Coerce(_) => panic!(\"coerce predicate on function: {predicate:#?}\"),\n             }\n         }\n         match predicates.parent {\n@@ -319,8 +319,7 @@ fn check_terminator<'a, 'tcx>(\n                         span,\n                         format!(\n                             \"can only call other `const fn` within a `const fn`, \\\n-                             but `{:?}` is not stable as `const fn`\",\n-                            func,\n+                             but `{func:?}` is not stable as `const fn`\",\n                         )\n                         .into(),\n                     ));\n@@ -368,8 +367,9 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n                 // function could be removed if `rustc` provided a MSRV-aware version of `is_const_fn`.\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n \n-                // HACK(nilstrieb): CURRENT_RUSTC_VERSION can return versions like 1.66.0-dev. `rustc-semver` doesn't accept\n-                //                  the `-dev` version number so we have to strip it off.\n+                // HACK(nilstrieb): CURRENT_RUSTC_VERSION can return versions like 1.66.0-dev. `rustc-semver`\n+                // doesn't accept                  the `-dev` version number so we have to strip it\n+                // off.\n                 let short_version = since\n                     .as_str()\n                     .split('-')\n@@ -380,8 +380,9 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bo\n \n                 crate::meets_msrv(\n                     msrv,\n-                    RustcVersion::parse(since.as_str())\n-                        .unwrap_or_else(|err| panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")),\n+                    RustcVersion::parse(since.as_str()).unwrap_or_else(|err| {\n+                        panic!(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted: `{since}`, {err:?}\")\n+                    }),\n                 )\n             } else {\n                 // Unstable const fn with the feature enabled."}, {"sha": "d28bd92d708baae0ef57d351e8b3c7295503ec8c", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -25,11 +25,11 @@ pub fn expr_block<'a, T: LintContext>(\n     if expr.span.from_expansion() {\n         Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n     } else if let ExprKind::Block(_, _) = expr.kind {\n-        Cow::Owned(format!(\"{}{}\", code, string))\n+        Cow::Owned(format!(\"{code}{string}\"))\n     } else if string.is_empty() {\n-        Cow::Owned(format!(\"{{ {} }}\", code))\n+        Cow::Owned(format!(\"{{ {code} }}\"))\n     } else {\n-        Cow::Owned(format!(\"{{\\n{};\\n{}\\n}}\", code, string))\n+        Cow::Owned(format!(\"{{\\n{code};\\n{string}\\n}}\"))\n     }\n }\n \n@@ -392,6 +392,16 @@ pub fn trim_span(sm: &SourceMap, span: Span) -> Span {\n     .span()\n }\n \n+/// Expand a span to include a preceding comma\n+/// ```rust,ignore\n+/// writeln!(o, \"\")   ->   writeln!(o, \"\")\n+///             ^^                   ^^^^\n+/// ```\n+pub fn expand_past_previous_comma(cx: &LateContext<'_>, span: Span) -> Span {\n+    let extended = cx.sess().source_map().span_extend_to_prev_char(span, ',', true);\n+    extended.with_lo(extended.lo() - BytePos(1))\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};\n@@ -466,7 +476,7 @@ mod test {\n     #[test]\n     fn test_without_block_comments_lines_without_block_comments() {\n         let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n-        println!(\"result: {:?}\", result);\n+        println!(\"result: {result:?}\");\n         assert!(result.is_empty());\n \n         let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);"}, {"sha": "ef836e84829bf1944e9c6052c7f6522660f6e253", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -10,13 +10,13 @@ use rustc_ast_pretty::pprust::token_kind_to_string;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{Closure, ExprKind, HirId, MutTy, TyKind};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{EarlyContext, LateContext, LintContext};\n use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::{FakeReadCause, Mutability};\n use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n-use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n use std::fmt::{Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n@@ -310,19 +310,19 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to transform suggestion into a return call\n     pub fn make_return(self) -> Sugg<'static> {\n-        Sugg::NonParen(Cow::Owned(format!(\"return {}\", self)))\n+        Sugg::NonParen(Cow::Owned(format!(\"return {self}\")))\n     }\n \n     /// Convenience method to transform suggestion into a block\n     /// where the suggestion is a trailing expression\n     pub fn blockify(self) -> Sugg<'static> {\n-        Sugg::NonParen(Cow::Owned(format!(\"{{ {} }}\", self)))\n+        Sugg::NonParen(Cow::Owned(format!(\"{{ {self} }}\")))\n     }\n \n     /// Convenience method to prefix the expression with the `async` keyword.\n     /// Can be used after `blockify` to create an async block.\n     pub fn asyncify(self) -> Sugg<'static> {\n-        Sugg::NonParen(Cow::Owned(format!(\"async {}\", self)))\n+        Sugg::NonParen(Cow::Owned(format!(\"async {self}\")))\n     }\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n@@ -346,12 +346,12 @@ impl<'a> Sugg<'a> {\n                 if has_enclosing_paren(&sugg) {\n                     Sugg::MaybeParen(sugg)\n                 } else {\n-                    Sugg::NonParen(format!(\"({})\", sugg).into())\n+                    Sugg::NonParen(format!(\"({sugg})\").into())\n                 }\n             },\n             Sugg::BinOp(op, lhs, rhs) => {\n                 let sugg = binop_to_string(op, &lhs, &rhs);\n-                Sugg::NonParen(format!(\"({})\", sugg).into())\n+                Sugg::NonParen(format!(\"({sugg})\").into())\n             },\n         }\n     }\n@@ -379,20 +379,18 @@ fn binop_to_string(op: AssocOp, lhs: &str, rhs: &str) -> String {\n         | AssocOp::Greater\n         | AssocOp::GreaterEqual => {\n             format!(\n-                \"{} {} {}\",\n-                lhs,\n-                op.to_ast_binop().expect(\"Those are AST ops\").to_string(),\n-                rhs\n+                \"{lhs} {} {rhs}\",\n+                op.to_ast_binop().expect(\"Those are AST ops\").to_string()\n             )\n         },\n-        AssocOp::Assign => format!(\"{} = {}\", lhs, rhs),\n+        AssocOp::Assign => format!(\"{lhs} = {rhs}\"),\n         AssocOp::AssignOp(op) => {\n-            format!(\"{} {}= {}\", lhs, token_kind_to_string(&token::BinOp(op)), rhs)\n+            format!(\"{lhs} {}= {rhs}\", token_kind_to_string(&token::BinOp(op)))\n         },\n-        AssocOp::As => format!(\"{} as {}\", lhs, rhs),\n-        AssocOp::DotDot => format!(\"{}..{}\", lhs, rhs),\n-        AssocOp::DotDotEq => format!(\"{}..={}\", lhs, rhs),\n-        AssocOp::Colon => format!(\"{}: {}\", lhs, rhs),\n+        AssocOp::As => format!(\"{lhs} as {rhs}\"),\n+        AssocOp::DotDot => format!(\"{lhs}..{rhs}\"),\n+        AssocOp::DotDotEq => format!(\"{lhs}..={rhs}\"),\n+        AssocOp::Colon => format!(\"{lhs}: {rhs}\"),\n     }\n }\n \n@@ -523,7 +521,7 @@ impl<T: Display> Display for ParenHelper<T> {\n /// operators have the same\n /// precedence.\n pub fn make_unop(op: &str, expr: Sugg<'_>) -> Sugg<'static> {\n-    Sugg::MaybeParen(format!(\"{}{}\", op, expr.maybe_par()).into())\n+    Sugg::MaybeParen(format!(\"{op}{}\", expr.maybe_par()).into())\n }\n \n /// Builds the string for `<lhs> <op> <rhs>` adding parenthesis when necessary.\n@@ -744,7 +742,7 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n         if let Some(indent) = indentation(cx, item) {\n             let span = item.with_hi(item.lo());\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{attr}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -758,14 +756,14 @@ impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n                 .map(|l| {\n                     if first {\n                         first = false;\n-                        format!(\"{}\\n\", l)\n+                        format!(\"{l}\\n\")\n                     } else {\n-                        format!(\"{}{}\\n\", indent, l)\n+                        format!(\"{indent}{l}\\n\")\n                     }\n                 })\n                 .collect::<String>();\n \n-            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent), applicability);\n+            self.span_suggestion(span, msg, format!(\"{new_item}\\n{indent}\"), applicability);\n         }\n     }\n \n@@ -863,7 +861,7 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n     pub fn finish(&mut self) -> String {\n         let end_span = Span::new(self.next_pos, self.closure_span.hi(), self.closure_span.ctxt(), None);\n         let end_snip = snippet_with_applicability(self.cx, end_span, \"..\", &mut self.applicability);\n-        let sugg = format!(\"{}{}\", self.suggestion_start, end_snip);\n+        let sugg = format!(\"{}{end_snip}\", self.suggestion_start);\n         if self.closure_arg_is_type_annotated_double_ref {\n             sugg.replacen('&', \"\", 1)\n         } else {\n@@ -925,7 +923,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n-                let _ = write!(self.suggestion_start, \"{}&{}\", start_snip, ident_str);\n+                let _ = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n             } else {\n                 // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n@@ -940,7 +938,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, self_expr, ..) if self_expr.hir_id == cmt.hir_id => {\n-                            let _ = write!(self.suggestion_start, \"{}{}\", start_snip, ident_str_with_proj);\n+                            let _ = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -973,9 +971,9 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                                     } else {\n                                         ident_str\n                                     };\n-                                    format!(\"{}{}\", start_snip, ident)\n+                                    format!(\"{start_snip}{ident}\")\n                                 } else {\n-                                    format!(\"{}&{}\", start_snip, ident_str)\n+                                    format!(\"{start_snip}&{ident_str}\")\n                                 };\n                                 self.suggestion_start.push_str(&ident_sugg);\n                                 self.next_pos = span.hi();\n@@ -1042,21 +1040,27 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n \n                         for item in projections {\n                             if item.kind == ProjectionKind::Deref {\n-                                replacement_str = format!(\"*{}\", replacement_str);\n+                                replacement_str = format!(\"*{replacement_str}\");\n                             }\n                         }\n                     }\n                 }\n \n-                let _ = write!(self.suggestion_start, \"{}{}\", start_snip, replacement_str);\n+                let _ = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n             }\n             self.next_pos = span.hi();\n         }\n     }\n \n     fn mutate(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "934470bd135bf18f8a1d4983b32374d13e8ffb8f", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -12,11 +12,11 @@ use rustc_hir::{Expr, FnDecl, LangItem, TyKind, Unsafety};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n-use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{\n     self, AdtDef, Binder, BoundRegion, DefIdTree, FnSig, IntTy, ParamEnv, Predicate, PredicateKind, ProjectionTy,\n     Region, RegionKind, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n+use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};"}, {"sha": "3221b82aed4196d3f1cf8ab7e75297b30bf278ee", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -4,12 +4,12 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirIdSet;\n use rustc_hir::{Expr, ExprKind, HirId, Node};\n+use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty;\n-use rustc_hir_analysis::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> Option<HirIdSet> {\n@@ -73,7 +73,13 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n         self.update(cmt);\n     }\n \n-    fn fake_read(&mut self, _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>, _: FakeReadCause, _: HirId) {}\n+    fn fake_read(\n+        &mut self,\n+        _: &rustc_hir_analysis::expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _: FakeReadCause,\n+        _: HirId,\n+    ) {\n+    }\n }\n \n pub struct ParamBindingIdCollector {"}, {"sha": "0f98860167010aeba5bb8d57df47eed942534b8a", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -48,8 +48,8 @@ impl std::fmt::Display for VersionInfo {\n         if (hash_trimmed.len() + date_trimmed.len()) > 0 {\n             write!(\n                 f,\n-                \"{} {}.{}.{} ({} {})\",\n-                self.crate_name, self.major, self.minor, self.patch, hash_trimmed, date_trimmed,\n+                \"{} {}.{}.{} ({hash_trimmed} {date_trimmed})\",\n+                self.crate_name, self.major, self.minor, self.patch,\n             )?;\n         } else {\n             write!(f, \"{} {}.{}.{}\", self.crate_name, self.major, self.minor, self.patch)?;\n@@ -153,7 +153,7 @@ mod test {\n     #[test]\n     fn test_debug_local() {\n         let vi = get_version_info!();\n-        let s = format!(\"{:?}\", vi);\n+        let s = format!(\"{vi:?}\");\n         assert_eq!(\n             s,\n             \"VersionInfo { crate_name: \\\"rustc_tools_util\\\", major: 0, minor: 2, patch: 0 }\""}, {"sha": "166be0618ffddd5a39c31c1f6a56127bc1b7b366", "filename": "src/docs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -48,6 +48,7 @@ docs! {\n     \"borrow_interior_mutable_const\",\n     \"borrowed_box\",\n     \"box_collection\",\n+    \"box_default\",\n     \"boxed_local\",\n     \"branches_sharing_code\",\n     \"builtin_type_shadow\",\n@@ -521,6 +522,7 @@ docs! {\n     \"unimplemented\",\n     \"uninit_assumed_init\",\n     \"uninit_vec\",\n+    \"uninlined_format_args\",\n     \"unit_arg\",\n     \"unit_cmp\",\n     \"unit_hash\","}, {"sha": "b8c0872522ee12e9068b40288ff835bca1002b94", "filename": "src/docs/arithmetic_side_effects.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs%2Farithmetic_side_effects.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs%2Farithmetic_side_effects.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Farithmetic_side_effects.txt?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -5,7 +5,7 @@ Operators like `+`, `-`, `*` or `<<` are usually capable of overflowing accordin\n Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n or can panic (`/`, `%`).\n \n-Known safe built-in types like `Wrapping` or `Saturing`, floats, operations in constant\n+Known safe built-in types like `Wrapping` or `Saturating`, floats, operations in constant\n environments, allowed types and non-constant operations that won't overflow are ignored.\n \n ### Why is this bad?\n@@ -30,4 +30,4 @@ let _n = Decimal::MAX + Decimal::MAX;\n ```\n \n ### Allowed types\n-Custom allowed types can be specified through the \"arithmetic-side-effects-allowed\" filter.\n\\ No newline at end of file\n+Custom allowed types can be specified through the \"arithmetic-side-effects-allowed\" filter."}, {"sha": "ffac894d0c50a46cef1cb788d5c8ceef945ab7c1", "filename": "src/docs/box_default.txt", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs%2Fbox_default.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs%2Fbox_default.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fbox_default.txt?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,23 @@\n+### What it does\n+checks for `Box::new(T::default())`, which is better written as\n+`Box::<T>::default()`.\n+\n+### Why is this bad?\n+First, it's more complex, involving two calls instead of one.\n+Second, `Box::default()` can be faster\n+[in certain cases](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n+\n+### Known problems\n+The lint may miss some cases (e.g. Box::new(String::from(\"\"))).\n+On the other hand, it will trigger on cases where the `default`\n+code comes from a macro that does something different based on\n+e.g. target operating system.\n+\n+### Example\n+```\n+let x: Box<String> = Box::new(Default::default());\n+```\n+Use instead:\n+```\n+let x: Box<String> = Box::default();\n+```\n\\ No newline at end of file"}, {"sha": "3d2966c84dbe3456859f0ca70d02231a65dd80e1", "filename": "src/docs/uninlined_format_args.txt", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs%2Funinlined_format_args.txt", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdocs%2Funinlined_format_args.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Funinlined_format_args.txt?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,36 @@\n+### What it does\n+Detect when a variable is not inlined in a format string,\n+and suggests to inline it.\n+\n+### Why is this bad?\n+Non-inlined code is slightly more difficult to read and understand,\n+as it requires arguments to be matched against the format string.\n+The inlined syntax, where allowed, is simpler.\n+\n+### Example\n+```\n+format!(\"{}\", var);\n+format!(\"{v:?}\", v = var);\n+format!(\"{0} {0}\", var);\n+format!(\"{0:1$}\", var, width);\n+format!(\"{:.*}\", prec, var);\n+```\n+Use instead:\n+```\n+format!(\"{var}\");\n+format!(\"{var:?}\");\n+format!(\"{var} {var}\");\n+format!(\"{var:width$}\");\n+format!(\"{var:.prec$}\");\n+```\n+\n+### Known Problems\n+\n+There may be a false positive if the format string is expanded from certain proc macros:\n+\n+```\n+println!(indoc!(\"{}\"), var);\n+```\n+\n+If a format string contains a numbered argument that cannot be inlined\n+nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n\\ No newline at end of file"}, {"sha": "b12208ac62a8840344d3edbf8b84c9d9db7a6981", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -193,8 +193,8 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n \n     let xs: Vec<Cow<'static, str>> = vec![\n         \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-        format!(\"we would appreciate a bug report: {}\", bug_report_url).into(),\n-        format!(\"Clippy version: {}\", version_info).into(),\n+        format!(\"we would appreciate a bug report: {bug_report_url}\").into(),\n+        format!(\"Clippy version: {version_info}\").into(),\n     ];\n \n     for note in &xs {\n@@ -290,7 +290,7 @@ pub fn main() {\n \n         if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n             let version_info = rustc_tools_util::get_version_info!();\n-            println!(\"{}\", version_info);\n+            println!(\"{version_info}\");\n             exit(0);\n         }\n "}, {"sha": "fce3cdfc462e07e613fba96ba2049c2955ad2dfb", "filename": "src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -37,12 +37,12 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \"#;\n \n fn show_help() {\n-    println!(\"{}\", CARGO_CLIPPY_HELP);\n+    println!(\"{CARGO_CLIPPY_HELP}\");\n }\n \n fn show_version() {\n     let version_info = rustc_tools_util::get_version_info!();\n-    println!(\"{}\", version_info);\n+    println!(\"{version_info}\");\n }\n \n pub fn main() {\n@@ -133,7 +133,7 @@ impl ClippyCmd {\n         let clippy_args: String = self\n             .clippy_args\n             .iter()\n-            .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n+            .map(|arg| format!(\"{arg}__CLIPPY_HACKERY__\"))\n             .collect();\n \n         // Currently, `CLIPPY_TERMINAL_WIDTH` is used only to format \"unknown field\" error messages."}, {"sha": "fa769222d1af379ed5b737ebd25dbdd37cb87267", "filename": "tests/compile-test.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -111,15 +111,14 @@ static EXTERN_FLAGS: LazyLock<String> = LazyLock::new(|| {\n         .collect();\n     assert!(\n         not_found.is_empty(),\n-        \"dependencies not found in depinfo: {:?}\\n\\\n+        \"dependencies not found in depinfo: {not_found:?}\\n\\\n         help: Make sure the `-Z binary-dep-depinfo` rust flag is enabled\\n\\\n         help: Try adding to dev-dependencies in Cargo.toml\\n\\\n         help: Be sure to also add `extern crate ...;` to tests/compile-test.rs\",\n-        not_found,\n     );\n     crates\n         .into_iter()\n-        .map(|(name, path)| format!(\" --extern {}={}\", name, path))\n+        .map(|(name, path)| format!(\" --extern {name}={path}\"))\n         .collect()\n });\n \n@@ -150,9 +149,8 @@ fn base_config(test_dir: &str) -> compiletest::Config {\n         .map(|p| format!(\" -L dependency={}\", Path::new(p).join(\"deps\").display()))\n         .unwrap_or_default();\n     config.target_rustcflags = Some(format!(\n-        \"--emit=metadata -Dwarnings -Zui-testing -L dependency={}{}{}\",\n+        \"--emit=metadata -Dwarnings -Zui-testing -L dependency={}{host_libs}{}\",\n         deps_path.display(),\n-        host_libs,\n         &*EXTERN_FLAGS,\n     ));\n \n@@ -239,7 +237,7 @@ fn run_ui_toml() {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n-            panic!(\"I/O failure during tests: {:?}\", e);\n+            panic!(\"I/O failure during tests: {e:?}\");\n         },\n     }\n }\n@@ -348,7 +346,7 @@ fn run_ui_cargo() {\n         Ok(true) => {},\n         Ok(false) => panic!(\"Some tests failed\"),\n         Err(e) => {\n-            panic!(\"I/O failure during tests: {:?}\", e);\n+            panic!(\"I/O failure during tests: {e:?}\");\n         },\n     }\n }\n@@ -419,16 +417,15 @@ fn check_rustfix_coverage() {\n             if rs_path.starts_with(\"tests/ui/crashes\") {\n                 continue;\n             }\n-            assert!(rs_path.starts_with(\"tests/ui/\"), \"{:?}\", rs_file);\n+            assert!(rs_path.starts_with(\"tests/ui/\"), \"{rs_file:?}\");\n             let filename = rs_path.strip_prefix(\"tests/ui/\").unwrap();\n             assert!(\n                 RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS\n                     .binary_search_by_key(&filename, Path::new)\n                     .is_ok(),\n-                \"`{}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation. \\\n+                \"`{rs_file}` runs `MachineApplicable` diagnostics but is missing a `run-rustfix` annotation. \\\n                 Please either add `// run-rustfix` at the top of the file or add the file to \\\n                 `RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS` in `tests/compile-test.rs`.\",\n-                rs_file,\n             );\n         }\n     }\n@@ -478,15 +475,13 @@ fn ui_cargo_toml_metadata() {\n                 .map(|component| component.as_os_str().to_string_lossy().replace('-', \"_\"))\n                 .any(|s| *s == name)\n                 || path.starts_with(&cargo_common_metadata_path),\n-            \"{:?} has incorrect package name\",\n-            path\n+            \"{path:?} has incorrect package name\"\n         );\n \n         let publish = package.get(\"publish\").and_then(toml::Value::as_bool).unwrap_or(true);\n         assert!(\n             !publish || publish_exceptions.contains(&path.parent().unwrap().to_path_buf()),\n-            \"{:?} lacks `publish = false`\",\n-            path\n+            \"{path:?} lacks `publish = false`\"\n         );\n     }\n }"}, {"sha": "818ff70b33f4d0b04cac4d75206b08ede5671c1f", "filename": "tests/integration.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -6,10 +6,15 @@ use std::env;\n use std::ffi::OsStr;\n use std::process::Command;\n \n+#[cfg(not(windows))]\n+const CARGO_CLIPPY: &str = \"cargo-clippy\";\n+#[cfg(windows)]\n+const CARGO_CLIPPY: &str = \"cargo-clippy.exe\";\n+\n #[cfg_attr(feature = \"integration\", test)]\n fn integration_test() {\n     let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n-    let repo_url = format!(\"https://github.com/{}\", repo_name);\n+    let repo_url = format!(\"https://github.com/{repo_name}\");\n     let crate_name = repo_name\n         .split('/')\n         .nth(1)\n@@ -31,7 +36,7 @@ fn integration_test() {\n \n     let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     let target_dir = std::path::Path::new(&root_dir).join(\"target\");\n-    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(\"cargo-clippy\");\n+    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(CARGO_CLIPPY);\n \n     let output = Command::new(clippy_binary)\n         .current_dir(repo_dir)\n@@ -51,17 +56,15 @@ fn integration_test() {\n         .expect(\"unable to run clippy\");\n \n     let stderr = String::from_utf8_lossy(&output.stderr);\n-    if stderr.contains(\"internal compiler error\") {\n-        let backtrace_start = stderr\n-            .find(\"thread 'rustc' panicked at\")\n-            .expect(\"start of backtrace not found\");\n-        let backtrace_end = stderr\n-            .rfind(\"error: internal compiler error\")\n+    if let Some(backtrace_start) = stderr.find(\"error: internal compiler error\") {\n+        static BACKTRACE_END_MSG: &str = \"end of query stack\";\n+        let backtrace_end = stderr[backtrace_start..]\n+            .find(BACKTRACE_END_MSG)\n             .expect(\"end of backtrace not found\");\n \n         panic!(\n             \"internal compiler error\\nBacktrace:\\n\\n{}\",\n-            &stderr[backtrace_start..backtrace_end]\n+            &stderr[backtrace_start..backtrace_start + backtrace_end + BACKTRACE_END_MSG.len()]\n         );\n     } else if stderr.contains(\"query stack during panic\") {\n         panic!(\"query stack during panic in the output\");\n@@ -83,7 +86,7 @@ fn integration_test() {\n \n     match output.status.code() {\n         Some(0) => println!(\"Compilation successful\"),\n-        Some(code) => eprintln!(\"Compilation failed. Exit code: {}\", code),\n+        Some(code) => eprintln!(\"Compilation failed. Exit code: {code}\"),\n         None => panic!(\"Process terminated by signal\"),\n     }\n }"}, {"sha": "abd0d1bc5934f027698ce072d663157866e633dd", "filename": "tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flint_message_convention.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -102,7 +102,7 @@ fn lint_message_convention() {\n             \"error: the test '{}' contained the following nonconforming lines :\",\n             message.path.display()\n         );\n-        message.bad_lines.iter().for_each(|line| eprintln!(\"{}\", line));\n+        message.bad_lines.iter().for_each(|line| eprintln!(\"{line}\"));\n         eprintln!(\"\\n\\n\");\n     }\n "}, {"sha": "caedd5d76cd6fb43ceb3ebf47859e6405f709663", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -17,7 +17,7 @@ fn test_missing_tests() {\n             \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n             missing_files\n                 .iter()\n-                .map(|s| format!(\"\\t{}\", s))\n+                .map(|s| format!(\"\\t{s}\"))\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\")\n         );"}, {"sha": "01d135764dffdf467fa72e2acc63c9bc33dc2c45", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.fixed?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,62 @@\n+// aux-build:proc_macro_derive.rs\n+// run-rustfix\n+\n+#![warn(clippy::nonstandard_macro_braces)]\n+\n+extern crate proc_macro_derive;\n+extern crate quote;\n+\n+use quote::quote;\n+\n+#[derive(proc_macro_derive::DeriveSomething)]\n+pub struct S;\n+\n+proc_macro_derive::foo_bar!();\n+\n+#[rustfmt::skip]\n+macro_rules! test {\n+    () => {\n+        vec![0, 0, 0]\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! test2 {\n+    ($($arg:tt)*) => {\n+        format_args!($($arg)*)\n+    };\n+}\n+\n+macro_rules! type_pos {\n+    ($what:ty) => {\n+        Vec<$what>\n+    };\n+}\n+\n+macro_rules! printlnfoo {\n+    ($thing:expr) => {\n+        println!(\"{}\", $thing)\n+    };\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    let _ = vec![1, 2, 3];\n+    let _ = format!(\"ugh {} stop being such a good compiler\", \"hello\");\n+    let _ = matches!({}, ());\n+    let _ = quote!{let x = 1;};\n+    let _ = quote::quote!{match match match};\n+    let _ = test!(); // trigger when macro def is inside our own crate\n+    let _ = vec![1,2,3];\n+\n+    let _ = quote::quote! {true || false};\n+    let _ = vec! [0 ,0 ,0];\n+    let _ = format!(\"fds{}fds\", 10);\n+    let _ = test2![\"{}{}{}\", 1, 2, 3];\n+\n+    let _: type_pos![usize] = vec![];\n+\n+    eprint![\"test if user config overrides defaults\"];\n+\n+    printlnfoo![\"test if printlnfoo is triggered by println\"];\n+}"}, {"sha": "72883e8270c3b96dfb4fc8a745a4460842a2a84e", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,4 +1,5 @@\n // aux-build:proc_macro_derive.rs\n+// run-rustfix\n \n #![warn(clippy::nonstandard_macro_braces)]\n "}, {"sha": "7ae3815978c7742c24f0cc78937d348816146d33", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 16, "deletions": 65, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,106 +1,57 @@\n error: use of irregular braces for `vec!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n    |\n LL |     let _ = vec! {1, 2, 3};\n-   |             ^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^ help: consider writing: `vec![1, 2, 3]`\n    |\n    = note: `-D clippy::nonstandard-macro-braces` implied by `-D warnings`\n-help: consider writing `vec![1, 2, 3]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:43:13\n-   |\n-LL |     let _ = vec! {1, 2, 3};\n-   |             ^^^^^^^^^^^^^^\n \n error: use of irregular braces for `format!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n-   |\n-LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `format!(\"ugh () stop being such a good compiler\", \"hello\")`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:44:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n    |\n LL |     let _ = format![\"ugh {} stop being such a good compiler\", \"hello\"];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `format!(\"ugh {} stop being such a good compiler\", \"hello\")`\n \n error: use of irregular braces for `matches!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n-   |\n-LL |     let _ = matches!{{}, ()};\n-   |             ^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `matches!((), ())`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:45:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n    |\n LL |     let _ = matches!{{}, ()};\n-   |             ^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^ help: consider writing: `matches!({}, ())`\n \n error: use of irregular braces for `quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n-   |\n-LL |     let _ = quote!(let x = 1;);\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `quote! {let x = 1;}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:46:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n    |\n LL |     let _ = quote!(let x = 1;);\n-   |             ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider writing: `quote!{let x = 1;}`\n \n error: use of irregular braces for `quote::quote!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n+  --> $DIR/conf_nonstandard_macro_braces.rs:48:13\n    |\n LL |     let _ = quote::quote!(match match match);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `quote::quote! {match match match}`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:47:13\n-   |\n-LL |     let _ = quote::quote!(match match match);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `quote::quote!{match match match}`\n \n error: use of irregular braces for `vec!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:18:9\n+  --> $DIR/conf_nonstandard_macro_braces.rs:19:9\n    |\n LL |         vec!{0, 0, 0}\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^ help: consider writing: `vec![0, 0, 0]`\n ...\n LL |     let _ = test!(); // trigger when macro def is inside our own crate\n    |             ------- in this macro invocation\n    |\n-help: consider writing `vec![0, 0, 0]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:18:9\n-   |\n-LL |         vec!{0, 0, 0}\n-   |         ^^^^^^^^^^^^^\n-...\n-LL |     let _ = test!(); // trigger when macro def is inside our own crate\n-   |             ------- in this macro invocation\n    = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: use of irregular braces for `type_pos!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:56:12\n+  --> $DIR/conf_nonstandard_macro_braces.rs:57:12\n    |\n LL |     let _: type_pos!(usize) = vec![];\n-   |            ^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `type_pos![usize]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:56:12\n-   |\n-LL |     let _: type_pos!(usize) = vec![];\n-   |            ^^^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^^^ help: consider writing: `type_pos![usize]`\n \n error: use of irregular braces for `eprint!` macro\n-  --> $DIR/conf_nonstandard_macro_braces.rs:58:5\n-   |\n-LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider writing `eprint![\"test if user config overrides defaults\"]`\n-  --> $DIR/conf_nonstandard_macro_braces.rs:58:5\n+  --> $DIR/conf_nonstandard_macro_braces.rs:59:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider writing: `eprint![\"test if user config overrides defaults\"]`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "6741e1485472ca983d293639404320c53f3e7fd5", "filename": "tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -2,11 +2,12 @@\n     clippy::assign_op_pattern,\n     clippy::erasing_op,\n     clippy::identity_op,\n+    clippy::op_ref,\n     clippy::unnecessary_owned_empty_strings,\n     arithmetic_overflow,\n     unconditional_panic\n )]\n-#![feature(inline_const, saturating_int_impl)]\n+#![feature(const_mut_refs, inline_const, saturating_int_impl)]\n #![warn(clippy::arithmetic_side_effects)]\n \n use core::num::{Saturating, Wrapping};\n@@ -79,33 +80,50 @@ pub fn const_ops_should_not_trigger_the_lint() {\n     const _: i32 = 1 + 1;\n     let _ = const { 1 + 1 };\n \n-    const _: i32 = { let mut n = -1; n = -(-1); n = -n; n };\n-    let _ = const { let mut n = -1; n = -(-1); n = -n; n };\n+    const _: i32 = { let mut n = 1; n = -1; n = -(-1); n = -n; n };\n+    let _ = const { let mut n = 1; n = -1; n = -(-1); n = -n; n };\n }\n \n-pub fn non_overflowing_runtime_ops_or_ops_already_handled_by_the_compiler() {\n+pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_trigger_the_lint() {\n     let mut _n = i32::MAX;\n \n     // Assign\n     _n += 0;\n+    _n += &0;\n     _n -= 0;\n+    _n -= &0;\n     _n /= 99;\n+    _n /= &99;\n     _n %= 99;\n+    _n %= &99;\n     _n *= 0;\n+    _n *= &0;\n     _n *= 1;\n+    _n *= &1;\n \n     // Binary\n     _n = _n + 0;\n+    _n = _n + &0;\n     _n = 0 + _n;\n+    _n = &0 + _n;\n     _n = _n - 0;\n+    _n = _n - &0;\n     _n = 0 - _n;\n+    _n = &0 - _n;\n     _n = _n / 99;\n+    _n = _n / &99;\n     _n = _n % 99;\n+    _n = _n % &99;\n     _n = _n * 0;\n+    _n = _n * &0;\n     _n = 0 * _n;\n+    _n = &0 * _n;\n     _n = _n * 1;\n+    _n = _n * &1;\n     _n = 1 * _n;\n+    _n = &1 * _n;\n     _n = 23 + 85;\n+    _n = &23 + &85;\n \n     // Unary\n     _n = -1;\n@@ -117,23 +135,37 @@ pub fn overflowing_runtime_ops() {\n \n     // Assign\n     _n += 1;\n+    _n += &1;\n     _n -= 1;\n+    _n -= &1;\n     _n /= 0;\n+    _n /= &0;\n     _n %= 0;\n+    _n %= &0;\n     _n *= 2;\n+    _n *= &2;\n \n     // Binary\n     _n = _n + 1;\n+    _n = _n + &1;\n     _n = 1 + _n;\n+    _n = &1 + _n;\n     _n = _n - 1;\n+    _n = _n - &1;\n     _n = 1 - _n;\n+    _n = &1 - _n;\n     _n = _n / 0;\n+    _n = _n / &0;\n     _n = _n % 0;\n+    _n = _n % &0;\n     _n = _n * 2;\n+    _n = _n * &2;\n     _n = 2 * _n;\n+    _n = &2 * _n;\n \n     // Unary\n     _n = -_n;\n+    _n = -&_n;\n }\n \n fn main() {}"}, {"sha": "4dce13b624b4abc7603a72943d2cac3385a5f7d0", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 99, "deletions": 15, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -1,88 +1,172 @@\n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:119:5\n+  --> $DIR/arithmetic_side_effects.rs:137:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:120:5\n+  --> $DIR/arithmetic_side_effects.rs:138:5\n+   |\n+LL |     _n += &1;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:139:5\n    |\n LL |     _n -= 1;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:121:5\n+  --> $DIR/arithmetic_side_effects.rs:140:5\n+   |\n+LL |     _n -= &1;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:141:5\n    |\n LL |     _n /= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:122:5\n+  --> $DIR/arithmetic_side_effects.rs:142:5\n+   |\n+LL |     _n /= &0;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:143:5\n    |\n LL |     _n %= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:123:5\n+  --> $DIR/arithmetic_side_effects.rs:144:5\n+   |\n+LL |     _n %= &0;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:145:5\n    |\n LL |     _n *= 2;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:126:10\n+  --> $DIR/arithmetic_side_effects.rs:146:5\n+   |\n+LL |     _n *= &2;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:149:10\n    |\n LL |     _n = _n + 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:127:10\n+  --> $DIR/arithmetic_side_effects.rs:150:10\n+   |\n+LL |     _n = _n + &1;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:151:10\n    |\n LL |     _n = 1 + _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:128:10\n+  --> $DIR/arithmetic_side_effects.rs:152:10\n+   |\n+LL |     _n = &1 + _n;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:153:10\n    |\n LL |     _n = _n - 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:129:10\n+  --> $DIR/arithmetic_side_effects.rs:154:10\n+   |\n+LL |     _n = _n - &1;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:155:10\n    |\n LL |     _n = 1 - _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:130:10\n+  --> $DIR/arithmetic_side_effects.rs:156:10\n+   |\n+LL |     _n = &1 - _n;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:157:10\n    |\n LL |     _n = _n / 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:131:10\n+  --> $DIR/arithmetic_side_effects.rs:158:10\n+   |\n+LL |     _n = _n / &0;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:159:10\n    |\n LL |     _n = _n % 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:132:10\n+  --> $DIR/arithmetic_side_effects.rs:160:10\n+   |\n+LL |     _n = _n % &0;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:161:10\n    |\n LL |     _n = _n * 2;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:133:10\n+  --> $DIR/arithmetic_side_effects.rs:162:10\n+   |\n+LL |     _n = _n * &2;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:163:10\n    |\n LL |     _n = 2 * _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:136:10\n+  --> $DIR/arithmetic_side_effects.rs:164:10\n+   |\n+LL |     _n = &2 * _n;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:167:10\n    |\n LL |     _n = -_n;\n    |          ^^^\n \n-error: aborting due to 14 previous errors\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:168:10\n+   |\n+LL |     _n = -&_n;\n+   |          ^^^^\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "4c9947b9ae724d0bcd9b9fe6afefc7b83dc65734", "filename": "tests/ui/box_collection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -15,7 +15,7 @@ macro_rules! boxit {\n }\n \n fn test_macro() {\n-    boxit!(Vec::new(), Vec<u8>);\n+    boxit!(vec![1], Vec<u8>);\n }\n \n fn test1(foo: Box<Vec<bool>>) {}\n@@ -50,7 +50,7 @@ fn test_local_not_linted() {\n pub fn pub_test(foo: Box<Vec<bool>>) {}\n \n pub fn pub_test_ret() -> Box<Vec<bool>> {\n-    Box::new(Vec::new())\n+    Box::default()\n }\n \n fn main() {}"}, {"sha": "dc522705bc6248b99ac1fa6644ea29db27691890", "filename": "tests/ui/box_default.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,31 @@\n+#![warn(clippy::box_default)]\n+\n+#[derive(Default)]\n+struct ImplementsDefault;\n+\n+struct OwnDefault;\n+\n+impl OwnDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+macro_rules! outer {\n+    ($e: expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() {\n+    let _string: Box<String> = Box::new(Default::default());\n+    let _byte = Box::new(u8::default());\n+    let _vec = Box::new(Vec::<u8>::new());\n+    let _impl = Box::new(ImplementsDefault::default());\n+    let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n+    let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n+    let _own = Box::new(OwnDefault::default()); // should not lint\n+    let _in_macro = outer!(Box::new(String::new()));\n+    // false negative: default is from different expansion\n+    let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n+}"}, {"sha": "341766a502b1aca0db312522e4433ce57423fd05", "filename": "tests/ui/box_default.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,59 @@\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:21:32\n+   |\n+LL |     let _string: Box<String> = Box::new(Default::default());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::box-default` implied by `-D warnings`\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:22:17\n+   |\n+LL |     let _byte = Box::new(u8::default());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:23:16\n+   |\n+LL |     let _vec = Box::new(Vec::<u8>::new());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:24:17\n+   |\n+LL |     let _impl = Box::new(ImplementsDefault::default());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:25:18\n+   |\n+LL |     let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:26:42\n+   |\n+LL |     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:28:28\n+   |\n+LL |     let _in_macro = outer!(Box::new(String::new()));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "c67b22f6f8c47b01cdd713dd15bf2e805e6fcd9a", "filename": "tests/ui/crashes/ice-9445.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fcrashes%2Fice-9445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcde666853d11f6f5f3bdc660f018cf7fc8cd71/tests%2Fui%2Fcrashes%2Fice-9445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9445.rs?ref=bbcde666853d11f6f5f3bdc660f018cf7fc8cd71", "patch": "@@ -0,0 +1,3 @@\n+const UNINIT: core::mem::MaybeUninit<core::cell::Cell<&'static ()>> = core::mem::MaybeUninit::uninit();\n+\n+fn main() {}"}]}