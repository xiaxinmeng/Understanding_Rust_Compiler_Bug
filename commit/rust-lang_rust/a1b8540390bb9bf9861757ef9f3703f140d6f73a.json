{"sha": "a1b8540390bb9bf9861757ef9f3703f140d6f73a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjg1NDAzOTBiYjliZjk4NjE3NTdlZjlmMzcwM2YxNDBkNmY3M2E=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-15T01:58:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-15T04:38:00Z"}, "message": "Undo the `const_str` changes from the previous commit.", "tree": {"sha": "10c62ef8e0eefae9696ee0e427b4941c83a907d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10c62ef8e0eefae9696ee0e427b4941c83a907d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b8540390bb9bf9861757ef9f3703f140d6f73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b8540390bb9bf9861757ef9f3703f140d6f73a", "html_url": "https://github.com/rust-lang/rust/commit/a1b8540390bb9bf9861757ef9f3703f140d6f73a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b8540390bb9bf9861757ef9f3703f140d6f73a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4d431c067308ae79b902fe0d0e7b9c6958d0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4d431c067308ae79b902fe0d0e7b9c6958d0e9", "html_url": "https://github.com/rust-lang/rust/commit/7c4d431c067308ae79b902fe0d0e7b9c6958d0e9"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "64140747871fec68ca8b27a2ebdb516ad2f004e7", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=a1b8540390bb9bf9861757ef9f3703f140d6f73a", "patch": "@@ -15,7 +15,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n use rustc_middle::mir::interpret::{Allocation, GlobalAlloc, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_middle::ty::SymbolName;\n+use rustc_span::symbol::Symbol;\n use rustc_target::abi::{self, HasDataLayout, LayoutOf, Pointer, Size};\n \n use libc::{c_char, c_uint};\n@@ -105,16 +105,17 @@ impl CodegenCx<'ll, 'tcx> {\n         bytes_in_context(self.llcx, bytes)\n     }\n \n-    fn const_cstr(&self, s: SymbolName<'tcx>, null_terminated: bool) -> &'ll Value {\n+    fn const_cstr(&self, s: Symbol, null_terminated: bool) -> &'ll Value {\n         unsafe {\n             if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n                 return llval;\n             }\n \n+            let s_str = s.as_str();\n             let sc = llvm::LLVMConstStringInContext(\n                 self.llcx,\n-                s.name.as_ptr() as *const c_char,\n-                s.name.len() as c_uint,\n+                s_str.as_ptr() as *const c_char,\n+                s_str.len() as c_uint,\n                 !null_terminated as Bool,\n             );\n             let sym = self.generate_local_symbol_name(\"str\");\n@@ -201,8 +202,8 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         unsafe { llvm::LLVMConstReal(t, val) }\n     }\n \n-    fn const_str(&self, s: SymbolName<'tcx>) -> (&'ll Value, &'ll Value) {\n-        let len = s.name.len();\n+    fn const_str(&self, s: Symbol) -> (&'ll Value, &'ll Value) {\n+        let len = s.as_str().len();\n         let cs = consts::ptrcast(\n             self.const_cstr(s, false),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).llvm_type(self)),"}, {"sha": "21ba97d15a485776362716ed8b84b6c946cd1f8d", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=a1b8540390bb9bf9861757ef9f3703f140d6f73a", "patch": "@@ -16,10 +16,11 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::bug;\n use rustc_middle::mir::mono::CodegenUnit;\n use rustc_middle::ty::layout::{HasParamEnv, LayoutError, TyAndLayout};\n-use rustc_middle::ty::{self, Instance, SymbolName, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::config::{CFGuard, CrateType, DebugInfo};\n use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n+use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n \n@@ -46,7 +47,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<SymbolName<'tcx>, &'ll Value>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     ///"}, {"sha": "d095587a1e8cb81d9cecd25fae428e132e538f24", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=a1b8540390bb9bf9861757ef9f3703f140d6f73a", "patch": "@@ -196,7 +196,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 // and/or monomorphization invalidates these assumptions.\n                 let coverageinfo = tcx.coverageinfo(caller_instance.def_id());\n                 let mangled_fn = tcx.symbol_name(caller_instance);\n-                let (mangled_fn_name, _len_val) = self.const_str(mangled_fn);\n+                let (mangled_fn_name, _len_val) = self.const_str(Symbol::intern(mangled_fn.name));\n                 let hash = self.const_u64(coverageinfo.hash);\n                 let num_counters = self.const_u32(coverageinfo.num_counters);\n                 use coverage::count_code_region_args::*;"}, {"sha": "7116bb8c92517d3fbf1fba318f5db2e30700ac9e", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=a1b8540390bb9bf9861757ef9f3703f140d6f73a", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::mir;\n use rustc_middle::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n use rustc_middle::mir::AssertKind;\n use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n-use rustc_middle::ty::{self, Instance, SymbolName, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n@@ -423,7 +423,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (lang_items::PanicBoundsCheckFnLangItem, vec![index, len, location])\n             }\n             _ => {\n-                let msg = bx.const_str(SymbolName::new(bx.tcx(), msg.description()));\n+                let msg_str = Symbol::intern(msg.description());\n+                let msg = bx.const_str(msg_str);\n                 // It's `pub fn panic(expr: &str)`, with the wide reference being passed\n                 // as two arguments, and `#[track_caller]` adds an implicit third argument.\n                 (lang_items::PanicFnLangItem, vec![msg.0, msg.1, location])\n@@ -486,7 +487,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 } else {\n                     format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n                 };\n-                let msg = bx.const_str(SymbolName::new(bx.tcx(), &msg_str));\n+                let msg = bx.const_str(Symbol::intern(&msg_str));\n                 let location = self.get_caller_location(bx, span).immediate();\n \n                 // Obtain the panic entry point."}, {"sha": "6b58dea794bcbca7099085b56c6d5ee99af59cb7", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b8540390bb9bf9861757ef9f3703f140d6f73a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=a1b8540390bb9bf9861757ef9f3703f140d6f73a", "patch": "@@ -2,7 +2,7 @@ use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n use rustc_middle::mir::interpret::{Allocation, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_middle::ty::SymbolName;\n+use rustc_span::Symbol;\n use rustc_target::abi::{self, Size};\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n@@ -20,7 +20,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u8(&self, i: u8) -> Self::Value;\n     fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n-    fn const_str(&self, s: SymbolName<'tcx>) -> (Self::Value, Self::Value);\n+    fn const_str(&self, s: Symbol) -> (Self::Value, Self::Value);\n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n     fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;"}]}