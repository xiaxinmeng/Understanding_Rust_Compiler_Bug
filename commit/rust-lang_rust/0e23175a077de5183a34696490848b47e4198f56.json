{"sha": "0e23175a077de5183a34696490848b47e4198f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjMxNzVhMDc3ZGU1MTgzYTM0Njk2NDkwODQ4YjQ3ZTQxOThmNTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T09:48:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-03T09:48:48Z"}, "message": "Cleanup record completion tests", "tree": {"sha": "8bdde6b7793c9aa077fd06ba64bb262a77235fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bdde6b7793c9aa077fd06ba64bb262a77235fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e23175a077de5183a34696490848b47e4198f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e23175a077de5183a34696490848b47e4198f56", "html_url": "https://github.com/rust-lang/rust/commit/0e23175a077de5183a34696490848b47e4198f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e23175a077de5183a34696490848b47e4198f56/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb8bf03c588dcf244d25785de3878b6ef3f7958", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb8bf03c588dcf244d25785de3878b6ef3f7958", "html_url": "https://github.com/rust-lang/rust/commit/4cb8bf03c588dcf244d25785de3878b6ef3f7958"}], "stats": {"total": 601, "additions": 227, "deletions": 374}, "files": [{"sha": "74b94594dca697598f845c4de3f9b49743dfbd70", "filename": "crates/ra_ide/src/completion/complete_record.rs", "status": "modified", "additions": 183, "deletions": 363, "changes": 546, "blob_url": "https://github.com/rust-lang/rust/blob/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_record.rs?ref=0e23175a077de5183a34696490848b47e4198f56", "patch": "@@ -18,389 +18,209 @@ pub(super) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n \n #[cfg(test)]\n mod tests {\n-    mod record_pat_tests {\n-        use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n \n-        use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    use crate::completion::{test_utils::completion_list, CompletionKind};\n \n-        fn complete(code: &str) -> Vec<CompletionItem> {\n-            do_completion(code, CompletionKind::Reference)\n-        }\n-\n-        #[test]\n-        fn test_record_pattern_field() {\n-            let completions = complete(\n-                r\"\n-            struct S { foo: u32 }\n-\n-            fn process(f: S) {\n-                match f {\n-                    S { f<|>: 92 } => (),\n-                }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"foo\",\n-                    source_range: 68..69,\n-                    delete: 68..69,\n-                    insert: \"foo\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n-\n-        #[test]\n-        fn test_record_pattern_enum_variant() {\n-            let completions = complete(\n-                r\"\n-            enum E {\n-                S { foo: u32, bar: () }\n-            }\n-\n-            fn process(e: E) {\n-                match e {\n-                    E::S { <|> } => (),\n-                }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"bar\",\n-                    source_range: 88..88,\n-                    delete: 88..88,\n-                    insert: \"bar\",\n-                    kind: Field,\n-                    detail: \"()\",\n-                },\n-                CompletionItem {\n-                    label: \"foo\",\n-                    source_range: 88..88,\n-                    delete: 88..88,\n-                    insert: \"foo\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        expect.assert_eq(&actual);\n+    }\n \n-        #[test]\n-        fn test_record_pattern_field_in_simple_macro() {\n-            let completions = complete(\n-                r\"\n-            macro_rules! m { ($e:expr) => { $e } }\n-            struct S { foo: u32 }\n+    #[test]\n+    fn test_record_pattern_field() {\n+        check(\n+            r#\"\n+struct S { foo: u32 }\n \n-            fn process(f: S) {\n-                m!(match f {\n-                    S { f<|>: 92 } => (),\n-                })\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"foo\",\n-                    source_range: 110..111,\n-                    delete: 110..111,\n-                    insert: \"foo\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+fn process(f: S) {\n+    match f {\n+        S { f<|>: 92 } => (),\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd foo u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn only_missing_fields_are_completed_in_destruct_pats() {\n-            let completions = complete(\n-                r\"\n-            struct S {\n-                foo1: u32,\n-                foo2: u32,\n-                bar: u32,\n-                baz: u32,\n-            }\n+    #[test]\n+    fn test_record_pattern_enum_variant() {\n+        check(\n+            r#\"\n+enum E { S { foo: u32, bar: () } }\n \n-            fn main() {\n-                let s = S {\n-                    foo1: 1,\n-                    foo2: 2,\n-                    bar: 3,\n-                    baz: 4,\n-                };\n-                if let S { foo1, foo2: a, <|> } = s {}\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"bar\",\n-                    source_range: 203..203,\n-                    delete: 203..203,\n-                    insert: \"bar\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-                CompletionItem {\n-                    label: \"baz\",\n-                    source_range: 203..203,\n-                    delete: 203..203,\n-                    insert: \"baz\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+fn process(e: E) {\n+    match e {\n+        E::S { <|> } => (),\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd bar ()\n+                fd foo u32\n+            \"#]],\n+        );\n     }\n \n-    mod record_lit_tests {\n-        use insta::assert_debug_snapshot;\n-\n-        use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n+    #[test]\n+    fn test_record_pattern_field_in_simple_macro() {\n+        check(\n+            r\"\n+macro_rules! m { ($e:expr) => { $e } }\n+struct S { foo: u32 }\n+\n+fn process(f: S) {\n+    m!(match f {\n+        S { f<|>: 92 } => (),\n+    })\n+}\n+\",\n+            expect![[r#\"\n+                fd foo u32\n+            \"#]],\n+        );\n+    }\n \n-        fn complete(code: &str) -> Vec<CompletionItem> {\n-            do_completion(code, CompletionKind::Reference)\n-        }\n+    #[test]\n+    fn only_missing_fields_are_completed_in_destruct_pats() {\n+        check(\n+            r#\"\n+struct S {\n+    foo1: u32, foo2: u32,\n+    bar: u32, baz: u32,\n+}\n \n-        #[test]\n-        fn test_record_literal_deprecated_field() {\n-            let completions = complete(\n-                r\"\n-            struct A {\n-                #[deprecated]\n-                the_field: u32,\n-            }\n-            fn foo() {\n-               A { the<|> }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"the_field\",\n-                    source_range: 69..72,\n-                    delete: 69..72,\n-                    insert: \"the_field\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                    deprecated: true,\n-                },\n-            ]\n-            \"###);\n-        }\n+fn main() {\n+    let s = S {\n+        foo1: 1, foo2: 2,\n+        bar: 3, baz: 4,\n+    };\n+    if let S { foo1, foo2: a, <|> } = s {}\n+}\n+\"#,\n+            expect![[r#\"\n+                fd bar u32\n+                fd baz u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn test_record_literal_field() {\n-            let completions = complete(\n-                r\"\n-            struct A { the_field: u32 }\n-            fn foo() {\n-               A { the<|> }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"the_field\",\n-                    source_range: 46..49,\n-                    delete: 46..49,\n-                    insert: \"the_field\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+    #[test]\n+    fn test_record_literal_field() {\n+        check(\n+            r#\"\n+struct A { the_field: u32 }\n+fn foo() {\n+   A { the<|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd the_field u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn test_record_literal_enum_variant() {\n-            let completions = complete(\n-                r\"\n-            enum E {\n-                A { a: u32 }\n-            }\n-            fn foo() {\n-                let _ = E::A { <|> }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"a\",\n-                    source_range: 58..58,\n-                    delete: 58..58,\n-                    insert: \"a\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+    #[test]\n+    fn test_record_literal_enum_variant() {\n+        check(\n+            r#\"\n+enum E { A { a: u32 } }\n+fn foo() {\n+    let _ = E::A { <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd a u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn test_record_literal_two_structs() {\n-            let completions = complete(\n-                r\"\n-            struct A { a: u32 }\n-            struct B { b: u32 }\n+    #[test]\n+    fn test_record_literal_two_structs() {\n+        check(\n+            r#\"\n+struct A { a: u32 }\n+struct B { b: u32 }\n \n-            fn foo() {\n-               let _: A = B { <|> }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"b\",\n-                    source_range: 70..70,\n-                    delete: 70..70,\n-                    insert: \"b\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+fn foo() {\n+   let _: A = B { <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd b u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn test_record_literal_generic_struct() {\n-            let completions = complete(\n-                r\"\n-            struct A<T> { a: T }\n+    #[test]\n+    fn test_record_literal_generic_struct() {\n+        check(\n+            r#\"\n+struct A<T> { a: T }\n \n-            fn foo() {\n-               let _: A<u32> = A { <|> }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"a\",\n-                    source_range: 56..56,\n-                    delete: 56..56,\n-                    insert: \"a\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+fn foo() {\n+   let _: A<u32> = A { <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd a u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn test_record_literal_field_in_simple_macro() {\n-            let completions = complete(\n-                r\"\n-            macro_rules! m { ($e:expr) => { $e } }\n-            struct A { the_field: u32 }\n-            fn foo() {\n-               m!(A { the<|> })\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"the_field\",\n-                    source_range: 88..91,\n-                    delete: 88..91,\n-                    insert: \"the_field\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+    #[test]\n+    fn test_record_literal_field_in_simple_macro() {\n+        check(\n+            r#\"\n+macro_rules! m { ($e:expr) => { $e } }\n+struct A { the_field: u32 }\n+fn foo() {\n+   m!(A { the<|> })\n+}\n+\"#,\n+            expect![[r#\"\n+                fd the_field u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn only_missing_fields_are_completed() {\n-            let completions = complete(\n-                r\"\n-            struct S {\n-                foo1: u32,\n-                foo2: u32,\n-                bar: u32,\n-                baz: u32,\n-            }\n+    #[test]\n+    fn only_missing_fields_are_completed() {\n+        check(\n+            r#\"\n+struct S {\n+    foo1: u32, foo2: u32,\n+    bar: u32, baz: u32,\n+}\n \n-            fn main() {\n-                let foo1 = 1;\n-                let s = S {\n-                    foo1,\n-                    foo2: 5,\n-                    <|>\n-                }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"bar\",\n-                    source_range: 157..157,\n-                    delete: 157..157,\n-                    insert: \"bar\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-                CompletionItem {\n-                    label: \"baz\",\n-                    source_range: 157..157,\n-                    delete: 157..157,\n-                    insert: \"baz\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+fn main() {\n+    let foo1 = 1;\n+    let s = S { foo1, foo2: 5, <|> }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd bar u32\n+                fd baz u32\n+            \"#]],\n+        );\n+    }\n \n-        #[test]\n-        fn completes_functional_update() {\n-            let completions = complete(\n-                r\"\n-            struct S {\n-                foo1: u32,\n-                foo2: u32,\n-            }\n+    #[test]\n+    fn completes_functional_update() {\n+        check(\n+            r#\"\n+struct S { foo1: u32, foo2: u32 }\n \n-            fn main() {\n-                let foo1 = 1;\n-                let s = S {\n-                    foo1,\n-                    <|>\n-                    .. loop {}\n-                }\n-            }\n-            \",\n-            );\n-            assert_debug_snapshot!(completions, @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"foo2\",\n-                    source_range: 112..112,\n-                    delete: 112..112,\n-                    insert: \"foo2\",\n-                    kind: Field,\n-                    detail: \"u32\",\n-                },\n-            ]\n-            \"###);\n-        }\n+fn main() {\n+    let foo1 = 1;\n+    let s = S { foo1, <|> .. loop {} }\n+}\n+\"#,\n+            expect![[r#\"\n+                fd foo2 u32\n+            \"#]],\n+        );\n     }\n }"}, {"sha": "4db371d57f46a59954853d80ba605a18e4cda1dd", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=0e23175a077de5183a34696490848b47e4198f56", "patch": "@@ -129,24 +129,24 @@ impl CompletionItemKind {\n     #[cfg(test)]\n     pub(crate) fn tag(&self) -> &'static str {\n         match self {\n-            CompletionItemKind::Snippet => \"sn\",\n-            CompletionItemKind::Keyword => \"kw\",\n-            CompletionItemKind::Module => \"md\",\n-            CompletionItemKind::Function => \"fn\",\n+            CompletionItemKind::Attribute => \"at\",\n+            CompletionItemKind::Binding => \"bn\",\n             CompletionItemKind::BuiltinType => \"bt\",\n-            CompletionItemKind::Struct => \"st\",\n+            CompletionItemKind::Const => \"ct\",\n             CompletionItemKind::Enum => \"en\",\n             CompletionItemKind::EnumVariant => \"ev\",\n-            CompletionItemKind::Binding => \"bn\",\n             CompletionItemKind::Field => \"fd\",\n+            CompletionItemKind::Function => \"fn\",\n+            CompletionItemKind::Keyword => \"kw\",\n+            CompletionItemKind::Macro => \"ma\",\n+            CompletionItemKind::Method => \"me\",\n+            CompletionItemKind::Module => \"md\",\n+            CompletionItemKind::Snippet => \"sn\",\n             CompletionItemKind::Static => \"sc\",\n-            CompletionItemKind::Const => \"ct\",\n+            CompletionItemKind::Struct => \"st\",\n             CompletionItemKind::Trait => \"tt\",\n             CompletionItemKind::TypeAlias => \"ta\",\n-            CompletionItemKind::Method => \"me\",\n             CompletionItemKind::TypeParam => \"tp\",\n-            CompletionItemKind::Macro => \"ma\",\n-            CompletionItemKind::Attribute => \"at\",\n         }\n     }\n }"}, {"sha": "bd274bd743ab54d0b46317a019af1542889a6427", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=0e23175a077de5183a34696490848b47e4198f56", "patch": "@@ -606,6 +606,31 @@ mod tests {\n         ]\n         \"###\n         );\n+\n+        assert_debug_snapshot!(do_reference_completion(\n+            r#\"\n+struct A {\n+    #[deprecated]\n+    the_field: u32,\n+}\n+fn foo() {\n+   A { the<|> }\n+}\n+\"#,\n+        ),\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: 69..72,\n+                delete: 69..72,\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                deprecated: true,\n+            },\n+        ]\n+        \"###);\n     }\n \n     #[test]"}, {"sha": "5938415b3c4385b45578ec32004f4bc853157ff9", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e23175a077de5183a34696490848b47e4198f56/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=0e23175a077de5183a34696490848b47e4198f56", "patch": "@@ -2,6 +2,7 @@\n \n use hir::Semantics;\n use ra_syntax::{AstNode, NodeOrToken, SyntaxElement};\n+use stdx::format_to;\n \n use crate::{\n     completion::{completion_item::CompletionKind, CompletionConfig},\n@@ -42,7 +43,14 @@ pub(crate) fn completion_list_with_options(\n     kind_completions.sort_by_key(|c| c.label().to_owned());\n     kind_completions\n         .into_iter()\n-        .map(|it| format!(\"{} {}\\n\", it.kind().unwrap().tag(), it.label()))\n+        .map(|it| {\n+            let mut buf = format!(\"{} {}\", it.kind().unwrap().tag(), it.label());\n+            if let Some(detail) = it.detail() {\n+                format_to!(buf, \" {}\", detail);\n+            }\n+            format_to!(buf, \"\\n\");\n+            buf\n+        })\n         .collect()\n }\n "}]}