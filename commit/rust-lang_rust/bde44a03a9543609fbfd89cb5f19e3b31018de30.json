{"sha": "bde44a03a9543609fbfd89cb5f19e3b31018de30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTQ0YTAzYTk1NDM2MDlmYmZkODljYjVmMTllM2IzMTAxOGRlMzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-05T02:27:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-05T02:27:54Z"}, "message": "rustc: Detect the system root and allow the user to override if necessary", "tree": {"sha": "379f09cbeb4f3680b15dc0c886ec620b88904b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379f09cbeb4f3680b15dc0c886ec620b88904b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde44a03a9543609fbfd89cb5f19e3b31018de30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde44a03a9543609fbfd89cb5f19e3b31018de30", "html_url": "https://github.com/rust-lang/rust/commit/bde44a03a9543609fbfd89cb5f19e3b31018de30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde44a03a9543609fbfd89cb5f19e3b31018de30/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1299e74db328f1134bc554f0886450f31e790216", "url": "https://api.github.com/repos/rust-lang/rust/commits/1299e74db328f1134bc554f0886450f31e790216", "html_url": "https://github.com/rust-lang/rust/commit/1299e74db328f1134bc554f0886450f31e790216"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "4276b55806120632b72416229c962388d499034d", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bde44a03a9543609fbfd89cb5f19e3b31018de30/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde44a03a9543609fbfd89cb5f19e3b31018de30/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=bde44a03a9543609fbfd89cb5f19e3b31018de30", "patch": "@@ -14,6 +14,7 @@ import middle.typestate_check;\n import lib.llvm;\n import util.common;\n \n+import std.fs;\n import std.map.mk_hashmap;\n import std.option;\n import std.option.some;\n@@ -141,6 +142,7 @@ options:\n     -c                 compile and assemble, but do not link\n     --save-temps       write intermediate files in addition to normal output\n     --time-passes      time the individual phases of the compiler\n+    --sysroot <path>   override the system root (default: rustc's directory)\n     --no-typestate     don't run the typestate pass (unsafe!)\n     -h                 display this message\\n\\n\");\n }\n@@ -152,6 +154,12 @@ fn get_os() -> session.os {\n     if (_str.eq(s, \"linux\")) { ret session.os_linux; }\n }\n \n+fn get_default_sysroot(str binary) -> str {\n+    auto dirname = fs.dirname(binary);\n+    if (_str.eq(dirname, binary)) { ret \".\"; }\n+    ret dirname;\n+}\n+\n fn main(vec[str] args) {\n \n     // FIXME: don't hard-wire this.\n@@ -166,8 +174,9 @@ fn main(vec[str] args) {\n                     optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optopt(\"g\"),\n-                    optflag(\"save-temps\"), optflag(\"time-passes\"),\n-                    optflag(\"no-typestate\"), optflag(\"noverify\"));\n+                    optflag(\"save-temps\"), optopt(\"sysroot\"),\n+                    optflag(\"time-passes\"), optflag(\"no-typestate\"),\n+                    optflag(\"noverify\"));\n     auto binary = _vec.shift[str](args);\n     auto match;\n     alt (GetOpts.getopts(args, opts)) {\n@@ -203,6 +212,13 @@ fn main(vec[str] args) {\n     auto debuginfo = opt_present(match, \"g\");\n     auto time_passes = opt_present(match, \"time-passes\");\n     auto run_typestate = !opt_present(match, \"no-typestate\");\n+    auto sysroot_opt = GetOpts.opt_maybe_str(match, \"sysroot\");\n+\n+    auto sysroot;\n+    alt (sysroot_opt) {\n+        case (none[str]) { sysroot = get_default_sysroot(binary); }\n+        case (some[str](?s)) { sysroot = s; }\n+    }\n \n     let @session.options sopts =\n         @rec(shared = shared,\n@@ -213,7 +229,8 @@ fn main(vec[str] args) {\n              save_temps = save_temps,\n              time_passes = time_passes,\n              output_type = output_type,\n-             library_search_paths = library_search_paths);\n+             library_search_paths = library_search_paths,\n+             sysroot = sysroot);\n \n     auto crate_cache = common.new_int_hash[session.crate_metadata]();\n     auto target_crate_num = 0;"}, {"sha": "6b3b55f44901d1caa599aa8a0e73c897d0b02b2f", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bde44a03a9543609fbfd89cb5f19e3b31018de30/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde44a03a9543609fbfd89cb5f19e3b31018de30/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=bde44a03a9543609fbfd89cb5f19e3b31018de30", "patch": "@@ -33,7 +33,8 @@ type options = rec(bool shared,\n                    bool save_temps,\n                    bool time_passes,\n                    middle.trans.output_type output_type,\n-                   vec[str] library_search_paths);\n+                   vec[str] library_search_paths,\n+                   str sysroot);\n \n type crate_metadata = rec(str name,\n                           vec[u8] data);"}]}