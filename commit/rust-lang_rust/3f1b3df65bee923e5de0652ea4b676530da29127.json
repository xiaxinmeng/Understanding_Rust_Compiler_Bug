{"sha": "3f1b3df65bee923e5de0652ea4b676530da29127", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWIzZGY2NWJlZTkyM2U1ZGUwNjUyZWE0YjY3NjUzMGRhMjkxMjc=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T06:13:15Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:52Z"}, "message": "Move impls of ToNav that use source() to TryToNav", "tree": {"sha": "81b898785f7d934eabc48bb3575cb14f66f6abce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b898785f7d934eabc48bb3575cb14f66f6abce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1b3df65bee923e5de0652ea4b676530da29127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1b3df65bee923e5de0652ea4b676530da29127", "html_url": "https://github.com/rust-lang/rust/commit/3f1b3df65bee923e5de0652ea4b676530da29127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1b3df65bee923e5de0652ea4b676530da29127/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6800c606ec7be5f19c1728a246eb2e2ffa4110f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6800c606ec7be5f19c1728a246eb2e2ffa4110f6", "html_url": "https://github.com/rust-lang/rust/commit/6800c606ec7be5f19c1728a246eb2e2ffa4110f6"}], "stats": {"total": 133, "additions": 64, "deletions": 69}, "files": [{"sha": "3c2d39f5dfb8890c8fc4cc4db9b5e5c4cfb106e8", "filename": "crates/ide/src/call_hierarchy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcall_hierarchy.rs?ref=3f1b3df65bee923e5de0652ea4b676530da29127", "patch": "@@ -8,7 +8,7 @@ use ide_db::RootDatabase;\n use syntax::{ast, match_ast, AstNode, TextRange};\n \n use crate::{\n-    display::ToNav, goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n+    display::TryToNav, goto_definition, references, FilePosition, NavigationTarget, RangeInfo,\n };\n \n #[derive(Debug, Clone)]\n@@ -61,7 +61,7 @@ pub(crate) fn incoming_calls(db: &RootDatabase, position: FilePosition) -> Optio\n                 match node {\n                     ast::Fn(it) => {\n                         let def = sema.to_def(&it)?;\n-                        Some(def.to_nav(sema.db))\n+                        def.try_to_nav(sema.db)\n                     },\n                     _ => None,\n                 }\n@@ -99,15 +99,15 @@ pub(crate) fn outgoing_calls(db: &RootDatabase, position: FilePosition) -> Optio\n                     match callable.kind() {\n                         hir::CallableKind::Function(it) => {\n                             let fn_def: hir::Function = it.into();\n-                            let nav = fn_def.to_nav(db);\n+                            let nav = fn_def.try_to_nav(db)?;\n                             Some(nav)\n                         }\n                         _ => None,\n                     }\n                 }\n                 FnCallNode::MethodCallExpr(expr) => {\n                     let function = sema.resolve_method_call(&expr)?;\n-                    Some(function.to_nav(db))\n+                    function.try_to_nav(db)\n                 }\n             } {\n                 Some((func_target, name_ref.syntax().text_range()))"}, {"sha": "1fb26c22660b47afeafb444c0a5990a07f4f85e0", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 50, "deletions": 55, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=3f1b3df65bee923e5de0652ea4b676530da29127", "patch": "@@ -211,12 +211,12 @@ impl TryToNav for Definition {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         match self {\n             Definition::Macro(it) => it.try_to_nav(db),\n-            Definition::Field(it) => Some(it.to_nav(db)),\n+            Definition::Field(it) => it.try_to_nav(db),\n             Definition::ModuleDef(it) => it.try_to_nav(db),\n-            Definition::SelfType(it) => Some(it.to_nav(db)),\n+            Definition::SelfType(it) => it.try_to_nav(db),\n             Definition::Local(it) => Some(it.to_nav(db)),\n-            Definition::TypeParam(it) => Some(it.to_nav(db)),\n-            Definition::LifetimeParam(it) => Some(it.to_nav(db)),\n+            Definition::TypeParam(it) => it.try_to_nav(db),\n+            Definition::LifetimeParam(it) => it.try_to_nav(db),\n             Definition::Label(it) => Some(it.to_nav(db)),\n             Definition::ConstParam(it) => Some(it.to_nav(db)),\n         }\n@@ -225,18 +225,17 @@ impl TryToNav for Definition {\n \n impl TryToNav for hir::ModuleDef {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let res = match self {\n-            hir::ModuleDef::Module(it) => it.to_nav(db),\n-            hir::ModuleDef::Function(it) => it.to_nav(db),\n-            hir::ModuleDef::Adt(it) => it.to_nav(db),\n-            hir::ModuleDef::Variant(it) => it.to_nav(db),\n-            hir::ModuleDef::Const(it) => it.to_nav(db),\n-            hir::ModuleDef::Static(it) => it.to_nav(db),\n-            hir::ModuleDef::Trait(it) => it.to_nav(db),\n-            hir::ModuleDef::TypeAlias(it) => it.to_nav(db),\n-            hir::ModuleDef::BuiltinType(_) => return None,\n-        };\n-        Some(res)\n+        match self {\n+            hir::ModuleDef::Module(it) => Some(it.to_nav(db)),\n+            hir::ModuleDef::Function(it) => it.try_to_nav(db),\n+            hir::ModuleDef::Adt(it) => it.try_to_nav(db),\n+            hir::ModuleDef::Variant(it) => it.try_to_nav(db),\n+            hir::ModuleDef::Const(it) => it.try_to_nav(db),\n+            hir::ModuleDef::Static(it) => it.try_to_nav(db),\n+            hir::ModuleDef::Trait(it) => it.try_to_nav(db),\n+            hir::ModuleDef::TypeAlias(it) => it.try_to_nav(db),\n+            hir::ModuleDef::BuiltinType(_) => None,\n+        }\n     }\n }\n \n@@ -271,22 +270,21 @@ impl ToNavFromAst for hir::Trait {\n     const KIND: SymbolKind = SymbolKind::Trait;\n }\n \n-impl<D> ToNav for D\n+impl<D> TryToNav for D\n where\n     D: HasSource + ToNavFromAst + Copy + HasAttrs,\n     D::Ast: ast::NameOwner + ShortLabel,\n {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        #[allow(deprecated)]\n-        let src = self.source_old(db);\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let src = self.source(db)?;\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().map(|it| it as &dyn ast::NameOwner),\n             D::KIND,\n         );\n         res.docs = self.docs(db);\n         res.description = src.value.short_label();\n-        res\n+        Some(res)\n     }\n }\n \n@@ -305,10 +303,9 @@ impl ToNav for hir::Module {\n     }\n }\n \n-impl ToNav for hir::Impl {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        #[allow(deprecated)]\n-        let src = self.source_old(db);\n+impl TryToNav for hir::Impl {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let src = self.source(db)?;\n         let derive_attr = self.is_builtin_derive(db);\n         let frange = if let Some(item) = &derive_attr {\n             item.syntax().original_file_range(db)\n@@ -321,22 +318,21 @@ impl ToNav for hir::Impl {\n             src.value.self_ty().map(|ty| src.with_value(ty.syntax()).original_file_range(db).range)\n         };\n \n-        NavigationTarget::from_syntax(\n+        Some(NavigationTarget::from_syntax(\n             frange.file_id,\n             \"impl\".into(),\n             focus_range,\n             frange.range,\n             SymbolKind::Impl,\n-        )\n+        ))\n     }\n }\n \n-impl ToNav for hir::Field {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        #[allow(deprecated)]\n-        let src = self.source_old(db);\n+impl TryToNav for hir::Field {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let src = self.source(db)?;\n \n-        match &src.value {\n+        let field_source = match &src.value {\n             FieldSource::Named(it) => {\n                 let mut res =\n                     NavigationTarget::from_named(db, src.with_value(it), SymbolKind::Field);\n@@ -354,7 +350,8 @@ impl ToNav for hir::Field {\n                     SymbolKind::Field,\n                 )\n             }\n-        }\n+        };\n+        Some(field_source)\n     }\n }\n \n@@ -372,22 +369,22 @@ impl TryToNav for hir::MacroDef {\n     }\n }\n \n-impl ToNav for hir::Adt {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+impl TryToNav for hir::Adt {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         match self {\n-            hir::Adt::Struct(it) => it.to_nav(db),\n-            hir::Adt::Union(it) => it.to_nav(db),\n-            hir::Adt::Enum(it) => it.to_nav(db),\n+            hir::Adt::Struct(it) => it.try_to_nav(db),\n+            hir::Adt::Union(it) => it.try_to_nav(db),\n+            hir::Adt::Enum(it) => it.try_to_nav(db),\n         }\n     }\n }\n \n-impl ToNav for hir::AssocItem {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+impl TryToNav for hir::AssocItem {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         match self {\n-            AssocItem::Function(it) => it.to_nav(db),\n-            AssocItem::Const(it) => it.to_nav(db),\n-            AssocItem::TypeAlias(it) => it.to_nav(db),\n+            AssocItem::Function(it) => it.try_to_nav(db),\n+            AssocItem::Const(it) => it.try_to_nav(db),\n+            AssocItem::TypeAlias(it) => it.try_to_nav(db),\n         }\n     }\n }\n@@ -441,10 +438,9 @@ impl ToNav for hir::Label {\n     }\n }\n \n-impl ToNav for hir::TypeParam {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        #[allow(deprecated)]\n-        let src = self.source_old(db);\n+impl TryToNav for hir::TypeParam {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let src = self.source(db)?;\n         let full_range = match &src.value {\n             Either::Left(it) => it.syntax().text_range(),\n             Either::Right(it) => it.syntax().text_range(),\n@@ -453,7 +449,7 @@ impl ToNav for hir::TypeParam {\n             Either::Left(_) => None,\n             Either::Right(it) => it.name().map(|it| it.syntax().text_range()),\n         };\n-        NavigationTarget {\n+        Some(NavigationTarget {\n             file_id: src.file_id.original_file(db),\n             name: self.name(db).to_string().into(),\n             kind: Some(SymbolKind::TypeParam),\n@@ -462,16 +458,15 @@ impl ToNav for hir::TypeParam {\n             container_name: None,\n             description: None,\n             docs: None,\n-        }\n+        })\n     }\n }\n \n-impl ToNav for hir::LifetimeParam {\n-    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        #[allow(deprecated)]\n-        let src = self.source_old(db);\n+impl TryToNav for hir::LifetimeParam {\n+    fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n+        let src = self.source(db)?;\n         let full_range = src.value.syntax().text_range();\n-        NavigationTarget {\n+        Some(NavigationTarget {\n             file_id: src.file_id.original_file(db),\n             name: self.name(db).to_string().into(),\n             kind: Some(SymbolKind::LifetimeParam),\n@@ -480,7 +475,7 @@ impl ToNav for hir::LifetimeParam {\n             container_name: None,\n             description: None,\n             docs: None,\n-        }\n+        })\n     }\n }\n "}, {"sha": "da9378a97e638870d558ed792cd7f629157398e9", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=3f1b3df65bee923e5de0652ea4b676530da29127", "patch": "@@ -2,7 +2,7 @@ use hir::{Crate, Impl, Semantics};\n use ide_db::RootDatabase;\n use syntax::{algo::find_node_at_offset, ast, AstNode};\n \n-use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n \n // Feature: Go to Implementation\n //\n@@ -55,7 +55,7 @@ fn impls_for_def(\n         impls\n             .into_iter()\n             .filter(|impl_def| ty.is_equal_for_find_impls(&impl_def.target_ty(sema.db)))\n-            .map(|imp| imp.to_nav(sema.db))\n+            .filter_map(|imp| imp.try_to_nav(sema.db))\n             .collect(),\n     )\n }\n@@ -69,7 +69,7 @@ fn impls_for_trait(\n \n     let impls = Impl::for_trait(sema.db, krate, tr);\n \n-    Some(impls.into_iter().map(|imp| imp.to_nav(sema.db)).collect())\n+    Some(impls.into_iter().filter_map(|imp| imp.try_to_nav(sema.db)).collect())\n }\n \n #[cfg(test)]"}, {"sha": "7e84e06bea4d1ebef035f0bda438a3f12febf0c7", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=3f1b3df65bee923e5de0652ea4b676530da29127", "patch": "@@ -1,7 +1,7 @@\n use ide_db::RootDatabase;\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset, T};\n \n-use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{display::TryToNav, FilePosition, NavigationTarget, RangeInfo};\n \n // Feature: Go to Type Definition\n //\n@@ -37,7 +37,7 @@ pub(crate) fn goto_type_definition(\n \n     let adt_def = ty.autoderef(db).filter_map(|ty| ty.as_adt()).last()?;\n \n-    let nav = adt_def.to_nav(db);\n+    let nav = adt_def.try_to_nav(db)?;\n     Some(RangeInfo::new(node.text_range(), vec![nav]))\n }\n "}, {"sha": "2737c900f4c9f55664de0255bf729819dcb8f5ff", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1b3df65bee923e5de0652ea4b676530da29127/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=3f1b3df65bee923e5de0652ea4b676530da29127", "patch": "@@ -13,7 +13,7 @@ use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset,\n use test_utils::mark;\n \n use crate::{\n-    display::{macro_label, ShortLabel, ToNav, TryToNav},\n+    display::{macro_label, ShortLabel, TryToNav},\n     doc_links::{remove_links, rewrite_links},\n     markdown_remove::remove_markdown,\n     markup::Markup,\n@@ -183,10 +183,10 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n \n     match def {\n         Definition::ModuleDef(it) => match it {\n-            ModuleDef::Adt(Adt::Struct(it)) => Some(to_action(it.to_nav(db))),\n-            ModuleDef::Adt(Adt::Union(it)) => Some(to_action(it.to_nav(db))),\n-            ModuleDef::Adt(Adt::Enum(it)) => Some(to_action(it.to_nav(db))),\n-            ModuleDef::Trait(it) => Some(to_action(it.to_nav(db))),\n+            ModuleDef::Adt(Adt::Struct(it)) => Some(to_action(it.try_to_nav(db)?)),\n+            ModuleDef::Adt(Adt::Union(it)) => Some(to_action(it.try_to_nav(db)?)),\n+            ModuleDef::Adt(Adt::Enum(it)) => Some(to_action(it.try_to_nav(db)?)),\n+            ModuleDef::Trait(it) => Some(to_action(it.try_to_nav(db)?)),\n             _ => None,\n         },\n         _ => None,"}]}