{"sha": "a04473e2bb95483e84404c57426ee9ed21fa5d6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNDQ3M2UyYmI5NTQ4M2U4NDQwNGM1NzQyNmVlOWVkMjFmYTVkNmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-07T14:00:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-07T14:00:45Z"}, "message": "Semi statements", "tree": {"sha": "df5cb31dc154285516fc9e52ac16a65f45a29a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5cb31dc154285516fc9e52ac16a65f45a29a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a04473e2bb95483e84404c57426ee9ed21fa5d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a04473e2bb95483e84404c57426ee9ed21fa5d6b", "html_url": "https://github.com/rust-lang/rust/commit/a04473e2bb95483e84404c57426ee9ed21fa5d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a04473e2bb95483e84404c57426ee9ed21fa5d6b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd6754f1266ef3f4ce42f76974e379815234494", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd6754f1266ef3f4ce42f76974e379815234494", "html_url": "https://github.com/rust-lang/rust/commit/bcd6754f1266ef3f4ce42f76974e379815234494"}], "stats": {"total": 239, "additions": 224, "deletions": 15}, "files": [{"sha": "f1c3502bcea94ea3a967825158d624ca714ca195", "filename": "src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -142,6 +142,7 @@ Grammar(\n         \"STRUCT_PAT\",\n         \"TUPLE_STRUCT_PAT\",\n         \"TUPLE_PAT\",\n+        \"SLICE_PAT\",\n \n         // atoms\n         \"TUPLE_EXPR\","}, {"sha": "af9f47c5e40691c25335d1b0f319301ff2483f0b", "filename": "src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fatom.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -262,7 +262,7 @@ fn match_arm(p: &mut Parser) -> BlockLike {\n         expr_no_struct(p);\n     }\n     p.expect(FAT_ARROW);\n-    let ret = expr(p);\n+    let ret = expr_stmt(p);\n     m.complete(p, MATCH_ARM);\n     ret\n }\n@@ -295,7 +295,7 @@ pub(super) fn block_expr(p: &mut Parser) -> CompletedMarker {\n                     // test pub_expr\n                     // fn foo() { pub 92; } //FIXME\n                     items::MaybeItem::None => {\n-                        let is_blocklike = expressions::expr(p) == BlockLike::Block;\n+                        let is_blocklike = expressions::expr_stmt(p) == BlockLike::Block;\n                         if p.eat(SEMI) || (is_blocklike && !p.at(R_CURLY)) {\n                             m.complete(p, EXPR_STMT);\n                         } else {"}, {"sha": "dcbb1e2a8f75ece3ad159ca0f73bf4bdc372b5aa", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -6,12 +6,17 @@ pub(super) use self::atom::literal;\n const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n pub(super) fn expr(p: &mut Parser) -> BlockLike {\n-    let r = Restrictions { forbid_structs: false };\n+    let r = Restrictions { forbid_structs: false, prefer_stmt: false };\n+    expr_bp(p, r, 1)\n+}\n+\n+pub(super) fn expr_stmt(p: &mut Parser) -> BlockLike {\n+    let r = Restrictions { forbid_structs: false, prefer_stmt: true };\n     expr_bp(p, r, 1)\n }\n \n fn expr_no_struct(p: &mut Parser) {\n-    let r = Restrictions { forbid_structs: true };\n+    let r = Restrictions { forbid_structs: true, prefer_stmt: false };\n     expr_bp(p, r, 1);\n }\n \n@@ -30,7 +35,8 @@ pub(super) fn block(p: &mut Parser) {\n \n #[derive(Clone, Copy)]\n struct Restrictions {\n-    forbid_structs: bool\n+    forbid_structs: bool,\n+    prefer_stmt: bool,\n }\n \n enum Op {\n@@ -86,12 +92,18 @@ fn current_op(p: &Parser) -> (u8, Op) {\n \n // Parses expression with binding power of at least bp.\n fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n-    let mut block: bool;\n     let mut lhs = match lhs(p, r) {\n         Some(lhs) => {\n-            block = is_block(lhs.kind());\n+            // test stmt_bin_expr_ambiguity\n+            // fn foo() {\n+            //     let _ = {1} & 2;\n+            //     {1} &2;\n+            // }\n+            if r.prefer_stmt && is_block(lhs.kind()) {\n+                return BlockLike::Block;\n+            }\n             lhs\n-        },\n+        }\n         None => return BlockLike::NotBlock,\n     };\n \n@@ -101,7 +113,6 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n         if op_bp < bp {\n             break;\n         }\n-        block = false;\n         let m = lhs.precede(p);\n         match op {\n             Op::Simple => p.bump(),\n@@ -112,7 +123,7 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> BlockLike {\n         expr_bp(p, r, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n-    if block { BlockLike::Block } else { BlockLike::NotBlock }\n+    BlockLike::NotBlock\n }\n \n // test no_semi_after_block\n@@ -171,18 +182,27 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n         }\n         _ => {\n             let lhs = atom::atom_expr(p, r)?;\n-            return Some(postfix_expr(p, lhs));\n+            return Some(postfix_expr(p, r, lhs));\n         }\n     };\n     expr_bp(p, r, 255);\n     Some(m.complete(p, kind))\n }\n \n-fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n+fn postfix_expr(p: &mut Parser, r: Restrictions, mut lhs: CompletedMarker) -> CompletedMarker {\n+    let mut allow_calls = !r.prefer_stmt || !is_block(lhs.kind());\n     loop {\n         lhs = match p.current() {\n-            L_PAREN => call_expr(p, lhs),\n-            L_BRACK => index_expr(p, lhs),\n+            // test stmt_postfix_expr_ambiguity\n+            // fn foo() {\n+            //     match () {\n+            //         _ => {}\n+            //         () => {}\n+            //         [] => {}\n+            //     }\n+            // }\n+            L_PAREN if allow_calls => call_expr(p, lhs),\n+            L_BRACK if allow_calls => index_expr(p, lhs),\n             DOT if p.nth(1) == IDENT => if p.nth(2) == L_PAREN || p.nth(2) == COLONCOLON {\n                 method_call_expr(p, lhs)\n             } else {\n@@ -199,7 +219,8 @@ fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n             QUESTION => try_expr(p, lhs),\n             AS_KW => cast_expr(p, lhs),\n             _ => break,\n-        }\n+        };\n+        allow_calls = true\n     }\n     lhs\n }"}, {"sha": "36ead7561dcee25e4e8c27b7d74c80176703e362", "filename": "src/grammar/patterns.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fpatterns.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -17,6 +17,7 @@ pub(super) fn pattern(p: &mut Parser) {\n         UNDERSCORE => placeholder_pat(p),\n         AMP => ref_pat(p),\n         L_PAREN => tuple_pat(p),\n+        L_BRACK => slice_pat(p),\n         _ => p.err_and_bump(\"expected pattern\"),\n     }\n }\n@@ -128,6 +129,28 @@ fn tuple_pat(p: &mut Parser) {\n     m.complete(p, TUPLE_PAT);\n }\n \n+// test slice_pat\n+// fn main() {\n+//     let [a, b, ..] = [];\n+// }\n+fn slice_pat(p: &mut Parser) {\n+    assert!(p.at(L_BRACK));\n+    let m = p.start();\n+    p.bump();\n+    while !p.at(EOF) && !p.at(R_BRACK) {\n+        match p.current() {\n+            DOTDOT => p.bump(),\n+            _ => pattern(p),\n+        }\n+        if !p.at(R_BRACK) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(R_BRACK);\n+\n+    m.complete(p, SLICE_PAT);\n+}\n+\n // test bind_pat\n // fn main() {\n //     let a = ();"}, {"sha": "0c6a1f8e72f42de1741c60a020bbd1ee555d8128", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -134,6 +134,7 @@ pub enum SyntaxKind {\n     STRUCT_PAT,\n     TUPLE_STRUCT_PAT,\n     TUPLE_PAT,\n+    SLICE_PAT,\n     TUPLE_EXPR,\n     ARRAY_EXPR,\n     PAREN_EXPR,\n@@ -372,6 +373,7 @@ impl SyntaxKind {\n             STRUCT_PAT => &SyntaxInfo { name: \"STRUCT_PAT\" },\n             TUPLE_STRUCT_PAT => &SyntaxInfo { name: \"TUPLE_STRUCT_PAT\" },\n             TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n+            SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n             ARRAY_EXPR => &SyntaxInfo { name: \"ARRAY_EXPR\" },\n             PAREN_EXPR => &SyntaxInfo { name: \"PAREN_EXPR\" },"}, {"sha": "2edd578f9d7319f689c5b46ff9079ab0622229e6", "filename": "tests/data/parser/inline/0087_stmt_postfix_expr_ambiguity.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0087_stmt_postfix_expr_ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0087_stmt_postfix_expr_ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0087_stmt_postfix_expr_ambiguity.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -0,0 +1,7 @@\n+fn foo() {\n+    match () {\n+        _ => {}\n+        () => {}\n+        [] => {}\n+    }\n+}"}, {"sha": "47b4d44810c76650f58523e21a228ca00d7e0e45", "filename": "tests/data/parser/inline/0087_stmt_postfix_expr_ambiguity.txt", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0087_stmt_postfix_expr_ambiguity.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0087_stmt_postfix_expr_ambiguity.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0087_stmt_postfix_expr_ambiguity.txt?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -0,0 +1,58 @@\n+FILE@[0; 84)\n+  FN_ITEM@[0; 83)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 83)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      MATCH_EXPR@[15; 81)\n+        MATCH_KW@[15; 20)\n+        WHITESPACE@[20; 21)\n+        TUPLE_EXPR@[21; 23)\n+          L_PAREN@[21; 22)\n+          R_PAREN@[22; 23)\n+        WHITESPACE@[23; 24)\n+        L_CURLY@[24; 25)\n+        WHITESPACE@[25; 34)\n+        MATCH_ARM@[34; 41)\n+          PLACEHOLDER_PAT@[34; 35)\n+            UNDERSCORE@[34; 35)\n+          WHITESPACE@[35; 36)\n+          FAT_ARROW@[36; 38)\n+          WHITESPACE@[38; 39)\n+          BLOCK_EXPR@[39; 41)\n+            L_CURLY@[39; 40)\n+            R_CURLY@[40; 41)\n+        WHITESPACE@[41; 50)\n+        MATCH_ARM@[50; 58)\n+          TUPLE_PAT@[50; 52)\n+            L_PAREN@[50; 51)\n+            R_PAREN@[51; 52)\n+          WHITESPACE@[52; 53)\n+          FAT_ARROW@[53; 55)\n+          WHITESPACE@[55; 56)\n+          BLOCK_EXPR@[56; 58)\n+            L_CURLY@[56; 57)\n+            R_CURLY@[57; 58)\n+        WHITESPACE@[58; 67)\n+        MATCH_ARM@[67; 75)\n+          SLICE_PAT@[67; 69)\n+            L_BRACK@[67; 68)\n+            R_BRACK@[68; 69)\n+          WHITESPACE@[69; 70)\n+          FAT_ARROW@[70; 72)\n+          WHITESPACE@[72; 73)\n+          BLOCK_EXPR@[73; 75)\n+            L_CURLY@[73; 74)\n+            R_CURLY@[74; 75)\n+        WHITESPACE@[75; 80)\n+        R_CURLY@[80; 81)\n+      WHITESPACE@[81; 82)\n+      R_CURLY@[82; 83)\n+  WHITESPACE@[83; 84)"}, {"sha": "37b8437426d4adea1dfe2875ed93997bcd9a614d", "filename": "tests/data/parser/inline/0088_stmt_bin_expr_ambiguity.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0088_stmt_bin_expr_ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0088_stmt_bin_expr_ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0088_stmt_bin_expr_ambiguity.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    let _ = {1} & 2;\n+    {1} &2;\n+}"}, {"sha": "df0aa44b38c72fab554c747ffda07b8fed3d7dd4", "filename": "tests/data/parser/inline/0088_stmt_bin_expr_ambiguity.txt", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0088_stmt_bin_expr_ambiguity.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0088_stmt_bin_expr_ambiguity.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0088_stmt_bin_expr_ambiguity.txt?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -0,0 +1,50 @@\n+FILE@[0; 46)\n+  FN_ITEM@[0; 45)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 45)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      LET_STMT@[15; 31)\n+        LET_KW@[15; 18)\n+        WHITESPACE@[18; 19)\n+        PLACEHOLDER_PAT@[19; 20)\n+          UNDERSCORE@[19; 20)\n+        WHITESPACE@[20; 21)\n+        EQ@[21; 22)\n+        WHITESPACE@[22; 23)\n+        BIN_EXPR@[23; 30)\n+          BLOCK_EXPR@[23; 26)\n+            L_CURLY@[23; 24)\n+            LITERAL@[24; 25)\n+              INT_NUMBER@[24; 25) \"1\"\n+            R_CURLY@[25; 26)\n+          WHITESPACE@[26; 27)\n+          AMP@[27; 28)\n+          WHITESPACE@[28; 29)\n+          LITERAL@[29; 30)\n+            INT_NUMBER@[29; 30) \"2\"\n+        SEMI@[30; 31)\n+      WHITESPACE@[31; 36)\n+      EXPR_STMT@[36; 39)\n+        BLOCK_EXPR@[36; 39)\n+          L_CURLY@[36; 37)\n+          LITERAL@[37; 38)\n+            INT_NUMBER@[37; 38) \"1\"\n+          R_CURLY@[38; 39)\n+      WHITESPACE@[39; 40)\n+      EXPR_STMT@[40; 43)\n+        REF_EXPR@[40; 42)\n+          AMP@[40; 41)\n+          LITERAL@[41; 42)\n+            INT_NUMBER@[41; 42) \"2\"\n+        SEMI@[42; 43)\n+      WHITESPACE@[43; 44)\n+      R_CURLY@[44; 45)\n+  WHITESPACE@[45; 46)"}, {"sha": "7955973b952a770d71d5fe786f83fde238e8e8e0", "filename": "tests/data/parser/inline/0089_slice_pat.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0089_slice_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0089_slice_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0089_slice_pat.rs?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let [a, b, ..] = [];\n+}"}, {"sha": "1e7f201199a361b8fe7898e8577b777e81fdce95", "filename": "tests/data/parser/inline/0089_slice_pat.txt", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0089_slice_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a04473e2bb95483e84404c57426ee9ed21fa5d6b/tests%2Fdata%2Fparser%2Finline%2F0089_slice_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0089_slice_pat.txt?ref=a04473e2bb95483e84404c57426ee9ed21fa5d6b", "patch": "@@ -0,0 +1,40 @@\n+FILE@[0; 39)\n+  FN_ITEM@[0; 38)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8)\n+      R_PAREN@[8; 9)\n+    WHITESPACE@[9; 10)\n+    BLOCK_EXPR@[10; 38)\n+      L_CURLY@[10; 11)\n+      WHITESPACE@[11; 16)\n+      LET_STMT@[16; 36)\n+        LET_KW@[16; 19)\n+        WHITESPACE@[19; 20)\n+        SLICE_PAT@[20; 30)\n+          L_BRACK@[20; 21)\n+          BIND_PAT@[21; 22)\n+            NAME@[21; 22)\n+              IDENT@[21; 22) \"a\"\n+          COMMA@[22; 23)\n+          WHITESPACE@[23; 24)\n+          BIND_PAT@[24; 25)\n+            NAME@[24; 25)\n+              IDENT@[24; 25) \"b\"\n+          COMMA@[25; 26)\n+          WHITESPACE@[26; 27)\n+          DOTDOT@[27; 29)\n+          R_BRACK@[29; 30)\n+        WHITESPACE@[30; 31)\n+        EQ@[31; 32)\n+        WHITESPACE@[32; 33)\n+        ARRAY_EXPR@[33; 35)\n+          L_BRACK@[33; 34)\n+          R_BRACK@[34; 35)\n+        SEMI@[35; 36)\n+      WHITESPACE@[36; 37)\n+      R_CURLY@[37; 38)\n+  WHITESPACE@[38; 39)"}]}