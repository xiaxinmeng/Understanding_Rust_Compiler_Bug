{"sha": "5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "node_id": "C_kwDOAAsO6NoAKDU4MTBjODE4OGEyY2ZjMzZhODAyNmFlMDY4Yzk4NWFhOWEyZjVmMmI", "commit": {"author": {"name": "Justin Ridgewell", "email": "justin@ridgewell.name", "date": "2022-08-09T00:20:45Z"}, "committer": {"name": "Justin Ridgewell", "email": "justin@ridgewell.name", "date": "2022-08-09T01:05:56Z"}, "message": "Implement IntoFuture type inference", "tree": {"sha": "56113cf9b774be9bbfe17dcb8e70bad28ad606e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56113cf9b774be9bbfe17dcb8e70bad28ad606e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "html_url": "https://github.com/rust-lang/rust/commit/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/comments", "author": {"login": "jridgewell", "id": 112982, "node_id": "MDQ6VXNlcjExMjk4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/112982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jridgewell", "html_url": "https://github.com/jridgewell", "followers_url": "https://api.github.com/users/jridgewell/followers", "following_url": "https://api.github.com/users/jridgewell/following{/other_user}", "gists_url": "https://api.github.com/users/jridgewell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jridgewell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jridgewell/subscriptions", "organizations_url": "https://api.github.com/users/jridgewell/orgs", "repos_url": "https://api.github.com/users/jridgewell/repos", "events_url": "https://api.github.com/users/jridgewell/events{/privacy}", "received_events_url": "https://api.github.com/users/jridgewell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jridgewell", "id": 112982, "node_id": "MDQ6VXNlcjExMjk4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/112982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jridgewell", "html_url": "https://github.com/jridgewell", "followers_url": "https://api.github.com/users/jridgewell/followers", "following_url": "https://api.github.com/users/jridgewell/following{/other_user}", "gists_url": "https://api.github.com/users/jridgewell/gists{/gist_id}", "starred_url": "https://api.github.com/users/jridgewell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jridgewell/subscriptions", "organizations_url": "https://api.github.com/users/jridgewell/orgs", "repos_url": "https://api.github.com/users/jridgewell/repos", "events_url": "https://api.github.com/users/jridgewell/events{/privacy}", "received_events_url": "https://api.github.com/users/jridgewell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3792720086faccb3ee085558ad082c979785f437", "url": "https://api.github.com/repos/rust-lang/rust/commits/3792720086faccb3ee085558ad082c979785f437", "html_url": "https://github.com/rust-lang/rust/commit/3792720086faccb3ee085558ad082c979785f437"}], "stats": {"total": 97, "additions": 75, "deletions": 22}, "files": [{"sha": "9ddafe0181076d1adc9db5da6bed76baa4d87eea", "filename": "crates/hir-expand/src/mod_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -257,6 +257,7 @@ macro_rules! __known_path {\n     (core::ops::RangeToInclusive) => {};\n     (core::ops::RangeInclusive) => {};\n     (core::future::Future) => {};\n+    (core::future::IntoFuture) => {};\n     (core::ops::Try) => {};\n     ($path:path) => {\n         compile_error!(\"Please register your known path in the path module\")"}, {"sha": "757db79db4db3e4c78fd2caf3133aeb482a14ef1", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -258,6 +258,7 @@ pub mod known {\n         Try,\n         Ok,\n         Future,\n+        IntoFuture,\n         Result,\n         Option,\n         Output,\n@@ -391,6 +392,7 @@ pub mod known {\n         future_trait,\n         index,\n         index_mut,\n+        into_future,\n         mul_assign,\n         mul,\n         neg,"}, {"sha": "95a7229e8795a3bb7aa58fd72c6b9b6ef9d748d6", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -875,7 +875,10 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n-        let trait_ = self.resolve_lang_item(name![future_trait])?.as_trait()?;\n+        let trait_ = self\n+            .resolver\n+            .resolve_known_trait(self.db.upcast(), &path![core::future::IntoFuture])\n+            .or_else(|| self.resolve_lang_item(name![future_trait])?.as_trait())?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n "}, {"sha": "730ebe2357d14ed77a097cf2f2b9fa42c3322550", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -137,6 +137,31 @@ fn not_send() -> Box<dyn Future<Output = ()> + 'static> {\n     );\n }\n \n+#[test]\n+fn into_future_trait() {\n+    check_types(\n+        r#\"\n+//- minicore: future\n+struct Futurable;\n+impl core::future::IntoFuture for Futurable {\n+    type Output = u64;\n+    type IntoFuture = IntFuture;\n+}\n+\n+struct IntFuture;\n+impl core::future::Future for IntFuture {\n+    type Output = u64;\n+}\n+\n+fn test() {\n+    let r = Futurable;\n+    let v = r.await;\n+    v;\n+} //^ u64\n+\"#,\n+    );\n+}\n+\n #[test]\n fn infer_try() {\n     check_types("}, {"sha": "800ea58ba2920d2f5c326ad6b53bcbd3ab45097f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -2780,6 +2780,8 @@ impl Type {\n     /// Checks that particular type `ty` implements `std::future::Future`.\n     /// This function is used in `.await` syntax completion.\n     pub fn impls_future(&self, db: &dyn HirDatabase) -> bool {\n+        // FIXME: This should be checking for IntoFuture trait, but I don't know how to find the\n+        // right TraitId in this crate.\n         let std_future_trait = db\n             .lang_item(self.env.krate, SmolStr::new_inline(\"future_trait\"))\n             .and_then(|it| it.as_trait());"}, {"sha": "756772cf84e56a973bf6b1240d256637daf3921b", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -269,6 +269,8 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         await_expr: &ast::AwaitExpr,\n     ) -> Option<FunctionId> {\n+        // FIXME This should be pointing to the poll of IntoFuture::Output's Future impl, but I\n+        // don't know how to resolve the Output type so that we can query for its poll method.\n         let ty = self.ty_of_expr(db, &await_expr.expr()?.into())?;\n \n         let op_fn = db"}, {"sha": "68d59daef485903b687d43b763a7931647073d40", "filename": "crates/ide-assists/src/utils/suggest_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -55,6 +55,7 @@ const USELESS_METHODS: &[&str] = &[\n     \"iter\",\n     \"into_iter\",\n     \"iter_mut\",\n+    \"into_future\",\n ];\n \n pub(crate) fn for_generic_parameter(ty: &ast::ImplTraitType) -> SmolStr {"}, {"sha": "032b23725f82a9b38f2c77f914c9066606335c56", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -75,16 +75,17 @@ impl Future for A {}\n fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                kw await expr.await\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn ref   &expr\n-                sn refm  &mut expr\n+                kw await                  expr.await\n+                me into_future() (as IntoFuture) fn(self) -> <Self as IntoFuture>::IntoFuture\n+                sn box                    Box::new(expr)\n+                sn call                   function(expr)\n+                sn dbg                    dbg!(expr)\n+                sn dbgr                   dbg!(&expr)\n+                sn let                    let\n+                sn letm                   let mut\n+                sn match                  match expr {}\n+                sn ref                    &expr\n+                sn refm                   &mut expr\n             \"#]],\n         );\n \n@@ -98,18 +99,19 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                kw await expr.await\n-                sn box   Box::new(expr)\n-                sn call  function(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn let   let\n-                sn letm  let mut\n-                sn match match expr {}\n-                sn ref   &expr\n-                sn refm  &mut expr\n+                kw await                  expr.await\n+                me into_future() (use core::future::IntoFuture) fn(self) -> <Self as IntoFuture>::IntoFuture\n+                sn box                    Box::new(expr)\n+                sn call                   function(expr)\n+                sn dbg                    dbg!(expr)\n+                sn dbgr                   dbg!(&expr)\n+                sn let                    let\n+                sn letm                   let mut\n+                sn match                  match expr {}\n+                sn ref                    &expr\n+                sn refm                   &mut expr\n             \"#]],\n-        )\n+        );\n     }\n \n     #[test]"}, {"sha": "6df29db4745d37840acc569b2e934b15fd06155f", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5810c8188a2cfc36a8026ae068c985aa9a2f5f2b/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=5810c8188a2cfc36a8026ae068c985aa9a2f5f2b", "patch": "@@ -471,6 +471,21 @@ pub mod future {\n         #[lang = \"poll\"]\n         fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;\n     }\n+\n+    pub trait IntoFuture {\n+        type Output;\n+        type IntoFuture: Future<Output = Self::Output>;\n+        #[lang = \"into_future\"]\n+        fn into_future(self) -> Self::IntoFuture;\n+    }\n+\n+    impl<F: Future> IntoFuture for F {\n+        type Output = F::Output;\n+        type IntoFuture = F;\n+        fn into_future(self) -> F {\n+            self\n+        }\n+    }\n }\n pub mod task {\n     pub enum Poll<T> {"}]}