{"sha": "8af85263f7cd249356382aa61b98094594165364", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjg1MjYzZjdjZDI0OTM1NjM4MmFhNjFiOTgwOTQ1OTQxNjUzNjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-14T07:36:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-14T07:36:47Z"}, "message": "Merge #2235\n\n2235: Handle macro-generated expressions slightly less wrong r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bed1d8bfef7cd3c42917d30fae2d8002dd00c38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed1d8bfef7cd3c42917d30fae2d8002dd00c38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af85263f7cd249356382aa61b98094594165364", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzQQPCRBK7hj4Ov3rIwAAdHIIAH9ZzDn7Ojrk6qv902EsueAo\nvxFlKutKAMJy1q287QMmV3FgS+OsRugTzm32q6QdnZdUNuTeIOUzS2kxsGrLlg4z\nkiPhGwFWtKedBVSKXBRAbKVud6+G8LKfyRar4F5RV8GhLLJNftTN40bHWfFYM5r6\nLDdSLDeqmKj8/upl6oLxYVr4eI8zHKA8dtkZW57IQZ9uiwrHzEm1LWYbrrthR2RH\nUQAuMqffmsO6uSgDXUpLDdC+tLsV5LPfXm8zW7pFI4MWOjwRhHMpm0cFgcdYHY84\ntKLh/Gd4gHWs7h4G1hnz0cM2W/Q1KqJ947ubOA5ggViTZLfwP84eYgpn1u5GuEM=\n=VCPt\n-----END PGP SIGNATURE-----\n", "payload": "tree bed1d8bfef7cd3c42917d30fae2d8002dd00c38c\nparent 38a3c76d154231ded00ca1decfd55bdaebe67bae\nparent da2ca01ebaaaaa47aa09c5848c53b145a68af8fa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573717007 +0000\ncommitter GitHub <noreply@github.com> 1573717007 +0000\n\nMerge #2235\n\n2235: Handle macro-generated expressions slightly less wrong r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af85263f7cd249356382aa61b98094594165364", "html_url": "https://github.com/rust-lang/rust/commit/8af85263f7cd249356382aa61b98094594165364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af85263f7cd249356382aa61b98094594165364/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a3c76d154231ded00ca1decfd55bdaebe67bae", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a3c76d154231ded00ca1decfd55bdaebe67bae", "html_url": "https://github.com/rust-lang/rust/commit/38a3c76d154231ded00ca1decfd55bdaebe67bae"}, {"sha": "da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa", "html_url": "https://github.com/rust-lang/rust/commit/da2ca01ebaaaaa47aa09c5848c53b145a68af8fa"}], "stats": {"total": 256, "additions": 156, "deletions": 100}, "files": [{"sha": "d19f5d14cea08e8d7f0fd1539c07fd33ab534999", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -40,8 +40,8 @@ pub(crate) fn body_with_source_map_query(\n             (src.file_id, src.ast.body())\n         }\n     };\n-    let resolver = hir_def::body::MacroResolver::new(db, def.module(db).id);\n-    let (body, source_map) = Body::new(db, resolver, file_id, params, body);\n+    let expander = hir_def::body::Expander::new(db, file_id, def.module(db).id);\n+    let (body, source_map) = Body::new(db, expander, params, body);\n     (Arc::new(body), Arc::new(source_map))\n }\n "}, {"sha": "afba66069869cae546fe146eab863d4fcc3c81cc", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -166,6 +166,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n \n #[cfg(test)]\n mod tests {\n+    use hir_expand::Source;\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, extract_offset};\n@@ -189,7 +190,10 @@ mod tests {\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n \n         let scopes = analyzer.scopes();\n-        let expr_id = analyzer.body_source_map().node_expr(&marker.into()).unwrap();\n+        let expr_id = analyzer\n+            .body_source_map()\n+            .node_expr(Source { file_id: file_id.into(), ast: &marker.into() })\n+            .unwrap();\n         let scope = scopes.scope_for(expr_id);\n \n         let actual = scopes"}, {"sha": "4b561c63dea7774aaa18fffeabe2189d3907142b", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -145,7 +145,8 @@ impl Local {\n             Some(res)\n         })?;\n         let (_body, source_map) = db.body_with_source_map(parent);\n-        let pat_id = source_map.node_pat(&src.ast.into())?;\n+        let src = src.map(ast::Pat::from);\n+        let pat_id = source_map.node_pat(src.as_ref())?;\n         Some(Local { parent, pat_id })\n     }\n }"}, {"sha": "88eed1137f7db98d07cad5c90d6b8174229246d5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -7,8 +7,11 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n-use hir_def::path::known;\n-use hir_expand::name::AsName;\n+use hir_def::{\n+    expr::{ExprId, PatId},\n+    path::known,\n+};\n+use hir_expand::{name::AsName, Source};\n use ra_db::FileId;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -93,6 +96,8 @@ fn def_with_body_from_child_node(\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n+    // FIXME: this doesn't handle macros at all\n+    file_id: FileId,\n     resolver: Resolver,\n     body_owner: Option<DefWithBody>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n@@ -147,7 +152,7 @@ impl SourceAnalyzer {\n             let source_map = def.body_source_map(db);\n             let scopes = db.expr_scopes(def);\n             let scope = match offset {\n-                None => scope_for(&scopes, &source_map, &node),\n+                None => scope_for(&scopes, &source_map, file_id.into(), &node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, file_id.into(), offset),\n             };\n             let resolver = expr::resolver_for_scope(db, def, scope);\n@@ -157,6 +162,7 @@ impl SourceAnalyzer {\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n+                file_id,\n             }\n         } else {\n             SourceAnalyzer {\n@@ -168,17 +174,28 @@ impl SourceAnalyzer {\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n+                file_id,\n             }\n         }\n     }\n \n+    fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n+        let src = Source { file_id: self.file_id.into(), ast: expr };\n+        self.body_source_map.as_ref()?.node_expr(src)\n+    }\n+\n+    fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n+        let src = Source { file_id: self.file_id.into(), ast: pat };\n+        self.body_source_map.as_ref()?.node_pat(src)\n+    }\n+\n     pub fn type_of(&self, _db: &impl HirDatabase, expr: &ast::Expr) -> Option<crate::Ty> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(expr)?;\n+        let expr_id = self.expr_id(expr)?;\n         Some(self.infer.as_ref()?[expr_id].clone())\n     }\n \n     pub fn type_of_pat(&self, _db: &impl HirDatabase, pat: &ast::Pat) -> Option<crate::Ty> {\n-        let pat_id = self.body_source_map.as_ref()?.node_pat(pat)?;\n+        let pat_id = self.pat_id(pat)?;\n         Some(self.infer.as_ref()?[pat_id].clone())\n     }\n \n@@ -191,22 +208,22 @@ impl SourceAnalyzer {\n     }\n \n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&call.clone().into())?;\n+        let expr_id = self.expr_id(&call.clone().into())?;\n         self.infer.as_ref()?.method_resolution(expr_id)\n     }\n \n     pub fn resolve_field(&self, field: &ast::FieldExpr) -> Option<crate::StructField> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&field.clone().into())?;\n+        let expr_id = self.expr_id(&field.clone().into())?;\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n     pub fn resolve_record_literal(&self, record_lit: &ast::RecordLit) -> Option<crate::VariantDef> {\n-        let expr_id = self.body_source_map.as_ref()?.node_expr(&record_lit.clone().into())?;\n+        let expr_id = self.expr_id(&record_lit.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n     }\n \n     pub fn resolve_record_pattern(&self, record_pat: &ast::RecordPat) -> Option<crate::VariantDef> {\n-        let pat_id = self.body_source_map.as_ref()?.node_pat(&record_pat.clone().into())?;\n+        let pat_id = self.pat_id(&record_pat.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n     }\n \n@@ -264,13 +281,13 @@ impl SourceAnalyzer {\n \n     pub fn resolve_path(&self, db: &impl HirDatabase, path: &ast::Path) -> Option<PathResolution> {\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n-            let expr_id = self.body_source_map.as_ref()?.node_expr(&path_expr.into())?;\n+            let expr_id = self.expr_id(&path_expr.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n                 return Some(PathResolution::AssocItem(assoc));\n             }\n         }\n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n-            let pat_id = self.body_source_map.as_ref()?.node_pat(&path_pat.into())?;\n+            let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc));\n             }\n@@ -285,7 +302,7 @@ impl SourceAnalyzer {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, name_ref.syntax());\n+        let scope = scope_for(scopes, source_map, self.file_id.into(), name_ref.syntax());\n         let ret = scopes\n             .scope_chain(scope)\n             .flat_map(|scope| scopes.entries(scope).iter())\n@@ -418,11 +435,12 @@ impl SourceAnalyzer {\n fn scope_for(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,\n+    file_id: HirFileId,\n     node: &SyntaxNode,\n ) -> Option<ScopeId> {\n     node.ancestors()\n         .filter_map(ast::Expr::cast)\n-        .filter_map(|it| source_map.node_expr(&it))\n+        .filter_map(|it| source_map.node_expr(Source { file_id, ast: &it }))\n         .find_map(|it| scopes.scope_for(it))\n }\n "}, {"sha": "75bba31c2192e63ea6f9d48bd2680bd0424fb160", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 85, "deletions": 19, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -3,9 +3,12 @@ mod lower;\n \n use std::{ops::Index, sync::Arc};\n \n-use hir_expand::{either::Either, HirFileId, MacroDefId, Source};\n+use hir_expand::{\n+    either::Either, hygiene::Hygiene, AstId, HirFileId, MacroCallLoc, MacroDefId, MacroFileKind,\n+    Source,\n+};\n use ra_arena::{map::ArenaMap, Arena};\n-use ra_syntax::{ast, AstPtr};\n+use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -16,25 +19,87 @@ use crate::{\n     ModuleId,\n };\n \n-pub struct MacroResolver {\n+pub struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n+    current_file_id: HirFileId,\n+    hygiene: Hygiene,\n     module: ModuleId,\n }\n \n-impl MacroResolver {\n-    pub fn new(db: &impl DefDatabase2, module: ModuleId) -> MacroResolver {\n-        MacroResolver { crate_def_map: db.crate_def_map(module.krate), module }\n+impl Expander {\n+    pub fn new(db: &impl DefDatabase2, current_file_id: HirFileId, module: ModuleId) -> Expander {\n+        let crate_def_map = db.crate_def_map(module.krate);\n+        let hygiene = Hygiene::new(db, current_file_id);\n+        Expander { crate_def_map, current_file_id, hygiene, module }\n     }\n \n-    pub(crate) fn resolve_path_as_macro(\n-        &self,\n+    fn expand(\n+        &mut self,\n         db: &impl DefDatabase2,\n-        path: &Path,\n-    ) -> Option<MacroDefId> {\n+        macro_call: ast::MacroCall,\n+    ) -> Option<(Mark, ast::Expr)> {\n+        let ast_id = AstId::new(\n+            self.current_file_id,\n+            db.ast_id_map(self.current_file_id).ast_id(&macro_call),\n+        );\n+\n+        if let Some(path) = macro_call.path().and_then(|path| self.parse_path(path)) {\n+            if let Some(def) = self.resolve_path_as_macro(db, &path) {\n+                let call_id = db.intern_macro(MacroCallLoc { def, ast_id });\n+                let file_id = call_id.as_file(MacroFileKind::Expr);\n+                if let Some(node) = db.parse_or_expand(file_id) {\n+                    if let Some(expr) = ast::Expr::cast(node) {\n+                        log::debug!(\"macro expansion {:#?}\", expr.syntax());\n+                        let mark = self.enter(db, file_id);\n+                        return Some((mark, expr));\n+                    }\n+                }\n+            }\n+        }\n+\n+        // FIXME: Instead of just dropping the error from expansion\n+        // report it\n+        None\n+    }\n+\n+    fn enter(&mut self, db: &impl DefDatabase2, file_id: HirFileId) -> Mark {\n+        let mark = Mark { file_id: self.current_file_id };\n+        self.hygiene = Hygiene::new(db, file_id);\n+        self.current_file_id = file_id;\n+        mark\n+    }\n+\n+    fn exit(&mut self, db: &impl DefDatabase2, mark: Mark) {\n+        self.hygiene = Hygiene::new(db, mark.file_id);\n+        self.current_file_id = mark.file_id;\n+        std::mem::forget(mark);\n+    }\n+\n+    fn to_source<T>(&self, ast: T) -> Source<T> {\n+        Source { file_id: self.current_file_id, ast }\n+    }\n+\n+    fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n+        Path::from_src(path, &self.hygiene)\n+    }\n+\n+    fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n         self.crate_def_map.resolve_path(db, self.module.module_id, path).0.get_macros()\n     }\n }\n \n+struct Mark {\n+    file_id: HirFileId,\n+}\n+\n+impl Drop for Mark {\n+    fn drop(&mut self) {\n+        if !std::thread::panicking() {\n+            panic!(\"dropped mark\")\n+        }\n+    }\n+}\n+\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n@@ -70,22 +135,21 @@ pub type PatSource = Source<PatPtr>;\n /// this properly for macros.\n #[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n-    expr_map: FxHashMap<ExprPtr, ExprId>,\n+    expr_map: FxHashMap<ExprSource, ExprId>,\n     expr_map_back: ArenaMap<ExprId, ExprSource>,\n-    pat_map: FxHashMap<PatPtr, PatId>,\n+    pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, PatSource>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n }\n \n impl Body {\n     pub fn new(\n         db: &impl DefDatabase2,\n-        resolver: MacroResolver,\n-        file_id: HirFileId,\n+        expander: Expander,\n         params: Option<ast::ParamList>,\n         body: Option<ast::Expr>,\n     ) -> (Body, BodySourceMap) {\n-        lower::lower(db, resolver, file_id, params, body)\n+        lower::lower(db, expander, params, body)\n     }\n \n     pub fn params(&self) -> &[PatId] {\n@@ -126,16 +190,18 @@ impl BodySourceMap {\n         self.expr_map_back.get(expr).copied()\n     }\n \n-    pub fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n-        self.expr_map.get(&Either::A(AstPtr::new(node))).cloned()\n+    pub fn node_expr(&self, node: Source<&ast::Expr>) -> Option<ExprId> {\n+        let src = node.map(|it| Either::A(AstPtr::new(it)));\n+        self.expr_map.get(&src).cloned()\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Option<PatSource> {\n         self.pat_map_back.get(pat).copied()\n     }\n \n-    pub fn node_pat(&self, node: &ast::Pat) -> Option<PatId> {\n-        self.pat_map.get(&Either::A(AstPtr::new(node))).cloned()\n+    pub fn node_pat(&self, node: Source<&ast::Pat>) -> Option<PatId> {\n+        let src = node.map(|it| Either::A(AstPtr::new(it)));\n+        self.pat_map.get(&src).cloned()\n     }\n \n     pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {"}, {"sha": "f6d79ddf0587591290c81f883f0b85acc7ecf473", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 27, "deletions": 63, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -2,9 +2,7 @@\n \n use hir_expand::{\n     either::Either,\n-    hygiene::Hygiene,\n     name::{self, AsName, Name},\n-    AstId, HirFileId, MacroCallLoc, MacroFileKind, Source,\n };\n use ra_arena::Arena;\n use ra_syntax::{\n@@ -16,7 +14,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    body::{Body, BodySourceMap, MacroResolver, PatPtr},\n+    body::{Body, BodySourceMap, Expander, PatPtr},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase2,\n     expr::{\n@@ -30,16 +28,13 @@ use crate::{\n \n pub(super) fn lower(\n     db: &impl DefDatabase2,\n-    resolver: MacroResolver,\n-    file_id: HirFileId,\n+    expander: Expander,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n     ExprCollector {\n-        resolver,\n+        expander,\n         db,\n-        original_file_id: file_id,\n-        current_file_id: file_id,\n         source_map: BodySourceMap::default(),\n         body: Body {\n             exprs: Arena::default(),\n@@ -53,9 +48,7 @@ pub(super) fn lower(\n \n struct ExprCollector<DB> {\n     db: DB,\n-    resolver: MacroResolver,\n-    original_file_id: HirFileId,\n-    current_file_id: HirFileId,\n+    expander: Expander,\n \n     body: Body,\n     source_map: BodySourceMap,\n@@ -101,12 +94,9 @@ where\n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::A(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if self.current_file_id == self.original_file_id {\n-            self.source_map.expr_map.insert(ptr, id);\n-        }\n-        self.source_map\n-            .expr_map_back\n-            .insert(id, Source { file_id: self.current_file_id, ast: ptr });\n+        let src = self.expander.to_source(ptr);\n+        self.source_map.expr_map.insert(src, id);\n+        self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n@@ -117,20 +107,16 @@ where\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::B(ptr);\n         let id = self.body.exprs.alloc(expr);\n-        if self.current_file_id == self.original_file_id {\n-            self.source_map.expr_map.insert(ptr, id);\n-        }\n-        self.source_map\n-            .expr_map_back\n-            .insert(id, Source { file_id: self.current_file_id, ast: ptr });\n+        let src = self.expander.to_source(ptr);\n+        self.source_map.expr_map.insert(src, id);\n+        self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let id = self.body.pats.alloc(pat);\n-        if self.current_file_id == self.original_file_id {\n-            self.source_map.pat_map.insert(ptr, id);\n-        }\n-        self.source_map.pat_map_back.insert(id, Source { file_id: self.current_file_id, ast: ptr });\n+        let src = self.expander.to_source(ptr);\n+        self.source_map.pat_map.insert(src, id);\n+        self.source_map.pat_map_back.insert(id, src);\n         id\n     }\n \n@@ -272,7 +258,7 @@ where\n             ast::Expr::PathExpr(e) => {\n                 let path = e\n                     .path()\n-                    .and_then(|path| self.parse_path(path))\n+                    .and_then(|path| self.expander.parse_path(path))\n                     .map(Expr::Path)\n                     .unwrap_or(Expr::Missing);\n                 self.alloc_expr(path, syntax_ptr)\n@@ -288,15 +274,16 @@ where\n             ast::Expr::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                self.source_map.expr_map.insert(Either::A(syntax_ptr), inner);\n+                let src = self.expander.to_source(Either::A(syntax_ptr));\n+                self.source_map.expr_map.insert(src, inner);\n                 inner\n             }\n             ast::Expr::ReturnExpr(e) => {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n             ast::Expr::RecordLit(e) => {\n-                let path = e.path().and_then(|path| self.parse_path(path));\n+                let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();\n                 let record_lit = if let Some(nfl) = e.record_field_list() {\n                     let fields = nfl\n@@ -443,32 +430,14 @@ where\n             // FIXME implement HIR for these:\n             ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::Expr::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::Expr::MacroCall(e) => {\n-                let ast_id = AstId::new(\n-                    self.current_file_id,\n-                    self.db.ast_id_map(self.current_file_id).ast_id(&e),\n-                );\n-\n-                if let Some(path) = e.path().and_then(|path| self.parse_path(path)) {\n-                    if let Some(def) = self.resolver.resolve_path_as_macro(self.db, &path) {\n-                        let call_id = self.db.intern_macro(MacroCallLoc { def, ast_id });\n-                        let file_id = call_id.as_file(MacroFileKind::Expr);\n-                        if let Some(node) = self.db.parse_or_expand(file_id) {\n-                            if let Some(expr) = ast::Expr::cast(node) {\n-                                log::debug!(\"macro expansion {:#?}\", expr.syntax());\n-                                let old_file_id =\n-                                    std::mem::replace(&mut self.current_file_id, file_id);\n-                                let id = self.collect_expr(expr);\n-                                self.current_file_id = old_file_id;\n-                                return id;\n-                            }\n-                        }\n-                    }\n+            ast::Expr::MacroCall(e) => match self.expander.expand(self.db, e) {\n+                Some((mark, expansion)) => {\n+                    let id = self.collect_expr(expansion);\n+                    self.expander.exit(self.db, mark);\n+                    id\n                 }\n-                // FIXME: Instead of just dropping the error from expansion\n-                // report it\n-                self.alloc_expr(Expr::Missing, syntax_ptr)\n-            }\n+                None => self.alloc_expr(Expr::Missing, syntax_ptr),\n+            },\n         }\n     }\n \n@@ -519,7 +488,7 @@ where\n                 Pat::Bind { name, mode: annotation, subpat }\n             }\n             ast::Pat::TupleStructPat(p) => {\n-                let path = p.path().and_then(|path| self.parse_path(path));\n+                let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 let args = p.args().map(|p| self.collect_pat(p)).collect();\n                 Pat::TupleStruct { path, args }\n             }\n@@ -529,7 +498,7 @@ where\n                 Pat::Ref { pat, mutability }\n             }\n             ast::Pat::PathPat(p) => {\n-                let path = p.path().and_then(|path| self.parse_path(path));\n+                let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n             ast::Pat::TuplePat(p) => {\n@@ -538,7 +507,7 @@ where\n             }\n             ast::Pat::PlaceholderPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n-                let path = p.path().and_then(|path| self.parse_path(path));\n+                let path = p.path().and_then(|path| self.expander.parse_path(path));\n                 let record_field_pat_list =\n                     p.record_field_pat_list().expect(\"every struct should have a field list\");\n                 let mut fields: Vec<_> = record_field_pat_list\n@@ -579,11 +548,6 @@ where\n             self.missing_pat()\n         }\n     }\n-\n-    fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n-        let hygiene = Hygiene::new(self.db, self.current_file_id);\n-        Path::from_src(path, &hygiene)\n-    }\n }\n \n impl From<ast::BinOp> for BinaryOp {"}, {"sha": "930789b0fe2a5bc6ab42b9978c332dffbceecbc9", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af85263f7cd249356382aa61b98094594165364/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=8af85263f7cd249356382aa61b98094594165364", "patch": "@@ -223,7 +223,7 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub struct Source<T> {\n     pub file_id: HirFileId,\n     pub ast: T,\n@@ -233,6 +233,9 @@ impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }\n+    pub fn as_ref(&self) -> Source<&T> {\n+        Source { file_id: self.file_id, ast: &self.ast }\n+    }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n     }"}]}