{"sha": "8e91dca596fcbab866a64f9502c476dff5bb06f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTFkY2E1OTZmY2JhYjg2NmE2NGY5NTAyYzQ3NmRmZjViYjA2ZjY=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2019-08-19T23:14:07Z"}, "committer": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2019-08-19T23:15:34Z"}, "message": "Consolidate sigemptyset workarounds\n\nIn sys/unix/process, we work around the sigemptyset linking issues\non android in two different ways. This change consolidates these\nworkarounds, and avoids duplicating bindings from `libc`.", "tree": {"sha": "eaefbc5f69c3909dbf22ae955f90ad3bb0bccc55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaefbc5f69c3909dbf22ae955f90ad3bb0bccc55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e91dca596fcbab866a64f9502c476dff5bb06f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e91dca596fcbab866a64f9502c476dff5bb06f6", "html_url": "https://github.com/rust-lang/rust/commit/8e91dca596fcbab866a64f9502c476dff5bb06f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e91dca596fcbab866a64f9502c476dff5bb06f6/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a54035c77cb2ba7ea2c24b2437760d0495a2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a54035c77cb2ba7ea2c24b2437760d0495a2c8", "html_url": "https://github.com/rust-lang/rust/commit/29a54035c77cb2ba7ea2c24b2437760d0495a2c8"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "21fca23a8fe9ea98aa4077dcda4e40aa2e3c59a5", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8e91dca596fcbab866a64f9502c476dff5bb06f6/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e91dca596fcbab866a64f9502c476dff5bb06f6/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=8e91dca596fcbab866a64f9502c476dff5bb06f6", "patch": "@@ -20,6 +20,30 @@ cfg_if::cfg_if! {\n     }\n }\n \n+// Android with api less than 21 define sig* functions inline, so it is not\n+// available for dynamic link. Implementing sigemptyset and sigaddset allow us\n+// to support older Android version (independent of libc version).\n+// The following implementations are based on https://git.io/vSkNf\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"android\")] {\n+        pub unsafe fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int {\n+            set.write_bytes(0u8, 1);\n+            return 0;\n+        }\n+        #[allow(dead_code)]\n+        pub unsafe fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int {\n+            use crate::{slice, mem};\n+\n+            let raw = slice::from_raw_parts_mut(set as *mut u8, mem::size_of::<libc::sigset_t>());\n+            let bit = (signum - 1) as usize;\n+            raw[bit / 8] |= 1 << (bit % 8);\n+            return 0;\n+        }\n+    } else {\n+        pub use libc::{sigemptyset, sigaddset};\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n@@ -429,36 +453,6 @@ mod tests {\n         }\n     }\n \n-    // Android with api less than 21 define sig* functions inline, so it is not\n-    // available for dynamic link. Implementing sigemptyset and sigaddset allow us\n-    // to support older Android version (independent of libc version).\n-    // The following implementations are based on https://git.io/vSkNf\n-\n-    #[cfg(not(target_os = \"android\"))]\n-    extern {\n-        #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigemptyset14\")]\n-        fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int;\n-\n-        #[cfg_attr(target_os = \"netbsd\", link_name = \"__sigaddset14\")]\n-        fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int;\n-    }\n-\n-    #[cfg(target_os = \"android\")]\n-    unsafe fn sigemptyset(set: *mut libc::sigset_t) -> libc::c_int {\n-        set.write_bytes(0u8, 1);\n-        return 0;\n-    }\n-\n-    #[cfg(target_os = \"android\")]\n-    unsafe fn sigaddset(set: *mut libc::sigset_t, signum: libc::c_int) -> libc::c_int {\n-        use crate::slice;\n-\n-        let raw = slice::from_raw_parts_mut(set as *mut u8, mem::size_of::<libc::sigset_t>());\n-        let bit = (signum - 1) as usize;\n-        raw[bit / 8] |= 1 << (bit % 8);\n-        return 0;\n-    }\n-\n     // See #14232 for more information, but it appears that signal delivery to a\n     // newly spawned process may just be raced in the macOS, so to prevent this\n     // test from being flaky we ignore it on macOS."}, {"sha": "a9711c71b7aa36503480f97152227ae9ce6967e5", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e91dca596fcbab866a64f9502c476dff5bb06f6/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e91dca596fcbab866a64f9502c476dff5bb06f6/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=8e91dca596fcbab866a64f9502c476dff5bb06f6", "patch": "@@ -214,14 +214,7 @@ impl Command {\n             // need to clean things up now to avoid confusing the program\n             // we're about to run.\n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n-            if cfg!(target_os = \"android\") {\n-                // Implementing sigemptyset allow us to support older Android\n-                // versions. See the comment about Android and sig* functions in\n-                // process_common.rs\n-                set.as_mut_ptr().write_bytes(0u8, 1);\n-            } else {\n-                cvt(libc::sigemptyset(set.as_mut_ptr()))?;\n-            }\n+            cvt(sigemptyset(set.as_mut_ptr()))?;\n             cvt(libc::pthread_sigmask(libc::SIG_SETMASK, set.as_ptr(),\n                                          ptr::null_mut()))?;\n             let ret = sys::signal(libc::SIGPIPE, libc::SIG_DFL);\n@@ -363,10 +356,10 @@ impl Command {\n             }\n \n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n-            cvt(libc::sigemptyset(set.as_mut_ptr()))?;\n+            cvt(sigemptyset(set.as_mut_ptr()))?;\n             cvt(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(),\n                                                  set.as_ptr()))?;\n-            cvt(libc::sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n+            cvt(sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n             cvt(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(),\n                                                     set.as_ptr()))?;\n "}]}