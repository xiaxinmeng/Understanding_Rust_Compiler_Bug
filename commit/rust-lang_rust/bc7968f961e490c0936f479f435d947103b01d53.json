{"sha": "bc7968f961e490c0936f479f435d947103b01d53", "node_id": "C_kwDOAAsO6NoAKGJjNzk2OGY5NjFlNDkwYzA5MzZmNDc5ZjQzNWQ5NDcxMDNiMDFkNTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-28T22:27:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-29T02:18:00Z"}, "message": "remove in_band_lifetimes from librustdoc", "tree": {"sha": "d3c2403c746d98eb08f84c68d60d78c5fd3a1ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c2403c746d98eb08f84c68d60d78c5fd3a1ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7968f961e490c0936f479f435d947103b01d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7968f961e490c0936f479f435d947103b01d53", "html_url": "https://github.com/rust-lang/rust/commit/bc7968f961e490c0936f479f435d947103b01d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7968f961e490c0936f479f435d947103b01d53/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e8031e14a899477a5e2d78ce461cab31123354", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e8031e14a899477a5e2d78ce461cab31123354", "html_url": "https://github.com/rust-lang/rust/commit/51e8031e14a899477a5e2d78ce461cab31123354"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "959be5478b4eca852b20fba9b6cf419dbbcefbec", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -148,7 +148,7 @@ fn clean_trait_ref_with_bindings(\n     path\n }\n \n-impl Clean<Path> for ty::TraitRef<'tcx> {\n+impl Clean<Path> for ty::TraitRef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n         clean_trait_ref_with_bindings(cx, *self, &[])\n     }\n@@ -549,7 +549,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n fn clean_ty_generics(\n     cx: &mut DocContext<'_>,\n     gens: &ty::Generics,\n-    preds: ty::GenericPredicates<'tcx>,\n+    preds: ty::GenericPredicates<'_>,\n ) -> Generics {\n     // Don't populate `cx.impl_trait_bounds` before `clean`ning `where` clauses,\n     // since `Clean for ty::Predicate` would consume them.\n@@ -579,7 +579,7 @@ fn clean_ty_generics(\n         .collect::<Vec<GenericParamDef>>();\n \n     // param index -> [(DefId of trait, associated type name, type)]\n-    let mut impl_trait_proj = FxHashMap::<u32, Vec<(DefId, Symbol, Ty<'tcx>)>>::default();\n+    let mut impl_trait_proj = FxHashMap::<u32, Vec<(DefId, Symbol, Ty<'_>)>>::default();\n \n     let where_predicates = preds\n         .predicates\n@@ -708,8 +708,8 @@ fn clean_ty_generics(\n \n fn clean_fn_or_proc_macro(\n     item: &hir::Item<'_>,\n-    sig: &'a hir::FnSig<'a>,\n-    generics: &'a hir::Generics<'a>,\n+    sig: &hir::FnSig<'_>,\n+    generics: &hir::Generics<'_>,\n     body_id: hir::BodyId,\n     name: &mut Symbol,\n     cx: &mut DocContext<'_>,\n@@ -1387,7 +1387,7 @@ impl Clean<Type> for hir::Ty<'_> {\n }\n \n /// Returns `None` if the type could not be normalized\n-fn normalize(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n+fn normalize<'tcx>(cx: &mut DocContext<'tcx>, ty: Ty<'_>) -> Option<Ty<'tcx>> {\n     // HACK: low-churn fix for #79459 while we wait for a trait normalization fix\n     if !cx.tcx.sess.opts.debugging_opts.normalize_docs {\n         return None;"}, {"sha": "28bd0f0a405f9306952163f4f44da147e3e3e641", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -223,7 +223,7 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n     })\n }\n \n-crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n+crate fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs_: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n@@ -294,7 +294,7 @@ fn format_integer_with_underscore_sep(num: &str) -> String {\n         .collect()\n }\n \n-fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: &'tcx ty::Const<'tcx>) -> String {\n+fn print_const_with_custom_print_scalar(tcx: TyCtxt<'_>, ct: &ty::Const<'_>) -> String {\n     // Use a slightly different format for integer types which always shows the actual value.\n     // For all other types, fallback to the original `pretty_print_const`.\n     match (ct.val, ct.ty.kind()) {\n@@ -362,7 +362,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n }\n \n crate fn get_auto_trait_and_blanket_impls(\n-    cx: &mut DocContext<'tcx>,\n+    cx: &mut DocContext<'_>,\n     item_def_id: DefId,\n ) -> impl Iterator<Item = Item> {\n     let auto_impls = cx"}, {"sha": "39f58cdd821d5b569ae6a9f70b3902c3418e6925", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -187,7 +187,7 @@ struct TokenIter<'a> {\n     src: &'a str,\n }\n \n-impl Iterator for TokenIter<'a> {\n+impl<'a> Iterator for TokenIter<'a> {\n     type Item = (TokenKind, &'a str);\n     fn next(&mut self) -> Option<(TokenKind, &'a str)> {\n         if self.src.is_empty() {\n@@ -227,7 +227,7 @@ struct PeekIter<'a> {\n     iter: TokenIter<'a>,\n }\n \n-impl PeekIter<'a> {\n+impl<'a> PeekIter<'a> {\n     fn new(iter: TokenIter<'a>) -> Self {\n         Self { stored: VecDeque::new(), peek_pos: 0, iter }\n     }\n@@ -254,7 +254,7 @@ impl PeekIter<'a> {\n     }\n }\n \n-impl Iterator for PeekIter<'a> {\n+impl<'a> Iterator for PeekIter<'a> {\n     type Item = (TokenKind, &'a str);\n     fn next(&mut self) -> Option<Self::Item> {\n         self.peek_pos = 0;"}, {"sha": "54d9b6905c53d56f6829f9380f73590335937370", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> SpanMapVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for SpanMapVisitor<'tcx> {\n     type Map = rustc_middle::hir::map::Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "04c2b7a0c9abafd837792eca480ce8e1e4a4476a", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -142,7 +142,7 @@ impl DocVisitor for SourceCollector<'_, '_> {\n     }\n }\n \n-impl SourceCollector<'_, 'tcx> {\n+impl SourceCollector<'_, '_> {\n     /// Renders the given filename into its corresponding HTML source file.\n     fn emit_source(\n         &mut self,"}, {"sha": "a4cf147550fb970a48635e5a540ea32c8f4a6ac2", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -38,7 +38,7 @@ crate struct JsonRenderer<'tcx> {\n     cache: Rc<Cache>,\n }\n \n-impl JsonRenderer<'tcx> {\n+impl<'tcx> JsonRenderer<'tcx> {\n     fn sess(&self) -> &'tcx Session {\n         self.tcx.sess\n     }"}, {"sha": "014ac484dcfaec553a34f87d375ed6b9f882d86b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -8,7 +8,6 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(box_syntax)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(nll)]\n #![feature(test)]"}, {"sha": "812f19955f847d3fccd1ca39a95413640ce0252a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -210,7 +210,7 @@ enum MalformedGenerics {\n     EmptyAngleBrackets,\n }\n \n-impl ResolutionFailure<'a> {\n+impl ResolutionFailure<'_> {\n     /// This resolved fully (not just partially) but is erroneous for some other reason\n     ///\n     /// Returns the full resolution of the link, if present.\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     /// full path segments left in the link.\n     ///\n     /// [enum struct variant]: hir::VariantData::Struct\n-    fn variant_field(\n+    fn variant_field<'path>(\n         &self,\n         path_str: &'path str,\n         module_id: DefId,"}, {"sha": "8e29cb16a400f05006256455750af1474bed99f6", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7968f961e490c0936f479f435d947103b01d53/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=bc7968f961e490c0936f479f435d947103b01d53", "patch": "@@ -32,8 +32,8 @@ crate struct Module<'hir> {\n     crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n }\n \n-impl Module<'hir> {\n-    crate fn new(name: Symbol, id: hir::HirId, where_inner: Span) -> Module<'hir> {\n+impl Module<'_> {\n+    crate fn new(name: Symbol, id: hir::HirId, where_inner: Span) -> Self {\n         Module { name, id, where_inner, mods: Vec::new(), items: Vec::new(), foreigns: Vec::new() }\n     }\n "}]}