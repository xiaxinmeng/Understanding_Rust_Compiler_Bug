{"sha": "40d2506cab20cfd7df17f390ec662b22f166f0a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZDI1MDZjYWIyMGNmZDdkZjE3ZjM5MGVjNjYyYjIyZjE2NmYwYTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-16T17:29:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-16T17:29:53Z"}, "message": "Rollup merge of #80681 - ChrisJefferson:logic-error-doc, r=m-ou-se\n\nClarify what the effects of a 'logic error' are\n\nThis clarifies what a 'logic error' is (which is a term used to describe what happens if you put things in a hash table or btree and then use something like a refcell to break the internal ordering). This tries to be as vague as possible, as we don't really want to promise what happens, except \"bad things, but not UB\". This was discussed in #80657", "tree": {"sha": "1ecf538d5adba3f4b05d02407c26474e4a27e382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ecf538d5adba3f4b05d02407c26474e4a27e382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d2506cab20cfd7df17f390ec662b22f166f0a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAyKSCRBK7hj4Ov3rIwAAdHIIAAeHOMK3t/bvmBzSCxK/ewI/\n8kz77zPEmJiBi3r3qRGxRjHZlhRUF3Xj3Xga+oYAWyeb2nJfZ5mPr2ysmK/QrxHo\nkrLrV07gsRykoz8CSF9hMG4vhJLLN1/o8brJWpAlB9dkka5e1C8+wGP4PoapUaA8\nF3BWOlwDBZLIqHiaunj0YqKlcubmgAGCPh9abAsDTONtFRySxNfm+M6bPsIGCWyt\nNu7x3z0QkxVmexItaV4c2FCnjBUeMLwlvKc15/ukcyzx6mTuEkabnjtPRjId12W7\nFgyo+1Lgn6vNTMwergCypkswV5ypYYR8CTUnbp/F5RtgxTSFy/LHQjoA8abcfw8=\n=n+Zx\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ecf538d5adba3f4b05d02407c26474e4a27e382\nparent d8843d9d82950eeb27bdce496f6179b085549d29\nparent 78d919280d36652c1ca069cb3f6713d38e64e823\nauthor Mara Bos <m-ou.se@m-ou.se> 1610818193 +0000\ncommitter GitHub <noreply@github.com> 1610818193 +0000\n\nRollup merge of #80681 - ChrisJefferson:logic-error-doc, r=m-ou-se\n\nClarify what the effects of a 'logic error' are\n\nThis clarifies what a 'logic error' is (which is a term used to describe what happens if you put things in a hash table or btree and then use something like a refcell to break the internal ordering). This tries to be as vague as possible, as we don't really want to promise what happens, except \"bad things, but not UB\". This was discussed in #80657\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d2506cab20cfd7df17f390ec662b22f166f0a6", "html_url": "https://github.com/rust-lang/rust/commit/40d2506cab20cfd7df17f390ec662b22f166f0a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d2506cab20cfd7df17f390ec662b22f166f0a6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8843d9d82950eeb27bdce496f6179b085549d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8843d9d82950eeb27bdce496f6179b085549d29", "html_url": "https://github.com/rust-lang/rust/commit/d8843d9d82950eeb27bdce496f6179b085549d29"}, {"sha": "78d919280d36652c1ca069cb3f6713d38e64e823", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d919280d36652c1ca069cb3f6713d38e64e823", "html_url": "https://github.com/rust-lang/rust/commit/78d919280d36652c1ca069cb3f6713d38e64e823"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "3c515af71f5ff1db1398f5ec14a79325dfa897b5", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=40d2506cab20cfd7df17f390ec662b22f166f0a6", "patch": "@@ -161,7 +161,10 @@ use super::SpecExtend;\n /// It is a logic error for an item to be modified in such a way that the\n /// item's ordering relative to any other item, as determined by the `Ord`\n /// trait, changes while it is in the heap. This is normally only possible\n-/// through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n+/// through `Cell`, `RefCell`, global state, I/O, or unsafe code. The\n+/// behavior resulting from such a logic error is not specified, but will\n+/// not result in undefined behavior. This could include panics, incorrect\n+/// results, aborts, memory leaks, and non-termination.\n ///\n /// # Examples\n ///"}, {"sha": "5e63a303d22c3bb6682483dd0c05b14377687caa", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=40d2506cab20cfd7df17f390ec662b22f166f0a6", "patch": "@@ -51,6 +51,9 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n /// any other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n+/// The behavior resulting from such a logic error is not specified, but will not result in\n+/// undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and\n+/// non-termination.\n ///\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "c2a96dd8ef471b46a00130d7f7b67e755bd2f21a", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=40d2506cab20cfd7df17f390ec662b22f166f0a6", "patch": "@@ -22,6 +22,9 @@ use super::Recover;\n /// It is a logic error for an item to be modified in such a way that the item's ordering relative\n /// to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n+/// The behavior resulting from such a logic error is not specified, but will not result in\n+/// undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and\n+/// non-termination.\n ///\n /// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell"}, {"sha": "829fc3817af2de6cfc434a521331f76abf270438", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=40d2506cab20cfd7df17f390ec662b22f166f0a6", "patch": "@@ -52,6 +52,9 @@ use crate::sys;\n /// hash, as determined by the [`Hash`] trait, or its equality, as determined by\n /// the [`Eq`] trait, changes while it is in the map. This is normally only\n /// possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n+/// The behavior resulting from such a logic error is not specified, but will\n+/// not result in undefined behavior. This could include panics, incorrect results,\n+/// aborts, memory leaks, and non-termination.\n ///\n /// The hash table implementation is a Rust port of Google's [SwissTable].\n /// The original C++ version of SwissTable can be found [here], and this"}, {"sha": "baa3026ff7514d2d4ed3dfd608131990aacc9ca9", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d2506cab20cfd7df17f390ec662b22f166f0a6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=40d2506cab20cfd7df17f390ec662b22f166f0a6", "patch": "@@ -37,7 +37,9 @@ use super::map::{map_try_reserve_error, RandomState};\n /// item's hash, as determined by the [`Hash`] trait, or its equality, as\n /// determined by the [`Eq`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or\n-/// unsafe code.\n+/// unsafe code. The behavior resulting from such a logic error is not\n+/// specified, but will not result in undefined behavior. This could include\n+/// panics, incorrect results, aborts, memory leaks, and non-termination.\n ///\n /// # Examples\n ///"}]}