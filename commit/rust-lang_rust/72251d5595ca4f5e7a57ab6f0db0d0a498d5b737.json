{"sha": "72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMjUxZDU1OTVjYTRmNWU3YTU3YWI2ZjBkYjBkMGE0OThkNWI3Mzc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T17:36:47Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in classify_drop_access_kind", "tree": {"sha": "b899a82d107642f28cd934ce8a7badfd490a1beb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b899a82d107642f28cd934ce8a7badfd490a1beb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "html_url": "https://github.com/rust-lang/rust/commit/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4", "html_url": "https://github.com/rust-lang/rust/commit/75c0c8c6dc174cdef49fbc4cbd9ca084f98bd3f4"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "95fc22dc5eb766c6636314341cf97e829745c07e", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "patch": "@@ -730,7 +730,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }, borrow_span));\n \n         if let StorageDeadOrDrop::Destructor(dropped_ty) =\n-            self.classify_drop_access_kind(&borrow.borrowed_place)\n+            self.classify_drop_access_kind(borrow.borrowed_place.as_place_ref())\n         {\n             // If a borrow of path `B` conflicts with drop of `D` (and\n             // we're not in the uninteresting case where `B` is a\n@@ -1505,16 +1505,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    fn classify_drop_access_kind(&self, place: &Place<'tcx>) -> StorageDeadOrDrop<'tcx> {\n+    fn classify_drop_access_kind(&self, place: PlaceRef<'cx, 'tcx>) -> StorageDeadOrDrop<'tcx> {\n         let tcx = self.infcx.tcx;\n         match place.projection {\n             None => {\n                 StorageDeadOrDrop::LocalStorageDead\n             }\n             Some(box Projection { ref base, ref elem }) => {\n-                let base_access = self.classify_drop_access_kind(&Place {\n-                    base: place.base.clone(),\n-                    projection: base.clone(),\n+                let base_access = self.classify_drop_access_kind(PlaceRef {\n+                    base: place.base,\n+                    projection: base,\n                 });\n                 match elem {\n                     ProjectionElem::Deref => match base_access {"}]}