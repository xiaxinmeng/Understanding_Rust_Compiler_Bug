{"sha": "527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyN2E2ZjYwZjE0YzZmMzhiNTI0Y2ZkNTExOWM2NzBhYTBmOWJlZjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-17T16:49:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-17T16:49:53Z"}, "message": "WIP: make autoslice, autoptr not be mutually exclusive", "tree": {"sha": "c44ab047f6f2030086b93feeb3be780164b489b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c44ab047f6f2030086b93feeb3be780164b489b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "html_url": "https://github.com/rust-lang/rust/commit/527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527a6f60f14c6f38b524cfd5119c670aa0f9bef9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48496fc1b62a2b7724117746f352b6b330aa63fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/48496fc1b62a2b7724117746f352b6b330aa63fb", "html_url": "https://github.com/rust-lang/rust/commit/48496fc1b62a2b7724117746f352b6b330aa63fb"}], "stats": {"total": 112, "additions": 76, "deletions": 36}, "files": [{"sha": "a9cc8e0d06dc9779c52f07e5876ce9b704a3ac8f", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 76, "deletions": 36, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/527a6f60f14c6f38b524cfd5119c670aa0f9bef9/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527a6f60f14c6f38b524cfd5119c670aa0f9bef9/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=527a6f60f14c6f38b524cfd5119c670aa0f9bef9", "patch": "@@ -49,7 +49,10 @@ candidates in the same way.\n If find no matching candidate at all, we proceed to auto-deref the\n receiver type and search again.  We keep doing that until we cannot\n auto-deref any longer.  At that point, we will attempt an auto-ref.\n-If THAT fails, method lookup fails altogether.\n+If THAT fails, method lookup fails altogether.  Autoref itself comes\n+in two varieties, autoslice and autoptr.  The former converts `~[]` to\n+`&[]` and the latter converts any type `T` to `&mut T`, `&const T`, or\n+`&T`.\n \n ## Why two phases?\n \n@@ -513,63 +516,100 @@ impl LookupContext {\n         }\n     }\n \n-    fn search_for_appr_autorefd_method(\n+    fn search_for_any_autorefd_method(\n         &self,\n         self_ty: ty::t,\n         autoderefs: uint)\n         -> Option<method_map_entry>\n     {\n+        /*!\n+         *\n+         * Attempts both auto-slice and auto-ptr, as appropriate.\n+         */\n+\n         let tcx = self.tcx();\n \n-        // Next, try auto-ref. The precise kind of auto-ref depends on\n-        // the fully deref'd receiver type.  In particular, we must\n-        // treat dynamically sized types like `str`, `[]` or `fn`\n-        // differently than other types because they cannot be fully\n-        // deref'd, unlike say @T.\n-        match ty::get(self_ty).sty {\n-            ty_box(*) | ty_uniq(*) | ty_rptr(*) => {\n-                // we should be fully autoderef'd\n-                self.bug(fmt!(\"Receiver type %s should be fully \\\n-                               autoderef'd by this point\",\n-                              self.ty_to_str(self_ty)));\n-            }\n+        match self.search_for_autosliced_method(self_ty, autoderefs) {\n+            Some(mme) => { return mme; }\n+            None => {}\n+        }\n \n-            ty_infer(IntVar(_)) | // FIXME(#3211)---should be resolved\n-            ty_self | ty_param(*) | ty_nil | ty_bot | ty_bool |\n-            ty_int(*) | ty_uint(*) |\n-            ty_float(*) | ty_enum(*) | ty_ptr(*) | ty_rec(*) |\n-            ty_class(*) | ty_tup(*) => {\n-                return self.search_for_autorefd_method(\n-                    AutoPtr, autoderefs, [m_const, m_imm, m_mutbl],\n-                    |m,r| ty::mk_rptr(tcx, r, {ty:self_ty, mutbl:m}));\n-            }\n+        match self.search_for_autoptrd_method(self_ty, autoderefs) {\n+            Some(mme) => { return mme; }\n+            None => {}\n+        }\n \n-            ty_trait(*) | ty_fn(*) => {\n-                // NDM---eventually these should be some variant of autoref\n-                return None;\n-            }\n+        return None;\n+    }\n \n-            ty_estr(vstore_slice(_)) |\n-            ty_evec(_, vstore_slice(_)) => {\n-                return None;\n-            }\n+    fn search_for_autosliced_method(\n+        &self,\n+        self_ty: ty::t,\n+        autoderefs: uint)\n+        -> Option<method_map_entry>\n+    {\n+        /*!\n+         *\n+         * Searches for a candidate by converting things like\n+         * `~[]` to `&[]`. */\n \n+        match ty::get(self_ty).sty {\n             ty_evec(mt, vstore_box) |\n             ty_evec(mt, vstore_uniq) |\n             ty_evec(mt, vstore_fixed(_)) => {\n-                return self.search_for_autorefd_method(\n+                self.search_for_some_kind_of_autorefd_method(\n                     AutoSlice, autoderefs, [m_const, m_imm, m_mutbl],\n                     |m,r| ty::mk_evec(tcx,\n                                       {ty:mt.ty, mutbl:m},\n-                                      vstore_slice(r)));\n+                                      vstore_slice(r)))\n             }\n \n             ty_estr(vstore_box) |\n             ty_estr(vstore_uniq) |\n             ty_estr(vstore_fixed(_)) => {\n-                return self.search_for_autorefd_method(\n+                self.search_for_some_kind_of_autorefd_method(\n                     AutoSlice, autoderefs, [m_imm],\n-                    |_m,r| ty::mk_estr(tcx, vstore_slice(r)));\n+                    |_m,r| ty::mk_estr(tcx, vstore_slice(r)))\n+            }\n+\n+            ty_trait(*) | ty_fn(*) => {\n+                // NDM---eventually these should be some variant of autoref\n+                None\n+            }\n+\n+            _ => None\n+        }\n+    }\n+\n+    fn search_for_autoptrd_method(\n+        &self,\n+        self_ty: ty::t,\n+        autoderefs: uint)\n+        -> Option<method_map_entry>\n+    {\n+        /*!\n+         *\n+         * Converts any type `T` to `&M T` where `M` is an\n+         * appropriate mutability.\n+         */\n+\n+        match ty::get(self_ty).sty {\n+            ty_box(*) | ty_uniq(*) | ty_rptr(*) => {\n+                // we should be fully autoderef'd\n+                self.bug(fmt!(\"Receiver type %s should be fully \\\n+                               autoderef'd by this point\",\n+                              self.ty_to_str(self_ty)));\n+            }\n+\n+            ty_infer(IntVar(_)) | // FIXME(#3211)---should be resolved\n+            ty_self | ty_param(*) | ty_nil | ty_bot | ty_bool |\n+            ty_int(*) | ty_uint(*) |\n+            ty_float(*) | ty_enum(*) | ty_ptr(*) | ty_rec(*) |\n+            ty_class(*) | ty_tup(*) | ty_estr(*) | ty_evec(*) |\n+            ty_trait(*) | ty_fn(*) => {\n+                self.search_for_some_kind_of_autorefd_method(\n+                    AutoPtr, autoderefs, [m_const, m_imm, m_mutbl],\n+                    |m,r| ty::mk_rptr(tcx, r, {ty:self_ty, mutbl:m}))\n             }\n \n             ty_opaque_closure_ptr(_) | ty_unboxed_vec(_) |\n@@ -580,7 +620,7 @@ impl LookupContext {\n         }\n     }\n \n-    fn search_for_autorefd_method(\n+    fn search_for_some_kind_of_autorefd_method(\n         &self,\n         kind: AutoRefKind,\n         autoderefs: uint,"}]}