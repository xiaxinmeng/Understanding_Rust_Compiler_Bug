{"sha": "d084d9e7df0da671765c8a2d9212757f16ab1c9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODRkOWU3ZGYwZGE2NzE3NjVjOGEyZDkyMTI3NTdmMTZhYjFjOWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-17T22:54:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-17T22:54:56Z"}, "message": "auto merge of #7197 : rkbodenner/rust/doc-for-lib-move, r=brson\n\nWas updating some code of mine to use the new `std`/`extra` library names, and noticed a place where docs for `std::libc` hadn't been updated. Then I updated some top-level docs for the new libraries' names, too.", "tree": {"sha": "de88c6939a96ad3f8d853dadb49cab1884b11d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de88c6939a96ad3f8d853dadb49cab1884b11d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d084d9e7df0da671765c8a2d9212757f16ab1c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d084d9e7df0da671765c8a2d9212757f16ab1c9d", "html_url": "https://github.com/rust-lang/rust/commit/d084d9e7df0da671765c8a2d9212757f16ab1c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d084d9e7df0da671765c8a2d9212757f16ab1c9d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c90b987b54389bf8323d63be8796951b44d622f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c90b987b54389bf8323d63be8796951b44d622f", "html_url": "https://github.com/rust-lang/rust/commit/4c90b987b54389bf8323d63be8796951b44d622f"}, {"sha": "5acc8e5a51e97a6ab5f0aaceedefcf8cd10a0c1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5acc8e5a51e97a6ab5f0aaceedefcf8cd10a0c1b", "html_url": "https://github.com/rust-lang/rust/commit/5acc8e5a51e97a6ab5f0aaceedefcf8cd10a0c1b"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "f229068731f44189b67ec01b720606e8cade4e4e", "filename": "src/README.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.txt?ref=d084d9e7df0da671765c8a2d9212757f16ab1c9d", "patch": "@@ -4,8 +4,8 @@ Source layout:\n \n librustc/          The self-hosted compiler\n \n-libcore/           The core library (imported and linked by default)\n-libstd/            The standard library (slightly more peripheral code)\n+libstd/            The standard library (imported and linked by default)\n+libextra/          The \"extras\" library (slightly more peripheral code)\n libsyntax/         The Rust parser and pretty-printer\n \n rt/                The runtime system"}, {"sha": "96c53266c6f174d2c5cec93994c6ffd9ecb76b21", "filename": "src/libextra/std.rc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=d084d9e7df0da671765c8a2d9212757f16ab1c9d", "patch": "@@ -10,19 +10,22 @@\n \n /*!\n \n-The Rust standard library.\n+Rust extras.\n \n-The Rust standand library provides a number of useful features that are\n-not required in or otherwise suitable for the core library.\n+The `extra` crate is a set of useful modules for a variety of\n+purposes, including collections, numerics, I/O, serialization,\n+and concurrency.\n+\n+Rust extras are part of the standard Rust distribution.\n \n */\n \n #[link(name = \"extra\",\n        vers = \"0.7-pre\",\n        uuid = \"122bed0b-c19b-4b82-b0b7-7ae8aead7297\",\n-       url = \"https://github.com/mozilla/rust/tree/master/src/libstd\")];\n+       url = \"https://github.com/mozilla/rust/tree/master/src/libextra\")];\n \n-#[comment = \"The Rust standard library\"];\n+#[comment = \"Rust extras\"];\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n@@ -128,7 +131,7 @@ pub mod test;\n pub mod serialize;\n \n // A curious inner-module that's not exported that contains the binding\n-// 'extra' so that macro-expanded references to std::serialize and such\n+// 'extra' so that macro-expanded references to extra::serialize and such\n // can be resolved within libextra.\n #[doc(hidden)]\n pub mod std {"}, {"sha": "f37f65c1edcde2e8fbe54700f2c89da9cad2f1bc", "filename": "src/libstd/core.rc", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=d084d9e7df0da671765c8a2d9212757f16ab1c9d", "patch": "@@ -12,19 +12,20 @@\n \n # The Rust standard library\n \n-The Rust standard library provides runtime features required by the language,\n-including the task scheduler and memory allocators, as well as library\n-support for Rust built-in types, platform abstractions, and other commonly\n-used features.\n-\n-`std` includes modules corresponding to each of the integer types, each of\n-the floating point types, the `bool` type, tuples, characters, strings\n-(`str`), vectors (`vec`), managed boxes (`managed`), owned boxes (`owned`),\n-and unsafe and borrowed pointers (`ptr`).  Additionally, `std` provides\n-pervasive types (`option` and `result`), task creation and communication\n-primitives (`task`, `comm`), platform abstractions (`os` and `path`), basic\n-I/O abstractions (`io`), common traits (`kinds`, `ops`, `cmp`, `num`,\n-`to_str`), and complete bindings to the C standard library (`libc`).\n+The Rust standard library is a group of interrelated modules defining\n+the core language traits, operations on built-in data types, collections,\n+platform abstractions, the task scheduler, runtime support for language\n+features and other common functionality.\n+\n+`std` includes modules corresponding to each of the integer types,\n+each of the floating point types, the `bool` type, tuples, characters,\n+strings (`str`), vectors (`vec`), managed boxes (`managed`), owned\n+boxes (`owned`), and unsafe and borrowed pointers (`ptr`, `borrowed`).\n+Additionally, `std` provides pervasive types (`option` and `result`),\n+task creation and communication primitives (`task`, `comm`), platform\n+abstractions (`os` and `path`), basic I/O abstractions (`io`), common\n+traits (`kinds`, `ops`, `cmp`, `num`, `to_str`), and complete bindings\n+to the C standard library (`libc`).\n \n # Standard library injection and the Rust prelude\n \n@@ -38,7 +39,7 @@ with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n etc.\n \n Additionally, `std` contains a `prelude` module that reexports many of the\n-most common std modules, types and traits. The contents of the prelude are\n+most common types, traits and functions. The contents of the prelude are\n imported into every *module* by default.  Implicitly, all modules behave as if\n they contained the following prologue:\n \n@@ -66,7 +67,7 @@ they contained the following prologue:\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-// Make core testable by not duplicating lang items. See #2912\n+// Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern mod realstd(name = \"std\");\n #[cfg(test)] pub use kinds = realstd::kinds;\n #[cfg(test)] pub use ops = realstd::ops;"}, {"sha": "37562a014fb710de43633c50b37d3e390c058c67", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d084d9e7df0da671765c8a2d9212757f16ab1c9d/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=d084d9e7df0da671765c8a2d9212757f16ab1c9d", "patch": "@@ -14,8 +14,8 @@\n * This module contains bindings to the C standard library,\n * organized into modules by their defining standard.\n * Additionally, it contains some assorted platform-specific definitions.\n-* For convenience, most functions and types are reexported from `core::libc`,\n-* so `pub use core::libc::*` will import the available\n+* For convenience, most functions and types are reexported from `std::libc`,\n+* so `pub use std::libc::*` will import the available\n * C bindings as appropriate for the target platform. The exact\n * set of functions available are platform specific.\n *"}]}