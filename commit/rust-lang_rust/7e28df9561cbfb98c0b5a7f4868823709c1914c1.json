{"sha": "7e28df9561cbfb98c0b5a7f4868823709c1914c1", "node_id": "C_kwDOAAsO6NoAKDdlMjhkZjk1NjFjYmZiOThjMGI1YTdmNDg2ODgyMzcwOWMxOTE0YzE", "commit": {"author": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2022-11-20T12:51:50Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2022-11-20T12:51:50Z"}, "message": "refactor doc copying process\n\nSigned-off-by: ozkanonur <work@onurozkan.dev>", "tree": {"sha": "996b45b040df0157fd18d08947b43d901a79bd44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/996b45b040df0157fd18d08947b43d901a79bd44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e28df9561cbfb98c0b5a7f4868823709c1914c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e28df9561cbfb98c0b5a7f4868823709c1914c1", "html_url": "https://github.com/rust-lang/rust/commit/7e28df9561cbfb98c0b5a7f4868823709c1914c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e28df9561cbfb98c0b5a7f4868823709c1914c1/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a275abec64398ece3ebba1a5db3efa24f49728b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a275abec64398ece3ebba1a5db3efa24f49728b", "html_url": "https://github.com/rust-lang/rust/commit/0a275abec64398ece3ebba1a5db3efa24f49728b"}], "stats": {"total": 64, "additions": 16, "deletions": 48}, "files": [{"sha": "7ee80eceb9511a9b775813613247c0d6509403af", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e28df9561cbfb98c0b5a7f4868823709c1914c1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e28df9561cbfb98c0b5a7f4868823709c1914c1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7e28df9561cbfb98c0b5a7f4868823709c1914c1", "patch": "@@ -1345,7 +1345,13 @@ impl<'a> Builder<'a> {\n             let my_out = match mode {\n                 // This is the intended out directory for compiler documentation.\n                 Mode::Rustc | Mode::ToolRustc => self.compiler_doc_out(target),\n-                Mode::Std => out_dir.join(target.triple).join(\"doc\"),\n+                Mode::Std => {\n+                    if self.config.cmd.json() {\n+                        out_dir.join(target.triple).join(\"json-doc\")\n+                    } else {\n+                        out_dir.join(target.triple).join(\"doc\")\n+                    }\n+                }\n                 _ => panic!(\"doc mode {:?} not expected\", mode),\n             };\n             let rustdoc = self.rustdoc(compiler);"}, {"sha": "e267d179797d5c4ea2da51eca3b87f2254712624", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7e28df9561cbfb98c0b5a7f4868823709c1914c1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e28df9561cbfb98c0b5a7f4868823709c1914c1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7e28df9561cbfb98c0b5a7f4868823709c1914c1", "patch": "@@ -551,49 +551,6 @@ fn doc_std(\n     extra_args: &[&OsStr],\n     requested_crates: &[String],\n ) {\n-    // `cargo` uses the same directory for both JSON docs and HTML docs.\n-    // This could lead to cross-contamination when copying files into the specified `out` directory.\n-    // For example:\n-    // ```bash\n-    // x doc std\n-    // x doc std --json\n-    // ```\n-    // could lead to HTML docs being copied into the JSON docs output directory.\n-    // To avoid this issue, we copy generated docs instead of whole directory by\n-    // checking doc format and generated files.\n-    fn cp_docs_by_doc_format(\n-        format: &DocumentationFormat,\n-        builder: &Builder<'_>,\n-        src: &Path,\n-        dst: &Path,\n-    ) {\n-        for f in builder.read_dir(src) {\n-            let path = f.path();\n-            let name = path.file_name().unwrap();\n-            let dst = dst.join(name);\n-\n-            if t!(f.file_type()).is_dir() && format == &DocumentationFormat::HTML {\n-                t!(fs::create_dir_all(&dst));\n-                cp_docs_by_doc_format(format, builder, &path, &dst);\n-            } else {\n-                let _ = fs::remove_file(&dst);\n-                let extension = path.extension().and_then(OsStr::to_str);\n-\n-                match format {\n-                    DocumentationFormat::HTML if extension != Some(\"json\") => {\n-                        builder.copy(&path, &dst)\n-                    }\n-                    DocumentationFormat::JSON\n-                        if extension == Some(\"json\") || name.to_str() == Some(\".stamp\") =>\n-                    {\n-                        builder.copy(&path, &dst)\n-                    }\n-                    _ => {}\n-                }\n-            }\n-        }\n-    }\n-\n     builder.info(&format!(\n         \"Documenting stage{} std ({}) in {} format\",\n         stage,\n@@ -607,15 +564,22 @@ fn doc_std(\n         );\n     }\n     let compiler = builder.compiler(stage, builder.config.build);\n+\n+    let target_doc_dir_name = if format == DocumentationFormat::JSON { \"json-doc\" } else { \"doc\" };\n+    let target_dir =\n+        builder.stage_out(compiler, Mode::Std).join(target.triple).join(target_doc_dir_name);\n+\n     // This is directory where the compiler will place the output of the command.\n     // We will then copy the files from this directory into the final `out` directory, the specified\n     // as a function parameter.\n-    let out_dir = builder.stage_out(compiler, Mode::Std).join(target.triple).join(\"doc\");\n+    let out_dir = target_dir.join(target.triple).join(\"doc\");\n \n     let run_cargo_rustdoc_for = |package: &str| {\n         let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n         compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n         cargo\n+            .arg(\"--target-dir\")\n+            .arg(&*target_dir.to_string_lossy())\n             .arg(\"-p\")\n             .arg(package)\n             .arg(\"-Zskip-rustdoc-fingerprint\")\n@@ -636,9 +600,7 @@ fn doc_std(\n         }\n     }\n \n-    if !builder.config.dry_run() {\n-        cp_docs_by_doc_format(&format, builder, &out_dir, &out);\n-    }\n+    builder.cp_r(&out_dir, &out);\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]"}]}