{"sha": "7a26cfc991c1d8e60def820d133df39e30e105fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjZjZmM5OTFjMWQ4ZTYwZGVmODIwZDEzM2RmMzllMzBlMTA1ZmQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-20T17:32:17Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-20T17:32:17Z"}, "message": "Add macro checks in src/methods.rs lints", "tree": {"sha": "99269daad958795fba02ac21bc7387bc80e8d575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99269daad958795fba02ac21bc7387bc80e8d575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a26cfc991c1d8e60def820d133df39e30e105fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a26cfc991c1d8e60def820d133df39e30e105fd", "html_url": "https://github.com/rust-lang/rust/commit/7a26cfc991c1d8e60def820d133df39e30e105fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a26cfc991c1d8e60def820d133df39e30e105fd/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ff1db5bc51c8513038ce510b182b7cd75de9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ff1db5bc51c8513038ce510b182b7cd75de9d4", "html_url": "https://github.com/rust-lang/rust/commit/91ff1db5bc51c8513038ce510b182b7cd75de9d4"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "6338961b56b3c4cf635a42f1894453c25f2d97a7", "filename": "src/methods.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a26cfc991c1d8e60def820d133df39e30e105fd/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a26cfc991c1d8e60def820d133df39e30e105fd/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=7a26cfc991c1d8e60def820d133df39e30e105fd", "patch": "@@ -8,9 +8,9 @@ use syntax::ptr::P;\n use syntax::codemap::Span;\n \n use utils::{\n-    snippet, span_lint, span_note_and_lint, match_path, match_type, method_chain_args,\n-    match_trait_method, walk_ptrs_ty_depth, walk_ptrs_ty, get_trait_def_id, implements_trait,\n-    span_lint_and_then\n+    get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path,\n+    match_trait_method, match_type, method_chain_args, snippet, span_lint, span_lint_and_then,\n+    span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth,\n };\n use utils::{\n     BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH,\n@@ -231,6 +231,10 @@ impl LintPass for MethodsPass {\n \n impl LateLintPass for MethodsPass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if in_macro(cx, expr.span) {\n+            return;\n+        }\n+\n         match expr.node {\n             ExprMethodCall(name, _, ref args) => {\n                 // Chain calls\n@@ -266,6 +270,10 @@ impl LateLintPass for MethodsPass {\n     }\n \n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if in_external_macro(cx, item.span) {\n+            return;\n+        }\n+\n         if let ItemImpl(_, _, _, None, ref ty, ref items) = item.node {\n             for implitem in items {\n                 let name = implitem.name;"}]}