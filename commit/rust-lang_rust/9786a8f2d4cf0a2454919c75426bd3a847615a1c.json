{"sha": "9786a8f2d4cf0a2454919c75426bd3a847615a1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ODZhOGYyZDRjZjBhMjQ1NDkxOWM3NTQyNmJkM2E4NDc2MTVhMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T16:39:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-25T16:40:41Z"}, "message": "Don't expose indexing details", "tree": {"sha": "25152062452c88a34bd9e4351f33ac8aed6b17e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25152062452c88a34bd9e4351f33ac8aed6b17e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9786a8f2d4cf0a2454919c75426bd3a847615a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9786a8f2d4cf0a2454919c75426bd3a847615a1c", "html_url": "https://github.com/rust-lang/rust/commit/9786a8f2d4cf0a2454919c75426bd3a847615a1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9786a8f2d4cf0a2454919c75426bd3a847615a1c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13fd8846b4bdf214cce467b19fefe44ca518a849", "url": "https://api.github.com/repos/rust-lang/rust/commits/13fd8846b4bdf214cce467b19fefe44ca518a849", "html_url": "https://github.com/rust-lang/rust/commit/13fd8846b4bdf214cce467b19fefe44ca518a849"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "724c586db8dc182cf78dad47f140986c76a8c336", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9786a8f2d4cf0a2454919c75426bd3a847615a1c/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9786a8f2d4cf0a2454919c75426bd3a847615a1c/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=9786a8f2d4cf0a2454919c75426bd3a847615a1c", "patch": "@@ -43,7 +43,7 @@ impl fmt::Debug for ProjectWorkspace {\n                 f.debug_struct(\"Cargo\").field(\"n_packages\", &cargo.packages().len()).finish()\n             }\n             ProjectWorkspace::Json { project } => {\n-                f.debug_struct(\"Json\").field(\"n_crates\", &project.crates.len()).finish()\n+                f.debug_struct(\"Json\").field(\"n_crates\", &project.n_crates()).finish()\n             }\n         }\n     }\n@@ -202,9 +202,8 @@ impl ProjectWorkspace {\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n             ProjectWorkspace::Json { project } => project\n-                .crates\n-                .iter()\n-                .map(|krate| PackageRoot {\n+                .crates()\n+                .map(|(_, krate)| PackageRoot {\n                     is_member: krate.is_workspace_member,\n                     include: krate.include.clone(),\n                     exclude: krate.exclude.clone(),\n@@ -243,9 +242,8 @@ impl ProjectWorkspace {\n     pub fn proc_macro_dylib_paths(&self) -> Vec<AbsPathBuf> {\n         match self {\n             ProjectWorkspace::Json { project } => project\n-                .crates\n-                .iter()\n-                .filter_map(|krate| krate.proc_macro_dylib_path.as_ref())\n+                .crates()\n+                .filter_map(|(_, krate)| krate.proc_macro_dylib_path.as_ref())\n                 .cloned()\n                 .collect(),\n             ProjectWorkspace::Cargo { cargo, sysroot: _sysroot } => cargo\n@@ -258,7 +256,7 @@ impl ProjectWorkspace {\n \n     pub fn n_packages(&self) -> usize {\n         match self {\n-            ProjectWorkspace::Json { project, .. } => project.crates.len(),\n+            ProjectWorkspace::Json { project, .. } => project.n_crates(),\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n                 cargo.packages().len() + sysroot.crates().len()\n             }\n@@ -276,10 +274,8 @@ impl ProjectWorkspace {\n             ProjectWorkspace::Json { project } => {\n                 let mut cfg_cache: FxHashMap<Option<&str>, Vec<CfgFlag>> = FxHashMap::default();\n                 let crates: FxHashMap<_, _> = project\n-                    .crates\n-                    .iter()\n-                    .enumerate()\n-                    .filter_map(|(seq_index, krate)| {\n+                    .crates()\n+                    .filter_map(|(crate_id, krate)| {\n                         let file_path = &krate.root_module;\n                         let file_id = load(&file_path)?;\n \n@@ -297,9 +293,8 @@ impl ProjectWorkspace {\n                         let mut cfg_options = CfgOptions::default();\n                         cfg_options.extend(target_cfgs.iter().chain(krate.cfg.iter()).cloned());\n \n-                        // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         Some((\n-                            CrateId(seq_index as u32),\n+                            crate_id,\n                             crate_graph.add_crate_root(\n                                 file_id,\n                                 krate.edition,\n@@ -313,19 +308,14 @@ impl ProjectWorkspace {\n                     })\n                     .collect();\n \n-                for (id, krate) in project.crates.iter().enumerate() {\n+                for (from, krate) in project.crates() {\n                     for dep in &krate.deps {\n-                        let from_crate_id = CrateId(id as u32);\n                         let to_crate_id = dep.crate_id;\n                         if let (Some(&from), Some(&to)) =\n-                            (crates.get(&from_crate_id), crates.get(&to_crate_id))\n+                            (crates.get(&from), crates.get(&to_crate_id))\n                         {\n-                            if crate_graph.add_dep(from, dep.name.clone(), to).is_err() {\n-                                log::error!(\n-                                    \"cyclic dependency {:?} -> {:?}\",\n-                                    from_crate_id,\n-                                    to_crate_id\n-                                );\n+                            if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n+                                log::error!(\"cyclic dependency {:?} -> {:?}\", from, to_crate_id);\n                             }\n                         }\n                     }"}, {"sha": "ae14e512689512db87dcff60d49ad3a8812a70ae", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9786a8f2d4cf0a2454919c75426bd3a847615a1c/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9786a8f2d4cf0a2454919c75426bd3a847615a1c/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=9786a8f2d4cf0a2454919c75426bd3a847615a1c", "patch": "@@ -12,7 +12,7 @@ use crate::cfg_flag::CfgFlag;\n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n-    pub(crate) crates: Vec<Crate>,\n+    crates: Vec<Crate>,\n }\n \n /// A crate points to the root module of a crate and lists the dependencies of the crate. This is\n@@ -79,6 +79,12 @@ impl ProjectJson {\n                 .collect::<Vec<_>>(),\n         }\n     }\n+    pub fn n_crates(&self) -> usize {\n+        self.crates.len()\n+    }\n+    pub fn crates(&self) -> impl Iterator<Item = (CrateId, &Crate)> + '_ {\n+        self.crates.iter().enumerate().map(|(idx, krate)| (CrateId(idx as u32), krate))\n+    }\n }\n \n #[derive(Deserialize)]"}]}