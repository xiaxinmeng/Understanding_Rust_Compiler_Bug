{"sha": "a0843d7210f41974a0a2bc6876c538718404c268", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwODQzZDcyMTBmNDE5NzRhMGEyYmM2ODc2YzUzODcxODQwNGMyNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-24T22:17:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-24T22:17:07Z"}, "message": "Auto merge of #36657 - nnethercote:rm-TypedArena-with_capacity, r=eddyb\n\n[breaking-change] Remove TypedArena::with_capacity\n\nThis is a follow-up to #36592.\n\nThe function is unused by rustc. Also, it doesn't really follow the\nusual meaning of a `with_capacity` function because the first chunk\nallocation is now delayed until the first `alloc` call.\n\nThis change reduces the size of `TypedArena` by one `usize`.\n\n@eddyb: we discussed this on IRC. Would you like to review it?", "tree": {"sha": "42bc0f89e06e23038057ee5ceeb30101ee12eda6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42bc0f89e06e23038057ee5ceeb30101ee12eda6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0843d7210f41974a0a2bc6876c538718404c268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0843d7210f41974a0a2bc6876c538718404c268", "html_url": "https://github.com/rust-lang/rust/commit/a0843d7210f41974a0a2bc6876c538718404c268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0843d7210f41974a0a2bc6876c538718404c268/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c2fdd64f3f4acc358b653616de6034eced49b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c2fdd64f3f4acc358b653616de6034eced49b5", "html_url": "https://github.com/rust-lang/rust/commit/05c2fdd64f3f4acc358b653616de6034eced49b5"}, {"sha": "cf50f5f965c3d3dc56fce25f2eaf8f66194f69e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf50f5f965c3d3dc56fce25f2eaf8f66194f69e4", "html_url": "https://github.com/rust-lang/rust/commit/cf50f5f965c3d3dc56fce25f2eaf8f66194f69e4"}], "stats": {"total": 17, "additions": 3, "deletions": 14}, "files": [{"sha": "4986c9850d7c74fe578fb3fe9e86fadcc381457d", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a0843d7210f41974a0a2bc6876c538718404c268/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0843d7210f41974a0a2bc6876c538718404c268/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=a0843d7210f41974a0a2bc6876c538718404c268", "patch": "@@ -52,9 +52,6 @@ use alloc::raw_vec::RawVec;\n \n /// An arena that can hold objects of only one type.\n pub struct TypedArena<T> {\n-    /// The capacity of the first chunk (once it is allocated).\n-    first_chunk_capacity: usize,\n-\n     /// A pointer to the next object to be allocated.\n     ptr: Cell<*mut T>,\n \n@@ -122,17 +119,7 @@ impl<T> TypedArena<T> {\n     /// Creates a new `TypedArena`.\n     #[inline]\n     pub fn new() -> TypedArena<T> {\n-        // Reserve at least one page.\n-        let elem_size = cmp::max(1, mem::size_of::<T>());\n-        TypedArena::with_capacity(PAGE / elem_size)\n-    }\n-\n-    /// Creates a new `TypedArena`. Each chunk used within the arena will have\n-    /// space for at least the given number of objects.\n-    #[inline]\n-    pub fn with_capacity(capacity: usize) -> TypedArena<T> {\n         TypedArena {\n-            first_chunk_capacity: cmp::max(1, capacity),\n             // We set both `ptr` and `end` to 0 so that the first call to\n             // alloc() will trigger a grow().\n             ptr: Cell::new(0 as *mut T),\n@@ -183,14 +170,16 @@ impl<T> TypedArena<T> {\n                     new_capacity = prev_capacity.checked_mul(2).unwrap();\n                 }\n             } else {\n-                new_capacity = self.first_chunk_capacity;\n+                let elem_size = cmp::max(1, mem::size_of::<T>());\n+                new_capacity = cmp::max(1, PAGE / elem_size);\n             }\n             chunk = TypedArenaChunk::<T>::new(new_capacity);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n         }\n     }\n+\n     /// Clears the arena. Deallocates all but the longest chunk which may be reused.\n     pub fn clear(&mut self) {\n         unsafe {"}]}