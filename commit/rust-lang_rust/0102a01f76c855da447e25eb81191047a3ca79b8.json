{"sha": "0102a01f76c855da447e25eb81191047a3ca79b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMDJhMDFmNzZjODU1ZGE0NDdlMjVlYjgxMTkxMDQ3YTNjYTc5Yjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:59:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-20T19:59:54Z"}, "message": "Remove job handle", "tree": {"sha": "040ab6dc1286ab9fe5da0002d29ae4eb7a37850a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040ab6dc1286ab9fe5da0002d29ae4eb7a37850a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0102a01f76c855da447e25eb81191047a3ca79b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0102a01f76c855da447e25eb81191047a3ca79b8", "html_url": "https://github.com/rust-lang/rust/commit/0102a01f76c855da447e25eb81191047a3ca79b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0102a01f76c855da447e25eb81191047a3ca79b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb4380448f3ef5391beff1b9f64bf956c43b61f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb4380448f3ef5391beff1b9f64bf956c43b61f", "html_url": "https://github.com/rust-lang/rust/commit/8bb4380448f3ef5391beff1b9f64bf956c43b61f"}], "stats": {"total": 118, "additions": 18, "deletions": 100}, "files": [{"sha": "f51914883431ed78748cf3ccf3d91ac2a4d190fd", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0102a01f76c855da447e25eb81191047a3ca79b8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0102a01f76c855da447e25eb81191047a3ca79b8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0102a01f76c855da447e25eb81191047a3ca79b8", "patch": "@@ -609,7 +609,6 @@ dependencies = [\n name = \"ra_analysis\"\n version = \"0.1.0\"\n dependencies = [\n- \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fst 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"im 12.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "d7ac69fe8db9518deb3163a555b5f599a71b6d08", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=0102a01f76c855da447e25eb81191047a3ca79b8", "patch": "@@ -7,7 +7,6 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n [dependencies]\n relative-path = \"0.3.7\"\n log = \"0.4.2\"\n-crossbeam-channel = \"0.2.4\"\n parking_lot = \"0.6.3\"\n once_cell = \"0.1.5\"\n rayon = \"1.0.2\""}, {"sha": "2871f983908306b8bb6881b3af4dedce8f55198d", "filename": "crates/ra_analysis/src/job.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8bb4380448f3ef5391beff1b9f64bf956c43b61f/crates%2Fra_analysis%2Fsrc%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb4380448f3ef5391beff1b9f64bf956c43b61f/crates%2Fra_analysis%2Fsrc%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fjob.rs?ref=8bb4380448f3ef5391beff1b9f64bf956c43b61f", "patch": "@@ -1,53 +0,0 @@\n-use crossbeam_channel::{bounded, Receiver, Sender};\n-\n-pub struct JobHandle {\n-    job_alive: Receiver<Never>,\n-    _job_canceled: Sender<Never>,\n-}\n-\n-pub struct JobToken {\n-    _job_alive: Sender<Never>,\n-    job_canceled: Receiver<Never>,\n-}\n-\n-impl JobHandle {\n-    pub fn new() -> (JobHandle, JobToken) {\n-        let (sender_alive, receiver_alive) = bounded(0);\n-        let (sender_canceled, receiver_canceled) = bounded(0);\n-        let token = JobToken {\n-            _job_alive: sender_alive,\n-            job_canceled: receiver_canceled,\n-        };\n-        let handle = JobHandle {\n-            job_alive: receiver_alive,\n-            _job_canceled: sender_canceled,\n-        };\n-        (handle, token)\n-    }\n-    pub fn has_completed(&self) -> bool {\n-        is_closed(&self.job_alive)\n-    }\n-    pub fn cancel(self) {}\n-}\n-\n-impl JobToken {\n-    pub fn is_canceled(&self) -> bool {\n-        is_closed(&self.job_canceled)\n-    }\n-}\n-\n-// We don't actually send messages through the channels,\n-// and instead just check if the channel is closed,\n-// so we use uninhabited enum as a message type\n-enum Never {}\n-\n-/// Nonblocking\n-fn is_closed(chan: &Receiver<Never>) -> bool {\n-    select! {\n-        recv(chan, msg) => match msg {\n-            None => true,\n-            Some(never) => match never {}\n-        }\n-        default => false,\n-    }\n-}"}, {"sha": "28e0a12b20f7be3e0373cd6e620890979288a11f", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=0102a01f76c855da447e25eb81191047a3ca79b8", "patch": "@@ -7,16 +7,13 @@ extern crate ra_editor;\n extern crate ra_syntax;\n extern crate rayon;\n extern crate relative_path;\n-#[macro_use]\n-extern crate crossbeam_channel;\n extern crate im;\n extern crate rustc_hash;\n extern crate salsa;\n \n mod db;\n mod descriptors;\n mod imp;\n-mod job;\n mod module_map;\n mod roots;\n mod symbol_index;\n@@ -31,7 +28,6 @@ use crate::imp::{AnalysisHostImpl, AnalysisImpl, FileResolverImp};\n \n pub use crate::{\n     descriptors::FnDescriptor,\n-    job::{JobHandle, JobToken},\n };\n pub use ra_editor::{\n     CompletionItem, FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable,"}, {"sha": "f5dff4c80aab67f7508dd5af12db34ede9ec6f92", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0102a01f76c855da447e25eb81191047a3ca79b8", "patch": "@@ -7,7 +7,7 @@ use languageserver_types::{\n     InsertTextFormat, Location, Position, SymbolInformation, TextDocumentIdentifier, TextEdit,\n     RenameParams, WorkspaceEdit, PrepareRenameResponse\n };\n-use ra_analysis::{FileId, FoldKind, JobToken, Query, RunnableKind};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind};\n use ra_syntax::text_utils::contains_offset_nonstrict;\n use serde_json::to_value;\n \n@@ -22,7 +22,6 @@ use crate::{\n pub fn handle_syntax_tree(\n     world: ServerWorld,\n     params: req::SyntaxTreeParams,\n-    _token: JobToken,\n ) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n     let res = world.analysis().syntax_tree(id);\n@@ -32,7 +31,6 @@ pub fn handle_syntax_tree(\n pub fn handle_extend_selection(\n     world: ServerWorld,\n     params: req::ExtendSelectionParams,\n-    _token: JobToken,\n ) -> Result<req::ExtendSelectionResult> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let file = world.analysis().file_syntax(file_id);\n@@ -50,7 +48,6 @@ pub fn handle_extend_selection(\n pub fn handle_find_matching_brace(\n     world: ServerWorld,\n     params: req::FindMatchingBraceParams,\n-    _token: JobToken,\n ) -> Result<Vec<Position>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let file = world.analysis().file_syntax(file_id);\n@@ -73,7 +70,6 @@ pub fn handle_find_matching_brace(\n pub fn handle_join_lines(\n     world: ServerWorld,\n     params: req::JoinLinesParams,\n-    _token: JobToken,\n ) -> Result<req::SourceChange> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -87,7 +83,6 @@ pub fn handle_join_lines(\n pub fn handle_on_enter(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n-    _token: JobToken,\n ) -> Result<Option<req::SourceChange>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -101,7 +96,6 @@ pub fn handle_on_enter(\n pub fn handle_on_type_formatting(\n     world: ServerWorld,\n     params: req::DocumentOnTypeFormattingParams,\n-    _token: JobToken,\n ) -> Result<Option<Vec<TextEdit>>> {\n     if params.ch != \"=\" {\n         return Ok(None);\n@@ -121,7 +115,6 @@ pub fn handle_on_type_formatting(\n pub fn handle_document_symbol(\n     world: ServerWorld,\n     params: req::DocumentSymbolParams,\n-    _token: JobToken,\n ) -> Result<Option<req::DocumentSymbolResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -160,7 +153,6 @@ pub fn handle_document_symbol(\n pub fn handle_workspace_symbol(\n     world: ServerWorld,\n     params: req::WorkspaceSymbolParams,\n-    _token: JobToken,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let all_symbols = params.query.contains(\"#\");\n     let libs = params.query.contains(\"*\");\n@@ -212,7 +204,6 @@ pub fn handle_workspace_symbol(\n pub fn handle_goto_definition(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n-    _token: JobToken,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -232,7 +223,6 @@ pub fn handle_goto_definition(\n pub fn handle_parent_module(\n     world: ServerWorld,\n     params: TextDocumentIdentifier,\n-    _token: JobToken,\n ) -> Result<Vec<Location>> {\n     let file_id = params.try_conv_with(&world)?;\n     let mut res = Vec::new();\n@@ -247,7 +237,6 @@ pub fn handle_parent_module(\n pub fn handle_runnables(\n     world: ServerWorld,\n     params: req::RunnablesParams,\n-    _token: JobToken,\n ) -> Result<Vec<req::Runnable>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -351,7 +340,6 @@ pub fn handle_runnables(\n pub fn handle_decorations(\n     world: ServerWorld,\n     params: TextDocumentIdentifier,\n-    _token: JobToken,\n ) -> Result<Vec<Decoration>> {\n     let file_id = params.try_conv_with(&world)?;\n     highlight(&world, file_id)\n@@ -360,7 +348,6 @@ pub fn handle_decorations(\n pub fn handle_completion(\n     world: ServerWorld,\n     params: req::CompletionParams,\n-    _token: JobToken,\n ) -> Result<Option<req::CompletionResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -392,7 +379,6 @@ pub fn handle_completion(\n pub fn handle_folding_range(\n     world: ServerWorld,\n     params: FoldingRangeParams,\n-    _token: JobToken,\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -425,7 +411,6 @@ pub fn handle_folding_range(\n pub fn handle_signature_help(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n-    _token: JobToken,\n ) -> Result<Option<req::SignatureHelp>> {\n     use languageserver_types::{ParameterInformation, SignatureInformation};\n \n@@ -464,7 +449,6 @@ pub fn handle_signature_help(\n pub fn handle_prepare_rename(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n-    _token: JobToken,\n ) -> Result<Option<PrepareRenameResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -486,7 +470,6 @@ pub fn handle_prepare_rename(\n pub fn handle_rename(\n     world: ServerWorld,\n     params: RenameParams,\n-    _token: JobToken,\n ) -> Result<Option<WorkspaceEdit>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -523,7 +506,6 @@ pub fn handle_rename(\n pub fn handle_references(\n     world: ServerWorld,\n     params: req::ReferenceParams,\n-    _token: JobToken,\n ) -> Result<Option<Vec<Location>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n@@ -539,7 +521,6 @@ pub fn handle_references(\n pub fn handle_code_action(\n     world: ServerWorld,\n     params: req::CodeActionParams,\n-    _token: JobToken,\n ) -> Result<Option<CodeActionResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);"}, {"sha": "b35ebd38b69a05ef9910eb9cfb136805f617e080", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0102a01f76c855da447e25eb81191047a3ca79b8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=0102a01f76c855da447e25eb81191047a3ca79b8", "patch": "@@ -8,9 +8,9 @@ use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n use languageserver_types::NumberOrString;\n-use ra_analysis::{FileId, JobHandle, JobToken, LibraryData};\n+use ra_analysis::{FileId, LibraryData};\n use rayon::{self, ThreadPool};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::FxHashSet;\n use serde::{de::DeserializeOwned, Serialize};\n \n use crate::{\n@@ -47,7 +47,7 @@ pub fn main_loop(\n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();\n \n-    let mut pending_requests = FxHashMap::default();\n+    let mut pending_requests = FxHashSet::default();\n     let mut subs = Subscriptions::new();\n     let main_res = main_loop_inner(\n         internal_mode,\n@@ -92,7 +92,7 @@ fn main_loop_inner(\n     fs_worker: Worker<PathBuf, (PathBuf, Vec<FileEvent>)>,\n     ws_worker: Worker<PathBuf, Result<CargoWorkspace>>,\n     state: &mut ServerWorldState,\n-    pending_requests: &mut FxHashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashSet<u64>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n     let (libdata_sender, libdata_receiver) = unbounded();\n@@ -204,22 +204,21 @@ fn main_loop_inner(\n fn on_task(\n     task: Task,\n     msg_sender: &Sender<RawMessage>,\n-    pending_requests: &mut FxHashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashSet<u64>,\n ) {\n     match task {\n         Task::Respond(response) => {\n-            if let Some(handle) = pending_requests.remove(&response.id) {\n-                assert!(handle.has_completed());\n+            if pending_requests.remove(&response.id) {\n+                msg_sender.send(RawMessage::Response(response))\n             }\n-            msg_sender.send(RawMessage::Response(response))\n         }\n         Task::Notify(n) => msg_sender.send(RawMessage::Notification(n)),\n     }\n }\n \n fn on_request(\n     world: &mut ServerWorldState,\n-    pending_requests: &mut FxHashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashSet<u64>,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n     req: RawRequest,\n@@ -253,8 +252,8 @@ fn on_request(\n         .on::<req::References>(handlers::handle_references)?\n         .finish();\n     match req {\n-        Ok((id, handle)) => {\n-            let inserted = pending_requests.insert(id, handle).is_none();\n+        Ok(id) => {\n+            let inserted = pending_requests.insert(id);\n             assert!(inserted, \"duplicate request: {}\", id);\n             Ok(None)\n         }\n@@ -265,7 +264,7 @@ fn on_request(\n fn on_notification(\n     msg_sender: &Sender<RawMessage>,\n     state: &mut ServerWorldState,\n-    pending_requests: &mut FxHashMap<u64, JobHandle>,\n+    pending_requests: &mut FxHashSet<u64>,\n     subs: &mut Subscriptions,\n     not: RawNotification,\n ) -> Result<()> {\n@@ -277,9 +276,7 @@ fn on_notification(\n                     panic!(\"string id's not supported: {:?}\", id);\n                 }\n             };\n-            if let Some(handle) = pending_requests.remove(&id) {\n-                handle.cancel();\n-            }\n+            pending_requests.remove(&id);\n             return Ok(());\n         }\n         Err(not) => not,\n@@ -336,7 +333,7 @@ fn on_notification(\n \n struct PoolDispatcher<'a> {\n     req: Option<RawRequest>,\n-    res: Option<(u64, JobHandle)>,\n+    res: Option<u64>,\n     pool: &'a ThreadPool,\n     world: &'a ServerWorldState,\n     sender: &'a Sender<Task>,\n@@ -345,7 +342,7 @@ struct PoolDispatcher<'a> {\n impl<'a> PoolDispatcher<'a> {\n     fn on<'b, R>(\n         &'b mut self,\n-        f: fn(ServerWorld, R::Params, JobToken) -> Result<R::Result>,\n+        f: fn(ServerWorld, R::Params) -> Result<R::Result>,\n     ) -> Result<&'b mut Self>\n     where\n         R: req::Request,\n@@ -358,11 +355,10 @@ impl<'a> PoolDispatcher<'a> {\n         };\n         match req.cast::<R>() {\n             Ok((id, params)) => {\n-                let (handle, token) = JobHandle::new();\n                 let world = self.world.snapshot();\n                 let sender = self.sender.clone();\n                 self.pool.spawn(move || {\n-                    let resp = match f(world, params, token) {\n+                    let resp = match f(world, params) {\n                         Ok(resp) => RawResponse::ok::<R>(id, &resp),\n                         Err(e) => {\n                             RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string())\n@@ -371,14 +367,14 @@ impl<'a> PoolDispatcher<'a> {\n                     let task = Task::Respond(resp);\n                     sender.send(task);\n                 });\n-                self.res = Some((id, handle));\n+                self.res = Some(id);\n             }\n             Err(req) => self.req = Some(req),\n         }\n         Ok(self)\n     }\n \n-    fn finish(&mut self) -> ::std::result::Result<(u64, JobHandle), RawRequest> {\n+    fn finish(&mut self) -> ::std::result::Result<u64, RawRequest> {\n         match (self.res.take(), self.req.take()) {\n             (Some(res), None) => Ok(res),\n             (None, Some(req)) => Err(req),"}]}