{"sha": "b7e39a1c2dd24fd4110c22c70cad254365b0ffd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTM5YTFjMmRkMjRmZDQxMTBjMjJjNzBjYWQyNTQzNjViMGZmZDM=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2015-07-26T13:44:24Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2015-08-08T15:15:25Z"}, "message": "Script for generating the powers-of-ten tables necessary for correct and\nfast decimal-to-float conversions.", "tree": {"sha": "64ba88e005c6feeac29f1efcd311918eccfffb12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ba88e005c6feeac29f1efcd311918eccfffb12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e39a1c2dd24fd4110c22c70cad254365b0ffd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e39a1c2dd24fd4110c22c70cad254365b0ffd3", "html_url": "https://github.com/rust-lang/rust/commit/b7e39a1c2dd24fd4110c22c70cad254365b0ffd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e39a1c2dd24fd4110c22c70cad254365b0ffd3/comments", "author": null, "committer": null, "parents": [{"sha": "7ebd7f3b9a7ebc020663a13b29b1e50446b3c262", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebd7f3b9a7ebc020663a13b29b1e50446b3c262", "html_url": "https://github.com/rust-lang/rust/commit/7ebd7f3b9a7ebc020663a13b29b1e50446b3c262"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "b0140fb24559dc0eca78542ec0b5c9ee6b8ff652", "filename": "src/etc/dec2flt_table.py", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/b7e39a1c2dd24fd4110c22c70cad254365b0ffd3/src%2Fetc%2Fdec2flt_table.py", "raw_url": "https://github.com/rust-lang/rust/raw/b7e39a1c2dd24fd4110c22c70cad254365b0ffd3/src%2Fetc%2Fdec2flt_table.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdec2flt_table.py?ref=b7e39a1c2dd24fd4110c22c70cad254365b0ffd3", "patch": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python2.7\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+\"\"\"\n+Generate powers of ten using William Clinger's ``AlgorithmM`` for use in\n+decimal to floating point conversions.\n+\n+Specifically, computes and outputs (as Rust code) a table of 10^e for some\n+range of exponents e. The output is one array of 64 bit significands and\n+another array of corresponding base two exponents. The approximations are\n+normalized and rounded perfectly, i.e., within 0.5 ULP of the true value.\n+\n+The representation ([u64], [i16]) instead of the more natural [(u64, i16)]\n+is used because (u64, i16) has a ton of padding which would make the table\n+even larger, and it's already uncomfortably large (6 KiB).\n+\"\"\"\n+from __future__ import print_function\n+import sys\n+from fractions import Fraction\n+from collections import namedtuple\n+\n+\n+N = 64  # Size of the significand field in bits\n+MIN_SIG = 2 ** (N - 1)\n+MAX_SIG = (2 ** N) - 1\n+\n+\n+# Hand-rolled fp representation without arithmetic or any other operations.\n+# The significand is normalized and always N bit, but the exponent is\n+# unrestricted in range.\n+Fp = namedtuple('Fp', 'sig exp')\n+\n+\n+def algorithm_m(f, e):\n+    assert f > 0\n+    if e < 0:\n+        u = f\n+        v = 10 ** abs(e)\n+    else:\n+        u = f * 10 ** e\n+        v = 1\n+    k = 0\n+    x = u // v\n+    while True:\n+        if x < MIN_SIG:\n+            u <<= 1\n+            k -= 1\n+        elif x >= MAX_SIG:\n+            v <<= 1\n+            k += 1\n+        else:\n+            break\n+        x = u // v\n+    return ratio_to_float(u, v, k)\n+\n+\n+def ratio_to_float(u, v, k):\n+    q, r = divmod(u, v)\n+    v_r = v - r\n+    z = Fp(q, k)\n+    if r < v_r:\n+        return z\n+    elif r > v_r:\n+        return next_float(z)\n+    elif q % 2 == 0:\n+        return z\n+    else:\n+        return next_float(z)\n+\n+\n+def next_float(z):\n+    if z.sig == MAX_SIG:\n+        return Fp(MIN_SIG, z.exp + 1)\n+    else:\n+        return Fp(z.sig + 1, z.exp)\n+\n+\n+def error(f, e, z):\n+    decimal = f * Fraction(10) ** e\n+    binary = z.sig * Fraction(2) ** z.exp\n+    abs_err = abs(decimal - binary)\n+    # The unit in the last place has value z.exp\n+    ulp_err = abs_err / Fraction(2) ** z.exp\n+    return float(ulp_err)\n+\n+LICENSE = \"\"\"\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\"\"\"\n+\n+def main():\n+    MIN_E = -305\n+    MAX_E = 305\n+    e_range = range(MIN_E, MAX_E+1)\n+    powers = []\n+    for e in e_range:\n+        z = algorithm_m(1, e)\n+        err = error(1, e, z)\n+        assert err < 0.5\n+        powers.append(z)\n+    typ = \"([u64; {0}], [i16; {0}])\".format(len(e_range))\n+    print(LICENSE.strip())\n+    print(\"// Table of approximations of powers of ten.\")\n+    print(\"// DO NOT MODIFY: Generated by a src/etc/dec2flt_table.py\")\n+    print(\"pub const MIN_E: i16 = {};\".format(MIN_E))\n+    print(\"pub const MAX_E: i16 = {};\".format(MAX_E))\n+    print()\n+    print(\"pub const POWERS: \", typ, \" = ([\", sep='')\n+    for z in powers:\n+        print(\"    0x{:x},\".format(z.sig))\n+    print(\"], [\")\n+    for z in powers:\n+        print(\"    {},\".format(z.exp))\n+    print(\"]);\")\n+\n+\n+if __name__ == '__main__':\n+    main()"}]}