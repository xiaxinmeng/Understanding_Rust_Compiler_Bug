{"sha": "184e9ea230ecbc468eda9309888e6abefbc70aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGU5ZWEyMzBlY2JjNDY4ZWRhOTMwOTg4OGU2YWJlZmJjNzBhYWE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-08T10:21:48Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-08T10:21:48Z"}, "message": "Fixed empty node bug", "tree": {"sha": "a527a2b4772dab2204450fc44aa47abe947fedbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a527a2b4772dab2204450fc44aa47abe947fedbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184e9ea230ecbc468eda9309888e6abefbc70aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184e9ea230ecbc468eda9309888e6abefbc70aaa", "html_url": "https://github.com/rust-lang/rust/commit/184e9ea230ecbc468eda9309888e6abefbc70aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184e9ea230ecbc468eda9309888e6abefbc70aaa/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2697ecaa64570841f0ed2a3ca5bc02cf41dccc4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2697ecaa64570841f0ed2a3ca5bc02cf41dccc4a", "html_url": "https://github.com/rust-lang/rust/commit/2697ecaa64570841f0ed2a3ca5bc02cf41dccc4a"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "997a600a541837ed190075b97f69394dea2ac12d", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/184e9ea230ecbc468eda9309888e6abefbc70aaa/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184e9ea230ecbc468eda9309888e6abefbc70aaa/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=184e9ea230ecbc468eda9309888e6abefbc70aaa", "patch": "@@ -18,6 +18,15 @@ enum WalkIndex {\n     Eof,\n }\n \n+#[derive(Debug)]\n+struct SubTreeWalker<'a> {\n+    pos: usize,\n+    stack: Vec<(&'a tt::Subtree, Option<usize>)>,\n+    idx: WalkIndex,\n+    last_steps: Vec<usize>,\n+    subtree: &'a tt::Subtree,\n+}\n+\n impl<'a> SubTreeWalker<'a> {\n     fn new(subtree: &tt::Subtree) -> SubTreeWalker {\n         let mut res = SubTreeWalker {\n@@ -84,6 +93,13 @@ impl<'a> SubTreeWalker<'a> {\n                 break;\n             }\n         }\n+\n+        // Move forward a little bit\n+        if self.last_steps.is_empty() {\n+            while self.is_empty_delimiter() {\n+                self.forward_unchecked();\n+            }\n+        }\n     }\n \n     fn backward_unchecked(&mut self) {\n@@ -133,6 +149,10 @@ impl<'a> SubTreeWalker<'a> {\n     }\n \n     fn forward(&mut self) {\n+        if self.idx == WalkIndex::Eof {\n+            return;\n+        }\n+\n         self.pos += 1;\n         loop {\n             self.forward_unchecked();\n@@ -213,15 +233,38 @@ pub(crate) trait Querier {\n }\n \n // A wrapper class for ref cell\n+#[derive(Debug)]\n pub(crate) struct WalkerOwner<'a> {\n     walker: RefCell<SubTreeWalker<'a>>,\n     offset: usize,\n+    temp: RefCell<std::collections::HashMap<usize, Option<TtToken>>>,\n }\n \n impl<'a> WalkerOwner<'a> {\n     fn token_idx<'b>(&self, pos: usize) -> Option<TtToken> {\n         self.set_walker_pos(pos);\n-        self.walker.borrow().current().cloned()\n+        let walker = self.walker.borrow();\n+        let r = walker.current().cloned();\n+\n+        if walker.subtree.token_trees.len() == 1 {\n+            if let tt::TokenTree::Leaf(_) = &walker.subtree.token_trees[0] {\n+                let mut temp = self.temp.borrow_mut();\n+\n+                if r.is_none() {\n+                    if let Some(Some(p)) = temp.get(&pos) {\n+                        unreachable!(\n+                            \"nWWWWWWWWWWWW~~~~~~~~~~~~~~,\\n{:#?}\\n{:#?}\\n{:#?}\",\n+                            pos, p, self\n+                        );\n+                    }\n+                }\n+\n+                // eprintln!(\"===>{:#?}\\n{:#?}\\n{:#?}\", pos, r, self);\n+                temp.insert(pos, r.clone());\n+            }\n+        }\n+\n+        r\n     }\n \n     fn start_from_nth(&mut self, pos: usize) {\n@@ -242,7 +285,11 @@ impl<'a> WalkerOwner<'a> {\n     }\n \n     fn new(subtree: &'a tt::Subtree) -> Self {\n-        WalkerOwner { walker: RefCell::new(SubTreeWalker::new(subtree)), offset: 0 }\n+        WalkerOwner {\n+            walker: RefCell::new(SubTreeWalker::new(subtree)),\n+            offset: 0,\n+            temp: RefCell::new(Default::default()),\n+        }\n     }\n \n     fn collect_token_tree(&mut self, n: usize) -> Vec<&tt::TokenTree> {\n@@ -425,14 +472,6 @@ where\n     None\n }\n \n-struct SubTreeWalker<'a> {\n-    pos: usize,\n-    stack: Vec<(&'a tt::Subtree, Option<usize>)>,\n-    idx: WalkIndex,\n-    last_steps: Vec<usize>,\n-    subtree: &'a tt::Subtree,\n-}\n-\n fn convert_delim(d: tt::Delimiter, closing: bool) -> Option<TtToken> {\n     let (kinds, texts) = match d {\n         tt::Delimiter::Parenthesis => ([L_PAREN, R_PAREN], \"()\"),"}]}