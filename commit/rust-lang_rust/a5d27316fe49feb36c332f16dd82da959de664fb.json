{"sha": "a5d27316fe49feb36c332f16dd82da959de664fb", "node_id": "C_kwDOAAsO6NoAKGE1ZDI3MzE2ZmU0OWZlYjM2YzMzMmYxNmRkODJkYTk1OWRlNjY0ZmI", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-02-21T09:04:19Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-02-21T09:04:19Z"}, "message": "Revert \"port over symlink_file function from Build to Config and create symlink for legacy rustfmt path\"\n\nThis reverts commit 41c6c5d4996728b5a635319ef9b077a3d0ccc480.", "tree": {"sha": "a203748331e709e39378a24e36dcb68dce7b09af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a203748331e709e39378a24e36dcb68dce7b09af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d27316fe49feb36c332f16dd82da959de664fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmP0iRcACgkQkJzQ0mSD\nUWutqQwAxTQ+oqqgMllYBj/K43jzgG2R7iUvJi8VmSJvQbkdNAZnsJC1qWI6QYpc\nasgO+tG8417nTs+0uc84catPyec0kPBSeVOdhjjxAyPu0rxBsntKNBTfAUj9CHPm\n+2HQ9mGfyY0TKxmSygjG6L0++mIsqGW1yychgHwWmleBLmrvcMBkVYKd9NSaPj+J\nY7SalpMFJW/pYTinqsnyg07q9hSStv2W61tczQajNhvhDODZF/Q0l74xa7W+cY03\nxxVghwGxkyHrqQjx72mGm+k+NgauUIAXRG4mbLWzJFVSBARSnynSJH2Hn1jGyum1\n4Lyv8lEeGDzit36G9KbrxgMn7k6f3haQHZnmDU2w7jfYrny6F38iTQZmfZ4pUQUF\nUCTbAdJshxCRqhGEmKtjsOxCBK/2zbjgtlSg5YwIVtzubDIWdLcgTUU3yM36neix\nEZcKjbtrxtaoC6f7MdeWWadQQ6cYtJ/SDD5/YvKE7cSO9ZSFNzQ2uGTSFKfRgWy6\nvPniP7tU\n=AUZ0\n-----END PGP SIGNATURE-----", "payload": "tree a203748331e709e39378a24e36dcb68dce7b09af\nparent f715e430aac0de131e2ad21804013ea405722a66\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1676970259 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1676970259 +0100\n\nRevert \"port over symlink_file function from Build to Config and create symlink for legacy rustfmt path\"\n\nThis reverts commit 41c6c5d4996728b5a635319ef9b077a3d0ccc480.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d27316fe49feb36c332f16dd82da959de664fb", "html_url": "https://github.com/rust-lang/rust/commit/a5d27316fe49feb36c332f16dd82da959de664fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d27316fe49feb36c332f16dd82da959de664fb/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f715e430aac0de131e2ad21804013ea405722a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/f715e430aac0de131e2ad21804013ea405722a66", "html_url": "https://github.com/rust-lang/rust/commit/f715e430aac0de131e2ad21804013ea405722a66"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "d1e2149d3f95f7a9547bdc9b5046d93ae1a9b740", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a5d27316fe49feb36c332f16dd82da959de664fb/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d27316fe49feb36c332f16dd82da959de664fb/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=a5d27316fe49feb36c332f16dd82da959de664fb", "patch": "@@ -2,7 +2,7 @@ use std::{\n     env,\n     ffi::{OsStr, OsString},\n     fs::{self, File},\n-    io::{self, BufRead, BufReader, ErrorKind},\n+    io::{BufRead, BufReader, ErrorKind},\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n };\n@@ -26,14 +26,6 @@ impl Config {\n         self.verbose > 0\n     }\n \n-    pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(&self, src: P, link: Q) -> io::Result<()> {\n-        #[cfg(unix)]\n-        use std::os::unix::fs::symlink as symlink_file;\n-        #[cfg(windows)]\n-        use std::os::windows::fs::symlink_file;\n-        if !self.dry_run() { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n-    }\n-\n     pub(crate) fn create(&self, path: &Path, s: &str) {\n         if self.dry_run() {\n             return;\n@@ -338,15 +330,6 @@ impl Config {\n         let bin_root = self.out.join(host.triple).join(\"rustfmt\");\n         let rustfmt_path = bin_root.join(\"bin\").join(exe(\"rustfmt\", host));\n         let rustfmt_stamp = bin_root.join(\".rustfmt-stamp\");\n-\n-        #[cfg(not(windows))]\n-        {\n-            let legacy_rustfmt = self.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n-            if !legacy_rustfmt.exists() {\n-                t!(self.symlink_file(&rustfmt_path, &legacy_rustfmt));\n-            }\n-        }\n-\n         if rustfmt_path.exists() && !program_out_of_date(&rustfmt_stamp, &channel) {\n             return Some(rustfmt_path);\n         }"}, {"sha": "f4abdf1cc57589e51c8c8aec36e07e48dfdecac9", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a5d27316fe49feb36c332f16dd82da959de664fb/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d27316fe49feb36c332f16dd82da959de664fb/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a5d27316fe49feb36c332f16dd82da959de664fb", "patch": "@@ -20,6 +20,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::{self, File};\n+use std::io;\n use std::io::ErrorKind;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n@@ -1406,7 +1407,7 @@ impl Build {\n                 src = t!(fs::canonicalize(src));\n             } else {\n                 let link = t!(fs::read_link(src));\n-                t!(self.config.symlink_file(link, dst));\n+                t!(self.symlink_file(link, dst));\n                 return;\n             }\n         }\n@@ -1524,6 +1525,14 @@ impl Build {\n         iter.map(|e| t!(e)).collect::<Vec<_>>().into_iter()\n     }\n \n+    fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(&self, src: P, link: Q) -> io::Result<()> {\n+        #[cfg(unix)]\n+        use std::os::unix::fs::symlink as symlink_file;\n+        #[cfg(windows)]\n+        use std::os::windows::fs::symlink_file;\n+        if !self.config.dry_run() { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n+    }\n+\n     /// Returns if config.ninja is enabled, and checks for ninja existence,\n     /// exiting with a nicer error message if not.\n     fn ninja(&self) -> bool {"}, {"sha": "21157b02a78ef55e015af29abd275937dd6e1556", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d27316fe49feb36c332f16dd82da959de664fb/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d27316fe49feb36c332f16dd82da959de664fb/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=a5d27316fe49feb36c332f16dd82da959de664fb", "patch": "@@ -516,7 +516,7 @@ impl Step for Llvm {\n \n             let lib_llvm = out_dir.join(\"build\").join(\"lib\").join(lib_name);\n             if !lib_llvm.exists() {\n-                t!(builder.build.config.symlink_file(\"libLLVM.dylib\", &lib_llvm));\n+                t!(builder.symlink_file(\"libLLVM.dylib\", &lib_llvm));\n             }\n         }\n "}]}