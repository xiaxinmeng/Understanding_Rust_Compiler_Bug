{"sha": "509aa235ba4a2d453cf545f2553b8173dcd5f25b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWFhMjM1YmE0YTJkNDUzY2Y1NDVmMjU1M2I4MTczZGNkNWYyNWI=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-08-27T14:51:55Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2016-09-11T23:02:44Z"}, "message": "Use question_mark feature in librustc_const_eval.", "tree": {"sha": "f81abbdf8cf8efcdf7aae420c719e82c86b6b7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f81abbdf8cf8efcdf7aae420c719e82c86b6b7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509aa235ba4a2d453cf545f2553b8173dcd5f25b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509aa235ba4a2d453cf545f2553b8173dcd5f25b", "html_url": "https://github.com/rust-lang/rust/commit/509aa235ba4a2d453cf545f2553b8173dcd5f25b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509aa235ba4a2d453cf545f2553b8173dcd5f25b/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dbf77e722e6f30568664808808716d8d3650dc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbf77e722e6f30568664808808716d8d3650dc5", "html_url": "https://github.com/rust-lang/rust/commit/0dbf77e722e6f30568664808808716d8d3650dc5"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "4ced9d87f0a5ab8f8a0c5a204b38af58af513c04", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/509aa235ba4a2d453cf545f2553b8173dcd5f25b/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509aa235ba4a2d453cf545f2553b8173dcd5f25b/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=509aa235ba4a2d453cf545f2553b8173dcd5f25b", "patch": "@@ -278,9 +278,9 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n     let pat = match expr.node {\n         hir::ExprTup(ref exprs) =>\n-            PatKind::Tuple(try!(exprs.iter()\n-                                     .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n-                                     .collect()), None),\n+            PatKind::Tuple(exprs.iter()\n+                                .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n+                                .collect::<Result<_, _>>()?, None),\n \n         hir::ExprCall(ref callee, ref args) => {\n             let def = tcx.expect_def(callee.id);\n@@ -297,34 +297,31 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 })),\n                 _ => bug!()\n             };\n-            let pats = try!(args.iter()\n-                                .map(|expr| const_expr_to_pat(tcx, &**expr,\n-                                                              pat_id, span))\n-                                .collect());\n+            let pats = args.iter()\n+                           .map(|expr| const_expr_to_pat(tcx, &**expr, pat_id, span))\n+                           .collect::<Result<_, _>>()?;\n             PatKind::TupleStruct(path, pats, None)\n         }\n \n         hir::ExprStruct(ref path, ref fields, None) => {\n             let field_pats =\n-                try!(fields.iter()\n-                           .map(|field| Ok(codemap::Spanned {\n-                               span: syntax_pos::DUMMY_SP,\n-                               node: hir::FieldPat {\n-                                   name: field.name.node,\n-                                   pat: try!(const_expr_to_pat(tcx, &field.expr,\n-                                                               pat_id, span)),\n-                                   is_shorthand: false,\n-                               },\n-                           }))\n-                           .collect());\n+                fields.iter()\n+                      .map(|field| Ok(codemap::Spanned {\n+                          span: syntax_pos::DUMMY_SP,\n+                          node: hir::FieldPat {\n+                              name: field.name.node,\n+                              pat: const_expr_to_pat(tcx, &field.expr, pat_id, span)?,\n+                              is_shorthand: false,\n+                          },\n+                      }))\n+                      .collect::<Result<_, _>>()?;\n             PatKind::Struct(path.clone(), field_pats, false)\n         }\n \n         hir::ExprVec(ref exprs) => {\n-            let pats = try!(exprs.iter()\n-                                 .map(|expr| const_expr_to_pat(tcx, &expr,\n-                                                               pat_id, span))\n-                                 .collect());\n+            let pats = exprs.iter()\n+                            .map(|expr| const_expr_to_pat(tcx, &expr, pat_id, span))\n+                            .collect::<Result<_, _>>()?;\n             PatKind::Vec(pats, None, hir::HirVec::new())\n         }\n "}]}