{"sha": "459f7720b99db16f3b9017820b1979698ba8c90b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWY3NzIwYjk5ZGIxNmYzYjkwMTc4MjBiMTk3OTY5OGJhOGM5MGI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-23T23:32:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-23T23:32:01Z"}, "message": "Better function calls", "tree": {"sha": "808b4662d406074081db7e1f81f81a6677e8963f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808b4662d406074081db7e1f81f81a6677e8963f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459f7720b99db16f3b9017820b1979698ba8c90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459f7720b99db16f3b9017820b1979698ba8c90b", "html_url": "https://github.com/rust-lang/rust/commit/459f7720b99db16f3b9017820b1979698ba8c90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459f7720b99db16f3b9017820b1979698ba8c90b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06812c29991d1b4bd43feef1deb4fb8ad0cf404f", "url": "https://api.github.com/repos/rust-lang/rust/commits/06812c29991d1b4bd43feef1deb4fb8ad0cf404f", "html_url": "https://github.com/rust-lang/rust/commit/06812c29991d1b4bd43feef1deb4fb8ad0cf404f"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "ceca44fc1ac295f2b97ff269e2e73c778aef6e4f", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=459f7720b99db16f3b9017820b1979698ba8c90b", "patch": "@@ -307,7 +307,9 @@ impl<T: ?Sized> Arc<T> {\n \n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n             atomic::fence(Acquire);\n-            deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n+            deallocate(ptr as *mut u8,\n+                       size_of_val(&*ptr),\n+                       align_of_val(&*ptr))\n         }\n     }\n }\n@@ -719,7 +721,11 @@ impl<T: ?Sized> Drop for Weak<T> {\n         // ref, which can only happen after the lock is released.\n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n             atomic::fence(Acquire);\n-            unsafe { deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr)) }\n+            unsafe {\n+                deallocate(ptr as *mut u8,\n+                           size_of_val(&*ptr),\n+                           align_of_val(&*ptr))\n+            }\n         }\n     }\n }"}, {"sha": "6961702cbc09d4c66766646b8a1ef4e4f803b834", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=459f7720b99db16f3b9017820b1979698ba8c90b", "patch": "@@ -34,8 +34,12 @@ extern {\n #[inline(always)]\n fn check_size_and_alignment(size: usize, align: usize) {\n     debug_assert!(size != 0);\n-    debug_assert!(size <= isize::MAX as usize, \"Tried to allocate too much: {} bytes\", size);\n-    debug_assert!(usize::is_power_of_two(align), \"Invalid alignment of allocation: {}\", align);\n+    debug_assert!(size <= isize::MAX as usize,\n+                  \"Tried to allocate too much: {} bytes\",\n+                  size);\n+    debug_assert!(usize::is_power_of_two(align),\n+                  \"Invalid alignment of allocation: {}\",\n+                  align);\n }\n \n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`"}, {"sha": "dd2db6fab086dd8539a13763677d60e413cb5410", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=459f7720b99db16f3b9017820b1979698ba8c90b", "patch": "@@ -274,7 +274,10 @@ impl<T> RawVec<T> {\n             let ptr = if self.cap == 0 {\n                 heap::allocate(new_alloc_size, align)\n             } else {\n-                heap::reallocate(self.ptr() as *mut _, self.cap * elem_size, new_alloc_size, align)\n+                heap::reallocate(self.ptr() as *mut _,\n+                                 self.cap * elem_size,\n+                                 new_alloc_size,\n+                                 align)\n             };\n \n             // If allocate or reallocate fail, we'll get `null` back\n@@ -358,7 +361,10 @@ impl<T> RawVec<T> {\n             let ptr = if self.cap == 0 {\n                 heap::allocate(new_alloc_size, align)\n             } else {\n-                heap::reallocate(self.ptr() as *mut _, self.cap * elem_size, new_alloc_size, align)\n+                heap::reallocate(self.ptr() as *mut _,\n+                                 self.cap * elem_size,\n+                                 new_alloc_size,\n+                                 align)\n             };\n \n             // If allocate or reallocate fail, we'll get `null` back\n@@ -392,7 +398,8 @@ impl<T> RawVec<T> {\n         }\n \n         // This check is my waterloo; it's the only thing Vec wouldn't have to do.\n-        assert!(self.cap >= amount, \"Tried to shrink to a larger capacity\");\n+        assert!(self.cap >= amount,\n+                \"Tried to shrink to a larger capacity\");\n \n         if amount == 0 {\n             mem::replace(self, RawVec::new());\n@@ -466,6 +473,7 @@ impl<T> Drop for RawVec<T> {\n #[inline]\n fn alloc_guard(alloc_size: usize) {\n     if core::usize::BITS < 64 {\n-        assert!(alloc_size <= ::core::isize::MAX as usize, \"capacity overflow\");\n+        assert!(alloc_size <= ::core::isize::MAX as usize,\n+                \"capacity overflow\");\n     }\n }"}, {"sha": "3507f123a6f153c3b060ff3f5b5a403e5c0d8775", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459f7720b99db16f3b9017820b1979698ba8c90b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=459f7720b99db16f3b9017820b1979698ba8c90b", "patch": "@@ -466,7 +466,9 @@ impl<T: ?Sized> Drop for Rc<T> {\n                     self.dec_weak();\n \n                     if self.weak() == 0 {\n-                        deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n+                        deallocate(ptr as *mut u8,\n+                                   size_of_val(&*ptr),\n+                                   align_of_val(&*ptr))\n                     }\n                 }\n             }\n@@ -785,7 +787,9 @@ impl<T: ?Sized> Drop for Weak<T> {\n                 // the weak count starts at 1, and will only go to zero if all\n                 // the strong pointers have disappeared.\n                 if self.weak() == 0 {\n-                    deallocate(ptr as *mut u8, size_of_val(&*ptr), align_of_val(&*ptr))\n+                    deallocate(ptr as *mut u8,\n+                               size_of_val(&*ptr),\n+                               align_of_val(&*ptr))\n                 }\n             }\n         }"}]}