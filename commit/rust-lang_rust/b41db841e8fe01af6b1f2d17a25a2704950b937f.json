{"sha": "b41db841e8fe01af6b1f2d17a25a2704950b937f", "node_id": "C_kwDOAAsO6NoAKGI0MWRiODQxZThmZTAxYWY2YjFmMmQxN2EyNWEyNzA0OTUwYjkzN2Y", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-16T09:16:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-16T09:16:14Z"}, "message": "Rollup merge of #112399 - compiler-errors:closure-substs-root-universe, r=lcnr\n\nInstantiate closure synthetic substs in root universe\n\nIn the UI test example, we end up generalizing an associated type (something like `<Map<Option<i32>, [closure upvars=?0]> as IntoIterator>::Item` generalizes into `<Map<Option<i32>, [closure upvars=?1]> as IntoIterator>::Item`) then assigning it to itself, emitting an alias-relate goal. This trivially holds via one of the normalizes-to candidates, instead of relating substs, so when closure analysis eventually sets `?0` to the actual upvars, `?1` never gets constrained. This ends up being reported as an ambiguity error during writeback.\n\nInstead, we can take advantage of the fact that we *know* the closure substs live in the root universe. This will prevent them being generalized, since they always can be named, and the alias-relate above never gets emitted at all.\n\nWe can probably do this to a handful of other `next_ty_var` calls in typeck for variables that are clearly associated with the body of the program, but I wanted to limit this for now. Eventually, if we end up representing universes more faithfully like a tree or whatever, we can remove this and turn it back to just a call to `next_ty_var`.\n\nNote: This is incredibly order-dependent -- we need to be assigning a type variable that was created *before* the closure substs, and we also need to actually have an unnormalized type at the time of the assignment. This currently seems easiest to trigger during call argument analysis just due to the fact that we instantiate the call's substs, normalize, THEN check args.\n\nr? ```@lcnr```", "tree": {"sha": "eeb87088e3f519a813398ebbb1a190fa72d35326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeb87088e3f519a813398ebbb1a190fa72d35326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b41db841e8fe01af6b1f2d17a25a2704950b937f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjCheCRBK7hj4Ov3rIwAAb78IAClbMhf3ByaZp3GoVNeXU9Ks\n1uvZtzA4f5fpIGFrDPLKQNN9DZDuTmzYKrWGZzISX33JinxpcAiHucDNZGjk/r8N\njnwytwkgb1LT1beqlCXoatqz30rPrnbz9NwMjvz0d3+5YRgxFMPYF7Kq519fAfYx\n5e1UivupFrUn+/x3keyj9F6NwsSzivNQ+r1bPT0CsUAP8k+slayvbvTGSel+iSiT\nnVu57NMqZoU1X+qEyY2MApIvVZtZmvLAxx0iHQ19gWe4us8XYwhvfPhcWzmWW+Ui\n6fRptmJqcUmeXy9Pobva0IKnC94XAlzNc85Bm1O8TAhfKp6iR43UUePK2UpcvX0=\n=NbMd\n-----END PGP SIGNATURE-----\n", "payload": "tree eeb87088e3f519a813398ebbb1a190fa72d35326\nparent c563296a4f13eeb5942215d336c10fe2fbd3f42a\nparent e3b499fd655083dcbe02a3504cddf1b913327418\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1686906974 +0530\ncommitter GitHub <noreply@github.com> 1686906974 +0530\n\nRollup merge of #112399 - compiler-errors:closure-substs-root-universe, r=lcnr\n\nInstantiate closure synthetic substs in root universe\n\nIn the UI test example, we end up generalizing an associated type (something like `<Map<Option<i32>, [closure upvars=?0]> as IntoIterator>::Item` generalizes into `<Map<Option<i32>, [closure upvars=?1]> as IntoIterator>::Item`) then assigning it to itself, emitting an alias-relate goal. This trivially holds via one of the normalizes-to candidates, instead of relating substs, so when closure analysis eventually sets `?0` to the actual upvars, `?1` never gets constrained. This ends up being reported as an ambiguity error during writeback.\n\nInstead, we can take advantage of the fact that we *know* the closure substs live in the root universe. This will prevent them being generalized, since they always can be named, and the alias-relate above never gets emitted at all.\n\nWe can probably do this to a handful of other `next_ty_var` calls in typeck for variables that are clearly associated with the body of the program, but I wanted to limit this for now. Eventually, if we end up representing universes more faithfully like a tree or whatever, we can remove this and turn it back to just a call to `next_ty_var`.\n\nNote: This is incredibly order-dependent -- we need to be assigning a type variable that was created *before* the closure substs, and we also need to actually have an unnormalized type at the time of the assignment. This currently seems easiest to trigger during call argument analysis just due to the fact that we instantiate the call's substs, normalize, THEN check args.\n\nr? ```@lcnr```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b41db841e8fe01af6b1f2d17a25a2704950b937f", "html_url": "https://github.com/rust-lang/rust/commit/b41db841e8fe01af6b1f2d17a25a2704950b937f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b41db841e8fe01af6b1f2d17a25a2704950b937f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c563296a4f13eeb5942215d336c10fe2fbd3f42a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c563296a4f13eeb5942215d336c10fe2fbd3f42a", "html_url": "https://github.com/rust-lang/rust/commit/c563296a4f13eeb5942215d336c10fe2fbd3f42a"}, {"sha": "e3b499fd655083dcbe02a3504cddf1b913327418", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b499fd655083dcbe02a3504cddf1b913327418", "html_url": "https://github.com/rust-lang/rust/commit/e3b499fd655083dcbe02a3504cddf1b913327418"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "dce426ca2db6afe2f02431467305d177fb810905", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b41db841e8fe01af6b1f2d17a25a2704950b937f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41db841e8fe01af6b1f2d17a25a2704950b937f/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=b41db841e8fe01af6b1f2d17a25a2704950b937f", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.typeck_root_def_id(expr_def_id.to_def_id()),\n         );\n \n-        let tupled_upvars_ty = self.next_ty_var(TypeVariableOrigin {\n+        let tupled_upvars_ty = self.next_root_ty_var(TypeVariableOrigin {\n             kind: TypeVariableOriginKind::ClosureSynthetic,\n             span: self.tcx.def_span(expr_def_id),\n         });\n@@ -143,7 +143,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Create a type variable (for now) to represent the closure kind.\n             // It will be unified during the upvar inference phase (`upvar.rs`)\n-            None => self.next_ty_var(TypeVariableOrigin {\n+            None => self.next_root_ty_var(TypeVariableOrigin {\n                 // FIXME(eddyb) distinguish closure kind inference variables from the rest.\n                 kind: TypeVariableOriginKind::ClosureSynthetic,\n                 span: expr_span,"}, {"sha": "630878bbf0c602dca6c2fdad2a78efd46171acc2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b41db841e8fe01af6b1f2d17a25a2704950b937f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41db841e8fe01af6b1f2d17a25a2704950b937f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=b41db841e8fe01af6b1f2d17a25a2704950b937f", "patch": "@@ -189,6 +189,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn errors_reported_since_creation(&self) -> bool {\n         self.tcx.sess.err_count() > self.err_count_on_creation\n     }\n+\n+    pub fn next_root_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n+        self.tcx.mk_ty_var(self.next_ty_var_id_in_universe(origin, ty::UniverseIndex::ROOT))\n+    }\n }\n \n impl<'a, 'tcx> Deref for FnCtxt<'a, 'tcx> {"}, {"sha": "48432f4020f87042baaf3fa3be8a97a95f99cc54", "filename": "tests/ui/traits/new-solver/closure-substs-ambiguity.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b41db841e8fe01af6b1f2d17a25a2704950b937f/tests%2Fui%2Ftraits%2Fnew-solver%2Fclosure-substs-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b41db841e8fe01af6b1f2d17a25a2704950b937f/tests%2Fui%2Ftraits%2Fnew-solver%2Fclosure-substs-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fclosure-substs-ambiguity.rs?ref=b41db841e8fe01af6b1f2d17a25a2704950b937f", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn main() {\n+    let mut x: Vec<_> = vec![];\n+    x.extend(Some(1i32).into_iter().map(|x| x));\n+}"}]}