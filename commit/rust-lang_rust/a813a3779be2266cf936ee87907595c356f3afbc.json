{"sha": "a813a3779be2266cf936ee87907595c356f3afbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTNhMzc3OWJlMjI2NmNmOTM2ZWU4NzkwNzU5NWMzNTZmM2FmYmM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-13T22:03:26Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T18:36:27Z"}, "message": "Rework lint attr parsing and use it in middle::dead", "tree": {"sha": "90fb5c354ec8936fb24bf620b9569f2348d88ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90fb5c354ec8936fb24bf620b9569f2348d88ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a813a3779be2266cf936ee87907595c356f3afbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a813a3779be2266cf936ee87907595c356f3afbc", "html_url": "https://github.com/rust-lang/rust/commit/a813a3779be2266cf936ee87907595c356f3afbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a813a3779be2266cf936ee87907595c356f3afbc/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5542f7f5b1eb11430960687f69b5766857efaa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5542f7f5b1eb11430960687f69b5766857efaa0", "html_url": "https://github.com/rust-lang/rust/commit/b5542f7f5b1eb11430960687f69b5766857efaa0"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "877bf6f52a4cf8a2518273544429ff52c2a67223", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 53, "deletions": 42, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a813a3779be2266cf936ee87907595c356f3afbc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813a3779be2266cf936ee87907595c356f3afbc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a813a3779be2266cf936ee87907595c356f3afbc", "patch": "@@ -44,6 +44,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::visit::{Visitor, FnKind};\n+use syntax::parse::token::InternedString;\n use syntax::{ast, ast_util, visit};\n \n /// Information about the registered lints.\n@@ -193,6 +194,38 @@ macro_rules! run_lints ( ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.lints.passes = Some(passes);\n }))\n \n+/// Parse the lint attributes into a vector, with `Err`s for malformed lint\n+/// attributes. Writing this as an iterator is an enormous mess.\n+pub fn gather_attrs(attrs: &[ast::Attribute])\n+                    -> Vec<Result<(InternedString, Level, Span), Span>> {\n+    let mut out = vec!();\n+    for attr in attrs.iter() {\n+        let level = match Level::from_str(attr.name().get()) {\n+            None => continue,\n+            Some(lvl) => lvl,\n+        };\n+\n+        attr::mark_used(attr);\n+\n+        let meta = attr.node.value;\n+        let metas = match meta.node {\n+            ast::MetaList(_, ref metas) => metas,\n+            _ => {\n+                out.push(Err(meta.span));\n+                continue;\n+            }\n+        };\n+\n+        for meta in metas.iter() {\n+            out.push(match meta.node {\n+                ast::MetaWord(ref lint_name) => Ok((lint_name.clone(), level, meta.span)),\n+                _ => Err(meta.span),\n+            });\n+        }\n+    }\n+    out\n+}\n+\n /// Emit a lint as a warning or an error (or not at all)\n /// according to `level`.\n ///\n@@ -295,9 +328,27 @@ impl<'a> Context<'a> {\n         // current dictionary of lint information. Along the way, keep a history\n         // of what we changed so we can roll everything back after invoking the\n         // specified closure\n-        let lint_attrs = self.gather_lint_attrs(attrs);\n         let mut pushed = 0u;\n-        for (lint_id, level, span) in lint_attrs.move_iter() {\n+\n+        for result in gather_attrs(attrs).move_iter() {\n+            let (lint_id, level, span) = match result {\n+                Err(span) => {\n+                    self.tcx.sess.span_err(span, \"malformed lint attribute\");\n+                    continue;\n+                }\n+                Ok((lint_name, level, span)) => {\n+                    match self.lints.by_name.find_equiv(&lint_name.get()) {\n+                        Some(&lint_id) => (lint_id, level, span),\n+                        None => {\n+                            self.span_lint(builtin::UNRECOGNIZED_LINT, span,\n+                                           format!(\"unknown `{}` attribute: `{}`\",\n+                                                   level.as_str(), lint_name).as_slice());\n+                            continue;\n+                        }\n+                    }\n+                }\n+            };\n+\n             let now = self.lints.get_level_source(lint_id).val0();\n             if now == Forbid && level != Forbid {\n                 let lint_name = lint_id.as_str();\n@@ -331,46 +382,6 @@ impl<'a> Context<'a> {\n         };\n         f(&mut v);\n     }\n-\n-    fn gather_lint_attrs(&mut self, attrs: &[ast::Attribute]) -> Vec<(LintId, Level, Span)> {\n-        // Doing this as an iterator is messy due to multiple borrowing.\n-        // Allocating and copying these should be quick.\n-        let mut out = vec!();\n-        for attr in attrs.iter() {\n-            let level = match Level::from_str(attr.name().get()) {\n-                None => continue,\n-                Some(lvl) => lvl,\n-            };\n-\n-            attr::mark_used(attr);\n-\n-            let meta = attr.node.value;\n-            let metas = match meta.node {\n-                ast::MetaList(_, ref metas) => metas,\n-                _ => {\n-                    self.tcx.sess.span_err(meta.span, \"malformed lint attribute\");\n-                    continue;\n-                }\n-            };\n-\n-            for meta in metas.iter() {\n-                match meta.node {\n-                    ast::MetaWord(ref lint_name) => {\n-                        match self.lints.by_name.find_equiv(&lint_name.get()) {\n-                            Some(lint_id) => out.push((*lint_id, level, meta.span)),\n-\n-                            None => self.span_lint(builtin::UNRECOGNIZED_LINT,\n-                                meta.span,\n-                                format!(\"unknown `{}` attribute: `{}`\",\n-                                    level.as_str(), lint_name).as_slice()),\n-                        }\n-                    }\n-                    _ => self.tcx.sess.span_err(meta.span, \"malformed lint attribute\"),\n-                }\n-            }\n-        }\n-        out\n-    }\n }\n \n impl<'a> AstConv for Context<'a>{"}, {"sha": "33facce299773c18cf9602a6b81609e3ba167d02", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a813a3779be2266cf936ee87907595c356f3afbc/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813a3779be2266cf936ee87907595c356f3afbc/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=a813a3779be2266cf936ee87907595c356f3afbc", "patch": "@@ -36,7 +36,7 @@ use syntax::codemap::Span;\n use syntax::visit::FnKind;\n use syntax::ast;\n \n-pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate};\n+pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_attrs};\n \n /// Specification of a single lint.\n pub struct Lint {"}, {"sha": "156b8840067720b29fe8b29112d19e304fb24098", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a813a3779be2266cf936ee87907595c356f3afbc/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813a3779be2266cf936ee87907595c356f3afbc/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a813a3779be2266cf936ee87907595c356f3afbc", "patch": "@@ -269,16 +269,11 @@ fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n         return true;\n     }\n \n-    // FIXME: use the lint attr parsing already in rustc::lint\n-    for attr in attrs.iter().filter(|a| a.check_name(\"allow\")) {\n-        match attr.node.value.node {\n-            ast::MetaList(_, ref metas) => for meta in metas.iter() {\n-                match meta.node {\n-                    ast::MetaWord(ref name) if name.get() == \"dead_code\"\n-                        => return true,\n-                    _ => (),\n-                }\n-            },\n+    let dead_code = lint::builtin::DEAD_CODE.name_lower();\n+    for attr in lint::gather_attrs(attrs).move_iter() {\n+        match attr {\n+            Ok((ref name, lint::Allow, _))\n+                if name.get() == dead_code.as_slice() => return true,\n             _ => (),\n         }\n     }"}]}