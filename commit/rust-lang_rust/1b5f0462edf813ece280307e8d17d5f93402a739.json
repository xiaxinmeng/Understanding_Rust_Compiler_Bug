{"sha": "1b5f0462edf813ece280307e8d17d5f93402a739", "node_id": "C_kwDOAAsO6NoAKDFiNWYwNDYyZWRmODEzZWNlMjgwMzA3ZThkMTdkNWY5MzQwMmE3Mzk", "commit": {"author": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-05-29T15:06:48Z"}, "committer": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-05-29T15:06:48Z"}, "message": "fix: visibility completion", "tree": {"sha": "f169b6622e7373da68e79f4ae7cddd2c7ed3ac2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f169b6622e7373da68e79f4ae7cddd2c7ed3ac2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5f0462edf813ece280307e8d17d5f93402a739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5f0462edf813ece280307e8d17d5f93402a739", "html_url": "https://github.com/rust-lang/rust/commit/1b5f0462edf813ece280307e8d17d5f93402a739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5f0462edf813ece280307e8d17d5f93402a739/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9fc4fec2193ebfa7ed7eb163b6eea925b56f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9fc4fec2193ebfa7ed7eb163b6eea925b56f7b", "html_url": "https://github.com/rust-lang/rust/commit/6c9fc4fec2193ebfa7ed7eb163b6eea925b56f7b"}], "stats": {"total": 160, "additions": 103, "deletions": 57}, "files": [{"sha": "2bbdc48e63902b860d671788e3ecca6fd70d0e66", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -143,36 +143,40 @@ pub fn completions(\n     db: &RootDatabase,\n     config: &CompletionConfig,\n     position: FilePosition,\n+    trigger_character: Option<&str>,\n ) -> Option<Completions> {\n     let ctx = &CompletionContext::new(db, position, config)?;\n     let mut acc = Completions::default();\n \n     {\n         let acc = &mut acc;\n-        completions::attribute::complete_attribute(acc, ctx);\n-        completions::attribute::complete_derive(acc, ctx);\n-        completions::attribute::complete_known_attribute_input(acc, ctx);\n-        completions::dot::complete_dot(acc, ctx);\n-        completions::expr::complete_expr_path(acc, ctx);\n-        completions::extern_abi::complete_extern_abi(acc, ctx);\n-        completions::flyimport::import_on_the_fly(acc, ctx);\n-        completions::fn_param::complete_fn_param(acc, ctx);\n-        completions::format_string::format_string(acc, ctx);\n-        completions::item_list::complete_item_list(acc, ctx);\n-        completions::keyword::complete_expr_keyword(acc, ctx);\n-        completions::lifetime::complete_label(acc, ctx);\n-        completions::lifetime::complete_lifetime(acc, ctx);\n-        completions::mod_::complete_mod(acc, ctx);\n-        completions::pattern::complete_pattern(acc, ctx);\n-        completions::postfix::complete_postfix(acc, ctx);\n-        completions::record::complete_record_literal(acc, ctx);\n-        completions::record::complete_record(acc, ctx);\n-        completions::snippet::complete_expr_snippet(acc, ctx);\n-        completions::snippet::complete_item_snippet(acc, ctx);\n-        completions::trait_impl::complete_trait_impl(acc, ctx);\n-        completions::r#type::complete_type_path(acc, ctx);\n-        completions::r#type::complete_inferred_type(acc, ctx);\n-        completions::use_::complete_use_tree(acc, ctx);\n+        // prevent `(` from triggering unwanted completion noise\n+        if trigger_character != Some(\"(\") {\n+            completions::attribute::complete_attribute(acc, ctx);\n+            completions::attribute::complete_derive(acc, ctx);\n+            completions::attribute::complete_known_attribute_input(acc, ctx);\n+            completions::dot::complete_dot(acc, ctx);\n+            completions::expr::complete_expr_path(acc, ctx);\n+            completions::extern_abi::complete_extern_abi(acc, ctx);\n+            completions::flyimport::import_on_the_fly(acc, ctx);\n+            completions::fn_param::complete_fn_param(acc, ctx);\n+            completions::format_string::format_string(acc, ctx);\n+            completions::item_list::complete_item_list(acc, ctx);\n+            completions::keyword::complete_expr_keyword(acc, ctx);\n+            completions::lifetime::complete_label(acc, ctx);\n+            completions::lifetime::complete_lifetime(acc, ctx);\n+            completions::mod_::complete_mod(acc, ctx);\n+            completions::pattern::complete_pattern(acc, ctx);\n+            completions::postfix::complete_postfix(acc, ctx);\n+            completions::record::complete_record_literal(acc, ctx);\n+            completions::record::complete_record(acc, ctx);\n+            completions::snippet::complete_expr_snippet(acc, ctx);\n+            completions::snippet::complete_item_snippet(acc, ctx);\n+            completions::trait_impl::complete_trait_impl(acc, ctx);\n+            completions::r#type::complete_type_path(acc, ctx);\n+            completions::r#type::complete_inferred_type(acc, ctx);\n+            completions::use_::complete_use_tree(acc, ctx);\n+        }\n         completions::vis::complete_vis_path(acc, ctx);\n     }\n "}, {"sha": "d51bc517d65a41a827193d43a3ea3cd57059ec4c", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -410,15 +410,15 @@ mod tests {\n \n     #[track_caller]\n     fn check_relevance_for_kinds(ra_fixture: &str, kinds: &[CompletionItemKind], expect: Expect) {\n-        let mut actual = get_all_items(TEST_CONFIG, ra_fixture);\n+        let mut actual = get_all_items(TEST_CONFIG, ra_fixture, None);\n         actual.retain(|it| kinds.contains(&it.kind()));\n         actual.sort_by_key(|it| cmp::Reverse(it.relevance().score()));\n         check_relevance_(actual, expect);\n     }\n \n     #[track_caller]\n     fn check_relevance(ra_fixture: &str, expect: Expect) {\n-        let mut actual = get_all_items(TEST_CONFIG, ra_fixture);\n+        let mut actual = get_all_items(TEST_CONFIG, ra_fixture, None);\n         actual.retain(|it| it.kind() != CompletionItemKind::Snippet);\n         actual.retain(|it| it.kind() != CompletionItemKind::Keyword);\n         actual.retain(|it| it.kind() != CompletionItemKind::BuiltinType);"}, {"sha": "7625018058c9b6dd6ab896625d3a07a70a44f9dd", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -79,20 +79,28 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n };\n \n pub(crate) fn completion_list(ra_fixture: &str) -> String {\n-    completion_list_with_config(TEST_CONFIG, ra_fixture, true)\n+    completion_list_with_config(TEST_CONFIG, ra_fixture, true, None)\n }\n \n pub(crate) fn completion_list_no_kw(ra_fixture: &str) -> String {\n-    completion_list_with_config(TEST_CONFIG, ra_fixture, false)\n+    completion_list_with_config(TEST_CONFIG, ra_fixture, false, None)\n+}\n+\n+pub(crate) fn completion_list_with_trigger_character(\n+    ra_fixture: &str,\n+    trigger_character: Option<&str>,\n+) -> String {\n+    completion_list_with_config(TEST_CONFIG, ra_fixture, true, trigger_character)\n }\n \n fn completion_list_with_config(\n     config: CompletionConfig,\n     ra_fixture: &str,\n     include_keywords: bool,\n+    trigger_character: Option<&str>,\n ) -> String {\n     // filter out all but one builtintype completion for smaller test outputs\n-    let items = get_all_items(config, ra_fixture);\n+    let items = get_all_items(config, ra_fixture, trigger_character);\n     let mut bt_seen = false;\n     let items = items\n         .into_iter()\n@@ -126,7 +134,7 @@ pub(crate) fn do_completion_with_config(\n     code: &str,\n     kind: CompletionItemKind,\n ) -> Vec<CompletionItem> {\n-    get_all_items(config, code)\n+    get_all_items(config, code, None)\n         .into_iter()\n         .filter(|c| c.kind() == kind)\n         .sorted_by(|l, r| l.label().cmp(r.label()))\n@@ -173,7 +181,7 @@ pub(crate) fn check_edit_with_config(\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (db, position) = position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        crate::completions(&db, &config, position).unwrap().into();\n+        crate::completions(&db, &config, position, None).unwrap().into();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)\n@@ -214,9 +222,14 @@ pub(crate) fn check_pattern_is_applicable(code: &str, check: impl FnOnce(SyntaxE\n     assert!(check(NodeOrToken::Token(token)));\n }\n \n-pub(crate) fn get_all_items(config: CompletionConfig, code: &str) -> Vec<CompletionItem> {\n+pub(crate) fn get_all_items(\n+    config: CompletionConfig,\n+    code: &str,\n+    trigger_character: Option<&str>,\n+) -> Vec<CompletionItem> {\n     let (db, position) = position(code);\n-    let res = crate::completions(&db, &config, position).map_or_else(Vec::default, Into::into);\n+    let res = crate::completions(&db, &config, position, trigger_character)\n+        .map_or_else(Vec::default, Into::into);\n     // validate\n     res.iter().for_each(|it| {\n         let sr = it.source_range();"}, {"sha": "a08f3f6e88dfd9e2b28b427397db0a095eded53c", "filename": "crates/ide-completion/src/tests/fn_param.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -1,12 +1,17 @@\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, completion_list_with_trigger_character};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n     expect.assert_eq(&actual);\n }\n \n+fn check_with_trigger_character(ra_fixture: &str, trigger_character: Option<&str>, expect: Expect) {\n+    let actual = completion_list_with_trigger_character(ra_fixture, trigger_character);\n+    expect.assert_eq(&actual)\n+}\n+\n #[test]\n fn only_param() {\n     check(\n@@ -113,6 +118,17 @@ fn outer(text: &str) {\n     )\n }\n \n+#[test]\n+fn trigger_by_l_paren() {\n+    check_with_trigger_character(\n+        r#\"\n+fn foo($0)\n+\"#,\n+        Some(\"(\"),\n+        expect![[]],\n+    )\n+}\n+\n #[test]\n fn shows_non_ident_pat_param() {\n     check("}, {"sha": "64bbb444bf4b64fdc387d4a647bb91b7b9e128f8", "filename": "crates/ide-completion/src/tests/visibility.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -1,20 +1,26 @@\n //! Completion tests for visibility modifiers.\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, completion_list_with_trigger_character};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n+fn check_with_trigger_character(ra_fixture: &str, trigger_character: Option<&str>, expect: Expect) {\n+    let actual = completion_list_with_trigger_character(ra_fixture, trigger_character);\n+    expect.assert_eq(&actual)\n+}\n+\n #[test]\n fn empty_pub() {\n     cov_mark::check!(kw_completion_in);\n-    check(\n+    check_with_trigger_character(\n         r#\"\n pub($0)\n \"#,\n+        Some(\"(\"),\n         expect![[r#\"\n             kw crate\n             kw in"}, {"sha": "00b8c057e46e9fa84277dbaae3d9b09c5c546d3b", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -547,8 +547,11 @@ impl Analysis {\n         &self,\n         config: &CompletionConfig,\n         position: FilePosition,\n+        trigger_character: Option<&str>,\n     ) -> Cancellable<Option<Vec<CompletionItem>>> {\n-        self.with_db(|db| ide_completion::completions(db, config, position).map(Into::into))\n+        self.with_db(|db| {\n+            ide_completion::completions(db, config, position, trigger_character).map(Into::into)\n+        })\n     }\n \n     /// Resolves additional completion data at the position given."}, {"sha": "7bff6a8b0e38832adf23811f100fb635c22d3d9f", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -29,7 +29,12 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         hover_provider: Some(HoverProviderCapability::Simple(true)),\n         completion_provider: Some(CompletionOptions {\n             resolve_provider: completions_resolve_provider(config.caps()),\n-            trigger_characters: Some(vec![\":\".to_string(), \".\".to_string(), \"'\".to_string()]),\n+            trigger_characters: Some(vec![\n+                \":\".to_string(),\n+                \".\".to_string(),\n+                \"'\".to_string(),\n+                \"(\".to_string(),\n+            ]),\n             all_commit_characters: None,\n             completion_item: None,\n             work_done_progress_options: WorkDoneProgressOptions { work_done_progress: None },"}, {"sha": "a8e3e93b8f5721ee2027a6bf65bcb5a245ee0a2f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -796,27 +796,26 @@ pub(crate) fn handle_completion(\n     let _p = profile::span(\"handle_completion\");\n     let text_document_position = params.text_document_position.clone();\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n-    let completion_triggered_after_single_colon = {\n-        let mut res = false;\n-        if let Some(ctx) = params.context {\n-            if ctx.trigger_character.as_deref() == Some(\":\") {\n-                let source_file = snap.analysis.parse(position.file_id)?;\n-                let left_token =\n-                    source_file.syntax().token_at_offset(position.offset).left_biased();\n-                match left_token {\n-                    Some(left_token) => res = left_token.kind() == T![:],\n-                    None => res = true,\n-                }\n-            }\n+    let completion_trigger_character = params.context.and_then(|ctx| ctx.trigger_character);\n+\n+    if Some(\":\") == completion_trigger_character.as_deref() {\n+        let source_file = snap.analysis.parse(position.file_id)?;\n+        let left_token = source_file.syntax().token_at_offset(position.offset).left_biased();\n+        let completion_triggered_after_single_colon = match left_token {\n+            Some(left_token) => left_token.kind() == T![:],\n+            None => true,\n+        };\n+        if completion_triggered_after_single_colon {\n+            return Ok(None);\n         }\n-        res\n-    };\n-    if completion_triggered_after_single_colon {\n-        return Ok(None);\n     }\n \n     let completion_config = &snap.config.completion();\n-    let items = match snap.analysis.completions(completion_config, position)? {\n+    let items = match snap.analysis.completions(\n+        completion_config,\n+        position,\n+        completion_trigger_character.as_deref(),\n+    )? {\n         None => return Ok(None),\n         Some(items) => items,\n     };"}, {"sha": "47cdd8dfc75d8f9abf95f755eb054040be48cb9f", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f0462edf813ece280307e8d17d5f93402a739/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=1b5f0462edf813ece280307e8d17d5f93402a739", "patch": "@@ -148,7 +148,7 @@ fn integrated_completion_benchmark() {\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n-        analysis.completions(&config, position).unwrap();\n+        analysis.completions(&config, position, None).unwrap();\n     }\n \n     let completion_offset = {\n@@ -185,7 +185,7 @@ fn integrated_completion_benchmark() {\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n-        analysis.completions(&config, position).unwrap();\n+        analysis.completions(&config, position, None).unwrap();\n     }\n }\n "}]}