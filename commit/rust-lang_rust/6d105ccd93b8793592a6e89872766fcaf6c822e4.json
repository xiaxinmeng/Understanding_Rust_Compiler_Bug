{"sha": "6d105ccd93b8793592a6e89872766fcaf6c822e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTA1Y2NkOTNiODc5MzU5MmE2ZTg5ODcyNzY2ZmNhZjZjODIyZTQ=", "commit": {"author": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-21T19:34:44Z"}, "committer": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-21T19:34:44Z"}, "message": "add test #2033", "tree": {"sha": "3c20ef472c11943159f0a97749e139df95c82b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c20ef472c11943159f0a97749e139df95c82b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d105ccd93b8793592a6e89872766fcaf6c822e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d105ccd93b8793592a6e89872766fcaf6c822e4", "html_url": "https://github.com/rust-lang/rust/commit/6d105ccd93b8793592a6e89872766fcaf6c822e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d105ccd93b8793592a6e89872766fcaf6c822e4/comments", "author": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "html_url": "https://github.com/rust-lang/rust/commit/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "ee503633d7ee44e88fb66ae10fb9c952682a5631", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d105ccd93b8793592a6e89872766fcaf6c822e4/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d105ccd93b8793592a6e89872766fcaf6c822e4/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=6d105ccd93b8793592a6e89872766fcaf6c822e4", "patch": "@@ -547,3 +547,46 @@ where\n         self.map(|it| it.try_conv_with(ctx)).collect()\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use test_utils::extract_ranges;\n+\n+    #[test]\n+    fn conv_fold_line_folding_only_fixup() {\n+        let text = r#\"<fold>mod a;\n+mod b;\n+mod c;</fold>\n+\n+fn main() <fold>{\n+    if cond <fold>{\n+        a::do_a();\n+    }</fold> else <fold>{\n+        b::do_b();\n+    }</fold>\n+}</fold>\"#;\n+\n+        let (ranges, text) = extract_ranges(text, \"fold\");\n+        assert_eq!(ranges.len(), 4);\n+        let folds = vec![\n+            Fold { range: ranges[0], kind: FoldKind::Mods },\n+            Fold { range: ranges[1], kind: FoldKind::Block },\n+            Fold { range: ranges[2], kind: FoldKind::Block },\n+            Fold { range: ranges[3], kind: FoldKind::Block },\n+        ];\n+\n+        let line_index = LineIndex::new(&text);\n+        let ctx = FoldConvCtx { text: &text, line_index: &line_index, line_folding_only: true };\n+        let converted: Vec<_> = folds.into_iter().map_conv_with(&ctx).collect();\n+\n+        let expected_lines = [(0, 2), (4, 10), (5, 6), (7, 9)];\n+        assert_eq!(converted.len(), expected_lines.len());\n+        for (folding_range, (start_line, end_line)) in converted.iter().zip(expected_lines.iter()) {\n+            assert_eq!(folding_range.start_line, *start_line);\n+            assert_eq!(folding_range.start_character, None);\n+            assert_eq!(folding_range.end_line, *end_line);\n+            assert_eq!(folding_range.end_character, None);\n+        }\n+    }\n+}"}]}