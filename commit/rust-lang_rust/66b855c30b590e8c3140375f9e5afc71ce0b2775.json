{"sha": "66b855c30b590e8c3140375f9e5afc71ce0b2775", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Yjg1NWMzMGI1OTBlOGMzMTQwMzc1ZjllNWFmYzcxY2UwYjI3NzU=", "commit": {"author": {"name": "logan-dev-oss", "email": "logan-dev-oss@protonmail.com", "date": "2020-04-17T08:12:30Z"}, "committer": {"name": "logan-dev-oss", "email": "logan-dev-oss@protonmail.com", "date": "2020-04-17T08:12:30Z"}, "message": "Integrate more idiomatic rust changes.", "tree": {"sha": "8018b3b01434f7e466706868925f6d8b3564635c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8018b3b01434f7e466706868925f6d8b3564635c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b855c30b590e8c3140375f9e5afc71ce0b2775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b855c30b590e8c3140375f9e5afc71ce0b2775", "html_url": "https://github.com/rust-lang/rust/commit/66b855c30b590e8c3140375f9e5afc71ce0b2775", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b855c30b590e8c3140375f9e5afc71ce0b2775/comments", "author": null, "committer": null, "parents": [{"sha": "9c89cf00c07daa35bb03909708d9597189e04def", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c89cf00c07daa35bb03909708d9597189e04def", "html_url": "https://github.com/rust-lang/rust/commit/9c89cf00c07daa35bb03909708d9597189e04def"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "cc783baa687232f7c01f6d898a8b8d3c3aa3853a", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66b855c30b590e8c3140375f9e5afc71ce0b2775/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b855c30b590e8c3140375f9e5afc71ce0b2775/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=66b855c30b590e8c3140375f9e5afc71ce0b2775", "patch": "@@ -104,14 +104,16 @@ impl EarlyLintPass for Precedence {\n \n         if let ExprKind::Unary(UnOp::Neg, ref rhs) = expr.kind {\n             if let ExprKind::MethodCall(ref path_segment, ref args) = rhs.kind {\n+                let path_segment_str = path_segment.ident.name.as_str();\n                 if let Some(slf) = args.first() {\n                     if let ExprKind::Lit(ref lit) = slf.kind {\n                         match lit.kind {\n                             LitKind::Int(..) | LitKind::Float(..) => {\n-                                for &odd_function in &ODD_FUNCTIONS_WHITELIST {\n-                                    if odd_function == &*path_segment.ident.name.as_str() {\n-                                        return;\n-                                    }\n+                                if ODD_FUNCTIONS_WHITELIST\n+                                    .iter()\n+                                    .any(|odd_function| **odd_function == *path_segment_str)\n+                                {\n+                                    return;\n                                 }\n                                 let mut applicability = Applicability::MachineApplicable;\n                                 span_lint_and_sugg("}]}