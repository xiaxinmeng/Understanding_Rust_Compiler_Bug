{"sha": "2faabf579323f5252329264cc53ba9ff803429a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYWFiZjU3OTMyM2Y1MjUyMzI5MjY0Y2M1M2JhOWZmODAzNDI5YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T19:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-27T19:56:18Z"}, "message": "Auto merge of #80367 - camelid:check_match-combine-loop, r=Nadrieril\n\nCombine two loops in `check_match`\n\nSuggested by Nadrieril in\nhttps://github.com/rust-lang/rust/pull/79051#discussion_r548778186.\n\nOpening to get a perf run. Hopefully this code doesn't require everything in the\nfirst loop to be done before running the second! (It shouldn't though.)\n\ncc `@Nadrieril`", "tree": {"sha": "c6457904f743b1722983f32d15e3b2eb94380e66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6457904f743b1722983f32d15e3b2eb94380e66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2faabf579323f5252329264cc53ba9ff803429a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2faabf579323f5252329264cc53ba9ff803429a3", "html_url": "https://github.com/rust-lang/rust/commit/2faabf579323f5252329264cc53ba9ff803429a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2faabf579323f5252329264cc53ba9ff803429a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd853c00e255559255885aadff9e93a1760c8728", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd853c00e255559255885aadff9e93a1760c8728", "html_url": "https://github.com/rust-lang/rust/commit/fd853c00e255559255885aadff9e93a1760c8728"}, {"sha": "c3a03ae5b715cdfd4739a530c1b8adde0bb3360a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a03ae5b715cdfd4739a530c1b8adde0bb3360a", "html_url": "https://github.com/rust-lang/rust/commit/c3a03ae5b715cdfd4739a530c1b8adde0bb3360a"}], "stats": {"total": 11, "additions": 3, "deletions": 8}, "files": [{"sha": "57ea6c86e7a1c3ff660b4b8abef04a81c1162a4f", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2faabf579323f5252329264cc53ba9ff803429a3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faabf579323f5252329264cc53ba9ff803429a3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=2faabf579323f5252329264cc53ba9ff803429a3", "patch": "@@ -112,7 +112,7 @@ impl PatCtxt<'_, '_> {\n }\n \n impl<'tcx> MatchVisitor<'_, 'tcx> {\n-    fn check_patterns(&mut self, pat: &Pat<'_>) {\n+    fn check_patterns(&self, pat: &Pat<'_>) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n         check_for_bindings_named_same_as_variants(self, pat);\n     }\n@@ -150,18 +150,13 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         arms: &'tcx [hir::Arm<'tcx>],\n         source: hir::MatchSource,\n     ) {\n+        let mut cx = self.new_cx(scrut.hir_id);\n+\n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             self.check_patterns(&arm.pat);\n             if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n                 self.check_patterns(pat);\n-            }\n-        }\n-\n-        let mut cx = self.new_cx(scrut.hir_id);\n-\n-        for arm in arms {\n-            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n                 let tpat = self.lower_pattern(&mut cx, pat, &mut false).0;\n                 check_if_let_guard(&mut cx, &tpat, pat.hir_id);\n             }"}]}