{"sha": "da7b1c984c74db17198bd5434d5da78587a9a91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhN2IxYzk4NGM3NGRiMTcxOThiZDU0MzRkNWRhNzg1ODdhOWE5MWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-04T19:20:37Z"}, "message": "Separate Def::StructCtor/Def::VariantCtor from Def::Struct/Def::Variant", "tree": {"sha": "4ad4c9c003663a564fb31dcf3485e98fba321fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad4c9c003663a564fb31dcf3485e98fba321fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da7b1c984c74db17198bd5434d5da78587a9a91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da7b1c984c74db17198bd5434d5da78587a9a91e", "html_url": "https://github.com/rust-lang/rust/commit/da7b1c984c74db17198bd5434d5da78587a9a91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da7b1c984c74db17198bd5434d5da78587a9a91e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1", "html_url": "https://github.com/rust-lang/rust/commit/a5dac7a2af3ee444817eb7bfbba3539be8c06cf1"}], "stats": {"total": 214, "additions": 129, "deletions": 85}, "files": [{"sha": "eede353de06aabf4c2087eaba492a512ddb361d5", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -13,6 +13,16 @@ use util::nodemap::NodeMap;\n use syntax::ast;\n use hir;\n \n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum CtorKind {\n+    // Constructor function automatically created by a tuple struct/variant.\n+    Fn,\n+    // Constructor constant automatically created by a unit struct/variant.\n+    Const,\n+    // Unusable name in value namespace created by a struct variant.\n+    Fictive,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     Fn(DefId),\n@@ -23,21 +33,18 @@ pub enum Def {\n     AssociatedConst(DefId),\n     Local(DefId),\n     Variant(DefId),\n+    VariantCtor(DefId, CtorKind),\n     Enum(DefId),\n     TyAlias(DefId),\n     AssociatedTy(DefId),\n     Trait(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n     Upvar(DefId,        // def id of closed over local\n-             usize,        // index in the freevars list of the closure\n-             ast::NodeId), // expr node that creates the closure\n-\n-    // If Def::Struct lives in type namespace it denotes a struct item and its DefId refers\n-    // to NodeId of the struct itself.\n-    // If Def::Struct lives in value namespace (e.g. tuple struct, unit struct expressions)\n-    // it denotes a constructor and its DefId refers to NodeId of the struct's constructor.\n-    Struct(DefId),\n+          usize,        // index in the freevars list of the closure\n+          ast::NodeId), // expr node that creates the closure\n+    Struct(DefId), // DefId refers to NodeId of the struct itself\n+    StructCtor(DefId, CtorKind), // DefId refers to NodeId of the struct's constructor\n     Union(DefId),\n     Label(ast::NodeId),\n     Method(DefId),\n@@ -97,14 +104,24 @@ pub struct Export {\n     pub def_id: DefId, // The definition of the target.\n }\n \n+impl CtorKind {\n+    pub fn from_vdata(vdata: &ast::VariantData) -> CtorKind {\n+        match *vdata {\n+            ast::VariantData::Tuple(..) => CtorKind::Fn,\n+            ast::VariantData::Unit(..) => CtorKind::Const,\n+            ast::VariantData::Struct(..) => CtorKind::Fictive,\n+        }\n+    }\n+}\n+\n impl Def {\n     pub fn def_id(&self) -> DefId {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n-            Def::Variant(id) | Def::Enum(id) | Def::TyAlias(id) | Def::AssociatedTy(id) |\n-            Def::TyParam(id) | Def::Struct(id) | Def::Union(id) | Def::Trait(id) |\n-            Def::Method(id) | Def::Const(id) | Def::AssociatedConst(id) |\n-            Def::Local(id) | Def::Upvar(id, ..) => {\n+            Def::Variant(id) | Def::VariantCtor(id, ..) | Def::Enum(id) | Def::TyAlias(id) |\n+            Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n+            Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n+            Def::AssociatedConst(id) | Def::Local(id) | Def::Upvar(id, ..) => {\n                 id\n             }\n \n@@ -123,10 +140,12 @@ impl Def {\n             Def::Mod(..) => \"module\",\n             Def::Static(..) => \"static\",\n             Def::Variant(..) => \"variant\",\n+            Def::VariantCtor(..) => \"variant\",\n             Def::Enum(..) => \"enum\",\n             Def::TyAlias(..) => \"type\",\n             Def::AssociatedTy(..) => \"associated type\",\n             Def::Struct(..) => \"struct\",\n+            Def::StructCtor(..) => \"struct\",\n             Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n             Def::Method(..) => \"method\","}, {"sha": "0e78acb15c84b9ad33475020171f52911d4d410e", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -174,7 +174,8 @@ pub fn necessary_variants(dm: &DefMap, pat: &hir::Pat) -> Vec<DefId> {\n             PatKind::Path(..) |\n             PatKind::Struct(..) => {\n                 match dm.get(&p.id) {\n-                    Some(&PathResolution { base_def: Def::Variant(id), .. }) => {\n+                    Some(&PathResolution { base_def: Def::Variant(id), .. }) |\n+                    Some(&PathResolution { base_def: Def::VariantCtor(id, ..), .. }) => {\n                         variants.push(id);\n                     }\n                     _ => ()"}, {"sha": "af22ef0bd3d6246ac22950a63d659e3c8938250c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             _ if self.ignore_non_const_paths => (),\n             Def::PrimTy(_) => (),\n             Def::SelfTy(..) => (),\n-            Def::Variant(variant_id) => {\n+            Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 if let Some(enum_id) = self.tcx.parent_def_id(variant_id) {\n                     self.check_def_id(enum_id);\n                 }"}, {"sha": "a03a0372e4849ca69197d323620fdf9832aaca87", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -1003,7 +1003,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         // the leaves of the pattern tree structure.\n         return_if_err!(mc.cat_pattern(cmt_discr, pat, |mc, cmt_pat, pat| {\n             match tcx.expect_def_or_none(pat.id) {\n-                Some(Def::Variant(variant_did)) => {\n+                Some(Def::Variant(variant_did)) |\n+                Some(Def::VariantCtor(variant_did, ..)) => {\n                     let enum_did = tcx.parent_def_id(variant_did).unwrap();\n                     let downcast_cmt = if tcx.lookup_adt_def(enum_did).is_univariant() {\n                         cmt_pat\n@@ -1015,7 +1016,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                     debug!(\"variant downcast_cmt={:?} pat={:?}\", downcast_cmt, pat);\n                     delegate.matched_pat(pat, downcast_cmt, match_mode);\n                 }\n-                Some(Def::Struct(..)) | Some(Def::Union(..)) |\n+                Some(Def::Struct(..)) | Some(Def::StructCtor(..)) | Some(Def::Union(..)) |\n                 Some(Def::TyAlias(..)) | Some(Def::AssociatedTy(..)) => {\n                     debug!(\"struct cmt_pat={:?} pat={:?}\", cmt_pat, pat);\n                     delegate.matched_pat(pat, cmt_pat, match_mode);"}, {"sha": "4d1151c2826307da0991e8ebbfe3abeea59a6301", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                id, expr_ty, def);\n \n         match def {\n-          Def::Struct(..) | Def::Union(..) | Def::Variant(..) | Def::Const(..) |\n+          Def::StructCtor(..) | Def::Union(..) | Def::VariantCtor(..) | Def::Const(..) |\n           Def::AssociatedConst(..) | Def::Fn(..) | Def::Method(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n@@ -533,6 +533,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           Def::Trait(_) | Def::Enum(..) | Def::TyAlias(..) | Def::PrimTy(_) |\n           Def::TyParam(..) |\n           Def::Label(_) | Def::SelfTy(..) |\n+          Def::Variant(..) |\n+          Def::Struct(..) |\n           Def::AssociatedTy(..) => {\n               span_bug!(span, \"Unexpected definition in \\\n                                memory categorization: {:?}\", def);\n@@ -1077,7 +1079,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // alone) because PatKind::Struct can also refer to variants.\n         let cmt = match self.tcx().expect_def_or_none(pat.id) {\n             Some(Def::Err) => return Err(()),\n-            Some(Def::Variant(variant_did)) => {\n+            Some(Def::Variant(variant_did)) |\n+            Some(Def::VariantCtor(variant_did, ..)) => {\n                 // univariant enums do not need downcasts\n                 let enum_did = self.tcx().parent_def_id(variant_did).unwrap();\n                 if !self.tcx().lookup_adt_def(enum_did).is_univariant() {\n@@ -1092,11 +1095,11 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         match pat.node {\n           PatKind::TupleStruct(_, ref subpats, ddpos) => {\n             let expected_len = match self.tcx().expect_def(pat.id) {\n-                Def::Variant(def_id) => {\n+                Def::VariantCtor(def_id, ..) => {\n                     let enum_def = self.tcx().parent_def_id(def_id).unwrap();\n                     self.tcx().lookup_adt_def(enum_def).variant_with_id(def_id).fields.len()\n                 }\n-                Def::Struct(..) => {\n+                Def::StructCtor(..) => {\n                     match self.pat_ty(&pat)?.sty {\n                         ty::TyAdt(adt_def, _) => {\n                             adt_def.struct_variant().fields.len()"}, {"sha": "7f1f326299e1a33a4d6be1cafc319b399fffcd5e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -20,7 +20,7 @@ pub use self::fold::TypeFoldable;\n use dep_graph::{self, DepNode};\n use hir::map as ast_map;\n use middle;\n-use hir::def::{Def, PathResolution, ExportMap};\n+use hir::def::{Def, CtorKind, PathResolution, ExportMap};\n use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::region::{CodeExtent, ROOT_CODE_EXTENT};\n@@ -1496,6 +1496,13 @@ impl VariantKind {\n             hir::VariantData::Unit(..) => VariantKind::Unit,\n         }\n     }\n+    pub fn ctor_kind(self) -> CtorKind {\n+        match self {\n+            VariantKind::Tuple => CtorKind::Fn,\n+            VariantKind::Unit => CtorKind::Const,\n+            VariantKind::Struct => CtorKind::Fictive,\n+        }\n+    }\n }\n \n impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n@@ -1673,8 +1680,8 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n \n     pub fn variant_of_def(&self, def: Def) -> &VariantDefData<'gcx, 'container> {\n         match def {\n-            Def::Variant(vid) => self.variant_with_id(vid),\n-            Def::Struct(..) | Def::Union(..) |\n+            Def::Variant(vid) | Def::VariantCtor(vid, ..) => self.variant_with_id(vid),\n+            Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) => self.struct_variant(),\n             _ => bug!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n@@ -2332,11 +2339,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     // or variant or their constructors, panics otherwise.\n     pub fn expect_variant_def(self, def: Def) -> VariantDef<'tcx> {\n         match def {\n-            Def::Variant(did) => {\n+            Def::Variant(did) | Def::VariantCtor(did, ..) => {\n                 let enum_did = self.parent_def_id(did).unwrap();\n                 self.lookup_adt_def(enum_did).variant_with_id(did)\n             }\n-            Def::Struct(did) | Def::Union(did) => {\n+            Def::Struct(did) | Def::StructCtor(did, ..) | Def::Union(did) => {\n                 self.lookup_adt_def(did).struct_variant()\n             }\n             _ => bug!(\"expect_variant_def used with unexpected def {:?}\", def)"}, {"sha": "fc30979de3144fcdde9e39795111cbb104839f76", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -801,8 +801,8 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n     match pat.node {\n         PatKind::Struct(..) | PatKind::TupleStruct(..) | PatKind::Path(..) =>\n             match cx.tcx.expect_def(pat.id) {\n-                Def::Variant(id) => vec![Variant(id)],\n-                Def::Struct(..) | Def::Union(..) |\n+                Def::Variant(id) | Def::VariantCtor(id, ..) => vec![Variant(id)],\n+                Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n                 Def::TyAlias(..) | Def::AssociatedTy(..) => vec![Single],\n                 Def::Const(..) | Def::AssociatedConst(..) =>\n                     span_bug!(pat.span, \"const pattern should've been rewritten\"),\n@@ -913,8 +913,8 @@ pub fn specialize<'a, 'b, 'tcx>(\n                 Def::Const(..) | Def::AssociatedConst(..) =>\n                     span_bug!(pat_span, \"const pattern should've \\\n                                          been rewritten\"),\n-                Def::Variant(id) if *constructor != Variant(id) => None,\n-                Def::Variant(..) | Def::Struct(..) => Some(Vec::new()),\n+                Def::VariantCtor(id, ..) if *constructor != Variant(id) => None,\n+                Def::VariantCtor(..) | Def::StructCtor(..) => Some(Vec::new()),\n                 def => span_bug!(pat_span, \"specialize: unexpected \\\n                                           definition {:?}\", def),\n             }\n@@ -925,8 +925,8 @@ pub fn specialize<'a, 'b, 'tcx>(\n                 Def::Const(..) | Def::AssociatedConst(..) =>\n                     span_bug!(pat_span, \"const pattern should've \\\n                                          been rewritten\"),\n-                Def::Variant(id) if *constructor != Variant(id) => None,\n-                Def::Variant(..) | Def::Struct(..) => {\n+                Def::VariantCtor(id, ..) if *constructor != Variant(id) => None,\n+                Def::VariantCtor(..) | Def::StructCtor(..) => {\n                     match ddpos {\n                         Some(ddpos) => {\n                             let mut pats: Vec<_> = args[..ddpos].iter().map(|p| {"}, {"sha": "890319d502431fb25427726f8e85cb1eb7b0eb03", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -287,8 +287,8 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                entry.insert(PathResolution::new(def));\n             }\n             let path = match def {\n-                Def::Struct(def_id) => def_to_path(tcx, def_id),\n-                Def::Variant(variant_did) => def_to_path(tcx, variant_did),\n+                Def::StructCtor(def_id, ..) => def_to_path(tcx, def_id),\n+                Def::VariantCtor(variant_did, ..) => def_to_path(tcx, variant_did),\n                 Def::Fn(..) | Def::Method(..) => return Ok(P(hir::Pat {\n                     id: expr.id,\n                     node: PatKind::Lit(P(expr.clone())),\n@@ -326,7 +326,7 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         hir::ExprPath(_, ref path) => {\n             match tcx.expect_def(expr.id) {\n-                Def::Struct(..) | Def::Variant(..) => PatKind::Path(None, path.clone()),\n+                Def::StructCtor(..) | Def::VariantCtor(..) => PatKind::Path(None, path.clone()),\n                 Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                     let substs = Some(tcx.node_id_item_substs(expr.id).substs);\n                     let (expr, _ty) = lookup_const_by_id(tcx, def_id, substs).unwrap();\n@@ -807,7 +807,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                       signal!(e, NonConstPath);\n                   }\n               },\n-              Def::Variant(variant_def) => {\n+              Def::VariantCtor(variant_def, ..) => {\n                   if let Some(const_expr) = lookup_variant_by_id(tcx, variant_def) {\n                       match eval_const_expr_partial(tcx, const_expr, ty_hint, None) {\n                           Ok(val) => val,\n@@ -820,7 +820,7 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                       signal!(e, UnimplementedConstVal(\"enum variants\"));\n                   }\n               }\n-              Def::Struct(..) => {\n+              Def::StructCtor(..) => {\n                   ConstVal::Struct(e.id)\n               }\n               Def::Local(def_id) => {"}, {"sha": "393f99b3eb832c57f6c6f05031c0175f776d1494", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -611,11 +611,13 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             Def::Mod(..) |\n             Def::Static(..) |\n             Def::Variant(..) |\n+            Def::VariantCtor(..) |\n             Def::Enum(..) |\n             Def::TyAlias(..) |\n             Def::AssociatedTy(..) |\n             Def::TyParam(..) |\n             Def::Struct(..) |\n+            Def::StructCtor(..) |\n             Def::Union(..) |\n             Def::Trait(..) |\n             Def::Method(..) |"}, {"sha": "926b0dc1fc1e5f06f04995739ff3660bb0dfc5dc", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -15,7 +15,7 @@ use hair::cx::Cx;\n use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n use rustc::hir::map;\n-use rustc::hir::def::Def;\n+use rustc::hir::def::{Def, CtorKind};\n use rustc::middle::const_val::ConstVal;\n use rustc_const_eval as const_eval;\n use rustc::middle::region::CodeExtent;\n@@ -271,10 +271,10 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     // Tuple-like ADTs are represented as ExprCall. We convert them here.\n                     expr_ty.ty_adt_def().and_then(|adt_def|{\n                         match cx.tcx.expect_def(fun.id) {\n-                            Def::Variant(variant_id) => {\n+                            Def::VariantCtor(variant_id, ..) => {\n                                 Some((adt_def, adt_def.variant_index_with_id(variant_id)))\n                             },\n-                            Def::Struct(..) => {\n+                            Def::StructCtor(..) => {\n                                 Some((adt_def, 0))\n                             },\n                             _ => None\n@@ -672,10 +672,9 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let def_id = match def {\n         // A regular function.\n         Def::Fn(def_id) | Def::Method(def_id) => def_id,\n-        Def::Struct(def_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n-            // A tuple-struct constructor. Should only be reached if not called in the same\n-            // expression.\n-            ty::TyFnDef(..) => def_id,\n+        Def::StructCtor(def_id, CtorKind::Fn) |\n+        Def::VariantCtor(def_id, CtorKind::Fn) => def_id,\n+        Def::StructCtor(_, CtorKind::Const) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A unit struct which is used as a value. We return a completely different ExprKind\n             // here to account for this special case.\n             ty::TyAdt(adt_def, substs) => return ExprKind::Adt {\n@@ -687,13 +686,10 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             },\n             ref sty => bug!(\"unexpected sty: {:?}\", sty)\n         },\n-        Def::Variant(variant_id) => match cx.tcx.node_id_to_type(expr.id).sty {\n-            // A variant constructor. Should only be reached if not called in the same\n-            // expression.\n-            ty::TyFnDef(..) => variant_id,\n+        Def::VariantCtor(def_id, CtorKind::Const) => match cx.tcx.node_id_to_type(expr.id).sty {\n             // A unit variant, similar special case to the struct case above.\n             ty::TyAdt(adt_def, substs) => {\n-                let index = adt_def.variant_index_with_id(variant_id);\n+                let index = adt_def.variant_index_with_id(def_id);\n                 return ExprKind::Adt {\n                     adt_def: adt_def,\n                     substs: substs,"}, {"sha": "84f415463be05613e9d6bd36f3b2b0503975637b", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -301,7 +301,7 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                        subpatterns: Vec<FieldPattern<'tcx>>)\n                        -> PatternKind<'tcx> {\n         match self.cx.tcx.expect_def(pat.id) {\n-            Def::Variant(variant_id) => {\n+            Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n                 let enum_id = self.cx.tcx.parent_def_id(variant_id).unwrap();\n                 let adt_def = self.cx.tcx.lookup_adt_def(enum_id);\n                 if adt_def.variants.len() > 1 {\n@@ -315,7 +315,7 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Def::Struct(..) | Def::Union(..) |\n+            Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n             Def::TyAlias(..) | Def::AssociatedTy(..) => {\n                 PatternKind::Leaf { subpatterns: subpatterns }\n             }"}, {"sha": "3d4add0769ab836e2bb3efb26d094ba8eba74ac5", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -489,11 +489,11 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         }\n         hir::ExprPath(..) => {\n             match v.tcx.expect_def(e.id) {\n-                Def::Variant(..) => {\n+                Def::VariantCtor(..) => {\n                     // Count the discriminator or function pointer.\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                 }\n-                Def::Struct(..) => {\n+                Def::StructCtor(..) => {\n                     if let ty::TyFnDef(..) = node_ty.sty {\n                         // Count the function pointer.\n                         v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n@@ -539,8 +539,8 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n             }\n             // The callee is an arbitrary expression, it doesn't necessarily have a definition.\n             let is_const = match v.tcx.expect_def_or_none(callee.id) {\n-                Some(Def::Struct(..)) => true,\n-                Some(Def::Variant(..)) => {\n+                Some(Def::StructCtor(..)) => true,\n+                Some(Def::VariantCtor(..)) => {\n                     // Count the discriminator.\n                     v.add_qualif(ConstQualif::NON_ZERO_SIZED);\n                     true"}, {"sha": "0f5a67e66fb042e8ee6d026fdafca0705a2bf945", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n                     // affect the specific variant used, but we need to check\n                     // the whole enum definition to see what expression that\n                     // might be (if any).\n-                    Some(Def::Variant(variant_id)) => {\n+                    Some(Def::VariantCtor(variant_id, ..)) => {\n                         if let Some(variant_id) = self.ast_map.as_local_node_id(variant_id) {\n                             let variant = self.ast_map.expect_variant(variant_id);\n                             let enum_id = self.ast_map.get_parent(variant_id);\n@@ -283,7 +283,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n                             } else {\n                                 span_bug!(e.span,\n                                           \"`check_static_recursion` found \\\n-                                           non-enum in Def::Variant\");\n+                                           non-enum in Def::VariantCtor\");\n                             }\n                         }\n                     }"}, {"sha": "6b2076cb0585cfc3fc6bd2799023270aed0a1145", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -454,7 +454,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ExprPath(..) => {\n-                if let Def::Struct(..) = self.tcx.expect_def(expr.id) {\n+                if let Def::StructCtor(..) = self.tcx.expect_def(expr.id) {\n                     let expr_ty = self.tcx.expr_ty(expr);\n                     let def = match expr_ty.sty {\n                         ty::TyFnDef(.., &ty::BareFnTy { sig: ty::Binder(ty::FnSig {"}, {"sha": "1e53bb1b96325548982307eb00f481c2d1ccb90c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -297,8 +297,9 @@ impl<'b> Resolver<'b> {\n                 // If this is a tuple or unit struct, define a name\n                 // in the value namespace as well.\n                 if !struct_def.is_struct() {\n-                    let def = Def::Struct(self.definitions.local_def_id(struct_def.id()));\n-                    self.define(parent, name, ValueNS, (def, sp, vis));\n+                    let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n+                                                   CtorKind::from_vdata(struct_def));\n+                    self.define(parent, name, ValueNS, (ctor_def, sp, vis));\n                 }\n \n                 // Record the def ID and fields of this struct.\n@@ -347,17 +348,19 @@ impl<'b> Resolver<'b> {\n                                        parent: Module<'b>,\n                                        vis: ty::Visibility) {\n         let name = variant.node.name.name;\n+        let ctor_kind = CtorKind::from_vdata(&variant.node.data);\n         if variant.node.data.is_struct() {\n             // Not adding fields for variants as they are not accessed with a self receiver\n             let variant_def_id = self.definitions.local_def_id(variant.node.data.id());\n             self.structs.insert(variant_def_id, Vec::new());\n         }\n \n-        // Variants are always treated as importable to allow them to be glob used.\n         // All variants are defined in both type and value namespaces as future-proofing.\n         let def = Def::Variant(self.definitions.local_def_id(variant.node.data.id()));\n-        self.define(parent, name, ValueNS, (def, variant.span, vis));\n+        let ctor_def = Def::VariantCtor(self.definitions.local_def_id(variant.node.data.id()),\n+                                        ctor_kind);\n         self.define(parent, name, TypeNS, (def, variant.span, vis));\n+        self.define(parent, name, ValueNS, (ctor_def, variant.span, vis));\n     }\n \n     /// Constructs the reduced graph for one foreign item.\n@@ -417,15 +420,16 @@ impl<'b> Resolver<'b> {\n                 let module = self.new_module(parent, ModuleKind::Def(def, name), false);\n                 let _ = self.try_define(parent, name, TypeNS, (module, DUMMY_SP, vis));\n             }\n-            Def::Variant(variant_id) => {\n+            Def::Variant(..) => {\n                 debug!(\"(building reduced graph for external crate) building variant {}\", name);\n-                // Variants are always treated as importable to allow them to be glob used.\n                 // All variants are defined in both type and value namespaces as future-proofing.\n+                let vkind = self.session.cstore.variant_kind(def_id).unwrap();\n+                let ctor_def = Def::VariantCtor(def_id, vkind.ctor_kind());\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n-                let _ = self.try_define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n-                if self.session.cstore.variant_kind(variant_id) == Some(ty::VariantKind::Struct) {\n+                let _ = self.try_define(parent, name, ValueNS, (ctor_def, DUMMY_SP, vis));\n+                if vkind == ty::VariantKind::Struct {\n                     // Not adding fields for variants as they are not accessed with a self receiver\n-                    self.structs.insert(variant_id, Vec::new());\n+                    self.structs.insert(def_id, Vec::new());\n                 }\n             }\n             Def::Fn(..) |\n@@ -464,16 +468,17 @@ impl<'b> Resolver<'b> {\n                 debug!(\"(building reduced graph for external crate) building type {}\", name);\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n             }\n-            Def::Struct(_)\n+            Def::Struct(..)\n                 if self.session.cstore.def_key(def_id).disambiguated_data.data !=\n                    DefPathData::StructCtor\n                 => {\n                 debug!(\"(building reduced graph for external crate) building type and value for {}\",\n                        name);\n                 let _ = self.try_define(parent, name, TypeNS, (def, DUMMY_SP, vis));\n                 if let Some(ctor_def_id) = self.session.cstore.struct_ctor_def_id(def_id) {\n-                    let def = Def::Struct(ctor_def_id);\n-                    let _ = self.try_define(parent, name, ValueNS, (def, DUMMY_SP, vis));\n+                    let vkind = self.session.cstore.variant_kind(def_id).unwrap();\n+                    let ctor_def = Def::StructCtor(ctor_def_id, vkind.ctor_kind());\n+                    let _ = self.try_define(parent, name, ValueNS, (ctor_def, DUMMY_SP, vis));\n                 }\n \n                 // Record the def ID and fields of this struct.\n@@ -488,6 +493,8 @@ impl<'b> Resolver<'b> {\n                 self.structs.insert(def_id, fields);\n             }\n             Def::Struct(..) => {}\n+            Def::VariantCtor(..) |\n+            Def::StructCtor(..) |\n             Def::Local(..) |\n             Def::PrimTy(..) |\n             Def::TyParam(..) |"}, {"sha": "534b3e39879f9fc53ced278c3a1ac2538ad9651c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -924,7 +924,8 @@ impl<'a> NameBinding<'a> {\n \n     fn is_variant(&self) -> bool {\n         match self.kind {\n-            NameBindingKind::Def(Def::Variant(..)) => true,\n+            NameBindingKind::Def(Def::Variant(..)) |\n+            NameBindingKind::Def(Def::VariantCtor(..)) => true,\n             _ => false,\n         }\n     }\n@@ -2373,14 +2374,14 @@ impl<'a> Resolver<'a> {\n                         let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n                                              bmode != BindingMode::ByValue(Mutability::Immutable);\n                         match def {\n-                            Def::Struct(..) | Def::Variant(..) |\n+                            Def::StructCtor(..) | Def::VariantCtor(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n                                 // A constant, unit variant, etc pattern.\n                                 let name = ident.node.name;\n                                 self.record_use(name, ValueNS, binding.unwrap(), ident.span);\n                                 Some(PathResolution::new(def))\n                             }\n-                            Def::Struct(..) | Def::Variant(..) |\n+                            Def::StructCtor(..) | Def::VariantCtor(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) | Def::Static(..) => {\n                                 // A fresh binding that shadows something unacceptable.\n                                 resolve_error(\n@@ -2411,7 +2412,7 @@ impl<'a> Resolver<'a> {\n                 PatKind::TupleStruct(ref path, ..) => {\n                     self.resolve_pattern_path(pat.id, None, path, ValueNS, |def| {\n                         match def {\n-                            Def::Struct(..) | Def::Variant(..) => true,\n+                            Def::StructCtor(..) | Def::VariantCtor(..) => true,\n                             _ => false,\n                         }\n                     }, \"variant or struct\");\n@@ -2420,7 +2421,7 @@ impl<'a> Resolver<'a> {\n                 PatKind::Path(ref qself, ref path) => {\n                     self.resolve_pattern_path(pat.id, qself.as_ref(), path, ValueNS, |def| {\n                         match def {\n-                            Def::Struct(..) | Def::Variant(..) |\n+                            Def::StructCtor(..) | Def::VariantCtor(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) => true,\n                             _ => false,\n                         }\n@@ -2846,10 +2847,9 @@ impl<'a> Resolver<'a> {\n                 if let Some(path_res) = self.resolve_possibly_assoc_item(expr.id,\n                                                             maybe_qself.as_ref(), path, ValueNS) {\n                     // Check if struct variant\n-                    let is_struct_variant = if let Def::Variant(variant_id) = path_res.base_def {\n-                        self.structs.contains_key(&variant_id)\n-                    } else {\n-                        false\n+                    let is_struct_variant = match path_res.base_def {\n+                        Def::VariantCtor(_, CtorKind::Fictive) => true,\n+                        _ => false,\n                     };\n                     if is_struct_variant {\n                         let _ = self.structs.contains_key(&path_res.base_def.def_id());"}, {"sha": "8dd1a7940b399efaa46b0a68f0b804c40a6384cc", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -303,6 +303,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 }.lower(self.tcx));\n             }\n             Def::Struct(..) |\n+            Def::StructCtor(..) |\n             Def::Union(..) |\n             Def::Enum(..) |\n             Def::TyAlias(..) |\n@@ -320,6 +321,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedConst(..) |\n             Def::Local(..) |\n             Def::Variant(..) |\n+            Def::VariantCtor(..) |\n             Def::Upvar(..) => {\n                 self.dumper.variable_ref(VariableRefData {\n                     span: sub_span.expect(\"No span found for var ref\"),\n@@ -929,7 +931,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::Const(..) |\n             Def::AssociatedConst(..) |\n             Def::Struct(..) |\n+            Def::StructCtor(..) |\n             Def::Variant(..) |\n+            Def::VariantCtor(..) |\n             Def::Fn(..) => self.write_sub_paths_truncated(path, false),\n             _ => {}\n         }\n@@ -1486,8 +1490,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                         }.lower(self.tcx));\n                     }\n                 }\n-                Def::Variant(..) | Def::Enum(..) |\n-                Def::TyAlias(..) | Def::Struct(..) => {\n+                Def::Variant(..) | Def::VariantCtor(..) | Def::Enum(..) |\n+                Def::TyAlias(..) | Def::Struct(..) | Def::StructCtor(..) => {\n                     paths_to_process.push((id, p.clone(), Some(ref_kind)))\n                 }\n                 // FIXME(nrc) what are these doing here?"}, {"sha": "0e3ee5e9fff49c2ab537b89e140b50b3e26bf3f3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -507,7 +507,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Def::Static(..) |\n             Def::Const(..) |\n             Def::AssociatedConst(..) |\n-            Def::Variant(..) => {\n+            Def::Variant(..) |\n+            Def::VariantCtor(..) => {\n                 Some(Data::VariableRefData(VariableRefData {\n                     name: self.span_utils.snippet(sub_span.unwrap()),\n                     span: sub_span.unwrap(),\n@@ -516,6 +517,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }))\n             }\n             Def::Struct(def_id) |\n+            Def::StructCtor(def_id, ..) |\n             Def::Union(def_id) |\n             Def::Enum(def_id) |\n             Def::TyAlias(def_id) |"}, {"sha": "cc99ee63ad936b3ef0ced0ffe1759bc6d89a8628", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -534,7 +534,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 report_unexpected_def();\n                 return tcx.types.err;\n             }\n-            Def::Variant(..) | Def::Struct(..) => {\n+            Def::VariantCtor(..) | Def::StructCtor(..) => {\n                 let variant = tcx.expect_variant_def(def);\n                 if variant.kind != VariantKind::Unit {\n                     report_unexpected_def();\n@@ -589,7 +589,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 report_unexpected_def(false);\n                 return tcx.types.err;\n             }\n-            Def::Variant(..) | Def::Struct(..) => {\n+            Def::VariantCtor(..) | Def::StructCtor(..) => {\n                 tcx.expect_variant_def(def)\n             }\n             _ => bug!(\"unexpected pattern definition {:?}\", def)"}, {"sha": "d9de1064ec13d8fa214d7dfabdc6a627e6fd61a0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da7b1c984c74db17198bd5434d5da78587a9a91e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=da7b1c984c74db17198bd5434d5da78587a9a91e", "patch": "@@ -4131,9 +4131,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut fn_segment = None;\n         match def {\n             // Case 1 and 1b. Reference to a *type* or *enum variant*.\n-            Def::Struct(def_id) |\n+            Def::StructCtor(def_id, ..) |\n             Def::Union(def_id) |\n-            Def::Variant(def_id) |\n+            Def::VariantCtor(def_id, ..) |\n             Def::Enum(def_id) |\n             Def::TyAlias(def_id) |\n             Def::AssociatedTy(def_id) |\n@@ -4190,6 +4190,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Def::Local(..) |\n             Def::Label(..) |\n             Def::Upvar(..) |\n+            Def::Variant(..) |\n+            Def::Struct(..) |\n             Def::Err => {}\n         }\n "}]}