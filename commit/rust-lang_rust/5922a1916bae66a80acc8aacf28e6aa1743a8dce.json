{"sha": "5922a1916bae66a80acc8aacf28e6aa1743a8dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjJhMTkxNmJhZTY2YTgwYWNjOGFhY2YyOGU2YWExNzQzYThkY2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-29T00:10:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-29T00:10:55Z"}, "message": "Rollup merge of #63076 - RalfJung:miri-fn-ptr-alloc-size, r=oli-obk\n\nMiri: fix determining size of an \"extra function\" allocation\n\nFixes [a bug](https://github.com/rust-lang/miri/pull/862) introduced by https://github.com/rust-lang/rust/pull/62982. Best reviewed commit-by-commit.\n\nr? @oli-obk", "tree": {"sha": "50b8ebb4a6cec84908075f586e79f8c8bc6941ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b8ebb4a6cec84908075f586e79f8c8bc6941ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5922a1916bae66a80acc8aacf28e6aa1743a8dce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPjmPCRBK7hj4Ov3rIwAAdHIIAKy1DeHbNKa1teMK1iaAw3Uc\nAR/sToPFsFlIKHfACGxvsKcL8gkZq2Ju0z01doEtAQ+Tyfc9A3dPP23tI68eXf3U\nb+cMQ8o8rF3blTVrNphvzJKkDIZxh4XsrmQph/E4THkbQJNMZN84QLYu4KpCCl9N\nrK6FXMkPivFVW3AQ8Zf5IrChY24DpSajDECcP8v0MBGVGaLiYgNxQf0FDvF+yx2Y\nXhGv9MMq4loWQkLSaBbI9GenCQq5/fTYmB2uEAya0ZqrpEqe/+HPC2Phovsh70wB\nzZPBBkrHew8lDmCZxoN730rgtem7Q0a1x3ynm2PmQ5rShSX4bBjk9Q9QbNSGQKc=\n=tgyo\n-----END PGP SIGNATURE-----\n", "payload": "tree 50b8ebb4a6cec84908075f586e79f8c8bc6941ae\nparent b52a95dfb3be675fd3ca6536dc506df4b4263dfe\nparent 0e602f10b55da3b751859d862a8cddba719ecd6f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564359055 +0200\ncommitter GitHub <noreply@github.com> 1564359055 +0200\n\nRollup merge of #63076 - RalfJung:miri-fn-ptr-alloc-size, r=oli-obk\n\nMiri: fix determining size of an \"extra function\" allocation\n\nFixes [a bug](https://github.com/rust-lang/miri/pull/862) introduced by https://github.com/rust-lang/rust/pull/62982. Best reviewed commit-by-commit.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5922a1916bae66a80acc8aacf28e6aa1743a8dce", "html_url": "https://github.com/rust-lang/rust/commit/5922a1916bae66a80acc8aacf28e6aa1743a8dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5922a1916bae66a80acc8aacf28e6aa1743a8dce/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b52a95dfb3be675fd3ca6536dc506df4b4263dfe", "html_url": "https://github.com/rust-lang/rust/commit/b52a95dfb3be675fd3ca6536dc506df4b4263dfe"}, {"sha": "0e602f10b55da3b751859d862a8cddba719ecd6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e602f10b55da3b751859d862a8cddba719ecd6f", "html_url": "https://github.com/rust-lang/rust/commit/0e602f10b55da3b751859d862a8cddba719ecd6f"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "e3f16a3c9ea452432b33ed47ebd2b70b0c8e6dcf", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5922a1916bae66a80acc8aacf28e6aa1743a8dce/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5922a1916bae66a80acc8aacf28e6aa1743a8dce/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=5922a1916bae66a80acc8aacf28e6aa1743a8dce", "patch": "@@ -54,6 +54,16 @@ pub trait AllocMap<K: Hash + Eq, V> {\n         k: K,\n         vacant: impl FnOnce() -> Result<V, E>\n     ) -> Result<&mut V, E>;\n+\n+    /// Read-only lookup.\n+    fn get(&self, k: K) -> Option<&V> {\n+        self.get_or(k, || Err(())).ok()\n+    }\n+\n+    /// Mutable lookup.\n+    fn get_mut(&mut self, k: K) -> Option<&mut V> {\n+        self.get_mut_or(k, || Err(())).ok()\n+    }\n }\n \n /// Methods of this trait signifies a point where CTFE evaluation would fail"}, {"sha": "87dd7738410ee8f4d054c51d3bc9c60be9de6ba0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5922a1916bae66a80acc8aacf28e6aa1743a8dce/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5922a1916bae66a80acc8aacf28e6aa1743a8dce/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5922a1916bae66a80acc8aacf28e6aa1743a8dce", "patch": "@@ -535,48 +535,52 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n+        // # Regular allocations\n         // Don't use `self.get` here as that will\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a static's allocation in miri\n-        match self.alloc_map.get_or(id, || Err(())) {\n-            Ok((_, alloc)) => Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-            Err(()) => {\n-                // Not a local allocation, check the global `tcx.alloc_map`.\n-\n-                // Can't do this in the match argument, we may get cycle errors since the lock would\n-                // be held throughout the match.\n-                let alloc = self.tcx.alloc_map.lock().get(id);\n-                match alloc {\n-                    Some(GlobalAlloc::Static(did)) => {\n-                        // Use size and align of the type.\n-                        let ty = self.tcx.type_of(did);\n-                        let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                        Ok((layout.size, layout.align.abi))\n-                    },\n-                    Some(GlobalAlloc::Memory(alloc)) =>\n-                        // Need to duplicate the logic here, because the global allocations have\n-                        // different associated types than the interpreter-local ones.\n-                        Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-                    Some(GlobalAlloc::Function(_)) => {\n-                        if let AllocCheck::Dereferencable = liveness {\n-                            // The caller requested no function pointers.\n-                            err!(DerefFunctionPointer)\n-                        } else {\n-                            Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n-                        }\n-                    },\n-                    // The rest must be dead.\n-                    None => if let AllocCheck::MaybeDead = liveness {\n-                        // Deallocated pointers are allowed, we should be able to find\n-                        // them in the map.\n-                        Ok(*self.dead_alloc_map.get(&id)\n-                            .expect(\"deallocated pointers should all be recorded in \\\n-                                    `dead_alloc_map`\"))\n-                    } else {\n-                        err!(DanglingPointerDeref)\n-                    },\n-                }\n-            }\n+        if let Some((_, alloc)) = self.alloc_map.get(id) {\n+            return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n+        }\n+\n+        // # Function pointers\n+        // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n+        if let Ok(_) = self.get_fn_alloc(id) {\n+            return if let AllocCheck::Dereferencable = liveness {\n+                // The caller requested no function pointers.\n+                err!(DerefFunctionPointer)\n+            } else {\n+                Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+            };\n+        }\n+\n+        // # Statics\n+        // Can't do this in the match argument, we may get cycle errors since the lock would\n+        // be held throughout the match.\n+        let alloc = self.tcx.alloc_map.lock().get(id);\n+        match alloc {\n+            Some(GlobalAlloc::Static(did)) => {\n+                // Use size and align of the type.\n+                let ty = self.tcx.type_of(did);\n+                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                Ok((layout.size, layout.align.abi))\n+            },\n+            Some(GlobalAlloc::Memory(alloc)) =>\n+                // Need to duplicate the logic here, because the global allocations have\n+                // different associated types than the interpreter-local ones.\n+                Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n+            Some(GlobalAlloc::Function(_)) =>\n+                bug!(\"We already checked function pointers above\"),\n+            // The rest must be dead.\n+            None => if let AllocCheck::MaybeDead = liveness {\n+                // Deallocated pointers are allowed, we should be able to find\n+                // them in the map.\n+                Ok(*self.dead_alloc_map.get(&id)\n+                    .expect(\"deallocated pointers should all be recorded in \\\n+                            `dead_alloc_map`\"))\n+            } else {\n+                err!(DanglingPointerDeref)\n+            },\n         }\n     }\n "}]}