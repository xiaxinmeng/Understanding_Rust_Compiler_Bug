{"sha": "9a02f65a226349affec0c8e1480b3b6468572e70", "node_id": "C_kwDOAAsO6NoAKDlhMDJmNjVhMjI2MzQ5YWZmZWMwYzhlMTQ4MGIzYjY0Njg1NzJlNzA", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2022-12-13T06:42:53Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2023-05-03T22:41:31Z"}, "message": "Update documentation for LLVM CFI support\n\nThis commit updates the documentation for the LLVM Control Flow\nIntegrity (CFI) support in the Rust compiler.", "tree": {"sha": "6649903cdb55ac668c767249e0c9229cc61a3b85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6649903cdb55ac668c767249e0c9229cc61a3b85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a02f65a226349affec0c8e1480b3b6468572e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a02f65a226349affec0c8e1480b3b6468572e70", "html_url": "https://github.com/rust-lang/rust/commit/9a02f65a226349affec0c8e1480b3b6468572e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a02f65a226349affec0c8e1480b3b6468572e70/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004aa15b4718c34ca367f77c6d57c63d670c4f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/004aa15b4718c34ca367f77c6d57c63d670c4f56", "html_url": "https://github.com/rust-lang/rust/commit/004aa15b4718c34ca367f77c6d57c63d670c4f56"}], "stats": {"total": 143, "additions": 126, "deletions": 17}, "files": [{"sha": "aa776daf09db63251e86d09647aff20544a1f7b1", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 101, "deletions": 17, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9a02f65a226349affec0c8e1480b3b6468572e70/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a02f65a226349affec0c8e1480b3b6468572e70/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=9a02f65a226349affec0c8e1480b3b6468572e70", "patch": "@@ -196,18 +196,18 @@ Shadow byte legend (one shadow byte represents 8 application bytes):\n \n # ControlFlowIntegrity\n \n-The LLVM Control Flow Integrity (CFI) support in the Rust compiler initially\n-provides forward-edge control flow protection for Rust-compiled code only by\n-aggregating function pointers in groups identified by their return and parameter\n-types.\n-\n-Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\n-binaries\" (i.e., for when C or C++ and Rust -compiled code share the same\n-virtual address space) will be provided in later work by defining and using\n-compatible type identifiers (see Type metadata in the design document in the\n-tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n-\n-LLVM CFI can be enabled with -Zsanitizer=cfi and requires LTO (i.e., -Clto).\n+The LLVM Control Flow Integrity (CFI) support in the Rust compiler provides\n+forward-edge control flow protection for both Rust-compiled code only and for C\n+or C++ and Rust -compiled code mixed-language binaries, also known as \u201cmixed\n+binaries\u201d (i.e., for when C or C++ and Rust -compiled code share the same\n+virtual address space), by aggregating function pointers in groups identified by\n+their return and parameter types.\n+\n+LLVM CFI can be enabled with `-Zsanitizer=cfi` and requires LTO (i.e., `-Clto`).\n+Cross-language LLVM CFI can be enabled with `-Zsanitizer=cfi`, and requires the\n+`-Zsanitizer-cfi-normalize-integers` option to be used with Clang\n+`-fsanitize-cfi-icall-normalize-integers` for normalizing integer types, and\n+proper (i.e., non-rustc) LTO (i.e., `-Clinker-plugin-lto`).\n \n See the [Clang ControlFlowIntegrity documentation][clang-cfi] for more details.\n \n@@ -343,7 +343,7 @@ $\n Fig. 5.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n ```shell\n-$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+$ RUSTFLAGS=\"-Cembed-bitcode=yes -Clto -Zsanitizer=cfi\" cargo run --release\n    Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n     Finished release [optimized] target(s) in 3.38s\n      Running `target/release/rust-cfi-2`\n@@ -392,7 +392,7 @@ Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n Language][rust-book] book.\n \n ```shell\n- cargo run --release\n+$ cargo run --release\n    Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n     Finished release [optimized] target(s) in 0.74s\n      Running `target/release/rust-cfi-3`\n@@ -404,7 +404,7 @@ $\n Fig. 8.\u2003Build and execution of the modified example with LLVM CFI disabled.\n \n ```shell\n-$ RUSTFLAGS=\"-Zsanitizer=cfi -Cembed-bitcode=yes -Clto\" cargo run --release\n+$ RUSTFLAGS=\"-Cembed-bitcode=yes -Clto -Zsanitizer=cfi\" cargo run --release\n    Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n     Finished release [optimized] target(s) in 3.40s\n      Running `target/release/rust-cfi-3`\n@@ -420,8 +420,92 @@ flow using an indirect branch/call to a function with different return and\n parameter types than the return type expected and arguments intended/passed in\n the call/branch site, the execution is also terminated (see Fig. 9).\n \n-[rust-book-ch19-05]: ../../book/ch19-05-advanced-functions-and-closures.html\n-[rust-book]: ../../book/title-page.html\n+```ignore (cannot-test-this-because-uses-custom-build)\n+int\n+do_twice(int (*fn)(int), int arg) {\n+    return fn(arg) + fn(arg);\n+}\n+```\n+Fig. 10.\u2003Example C library.\n+\n+```ignore (cannot-test-this-because-uses-custom-build)\n+use std::mem;\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    fn do_twice(f: unsafe extern \"C\" fn(i32) -> i32, arg: i32) -> i32;\n+}\n+\n+unsafe extern \"C\" fn add_one(x: i32) -> i32 {\n+    x + 1\n+}\n+\n+unsafe extern \"C\" fn add_two(x: i64) -> i64 {\n+    x + 2\n+}\n+\n+fn main() {\n+    let answer = unsafe { do_twice(add_one, 5) };\n+\n+    println!(\"The answer is: {}\", answer);\n+\n+    println!(\"With CFI enabled, you should not see the next answer\");\n+    let f: unsafe extern \"C\" fn(i32) -> i32 = unsafe {\n+        mem::transmute::<*const u8, unsafe extern \"C\" fn(i32) -> i32>(add_two as *const u8)\n+    };\n+    let next_answer = unsafe { do_twice(f, 5) };\n+\n+    println!(\"The next answer is: {}\", next_answer);\n+}\n+```\n+Fig. 11.\u2003Another modified example from the [Advanced Functions and\n+Closures][rust-book-ch19-05] chapter of the [The Rust Programming\n+Language][rust-book] book.\n+\n+```shell\n+$ make\n+mkdir -p target/debug\n+clang -I. -Isrc -Wall -flto -fvisibility=hidden -c -emit-llvm src/foo.c -o target/debug/libfoo.bc\n+llvm-ar rcs target/debug/libfoo.a target/debug/libfoo.bc\n+RUSTFLAGS=\"-L./target/debug -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build\n+   Compiling main v0.1.0 (/home/rcvalle/rust-cross-cfi-1)\n+    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n+$ ./target/debug/main\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+The next answer is: 14\n+$\n+```\n+Fig. 12.\u2003Build and execution of the modified example with LLVM CFI disabled.\n+\n+```shell\n+$ make\n+mkdir -p target/debug\n+clang -I. -Isrc -Wall -flto -fvisibility=hidden -fsanitize=cfi -fsanitize-cfi-icall-normalize-integers -c -emit-llvm src/foo.c -o target/debug/libfoo.bc\n+llvm-ar rcs target/debug/libfoo.a target/debug/libfoo.bc\n+RUSTFLAGS=\"-L./target/debug -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build\n+   Compiling main v0.1.0 (/home/rcvalle/rust-cross-cfi-1)\n+    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n+$ ./target/debug/main\n+The answer is: 12\n+With CFI enabled, you should not see the next answer\n+Illegal instruction\n+$\n+```\n+Fig. 13.\u2003Build and execution of the modified example with LLVM CFI enabled.\n+\n+When LLVM CFI is enabled, if there are any attempts to change/hijack control\n+flow using an indirect branch/call to a function with different return and\n+parameter types than the return type expected and arguments intended/passed in\n+the call/branch site, even across the FFI boundary and for extern \"C\" function\n+types indirectly called (i.e., callbacks/function pointers) across the FFI\n+boundary, in C or C++ and Rust -compiled code mixed-language binaries, also\n+known as \u201cmixed binaries\u201d (i.e., for when C or C++ and Rust -compiled code share\n+the same virtual address space), the execution is also terminated (see Fig. 13).\n+\n+\n+[rust-book-ch19-05]: https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html\n+[rust-book]: https://doc.rust-lang.org/book/title-page.html\n \n # HWAddressSanitizer\n "}, {"sha": "f2f74cc17b3de1b680287ad85f20f8f501967f62", "filename": "src/doc/unstable-book/src/language-features/cfi-encoding.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9a02f65a226349affec0c8e1480b3b6468572e70/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a02f65a226349affec0c8e1480b3b6468572e70/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfi-encoding.md?ref=9a02f65a226349affec0c8e1480b3b6468572e70", "patch": "@@ -0,0 +1,25 @@\n+# `cfi_encoding`\n+\n+The tracking issue for this feature is: [#89653]\n+\n+[#89653]: https://github.com/rust-lang/rust/issues/89653\n+\n+------------------------\n+\n+The `cfi_encoding` feature allows the user to define a CFI encoding for a type.\n+It allows the user to use a different names for types that otherwise would be\n+required to have the same name as used in externally defined C functions.\n+\n+## Examples\n+\n+```rust\n+#![feature(cfi_encoding, extern_types)]\n+\n+#[cfi_encoding = \"3Foo\"]\n+pub struct Type1(i32);\n+\n+extern {\n+    #[cfi_encoding = \"3Bar\"]\n+    type Type2;\n+}\n+```"}]}