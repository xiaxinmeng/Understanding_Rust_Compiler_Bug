{"sha": "0525bb76690232ce1ce2a3918ce031e2058c41dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MjViYjc2NjkwMjMyY2UxY2UyYTM5MThjZTAzMWUyMDU4YzQxZGM=", "commit": {"author": {"name": "Viktor Dahl", "email": "pazaconyoman@gmail.com", "date": "2014-10-15T23:44:44Z"}, "committer": {"name": "Viktor Dahl", "email": "pazaconyoman@gmail.com", "date": "2014-10-15T23:44:44Z"}, "message": "Add assume intrinsic\n\nAdds an `assume` intrinsic that gets translated to llvm.assume. It is\nused on a boolean expression and allows the optimizer to assume that\nthe expression is true.\n\nThis implements #18051.", "tree": {"sha": "24fffa219a89d4ad49cdf12346986d3e39d8e20e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24fffa219a89d4ad49cdf12346986d3e39d8e20e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0525bb76690232ce1ce2a3918ce031e2058c41dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0525bb76690232ce1ce2a3918ce031e2058c41dc", "html_url": "https://github.com/rust-lang/rust/commit/0525bb76690232ce1ce2a3918ce031e2058c41dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0525bb76690232ce1ce2a3918ce031e2058c41dc/comments", "author": {"login": "veddan", "id": 307180, "node_id": "MDQ6VXNlcjMwNzE4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/307180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veddan", "html_url": "https://github.com/veddan", "followers_url": "https://api.github.com/users/veddan/followers", "following_url": "https://api.github.com/users/veddan/following{/other_user}", "gists_url": "https://api.github.com/users/veddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/veddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veddan/subscriptions", "organizations_url": "https://api.github.com/users/veddan/orgs", "repos_url": "https://api.github.com/users/veddan/repos", "events_url": "https://api.github.com/users/veddan/events{/privacy}", "received_events_url": "https://api.github.com/users/veddan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "veddan", "id": 307180, "node_id": "MDQ6VXNlcjMwNzE4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/307180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veddan", "html_url": "https://github.com/veddan", "followers_url": "https://api.github.com/users/veddan/followers", "following_url": "https://api.github.com/users/veddan/following{/other_user}", "gists_url": "https://api.github.com/users/veddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/veddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veddan/subscriptions", "organizations_url": "https://api.github.com/users/veddan/orgs", "repos_url": "https://api.github.com/users/veddan/repos", "events_url": "https://api.github.com/users/veddan/events{/privacy}", "received_events_url": "https://api.github.com/users/veddan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4761c85b52ac9953a7ac1f89d9e09a79389b4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4761c85b52ac9953a7ac1f89d9e09a79389b4fd", "html_url": "https://github.com/rust-lang/rust/commit/e4761c85b52ac9953a7ac1f89d9e09a79389b4fd"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "5570d356149dc93df1f370fa2d80a79b8379ce4b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=0525bb76690232ce1ce2a3918ce031e2058c41dc", "patch": "@@ -256,6 +256,13 @@ extern \"rust-intrinsic\" {\n     /// NB: This is very different from the `unreachable!()` macro!\n     pub fn unreachable() -> !;\n \n+    /// Inform the optimizer that a condition is always true.\n+    /// If the condition is false, the behavior is undefined.\n+    ///\n+    /// No code is generated for this intrisic.\n+    #[cfg(not(stage0))]\n+    pub fn assume(b: bool);\n+\n     /// Execute a breakpoint trap, for inspection by a debugger.\n     pub fn breakpoint();\n "}, {"sha": "d7ab02f373cf176851b5405ccb50b98502ff727c", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=0525bb76690232ce1ce2a3918ce031e2058c41dc", "patch": "@@ -855,6 +855,7 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.lifetime.end\" fn(t_i64, i8p) -> void);\n \n     ifn!(\"llvm.expect.i1\" fn(i1, i1) -> i1);\n+    ifn!(\"llvm.assume\" fn(i1) -> void);\n \n     // Some intrinsics were introduced in later versions of LLVM, but they have\n     // fallbacks in libc or libm and such. Currently, all of these intrinsics"}, {"sha": "7951b3be0e573d4a56cb406beb853243dcb25b40", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=0525bb76690232ce1ce2a3918ce031e2058c41dc", "patch": "@@ -81,6 +81,7 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Opti\n         \"bswap16\" => \"llvm.bswap.i16\",\n         \"bswap32\" => \"llvm.bswap.i32\",\n         \"bswap64\" => \"llvm.bswap.i64\",\n+        \"assume\" => \"llvm.assume\",\n         _ => return None\n     };\n     Some(ccx.get_intrinsic(&name))"}, {"sha": "296a6b40e54fc7ffe5b233640664a158eef43c3d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0525bb76690232ce1ce2a3918ce031e2058c41dc", "patch": "@@ -5754,6 +5754,8 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n \n             \"return_address\" => (0, vec![], ty::mk_imm_ptr(tcx, ty::mk_u8())),\n \n+            \"assume\" => (0, vec![ty::mk_bool()], ty::mk_nil()),\n+\n             ref other => {\n                 span_err!(tcx.sess, it.span, E0093,\n                     \"unrecognized intrinsic function: `{}`\", *other);"}, {"sha": "abf9b94c59d8a6f113bc68e1563941904a25bf7d", "filename": "src/test/run-pass/intrinsic-assume.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0525bb76690232ce1ce2a3918ce031e2058c41dc/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs?ref=0525bb76690232ce1ce2a3918ce031e2058c41dc", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::intrinsics::assume;\n+\n+unsafe fn f(x: i32) -> i32 {\n+    assume(x == 34);\n+    match x {\n+        34 => 42,\n+        _  => 30\n+    }\n+}\n+\n+fn main() {\n+    let x = unsafe { f(34) };\n+    assert_eq!(x, 42);\n+}\n+"}]}