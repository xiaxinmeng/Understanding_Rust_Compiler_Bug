{"sha": "99b89533d4cdf7682ea4054ad0ee36c351d05df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5Yjg5NTMzZDRjZGY3NjgyZWE0MDU0YWQwZWUzNmMzNTFkMDVkZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-16T18:55:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-16T18:55:07Z"}, "message": "Auto merge of #67356 - Centril:rollup-paaw3ju, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #67249 (Improve code generated for `starts_with(<literal char>)`)\n - #67308 (Delete flaky test net::tcp::tests::fast_rebind)\n - #67318 (Improve typeck & lowering docs for slice patterns)\n - #67322 (use Self alias in place of macros)\n - #67323 (make transparent enums more ordinary)\n - #67336 (Fix JS error when loading page with search)\n - #67344 (.gitignore: Don't ignore a file that exists in the repository)\n - #67349 (Minor: update Unsize docs for dyn syntax)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "82ce6096679ca921b3eb76f24cf8480ecfc77802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ce6096679ca921b3eb76f24cf8480ecfc77802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b89533d4cdf7682ea4054ad0ee36c351d05df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b89533d4cdf7682ea4054ad0ee36c351d05df1", "html_url": "https://github.com/rust-lang/rust/commit/99b89533d4cdf7682ea4054ad0ee36c351d05df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b89533d4cdf7682ea4054ad0ee36c351d05df1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d4b571936d4072ed90ab7750636f68f1443b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d4b571936d4072ed90ab7750636f68f1443b3e", "html_url": "https://github.com/rust-lang/rust/commit/f0d4b571936d4072ed90ab7750636f68f1443b3e"}, {"sha": "733559b0c292cfa3fd6e4afffd820fa903ea320a", "url": "https://api.github.com/repos/rust-lang/rust/commits/733559b0c292cfa3fd6e4afffd820fa903ea320a", "html_url": "https://github.com/rust-lang/rust/commit/733559b0c292cfa3fd6e4afffd820fa903ea320a"}], "stats": {"total": 204, "additions": 134, "deletions": 70}, "files": [{"sha": "1428ee6c9bc234acc1cb52d25f54afdcdd5f145c", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -55,5 +55,6 @@ config.mk\n config.stamp\n Session.vim\n .cargo\n+!/src/test/run-make/thumb-none-qemu/example/.cargo\n no_llvm_build\n # Before adding new lines, see the comment at the top."}, {"sha": "570fc4ab93390ecba7eb509c0be49cbd5ebba634", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -11,4 +11,5 @@ mod hash;\n mod iter;\n mod num;\n mod ops;\n+mod pattern;\n mod slice;"}, {"sha": "a49490cec12190810d4c864f828da805c9f2bc61", "filename": "src/libcore/benches/pattern.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fbenches%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fbenches%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fpattern.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -0,0 +1,43 @@\n+use test::black_box;\n+use test::Bencher;\n+\n+#[bench]\n+fn starts_with_char(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.starts_with('k'));\n+        }\n+    })\n+}\n+\n+#[bench]\n+fn starts_with_str(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.starts_with(\"k\"));\n+        }\n+    })\n+}\n+\n+\n+#[bench]\n+fn ends_with_char(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.ends_with('k'));\n+        }\n+    })\n+}\n+\n+#[bench]\n+fn ends_with_str(b: &mut Bencher) {\n+    let text = black_box(\"kdjsfhlakfhlsghlkvcnljknfqiunvcijqenwodind\");\n+    b.iter(|| {\n+        for _ in 0..1024 {\n+            black_box(text.ends_with(\"k\"));\n+        }\n+    })\n+}"}, {"sha": "1b586c3e5fe3030d50e2b9d6e1ccb561fb799b9a", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -97,7 +97,7 @@ pub trait Sized {\n /// Types that can be \"unsized\" to a dynamically-sized type.\n ///\n /// For example, the sized array type `[i8; 2]` implements `Unsize<[i8]>` and\n-/// `Unsize<fmt::Debug>`.\n+/// `Unsize<dyn fmt::Debug>`.\n ///\n /// All implementations of `Unsize` are provided automatically by the compiler.\n ///"}, {"sha": "d091a8d86ea49ce1bbdbcff41082187a6b694ad1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -67,7 +67,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 )]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n-                    $Ty(n)\n+                    Self(n)\n                 }\n \n                 /// Creates a non-zero if the given value is not zero.\n@@ -76,7 +76,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n                         // SAFETY: we just checked that there's no `0`\n-                        Some(unsafe { $Ty(n) })\n+                        Some(unsafe { Self(n) })\n                     } else {\n                         None\n                     }"}, {"sha": "b7ebd5f88b589ccf7a6c918b81a42c16d47a3375", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -445,21 +445,13 @@ impl<'a> Pattern<'a> for char {\n \n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        if let Some(ch) = haystack.chars().next() {\n-            self == ch\n-        } else {\n-            false\n-        }\n+        self.encode_utf8(&mut [0u8; 4]).is_prefix_of(haystack)\n     }\n \n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n     {\n-        if let Some(ch) = haystack.chars().next_back() {\n-            self == ch\n-        } else {\n-            false\n-        }\n+        self.encode_utf8(&mut [0u8; 4]).is_suffix_of(haystack)\n     }\n }\n \n@@ -710,16 +702,13 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n     /// Checks whether the pattern matches at the front of the haystack\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        haystack.is_char_boundary(self.len()) &&\n-            self == &haystack[..self.len()]\n+        haystack.as_bytes().starts_with(self.as_bytes())\n     }\n \n     /// Checks whether the pattern matches at the back of the haystack\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n-        self.len() <= haystack.len() &&\n-            haystack.is_char_boundary(haystack.len() - self.len()) &&\n-            self == &haystack[haystack.len() - self.len()..]\n+        haystack.as_bytes().ends_with(self.as_bytes())\n     }\n }\n "}, {"sha": "d5b0bc420382f6c442a28820cf969e7d4ae0222c", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -1263,7 +1263,7 @@ let atomic_forty_two = \", stringify!($atomic_type), \"::new(42);\n                 #[$stable]\n                 #[cfg_attr(not(bootstrap), $const_stable)]\n                 pub const fn new(v: $int_type) -> Self {\n-                    $atomic_type {v: UnsafeCell::new(v)}\n+                    Self {v: UnsafeCell::new(v)}\n                 }\n             }\n "}, {"sha": "ec9d6802defa305df11e09a920f8875e6bf90b64", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -2852,19 +2852,23 @@ impl<'a> LoweringContext<'a> {\n         let mut rest = None;\n \n         let mut iter = pats.iter().enumerate();\n-        while let Some((idx, pat)) = iter.next() {\n-            // Interpret the first `..` pattern as a subtuple pattern.\n+        for (idx, pat) in iter.by_ref() {\n+            // Interpret the first `..` pattern as a sub-tuple pattern.\n+            // Note that unlike for slice patterns,\n+            // where `xs @ ..` is a legal sub-slice pattern,\n+            // it is not a legal sub-tuple pattern.\n             if pat.is_rest() {\n                 rest = Some((idx, pat.span));\n                 break;\n             }\n-            // It was not a subslice pattern so lower it normally.\n+            // It was not a sub-tuple pattern so lower it normally.\n             elems.push(self.lower_pat(pat));\n         }\n \n-        while let Some((_, pat)) = iter.next() {\n-            // There was a previous subtuple pattern; make sure we don't allow more.\n+        for (_, pat) in iter {\n+            // There was a previous sub-tuple pattern; make sure we don't allow more...\n             if pat.is_rest() {\n+                // ...but there was one again, so error.\n                 self.ban_extra_rest_pat(pat.span, rest.unwrap().1, ctx);\n             } else {\n                 elems.push(self.lower_pat(pat));\n@@ -2874,36 +2878,44 @@ impl<'a> LoweringContext<'a> {\n         (elems.into(), rest.map(|(ddpos, _)| ddpos))\n     }\n \n+    /// Lower a slice pattern of form `[pat_0, ..., pat_n]` into\n+    /// `hir::PatKind::Slice(before, slice, after)`.\n+    ///\n+    /// When encountering `($binding_mode $ident @)? ..` (`slice`),\n+    /// this is interpreted as a sub-slice pattern semantically.\n+    /// Patterns that follow, which are not like `slice` -- or an error occurs, are in `after`.\n     fn lower_pat_slice(&mut self, pats: &[AstP<Pat>]) -> hir::PatKind {\n         let mut before = Vec::new();\n         let mut after = Vec::new();\n         let mut slice = None;\n         let mut prev_rest_span = None;\n \n         let mut iter = pats.iter();\n-        while let Some(pat) = iter.next() {\n-            // Interpret the first `((ref mut?)? x @)? ..` pattern as a subslice pattern.\n+        // Lower all the patterns until the first occurence of a sub-slice pattern.\n+        for pat in iter.by_ref() {\n             match pat.kind {\n+                // Found a sub-slice pattern `..`. Record, lower it to `_`, and stop here.\n                 PatKind::Rest => {\n                     prev_rest_span = Some(pat.span);\n                     slice = Some(self.pat_wild_with_node_id_of(pat));\n                     break;\n                 },\n+                // Found a sub-slice pattern `$binding_mode $ident @ ..`.\n+                // Record, lower it to `$binding_mode $ident @ _`, and stop here.\n                 PatKind::Ident(ref bm, ident, Some(ref sub)) if sub.is_rest() => {\n                     prev_rest_span = Some(sub.span);\n                     let lower_sub = |this: &mut Self| Some(this.pat_wild_with_node_id_of(sub));\n                     let node = self.lower_pat_ident(pat, bm, ident, lower_sub);\n                     slice = Some(self.pat_with_node_id_of(pat, node));\n                     break;\n                 },\n-                _ => {}\n+                // It was not a subslice pattern so lower it normally.\n+                _ => before.push(self.lower_pat(pat)),\n             }\n-\n-            // It was not a subslice pattern so lower it normally.\n-            before.push(self.lower_pat(pat));\n         }\n \n-        while let Some(pat) = iter.next() {\n+        // Lower all the patterns after the first sub-slice pattern.\n+        for pat in iter {\n             // There was a previous subslice pattern; make sure we don't allow more.\n             let rest_span = match pat.kind {\n                 PatKind::Rest => Some(pat.span),\n@@ -2915,8 +2927,10 @@ impl<'a> LoweringContext<'a> {\n                 _ => None,\n             };\n             if let Some(rest_span) = rest_span {\n+                // We have e.g., `[a, .., b, ..]`. That's no good, error!\n                 self.ban_extra_rest_pat(rest_span, prev_rest_span.unwrap(), \"slice\");\n             } else {\n+                // Lower the pattern normally.\n                 after.push(self.lower_pat(pat));\n             }\n         }"}, {"sha": "6b354b01518eab02d9d6e90279c61f0f4a97f69a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -1048,8 +1048,15 @@ pub enum PatKind {\n     /// A range pattern (e.g., `1..=2` or `1..2`).\n     Range(P<Expr>, P<Expr>, RangeEnd),\n \n-    /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`.\n+    /// A slice pattern, `[before_0, ..., before_n, (slice, after_0, ..., after_n)?]`.\n+    ///\n+    /// Here, `slice` is lowered from the syntax `($binding_mode $ident @)? ..`.\n+    /// If `slice` exists, then `after` can be non-empty.\n+    ///\n+    /// The representation for e.g., `[a, b, .., c, d]` is:\n+    /// ```\n+    /// PatKind::Slice([Binding(a), Binding(b)], Some(Wild), [Binding(c), Binding(d)])\n+    /// ```\n     Slice(HirVec<P<Pat>>, Option<P<Pat>>, HirVec<P<Pat>>),\n }\n "}, {"sha": "09771bb762536ae9434abe62792c092d63ec98bd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -2330,7 +2330,7 @@ fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, d\n     );\n     let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {}\", msg);\n     err.span_label(sp, &msg);\n-    if let &[ref start @ .., ref end] = &variant_spans[..] {\n+    if let [start @ .., end] = &*variant_spans {\n         for variant_span in start {\n             err.span_label(*variant_span, \"\");\n         }\n@@ -2372,23 +2372,14 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     }\n     let sp = tcx.sess.source_map().def_span(sp);\n \n-    if adt.is_enum() {\n-        if !tcx.features().transparent_enums {\n-            feature_err(\n-                &tcx.sess.parse_sess,\n-                sym::transparent_enums,\n-                sp,\n-                \"transparent enums are unstable\",\n-            )\n-            .emit();\n-        }\n-        if adt.variants.len() != 1 {\n-            bad_variant_count(tcx, adt, sp, def_id);\n-            if adt.variants.is_empty() {\n-                // Don't bother checking the fields. No variants (and thus no fields) exist.\n-                return;\n-            }\n-        }\n+    if adt.is_enum() && !tcx.features().transparent_enums {\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::transparent_enums,\n+            sp,\n+            \"transparent enums are unstable\",\n+        )\n+        .emit();\n     }\n \n     if adt.is_union() && !tcx.features().transparent_unions {\n@@ -2401,6 +2392,14 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n         .emit();\n     }\n \n+    if adt.variants.len() != 1 {\n+        bad_variant_count(tcx, adt, sp, def_id);\n+        if adt.variants.is_empty() {\n+            // Don't bother checking the fields. No variants (and thus no fields) exist.\n+            return;\n+        }\n+    }\n+\n     // For each field, figure out if it's known to be a ZST and align(1)\n     let field_infos = adt.all_fields().map(|field| {\n         let ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, field.did));\n@@ -5351,9 +5350,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                       directly, not through a function pointer\");\n     }\n \n-    // Resolves `typ` by a single level if `typ` is a type variable.\n-    // If no resolution is possible, then an error is reported.\n-    // Numeric inference variables may be left unresolved.\n+    /// Resolves `typ` by a single level if `typ` is a type variable.\n+    /// If no resolution is possible, then an error is reported.\n+    /// Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n         let ty = self.resolve_vars_with_obligations(ty);\n         if !ty.is_ty_var() {"}, {"sha": "4fb57a65625747cfe82607c4f4b20faf7ed4d6e2", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -1154,6 +1154,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_ref(region, mt)\n     }\n \n+    /// Type check a slice pattern.\n+    ///\n+    /// Syntactically, these look like `[pat_0, ..., pat_n]`.\n+    /// Semantically, we are type checking a pattern with structure:\n+    /// ```\n+    /// [before_0, ..., before_n, (slice, after_0, ... after_n)?]\n+    /// ```\n+    /// The type of `slice`, if it is present, depends on the `expected` type.\n+    /// If `slice` is missing, then so is `after_i`.\n+    /// If `slice` is present, it can still represent 0 elements.\n     fn check_pat_slice(\n         &self,\n         span: Span,\n@@ -1167,27 +1177,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let expected_ty = self.structurally_resolved_type(span, expected);\n         let (inner_ty, slice_ty) = match expected_ty.kind {\n+            // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n             ty::Array(inner_ty, size) => {\n                 let slice_ty = if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n+                    // Now we know the length...\n                     let min_len = before.len() as u64 + after.len() as u64;\n                     if slice.is_none() {\n+                        // ...and since there is no variable-length pattern,\n+                        // we require an exact match between the number of elements\n+                        // in the array pattern and as provided by the matched type.\n                         if min_len != size {\n                             self.error_scrutinee_inconsistent_length(span, min_len, size)\n                         }\n                         tcx.types.err\n                     } else if let Some(rest) = size.checked_sub(min_len) {\n+                        // The variable-length pattern was there,\n+                        // so it has an array type with the remaining elements left as its size...\n                         tcx.mk_array(inner_ty, rest)\n                     } else {\n+                        // ...however, in this case, there were no remaining elements.\n+                        // That is, the slice pattern requires more than the array type offers.\n                         self.error_scrutinee_with_rest_inconsistent_length(span, min_len, size);\n                         tcx.types.err\n                     }\n                 } else {\n+                    // No idea what the length is, which happens if we have e.g.,\n+                    // `let [a, b] = arr` where `arr: [T; N]` where `const N: usize`.\n                     self.error_scrutinee_unfixed_length(span);\n                     tcx.types.err\n                 };\n                 (inner_ty, slice_ty)\n             }\n             ty::Slice(inner_ty) => (inner_ty, expected_ty),\n+            // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected_ty.references_error() {\n                     self.error_expected_array_or_slice(span, expected_ty);\n@@ -1196,12 +1218,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n+        // Type check all the patterns before `slice`.\n         for elt in before {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }\n+        // Type check the `slice`, if present, against its expected type.\n         if let Some(slice) = slice {\n             self.check_pat(&slice, slice_ty, def_bm, discrim_span);\n         }\n+        // Type check the elements after `slice`, if present.\n         for elt in after {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }"}, {"sha": "1459e8f37cd32ff23e474001e7a31c06edc9dd6e", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -2683,7 +2683,7 @@ function getSearchElement() {\n         insertAfter(popup, getSearchElement());\n     }\n \n-    onHashChange();\n+    onHashChange(null);\n     window.onhashchange = onHashChange;\n \n     buildHelperPopup();"}, {"sha": "c33f98bdd83298b5bebc490d0c1c236210185ed4", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b89533d4cdf7682ea4054ad0ee36c351d05df1/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=99b89533d4cdf7682ea4054ad0ee36c351d05df1", "patch": "@@ -1312,21 +1312,6 @@ mod tests {\n         })\n     }\n \n-    #[test]\n-    fn fast_rebind() {\n-        each_ip(&mut |addr| {\n-            let acceptor = t!(TcpListener::bind(&addr));\n-\n-            let _t = thread::spawn(move || {\n-                t!(TcpStream::connect(&addr));\n-            });\n-\n-            t!(acceptor.accept());\n-            drop(acceptor);\n-            t!(TcpListener::bind(&addr));\n-        });\n-    }\n-\n     #[test]\n     fn tcp_clone_smoke() {\n         each_ip(&mut |addr| {"}]}