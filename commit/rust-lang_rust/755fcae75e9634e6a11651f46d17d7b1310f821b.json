{"sha": "755fcae75e9634e6a11651f46d17d7b1310f821b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NWZjYWU3NWU5NjM0ZTZhMTE2NTFmNDZkMTdkN2IxMzEwZjgyMWI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-13T03:27:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-13T03:27:56Z"}, "message": "Reorder bitvec.rs.\n\nSo that the `BitArray` code is all together and before the `BitVector`\ncode, instead of being awkwardly interleaved.", "tree": {"sha": "55f188446e0f5563c91ddce13b52c58cd0a291de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55f188446e0f5563c91ddce13b52c58cd0a291de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755fcae75e9634e6a11651f46d17d7b1310f821b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755fcae75e9634e6a11651f46d17d7b1310f821b", "html_url": "https://github.com/rust-lang/rust/commit/755fcae75e9634e6a11651f46d17d7b1310f821b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755fcae75e9634e6a11651f46d17d7b1310f821b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6720cc810ea3dc9e051a95ff1a8dc9755c3bdb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6720cc810ea3dc9e051a95ff1a8dc9755c3bdb5", "html_url": "https://github.com/rust-lang/rust/commit/d6720cc810ea3dc9e051a95ff1a8dc9755c3bdb5"}], "stats": {"total": 77, "additions": 37, "deletions": 40}, "files": [{"sha": "acf33697f58b57f34eefb513a7db718ca8db3ad2", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/755fcae75e9634e6a11651f46d17d7b1310f821b/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fcae75e9634e6a11651f46d17d7b1310f821b/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=755fcae75e9634e6a11651f46d17d7b1310f821b", "patch": "@@ -23,46 +23,6 @@ pub struct BitArray<C: Idx> {\n     marker: PhantomData<C>,\n }\n \n-#[derive(Clone, Debug, PartialEq)]\n-pub struct BitVector<C: Idx> {\n-    data: BitArray<C>,\n-}\n-\n-impl<C: Idx> BitVector<C> {\n-    pub fn grow(&mut self, num_bits: C) {\n-        self.data.grow(num_bits)\n-    }\n-\n-    pub fn new() -> BitVector<C> {\n-        BitVector {\n-            data: BitArray::new(0),\n-        }\n-    }\n-\n-    pub fn with_capacity(bits: usize) -> BitVector<C> {\n-        BitVector {\n-            data: BitArray::new(bits),\n-        }\n-    }\n-\n-    /// Returns true if the bit has changed.\n-    #[inline]\n-    pub fn insert(&mut self, bit: C) -> bool {\n-        self.grow(bit);\n-        self.data.insert(bit)\n-    }\n-\n-    #[inline]\n-    pub fn contains(&self, bit: C) -> bool {\n-        let (word, mask) = word_mask(bit);\n-        if let Some(word) = self.data.data.get(word) {\n-            (word & mask) != 0\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n impl<C: Idx> BitArray<C> {\n     // Do not make this method public, instead switch your use case to BitVector.\n     #[inline]\n@@ -206,6 +166,43 @@ impl<'a, C: Idx> Iterator for BitIter<'a, C> {\n     }\n }\n \n+/// A resizable BitVector type.\n+#[derive(Clone, Debug, PartialEq)]\n+pub struct BitVector<C: Idx> {\n+    data: BitArray<C>,\n+}\n+\n+impl<C: Idx> BitVector<C> {\n+    pub fn grow(&mut self, num_bits: C) {\n+        self.data.grow(num_bits)\n+    }\n+\n+    pub fn new() -> BitVector<C> {\n+        BitVector { data: BitArray::new(0) }\n+    }\n+\n+    pub fn with_capacity(bits: usize) -> BitVector<C> {\n+        BitVector { data: BitArray::new(bits) }\n+    }\n+\n+    /// Returns true if the bit has changed.\n+    #[inline]\n+    pub fn insert(&mut self, bit: C) -> bool {\n+        self.grow(bit);\n+        self.data.insert(bit)\n+    }\n+\n+    #[inline]\n+    pub fn contains(&self, bit: C) -> bool {\n+        let (word, mask) = word_mask(bit);\n+        if let Some(word) = self.data.data.get(word) {\n+            (word & mask) != 0\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n /// A \"bit matrix\" is basically a matrix of booleans represented as\n /// one gigantic bitvector. In other words, it is as if you have\n /// `rows` bitvectors, each of length `columns`."}]}