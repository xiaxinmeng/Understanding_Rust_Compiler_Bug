{"sha": "73d6efc43e0629b2028e7d031306088f44f84782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDZlZmM0M2UwNjI5YjIwMjhlN2QwMzEzMDYwODhmNDRmODQ3ODI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-07T04:47:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-16T18:57:35Z"}, "message": "Only emit overlapping patterns lint if the overlap is partial", "tree": {"sha": "515c88c9080432b66b8be6aa13d0efbb44699450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515c88c9080432b66b8be6aa13d0efbb44699450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d6efc43e0629b2028e7d031306088f44f84782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d6efc43e0629b2028e7d031306088f44f84782", "html_url": "https://github.com/rust-lang/rust/commit/73d6efc43e0629b2028e7d031306088f44f84782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d6efc43e0629b2028e7d031306088f44f84782/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b19ccfdc6117f4df4d8c765464d6d929d483e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b19ccfdc6117f4df4d8c765464d6d929d483e0", "html_url": "https://github.com/rust-lang/rust/commit/89b19ccfdc6117f4df4d8c765464d6d929d483e0"}], "stats": {"total": 177, "additions": 66, "deletions": 111}, "files": [{"sha": "4087333e2cf6dc39f530508663edf84af1b8d75a", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -100,8 +100,6 @@ pub fn escape_default(c: u8) -> EscapeDefault {\n         b'\\\\' => ([b'\\\\', b'\\\\', 0, 0], 2),\n         b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n         b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n-        // The three arms above are in the following range\n-        #[allow(overlapping_patterns)]\n         b'\\x20' ..= b'\\x7e' => ([c, 0, 0, 0], 1),\n         _ => ([b'\\\\', b'x', hexify(c >> 4), hexify(c & 0xf)], 4),\n     };"}, {"sha": "580ded50b05c632d5c1e3d497651bcc3f73c85dc", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -1075,6 +1075,38 @@ impl<'tcx> IntRange<'tcx> {\n             None\n         }\n     }\n+\n+    fn suspicious_intersection(&self, other: &Self) -> bool {\n+        let (lo, hi) = (*self.range.start(), *self.range.end());\n+        let (other_lo, other_hi) = (*other.range.start(), *other.range.end());\n+\n+        // `false` in the following cases:\n+        // 1     ----\n+        // 2  ----------\n+        //\n+        // 1  ----------\n+        // 2     ----\n+        //\n+        // 1 ----\n+        // 2       ----\n+        //\n+        // 1       ----\n+        // 2 ----\n+\n+        // `true` in the following cases:\n+        // 1 ---------\n+        // 2     ----------\n+        lo < other_lo && hi > other_lo && hi < other_hi ||\n+            // 1     ---------\n+            // 2  ----------\n+            lo > other_lo && lo < other_hi && hi > other_hi ||\n+            // 1  ----\n+            // 2     ----\n+            lo == other_hi && other_lo < lo ||\n+            // 1     ----\n+            // 2 -----\n+            hi == other_lo && lo < other_lo\n+    }\n }\n \n // A request for missing constructor data in terms of either:\n@@ -1718,7 +1750,8 @@ fn split_grouped_constructors<'p, 'tcx>(\n                     })\n                     .flat_map(|(range, row_len)| {\n                         let intersection = ctor_range.intersection(&range);\n-                        if let (Some(range), 1) = (&intersection, row_len) {\n+                        let should_lint = ctor_range.suspicious_intersection(&range);\n+                        if let (Some(range), 1, true) = (&intersection, row_len, should_lint) {\n                             // FIXME: for now, only check for overlapping ranges on simple range\n                             // patterns. Otherwise with the current logic the following is detected\n                             // as overlapping:"}, {"sha": "fde5c5bed4d91a02b35b42d8c2ed78ca3a241e38", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -488,7 +488,6 @@ impl Integer {\n \n     /// Finds the smallest Integer type which can represent the signed value.\n     pub fn fit_signed(x: i128) -> Integer {\n-        #[cfg_attr(not(stage0), allow(overlapping_patterns))]\n         match x {\n             -0x0000_0000_0000_0080..=0x0000_0000_0000_007f => I8,\n             -0x0000_0000_0000_8000..=0x0000_0000_0000_7fff => I16,\n@@ -500,7 +499,6 @@ impl Integer {\n \n     /// Finds the smallest Integer type which can represent the unsigned value.\n     pub fn fit_unsigned(x: u128) -> Integer {\n-        #[cfg_attr(not(stage0), allow(overlapping_patterns))]\n         match x {\n             0..=0x0000_0000_0000_00ff => I8,\n             0..=0x0000_0000_0000_ffff => I16,"}, {"sha": "cb4a0486eef9ab244f6884659a7dc1a2982a649d", "filename": "src/test/ui/check_match/issue-43253.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-43253.stderr?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -24,14 +24,6 @@ note: lint level defined here\n LL | #![warn(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-warning: multiple patterns covering the same range\n-  --> $DIR/issue-43253.rs:35:9\n-   |\n-LL |         1..10 => {},\n-   |         ----- this range overlaps on `8i32..=9i32`\n-LL |         8..=9 => {},\n-   |         ^^^^^ overlapping patterns\n-\n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:35:9\n    |\n@@ -44,16 +36,6 @@ warning: unreachable pattern\n LL |         6 => {},\n    |         ^\n \n-warning: multiple patterns covering the same range\n-  --> $DIR/issue-43253.rs:42:9\n-   |\n-LL |         5..7 => {},\n-   |         ---- this range overlaps on `5i32..=6i32`\n-LL |         6 => {},\n-   |         - this range overlaps on `6i32`\n-LL |         1..10 => {},\n-   |         ^^^^^ overlapping patterns\n-\n warning: unreachable pattern\n   --> $DIR/issue-43253.rs:43:9\n    |"}, {"sha": "442b2f772572c5fc17751cccccbd877b7875a778", "filename": "src/test/ui/exhaustive_integer_patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -43,7 +43,6 @@ fn main() {\n         -5..=120 => {}\n         -2..=20 => {}\n         //~^ ERROR unreachable pattern\n-        //~| ERROR multiple patterns covering the same range\n         125 => {}\n     }\n "}, {"sha": "4c5806f9606f88f16e61f4478e71c8339196b7a3", "filename": "src/test/ui/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -40,14 +40,6 @@ LL |     match x {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: multiple patterns covering the same range\n-  --> $DIR/exhaustive_integer_patterns.rs:44:9\n-   |\n-LL |         -5..=120 => {}\n-   |         -------- this range overlaps on `-2i8..=20i8`\n-LL |         -2..=20 => {}\n-   |         ^^^^^^^ overlapping patterns\n-\n error: unreachable pattern\n   --> $DIR/exhaustive_integer_patterns.rs:44:9\n    |\n@@ -63,77 +55,77 @@ LL |     match x {\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `std::i8::MIN` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:84:11\n+  --> $DIR/exhaustive_integer_patterns.rs:83:11\n    |\n LL |     match 0i8 {\n    |           ^^^ pattern `std::i8::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0i16` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:92:11\n+  --> $DIR/exhaustive_integer_patterns.rs:91:11\n    |\n LL |     match 0i16 {\n    |           ^^^^ pattern `0i16` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `128u8..=std::u8::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:110:11\n+  --> $DIR/exhaustive_integer_patterns.rs:109:11\n    |\n LL |     match 0u8 {\n    |           ^^^ pattern `128u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=std::u8::MAX, Some(_))` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:122:11\n+  --> $DIR/exhaustive_integer_patterns.rs:121:11\n    |\n LL |     match (0u8, Some(())) {\n    |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=std::u8::MAX, Some(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(126u8..=127u8, false)` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:127:11\n+  --> $DIR/exhaustive_integer_patterns.rs:126:11\n    |\n LL |     match (0u8, true) {\n    |           ^^^^^^^^^^^ pattern `(126u8..=127u8, false)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error: multiple patterns covering the same range\n-  --> $DIR/exhaustive_integer_patterns.rs:142:9\n+  --> $DIR/exhaustive_integer_patterns.rs:141:9\n    |\n LL |         0 .. 2 => {}\n    |         ------ this range overlaps on `1u8`\n LL |         1 ..= 2 => {}\n    |         ^^^^^^^ overlapping patterns\n \n error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:147:11\n+  --> $DIR/exhaustive_integer_patterns.rs:146:11\n    |\n LL |     match 0u128 {\n    |           ^^^^^ pattern `std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `5u128..=std::u128::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:151:11\n+  --> $DIR/exhaustive_integer_patterns.rs:150:11\n    |\n LL |     match 0u128 {\n    |           ^^^^^ pattern `5u128..=std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `0u128..=3u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:155:11\n+  --> $DIR/exhaustive_integer_patterns.rs:154:11\n    |\n LL |     match 0u128 {\n    |           ^^^^^ pattern `0u128..=3u128` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "809205685634e93d458ad31a4263d8dd6b9db14e", "filename": "src/test/ui/issues/issue-13867.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fissues%2Fissue-13867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fissues%2Fissue-13867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13867.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // Test that codegen works correctly when there are multiple refutable\n // patterns in match expression.\n+#![allow(overlapping_patterns)]\n \n \n enum Foo {"}, {"sha": "ab0a18869632a986e9253cba7c7e506b9163506a", "filename": "src/test/ui/issues/issue-21475.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fissues%2Fissue-21475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fissues%2Fissue-21475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21475.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(unused_imports)]\n+#![allow(unused_imports, overlapping_patterns)]\n // pretty-expanded FIXME #23616\n \n use m::{START, END};"}, {"sha": "edb06fea8ad5333db9322141654ee1cbd24ca6e5", "filename": "src/test/ui/issues/issue-26251.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fissues%2Fissue-26251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fissues%2Fissue-26251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26251.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+#![allow(overlapping_patterns)]\n+\n fn main() {\n     let x = 'a';\n "}, {"sha": "7de7b7e79be44faf85c4b75fe98ff73dd672e40b", "filename": "src/test/ui/match/match-range-fail-dominate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -5,31 +5,27 @@ fn main() {\n       1 ..= 10 => { }\n       5 ..= 6 => { }\n       //~^ ERROR unreachable pattern\n-      //~| ERROR multiple patterns covering the same range\n       _ => {}\n     };\n \n     match 5 {\n       3 ..= 6 => { }\n       4 ..= 6 => { }\n       //~^ ERROR unreachable pattern\n-      //~| ERROR multiple patterns covering the same range\n       _ => {}\n     };\n \n     match 5 {\n       4 ..= 6 => { }\n       4 ..= 6 => { }\n       //~^ ERROR unreachable pattern\n-      //~| ERROR multiple patterns covering the same range\n       _ => {}\n     };\n \n     match 'c' {\n       'A' ..= 'z' => {}\n       'a' ..= 'z' => {}\n       //~^ ERROR unreachable pattern\n-      //~| ERROR multiple patterns covering the same range\n       _ => {}\n     };\n "}, {"sha": "c15186d2558f24402c0746132a7f3fbf4c3b1783", "filename": "src/test/ui/match/match-range-fail-dominate.stderr", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail-dominate.stderr?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -1,17 +1,3 @@\n-error: multiple patterns covering the same range\n-  --> $DIR/match-range-fail-dominate.rs:6:7\n-   |\n-LL |       1 ..= 10 => { }\n-   |       -------- this range overlaps on `5i32..=6i32`\n-LL |       5 ..= 6 => { }\n-   |       ^^^^^^^ overlapping patterns\n-   |\n-note: lint level defined here\n-  --> $DIR/match-range-fail-dominate.rs:1:31\n-   |\n-LL | #![deny(unreachable_patterns, overlapping_patterns)]\n-   |                               ^^^^^^^^^^^^^^^^^^^^\n-\n error: unreachable pattern\n   --> $DIR/match-range-fail-dominate.rs:6:7\n    |\n@@ -24,50 +10,26 @@ note: lint level defined here\n LL | #![deny(unreachable_patterns, overlapping_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: multiple patterns covering the same range\n-  --> $DIR/match-range-fail-dominate.rs:14:7\n-   |\n-LL |       3 ..= 6 => { }\n-   |       ------- this range overlaps on `4i32..=6i32`\n-LL |       4 ..= 6 => { }\n-   |       ^^^^^^^ overlapping patterns\n-\n error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:14:7\n+  --> $DIR/match-range-fail-dominate.rs:13:7\n    |\n LL |       4 ..= 6 => { }\n    |       ^^^^^^^\n \n-error: multiple patterns covering the same range\n-  --> $DIR/match-range-fail-dominate.rs:22:7\n-   |\n-LL |       4 ..= 6 => { }\n-   |       ------- this range overlaps on `4i32..=6i32`\n-LL |       4 ..= 6 => { }\n-   |       ^^^^^^^ overlapping patterns\n-\n error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:22:7\n+  --> $DIR/match-range-fail-dominate.rs:20:7\n    |\n LL |       4 ..= 6 => { }\n    |       ^^^^^^^\n \n-error: multiple patterns covering the same range\n-  --> $DIR/match-range-fail-dominate.rs:30:7\n-   |\n-LL |       'A' ..= 'z' => {}\n-   |       ----------- this range overlaps on `'a'..='z'`\n-LL |       'a' ..= 'z' => {}\n-   |       ^^^^^^^^^^^ overlapping patterns\n-\n error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:30:7\n+  --> $DIR/match-range-fail-dominate.rs:27:7\n    |\n LL |       'a' ..= 'z' => {}\n    |       ^^^^^^^^^^^\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:37:7\n+  --> $DIR/match-range-fail-dominate.rs:33:7\n    |\n LL |       0.01f64 ..= 6.5f64 => {}\n    |       ^^^^^^^\n@@ -77,7 +39,7 @@ LL |       0.01f64 ..= 6.5f64 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:37:19\n+  --> $DIR/match-range-fail-dominate.rs:33:19\n    |\n LL |       0.01f64 ..= 6.5f64 => {}\n    |                   ^^^^^^\n@@ -86,7 +48,7 @@ LL |       0.01f64 ..= 6.5f64 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:44:7\n+  --> $DIR/match-range-fail-dominate.rs:40:7\n    |\n LL |       0.02f64 => {}\n    |       ^^^^^^^\n@@ -95,19 +57,19 @@ LL |       0.02f64 => {}\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:44:7\n+  --> $DIR/match-range-fail-dominate.rs:40:7\n    |\n LL |       0.02f64 => {}\n    |       ^^^^^^^\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:37:7\n+  --> $DIR/match-range-fail-dominate.rs:33:7\n    |\n LL |       0.01f64 ..= 6.5f64 => {}\n    |       ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "ee91088c0c36aee072cc0f64c5d8097eca5beea5", "filename": "src/test/ui/precise_pointer_size_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -23,7 +23,7 @@ fn main() {\n \n     match 0isize { //~ ERROR non-exhaustive patterns\n         1 ..= 8 => {}\n-        -5 ..= 20 => {} //~ ERROR multiple patterns covering the same range\n+        -5 ..= 20 => {}\n     }\n \n     match 0usize { //~ ERROR non-exhaustive patterns"}, {"sha": "98d347e06b609f01aec4b7729fe3ab1b292aa4b6", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -1,17 +1,3 @@\n-error: multiple patterns covering the same range\n-  --> $DIR/precise_pointer_size_matching.rs:26:9\n-   |\n-LL |         1 ..= 8 => {}\n-   |         ------- this range overlaps on `1isize..=8isize`\n-LL |         -5 ..= 20 => {}\n-   |         ^^^^^^^^^ overlapping patterns\n-   |\n-note: lint level defined here\n-  --> $DIR/precise_pointer_size_matching.rs:11:31\n-   |\n-LL | #![deny(unreachable_patterns, overlapping_patterns)]\n-   |                               ^^^^^^^^^^^^^^^^^^^^\n-\n error[E0004]: non-exhaustive patterns: `std::isize::MIN..=-6isize` and `21isize..=std::isize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:24:11\n    |\n@@ -27,6 +13,12 @@ LL |         1 ..= 8 => {}\n    |         ------- this range overlaps on `5usize..=8usize`\n LL |         5 ..= 20 => {}\n    |         ^^^^^^^^ overlapping patterns\n+   |\n+note: lint level defined here\n+  --> $DIR/precise_pointer_size_matching.rs:11:31\n+   |\n+LL | #![deny(unreachable_patterns, overlapping_patterns)]\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n \n error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=std::usize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:29:11\n@@ -36,6 +28,6 @@ LL |     match 0usize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}, {"sha": "f8abd1b96d80e85ff959146c4f895107b28bae3b", "filename": "src/test/ui/rfcs/rfc-2005-default-binding-mode/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d6efc43e0629b2028e7d031306088f44f84782/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2005-default-binding-mode%2Frange.rs?ref=73d6efc43e0629b2028e7d031306088f44f84782", "patch": "@@ -3,7 +3,7 @@ pub fn main() {\n     let i = 5;\n     match &&&&i {\n         1 ..= 3 => panic!(),\n-        3 ..= 8 => {},\n+        4 ..= 8 => {},\n         _ => panic!(),\n     }\n }"}]}