{"sha": "f50ded059272ed3c060ea5df353966384d7df427", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MGRlZDA1OTI3MmVkM2MwNjBlYTVkZjM1Mzk2NjM4NGQ3ZGY0Mjc=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2021-01-07T03:41:15Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2021-01-07T03:56:19Z"}, "message": "Catch `pointer::cast` too in `cast_ptr_alignment`", "tree": {"sha": "8a41d6e9fc9d3f3da8c9008ca2b005f07ad95a59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a41d6e9fc9d3f3da8c9008ca2b005f07ad95a59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50ded059272ed3c060ea5df353966384d7df427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50ded059272ed3c060ea5df353966384d7df427", "html_url": "https://github.com/rust-lang/rust/commit/f50ded059272ed3c060ea5df353966384d7df427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50ded059272ed3c060ea5df353966384d7df427/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e5c5a64a5e6689ef25809d9b77380c912572060", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5c5a64a5e6689ef25809d9b77380c912572060", "html_url": "https://github.com/rust-lang/rust/commit/8e5c5a64a5e6689ef25809d9b77380c912572060"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "2d256b38b0de6d79465b4dc42eec2f5fb6e64845", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f50ded059272ed3c060ea5df353966384d7df427/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50ded059272ed3c060ea5df353966384d7df427/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f50ded059272ed3c060ea5df353966384d7df427", "patch": "@@ -1637,12 +1637,8 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             return;\n         }\n         if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n-            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n-                if let Res::Def(_, def_id) = path.res {\n-                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n-                        return;\n-                    }\n-                }\n+            if is_hir_ty_cfg_dependant(cx, cast_to) {\n+                return;\n             }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n@@ -1691,6 +1687,21 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                 lint_numeric_casts(cx, expr, ex, cast_from, cast_to);\n             }\n \n+            lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n+        } else if let ExprKind::MethodCall(method_path, _, args, _) = expr.kind {\n+            if method_path.ident.name != sym!(cast) {\n+                return;\n+            }\n+            if_chain! {\n+                if let Some(generic_args) = method_path.args;\n+                if let [GenericArg::Type(cast_to)] = generic_args.args;\n+                // There probably is no obvious reason to do this, just to be consistent with `as` cases.\n+                if is_hir_ty_cfg_dependant(cx, cast_to);\n+                then {\n+                    return;\n+                }\n+            }\n+            let (cast_from, cast_to) = (cx.typeck_results().expr_ty(&args[0]), cx.typeck_results().expr_ty(expr));\n             lint_cast_ptr_alignment(cx, expr, cast_from, cast_to);\n         }\n     }\n@@ -1714,6 +1725,18 @@ fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     }\n }\n \n+fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n+    if_chain! {\n+        if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+        if let Res::Def(_, def_id) = path.res;\n+        then {\n+            cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n fn show_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &str, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let literal_kind_name = if cast_from.is_integral() { \"integer\" } else { \"float\" };\n     span_lint_and_sugg("}, {"sha": "d011e84b115a7aee99a7f049af33f3fac36be4d2", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f50ded059272ed3c060ea5df353966384d7df427/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50ded059272ed3c060ea5df353966384d7df427/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=f50ded059272ed3c060ea5df353966384d7df427", "patch": "@@ -12,6 +12,10 @@ fn main() {\n     (&1u8 as *const u8) as *const u16;\n     (&mut 1u8 as *mut u8) as *mut u16;\n \n+    // cast to more-strictly-aligned type, but with the `pointer::cast` function.\n+    (&1u8 as *const u8).cast::<u16>();\n+    (&mut 1u8 as *mut u8).cast::<u16>();\n+\n     /* These should be ok */\n \n     // not a pointer type"}, {"sha": "97e31c130a925675e663e66dd7101d44cacdc5cf", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f50ded059272ed3c060ea5df353966384d7df427/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f50ded059272ed3c060ea5df353966384d7df427/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=f50ded059272ed3c060ea5df353966384d7df427", "patch": "@@ -12,5 +12,17 @@ error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1\n LL |     (&mut 1u8 as *mut u8) as *mut u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n+  --> $DIR/cast_alignment.rs:15:5\n+   |\n+LL |     (&1u8 as *const u8).cast::<u16>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n+  --> $DIR/cast_alignment.rs:16:5\n+   |\n+LL |     (&mut 1u8 as *mut u8).cast::<u16>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}]}