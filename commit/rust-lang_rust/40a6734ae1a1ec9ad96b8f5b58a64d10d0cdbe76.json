{"sha": "40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYTY3MzRhZTFhMWVjOWFkOTZiOGY1YjU4YTY0ZDEwZDBjZGJlNzY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-15T10:21:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-15T13:28:28Z"}, "message": "Re-introduce cycle-check in assoc. item resolution.", "tree": {"sha": "bed9a964631771761e329d00eb49ade2081b4ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed9a964631771761e329d00eb49ade2081b4ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76", "html_url": "https://github.com/rust-lang/rust/commit/40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da2fe8ed72cc9960f4043867fc55c2b4bc4a3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da2fe8ed72cc9960f4043867fc55c2b4bc4a3e3", "html_url": "https://github.com/rust-lang/rust/commit/8da2fe8ed72cc9960f4043867fc55c2b4bc4a3e3"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "e119ead7473478029837489a30887999f6c83de7", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=40a6734ae1a1ec9ad96b8f5b58a64d10d0cdbe76", "patch": "@@ -29,6 +29,7 @@ use infer::type_variable::TypeVariableOrigin;\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast;\n use syntax::symbol::Symbol;\n+use syntax_pos::DUMMY_SP;\n use ty::subst::Subst;\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -1317,13 +1318,38 @@ fn assoc_ty_def<'cx, 'gcx, 'tcx>(\n     assoc_ty_name: ast::Name)\n     -> Option<specialization_graph::NodeItem<ty::AssociatedItem>>\n {\n-    let trait_def_id = selcx.tcx().impl_trait_ref(impl_def_id).unwrap().def_id;\n-    let trait_def = selcx.tcx().trait_def(trait_def_id);\n-\n-    trait_def\n-        .ancestors(selcx.tcx(), impl_def_id)\n-        .defs(selcx.tcx(), assoc_ty_name, ty::AssociatedKind::Type)\n-        .next()\n+    let tcx = selcx.tcx();\n+    let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;\n+    let trait_def = tcx.trait_def(trait_def_id);\n+\n+    // This function may be called while we are still building the\n+    // specialization graph that is queried below (via TraidDef::ancestors()),\n+    // so, in order to avoid infinite recursion, we detect this case by\n+    // seeing if a query of the specialization graph fails with a cycle error.\n+    // If we are in cycle, and thus still building the graph, we perform a\n+    // reduced version of the associated item lookup that does not need the\n+    // specialization graph.\n+    let specialization_graph_complete =\n+        ty::queries::specialization_graph_of::try_get(tcx,\n+                                                      DUMMY_SP,\n+                                                      trait_def_id).is_ok();\n+    if !specialization_graph_complete {\n+        let impl_node = specialization_graph::Node::Impl(impl_def_id);\n+        for item in impl_node.items(tcx) {\n+            if item.kind == ty::AssociatedKind::Type && item.name == assoc_ty_name {\n+                return Some(specialization_graph::NodeItem {\n+                    node: specialization_graph::Node::Impl(impl_def_id),\n+                    item: item,\n+                });\n+            }\n+        }\n+        None\n+    } else {\n+        trait_def\n+            .ancestors(tcx, impl_def_id)\n+            .defs(tcx, assoc_ty_name, ty::AssociatedKind::Type)\n+            .next()\n+    }\n }\n \n // # Cache"}]}