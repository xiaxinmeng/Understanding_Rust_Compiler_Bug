{"sha": "1ba658772a580063aaf4ef8ec43c7ce8da928616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYTY1ODc3MmE1ODAwNjNhYWY0ZWY4ZWM0M2M3Y2U4ZGE5Mjg2MTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-31T11:33:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-31T11:33:35Z"}, "message": "Merge pull request #2816 from mockersf/multiple-impl\n\nadding to restriction a lint that check for multiple inherent implementations", "tree": {"sha": "f46ce63da8069f8709dc3d1cdb26495e793e7efb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46ce63da8069f8709dc3d1cdb26495e793e7efb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ba658772a580063aaf4ef8ec43c7ce8da928616", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbD92PCRBK7hj4Ov3rIwAAdHIIADvKm2yRQXrNlN2x+68XQK+D\n8VIP/f/GPABUGurYkr5TbkAo/tdiWKixwBM9yeFPBe6lq51ER8Yxjx7jTcliZSVD\n5lhVHx/cTcO81BG9quoMkYdR4E261sFm3N9ckWSC5afkEE/ivlpKZPhzLHoVi0RC\nQSYEccOoGdCGtW2YccaMHXyBIxSmLemu9Qw+PzjGY7Kkb2B0ZCRLutt8PUDaMrLP\nnQl48bnIcGfr6gmFamB/KEAB5Lp/ZXRIHNkCmFXRA8BufCoXJqC/pKHz7CCGf1W6\nmpH/Jx+EtoMNYaP00u3MS8X3TTfn5nNgqWSbyVp87A+vjtI0IAkXvbMTTB17IXU=\n=vHB2\n-----END PGP SIGNATURE-----\n", "payload": "tree f46ce63da8069f8709dc3d1cdb26495e793e7efb\nparent 41f23f5b4d8f285923ed56c2d4c0cf9856debbd7\nparent d372f1674d4b7bdd7f265154de997f7e8aa8fed2\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1527766415 +0200\ncommitter GitHub <noreply@github.com> 1527766415 +0200\n\nMerge pull request #2816 from mockersf/multiple-impl\n\nadding to restriction a lint that check for multiple inherent implementations"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba658772a580063aaf4ef8ec43c7ce8da928616", "html_url": "https://github.com/rust-lang/rust/commit/1ba658772a580063aaf4ef8ec43c7ce8da928616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ba658772a580063aaf4ef8ec43c7ce8da928616/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f23f5b4d8f285923ed56c2d4c0cf9856debbd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f23f5b4d8f285923ed56c2d4c0cf9856debbd7", "html_url": "https://github.com/rust-lang/rust/commit/41f23f5b4d8f285923ed56c2d4c0cf9856debbd7"}, {"sha": "d372f1674d4b7bdd7f265154de997f7e8aa8fed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d372f1674d4b7bdd7f265154de997f7e8aa8fed2", "html_url": "https://github.com/rust-lang/rust/commit/d372f1674d4b7bdd7f265154de997f7e8aa8fed2"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "1e5544b2ed7ed146c792d45f29a61404b0198e9e", "filename": ".travis.yml", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ba658772a580063aaf4ef8ec43c7ce8da928616/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1ba658772a580063aaf4ef8ec43c7ce8da928616/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1ba658772a580063aaf4ef8ec43c7ce8da928616", "patch": "@@ -24,10 +24,13 @@ before_install:\n     fi\n \n install:\n-  - . $HOME/.nvm/nvm.sh\n-  - nvm install stable\n-  - nvm use stable\n-  - npm install remark-cli remark-lint\n+  - |\n+    if [ -z ${INTEGRATION} ]; then\n+      . $HOME/.nvm/nvm.sh\n+      nvm install stable\n+      nvm use stable\n+      npm install remark-cli remark-lint\n+    fi\n \n matrix:\n   include:"}, {"sha": "637ea917a8f0af907f38a3ebb728ec051547b79b", "filename": "clippy_lints/src/inherent_impl.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1ba658772a580063aaf4ef8ec43c7ce8da928616/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba658772a580063aaf4ef8ec43c7ce8da928616/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=1ba658772a580063aaf4ef8ec43c7ce8da928616", "patch": "@@ -0,0 +1,95 @@\n+//! lint on inherent implementations\n+\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use std::collections::HashMap;\n+use std::default::Default;\n+use syntax_pos::Span;\n+\n+/// **What it does:** Checks for multiple inherent implementations of a struct\n+///\n+/// **Why is this bad?** Splitting the implementation of a type makes the code harder to navigate.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// struct X;\n+/// impl X {\n+///     fn one() {}\n+/// }\n+/// impl X {\n+///     fn other() {}\n+/// }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// struct X;\n+/// impl X {\n+///     fn one() {}\n+///     fn other() {}\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub MULTIPLE_INHERENT_IMPL,\n+    restriction,\n+    \"Multiple inherent impl that could be grouped\"\n+}\n+\n+pub struct Pass {\n+    impls: HashMap<def_id::DefId, (Span, Generics)>,\n+}\n+\n+impl Default for Pass {\n+    fn default() -> Self {\n+        Pass { impls: HashMap::new() }\n+    }\n+}\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MULTIPLE_INHERENT_IMPL)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, _: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+        if let Item_::ItemImpl(_, _, _, ref generics, None, _, _) = item.node {\n+            // Remember for each inherent implementation encoutered its span and generics\n+            self.impls\n+                .insert(item.hir_id.owner_def_id(), (item.span, generics.clone()));\n+        }\n+    }\n+\n+    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx Crate) {\n+        if let Some(item) = krate.items.values().nth(0) {\n+            // Retrieve all inherent implementations from the crate, grouped by type\n+            for impls in cx\n+                .tcx\n+                .crate_inherent_impls(item.hir_id.owner_def_id().krate)\n+                .inherent_impls\n+                .values()\n+            {\n+                // Filter out implementations that have generic params (type or lifetime)\n+                let mut impl_spans = impls\n+                    .iter()\n+                    .filter_map(|impl_def| self.impls.get(impl_def))\n+                    .filter(|(_, generics)| generics.params.len() == 0)\n+                    .map(|(span, _)| span);\n+                if let Some(initial_span) = impl_spans.nth(0) {\n+                    impl_spans.for_each(|additional_span| {\n+                        cx.span_lint_note(\n+                            MULTIPLE_INHERENT_IMPL,\n+                            *additional_span,\n+                            \"Multiple implementations of this structure\",\n+                            *initial_span,\n+                            \"First implementation here\",\n+                        )\n+                    })\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "4aa0b3e89aebd84afc97ceafc57d2ea0509891b6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ba658772a580063aaf4ef8ec43c7ce8da928616/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba658772a580063aaf4ef8ec43c7ce8da928616/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1ba658772a580063aaf4ef8ec43c7ce8da928616", "patch": "@@ -139,6 +139,7 @@ pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n+pub mod inherent_impl;\n pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod invalid_ref;\n@@ -417,6 +418,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box multiple_crate_versions::Pass);\n     reg.register_late_lint_pass(box map_unit_fn::Pass);\n     reg.register_late_lint_pass(box infallible_destructuring_match::Pass);\n+    reg.register_late_lint_pass(box inherent_impl::Pass::default());\n \n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n@@ -425,6 +427,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n+        inherent_impl::MULTIPLE_INHERENT_IMPL,\n         literal_representation::DECIMAL_LITERAL_REPRESENTATION,\n         mem_forget::MEM_FORGET,\n         methods::CLONE_ON_REF_PTR,"}, {"sha": "9e10dbade4e3d415d57021e821f4106da93a4b37", "filename": "tests/ui/impl.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1ba658772a580063aaf4ef8ec43c7ce8da928616/tests%2Fui%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba658772a580063aaf4ef8ec43c7ce8da928616/tests%2Fui%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.rs?ref=1ba658772a580063aaf4ef8ec43c7ce8da928616", "patch": "@@ -0,0 +1,36 @@\n+#![allow(dead_code)]\n+#![warn(multiple_inherent_impl)]\n+\n+struct MyStruct;\n+\n+impl MyStruct {\n+    fn first() {}\n+}\n+\n+impl MyStruct {\n+    fn second() {}\n+}\n+\n+impl<'a> MyStruct {\n+    fn lifetimed() {}\n+}\n+\n+mod submod {\n+    struct MyStruct;\n+    impl MyStruct {\n+        fn other() {}\n+    }\n+\n+    impl super::MyStruct {\n+        fn third() {}\n+    }\n+}\n+\n+use std::fmt;\n+impl fmt::Debug for MyStruct {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"MyStruct {{ }}\")\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "95e627cd50905042e0cb1858f7ed119ede93a4a3", "filename": "tests/ui/impl.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1ba658772a580063aaf4ef8ec43c7ce8da928616/tests%2Fui%2Fimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ba658772a580063aaf4ef8ec43c7ce8da928616/tests%2Fui%2Fimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl.stderr?ref=1ba658772a580063aaf4ef8ec43c7ce8da928616", "patch": "@@ -0,0 +1,35 @@\n+error: Multiple implementations of this structure\n+  --> $DIR/impl.rs:10:1\n+   |\n+10 | / impl MyStruct {\n+11 | |     fn second() {}\n+12 | | }\n+   | |_^\n+   |\n+   = note: `-D multiple-inherent-impl` implied by `-D warnings`\n+note: First implementation here\n+  --> $DIR/impl.rs:6:1\n+   |\n+6  | / impl MyStruct {\n+7  | |     fn first() {}\n+8  | | }\n+   | |_^\n+\n+error: Multiple implementations of this structure\n+  --> $DIR/impl.rs:24:5\n+   |\n+24 | /     impl super::MyStruct {\n+25 | |         fn third() {}\n+26 | |     }\n+   | |_____^\n+   |\n+note: First implementation here\n+  --> $DIR/impl.rs:6:1\n+   |\n+6  | / impl MyStruct {\n+7  | |     fn first() {}\n+8  | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}]}