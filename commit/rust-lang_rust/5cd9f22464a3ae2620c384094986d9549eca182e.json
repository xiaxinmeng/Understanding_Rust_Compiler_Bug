{"sha": "5cd9f22464a3ae2620c384094986d9549eca182e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZDlmMjI0NjRhM2FlMjYyMGMzODQwOTQ5ODZkOTU0OWVjYTE4MmU=", "commit": {"author": {"name": "Nicholas Matsakis", "email": "nmatsakis@psyche.localdomain", "date": "2019-12-11T18:23:07Z"}, "committer": {"name": "Nicholas Matsakis", "email": "nmatsakis@psyche.localdomain", "date": "2019-12-11T18:23:07Z"}, "message": "erase regions instead of using `builtin_deref`\n\nThe reason we were invoking `builtin_deref` was to enable comparisons\nwhen the type was `&T`. For the reasons outlined in the comment, those\ncomparisons failed because the regions disagreed.", "tree": {"sha": "83210c3fbb44b9dc7f241744a1de5f375b76de19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83210c3fbb44b9dc7f241744a1de5f375b76de19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cd9f22464a3ae2620c384094986d9549eca182e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd9f22464a3ae2620c384094986d9549eca182e", "html_url": "https://github.com/rust-lang/rust/commit/5cd9f22464a3ae2620c384094986d9549eca182e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cd9f22464a3ae2620c384094986d9549eca182e/comments", "author": null, "committer": null, "parents": [{"sha": "f0b51145c5006f79da8304e1fb09d6f0eb95ae1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b51145c5006f79da8304e1fb09d6f0eb95ae1a", "html_url": "https://github.com/rust-lang/rust/commit/f0b51145c5006f79da8304e1fb09d6f0eb95ae1a"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "6a111895b5637bd982c4a7eb9e8aad19f60e50e4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5cd9f22464a3ae2620c384094986d9549eca182e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd9f22464a3ae2620c384094986d9549eca182e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5cd9f22464a3ae2620c384094986d9549eca182e", "patch": "@@ -2260,15 +2260,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // Look for a type inside the generator interior that matches the target type to get\n         // a span.\n+        let target_ty_erased = self.tcx.erase_regions(&target_ty);\n         let target_span = tables.generator_interior_types.iter()\n             .find(|ty::GeneratorInteriorTypeCause { ty, .. }| {\n-                let ty = ty.builtin_deref(false).map(|ty_and_mut| ty_and_mut.ty).unwrap_or(ty);\n-                let target_ty = target_ty.builtin_deref(false)\n-                    .map(|ty_and_mut| ty_and_mut.ty)\n-                    .unwrap_or(target_ty);\n-                let eq = ty::TyS::same_type(ty, target_ty);\n-                debug!(\"maybe_note_obligation_cause_for_async_await: ty={:?} \\\n-                        target_ty={:?} eq={:?}\", ty, target_ty, eq);\n+                // Careful: the regions for types that appear in the\n+                // generator interior are not generally known, so we\n+                // want to erase them when comparing (and anyway,\n+                // `Send` and other bounds are generally unaffected by\n+                // the choice of region).  When erasing regions, we\n+                // also have to erase late-bound regions. This is\n+                // because the types that appear in the generator\n+                // interior generally contain \"bound regions\" to\n+                // represent regions that are part of the suspended\n+                // generator frame. Bound regions are preserved by\n+                // `erase_regions` and so we must also call\n+                // `erase_late_bound_regions`.\n+                let ty_erased = self.tcx.erase_late_bound_regions(&ty::Binder::bind(*ty));\n+                let ty_erased = self.tcx.erase_regions(&ty_erased);\n+                let eq = ty::TyS::same_type(ty_erased, target_ty_erased);\n+                debug!(\"maybe_note_obligation_cause_for_async_await: ty_erased={:?} \\\n+                        target_ty_erased={:?} eq={:?}\", ty_erased, target_ty_erased, eq);\n                 eq\n             })\n             .map(|ty::GeneratorInteriorTypeCause { span, scope_span, .. }|"}]}