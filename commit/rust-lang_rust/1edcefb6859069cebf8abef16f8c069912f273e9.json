{"sha": "1edcefb6859069cebf8abef16f8c069912f273e9", "node_id": "C_kwDOAAsO6NoAKDFlZGNlZmI2ODU5MDY5Y2ViZjhhYmVmMTZmOGMwNjk5MTJmMjczZTk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-29T17:45:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-29T18:14:17Z"}, "message": "fix: Force InitializeParams windows path drives to uppercase", "tree": {"sha": "45d50a24b9ace43126cb7f5f4c71954f9ddfbd83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d50a24b9ace43126cb7f5f4c71954f9ddfbd83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1edcefb6859069cebf8abef16f8c069912f273e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1edcefb6859069cebf8abef16f8c069912f273e9", "html_url": "https://github.com/rust-lang/rust/commit/1edcefb6859069cebf8abef16f8c069912f273e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1edcefb6859069cebf8abef16f8c069912f273e9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e535b6df9877bf2493bcf9411df479f03bd84e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e535b6df9877bf2493bcf9411df479f03bd84e", "html_url": "https://github.com/rust-lang/rust/commit/07e535b6df9877bf2493bcf9411df479f03bd84e"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "b255a4405387a3993a182ab1d5e6ccc8c7422055", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1edcefb6859069cebf8abef16f8c069912f273e9/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edcefb6859069cebf8abef16f8c069912f273e9/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=1edcefb6859069cebf8abef16f8c069912f273e9", "patch": "@@ -7,7 +7,11 @@\n mod logger;\n mod rustc_wrapper;\n \n-use std::{env, fs, path::Path, process};\n+use std::{\n+    env, fs,\n+    path::{Path, PathBuf},\n+    process,\n+};\n \n use lsp_server::Connection;\n use rust_analyzer::{cli::flags, config::Config, from_json, Result};\n@@ -149,12 +153,18 @@ fn run_server() -> Result<()> {\n \n     let (initialize_id, initialize_params) = connection.initialize_start()?;\n     tracing::info!(\"InitializeParams: {}\", initialize_params);\n-    let initialize_params =\n-        from_json::<lsp_types::InitializeParams>(\"InitializeParams\", &initialize_params)?;\n-\n-    let root_path = match initialize_params\n-        .root_uri\n+    let lsp_types::InitializeParams {\n+        root_uri,\n+        capabilities,\n+        workspace_folders,\n+        initialization_options,\n+        client_info,\n+        ..\n+    } = from_json::<lsp_types::InitializeParams>(\"InitializeParams\", &initialize_params)?;\n+\n+    let root_path = match root_uri\n         .and_then(|it| it.to_file_path().ok())\n+        .map(patch_path_prefix)\n         .and_then(|it| AbsPathBuf::try_from(it).ok())\n     {\n         Some(it) => it,\n@@ -164,19 +174,19 @@ fn run_server() -> Result<()> {\n         }\n     };\n \n-    let workspace_roots = initialize_params\n-        .workspace_folders\n+    let workspace_roots = workspace_folders\n         .map(|workspaces| {\n             workspaces\n                 .into_iter()\n                 .filter_map(|it| it.uri.to_file_path().ok())\n+                .map(patch_path_prefix)\n                 .filter_map(|it| AbsPathBuf::try_from(it).ok())\n                 .collect::<Vec<_>>()\n         })\n         .filter(|workspaces| !workspaces.is_empty())\n         .unwrap_or_else(|| vec![root_path.clone()]);\n-    let mut config = Config::new(root_path, initialize_params.capabilities, workspace_roots);\n-    if let Some(json) = initialize_params.initialization_options {\n+    let mut config = Config::new(root_path, capabilities, workspace_roots);\n+    if let Some(json) = initialization_options {\n         if let Err(e) = config.update(json) {\n             use lsp_types::{\n                 notification::{Notification, ShowMessage},\n@@ -205,7 +215,7 @@ fn run_server() -> Result<()> {\n \n     connection.initialize_finish(initialize_id, initialize_result)?;\n \n-    if let Some(client_info) = initialize_params.client_info {\n+    if let Some(client_info) = client_info {\n         tracing::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n     }\n \n@@ -219,3 +229,42 @@ fn run_server() -> Result<()> {\n     tracing::info!(\"server did shut down\");\n     Ok(())\n }\n+\n+fn patch_path_prefix(path: PathBuf) -> PathBuf {\n+    use std::path::{Component, Prefix};\n+    if cfg!(windows) {\n+        // VSCode might report paths with the file drive in lowercase, but this can mess\n+        // with env vars set by tools and build scripts executed by r-a such that it invalidates\n+        // cargo's compilations unnecessarily. https://github.com/rust-lang/rust-analyzer/issues/14683\n+        // So we just uppercase the drive letter here unconditionally.\n+        // (doing it conditionally is a pain because std::path::Prefix always reports uppercase letters on windows)\n+        let mut comps = path.components();\n+        match comps.next() {\n+            Some(Component::Prefix(prefix)) => {\n+                let prefix = match prefix.kind() {\n+                    Prefix::Disk(d) => {\n+                        format!(\"{}:\", d.to_ascii_uppercase() as char)\n+                    }\n+                    Prefix::VerbatimDisk(d) => {\n+                        format!(r\"\\\\?\\{}:\\\", d.to_ascii_uppercase() as char)\n+                    }\n+                    _ => return path,\n+                };\n+                let mut path = PathBuf::new();\n+                path.push(prefix);\n+                path.extend(comps);\n+                path\n+            }\n+            _ => path,\n+        }\n+    } else {\n+        path\n+    }\n+}\n+\n+#[test]\n+#[cfg(windows)]\n+fn patch_path_prefix_works() {\n+    assert_eq!(patch_path_prefix(r\"c:\\foo\\bar\".into()), PathBuf::from(r\"C:\\foo\\bar\"));\n+    assert_eq!(patch_path_prefix(r\"\\\\?\\c:\\foo\\bar\".into()), PathBuf::from(r\"\\\\?\\C:\\foo\\bar\"));\n+}"}]}