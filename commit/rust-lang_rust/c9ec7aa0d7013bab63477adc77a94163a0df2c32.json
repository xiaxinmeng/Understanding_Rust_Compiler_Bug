{"sha": "c9ec7aa0d7013bab63477adc77a94163a0df2c32", "node_id": "C_kwDOAAsO6NoAKGM5ZWM3YWEwZDcwMTNiYWI2MzQ3N2FkYzc3YTk0MTYzYTBkZjJjMzI", "commit": {"author": {"name": "Duarte Nunes", "email": "duarte.nunes@datadoghq.com", "date": "2022-07-13T22:46:04Z"}, "committer": {"name": "Duarte Nunes", "email": "duarte.nunes@datadoghq.com", "date": "2022-07-14T00:48:18Z"}, "message": "changes to wording", "tree": {"sha": "f9034e4b377ef1706cbe5c7008ea37b66b623bbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9034e4b377ef1706cbe5c7008ea37b66b623bbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ec7aa0d7013bab63477adc77a94163a0df2c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ec7aa0d7013bab63477adc77a94163a0df2c32", "html_url": "https://github.com/rust-lang/rust/commit/c9ec7aa0d7013bab63477adc77a94163a0df2c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ec7aa0d7013bab63477adc77a94163a0df2c32/comments", "author": {"login": "duarten", "id": 501746, "node_id": "MDQ6VXNlcjUwMTc0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/501746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duarten", "html_url": "https://github.com/duarten", "followers_url": "https://api.github.com/users/duarten/followers", "following_url": "https://api.github.com/users/duarten/following{/other_user}", "gists_url": "https://api.github.com/users/duarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/duarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duarten/subscriptions", "organizations_url": "https://api.github.com/users/duarten/orgs", "repos_url": "https://api.github.com/users/duarten/repos", "events_url": "https://api.github.com/users/duarten/events{/privacy}", "received_events_url": "https://api.github.com/users/duarten/received_events", "type": "User", "site_admin": false}, "committer": {"login": "duarten", "id": 501746, "node_id": "MDQ6VXNlcjUwMTc0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/501746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duarten", "html_url": "https://github.com/duarten", "followers_url": "https://api.github.com/users/duarten/followers", "following_url": "https://api.github.com/users/duarten/following{/other_user}", "gists_url": "https://api.github.com/users/duarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/duarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duarten/subscriptions", "organizations_url": "https://api.github.com/users/duarten/orgs", "repos_url": "https://api.github.com/users/duarten/repos", "events_url": "https://api.github.com/users/duarten/events{/privacy}", "received_events_url": "https://api.github.com/users/duarten/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cd66be2351099d2a74aeb67ccb13e148dfdf114", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd66be2351099d2a74aeb67ccb13e148dfdf114", "html_url": "https://github.com/rust-lang/rust/commit/9cd66be2351099d2a74aeb67ccb13e148dfdf114"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "17342cacd760e5ec3dd2eda9514497cf2471fe3a", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9ec7aa0d7013bab63477adc77a94163a0df2c32/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ec7aa0d7013bab63477adc77a94163a0df2c32/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=c9ec7aa0d7013bab63477adc77a94163a0df2c32", "patch": "@@ -483,7 +483,7 @@ impl<T> Vec<T> {\n         Self::with_capacity_in(capacity, Global)\n     }\n \n-    /// Creates a `Vec<T>` directly from the raw components of another vector.\n+    /// Creates a `Vec<T>` directly from a pointer, a capacity, and a length.\n     ///\n     /// # Safety\n     ///\n@@ -498,12 +498,14 @@ impl<T> Vec<T> {\n     ///   to be the same size as the pointer was allocated with. (Because similar to\n     ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n+    /// * The first `length` values must be properly initialized values of type `T`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n-    /// * The allocated size in bytes must be no larger than  `isize::MAX`.\n+    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n     ///   See the safety documentation of [`pointer::offset`].\n     ///\n-    /// To ensure these requirements are easily met, ensure `ptr` has previously\n-    /// been allocated via `Vec<T>`.\n+    /// These requirements are always uphead by any `ptr` that has been allocated\n+    /// via `Vec<T>`. Other allocation sources are allowed if the invariants are\n+    /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is normally **not** safe\n@@ -645,7 +647,8 @@ impl<T, A: Allocator> Vec<T, A> {\n         Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }\n     }\n \n-    /// Creates a `Vec<T, A>` directly from the raw components of another vector.\n+    /// Creates a `Vec<T, A>` directly from a pointer, a capacity, a length,\n+    /// and an allocator.\n     ///\n     /// # Safety\n     ///\n@@ -660,12 +663,14 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///   to be the same size as the pointer was allocated with. (Because similar to\n     ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n-    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n-    /// * The allocated size in bytes must be no larger than  `isize::MAX`.\n+    /// * The first `length` values must be properly initialized values of type `T`.\n+    /// * `capacity` needs to [fit] the layout size that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than `isize::MAX`.\n     ///   See the safety documentation of [`pointer::offset`].\n     ///\n-    /// To ensure these requirements are easily met, ensure `ptr` has previously\n-    /// been allocated via `Vec<T>`.\n+    /// These requirements are always uphead by any `ptr` that has been allocated\n+    /// via `Vec<T>`. Other allocation sources are allowed if the invariants are\n+    /// upheld.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe\n@@ -683,6 +688,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [`String`]: crate::string::String\n     /// [`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n+    /// [*fit*]: crate::alloc::Allocator#memory-fitting\n     ///\n     /// # Examples\n     ///"}]}