{"sha": "3b905516106359201989d72615ade9ae9884d799", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOTA1NTE2MTA2MzU5MjAxOTg5ZDcyNjE1YWRlOWFlOTg4NGQ3OTk=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-25T23:56:06Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-27T11:51:23Z"}, "message": "Allow changing rustdoc which builds the book.", "tree": {"sha": "c5e08fc5a086dd69cfa915eecf400d75061b7613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5e08fc5a086dd69cfa915eecf400d75061b7613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b905516106359201989d72615ade9ae9884d799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b905516106359201989d72615ade9ae9884d799", "html_url": "https://github.com/rust-lang/rust/commit/3b905516106359201989d72615ade9ae9884d799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b905516106359201989d72615ade9ae9884d799/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5333cb2ba70b49a17c3c124bc47feba7fd761c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5333cb2ba70b49a17c3c124bc47feba7fd761c", "html_url": "https://github.com/rust-lang/rust/commit/4e5333cb2ba70b49a17c3c124bc47feba7fd761c"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "c521a148e5d45b7efbc769d052463bbddcb7a947", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b905516106359201989d72615ade9ae9884d799/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b905516106359201989d72615ade9ae9884d799/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=3b905516106359201989d72615ade9ae9884d799", "patch": "@@ -26,7 +26,7 @@ use Mode;\n use build_helper::up_to_date;\n \n use util::{cp_r, symlink_dir};\n-use builder::{Builder, RunConfig, ShouldRun, Step};\n+use builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n use tool::Tool;\n use compile;\n use cache::{INTERNER, Interned};\n@@ -176,6 +176,7 @@ impl Step for RustbookSrc {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct TheBook {\n+    compiler: Compiler,\n     target: Interned<String>,\n     name: &'static str,\n }\n@@ -191,6 +192,7 @@ impl Step for TheBook {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(TheBook {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n             target: run.target,\n             name: \"book\",\n         });\n@@ -223,7 +225,7 @@ impl Step for TheBook {\n         // build the index page\n         let index = format!(\"{}/index.md\", name);\n         println!(\"Documenting book index ({})\", target);\n-        invoke_rustdoc(builder, target, &index);\n+        invoke_rustdoc(builder, self.compiler, target, &index);\n \n         // build the redirect pages\n         println!(\"Documenting book redirect pages ({})\", target);\n@@ -232,12 +234,12 @@ impl Step for TheBook {\n             let path = file.path();\n             let path = path.to_str().unwrap();\n \n-            invoke_rustdoc(builder, target, path);\n+            invoke_rustdoc(builder, self.compiler, target, path);\n         }\n     }\n }\n \n-fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n+fn invoke_rustdoc(builder: &Builder, compiler: Compiler, target: Interned<String>, markdown: &str) {\n     let build = builder.build;\n     let out = build.doc_out(target);\n \n@@ -258,7 +260,7 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n         t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n     }\n \n-    let mut cmd = builder.rustdoc_cmd(builder.compiler(0, build.build));\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n \n     let out = out.join(\"book\");\n \n@@ -279,6 +281,7 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Standalone {\n+    compiler: Compiler,\n     target: Interned<String>,\n }\n \n@@ -293,6 +296,7 @@ impl Step for Standalone {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Standalone {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n             target: run.target,\n         });\n     }\n@@ -308,12 +312,11 @@ impl Step for Standalone {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let target = self.target;\n+        let compiler = self.compiler;\n         println!(\"Documenting standalone ({})\", target);\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        let compiler = builder.compiler(0, build.build);\n-\n         let favicon = build.src.join(\"src/doc/favicon.inc\");\n         let footer = build.src.join(\"src/doc/footer.inc\");\n         let full_toc = build.src.join(\"src/doc/full-toc.inc\");\n@@ -405,6 +408,7 @@ impl Step for Std {\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler);\n         let compiler = if build.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -414,7 +418,6 @@ impl Step for Std {\n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Libstd)\n                            .join(target).join(\"doc\");\n-        let rustdoc = builder.rustdoc(compiler);\n \n         // Here what we're doing is creating a *symlink* (directory junction on\n         // Windows) to the final output location. This is not done as an\n@@ -490,6 +493,7 @@ impl Step for Test {\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler);\n         let compiler = if build.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -502,7 +506,6 @@ impl Step for Test {\n         builder.ensure(compile::Test { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Libtest)\n                            .join(target).join(\"doc\");\n-        let rustdoc = builder.rustdoc(compiler);\n \n         // See docs in std above for why we symlink\n         let my_out = build.crate_doc_out(target);\n@@ -551,6 +554,7 @@ impl Step for Rustc {\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler);\n         let compiler = if build.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -563,7 +567,6 @@ impl Step for Rustc {\n         builder.ensure(compile::Rustc { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Librustc)\n                            .join(target).join(\"doc\");\n-        let rustdoc = builder.rustdoc(compiler);\n \n         // See docs in std above for why we symlink\n         let my_out = build.crate_doc_out(target);"}]}