{"sha": "4ec658eb694f40c429eb69d07dce541e9b877667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzY1OGViNjk0ZjQwYzQyOWViNjlkMDdkY2U1NDFlOWI4Nzc2Njc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-12T20:06:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-12-12T20:06:30Z"}, "message": "Merge pull request #4167 from catamorphism/issue-3637\n\nReverse the order of the results of pipes::stream", "tree": {"sha": "5d64bf389f009af92f7a9dd5b2ea955fe69c6071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d64bf389f009af92f7a9dd5b2ea955fe69c6071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec658eb694f40c429eb69d07dce541e9b877667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec658eb694f40c429eb69d07dce541e9b877667", "html_url": "https://github.com/rust-lang/rust/commit/4ec658eb694f40c429eb69d07dce541e9b877667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec658eb694f40c429eb69d07dce541e9b877667/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0a01f25638857edaf73d46d634a196781e3019a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0a01f25638857edaf73d46d634a196781e3019a", "html_url": "https://github.com/rust-lang/rust/commit/b0a01f25638857edaf73d46d634a196781e3019a"}, {"sha": "38bd694df14a1b83ff8edaf5246785579fb812c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd694df14a1b83ff8edaf5246785579fb812c0", "html_url": "https://github.com/rust-lang/rust/commit/38bd694df14a1b83ff8edaf5246785579fb812c0"}], "stats": {"total": 162, "additions": 81, "deletions": 81}, "files": [{"sha": "f01bf890191900321e76d604f565dfd32ce770ba", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -978,10 +978,10 @@ pub enum Port<T:Send> {\n These allow sending or receiving an unlimited number of messages.\n \n */\n-pub fn stream<T:Send>() -> (Chan<T>, Port<T>) {\n+pub fn stream<T:Send>() -> (Port<T>, Chan<T>) {\n     let (c, s) = streamp::init();\n \n-    (Chan_({ mut endp: Some(move c) }), Port_({ mut endp: Some(move s) }))\n+    (Port_({ mut endp: Some(move s) }), Chan_({ mut endp: Some(move c) }))\n }\n \n impl<T: Send> Chan<T>: GenericChan<T> {\n@@ -1070,7 +1070,7 @@ impl<T: Send> PortSet<T> {\n     }\n \n     fn chan() -> Chan<T> {\n-        let (ch, po) = stream();\n+        let (po, ch) = stream();\n         self.add(move po);\n         move ch\n     }\n@@ -1240,8 +1240,8 @@ pub mod rt {\n pub mod test {\n     #[test]\n     pub fn test_select2() {\n-        let (c1, p1) = pipes::stream();\n-        let (c2, p2) = pipes::stream();\n+        let (p1, c1) = pipes::stream();\n+        let (p2, c2) = pipes::stream();\n \n         c1.send(~\"abc\");\n \n@@ -1264,7 +1264,7 @@ pub mod test {\n \n     #[test]\n     fn test_peek_terminated() {\n-        let (chan, port): (Chan<int>, Port<int>) = stream();\n+        let (port, chan): (Port<int>, Chan<int>) = stream();\n \n         {\n             // Destroy the channel"}, {"sha": "bc85dcbbbf807d97487409e129b3d9bd98fc6d2a", "filename": "src/libcore/private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -576,7 +576,7 @@ pub mod tests {\n \n         for uint::range(0, num_tasks) |_i| {\n             let total = total.clone();\n-            let (chan, port) = pipes::stream();\n+            let (port, chan) = pipes::stream();\n             futures.push(move port);\n \n             do task::spawn |move total, move chan| {"}, {"sha": "98da3f50318d1888bb9d79335a913fb4340d7a9a", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -340,7 +340,7 @@ impl TaskBuilder {\n         }\n \n         // Construct the future and give it to the caller.\n-        let (notify_pipe_ch, notify_pipe_po) = stream::<TaskResult>();\n+        let (notify_pipe_po, notify_pipe_ch) = stream::<TaskResult>();\n \n         blk(move notify_pipe_po);\n \n@@ -1211,7 +1211,7 @@ fn test_unkillable() {\n #[ignore(cfg(windows))]\n #[should_fail]\n fn test_unkillable_nested() {\n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n \n     // We want to do this after failing\n     do spawn_unlinked |move ch| {\n@@ -1277,7 +1277,7 @@ fn test_child_doesnt_ref_parent() {\n \n #[test]\n fn test_sched_thread_per_core() {\n-    let (chan, port) = pipes::stream();\n+    let (port, chan) = pipes::stream();\n \n     do spawn_sched(ThreadPerCore) |move chan| {\n         let cores = rt::rust_num_threads();\n@@ -1291,15 +1291,15 @@ fn test_sched_thread_per_core() {\n \n #[test]\n fn test_spawn_thread_on_demand() {\n-    let (chan, port) = pipes::stream();\n+    let (port, chan) = pipes::stream();\n \n     do spawn_sched(ManualThreads(2)) |move chan| {\n         let max_threads = rt::rust_sched_threads();\n         assert(max_threads as int == 2);\n         let running_threads = rt::rust_sched_current_nonlazy_threads();\n         assert(running_threads as int == 1);\n \n-        let (chan2, port2) = pipes::stream();\n+        let (port2, chan2) = pipes::stream();\n \n         do spawn() |move chan2| {\n             chan2.send(());"}, {"sha": "61e358e1e30e4c075a2f03997d4140be15281765", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -670,7 +670,7 @@ fn test_spawn_raw_unsupervise() {\n #[test]\n #[ignore(cfg(windows))]\n fn test_spawn_raw_notify_success() {\n-    let (notify_ch, notify_po) = pipes::stream();\n+    let (notify_po, notify_ch) = pipes::stream();\n \n     let opts = {\n         notify_chan: Some(move notify_ch),\n@@ -685,7 +685,7 @@ fn test_spawn_raw_notify_success() {\n #[ignore(cfg(windows))]\n fn test_spawn_raw_notify_failure() {\n     // New bindings for these\n-    let (notify_ch, notify_po) = pipes::stream();\n+    let (notify_po, notify_ch) = pipes::stream();\n \n     let opts = {\n         linked: false,"}, {"sha": "0f03e7f4594e17451c7f52222bc6f6ea57ac8b86", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -111,12 +111,12 @@ fn pandoc_writer(\n         os::close(pipe_err.out);\n         os::close(pipe_in.out);\n \n-        let (stdout_ch, stdout_po) = pipes::stream();\n+        let (stdout_po, stdout_ch) = pipes::stream();\n         do task::spawn_sched(task::SingleThreaded) |move stdout_ch| {\n             stdout_ch.send(readclose(pipe_out.in));\n         }\n \n-        let (stderr_ch, stderr_po) = pipes::stream();\n+        let (stderr_po, stderr_ch) = pipes::stream();\n         do task::spawn_sched(task::SingleThreaded) |move stderr_ch| {\n             stderr_ch.send(readclose(pipe_err.in));\n         }\n@@ -149,7 +149,7 @@ fn readclose(fd: libc::c_int) -> ~str {\n }\n \n fn generic_writer(+process: fn~(+markdown: ~str)) -> Writer {\n-    let (setup_ch, setup_po) = pipes::stream();\n+    let (setup_po, setup_ch) = pipes::stream();\n     do task::spawn |move process, move setup_ch| {\n         let po: comm::Port<WriteInstr> = comm::Port();\n         let ch = comm::Chan(&po);\n@@ -279,7 +279,7 @@ pub fn future_writer_factory(\n     let markdown_po = comm::Port();\n     let markdown_ch = comm::Chan(&markdown_po);\n     let writer_factory = fn~(+page: doc::Page) -> Writer {\n-        let (writer_ch, writer_po) = pipes::stream();\n+        let (writer_po, writer_ch) = pipes::stream();\n         do task::spawn |move writer_ch| {\n             let (writer, future) = future_writer();\n             writer_ch.send(move writer);\n@@ -293,7 +293,7 @@ pub fn future_writer_factory(\n }\n \n fn future_writer() -> (Writer, future::Future<~str>) {\n-    let (chan, port) = pipes::stream();\n+    let (port, chan) = pipes::stream();\n     let writer = fn~(move chan, +instr: WriteInstr) {\n         chan.send(copy instr);\n     };"}, {"sha": "eacb310ee02848a3b9d043e399f2bbbd19c423d6", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -471,7 +471,7 @@ mod tests {\n         let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         let arc_v = arc::ARC(v);\n \n-        let (c, p) = pipes::stream();\n+        let (p, c) = pipes::stream();\n \n         do task::spawn() |move c| {\n             let p = pipes::PortSet();\n@@ -517,7 +517,7 @@ mod tests {\n     fn test_arc_condvar_poison() {\n         let arc = ~MutexARC(1);\n         let arc2 = ~arc.clone();\n-        let (c,p) = pipes::stream();\n+        let (p, c) = pipes::stream();\n \n         do task::spawn_unlinked |move arc2, move p| {\n             let _ = p.recv();\n@@ -551,7 +551,7 @@ mod tests {\n     fn test_mutex_arc_unwrap_poison() {\n         let arc = MutexARC(1);\n         let arc2 = ~(&arc).clone();\n-        let (c,p) = pipes::stream();\n+        let (p, c) = pipes::stream();\n         do task::spawn |move c, move arc2| {\n             do arc2.access |one| {\n                 c.send(());\n@@ -649,7 +649,7 @@ mod tests {\n     fn test_rw_arc() {\n         let arc = ~RWARC(0);\n         let arc2 = ~arc.clone();\n-        let (c,p) = pipes::stream();\n+        let (p,c) = pipes::stream();\n \n         do task::spawn |move arc2, move c| {\n             do arc2.write |num| {\n@@ -695,7 +695,7 @@ mod tests {\n         // Reader tasks\n         let mut reader_convos = ~[];\n         for 10.times {\n-            let ((rc1,rp1),(rc2,rp2)) = (pipes::stream(),pipes::stream());\n+            let ((rp1,rc1),(rp2,rc2)) = (pipes::stream(),pipes::stream());\n             reader_convos.push((move rc1, move rp2));\n             let arcn = ~arc.clone();\n             do task::spawn |move rp1, move rc2, move arcn| {\n@@ -709,7 +709,7 @@ mod tests {\n \n         // Writer task\n         let arc2 = ~arc.clone();\n-        let ((wc1,wp1),(wc2,wp2)) = (pipes::stream(),pipes::stream());\n+        let ((wp1,wc1),(wp2,wc2)) = (pipes::stream(),pipes::stream());\n         do task::spawn |move arc2, move wc2, move wp1| {\n             wp1.recv();\n             do arc2.write_cond |state, cond| {"}, {"sha": "49c5df2a28e44aee2bb5743b45c7dad82477a04d", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -64,8 +64,8 @@ impl<T: Send, U: Send> DuplexStream<T, U> : Selectable {\n pub fn DuplexStream<T: Send, U: Send>()\n     -> (DuplexStream<T, U>, DuplexStream<U, T>)\n {\n-    let (c2, p1) = pipes::stream();\n-    let (c1, p2) = pipes::stream();\n+    let (p1, c2) = pipes::stream();\n+    let (p2, c1) = pipes::stream();\n     (DuplexStream {\n         chan: move c1,\n         port: move p1"}, {"sha": "7506f1ea7bdabf65c099f7c3f1dca52bdf065be0", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -34,7 +34,7 @@ struct Waitqueue { head: pipes::Port<SignalEnd>,\n                    tail: pipes::Chan<SignalEnd> }\n \n fn new_waitqueue() -> Waitqueue {\n-    let (block_tail, block_head) = pipes::stream();\n+    let (block_head, block_tail) = pipes::stream();\n     Waitqueue { head: move block_head, tail: move block_tail }\n }\n \n@@ -733,7 +733,7 @@ mod tests {\n     #[test]\n     fn test_sem_as_cvar() {\n         /* Child waits and parent signals */\n-        let (c,p) = pipes::stream();\n+        let (p,c) = pipes::stream();\n         let s = ~semaphore(0);\n         let s2 = ~s.clone();\n         do task::spawn |move s2, move c| {\n@@ -745,7 +745,7 @@ mod tests {\n         let _ = p.recv();\n \n         /* Parent waits and child signals */\n-        let (c,p) = pipes::stream();\n+        let (p,c) = pipes::stream();\n         let s = ~semaphore(0);\n         let s2 = ~s.clone();\n         do task::spawn |move s2, move p| {\n@@ -762,8 +762,8 @@ mod tests {\n         // time, and shake hands.\n         let s = ~semaphore(2);\n         let s2 = ~s.clone();\n-        let (c1,p1) = pipes::stream();\n-        let (c2,p2) = pipes::stream();\n+        let (p1,c1) = pipes::stream();\n+        let (p2,c2) = pipes::stream();\n         do task::spawn |move s2, move c1, move p2| {\n             do s2.access {\n                 let _ = p2.recv();\n@@ -782,7 +782,7 @@ mod tests {\n         do task::spawn_sched(task::ManualThreads(1)) {\n             let s = ~semaphore(1);\n             let s2 = ~s.clone();\n-            let (c,p) = pipes::stream();\n+            let (p,c) = pipes::stream();\n             let child_data = ~mut Some((move s2, move c));\n             do s.access {\n                 let (s2,c) = option::swap_unwrap(child_data);\n@@ -804,7 +804,7 @@ mod tests {\n     fn test_mutex_lock() {\n         // Unsafely achieve shared state, and do the textbook\n         // \"load tmp = move ptr; inc tmp; store ptr <- tmp\" dance.\n-        let (c,p) = pipes::stream();\n+        let (p,c) = pipes::stream();\n         let m = ~Mutex();\n         let m2 = ~m.clone();\n         let mut sharedstate = ~0;\n@@ -847,7 +847,7 @@ mod tests {\n             cond.wait();\n         }\n         // Parent wakes up child\n-        let (chan,port) = pipes::stream();\n+        let (port,chan) = pipes::stream();\n         let m3 = ~m.clone();\n         do task::spawn |move chan, move m3| {\n             do m3.lock_cond |cond| {\n@@ -870,7 +870,7 @@ mod tests {\n \n         for num_waiters.times {\n             let mi = ~m.clone();\n-            let (chan, port) = pipes::stream();\n+            let (port, chan) = pipes::stream();\n             ports.push(move port);\n             do task::spawn |move chan, move mi| {\n                 do mi.lock_cond |cond| {\n@@ -932,7 +932,7 @@ mod tests {\n         let m2 = ~m.clone();\n \n         let result: result::Result<(),()> = do task::try |move m2| {\n-            let (c,p) = pipes::stream();\n+            let (p,c) = pipes::stream();\n             do task::spawn |move p| { // linked\n                 let _ = p.recv(); // wait for sibling to get in the mutex\n                 task::yield();\n@@ -954,12 +954,12 @@ mod tests {\n     fn test_mutex_killed_broadcast() {\n         let m = ~Mutex();\n         let m2 = ~m.clone();\n-        let (c,p) = pipes::stream();\n+        let (p,c) = pipes::stream();\n \n         let result: result::Result<(),()> = do task::try |move c, move m2| {\n             let mut sibling_convos = ~[];\n             for 2.times {\n-                let (c,p) = pipes::stream();\n+                let (p,c) = pipes::stream();\n                 let c = ~mut Some(move c);\n                 sibling_convos.push(move p);\n                 let mi = ~m2.clone();\n@@ -1022,7 +1022,7 @@ mod tests {\n         let result = do task::try {\n             let m = ~mutex_with_condvars(2);\n             let m2 = ~m.clone();\n-            let (c,p) = pipes::stream();\n+            let (p,c) = pipes::stream();\n             do task::spawn |move m2, move c| {\n                 do m2.lock_cond |cond| {\n                     c.send(());\n@@ -1082,7 +1082,7 @@ mod tests {\n                              mode2: RWlockMode) {\n         // Test mutual exclusion between readers and writers. Just like the\n         // mutex mutual exclusion test, a ways above.\n-        let (c,p) = pipes::stream();\n+        let (p,c) = pipes::stream();\n         let x2 = ~x.clone();\n         let mut sharedstate = ~0;\n         let ptr = ptr::addr_of(&(*sharedstate));\n@@ -1127,8 +1127,8 @@ mod tests {\n                              mode2: RWlockMode, make_mode2_go_first: bool) {\n         // Much like sem_multi_resource.\n         let x2 = ~x.clone();\n-        let (c1,p1) = pipes::stream();\n-        let (c2,p2) = pipes::stream();\n+        let (p1,c1) = pipes::stream();\n+        let (p2,c2) = pipes::stream();\n         do task::spawn |move c1, move x2, move p2| {\n             if !make_mode2_go_first {\n                 let _ = p2.recv(); // parent sends to us once it locks, or ...\n@@ -1193,7 +1193,7 @@ mod tests {\n             cond.wait();\n         }\n         // Parent wakes up child\n-        let (chan,port) = pipes::stream();\n+        let (port,chan) = pipes::stream();\n         let x3 = ~x.clone();\n         do task::spawn |move x3, move chan| {\n             do x3.write_cond |cond| {\n@@ -1229,7 +1229,7 @@ mod tests {\n \n         for num_waiters.times {\n             let xi = ~x.clone();\n-            let (chan, port) = pipes::stream();\n+            let (port, chan) = pipes::stream();\n             ports.push(move port);\n             do task::spawn |move chan, move xi| {\n                 do lock_cond(xi, dg1) |cond| {"}, {"sha": "a87576789af55d66c99745ac45073b9e59d42bf6", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -42,7 +42,7 @@ pub impl<T> TaskPool<T> {\n         assert n_tasks >= 1;\n \n         let channels = do vec::from_fn(n_tasks) |i| {\n-            let (chan, port) = pipes::stream::<Msg<T>>();\n+            let (port, chan) = pipes::stream::<Msg<T>>();\n             let init_fn = init_fn_factory();\n \n             let task_body: ~fn() = |move port, move init_fn| {"}, {"sha": "5b6c5210dbffb6628a9a2c066db5fc07b87b8c37", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -55,8 +55,8 @@ fn server(requests: Port<request>, responses: pipes::Chan<uint>) {\n }\n \n fn run(args: &[~str]) {\n-    let (to_parent, from_child) = pipes::stream();\n-    let (to_child, from_parent) = pipes::stream();\n+    let (from_child, to_parent) = pipes::stream();\n+    let (from_parent, to_child) = pipes::stream();\n \n     let to_child = SharedChan(move to_child);\n "}, {"sha": "269d02ae45f339a94eac0de21d316c4932a1aa39", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -33,7 +33,7 @@ enum request {\n }\n \n fn server(requests: PortSet<request>, responses: pipes::Chan<uint>) {\n-    let mut count = 0u;\n+    let mut count = 0;\n     let mut done = false;\n     while !done {\n         match requests.try_recv() {\n@@ -51,8 +51,8 @@ fn server(requests: PortSet<request>, responses: pipes::Chan<uint>) {\n }\n \n fn run(args: &[~str]) {\n-    let (to_parent, from_child) = pipes::stream();\n-    let (to_child, from_parent_) = pipes::stream();\n+    let (from_child, to_parent) = pipes::stream();\n+    let (from_parent_, to_child) = pipes::stream();\n     let from_parent = PortSet();\n     from_parent.add(move from_parent_);\n \n@@ -62,7 +62,7 @@ fn run(args: &[~str]) {\n     let start = std::time::precise_time_s();\n     let mut worker_results = ~[];\n     for uint::range(0, workers) |_i| {\n-        let (to_child, from_parent_) = pipes::stream();\n+        let (from_parent_, to_child) = pipes::stream();\n         from_parent.add(move from_parent_);\n         do task::task().future_result(|+r| {\n             worker_results.push(move r);"}, {"sha": "83f9e77edc570841fa4b072e35949b0fbda52774", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -157,11 +157,11 @@ fn main() {\n         let sz = *sz;\n         let mut stream = None;\n         stream <-> streams[ii];\n-        let (to_parent_, from_child_) = option::unwrap(move stream);\n+        let (from_child_, to_parent_) = option::unwrap(move stream);\n \n         from_child.push(move from_child_);\n \n-        let (to_child, from_parent) = pipes::stream();\n+        let (from_parent, to_child) = pipes::stream();\n \n         do task::spawn_with(move from_parent) |move to_parent_, from_parent| {\n             make_sequence_processor(sz, from_parent, to_parent_);"}, {"sha": "c5429086c431426261ac68ba5e6836ef39e3cfb0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -50,7 +50,7 @@ fn fib(n: int) -> int {\n         }\n     }\n \n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     let _t = task::spawn(|move ch| pfib(ch, n) );\n     p.recv()\n }"}, {"sha": "3d886e561a7ecea8cfd52aad16a2e6b1f90b09c0", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -43,7 +43,7 @@ fn main() {\n         copy args\n     };\n \n-    let (c,p) = pipes::stream();\n+    let (p,c) = pipes::stream();\n     child_generation(uint::from_str(args[1]).get(), move c);\n     if p.try_recv().is_none() {\n         fail ~\"it happened when we slumbered\";"}, {"sha": "a5cc7ea10d79f3a17458515a5a4ab7b60c818a6d", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let (c,p) = pipes::stream();\n+    let (p,c) = pipes::stream();\n     let x = Some(p);\n     c.send(false);\n     match move x {"}, {"sha": "5caf5e05ab6ca055ac4d6f2c2fa4b58234d1e5dc", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -11,15 +11,15 @@\n // xfail-fast\n \n fn main() {\n-    let (c,p) = pipes::stream();\n+    let (p,c) = pipes::stream();\n     do task::try |move c| {\n-        let (c2,p2) = pipes::stream();\n+        let (p2,c2) = pipes::stream();\n         do task::spawn |move p2| {\n             p2.recv();\n             error!(\"sibling fails\");\n             fail;\n         }   \n-        let (c3,p3) = pipes::stream();\n+        let (p3,c3) = pipes::stream();\n         c.send(move c3);\n         c2.send(());\n         error!(\"child blocks\");"}, {"sha": "817d4b9a375e8c217765908e3c7e303dd31cb3f6", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -13,19 +13,19 @@\n use pipes::{Select2, Selectable};\n \n fn main() {\n-    let (c,p) = pipes::stream();\n+    let (p,c) = pipes::stream();\n     do task::try |move c| {\n-        let (c2,p2) = pipes::stream();\n+        let (p2,c2) = pipes::stream();\n         do task::spawn |move p2| {\n             p2.recv();\n             error!(\"sibling fails\");\n             fail;\n         }   \n-        let (c3,p3) = pipes::stream();\n+        let (p3,c3) = pipes::stream();\n         c.send(move c3);\n         c2.send(());\n         error!(\"child blocks\");\n-        let (c, p) = pipes::stream();\n+        let (p, c) = pipes::stream();\n         (move p, move p3).select();\n         c.send(());\n     };  "}, {"sha": "a473d63181946100f0a61d4e91021c1bd5c79aba", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -28,7 +28,7 @@ fn test05_start(ch : Chan<int>) {\n }\n \n fn test05() {\n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n     task::spawn(|move ch| test05_start(ch) );\n     let mut value = po.recv();\n     log(error, value);"}, {"sha": "5188ec7b71b6c946a26f53a46ac411f4d31c36e7", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -14,7 +14,7 @@\n extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<~str>>) {\n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     c.send(move ch);\n \n     let mut a;\n@@ -28,7 +28,7 @@ fn start(c: pipes::Chan<pipes::Chan<~str>>) {\n }\n \n fn main() {\n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     let child = task::spawn(|move ch| start(ch) );\n \n     let c = p.recv();"}, {"sha": "8d0a8a425b03dc6518934dc7ddb32fb45319ba06", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -14,12 +14,12 @@\n extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<int>>) {\n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     c.send(move ch);\n }\n \n fn main() {\n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     let child = task::spawn(|move ch| start(ch) );\n     let c = p.recv();\n }"}, {"sha": "89097776b90b645920920258edbddf1716191fba", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -21,7 +21,7 @@ fn start(c: pipes::Chan<int>, start: int, number_of_messages: int) {\n \n fn main() {\n     debug!(\"Check that we don't deadlock.\");\n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     task::try(|move ch| start(ch, 0, 10) );\n     debug!(\"Joined task\");\n }"}, {"sha": "62415ca438d197671212202acf829f1c9b175983", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let mut i = 10;\n     while (i > 0) {\n         log(debug, i);\n-        let (ch, p) = pipes::stream();\n+        let (p, ch) = pipes::stream();\n         po.add(move p);\n         task::spawn(|move ch, copy i| child(i, ch) );\n         i = i - 1;"}, {"sha": "d8a537f2c5c214e631bc06d391d04e4a18fb7bee", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n-    let (ch, p) = pipes::stream();\n+    let (p, ch) = pipes::stream();\n     task::spawn(|move ch| start(ch, 10));\n     p.recv();\n }"}, {"sha": "dcfc6fed207174662885431ef1ae3464e7a6d0b4", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -20,7 +20,7 @@ use pipes::Chan;\n fn test_rec() {\n     type r = {val0: int, val1: u8, val2: char};\n \n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n     let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n     ch.send(r0);\n     let mut r1: r;\n@@ -31,7 +31,7 @@ fn test_rec() {\n }\n \n fn test_vec() {\n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n     let v0: ~[int] = ~[0, 1, 2];\n     ch.send(v0);\n     let v1 = po.recv();\n@@ -41,7 +41,7 @@ fn test_vec() {\n }\n \n fn test_str() {\n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n     let s0 = ~\"test\";\n     ch.send(s0);\n     let s1 = po.recv();\n@@ -85,7 +85,7 @@ impl t : cmp::Eq {\n }\n \n fn test_tag() {\n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n     ch.send(tag1);\n     ch.send(tag2(10));\n     ch.send(tag3(10, 11u8, 'A'));\n@@ -99,8 +99,8 @@ fn test_tag() {\n }\n \n fn test_chan() {\n-    let (ch, po) = pipes::stream();\n-    let (ch0, po0) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n+    let (po0, ch0) = pipes::stream();\n     ch.send(move ch0);\n     let ch1 = po.recv();\n     // Does the transmitted channel still work?"}, {"sha": "3f42b4d5b57f89240e4c436f3b5a11a7bc4c8a20", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -16,7 +16,7 @@ fn main() { test00(); }\n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let (c, p) = pipes::stream();\n+    let (p, c) = pipes::stream();\n     c.send(1);\n     c.send(2);\n     c.send(3);"}, {"sha": "dbf43df4069bce8c548487b9560edf5a8580759c", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -15,7 +15,7 @@ fn main() { test00(); }\n fn test00() {\n     let r: int = 0;\n     let mut sum: int = 0;\n-    let (c, p) = pipes::stream();\n+    let (p, c) = pipes::stream();\n     let number_of_messages: int = 1000;\n     let mut i: int = 0;\n     while i < number_of_messages { c.send(i + 0); i += 1; }"}, {"sha": "e5bcba59ea2cdbec23d9d74fb2cf540f2fab8075", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec658eb694f40c429eb69d07dce541e9b877667/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=4ec658eb694f40c429eb69d07dce541e9b877667", "patch": "@@ -15,7 +15,7 @@ use pipes::{Port, Chan};\n   message.\n  */\n fn main() {\n-    let (ch, po) = pipes::stream();\n+    let (po, ch) = pipes::stream();\n     ch.send(42);\n     let r = po.recv();\n     log(error, r);"}]}