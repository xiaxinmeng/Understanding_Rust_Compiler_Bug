{"sha": "1c7d5f513cc583413a717fa14c2a394c182d69d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjN2Q1ZjUxM2NjNTgzNDEzYTcxN2ZhMTRjMmEzOTRjMTgyZDY5ZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-22T13:04:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-22T13:04:30Z"}, "message": "Merge #5481\n\n5481: Track document versions in the server r=kjeremy a=kjeremy\n\nThis also pushes diagnostics for the correct file version on close so that when it is reopened stale diagnostics are not shown.\r\n\r\nCloses #5452 \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "82baf4c0467509dd52c873ea47fb26e1d482ea8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82baf4c0467509dd52c873ea47fb26e1d482ea8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7d5f513cc583413a717fa14c2a394c182d69d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGDlfCRBK7hj4Ov3rIwAAdHIIADf9E4V4PfWCYELsdDKg+gjg\n0PIE/xkLA156sROciEzh3UCqo3WljDvB5B/1xOC4uL7EqGJzz4Izm8rr+MAW3QiO\nT6bj289PjurbWDHPDQFL5yhTtVzi6YPr49rPoclYmyOyy4lVwPk09gwtT37OLf0w\n796+oikvQPnB7OgdMJYVKsQtr56U3rWvteWPgPOrWFP8pmN0V5i0OtD/m6pbEZIG\nSJwFTcVLkky3tYLRWRwHs7TGSgITG38o49sjXwMn0J26prv3u5hn79wmvg0pCfzp\nKSyI23N0N0QZgBCimeYibKVlcLFnHepSyAzXTEL0UwbG5xz4YmYSV5vX1l3nGuk=\n=lwVI\n-----END PGP SIGNATURE-----\n", "payload": "tree 82baf4c0467509dd52c873ea47fb26e1d482ea8f\nparent dba534a103dc9fb374bc313ac96d54d331cbd54a\nparent 4f4582a6ad263d8c9051c75a3a38ecfe41695316\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595423070 +0000\ncommitter GitHub <noreply@github.com> 1595423070 +0000\n\nMerge #5481\n\n5481: Track document versions in the server r=kjeremy a=kjeremy\n\nThis also pushes diagnostics for the correct file version on close so that when it is reopened stale diagnostics are not shown.\r\n\r\nCloses #5452 \n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d5f513cc583413a717fa14c2a394c182d69d6", "html_url": "https://github.com/rust-lang/rust/commit/1c7d5f513cc583413a717fa14c2a394c182d69d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d5f513cc583413a717fa14c2a394c182d69d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dba534a103dc9fb374bc313ac96d54d331cbd54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba534a103dc9fb374bc313ac96d54d331cbd54a", "html_url": "https://github.com/rust-lang/rust/commit/dba534a103dc9fb374bc313ac96d54d331cbd54a"}, {"sha": "4f4582a6ad263d8c9051c75a3a38ecfe41695316", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4582a6ad263d8c9051c75a3a38ecfe41695316", "html_url": "https://github.com/rust-lang/rust/commit/4f4582a6ad263d8c9051c75a3a38ecfe41695316"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "80937dbc4ddb06835d583b847bf014110934bc9e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d5f513cc583413a717fa14c2a394c182d69d6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d5f513cc583413a717fa14c2a394c182d69d6/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=1c7d5f513cc583413a717fa14c2a394c182d69d6", "patch": "@@ -12,7 +12,7 @@ use parking_lot::RwLock;\n use ra_db::{CrateId, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     config::Config,\n@@ -69,7 +69,7 @@ pub(crate) struct GlobalState {\n     pub(crate) config: Config,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n-    pub(crate) mem_docs: FxHashSet<VfsPath>,\n+    pub(crate) mem_docs: FxHashMap<VfsPath, Option<i64>>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) status: Status,\n     pub(crate) source_root_config: SourceRootConfig,\n@@ -84,6 +84,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) analysis: Analysis,\n     pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n+    mem_docs: FxHashMap<VfsPath, Option<i64>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n@@ -117,7 +118,7 @@ impl GlobalState {\n             config,\n             analysis_host,\n             diagnostics: Default::default(),\n-            mem_docs: FxHashSet::default(),\n+            mem_docs: FxHashMap::default(),\n             vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n             status: Status::default(),\n             source_root_config: SourceRootConfig::default(),\n@@ -183,6 +184,7 @@ impl GlobalState {\n             vfs: Arc::clone(&self.vfs),\n             latest_requests: Arc::clone(&self.latest_requests),\n             check_fixes: Arc::clone(&self.diagnostics.check_fixes),\n+            mem_docs: self.mem_docs.clone(),\n         }\n     }\n \n@@ -255,6 +257,11 @@ impl GlobalStateSnapshot {\n         self.vfs.read().1[&id]\n     }\n \n+    pub(crate) fn url_file_version(&self, url: &Url) -> Option<i64> {\n+        let path = from_proto::vfs_path(&url).ok()?;\n+        self.mem_docs.get(&path).copied()?\n+    }\n+\n     pub(crate) fn anchored_path(&self, file_id: FileId, path: &str) -> Url {\n         let mut base = self.vfs.read().0.file_path(file_id);\n         base.pop();"}, {"sha": "f6d8daeed17cecfb0007608548d71d8f07e99cb3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d5f513cc583413a717fa14c2a394c182d69d6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d5f513cc583413a717fa14c2a394c182d69d6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1c7d5f513cc583413a717fa14c2a394c182d69d6", "patch": "@@ -210,7 +210,7 @@ impl GlobalState {\n                             let vfs = &mut self.vfs.write().0;\n                             for (path, contents) in files {\n                                 let path = VfsPath::from(path);\n-                                if !self.mem_docs.contains(&path) {\n+                                if !self.mem_docs.contains_key(&path) {\n                                     vfs.set_file_contents(path, contents)\n                                 }\n                             }\n@@ -299,7 +299,7 @@ impl GlobalState {\n         if self.status == Status::Ready && (state_changed || prev_status == Status::Loading) {\n             let subscriptions = self\n                 .mem_docs\n-                .iter()\n+                .keys()\n                 .map(|path| self.vfs.read().0.file_id(&path).unwrap())\n                 .collect::<Vec<_>>();\n \n@@ -310,8 +310,12 @@ impl GlobalState {\n             for file_id in diagnostic_changes {\n                 let url = file_id_to_url(&self.vfs.read().0, file_id);\n                 let diagnostics = self.diagnostics.diagnostics_for(file_id).cloned().collect();\n+                let version = from_proto::vfs_path(&url)\n+                    .map(|path| self.mem_docs.get(&path).copied().flatten())\n+                    .unwrap_or_default();\n+\n                 self.send_notification::<lsp_types::notification::PublishDiagnostics>(\n-                    lsp_types::PublishDiagnosticsParams { uri: url, diagnostics, version: None },\n+                    lsp_types::PublishDiagnosticsParams { uri: url, diagnostics, version },\n                 );\n             }\n         }\n@@ -400,7 +404,11 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidOpenTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    if !this.mem_docs.insert(path.clone()) {\n+                    if this\n+                        .mem_docs\n+                        .insert(path.clone(), Some(params.text_document.version))\n+                        .is_some()\n+                    {\n                         log::error!(\"duplicate DidOpenTextDocument: {}\", path)\n                     }\n                     this.vfs\n@@ -412,29 +420,38 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidChangeTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    assert!(this.mem_docs.contains(&path));\n+                    *this.mem_docs.get_mut(&path).unwrap() = params.text_document.version;\n                     let vfs = &mut this.vfs.write().0;\n                     let file_id = vfs.file_id(&path).unwrap();\n                     let mut text = String::from_utf8(vfs.file_contents(file_id).to_vec()).unwrap();\n                     apply_document_changes(&mut text, params.content_changes);\n-                    vfs.set_file_contents(path, Some(text.into_bytes()))\n+                    vfs.set_file_contents(path.clone(), Some(text.into_bytes()));\n+\n+                    this.mem_docs.insert(path, params.text_document.version);\n                 }\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidCloseTextDocument>(|this, params| {\n+                let mut version = None;\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    if !this.mem_docs.remove(&path) {\n-                        log::error!(\"orphan DidCloseTextDocument: {}\", path)\n+                    match this.mem_docs.remove(&path) {\n+                        Some(entry) => version = entry,\n+                        None => log::error!(\"orphan DidCloseTextDocument: {}\", path),\n                     }\n+\n                     if let Some(path) = path.as_path() {\n                         this.loader.handle.invalidate(path.to_path_buf());\n                     }\n                 }\n+\n+                // Clear the diagnostics for the previously known version of the file.\n+                // This prevents stale \"cargo check\" diagnostics if the file is\n+                // closed, \"cargo check\" is run and then the file is reopened.\n                 this.send_notification::<lsp_types::notification::PublishDiagnostics>(\n                     lsp_types::PublishDiagnosticsParams {\n                         uri: params.text_document.uri,\n                         diagnostics: Vec::new(),\n-                        version: None,\n+                        version,\n                     },\n                 );\n                 Ok(())"}, {"sha": "c6935c029bb5a9d2e55379a609572e309a45e147", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d5f513cc583413a717fa14c2a394c182d69d6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d5f513cc583413a717fa14c2a394c182d69d6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1c7d5f513cc583413a717fa14c2a394c182d69d6", "patch": "@@ -480,9 +480,10 @@ pub(crate) fn url_from_abs_path(path: &Path) -> lsp_types::Url {\n pub(crate) fn versioned_text_document_identifier(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n-    version: Option<i64>,\n ) -> lsp_types::VersionedTextDocumentIdentifier {\n-    lsp_types::VersionedTextDocumentIdentifier { uri: url(snap, file_id), version }\n+    let url = url(snap, file_id);\n+    let version = snap.url_file_version(&url);\n+    lsp_types::VersionedTextDocumentIdentifier { uri: url, version }\n }\n \n pub(crate) fn location(\n@@ -571,7 +572,7 @@ pub(crate) fn snippet_text_document_edit(\n     is_snippet: bool,\n     source_file_edit: SourceFileEdit,\n ) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n-    let text_document = versioned_text_document_identifier(snap, source_file_edit.file_id, None);\n+    let text_document = versioned_text_document_identifier(snap, source_file_edit.file_id);\n     let line_index = snap.analysis.file_line_index(source_file_edit.file_id)?;\n     let line_endings = snap.file_line_endings(source_file_edit.file_id);\n     let edits = source_file_edit"}]}