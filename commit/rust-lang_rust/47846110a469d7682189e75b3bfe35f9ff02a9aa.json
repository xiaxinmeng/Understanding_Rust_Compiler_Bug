{"sha": "47846110a469d7682189e75b3bfe35f9ff02a9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ODQ2MTEwYTQ2OWQ3NjgyMTg5ZTc1YjNiZmUzNWY5ZmYwMmE5YWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-23T00:36:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:37Z"}, "message": "librustc: Fully de-`@mut` `trait_impls` in the type context", "tree": {"sha": "12494a36889e893f188d1f1c4eca1d031115d482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12494a36889e893f188d1f1c4eca1d031115d482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47846110a469d7682189e75b3bfe35f9ff02a9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47846110a469d7682189e75b3bfe35f9ff02a9aa", "html_url": "https://github.com/rust-lang/rust/commit/47846110a469d7682189e75b3bfe35f9ff02a9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47846110a469d7682189e75b3bfe35f9ff02a9aa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fecef74d57307eb1ecbb4351ef644e04aafb6f9a", "html_url": "https://github.com/rust-lang/rust/commit/fecef74d57307eb1ecbb4351ef644e04aafb6f9a"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "961431ca11df81cd12fe81ce390bd30ea2fc9a33", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=47846110a469d7682189e75b3bfe35f9ff02a9aa", "patch": "@@ -903,7 +903,8 @@ fn encode_extension_implementations(ecx: &EncodeContext,\n     match trait_impls.get().find(&trait_def_id) {\n         None => {}\n         Some(&implementations) => {\n-            for implementation in implementations.iter() {\n+            let implementations = implementations.borrow();\n+            for implementation in implementations.get().iter() {\n                 ebml_w.start_tag(tag_items_data_item_extension_impl);\n                 encode_def_id(ebml_w, implementation.did);\n                 ebml_w.end_tag();"}, {"sha": "12e7439744b5ed212f3945a7244cda2f40f640cb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=47846110a469d7682189e75b3bfe35f9ff02a9aa", "patch": "@@ -333,7 +333,7 @@ struct ctxt_ {\n     destructors: RefCell<HashSet<ast::DefId>>,\n \n     // Maps a trait onto a list of impls of that trait.\n-    trait_impls: RefCell<HashMap<ast::DefId, @mut ~[@Impl]>>,\n+    trait_impls: RefCell<HashMap<ast::DefId, @RefCell<~[@Impl]>>>,\n \n     // Maps a def_id of a type to a list of its inherent impls.\n     // Contains implementations of methods that are inherent to a type.\n@@ -4507,15 +4507,16 @@ fn record_trait_implementation(tcx: ctxt,\n     let mut trait_impls = tcx.trait_impls.borrow_mut();\n     match trait_impls.get().find(&trait_def_id) {\n         None => {\n-            implementation_list = @mut ~[];\n+            implementation_list = @RefCell::new(~[]);\n             trait_impls.get().insert(trait_def_id, implementation_list);\n         }\n         Some(&existing_implementation_list) => {\n             implementation_list = existing_implementation_list\n         }\n     }\n \n-    implementation_list.push(implementation);\n+    let mut implementation_list = implementation_list.borrow_mut();\n+    implementation_list.get().push(implementation);\n }\n \n /// Populates the type context with all the implementations for the given type"}, {"sha": "7fc2798c7aa6c99b5ae9124cafc61a5f06bc6b56", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=47846110a469d7682189e75b3bfe35f9ff02a9aa", "patch": "@@ -357,7 +357,8 @@ impl<'a> LookupContext<'a> {\n                 let trait_impls = self.tcx().trait_impls.borrow();\n                 let opt_impl_infos = trait_impls.get().find(trait_did);\n                 for impl_infos in opt_impl_infos.iter() {\n-                    for impl_info in impl_infos.iter() {\n+                    let impl_infos = impl_infos.borrow();\n+                    for impl_info in impl_infos.get().iter() {\n                         let mut extension_candidates =\n                             self.extension_candidates.borrow_mut();\n                         self.push_candidates_from_impl("}, {"sha": "212c37f4ed115836ad29693a41986d25e76027c3", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=47846110a469d7682189e75b3bfe35f9ff02a9aa", "patch": "@@ -24,6 +24,7 @@ use middle::subst::Subst;\n use util::common::indenter;\n use util::ppaux;\n \n+use std::cell::RefCell;\n use std::hashmap::HashSet;\n use std::result;\n use syntax::ast;\n@@ -333,10 +334,11 @@ fn search_for_vtable(vcx: &VtableContext,\n         let trait_impls = tcx.trait_impls.borrow();\n         trait_impls.get()\n                    .find(&trait_ref.def_id)\n-                   .map_default(@mut ~[], |x| *x)\n+                   .map_default(@RefCell::new(~[]), |x| *x)\n     };\n     // impls is the list of all impls in scope for trait_ref.\n-    for im in impls.iter() {\n+    let impls = impls.borrow();\n+    for im in impls.get().iter() {\n         // im is one specific impl of trait_ref.\n \n         // First, ensure we haven't processed this impl yet."}, {"sha": "d3cd6465edf20cc96f05071c5d31eb575c58db18", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47846110a469d7682189e75b3bfe35f9ff02a9aa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=47846110a469d7682189e75b3bfe35f9ff02a9aa", "patch": "@@ -412,15 +412,16 @@ impl CoherenceChecker {\n         let mut trait_impls = tcx.trait_impls.borrow_mut();\n         match trait_impls.get().find(&base_def_id) {\n             None => {\n-                implementation_list = @mut ~[];\n+                implementation_list = @RefCell::new(~[]);\n                 trait_impls.get().insert(base_def_id, implementation_list);\n             }\n             Some(&existing_implementation_list) => {\n                 implementation_list = existing_implementation_list;\n             }\n         }\n \n-        implementation_list.push(implementation);\n+        let mut implementation_list = implementation_list.borrow_mut();\n+        implementation_list.get().push(implementation);\n     }\n \n     pub fn check_implementation_coherence(&self) {\n@@ -467,7 +468,8 @@ impl CoherenceChecker {\n         let trait_impls = self.crate_context.tcx.trait_impls.borrow();\n         match trait_impls.get().find(&trait_def_id) {\n             Some(impls) => {\n-                for &im in impls.iter() {\n+                let impls = impls.borrow();\n+                for &im in impls.get().iter() {\n                     f(im);\n                 }\n             }\n@@ -708,7 +710,8 @@ impl CoherenceChecker {\n             Some(found_impls) => impls = found_impls\n         }\n \n-        for impl_info in impls.iter() {\n+        let impls = impls.borrow();\n+        for impl_info in impls.get().iter() {\n             if impl_info.methods.len() < 1 {\n                 // We'll error out later. For now, just don't ICE.\n                 continue;"}]}