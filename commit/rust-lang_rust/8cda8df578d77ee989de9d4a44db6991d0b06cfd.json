{"sha": "8cda8df578d77ee989de9d4a44db6991d0b06cfd", "node_id": "C_kwDOAAsO6NoAKDhjZGE4ZGY1NzhkNzdlZTk4OWRlOWQ0YTQ0ZGI2OTkxZDBiMDZjZmQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:00:52Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T07:00:52Z"}, "message": "memchr hack", "tree": {"sha": "292a2a5706ee8ea2d3996cd92de9bf5815458cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/292a2a5706ee8ea2d3996cd92de9bf5815458cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cda8df578d77ee989de9d4a44db6991d0b06cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cda8df578d77ee989de9d4a44db6991d0b06cfd", "html_url": "https://github.com/rust-lang/rust/commit/8cda8df578d77ee989de9d4a44db6991d0b06cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cda8df578d77ee989de9d4a44db6991d0b06cfd/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76dbe2910465072f85e74d6f7115ec9e6803e8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/76dbe2910465072f85e74d6f7115ec9e6803e8bf", "html_url": "https://github.com/rust-lang/rust/commit/76dbe2910465072f85e74d6f7115ec9e6803e8bf"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "8ceca7f9185c6cbb079f091296f6f5325dc81502", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8cda8df578d77ee989de9d4a44db6991d0b06cfd/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cda8df578d77ee989de9d4a44db6991d0b06cfd/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=8cda8df578d77ee989de9d4a44db6991d0b06cfd", "patch": "@@ -83,8 +83,11 @@ const fn memchr_aligned(x: u8, text: &[u8]) -> Option<usize> {\n     let mut offset = ptr.align_offset(USIZE_BYTES);\n \n     if offset > 0 {\n-        offset = cmp::min(offset, len);\n-        if let Some(index) = memchr_naive(x, &text[..offset]) {\n+        // FIXME(const-hack, fee1-dead): replace with min\n+        offset = if offset < len { offset } else { len };\n+        // FIXME(const-hack, fee1-dead): replace with range slicing\n+        let slice = unsafe { super::from_raw_parts(text.as_ptr(), offset) };\n+        if let Some(index) = memchr_naive(x, slice) {\n             return Some(index);\n         }\n     }\n@@ -110,7 +113,9 @@ const fn memchr_aligned(x: u8, text: &[u8]) -> Option<usize> {\n \n     // Find the byte after the point the body loop stopped.\n     // FIXME(const-hack): Use `?` instead.\n-    if let Some(i) = memchr_naive(x, &text[offset..]) { Some(offset + i) } else { None }\n+    // FIXME(const-hack, fee1-dead): use range slicing\n+    let slice = unsafe { super::from_raw_parts(text.as_ptr().add(offset), text.len() - offset) };\n+    if let Some(i) = memchr_naive(x, slice) { Some(offset + i) } else { None }\n }\n \n /// Returns the last index matching the byte `x` in `text`."}]}