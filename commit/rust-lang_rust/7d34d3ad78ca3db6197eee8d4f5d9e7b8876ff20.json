{"sha": "7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "node_id": "C_kwDOAAsO6NoAKDdkMzRkM2FkNzhjYTNkYjYxOTdlZWU4ZDRmNWQ5ZTdiODg3NmZmMjA", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-07T16:57:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-07T16:57:58Z"}, "message": "Sync from rust c5c94945096265b6d675b2f55a247c4799de8d87", "tree": {"sha": "47841dc58d6a25b68c2f2abb57fe6a8e5a5e50fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47841dc58d6a25b68c2f2abb57fe6a8e5a5e50fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "html_url": "https://github.com/rust-lang/rust/commit/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7f02072b64712e5322ea70675135cb1e20bf80", "url": "https://api.github.com/repos/rust-lang/rust/commits/df7f02072b64712e5322ea70675135cb1e20bf80", "html_url": "https://github.com/rust-lang/rust/commit/df7f02072b64712e5322ea70675135cb1e20bf80"}, {"sha": "e05ad7f8199f0da52892d96f37c72581f1f56e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05ad7f8199f0da52892d96f37c72581f1f56e87", "html_url": "https://github.com/rust-lang/rust/commit/e05ad7f8199f0da52892d96f37c72581f1f56e87"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "41d82b581cd8cc07111c7f5b6a6f491a178dc801", "filename": "scripts/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/scripts%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/scripts%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.rs?ref=7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "patch": "@@ -42,7 +42,7 @@ fn main() {\n                 \"RUSTFLAGS\",\n                 env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n             );\n-            std::array::IntoIter::new([\"rustc\".to_string()])\n+            IntoIterator::into_iter([\"rustc\".to_string()])\n                 .chain(env::args().skip(2))\n                 .chain([\n                     \"--\".to_string(),\n@@ -56,7 +56,7 @@ fn main() {\n                 \"RUSTFLAGS\",\n                 env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + \" -Cprefer-dynamic\",\n             );\n-            std::array::IntoIter::new([\"rustc\".to_string()])\n+            IntoIterator::into_iter([\"rustc\".to_string()])\n                 .chain(env::args().skip(2))\n                 .chain([\n                     \"--\".to_string(),"}, {"sha": "c01ed24990428f3d8bb8f4206ba0c51e58dd5605", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "patch": "@@ -71,7 +71,7 @@ fn cast_target_to_abi_params(cast: CastTarget) -> SmallVec<[AbiParam; 2]> {\n         .prefix\n         .iter()\n         .flatten()\n-        .map(|&kind| reg_to_abi_param(Reg { kind, size: cast.prefix_chunk_size }))\n+        .map(|&reg| reg_to_abi_param(reg))\n         .chain((0..rest_count).map(|_| reg_to_abi_param(cast.rest.unit)))\n         .collect::<SmallVec<_>>();\n "}, {"sha": "f3dd2bf6a3ce48e9caed84fac48d270493ea1478", "filename": "src/base.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7d34d3ad78ca3db6197eee8d4f5d9e7b8876ff20", "patch": "@@ -1,6 +1,7 @@\n //! Codegen of a single function\n \n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n+use rustc_ast::InlineAsmOptions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n@@ -236,7 +237,8 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             fx.add_comment(inst, terminator_head);\n         }\n \n-        fx.set_debug_loc(bb_data.terminator().source_info);\n+        let source_info = bb_data.terminator().source_info;\n+        fx.set_debug_loc(source_info);\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n@@ -292,19 +294,19 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         let len = codegen_operand(fx, len).load_scalar(fx);\n                         let index = codegen_operand(fx, index).load_scalar(fx);\n                         let location = fx\n-                            .get_caller_location(bb_data.terminator().source_info.span)\n+                            .get_caller_location(source_info.span)\n                             .load_scalar(fx);\n \n                         codegen_panic_inner(\n                             fx,\n                             rustc_hir::LangItem::PanicBoundsCheck,\n                             &[index, len, location],\n-                            bb_data.terminator().source_info.span,\n+                            source_info.span,\n                         );\n                     }\n                     _ => {\n                         let msg_str = msg.description();\n-                        codegen_panic(fx, msg_str, bb_data.terminator().source_info.span);\n+                        codegen_panic(fx, msg_str, source_info.span);\n                     }\n                 }\n             }\n@@ -375,10 +377,18 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                 options,\n                 destination,\n                 line_spans: _,\n+                cleanup: _,\n             } => {\n+                if options.contains(InlineAsmOptions::MAY_UNWIND) {\n+                    fx.tcx.sess.span_fatal(\n+                        source_info.span,\n+                        \"cranelift doesn't support unwinding from inline assembly.\",\n+                    );\n+                }\n+\n                 crate::inline_asm::codegen_inline_asm(\n                     fx,\n-                    bb_data.terminator().source_info.span,\n+                    source_info.span,\n                     template,\n                     operands,\n                     *options,\n@@ -412,7 +422,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             }\n             TerminatorKind::Drop { place, target, unwind: _ } => {\n                 let drop_place = codegen_place(fx, *place);\n-                crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n+                crate::abi::codegen_drop(fx, source_info.span, drop_place);\n \n                 let target_block = fx.get_block(*target);\n                 fx.bcx.ins().jump(target_block, &[]);"}]}