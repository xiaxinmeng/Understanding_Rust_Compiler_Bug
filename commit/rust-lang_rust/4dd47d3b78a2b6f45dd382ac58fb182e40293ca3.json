{"sha": "4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDQ3ZDNiNzhhMmI2ZjQ1ZGQzODJhYzU4ZmIxODJlNDAyOTNjYTM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-04-19T17:17:31Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-04-19T17:17:31Z"}, "message": "Fix ICE for broken or-pattern in async fn", "tree": {"sha": "ed8d8003fad5b785a7491440cd52aef32b624db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8d8003fad5b785a7491440cd52aef32b624db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "html_url": "https://github.com/rust-lang/rust/commit/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e52b1e82472e4890202082a0482b178f9d6a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e52b1e82472e4890202082a0482b178f9d6a16", "html_url": "https://github.com/rust-lang/rust/commit/a0e52b1e82472e4890202082a0482b178f9d6a16"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "fd69da8e24bfc52a6c691fd5f5ee93cafad48bd9", "filename": "src/librustc_mir_build/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fblock.rs?ref=4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }));\n \n                         debug!(\"ast_block_stmts: pattern={:?}\", pattern);\n-                        this.visit_bindings(\n+                        this.visit_primary_bindings(\n                             &pattern,\n                             UserTypeProjections::none(),\n                             &mut |this, _, _, _, node, span, _, _| {"}, {"sha": "715122e314c978841ac959a50bf4c4c3fca44395", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "patch": "@@ -511,7 +511,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         opt_match_place: Option<(Option<&Place<'tcx>>, Span)>,\n     ) -> Option<SourceScope> {\n         debug!(\"declare_bindings: pattern={:?}\", pattern);\n-        self.visit_bindings(\n+        self.visit_primary_bindings(\n             &pattern,\n             UserTypeProjections::none(),\n             &mut |this, mutability, name, mode, var, span, ty, user_ty| {\n@@ -563,7 +563,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.schedule_drop(span, region_scope, local_id, DropKind::Value);\n     }\n \n-    pub(super) fn visit_bindings(\n+    /// Visit all of the primary bindings in a patterns, that is, visit the\n+    /// leftmost occurrence of each variable bound in a pattern. A variable\n+    /// will occur more than once in an or-pattern.\n+    pub(super) fn visit_primary_bindings(\n         &mut self,\n         pattern: &Pat<'tcx>,\n         pattern_user_ty: UserTypeProjections,\n@@ -578,12 +581,26 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             UserTypeProjections,\n         ),\n     ) {\n-        debug!(\"visit_bindings: pattern={:?} pattern_user_ty={:?}\", pattern, pattern_user_ty);\n+        debug!(\n+            \"visit_primary_bindings: pattern={:?} pattern_user_ty={:?}\",\n+            pattern, pattern_user_ty\n+        );\n         match *pattern.kind {\n-            PatKind::Binding { mutability, name, mode, var, ty, ref subpattern, .. } => {\n-                f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty.clone());\n+            PatKind::Binding {\n+                mutability,\n+                name,\n+                mode,\n+                var,\n+                ty,\n+                ref subpattern,\n+                is_primary,\n+                ..\n+            } => {\n+                if is_primary {\n+                    f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty.clone());\n+                }\n                 if let Some(subpattern) = subpattern.as_ref() {\n-                    self.visit_bindings(subpattern, pattern_user_ty, f);\n+                    self.visit_primary_bindings(subpattern, pattern_user_ty, f);\n                 }\n             }\n \n@@ -592,20 +609,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let from = u32::try_from(prefix.len()).unwrap();\n                 let to = u32::try_from(suffix.len()).unwrap();\n                 for subpattern in prefix {\n-                    self.visit_bindings(subpattern, pattern_user_ty.clone().index(), f);\n+                    self.visit_primary_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n                 for subpattern in slice {\n-                    self.visit_bindings(subpattern, pattern_user_ty.clone().subslice(from, to), f);\n+                    self.visit_primary_bindings(\n+                        subpattern,\n+                        pattern_user_ty.clone().subslice(from, to),\n+                        f,\n+                    );\n                 }\n                 for subpattern in suffix {\n-                    self.visit_bindings(subpattern, pattern_user_ty.clone().index(), f);\n+                    self.visit_primary_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n             }\n \n             PatKind::Constant { .. } | PatKind::Range { .. } | PatKind::Wild => {}\n \n             PatKind::Deref { ref subpattern } => {\n-                self.visit_bindings(subpattern, pattern_user_ty.deref(), f);\n+                self.visit_primary_bindings(subpattern, pattern_user_ty.deref(), f);\n             }\n \n             PatKind::AscribeUserType {\n@@ -630,26 +651,32 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     projs: Vec::new(),\n                 };\n                 let subpattern_user_ty = pattern_user_ty.push_projection(&projection, user_ty_span);\n-                self.visit_bindings(subpattern, subpattern_user_ty, f)\n+                self.visit_primary_bindings(subpattern, subpattern_user_ty, f)\n             }\n \n             PatKind::Leaf { ref subpatterns } => {\n                 for subpattern in subpatterns {\n                     let subpattern_user_ty = pattern_user_ty.clone().leaf(subpattern.field);\n-                    debug!(\"visit_bindings: subpattern_user_ty={:?}\", subpattern_user_ty);\n-                    self.visit_bindings(&subpattern.pattern, subpattern_user_ty, f);\n+                    debug!(\"visit_primary_bindings: subpattern_user_ty={:?}\", subpattern_user_ty);\n+                    self.visit_primary_bindings(&subpattern.pattern, subpattern_user_ty, f);\n                 }\n             }\n \n             PatKind::Variant { adt_def, substs: _, variant_index, ref subpatterns } => {\n                 for subpattern in subpatterns {\n                     let subpattern_user_ty =\n                         pattern_user_ty.clone().variant(adt_def, variant_index, subpattern.field);\n-                    self.visit_bindings(&subpattern.pattern, subpattern_user_ty, f);\n+                    self.visit_primary_bindings(&subpattern.pattern, subpattern_user_ty, f);\n                 }\n             }\n             PatKind::Or { ref pats } => {\n-                self.visit_bindings(&pats[0], pattern_user_ty, f);\n+                // In cases where we recover from errors the primary bindings\n+                // may not all be in the leftmost subpattern. For example in\n+                // `let (x | y) = ...`, the primary binding of `y` occurs in\n+                // the right subpattern\n+                for subpattern in pats {\n+                    self.visit_primary_bindings(subpattern, pattern_user_ty.clone(), f);\n+                }\n             }\n         }\n     }\n@@ -1953,7 +1980,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             is_block_tail: None,\n             local_info: LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                 binding_mode,\n-                // hypothetically, `visit_bindings` could try to unzip\n+                // hypothetically, `visit_primary_bindings` could try to unzip\n                 // an outermost hir::Ty as we descend, matching up\n                 // idents in pat; but complex w/ unclear UI payoff.\n                 // Instead, just abandon providing diagnostic info."}, {"sha": "09543cd1ce4e627ef31da05cd4448f08133414d6", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Ok(())\n             }\n \n-            PatKind::Binding { name, mutability, mode, var, ty, ref subpattern } => {\n+            PatKind::Binding { name, mutability, mode, var, ty, ref subpattern, is_primary: _ } => {\n                 candidate.bindings.push(Binding {\n                     name,\n                     mutability,"}, {"sha": "33393ffe83fcb1102aee199caaf8836643b38383", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "patch": "@@ -133,6 +133,9 @@ crate enum PatKind<'tcx> {\n         var: hir::HirId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pat<'tcx>>,\n+        /// Is this the leftmost occurance of the binding, i.e., is `var` the\n+        /// `HirId` of this pattern?\n+        is_primary: bool,\n     },\n \n     /// `Foo(...)` or `Foo{...}` or `Foo`, where `Foo` is a variant name from an ADT with\n@@ -601,6 +604,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     var: id,\n                     ty: var_ty,\n                     subpattern: self.lower_opt_pattern(sub),\n+                    is_primary: id == pat.hir_id,\n                 }\n             }\n \n@@ -964,14 +968,15 @@ impl<'tcx> PatternFoldable<'tcx> for PatKind<'tcx> {\n                     user_ty_span,\n                 },\n             },\n-            PatKind::Binding { mutability, name, mode, var, ty, ref subpattern } => {\n+            PatKind::Binding { mutability, name, mode, var, ty, ref subpattern, is_primary } => {\n                 PatKind::Binding {\n                     mutability: mutability.fold_with(folder),\n                     name: name.fold_with(folder),\n                     mode: mode.fold_with(folder),\n                     var: var.fold_with(folder),\n                     ty: ty.fold_with(folder),\n                     subpattern: subpattern.fold_with(folder),\n+                    is_primary,\n                 }\n             }\n             PatKind::Variant { adt_def, substs, variant_index, ref subpatterns } => {"}, {"sha": "5c5c68f81d1f2865937f3bae05a48dc74d67cb56", "filename": "src/test/ui/or-patterns/mismatched-bindings-async-fn.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.rs?ref=4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #71297\n+// edition:2018\n+\n+#![feature(or_patterns)]\n+\n+async fn a((x | s): String) {}\n+//~^ ERROR variable `x` is not bound in all patterns\n+//~| ERROR variable `s` is not bound in all patterns\n+\n+async fn b() {\n+    let x | s = String::new();\n+    //~^ ERROR variable `x` is not bound in all patterns\n+    //~| ERROR variable `s` is not bound in all patterns\n+}\n+\n+fn main() {}"}, {"sha": "b9c742664110e3d44586d1d5ac6a49422202937b", "filename": "src/test/ui/or-patterns/mismatched-bindings-async-fn.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dd47d3b78a2b6f45dd382ac58fb182e40293ca3/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmismatched-bindings-async-fn.stderr?ref=4dd47d3b78a2b6f45dd382ac58fb182e40293ca3", "patch": "@@ -0,0 +1,35 @@\n+error[E0408]: variable `x` is not bound in all patterns\n+  --> $DIR/mismatched-bindings-async-fn.rs:6:17\n+   |\n+LL | async fn a((x | s): String) {}\n+   |             -   ^ pattern doesn't bind `x`\n+   |             |\n+   |             variable not in all patterns\n+\n+error[E0408]: variable `s` is not bound in all patterns\n+  --> $DIR/mismatched-bindings-async-fn.rs:6:13\n+   |\n+LL | async fn a((x | s): String) {}\n+   |             ^   - variable not in all patterns\n+   |             |\n+   |             pattern doesn't bind `s`\n+\n+error[E0408]: variable `x` is not bound in all patterns\n+  --> $DIR/mismatched-bindings-async-fn.rs:11:13\n+   |\n+LL |     let x | s = String::new();\n+   |         -   ^ pattern doesn't bind `x`\n+   |         |\n+   |         variable not in all patterns\n+\n+error[E0408]: variable `s` is not bound in all patterns\n+  --> $DIR/mismatched-bindings-async-fn.rs:11:9\n+   |\n+LL |     let x | s = String::new();\n+   |         ^   - variable not in all patterns\n+   |         |\n+   |         pattern doesn't bind `s`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0408`."}]}