{"sha": "1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYTMwMjhkOGI3YWNiMGM5Nzg1OWVhNDM4ZjJiZWI0Y2NkMzY0Zjk=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-06-27T17:07:00Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-06-28T04:10:03Z"}, "message": "rt: Add task_local_data and related builtin calls (Closes #2680)", "tree": {"sha": "6fa4930844a1c0bd20f27b3347a1a905b81e4eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa4930844a1c0bd20f27b3347a1a905b81e4eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "html_url": "https://github.com/rust-lang/rust/commit/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e56ba156e223e24025a743247610283cca49b30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e56ba156e223e24025a743247610283cca49b30a", "html_url": "https://github.com/rust-lang/rust/commit/e56ba156e223e24025a743247610283cca49b30a"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "7ffaccece640497b4530066ff852a240982ecf3c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "patch": "@@ -914,7 +914,19 @@ rust_signal_cond_lock(rust_cond_lock *lock) {\n     }\n }\n \n-\n+// set/get/atexit task_local_data can run on the rust stack for speed.\n+extern \"C\" void *\n+rust_get_task_local_data(rust_task *task) {\n+    return task->task_local_data;\n+}\n+extern \"C\" void\n+rust_set_task_local_data(rust_task *task, void *data) {\n+    task->task_local_data = data;\n+}\n+extern \"C\" void\n+rust_task_local_data_atexit(rust_task *task, void (*cleanup_fn)(void *data)) {\n+    task->task_local_data_cleanup = cleanup_fn;\n+}\n \n //\n // Local Variables:"}, {"sha": "c899d9971970b2e5c6f7716a88cb0f69d7a581e4", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "patch": "@@ -31,6 +31,8 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     propagate_failure(true),\n     cc_counter(0),\n     total_stack_sz(0),\n+    task_local_data(NULL),\n+    task_local_data_cleanup(NULL),\n     state(state),\n     cond(NULL),\n     cond_name(\"none\"),\n@@ -115,6 +117,16 @@ cleanup_task(cleanup_args *args) {\n         }\n     }\n \n+    // Clean up TLS. This will only be set if TLS was used to begin with.\n+    // Because this is a crust function, it must be called from the C stack.\n+    if (task->task_local_data_cleanup != NULL) {\n+        // This assert should hold but it's not our job to ensure it (and\n+        // the condition might change). Handled in libcore/task.rs.\n+        // assert(task->task_local_data != NULL);\n+        task->task_local_data_cleanup(task->task_local_data);\n+        task->task_local_data = NULL;\n+    }\n+\n     // FIXME (#2676): For performance we should do the annihilator\n     // instead of the cycle collector even under normal termination, but\n     // since that would hide memory management errors (like not derefing"}, {"sha": "8e6a53892ec964416ca15b1a6a3a60d119056e11", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "patch": "@@ -163,6 +163,10 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // The amount of stack we're using, excluding red zones\n     size_t total_stack_sz;\n \n+    // Used by rust task management routines in libcore/task.rs.\n+    void *task_local_data;\n+    void (*task_local_data_cleanup)(void *data);\n+\n private:\n \n     // Protects state, cond, cond_name\n@@ -375,6 +379,10 @@ rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n     // Too expensive to check\n     // assert(on_rust_stack());\n \n+    // The shim functions generated by rustc contain the morestack prologue, so\n+    // we need to let them know they have enough stack.\n+    record_sp_limit(0);\n+\n     uintptr_t prev_rust_sp = next_rust_sp;\n     next_rust_sp = get_sp();\n \n@@ -398,12 +406,19 @@ rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n     }\n \n     next_rust_sp = prev_rust_sp;\n+\n+    record_stack_limit();\n }\n \n inline void\n rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n     // Too expensive to check\n     // assert(!on_rust_stack());\n+\n+    // Because of the hack in the other function that disables the stack limit\n+    // when entering the C stack, here we restore the stack limit again.\n+    record_stack_limit();\n+\n     assert(get_sp_limit() != 0 && \"Stack must be configured\");\n     assert(next_rust_sp);\n \n@@ -427,6 +442,8 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n         scoped_lock with(kill_lock);\n         reentered_rust_stack = had_reentered_rust_stack;\n     }\n+\n+    record_sp_limit(0);\n }\n \n inline void"}, {"sha": "9ce225847932495632cb724b1c0587d37f597a7b", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "patch": "@@ -49,19 +49,12 @@ extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n     rust_task *task = rust_get_current_task();\n \n-    // FIXME (#1226) - The shim functions generated by rustc contain the\n-    // morestack prologue, so we need to let them know they have enough\n-    // stack.\n-    record_sp_limit(0);\n-\n     try {\n         task->call_on_c_stack(args, fn_ptr);\n     } catch (...) {\n         // Logging here is not reliable\n         assert(false && \"Foreign code threw an exception\");\n     }\n-\n-    task->record_stack_limit();\n }\n \n /*\n@@ -72,11 +65,6 @@ extern \"C\" CDECL void\n upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n     rust_task *task = rust_get_current_task();\n \n-    // FIXME (#2680): Because of the hack in the other function that disables\n-    // the stack limit when entering the C stack, here we restore the stack\n-    // limit again.\n-    task->record_stack_limit();\n-\n     try {\n         task->call_on_rust_stack(args, fn_ptr);\n     } catch (...) {\n@@ -85,9 +73,6 @@ upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n         // Logging here is not reliable\n         assert(false && \"Rust task failed after reentering the Rust stack\");\n     }\n-\n-    // FIXME (#2680): As above\n-    record_sp_limit(0);\n }\n \n /**********************************************************************/"}, {"sha": "78ee8e41944972356b69d4f82253cba53ea026b2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1ba3028d8b7acb0c97859ea438f2beb4ccd364f9/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=1ba3028d8b7acb0c97859ea438f2beb4ccd364f9", "patch": "@@ -167,3 +167,6 @@ rust_lock_cond_lock\n rust_unlock_cond_lock\n rust_wait_cond_lock\n rust_signal_cond_lock\n+rust_get_task_local_data\n+rust_set_task_local_data\n+rust_task_local_data_atexit"}]}