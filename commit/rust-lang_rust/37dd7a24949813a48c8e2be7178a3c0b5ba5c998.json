{"sha": "37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZGQ3YTI0OTQ5ODEzYTQ4YzhlMmJlNzE3OGEzYzBiNWJhNWM5OTg=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-06-01T21:06:23Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-06-02T04:21:50Z"}, "message": "book: some tiny improvements", "tree": {"sha": "a2302c1a91244a33282f377f837b899e8cec12ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2302c1a91244a33282f377f837b899e8cec12ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "html_url": "https://github.com/rust-lang/rust/commit/37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243e85f393a9e4527d814ecc9dfe23d2e3f9c737", "url": "https://api.github.com/repos/rust-lang/rust/commits/243e85f393a9e4527d814ecc9dfe23d2e3f9c737", "html_url": "https://github.com/rust-lang/rust/commit/243e85f393a9e4527d814ecc9dfe23d2e3f9c737"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4479fdb7baae5dcedf5f2f3c487b64550df0cd6e", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "patch": "@@ -33,8 +33,8 @@ let plus_two = |x| {\n assert_eq!(4, plus_two(2));\n ```\n \n-You\u2019ll notice a few things about closures that are a bit different than regular\n-functions defined with `fn`. The first of which is that we did not need to\n+You\u2019ll notice a few things about closures that are a bit different from regular\n+functions defined with `fn`. The first is that we did not need to\n annotate the types of arguments the closure takes or the values it returns. We\n can:\n \n@@ -48,18 +48,18 @@ But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic reas\n While specifying the full type for named functions is helpful with things like\n documentation and type inference, the types of closures are rarely documented\n since they\u2019re anonymous, and they don\u2019t cause the kinds of error-at-a-distance\n-that inferring named function types can.\n+problems that inferring named function types can.\n \n The second is that the syntax is similar, but a bit different. I\u2019ve added spaces\n-here to make them look a little closer:\n+here for easier comparison:\n \n ```rust\n fn  plus_one_v1   (x: i32) -> i32 { x + 1 }\n let plus_one_v2 = |x: i32| -> i32 { x + 1 };\n let plus_one_v3 = |x: i32|          x + 1  ;\n ```\n \n-Small differences, but they\u2019re similar in ways.\n+Small differences, but they\u2019re similar.\n \n # Closures and their environment\n \n@@ -99,7 +99,7 @@ note: previous borrow ends here\n fn main() {\n     let mut num = 5;\n     let plus_num = |x| x + num;\n-    \n+\n     let y = &mut num;\n }\n ^\n@@ -161,7 +161,7 @@ of `num`. So what\u2019s the difference?\n ```rust\n let mut num = 5;\n \n-{ \n+{\n     let mut add_num = |x: i32| num += x;\n \n     add_num(5);\n@@ -180,7 +180,7 @@ If we change to a `move` closure, it\u2019s different:\n ```rust\n let mut num = 5;\n \n-{ \n+{\n     let mut add_num = move |x: i32| num += x;\n \n     add_num(5);"}, {"sha": "3da29c9b817d2da9ce261b52d7329fb54b20aa46", "filename": "src/doc/trpl/trait-objects.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/src%2Fdoc%2Ftrpl%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/src%2Fdoc%2Ftrpl%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftrait-objects.md?ref=37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "patch": "@@ -261,7 +261,7 @@ static Foo_for_String_vtable: FooVtable = FooVtable {\n ```\n \n The `destructor` field in each vtable points to a function that will clean up\n-any resources of the vtable\u2019s type, for `u8` it is trivial, but for `String` it\n+any resources of the vtable\u2019s type: for `u8` it is trivial, but for `String` it\n will free the memory. This is necessary for owning trait objects like\n `Box<Foo>`, which need to clean-up both the `Box` allocation as well as the\n internal type when they go out of scope. The `size` and `align` fields store\n@@ -270,7 +270,7 @@ essentially unused at the moment since the information is embedded in the\n destructor, but will be used in the future, as trait objects are progressively\n made more flexible.\n \n-Suppose we\u2019ve got some values that implement `Foo`, then the explicit form of\n+Suppose we\u2019ve got some values that implement `Foo`. The explicit form of\n construction and use of `Foo` trait objects might look a bit like (ignoring the\n type mismatches: they\u2019re all just pointers anyway):\n "}, {"sha": "ae42b3af656dee1005b0e68516a6c5442f0f6dab", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/37dd7a24949813a48c8e2be7178a3c0b5ba5c998/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=37dd7a24949813a48c8e2be7178a3c0b5ba5c998", "patch": "@@ -45,7 +45,7 @@ but we don\u2019t define a body, just a type signature. When we `impl` a trait,\n we use `impl Trait for Item`, rather than just `impl Item`.\n \n We can use traits to constrain our generics. Consider this function, which\n-does not compile, and gives us a similar error:\n+does not compile:\n \n ```rust,ignore\n fn print_area<T>(shape: T) {\n@@ -212,8 +212,8 @@ This will compile without error.\n This means that even if someone does something bad like add methods to `i32`,\n it won\u2019t affect you, unless you `use` that trait.\n \n-There\u2019s one more restriction on implementing traits. Either the trait or the\n-type you\u2019re writing the `impl` for must be defined by you. So, we could\n+There\u2019s one more restriction on implementing traits: either the trait, or the\n+type you\u2019re writing the `impl` for, must be defined by you. So, we could\n implement the `HasArea` type for `i32`, because `HasArea` is in our code. But\n if we tried to implement `Float`, a trait provided by Rust, for `i32`, we could\n not, because neither the trait nor the type are in our code."}]}