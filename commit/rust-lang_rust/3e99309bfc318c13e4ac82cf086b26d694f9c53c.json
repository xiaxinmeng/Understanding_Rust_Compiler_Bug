{"sha": "3e99309bfc318c13e4ac82cf086b26d694f9c53c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTkzMDliZmMzMThjMTNlNGFjODJjZjA4NmIyNmQ2OTRmOWM1M2M=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-03T20:10:54Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-04T20:20:14Z"}, "message": "make any_pat! and u64_from_be_bytes_bench_impl! macros hygienic", "tree": {"sha": "7a8ead40402968cef5ae3d715c0d70633dadab7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a8ead40402968cef5ae3d715c0d70633dadab7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e99309bfc318c13e4ac82cf086b26d694f9c53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e99309bfc318c13e4ac82cf086b26d694f9c53c", "html_url": "https://github.com/rust-lang/rust/commit/3e99309bfc318c13e4ac82cf086b26d694f9c53c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e99309bfc318c13e4ac82cf086b26d694f9c53c/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba15c99f31f769bd015871202000e48c77066ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba15c99f31f769bd015871202000e48c77066ca", "html_url": "https://github.com/rust-lang/rust/commit/0ba15c99f31f769bd015871202000e48c77066ca"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "5b599a06925f6244f68b970161d92451e2be86b8", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e99309bfc318c13e4ac82cf086b26d694f9c53c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99309bfc318c13e4ac82cf086b26d694f9c53c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=3e99309bfc318c13e4ac82cf086b26d694f9c53c", "patch": "@@ -796,9 +796,9 @@ fn extract_vec_elems<'a>(\n // matches should fit that sort of pattern or NONE (however, some of the\n // matches may be wildcards like _ or identifiers).\n macro_rules! any_pat (\n-    ($m:expr, $pattern:pat) => (\n+    ($m:expr, $col:expr, $pattern:pat) => (\n         ($m).iter().any(|br| {\n-            match br.pats.get(col).node {\n+            match br.pats.get($col).node {\n                 $pattern => true,\n                 _ => false\n             }\n@@ -807,11 +807,11 @@ macro_rules! any_pat (\n )\n \n fn any_uniq_pat(m: &[Match], col: uint) -> bool {\n-    any_pat!(m, ast::PatBox(_))\n+    any_pat!(m, col, ast::PatBox(_))\n }\n \n fn any_region_pat(m: &[Match], col: uint) -> bool {\n-    any_pat!(m, ast::PatRegion(_))\n+    any_pat!(m, col, ast::PatRegion(_))\n }\n \n fn any_irrefutable_adt_pat(bcx: &Block, m: &[Match], col: uint) -> bool {"}, {"sha": "ca3eee01575fd3aca54bbddd85bb875925a0a69b", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e99309bfc318c13e4ac82cf086b26d694f9c53c/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99309bfc318c13e4ac82cf086b26d694f9c53c/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=3e99309bfc318c13e4ac82cf086b26d694f9c53c", "patch": "@@ -508,14 +508,15 @@ mod bench {\n     use prelude::*;\n     use self::test::Bencher;\n \n+    // why is this a macro? wouldn't an inlined function work just as well?\n     macro_rules! u64_from_be_bytes_bench_impl(\n-        ($size:expr, $stride:expr, $start_index:expr) =>\n+        ($b:expr, $size:expr, $stride:expr, $start_index:expr) =>\n         ({\n             use super::u64_from_be_bytes;\n \n             let data = Vec::from_fn($stride*100+$start_index, |i| i as u8);\n             let mut sum = 0u64;\n-            b.iter(|| {\n+            $b.iter(|| {\n                 let mut i = $start_index;\n                 while i < data.len() {\n                     sum += u64_from_be_bytes(data.as_slice(), i, $size);\n@@ -527,31 +528,31 @@ mod bench {\n \n     #[bench]\n     fn u64_from_be_bytes_4_aligned(b: &mut Bencher) {\n-        u64_from_be_bytes_bench_impl!(4, 4, 0);\n+        u64_from_be_bytes_bench_impl!(b, 4, 4, 0);\n     }\n \n     #[bench]\n     fn u64_from_be_bytes_4_unaligned(b: &mut Bencher) {\n-        u64_from_be_bytes_bench_impl!(4, 4, 1);\n+        u64_from_be_bytes_bench_impl!(b, 4, 4, 1);\n     }\n \n     #[bench]\n     fn u64_from_be_bytes_7_aligned(b: &mut Bencher) {\n-        u64_from_be_bytes_bench_impl!(7, 8, 0);\n+        u64_from_be_bytes_bench_impl!(b, 7, 8, 0);\n     }\n \n     #[bench]\n     fn u64_from_be_bytes_7_unaligned(b: &mut Bencher) {\n-        u64_from_be_bytes_bench_impl!(7, 8, 1);\n+        u64_from_be_bytes_bench_impl!(b, 7, 8, 1);\n     }\n \n     #[bench]\n     fn u64_from_be_bytes_8_aligned(b: &mut Bencher) {\n-        u64_from_be_bytes_bench_impl!(8, 8, 0);\n+        u64_from_be_bytes_bench_impl!(b, 8, 8, 0);\n     }\n \n     #[bench]\n     fn u64_from_be_bytes_8_unaligned(b: &mut Bencher) {\n-        u64_from_be_bytes_bench_impl!(8, 8, 1);\n+        u64_from_be_bytes_bench_impl!(b, 8, 8, 1);\n     }\n }"}]}