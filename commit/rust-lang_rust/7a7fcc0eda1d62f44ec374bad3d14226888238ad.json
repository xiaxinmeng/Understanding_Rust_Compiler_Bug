{"sha": "7a7fcc0eda1d62f44ec374bad3d14226888238ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2ZjYzBlZGExZDYyZjQ0ZWMzNzRiYWQzZDE0MjI2ODg4MjM4YWQ=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T05:14:06Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T15:59:43Z"}, "message": "extract condition for into_iter_on_ref to its own module", "tree": {"sha": "9eaec0e262c0da2f65e8120d3f759052da66e180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eaec0e262c0da2f65e8120d3f759052da66e180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7fcc0eda1d62f44ec374bad3d14226888238ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fcc0eda1d62f44ec374bad3d14226888238ad", "html_url": "https://github.com/rust-lang/rust/commit/7a7fcc0eda1d62f44ec374bad3d14226888238ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7fcc0eda1d62f44ec374bad3d14226888238ad/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38076995258ed7f1ebd270f2f32b1744c688e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38076995258ed7f1ebd270f2f32b1744c688e71", "html_url": "https://github.com/rust-lang/rust/commit/d38076995258ed7f1ebd270f2f32b1744c688e71"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "5d59fa86c9e8b6d77e1337fc2c4e675b4f6c05f9", "filename": "clippy_lints/src/methods/into_iter_on_ref.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7a7fcc0eda1d62f44ec374bad3d14226888238ad/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7fcc0eda1d62f44ec374bad3d14226888238ad/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs?ref=7a7fcc0eda1d62f44ec374bad3d14226888238ad", "patch": "@@ -1,32 +1,43 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::ty::has_iter_method;\n use clippy_utils::{match_trait_method, paths};\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n \n use super::INTO_ITER_ON_REF;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, self_ref_ty: Ty<'_>, method_span: Span) {\n-    if !match_trait_method(cx, expr, &paths::INTO_ITERATOR) {\n-        return;\n-    }\n-    if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n-        span_lint_and_sugg(\n-            cx,\n-            INTO_ITER_ON_REF,\n-            method_span,\n-            &format!(\n-                \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n-                method_name, kind,\n-            ),\n-            \"call directly\",\n-            method_name.to_string(),\n-            Applicability::MachineApplicable,\n-        );\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    method_span: Span,\n+    method_name: Symbol,\n+    args: &[hir::Expr<'_>],\n+) {\n+    let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n+    if_chain! {\n+        if let ty::Ref(..) = self_ty.kind();\n+        if method_name == sym::into_iter;\n+        if match_trait_method(cx, expr, &paths::INTO_ITERATOR);\n+        if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ty);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                INTO_ITER_ON_REF,\n+                method_span,\n+                &format!(\n+                    \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n+                    method_name, kind,\n+                ),\n+                \"call directly\",\n+                method_name.to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n     }\n }\n "}, {"sha": "e8cefbd74221cb09ba779750191da113f442db8b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a7fcc0eda1d62f44ec374bad3d14226888238ad/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7fcc0eda1d62f44ec374bad3d14226888238ad/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7a7fcc0eda1d62f44ec374bad3d14226888238ad", "patch": "@@ -1786,19 +1786,16 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n                 single_char_add_str::check(cx, expr, args);\n+                into_iter_on_ref::check(cx, expr, *method_span, method_call.ident.name, args);\n \n-                let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-                match self_ty.kind() {\n+                match cx.typeck_results().expr_ty_adjusted(&args[0]).kind() {\n                     ty::Ref(_, ty, _) if *ty.kind() == ty::Str => {\n                         for &(method, pos) in &PATTERN_METHODS {\n                             if method_call.ident.name.as_str() == method && args.len() > pos {\n                                 single_char_pattern::check(cx, expr, &args[pos]);\n                             }\n                         }\n                     },\n-                    ty::Ref(..) if method_call.ident.name == sym::into_iter => {\n-                        into_iter_on_ref::check(cx, expr, self_ty, *method_span);\n-                    },\n                     _ => (),\n                 }\n             },"}]}