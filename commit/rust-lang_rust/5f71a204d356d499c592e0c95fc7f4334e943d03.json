{"sha": "5f71a204d356d499c592e0c95fc7f4334e943d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzFhMjA0ZDM1NmQ0OTljNTkyZTBjOTVmYzdmNDMzNGU5NDNkMDM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T06:27:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:14:07Z"}, "message": "Remove vecs from std::getopts", "tree": {"sha": "cf872d915d86094968d7346e5e4bcb97ede99e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf872d915d86094968d7346e5e4bcb97ede99e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f71a204d356d499c592e0c95fc7f4334e943d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f71a204d356d499c592e0c95fc7f4334e943d03", "html_url": "https://github.com/rust-lang/rust/commit/5f71a204d356d499c592e0c95fc7f4334e943d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f71a204d356d499c592e0c95fc7f4334e943d03/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8840fab822b086c1ca6567a5fbb5e14d5b9a3b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8840fab822b086c1ca6567a5fbb5e14d5b9a3b0d", "html_url": "https://github.com/rust-lang/rust/commit/8840fab822b086c1ca6567a5fbb5e14d5b9a3b0d"}], "stats": {"total": 194, "additions": 87, "deletions": 107}, "files": [{"sha": "ba37ced579e5db7f1880c910e501c0e7b412b4d4", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=5f71a204d356d499c592e0c95fc7f4334e943d03", "patch": "@@ -334,7 +334,6 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n     let static = opt_present(match, \"static\");\n \n     let library_search_paths = ~[binary_dir + \"/lib\"];\n-    // FIXME: Remove this vec->ivec conversion.\n     let lsp_vec = getopts::opt_strs(match, \"L\");\n     for lsp: str  in lsp_vec { library_search_paths += ~[lsp]; }\n \n@@ -384,7 +383,7 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n           none. { get_default_sysroot(binary) }\n           some(s) { s }\n         };\n-    let cfg = parse_cfgspecs(getopts::opt_strs_ivec(match, \"cfg\"));\n+    let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let dps = opt_present(match, \"dps\");\n     let do_gc = opt_present(match, \"gc\");\n@@ -447,7 +446,7 @@ fn main(args: vec[str]) {\n     let binary = ivec::shift(args_ivec);\n     let binary_dir = fs::dirname(binary);\n     let match =\n-        alt getopts::getopts_ivec(args_ivec, opts()) {\n+        alt getopts::getopts(args_ivec, opts()) {\n           getopts::success(m) { m }\n           getopts::failure(f) {\n             log_err #fmt(\"error: %s\", getopts::fail_str(f));\n@@ -464,7 +463,7 @@ fn main(args: vec[str]) {\n     }\n     let sopts = build_session_options(binary, match, binary_dir);\n     let sess = build_session(sopts);\n-    let n_inputs = vec::len[str](match.free);\n+    let n_inputs = ivec::len[str](match.free);\n     let output_file = getopts::opt_maybe_str(match, \"o\");\n     let glue = opt_present(match, \"glue\");\n     if glue {\n@@ -652,7 +651,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test() {\n         let match =\n-            alt getopts::getopts_ivec(~[\"--test\"], opts()) {\n+            alt getopts::getopts(~[\"--test\"], opts()) {\n               getopts::success(m) { m }\n             };\n         let sessopts = build_session_options(\"whatever\", match, \"whatever\");\n@@ -666,7 +665,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n         let match =\n-            alt getopts::getopts_ivec(~[\"--test\", \"--cfg=test\"], opts()) {\n+            alt getopts::getopts(~[\"--test\", \"--cfg=test\"], opts()) {\n               getopts::success(m) { m }\n             };\n         let sessopts = build_session_options(\"whatever\", match, \"whatever\");"}, {"sha": "57d680720ba5dcf278ee59d3a209e54217b39400", "filename": "src/lib/getopts.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Flib%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Flib%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgetopts.rs?ref=5f71a204d356d499c592e0c95fc7f4334e943d03", "patch": "@@ -17,7 +17,6 @@ export optflag;\n export optflagopt;\n export optmulti;\n export getopts;\n-export getopts_ivec;\n export result;\n export success;\n export failure;\n@@ -27,7 +26,6 @@ export fail_str;\n export opt_present;\n export opt_str;\n export opt_strs;\n-export opt_strs_ivec;\n export opt_maybe_str;\n export opt_default;\n \n@@ -67,7 +65,7 @@ fn optmulti(name: str) -> opt {\n \n tag optval { val(str); given; }\n \n-type match = {opts: [opt], vals: [mutable [optval]], free: vec[str]};\n+type match = {opts: [opt], vals: [mutable [optval]], free: [str]};\n \n fn is_arg(arg: str) -> bool {\n     ret str::byte_len(arg) > 1u && arg.(0) == '-' as u8;\n@@ -108,30 +106,21 @@ fn fail_str(f: fail_) -> str {\n \n tag result { success(match); failure(fail_); }\n \n-fn getopts(args: vec[str], opts: vec[opt]) -> result {\n-    // FIXME: Remove this vec->ivec conversion.\n-    let args_ivec = ~[];\n-    let opts_ivec = ~[];\n-    for arg: str  in args { args_ivec += ~[arg]; }\n-    for o: opt  in opts { opts_ivec += ~[o]; }\n-    ret getopts_ivec(args_ivec, opts_ivec);\n-}\n-\n-fn getopts_ivec(args: &[str], opts: &[opt]) -> result {\n+fn getopts(args: &[str], opts: &[opt]) -> result {\n     let n_opts = ivec::len[opt](opts);\n     fn f(x: uint) -> [optval] { ret ~[]; }\n     let vals = ivec::init_fn_mut[[optval]](f, n_opts);\n-    let free: vec[str] = [];\n+    let free: [str] = ~[];\n     let l = ivec::len[str](args);\n     let i = 0u;\n     while i < l {\n         let cur = args.(i);\n         let curlen = str::byte_len(cur);\n         if !is_arg(cur) {\n-            free += [cur];\n+            free += ~[cur];\n         } else if (str::eq(cur, \"--\")) {\n             let j = i + 1u;\n-            while j < l { free += [args.(j)]; j += 1u; }\n+            while j < l { free += ~[args.(j)]; j += 1u; }\n             break;\n         } else {\n             let names;\n@@ -227,15 +216,7 @@ fn opt_str(m: &match, nm: str) -> str {\n     ret alt opt_val(m, nm) { val(s) { s } _ { fail } };\n }\n \n-fn opt_strs(m: &match, nm: str) -> vec[str] {\n-    let acc: vec[str] = [];\n-    for v: optval  in opt_vals(m, nm) {\n-        alt v { val(s) { acc += [s]; } _ { } }\n-    }\n-    ret acc;\n-}\n-\n-fn opt_strs_ivec(m: &match, nm: str) -> [str] {\n+fn opt_strs(m: &match, nm: str) -> [str] {\n     let acc: [str] = ~[];\n     for v: optval  in opt_vals(m, nm) {\n         alt v { val(s) { acc += ~[s]; } _ { } }"}, {"sha": "37589691610700a59fcc6bf31c5c9b1d69cd3937", "filename": "src/lib/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=5f71a204d356d499c592e0c95fc7f4334e943d03", "patch": "@@ -71,13 +71,13 @@ fn parse_opts(args: &[str]) : ivec::is_not_empty(args) -> opt_res {\n     let args_ = ivec::tail(args);\n     let opts = ~[getopts::optflag(\"ignored\")];\n     let match =\n-        alt getopts::getopts_ivec(args_, opts) {\n+        alt getopts::getopts(args_, opts) {\n           getopts::success(m) { m }\n           getopts::failure(f) { ret either::right(getopts::fail_str(f)) }\n         };\n \n     let filter =\n-        if vec::len(match.free) > 0u {\n+        if ivec::len(match.free) > 0u {\n             option::some(match.free.(0))\n         } else { option::none };\n "}, {"sha": "4e868b801d2988c8a5e38e7969a163436d3d956e", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=5f71a204d356d499c592e0c95fc7f4334e943d03", "patch": "@@ -52,7 +52,7 @@ fn parse_opts(argv: [str]) -> config {\n     let opt_args = ivec::slice(argv, 1u, ivec::len(argv));\n \n \n-    alt getopts::getopts_ivec(opt_args, opts) {\n+    alt getopts::getopts(opt_args, opts) {\n       getopts::success(m) { ret {stress: getopts::opt_present(m, \"stress\")} }\n       getopts::failure(_) { fail; }\n     }"}, {"sha": "0e831875cc88fbdc613b31800aec67b74144d357", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=5f71a204d356d499c592e0c95fc7f4334e943d03", "patch": "@@ -37,7 +37,7 @@ fn parse_config(args: &[str]) -> config {\n     check (ivec::is_not_empty(args));\n     let args_ = ivec::tail(args);\n     let match =\n-        alt getopts::getopts_ivec(args_, opts) {\n+        alt getopts::getopts(args_, opts) {\n           getopts::success(m) { m }\n           getopts::failure(f) { fail getopts::fail_str(f) }\n         };\n@@ -51,7 +51,7 @@ fn parse_config(args: &[str]) -> config {\n          mode: str_mode(getopts::opt_str(match, \"mode\")),\n          run_ignored: getopts::opt_present(match, \"ignored\"),\n          filter:\n-             if vec::len(match.free) > 0u {\n+             if ivec::len(match.free) > 0u {\n                  option::some(match.free.(0))\n              } else { option::none },\n          runtool: getopts::opt_maybe_str(match, \"runtool\"),"}, {"sha": "ee597b65169bd0e5eb6ef556b3e4efe3136f38af", "filename": "src/test/stdtest/getopts.rs", "status": "modified", "additions": 71, "deletions": 71, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Ftest%2Fstdtest%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f71a204d356d499c592e0c95fc7f4334e943d03/src%2Ftest%2Fstdtest%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fgetopts.rs?ref=5f71a204d356d499c592e0c95fc7f4334e943d03", "patch": "@@ -1,6 +1,6 @@\n \n use std;\n-import std::vec;\n+import std::ivec;\n import std::option;\n import opt = std::getopts;\n \n@@ -27,8 +27,8 @@ fn check_fail_type(f: opt::fail_, ft: fail_type) {\n // Tests for reqopt\n #[test]\n fn test_reqopt_long() {\n-    let args = [\"--test=20\"];\n-    let opts = [opt::reqopt(\"test\")];\n+    let args = ~[\"--test=20\"];\n+    let opts = ~[opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -41,8 +41,8 @@ fn test_reqopt_long() {\n \n #[test]\n fn test_reqopt_long_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::reqopt(\"test\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_missing); }\n@@ -52,8 +52,8 @@ fn test_reqopt_long_missing() {\n \n #[test]\n fn test_reqopt_long_no_arg() {\n-    let args = [\"--test\"];\n-    let opts = [opt::reqopt(\"test\")];\n+    let args = ~[\"--test\"];\n+    let opts = ~[opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, argument_missing); }\n@@ -63,8 +63,8 @@ fn test_reqopt_long_no_arg() {\n \n #[test]\n fn test_reqopt_long_multi() {\n-    let args = [\"--test=20\", \"--test=30\"];\n-    let opts = [opt::reqopt(\"test\")];\n+    let args = ~[\"--test=20\", \"--test=30\"];\n+    let opts = ~[opt::reqopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_duplicated); }\n@@ -74,8 +74,8 @@ fn test_reqopt_long_multi() {\n \n #[test]\n fn test_reqopt_short() {\n-    let args = [\"-t\", \"20\"];\n-    let opts = [opt::reqopt(\"t\")];\n+    let args = ~[\"-t\", \"20\"];\n+    let opts = ~[opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -88,8 +88,8 @@ fn test_reqopt_short() {\n \n #[test]\n fn test_reqopt_short_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::reqopt(\"t\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_missing); }\n@@ -99,8 +99,8 @@ fn test_reqopt_short_missing() {\n \n #[test]\n fn test_reqopt_short_no_arg() {\n-    let args = [\"-t\"];\n-    let opts = [opt::reqopt(\"t\")];\n+    let args = ~[\"-t\"];\n+    let opts = ~[opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, argument_missing); }\n@@ -110,8 +110,8 @@ fn test_reqopt_short_no_arg() {\n \n #[test]\n fn test_reqopt_short_multi() {\n-    let args = [\"-t\", \"20\", \"-t\", \"30\"];\n-    let opts = [opt::reqopt(\"t\")];\n+    let args = ~[\"-t\", \"20\", \"-t\", \"30\"];\n+    let opts = ~[opt::reqopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_duplicated); }\n@@ -123,8 +123,8 @@ fn test_reqopt_short_multi() {\n // Tests for optopt\n #[test]\n fn test_optopt_long() {\n-    let args = [\"--test=20\"];\n-    let opts = [opt::optopt(\"test\")];\n+    let args = ~[\"--test=20\"];\n+    let opts = ~[opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -137,8 +137,8 @@ fn test_optopt_long() {\n \n #[test]\n fn test_optopt_long_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::optopt(\"test\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (!opt::opt_present(m, \"test\")); }\n@@ -148,8 +148,8 @@ fn test_optopt_long_missing() {\n \n #[test]\n fn test_optopt_long_no_arg() {\n-    let args = [\"--test\"];\n-    let opts = [opt::optopt(\"test\")];\n+    let args = ~[\"--test\"];\n+    let opts = ~[opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, argument_missing); }\n@@ -159,8 +159,8 @@ fn test_optopt_long_no_arg() {\n \n #[test]\n fn test_optopt_long_multi() {\n-    let args = [\"--test=20\", \"--test=30\"];\n-    let opts = [opt::optopt(\"test\")];\n+    let args = ~[\"--test=20\", \"--test=30\"];\n+    let opts = ~[opt::optopt(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_duplicated); }\n@@ -170,8 +170,8 @@ fn test_optopt_long_multi() {\n \n #[test]\n fn test_optopt_short() {\n-    let args = [\"-t\", \"20\"];\n-    let opts = [opt::optopt(\"t\")];\n+    let args = ~[\"-t\", \"20\"];\n+    let opts = ~[opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -184,8 +184,8 @@ fn test_optopt_short() {\n \n #[test]\n fn test_optopt_short_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::optopt(\"t\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (!opt::opt_present(m, \"t\")); }\n@@ -195,8 +195,8 @@ fn test_optopt_short_missing() {\n \n #[test]\n fn test_optopt_short_no_arg() {\n-    let args = [\"-t\"];\n-    let opts = [opt::optopt(\"t\")];\n+    let args = ~[\"-t\"];\n+    let opts = ~[opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, argument_missing); }\n@@ -206,8 +206,8 @@ fn test_optopt_short_no_arg() {\n \n #[test]\n fn test_optopt_short_multi() {\n-    let args = [\"-t\", \"20\", \"-t\", \"30\"];\n-    let opts = [opt::optopt(\"t\")];\n+    let args = ~[\"-t\", \"20\", \"-t\", \"30\"];\n+    let opts = ~[opt::optopt(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_duplicated); }\n@@ -219,8 +219,8 @@ fn test_optopt_short_multi() {\n // Tests for optflag\n #[test]\n fn test_optflag_long() {\n-    let args = [\"--test\"];\n-    let opts = [opt::optflag(\"test\")];\n+    let args = ~[\"--test\"];\n+    let opts = ~[opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (opt::opt_present(m, \"test\")); }\n@@ -230,8 +230,8 @@ fn test_optflag_long() {\n \n #[test]\n fn test_optflag_long_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::optflag(\"test\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (!opt::opt_present(m, \"test\")); }\n@@ -241,8 +241,8 @@ fn test_optflag_long_missing() {\n \n #[test]\n fn test_optflag_long_arg() {\n-    let args = [\"--test=20\"];\n-    let opts = [opt::optflag(\"test\")];\n+    let args = ~[\"--test=20\"];\n+    let opts = ~[opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) {\n@@ -255,8 +255,8 @@ fn test_optflag_long_arg() {\n \n #[test]\n fn test_optflag_long_multi() {\n-    let args = [\"--test\", \"--test\"];\n-    let opts = [opt::optflag(\"test\")];\n+    let args = ~[\"--test\", \"--test\"];\n+    let opts = ~[opt::optflag(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_duplicated); }\n@@ -266,8 +266,8 @@ fn test_optflag_long_multi() {\n \n #[test]\n fn test_optflag_short() {\n-    let args = [\"-t\"];\n-    let opts = [opt::optflag(\"t\")];\n+    let args = ~[\"-t\"];\n+    let opts = ~[opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (opt::opt_present(m, \"t\")); }\n@@ -277,8 +277,8 @@ fn test_optflag_short() {\n \n #[test]\n fn test_optflag_short_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::optflag(\"t\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (!opt::opt_present(m, \"t\")); }\n@@ -288,8 +288,8 @@ fn test_optflag_short_missing() {\n \n #[test]\n fn test_optflag_short_arg() {\n-    let args = [\"-t\", \"20\"];\n-    let opts = [opt::optflag(\"t\")];\n+    let args = ~[\"-t\", \"20\"];\n+    let opts = ~[opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -303,8 +303,8 @@ fn test_optflag_short_arg() {\n \n #[test]\n fn test_optflag_short_multi() {\n-    let args = [\"-t\", \"-t\"];\n-    let opts = [opt::optflag(\"t\")];\n+    let args = ~[\"-t\", \"-t\"];\n+    let opts = ~[opt::optflag(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, option_duplicated); }\n@@ -316,8 +316,8 @@ fn test_optflag_short_multi() {\n // Tests for optmulti\n #[test]\n fn test_optmulti_long() {\n-    let args = [\"--test=20\"];\n-    let opts = [opt::optmulti(\"test\")];\n+    let args = ~[\"--test=20\"];\n+    let opts = ~[opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -330,8 +330,8 @@ fn test_optmulti_long() {\n \n #[test]\n fn test_optmulti_long_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::optmulti(\"test\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (!opt::opt_present(m, \"test\")); }\n@@ -341,8 +341,8 @@ fn test_optmulti_long_missing() {\n \n #[test]\n fn test_optmulti_long_no_arg() {\n-    let args = [\"--test\"];\n-    let opts = [opt::optmulti(\"test\")];\n+    let args = ~[\"--test\"];\n+    let opts = ~[opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, argument_missing); }\n@@ -352,8 +352,8 @@ fn test_optmulti_long_no_arg() {\n \n #[test]\n fn test_optmulti_long_multi() {\n-    let args = [\"--test=20\", \"--test=30\"];\n-    let opts = [opt::optmulti(\"test\")];\n+    let args = ~[\"--test=20\", \"--test=30\"];\n+    let opts = ~[opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -368,8 +368,8 @@ fn test_optmulti_long_multi() {\n \n #[test]\n fn test_optmulti_short() {\n-    let args = [\"-t\", \"20\"];\n-    let opts = [opt::optmulti(\"t\")];\n+    let args = ~[\"-t\", \"20\"];\n+    let opts = ~[opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -382,8 +382,8 @@ fn test_optmulti_short() {\n \n #[test]\n fn test_optmulti_short_missing() {\n-    let args = [\"blah\"];\n-    let opts = [opt::optmulti(\"t\")];\n+    let args = ~[\"blah\"];\n+    let opts = ~[opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) { assert (!opt::opt_present(m, \"t\")); }\n@@ -393,8 +393,8 @@ fn test_optmulti_short_missing() {\n \n #[test]\n fn test_optmulti_short_no_arg() {\n-    let args = [\"-t\"];\n-    let opts = [opt::optmulti(\"t\")];\n+    let args = ~[\"-t\"];\n+    let opts = ~[opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, argument_missing); }\n@@ -404,8 +404,8 @@ fn test_optmulti_short_no_arg() {\n \n #[test]\n fn test_optmulti_short_multi() {\n-    let args = [\"-t\", \"20\", \"-t\", \"30\"];\n-    let opts = [opt::optmulti(\"t\")];\n+    let args = ~[\"-t\", \"20\", \"-t\", \"30\"];\n+    let opts = ~[opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::success(m) {\n@@ -420,8 +420,8 @@ fn test_optmulti_short_multi() {\n \n #[test]\n fn test_unrecognized_option_long() {\n-    let args = [\"--untest\"];\n-    let opts = [opt::optmulti(\"t\")];\n+    let args = ~[\"--untest\"];\n+    let opts = ~[opt::optmulti(\"t\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, unrecognized_option); }\n@@ -431,8 +431,8 @@ fn test_unrecognized_option_long() {\n \n #[test]\n fn test_unrecognized_option_short() {\n-    let args = [\"-t\"];\n-    let opts = [opt::optmulti(\"test\")];\n+    let args = ~[\"-t\"];\n+    let opts = ~[opt::optmulti(\"test\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {\n       opt::failure(f) { check_fail_type(f, unrecognized_option); }\n@@ -443,10 +443,10 @@ fn test_unrecognized_option_short() {\n #[test]\n fn test_combined() {\n     let args =\n-        [\"prog\", \"free1\", \"-s\", \"20\", \"free2\", \"--flag\", \"--long=30\", \"-f\",\n+        ~[\"prog\", \"free1\", \"-s\", \"20\", \"free2\", \"--flag\", \"--long=30\", \"-f\",\n          \"-m\", \"40\", \"-m\", \"50\"];\n     let opts =\n-        [opt::optopt(\"s\"), opt::optflag(\"flag\"), opt::reqopt(\"long\"),\n+        ~[opt::optopt(\"s\"), opt::optflag(\"flag\"), opt::reqopt(\"long\"),\n          opt::optflag(\"f\"), opt::optmulti(\"m\"), opt::optopt(\"notpresent\")];\n     let rs = opt::getopts(args, opts);\n     alt rs {"}]}