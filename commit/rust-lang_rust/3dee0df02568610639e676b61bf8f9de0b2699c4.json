{"sha": "3dee0df02568610639e676b61bf8f9de0b2699c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZWUwZGYwMjU2ODYxMDYzOWU2NzZiNjFiZjhmOWRlMGIyNjk5YzQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-13T04:52:48Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-05-13T04:52:48Z"}, "message": "Rollup merge of #25224 - brson:stddoc, r=steveklabnik\n\nAttempted to organize them in a way more relevant to what newbies\r\nwould be interested in hearing.\r\n\r\nI am not satisfied by this at all, but by virtue of deleting old links alone I think it is an improvement.\r\n\r\nr? @steveklabnik", "tree": {"sha": "a3c4b9c717b648c37fcdc59cb07842b35cb90765", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c4b9c717b648c37fcdc59cb07842b35cb90765"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dee0df02568610639e676b61bf8f9de0b2699c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dee0df02568610639e676b61bf8f9de0b2699c4", "html_url": "https://github.com/rust-lang/rust/commit/3dee0df02568610639e676b61bf8f9de0b2699c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dee0df02568610639e676b61bf8f9de0b2699c4/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b30b86df6b34ba19e87e63402e43d9e81a64fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b30b86df6b34ba19e87e63402e43d9e81a64fb", "html_url": "https://github.com/rust-lang/rust/commit/c2b30b86df6b34ba19e87e63402e43d9e81a64fb"}, {"sha": "6ebba71a75986271e537ab4363f905787a0a222a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebba71a75986271e537ab4363f905787a0a222a", "html_url": "https://github.com/rust-lang/rust/commit/6ebba71a75986271e537ab4363f905787a0a222a"}], "stats": {"total": 103, "additions": 50, "deletions": 53}, "files": [{"sha": "c0d8d8eacf797f8702c27e1a97f89ea9682cfeb9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 48, "deletions": 51, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3dee0df02568610639e676b61bf8f9de0b2699c4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dee0df02568610639e676b61bf8f9de0b2699c4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3dee0df02568610639e676b61bf8f9de0b2699c4", "patch": "@@ -12,33 +12,36 @@\n //!\n //! The Rust Standard Library provides the essential runtime\n //! functionality for building portable Rust software.\n-//! It is linked to all Rust crates by default.\n //!\n-//! ## Intrinsic types and operations\n+//! The rust standard library is available to all rust crates by\n+//! default, just as if contained an `extern crate std` import at the\n+//! crate root. Therefore the standard library can be accessed in\n+//! `use` statements through the path `std`, as in `use std::thread`,\n+//! or in expressions through the absolute path `::std`, as in\n+//! `::std::thread::sleep_ms(100)`.\n //!\n-//! The [`ptr`](ptr/index.html) and [`mem`](mem/index.html)\n-//! modules deal with unsafe pointers and memory manipulation.\n-//! [`marker`](marker/index.html) defines the special built-in traits,\n-//! and [`raw`](raw/index.html) the runtime representation of Rust types.\n-//! These are some of the lowest-level building blocks in Rust.\n+//! Furthermore, the standard library defines [The Rust\n+//! Prelude](prelude/index.html), a small collection of items, mostly\n+//! traits, that are imported into and available in every module.\n //!\n-//! ## Math on primitive types and math traits\n+//! ## What is in the standard library\n //!\n-//! Although basic operations on primitive types are implemented\n-//! directly by the compiler, the standard library additionally\n-//! defines many common operations through traits defined in\n-//! mod [`num`](num/index.html).\n+//! The standard library is minimal, a set of battle-tested\n+//! core types and shared abstractions for the [broader Rust\n+//! ecosystem][https://crates.io] to build on.\n //!\n-//! ## Pervasive types\n+//! The [primitive types](#primitives), though not defined in the\n+//! standard library, are documented here, as are the predefined\n+//! [macros](#macros).\n //!\n-//! The [`option`](option/index.html) and [`result`](result/index.html)\n-//! modules define optional and error-handling types, `Option` and `Result`.\n-//! [`iter`](iter/index.html) defines Rust's iterator protocol\n-//! along with a wide variety of iterators.\n-//! [`Cell` and `RefCell`](cell/index.html) are for creating types that\n-//! manage their own mutability.\n+//! ## Containers and collections\n //!\n-//! ## Vectors, slices and strings\n+//! The [`option`](option/index.html) and\n+//! [`result`](result/index.html) modules define optional and\n+//! error-handling types, `Option` and `Result`. The\n+//! [`iter`](iter/index.html) module defines Rust's iterator trait,\n+//! [`Iterater`](iter/trait.Iterator.html), which works with the `for`\n+//! loop to access collections.\n //!\n //! The common container type, `Vec`, a growable vector backed by an array,\n //! lives in the [`vec`](vec/index.html) module. Contiguous, unsized regions\n@@ -56,42 +59,36 @@\n //! macro, and for converting from strings use the\n //! [`FromStr`](str/trait.FromStr.html) trait.\n //!\n-//! ## Platform abstractions\n+//! Data may be shared by placing it in a reference-counted box or the\n+//! [`Rc`][rc/index.html] type, and if further contained in a [`Cell`\n+//! or `RefCell`](cell/index.html), may be mutated as well as shared.\n+//! Likewise, in a concurrent setting it is common to pair an\n+//! atomically-reference-counted box, [`Arc`](sync/struct.Arc.html),\n+//! with a [`Mutex`](sync/struct.Mutex.html) to get the same effect.\n //!\n-//! Besides basic data types, the standard library is largely concerned\n-//! with abstracting over differences in common platforms, most notably\n-//! Windows and Unix derivatives. The [`os`](os/index.html) module\n-//! provides a number of basic functions for interacting with the\n-//! operating environment, including program arguments, environment\n-//! variables, and directory navigation. The [`path`](path/index.html)\n-//! module encapsulates the platform-specific rules for dealing\n-//! with file paths.\n-//!\n-//! `std` also includes the [`ffi`](ffi/index.html) module for interoperating\n-//! with the C language.\n-//!\n-//! ## Concurrency, I/O, and the runtime\n+//! The [`collections`](collections/index.html) module defines maps,\n+//! sets, linked lists and other typical collection types, including\n+//! the common [`HashMap`](collections/struct.HashMap.html).\n //!\n-//! The [`thread`](thread/index.html) module contains Rust's threading abstractions.\n-//! [`sync`](sync/index.html) contains further, primitive, shared memory types,\n-//! including [`atomic`](sync/atomic/index.html), and [`mpsc`](sync/mpsc/index.html),\n-//! which contains the channel types for message passing.\n+//! ## Platform abstractions and I/O\n //!\n-//! Common types of I/O, including files, TCP, UDP, pipes, Unix domain sockets, and\n-//! process spawning, are defined in the [`io`](io/index.html) module.\n-//!\n-//! Rust's I/O and concurrency depends on a small runtime interface\n-//! that lives, along with its support code, in mod [`rt`](rt/index.html).\n-//! While a notable part of the standard library's architecture, this\n-//! module is not intended for public use.\n+//! Besides basic data types, the standard library is largely concerned\n+//! with abstracting over differences in common platforms, most notably\n+//! Windows and Unix derivatives.\n //!\n-//! ## The Rust prelude and macros\n+//! Common types of I/O, including [files](fs/struct.File.html),\n+//! [TCP](net/struct.TcpStream.html),\n+//! [UDP](net/struct.UdpSocket.html), are defined in the\n+//! [`io`](io/index.html), [`fs`](fs/index.html), and\n+//! [`net`](net/index.html) modules.\n //!\n-//! Finally, the [`prelude`](prelude/index.html) defines a\n-//! common set of traits, types, and functions that are made available\n-//! to all code by default. [`macros`](macros/index.html) contains\n-//! all the standard macros, such as `assert!`, `panic!`, `println!`,\n-//! and `format!`, also available to all Rust code.\n+//! The [`thread`](thread/index.html) module contains Rust's threading\n+//! abstractions. [`sync`](sync/index.html) contains further\n+//! primitive shared memory types, including\n+//! [`atomic`](sync/atomic/index.html) and\n+//! [`mpsc`](sync/mpsc/index.html), which contains the channel types\n+//! for message passing.\n+\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"std\"]"}, {"sha": "156a3d428debd7f6ec2f046be90663c5982df7a3", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dee0df02568610639e676b61bf8f9de0b2699c4/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dee0df02568610639e676b61bf8f9de0b2699c4/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=3dee0df02568610639e676b61bf8f9de0b2699c4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The Rust prelude\n+//! The Rust Prelude\n //!\n //! Because `std` is required by most serious Rust software, it is\n //! imported at the topmost level of every crate by default, as if the"}, {"sha": "46c0103e0876495cf88f7903fdc2b1a6335327b5", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dee0df02568610639e676b61bf8f9de0b2699c4/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dee0df02568610639e676b61bf8f9de0b2699c4/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=3dee0df02568610639e676b61bf8f9de0b2699c4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The first version of the prelude of the standard library.\n+//! The first version of the prelude of The Rust Standard Library.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}