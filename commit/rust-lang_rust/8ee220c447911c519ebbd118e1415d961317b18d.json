{"sha": "8ee220c447911c519ebbd118e1415d961317b18d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZTIyMGM0NDc5MTFjNTE5ZWJiZDExOGUxNDE1ZDk2MTMxN2IxOGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-05T04:49:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:32:34Z"}, "message": "more reuse in block parsing & improve diagnostics.", "tree": {"sha": "850d17f0310f55ae1833d96ffb179f22c5e136c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850d17f0310f55ae1833d96ffb179f22c5e136c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ee220c447911c519ebbd118e1415d961317b18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee220c447911c519ebbd118e1415d961317b18d", "html_url": "https://github.com/rust-lang/rust/commit/8ee220c447911c519ebbd118e1415d961317b18d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ee220c447911c519ebbd118e1415d961317b18d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883e90dd81b207cc5d9e85c02f628432b7f8d65d", "url": "https://api.github.com/repos/rust-lang/rust/commits/883e90dd81b207cc5d9e85c02f628432b7f8d65d", "html_url": "https://github.com/rust-lang/rust/commit/883e90dd81b207cc5d9e85c02f628432b7f8d65d"}], "stats": {"total": 118, "additions": 98, "deletions": 20}, "files": [{"sha": "3fc6444168e24297b8e1118ad9e1b384d9100a60", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -535,6 +535,16 @@ impl Token {\n         false\n     }\n \n+    // Is the token an interpolated block (`$b:block`)?\n+    pub fn is_whole_block(&self) -> bool {\n+        if let Interpolated(ref nt) = self.kind {\n+            if let NtBlock(..) = **nt {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     /// Returns `true` if the token is either the `mut` or `const` keyword.\n     pub fn is_mutability(&self) -> bool {\n         self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)"}, {"sha": "b1c5eaf8973ab0ff9faee9533079faac284b34e9", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -1077,7 +1077,7 @@ impl<'a> Parser<'a> {\n             self.parse_for_expr(label, lo, attrs)\n         } else if self.eat_keyword(kw::Loop) {\n             self.parse_loop_expr(label, lo, attrs)\n-        } else if self.check(&token::OpenDelim(token::Brace)) {\n+        } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n             self.parse_block_expr(label, lo, BlockCheckMode::Default, attrs)\n         } else {\n             let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n@@ -1361,18 +1361,20 @@ impl<'a> Parser<'a> {\n         opt_label: Option<Label>,\n         lo: Span,\n         blk_mode: BlockCheckMode,\n-        outer_attrs: AttrVec,\n+        mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n         if let Some(label) = opt_label {\n             self.sess.gated_spans.gate(sym::label_break_value, label.ident.span);\n         }\n \n-        self.expect(&token::OpenDelim(token::Brace))?;\n-\n-        let mut attrs = outer_attrs;\n-        attrs.extend(self.parse_inner_attributes()?);\n+        if self.token.is_whole_block() {\n+            self.struct_span_err(self.token.span, \"cannot use a `block` macro fragment here\")\n+                .span_label(lo.to(self.token.span), \"the `block` fragment is within this context\")\n+                .emit();\n+        }\n \n-        let blk = self.parse_block_tail(lo, blk_mode)?;\n+        let (inner_attrs, blk) = self.parse_block_common(lo, blk_mode)?;\n+        attrs.extend(inner_attrs);\n         Ok(self.mk_expr(blk.span, ExprKind::Block(blk, opt_label), attrs))\n     }\n "}, {"sha": "f05b08c5b55e071556f475fae9e23aed73483748", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -240,13 +240,11 @@ impl<'a> Parser<'a> {\n     pub fn parse_block(&mut self) -> PResult<'a, P<Block>> {\n         maybe_whole!(self, NtBlock, |x| x);\n \n-        let lo = self.token.span;\n-\n         if !self.eat(&token::OpenDelim(token::Brace)) {\n             return self.error_block_no_opening_brace();\n         }\n \n-        self.parse_block_tail(lo, BlockCheckMode::Default)\n+        self.parse_block_tail(self.prev_token.span, BlockCheckMode::Default)\n     }\n \n     fn error_block_no_opening_brace<T>(&mut self) -> PResult<'a, T> {\n@@ -301,15 +299,22 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_inner_attrs_and_block(\n         &mut self,\n     ) -> PResult<'a, (Vec<Attribute>, P<Block>)> {\n-        maybe_whole!(self, NtBlock, |x| (Vec::new(), x));\n+        self.parse_block_common(self.token.span, BlockCheckMode::Default)\n+    }\n \n-        let lo = self.token.span;\n+    /// Parses a block. Inner attributes are allowed.\n+    pub(super) fn parse_block_common(\n+        &mut self,\n+        lo: Span,\n+        blk_mode: BlockCheckMode,\n+    ) -> PResult<'a, (Vec<Attribute>, P<Block>)> {\n+        maybe_whole!(self, NtBlock, |x| (Vec::new(), x));\n \n         if !self.eat(&token::OpenDelim(token::Brace)) {\n             return self.error_block_no_opening_brace();\n         }\n \n-        Ok((self.parse_inner_attributes()?, self.parse_block_tail(lo, BlockCheckMode::Default)?))\n+        Ok((self.parse_inner_attributes()?, self.parse_block_tail(lo, blk_mode)?))\n     }\n \n     /// Parses the rest of a block expression or function body."}, {"sha": "a2c75882be0ca3d76d19efb4f9edfb46a5ad08ba", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -2,7 +2,10 @@ error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:6:12\n    |\n LL |     unsafe 'b: {}\n-   |            ^^ expected `{`\n+   |            ^^----\n+   |            |\n+   |            expected `{`\n+   |            help: try placing this code inside a block: `{ 'b: {} }`\n \n error: expected `{`, found `'b`\n   --> $DIR/label_break_value_illegal_uses.rs:10:13"}, {"sha": "38d53a14bc0bc7e52419e6eb29e067ae3abacbdc", "filename": "src/test/ui/parser/bad-interpolated-block.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.rs?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -0,0 +1,15 @@\n+#![feature(label_break_value)]\n+\n+fn main() {}\n+\n+macro_rules! m {\n+    ($b:block) => {\n+        'lab: $b; //~ ERROR cannot use a `block` macro fragment here\n+        unsafe $b; //~ ERROR cannot use a `block` macro fragment here\n+        |x: u8| -> () $b; //~ ERROR cannot use a `block` macro fragment here\n+    }\n+}\n+\n+fn foo() {\n+    m!({});\n+}"}, {"sha": "2cbb6a13e74b9b192b790b05fe8bfc07d9e470da", "filename": "src/test/ui/parser/bad-interpolated-block.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -0,0 +1,39 @@\n+error: cannot use a `block` macro fragment here\n+  --> $DIR/bad-interpolated-block.rs:7:15\n+   |\n+LL |         'lab: $b;\n+   |         ------^^\n+   |         |\n+   |         the `block` fragment is within this context\n+...\n+LL |     m!({});\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: cannot use a `block` macro fragment here\n+  --> $DIR/bad-interpolated-block.rs:8:16\n+   |\n+LL |         unsafe $b;\n+   |         -------^^\n+   |         |\n+   |         the `block` fragment is within this context\n+...\n+LL |     m!({});\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: cannot use a `block` macro fragment here\n+  --> $DIR/bad-interpolated-block.rs:9:23\n+   |\n+LL |         |x: u8| -> () $b;\n+   |                       ^^ the `block` fragment is within this context\n+...\n+LL |     m!({});\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c6a08abeff4ba76d1094bddf8618a08c9f2e091d", "filename": "src/test/ui/parser/closure-return-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.rs?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let x = || -> i32 22;\n-    //~^ ERROR expected one of `!`, `(`, `+`, `::`, `<`, or `{`, found `22`\n+    //~^ ERROR expected `{`, found `22`\n }"}, {"sha": "7bf6202a72a2d450b648d45e1206fb9233739d55", "filename": "src/test/ui/parser/closure-return-syntax.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -1,8 +1,11 @@\n-error: expected one of `!`, `(`, `+`, `::`, `<`, or `{`, found `22`\n+error: expected `{`, found `22`\n   --> $DIR/closure-return-syntax.rs:5:23\n    |\n LL |     let x = || -> i32 22;\n-   |                       ^^ expected one of `!`, `(`, `+`, `::`, `<`, or `{`\n+   |                       ^^-\n+   |                       |\n+   |                       expected `{`\n+   |                       help: try placing this code inside a block: `{ 22; }`\n \n error: aborting due to previous error\n "}, {"sha": "895f33638f95aa0154beb2036b78494bf56ed9ea", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee220c447911c519ebbd118e1415d961317b18d/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr?ref=8ee220c447911c519ebbd118e1415d961317b18d", "patch": "@@ -1,10 +1,11 @@\n error: expected `{`, found `std`\n   --> $DIR/unsafe-block-without-braces.rs:3:9\n    |\n-LL |     unsafe //{\n-   |           - expected `{`\n LL |         std::mem::transmute::<f32, u32>(1.0);\n-   |         ^^^ unexpected token\n+   |         ^^^----------------------------------\n+   |         |\n+   |         expected `{`\n+   |         help: try placing this code inside a block: `{ std::mem::transmute::<f32, u32>(1.0); }`\n \n error: aborting due to previous error\n "}]}