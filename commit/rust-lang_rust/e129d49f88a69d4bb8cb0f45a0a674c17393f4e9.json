{"sha": "e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "node_id": "C_kwDOAAsO6NoAKGUxMjlkNDlmODhhNjlkNGJiOGNiMGY0NWEwYTY3NGMxNzM5M2Y0ZTk", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-31T02:58:27Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-31T03:44:02Z"}, "message": "Add #[must_use] to remaining std functions (A-N)", "tree": {"sha": "b04e94e7af3aa049512a2dbdaa8ae8ca0c1583ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b04e94e7af3aa049512a2dbdaa8ae8ca0c1583ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "html_url": "https://github.com/rust-lang/rust/commit/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e249ce6b2345587d6e11052779c86adbad626dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e249ce6b2345587d6e11052779c86adbad626dff", "html_url": "https://github.com/rust-lang/rust/commit/e249ce6b2345587d6e11052779c86adbad626dff"}], "stats": {"total": 82, "additions": 68, "deletions": 14}, "files": [{"sha": "0b86b4f30b959925834c25207fdb194ed434fda8", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -110,6 +110,7 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n+#[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n@@ -355,6 +356,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n+    #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n             Inner::Unsupported => BacktraceStatus::Unsupported,\n@@ -366,6 +368,7 @@ impl Backtrace {\n \n impl<'a> Backtrace {\n     /// Returns an iterator over the backtrace frames.\n+    #[must_use]\n     #[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n     pub fn frames(&'a self) -> &'a [BacktraceFrame] {\n         if let Inner::Captured(c) = &self.inner { &c.force().frames } else { &[] }"}, {"sha": "12246b5173d394058c21dba7ef05acf70e110900", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -1707,13 +1707,15 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Gets a reference to the key in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn key(&self) -> &K {\n         self.base.key()\n     }\n \n     /// Gets a mutable reference to the key in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn key_mut(&mut self) -> &mut K {\n         self.base.key_mut()\n@@ -1730,6 +1732,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n \n     /// Gets a reference to the value in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get(&self) -> &V {\n         self.base.get()\n@@ -1746,13 +1749,15 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n \n     /// Gets a mutable reference to the value in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_mut(&mut self) -> &mut V {\n         self.base.get_mut()\n     }\n \n     /// Gets a reference to the key and value in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_key_value(&mut self) -> (&K, &V) {\n         self.base.get_key_value()"}, {"sha": "c6af708f6cd0a99c9884dffd266475a067d89749", "filename": "library/std/src/env.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -113,6 +113,7 @@ pub struct VarsOs {\n /// ```\n ///\n /// [`env::vars_os()`]: vars_os\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n@@ -140,6 +141,7 @@ pub fn vars() -> Vars {\n ///     println!(\"{:?}: {:?}\", key, value);\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars_os() -> VarsOs {\n     VarsOs { inner: os_imp::env() }\n@@ -244,6 +246,7 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n     _var_os(key.as_ref())\n@@ -384,6 +387,7 @@ fn _remove_var(key: &OsStr) {\n /// documentation for more.\n ///\n /// [`env::split_paths()`]: split_paths\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -564,6 +568,7 @@ impl Error for JoinPathsError {\n     reason = \"This function's behavior is unexpected and probably not what you want. \\\n               Consider using a crate from crates.io instead.\"\n )]\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn home_dir() -> Option<PathBuf> {\n     os_imp::home_dir()\n@@ -603,6 +608,7 @@ pub fn home_dir() -> Option<PathBuf> {\n ///     println!(\"Temporary directory: {}\", dir.display());\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn temp_dir() -> PathBuf {\n     os_imp::temp_dir()\n@@ -690,6 +696,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// should not be relied upon for security purposes.\n ///\n /// [`env::args()`]: args\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -706,6 +713,7 @@ pub struct Args {\n /// should not be relied upon for security purposes.\n ///\n /// [`env::args_os()`]: args_os\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,"}, {"sha": "465bbae8631c519b591a7b33ddb0f496f9f9ec4b", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -1009,6 +1009,7 @@ impl NulError {\n     /// let nul_error = CString::new(\"foo bar\\0\").unwrap_err();\n     /// assert_eq!(nul_error.nul_position(), 7);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn nul_position(&self) -> usize {\n         self.0\n@@ -1107,6 +1108,7 @@ impl IntoStringError {\n     }\n \n     /// Access the underlying UTF-8 error that was the cause of this error.\n+    #[must_use]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn utf8_error(&self) -> Utf8Error {\n         self.error\n@@ -1456,6 +1458,7 @@ impl CStr {\n     /// let boxed = c_string.into_boxed_c_str();\n     /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").expect(\"CString::new failed\"));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {\n         let raw = Box::into_raw(self) as *mut [u8];"}, {"sha": "d3a3e5262f944d16d30449b7f806b9a740facb61", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -239,6 +239,7 @@ impl OsString {\n     /// assert!(os_string.capacity() >= 10);\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn capacity(&self) -> usize {\n         self.inner.capacity()\n@@ -707,6 +708,7 @@ impl OsStr {\n \n     /// Converts a <code>[Box]<[OsStr]></code> into an [`OsString`] without copying or allocating.\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     pub fn into_os_string(self: Box<OsStr>) -> OsString {\n         let boxed = unsafe { Box::from_raw(Box::into_raw(self) as *mut Slice) };\n         OsString { inner: Buf::from_box(boxed) }"}, {"sha": "b9979280010535c0339dcb68506b94a7ecefc175", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -374,6 +374,7 @@ impl File {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"with_options\", issue = \"65439\")]\n     pub fn with_options() -> OpenOptions {\n         OpenOptions::new()\n@@ -983,6 +984,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> FileType {\n         FileType(self.0.file_type())\n@@ -1100,6 +1102,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn permissions(&self) -> Permissions {\n         Permissions(self.0.perm())\n@@ -1247,6 +1250,7 @@ impl Permissions {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use = \"call `set_readonly` to modify the readonly flag\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn readonly(&self) -> bool {\n         self.0.readonly()\n@@ -1441,6 +1445,7 @@ impl DirEntry {\n     /// ```\n     ///\n     /// The exact text, of course, depends on what files you have in `.`.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn path(&self) -> PathBuf {\n         self.0.path()\n@@ -1536,6 +1541,7 @@ impl DirEntry {\n     ///     }\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_name(&self) -> OsString {\n         self.0.file_name()"}, {"sha": "3da28695b34bd951e9e3b84a1e5e28a3c99fbe8e", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -442,6 +442,7 @@ impl Error {\n     /// println!(\"last OS error: {:?}\", Error::last_os_error());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn last_os_error() -> Error {\n         Error::from_raw_os_error(sys::os::errno() as i32)\n@@ -509,6 +510,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n@@ -547,6 +549,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn get_ref(&self) -> Option<&(dyn error::Error + Send + Sync + 'static)> {\n         match self.repr {\n@@ -620,6 +623,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error + Send + Sync + 'static)> {\n         match self.repr {\n@@ -688,6 +692,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn kind(&self) -> ErrorKind {\n         match self.repr {"}, {"sha": "f421185c2c5dbcbc73f191c21c2e9950e5ca32b7", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -1310,6 +1310,7 @@ pub struct Initializer(bool);\n impl Initializer {\n     /// Returns a new `Initializer` which will zero out buffers.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[must_use]\n     #[inline]\n     pub fn zeroing() -> Initializer {\n         Initializer(true)\n@@ -1324,13 +1325,15 @@ impl Initializer {\n     /// the method accurately reflects the number of bytes that have been\n     /// written to the head of the buffer.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn nop() -> Initializer {\n         Initializer(false)\n     }\n \n     /// Indicates if a buffer should be initialized.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[must_use]\n     #[inline]\n     pub fn should_initialize(&self) -> bool {\n         self.0"}, {"sha": "f471693774c9f3cbb92ead7c0b6a1363fc14bc5a", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -301,6 +301,7 @@ pub struct StdinLock<'a> {\n ///     Ok(())\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n     static INSTANCE: SyncOnceCell<Mutex<BufReader<StdinRaw>>> = SyncOnceCell::new();\n@@ -673,6 +674,7 @@ static STDOUT: SyncOnceCell<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> = Sy\n ///     Ok(())\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n     Stdout {\n@@ -953,6 +955,7 @@ pub struct StderrLock<'a> {\n ///     Ok(())\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {\n     // Note that unlike `stdout()` we don't use `at_exit` here to register a"}, {"sha": "9cd7c5148499db87b228f260139b06f002100e0d", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -32,6 +32,7 @@ pub struct Empty;\n /// io::empty().read_to_string(&mut buffer).unwrap();\n /// assert!(buffer.is_empty());\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn empty() -> Empty {\n@@ -112,6 +113,7 @@ pub struct Repeat {\n /// io::repeat(0b101).read_exact(&mut buffer).unwrap();\n /// assert_eq!(buffer, [0b101, 0b101, 0b101]);\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn repeat(byte: u8) -> Repeat {\n@@ -192,6 +194,7 @@ pub struct Sink;\n /// let num_bytes = io::sink().write(&buffer).unwrap();\n /// assert_eq!(num_bytes, 5);\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn sink() -> Sink {"}, {"sha": "201cbf3f08d28aad58e73f59350867298114f66f", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -149,6 +149,7 @@ impl SocketAddr {\n     /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n     /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> IpAddr {\n@@ -189,6 +190,7 @@ impl SocketAddr {\n     /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n@@ -297,6 +299,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> &Ipv4Addr {\n@@ -331,6 +334,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n@@ -396,6 +400,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// assert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> &Ipv6Addr {\n@@ -428,6 +433,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n@@ -470,6 +476,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 10, 0);\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn flowinfo(&self) -> u32 {\n@@ -509,6 +516,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn scope_id(&self) -> u32 {"}, {"sha": "140647128a937d934b31d0c831c91f4593fce512", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -518,6 +518,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn octets(&self) -> [u8; 4] {\n         // This returns the order we want because s_addr is stored in big-endian.\n@@ -1284,6 +1285,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn segments(&self) -> [u16; 8] {\n         // All elements in `s6_addr` must be big endian.\n@@ -1594,6 +1596,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n@@ -1744,6 +1747,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr"}, {"sha": "5738862fb58b2c7f6d5dc41d5e7926ce9f223e21", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -90,6 +90,7 @@ pub struct TcpListener(net_imp::TcpListener);\n /// See its documentation for more.\n ///\n /// [`accept`]: TcpListener::accept\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Incoming<'a> {"}, {"sha": "fd7fc7fbd41b774dfc6ba266d2edd8f1d3825284", "filename": "src/test/ui/rust-2018/uniform-paths/redundant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -13,8 +13,8 @@ mod bar {\n }\n \n fn main() {\n-    io::stdout();\n-    self::std::io::stdout();\n-    foo::my_std::io::stdout();\n-    bar::std::io::stdout();\n+    let _ = io::stdout();\n+    let _ = self::std::io::stdout();\n+    let _ = foo::my_std::io::stdout();\n+    let _ = bar::std::io::stdout();\n }"}, {"sha": "dcf0eb646f3b0591a1df8b2cbb9dac1cfc46faa0", "filename": "src/test/ui/uniform-paths/basic-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fbasic-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fbasic-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fbasic-nested.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -44,10 +44,10 @@ mod bar {\n \n fn main() {\n     foo::Foo(());\n-    foo::std_io::stdout();\n+    let _ = foo::std_io::stdout();\n     foo::local_io(());\n-    io::stdout();\n-    bar::io::stdout();\n+    let _ = io::stdout();\n+    let _ = bar::io::stdout();\n     bar::std();\n     bar::std!();\n \n@@ -56,6 +56,6 @@ fn main() {\n         // scope is allowed, when both resolve to the same definition.\n         use std::io;\n         use io::stdout;\n-        stdout();\n+        let _ = stdout();\n     }\n }"}, {"sha": "ce611a7cacf38b887614240e2cfea8e076f86c5a", "filename": "src/test/ui/uniform-paths/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fbasic.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -20,14 +20,14 @@ use self::std::io as local_io;\n \n fn main() {\n     Foo(());\n-    std_io::stdout();\n+    let _ = std_io::stdout();\n     local_io(());\n \n     {\n         // Test that having `std_io` in a module scope and a non-module\n         // scope is allowed, when both resolve to the same definition.\n         use ::std::io as std_io;\n         use std_io::stdout;\n-        stdout();\n+        let _ = stdout();\n     }\n }"}, {"sha": "175ccd34e98d92116d433f23bc2e15ab2720b269", "filename": "src/test/ui/uniform-paths/macros-nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fmacros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fmacros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fmacros-nested.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -46,8 +46,8 @@ mod bar {\n \n fn main() {\n     foo::Foo(());\n-    foo::std_io::stdout();\n+    let _ = foo::std_io::stdout();\n     foo::local_io(());\n-    io::stdout();\n-    bar::io::stdout();\n+    let _ = io::stdout();\n+    let _ = bar::io::stdout();\n }"}, {"sha": "bf512b30560eb7ebd8cb1b2c1d99800d47a4325d", "filename": "src/test/ui/uniform-paths/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e129d49f88a69d4bb8cb0f45a0a674c17393f4e9/src%2Ftest%2Fui%2Funiform-paths%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fmacros.rs?ref=e129d49f88a69d4bb8cb0f45a0a674c17393f4e9", "patch": "@@ -31,6 +31,6 @@ m2!();\n \n fn main() {\n     Foo(());\n-    std_io::stdout();\n+    let _ = std_io::stdout();\n     local_io(());\n }"}]}