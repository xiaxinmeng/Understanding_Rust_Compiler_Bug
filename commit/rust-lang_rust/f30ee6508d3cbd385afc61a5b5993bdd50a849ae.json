{"sha": "f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMGVlNjUwOGQzY2JkMzg1YWZjNjFhNWI1OTkzYmRkNTBhODQ5YWU=", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-05-27T14:41:31Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-05-27T16:30:12Z"}, "message": "replace parent substs of associated types with inference vars in borrow check", "tree": {"sha": "3ac74e94b34d6a6c0220bb5b65c175ab7fe35c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac74e94b34d6a6c0220bb5b65c175ab7fe35c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "html_url": "https://github.com/rust-lang/rust/commit/f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1e3d3b74fa80ce14af6ec143f061897684582b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e3d3b74fa80ce14af6ec143f061897684582b", "html_url": "https://github.com/rust-lang/rust/commit/8d1e3d3b74fa80ce14af6ec143f061897684582b"}], "stats": {"total": 92, "additions": 44, "deletions": 48}, "files": [{"sha": "2aed6f8eb453dc6cc0c919e9d75fc7774bb0a0c9", "filename": "compiler/rustc_mir/src/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "patch": "@@ -235,6 +235,7 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n \n impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n     crate fn create(mut self) -> CreateResult<'tcx> {\n+        let tcx = self.infcx.tcx;\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -266,6 +267,9 @@ impl UniversalRegionRelationsBuilder<'cx, 'tcx> {\n                             .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n                         (self.infcx.tcx.ty_error(), None)\n                     });\n+                // We need to replace bound regions in the substs of associated types (parent substs, not GATs)\n+                // with inference vars, see issue #78450\n+                let ty = self.universal_regions.indices.fold_to_region_vids(tcx, ty);\n                 let constraints2 = self.add_implied_bounds(ty);\n                 normalized_inputs_and_output.push(ty);\n                 constraints1.into_iter().chain(constraints2)"}, {"sha": "a3845aedd4007243d2e67360d9c5ef95b5a8cde8", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "patch": "@@ -30,7 +30,7 @@ use crate::borrow_check::nll::ToRegionVid;\n \n #[derive(Debug)]\n pub struct UniversalRegions<'tcx> {\n-    indices: UniversalRegionIndices<'tcx>,\n+    pub(crate) indices: UniversalRegionIndices<'tcx>,\n \n     /// The vid assigned to `'static`\n     pub fr_static: RegionVid,\n@@ -162,7 +162,7 @@ impl<'tcx> DefiningTy<'tcx> {\n }\n \n #[derive(Debug)]\n-struct UniversalRegionIndices<'tcx> {\n+pub(crate) struct UniversalRegionIndices<'tcx> {\n     /// For those regions that may appear in the parameter environment\n     /// ('static and early-bound regions), we maintain a map from the\n     /// `ty::Region` to the internal `RegionVid` we are using. This is"}, {"sha": "967d4c3f0f7f96cc7a2003a5911385fed0849480", "filename": "src/test/ui/type-alias-impl-trait/associated-type-lifetime-ice.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e3d3b74fa80ce14af6ec143f061897684582b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e3d3b74fa80ce14af6ec143f061897684582b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs?ref=8d1e3d3b74fa80ce14af6ec143f061897684582b", "patch": "@@ -1,33 +0,0 @@\n-// failure-status: 101\n-// rustc-env:RUST_BACKTRACE=0\n-// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n-\n-// compile-flags: --crate-type=rlib\n-\n-// Regression test for https://github.com/rust-lang/rust/issues/78450\n-\n-#![feature(min_type_alias_impl_trait)]\n-#![no_std]\n-\n-pub trait AssociatedImpl {\n-    type ImplTrait;\n-\n-    fn f() -> Self::ImplTrait;\n-}\n-\n-struct S<T>(T);\n-\n-trait Associated {\n-    type A;\n-}\n-\n-// ICE\n-impl<'a, T: Associated<A = &'a ()>> AssociatedImpl for S<T> {\n-    type ImplTrait = impl core::fmt::Debug;\n-\n-    fn f() -> Self::ImplTrait {\n-    //~^ ERROR unexpected concrete region in borrowck: ReEarlyBound(0, 'a)\n-        ()\n-    }\n-}"}, {"sha": "64ab7b70b1a98d4681584ed747ee096af445e6a5", "filename": "src/test/ui/type-alias-impl-trait/associated-type-lifetime-ice.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e3d3b74fa80ce14af6ec143f061897684582b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e3d3b74fa80ce14af6ec143f061897684582b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.stderr?ref=8d1e3d3b74fa80ce14af6ec143f061897684582b", "patch": "@@ -1,13 +0,0 @@\n-error: internal compiler error: unexpected concrete region in borrowck: ReEarlyBound(0, 'a)\n-  --> $DIR/associated-type-lifetime-ice.rs:29:5\n-   |\n-LL | /     fn f() -> Self::ImplTrait {\n-LL | |\n-LL | |         ()\n-LL | |     }\n-   | |_____^\n-   |\n-   = error: internal compiler error: unexpected panic\n-\n-query stack during panic:\n-end of query stack"}, {"sha": "640f929f8f11bb902615b8f7a4f219bfe08ca437", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs?ref=f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n+//~^ WARNING: the feature `type_alias_impl_trait` is incomplete\n+\n+pub trait AssociatedImpl {\n+    type ImplTrait;\n+\n+    fn f() -> Self::ImplTrait;\n+}\n+\n+struct S<T>(T);\n+\n+trait Associated {\n+    type A;\n+}\n+\n+impl<'a, T: Associated<A = &'a ()>> AssociatedImpl for S<T> {\n+    type ImplTrait = impl core::fmt::Debug;\n+\n+    fn f() -> Self::ImplTrait {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "efccf6241fb7894f45ff706950bba6d0436bf8e1", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f30ee6508d3cbd385afc61a5b5993bdd50a849ae/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr?ref=f30ee6508d3cbd385afc61a5b5993bdd50a849ae", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-78450.rs:4:12\n+   |\n+LL | #![feature(type_alias_impl_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}]}