{"sha": "51d3cec38794beb644f67e80b1e7718ee14facf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDNjZWMzODc5NGJlYjY0NGY2N2U4MGIxZTc3MThlZTE0ZmFjZjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-31T17:02:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-31T18:16:03Z"}, "message": "Fix hard break issue", "tree": {"sha": "175148f94445c6fa470bf207143fd7c167596384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/175148f94445c6fa470bf207143fd7c167596384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d3cec38794beb644f67e80b1e7718ee14facf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d3cec38794beb644f67e80b1e7718ee14facf0", "html_url": "https://github.com/rust-lang/rust/commit/51d3cec38794beb644f67e80b1e7718ee14facf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d3cec38794beb644f67e80b1e7718ee14facf0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b15f0409fae948b3de7dee1d6b2cb995c5784d", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b15f0409fae948b3de7dee1d6b2cb995c5784d", "html_url": "https://github.com/rust-lang/rust/commit/36b15f0409fae948b3de7dee1d6b2cb995c5784d"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "d1f2948bc2532c09194d885cb968581d4e655810", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/51d3cec38794beb644f67e80b1e7718ee14facf0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d3cec38794beb644f67e80b1e7718ee14facf0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=51d3cec38794beb644f67e80b1e7718ee14facf0", "patch": "@@ -116,15 +116,19 @@ macro_rules! event_loop_break {\n             match event {\n                 $($end_event)|* => break,\n                 Event::Text(ref s) => {\n+                    debug!(\"Text\");\n                     inner($id, s);\n                     if $escape {\n                         $buf.push_str(&format!(\"{}\", Escape(s)));\n                     } else {\n                         $buf.push_str(s);\n                     }\n                 }\n-                Event::SoftBreak | Event::HardBreak if !$buf.is_empty() => {\n-                    $buf.push(' ');\n+                Event::SoftBreak => {\n+                    debug!(\"SoftBreak\");\n+                    if !$buf.is_empty() {\n+                        $buf.push(' ');\n+                    }\n                 }\n                 x => {\n                     looper($parser, &mut $buf, Some(x), $toc_builder, $shorter, $id);\n@@ -165,6 +169,7 @@ pub fn render(w: &mut fmt::Formatter,\n               print_toc: bool,\n               shorter: MarkdownOutputStyle) -> fmt::Result {\n     fn code_block(parser: &mut ParserWrapper, buffer: &mut String, lang: &str) {\n+        debug!(\"CodeBlock\");\n         let mut origtext = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -244,6 +249,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn heading(parser: &mut ParserWrapper, buffer: &mut String,\n                toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle, level: i32) {\n+        debug!(\"Heading\");\n         let mut ret = String::new();\n         let mut id = String::new();\n         event_loop_break!(parser, toc_builder, shorter, ret, true, &mut Some(&mut id),\n@@ -279,6 +285,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn inline_code(parser: &mut ParserWrapper, buffer: &mut String,\n                    toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n                    id: &mut Option<&mut String>) {\n+        debug!(\"InlineCode\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id, Event::End(Tag::Code));\n         buffer.push_str(&format!(\"<code>{}</code>\",\n@@ -288,6 +295,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn link(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle, url: &str, title: &str,\n             id: &mut Option<&mut String>) {\n+        debug!(\"Link\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, id,\n                           Event::End(Tag::Link(_, _)));\n@@ -302,6 +310,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn image(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle, url: &str, mut title: String,\n             id: &mut Option<&mut String>) {\n+        debug!(\"Image\");\n         event_loop_break!(parser, toc_builder, shorter, title, true, id,\n                           Event::End(Tag::Image(_, _)));\n         buffer.push_str(&format!(\"<img src=\\\"{}\\\" alt=\\\"{}\\\">\", url, title));\n@@ -310,6 +319,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn paragraph(parser: &mut ParserWrapper, buffer: &mut String,\n                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n                  id: &mut Option<&mut String>) {\n+        debug!(\"Paragraph\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, id,\n                           Event::End(Tag::Paragraph));\n@@ -318,6 +328,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn table_cell(parser: &mut ParserWrapper, buffer: &mut String,\n                   toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n+        debug!(\"TableCell\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n                           Event::End(Tag::TableHead) |\n@@ -329,6 +340,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn table_row(parser: &mut ParserWrapper, buffer: &mut String,\n                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n+        debug!(\"TableRow\");\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -348,6 +360,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn table_head(parser: &mut ParserWrapper, buffer: &mut String,\n                   toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n+        debug!(\"TableHead\");\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -367,6 +380,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn table(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n              shorter: MarkdownOutputStyle) {\n+        debug!(\"Table\");\n         let mut content = String::new();\n         let mut rows = String::new();\n         while let Some(event) = parser.next() {\n@@ -392,6 +406,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn blockquote(parser: &mut ParserWrapper, buffer: &mut String,\n                   toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n+        debug!(\"BlockQuote\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, &mut None,\n                           Event::End(Tag::BlockQuote));\n@@ -400,6 +415,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn list_item(parser: &mut ParserWrapper, buffer: &mut String,\n                  toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle) {\n+        debug!(\"ListItem\");\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -417,6 +433,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn list(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle) {\n+        debug!(\"List\");\n         let mut content = String::new();\n         while let Some(event) = parser.next() {\n             match event {\n@@ -435,6 +452,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn emphasis(parser: &mut ParserWrapper, buffer: &mut String,\n                 toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n                 id: &mut Option<&mut String>) {\n+        debug!(\"Emphasis\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id,\n                           Event::End(Tag::Emphasis));\n@@ -443,6 +461,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn strong(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n               shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+        debug!(\"Strong\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, false, id,\n                           Event::End(Tag::Strong));\n@@ -452,6 +471,7 @@ pub fn render(w: &mut fmt::Formatter,\n     fn footnote(parser: &mut ParserWrapper, buffer: &mut String,\n                 toc_builder: &mut Option<TocBuilder>, shorter: MarkdownOutputStyle,\n                 id: &mut Option<&mut String>) {\n+        debug!(\"FootnoteDefinition\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, id,\n                           Event::End(Tag::FootnoteDefinition(_)));\n@@ -460,6 +480,7 @@ pub fn render(w: &mut fmt::Formatter,\n \n     fn rule(parser: &mut ParserWrapper, buffer: &mut String, toc_builder: &mut Option<TocBuilder>,\n             shorter: MarkdownOutputStyle, id: &mut Option<&mut String>) {\n+        debug!(\"Rule\");\n         let mut content = String::new();\n         event_loop_break!(parser, toc_builder, shorter, content, true, id,\n                           Event::End(Tag::Rule));\n@@ -508,6 +529,7 @@ pub fn render(w: &mut fmt::Formatter,\n                     rule(parser, buffer, toc_builder, shorter, id);\n                 }\n                 Event::Start(Tag::FootnoteDefinition(ref def)) => {\n+                    debug!(\"FootnoteDefinition\");\n                     let mut content = String::new();\n                     let def = def.as_ref();\n                     footnote(parser, &mut content, toc_builder, shorter, id);\n@@ -523,12 +545,22 @@ pub fn render(w: &mut fmt::Formatter,\n                                                  }));\n                 }\n                 Event::FootnoteReference(ref reference) => {\n+                    debug!(\"FootnoteReference\");\n                     let entry = parser.get_entry(reference.as_ref());\n                     buffer.push_str(&format!(\"<sup id=\\\"supref{0}\\\"><a href=\\\"#ref{0}\\\">{0}</a>\\\n                                               </sup>\",\n                                              (*entry).1));\n                 }\n+                Event::HardBreak => {\n+                    debug!(\"HardBreak\");\n+                    if shorter.is_fancy() {\n+                        buffer.push_str(\"<br>\");\n+                    } else if !buffer.is_empty() {\n+                        buffer.push(' ');\n+                    }\n+                }\n                 Event::Html(h) | Event::InlineHtml(h) => {\n+                    debug!(\"Html/InlineHtml\");\n                     buffer.push_str(&*h);\n                 }\n                 _ => {}"}, {"sha": "59fef8d20271bf83e23d8122406f93a18a14feac", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/51d3cec38794beb644f67e80b1e7718ee14facf0/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d3cec38794beb644f67e80b1e7718ee14facf0/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=51d3cec38794beb644f67e80b1e7718ee14facf0", "patch": "@@ -82,7 +82,7 @@ fn unindent(s: &str) -> String {\n     });\n \n     if !lines.is_empty() {\n-        let mut unindented = vec![ lines[0].trim().to_string() ];\n+        let mut unindented = vec![ lines[0].trim_left().to_string() ];\n         unindented.extend_from_slice(&lines[1..].iter().map(|&line| {\n             if line.chars().all(|c| c.is_whitespace()) {\n                 line.to_string()\n@@ -160,4 +160,15 @@ mod unindent_tests {\n         let r = unindent(&s);\n         assert_eq!(r, \"line1\\nline2\");\n     }\n+\n+    #[test]\n+    fn should_not_trim() {\n+        let s = \"\\t    line1  \\n\\t    line2\".to_string();\n+        let r = unindent(&s);\n+        assert_eq!(r, \"line1  \\nline2\");\n+\n+        let s = \"    \\tline1  \\n    \\tline2\".to_string();\n+        let r = unindent(&s);\n+        assert_eq!(r, \"line1  \\nline2\");\n+    }\n }"}, {"sha": "4604639c3c8d54b2ff359571a527f533fd9a7d83", "filename": "src/test/rustdoc/check-hard-break.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/51d3cec38794beb644f67e80b1e7718ee14facf0/src%2Ftest%2Frustdoc%2Fcheck-hard-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d3cec38794beb644f67e80b1e7718ee14facf0/src%2Ftest%2Frustdoc%2Fcheck-hard-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-hard-break.rs?ref=51d3cec38794beb644f67e80b1e7718ee14facf0", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has foo/fn.f.html\n+// @has - '<p>hard break:<br>after hard break</p>'\n+/// hard break:  \n+/// after hard break\n+pub fn f() {}"}]}