{"sha": "c1cd200922702f2ec5e30d5b5391c0443607d647", "node_id": "C_kwDOAAsO6NoAKGMxY2QyMDA5MjI3MDJmMmVjNWUzMGQ1YjUzOTFjMDQ0MzYwN2Q2NDc", "commit": {"author": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2022-01-24T17:00:23Z"}, "committer": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2022-01-24T17:02:37Z"}, "message": "Rename SocketAddr::unix to from_path\n\nAnd change it to disallow NULL bytes.", "tree": {"sha": "5b5abfbac00bc43efbe1a08ccf750b61347f7b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b5abfbac00bc43efbe1a08ccf750b61347f7b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1cd200922702f2ec5e30d5b5391c0443607d647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cd200922702f2ec5e30d5b5391c0443607d647", "html_url": "https://github.com/rust-lang/rust/commit/c1cd200922702f2ec5e30d5b5391c0443607d647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1cd200922702f2ec5e30d5b5391c0443607d647/comments", "author": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2cdb57b946c1f7dc07d8e944aad8d4af8cb2f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cdb57b946c1f7dc07d8e944aad8d4af8cb2f17", "html_url": "https://github.com/rust-lang/rust/commit/f2cdb57b946c1f7dc07d8e944aad8d4af8cb2f17"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "7f64533cb67dcc61516cc01494154151cef957e4", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1cd200922702f2ec5e30d5b5391c0443607d647/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cd200922702f2ec5e30d5b5391c0443607d647/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=c1cd200922702f2ec5e30d5b5391c0443607d647", "patch": "@@ -131,7 +131,8 @@ impl SocketAddr {\n     ///\n     /// # Errors\n     ///\n-    /// Returns an error if the path is longer than `SUN_LEN`.\n+    /// Returns an error if the path is longer than `SUN_LEN` or if it contains\n+    /// NULL bytes.\n     ///\n     /// # Examples\n     ///\n@@ -141,27 +142,35 @@ impl SocketAddr {\n     /// use std::path::Path;\n     ///\n     /// # fn main() -> std::io::Result<()> {\n-    /// let address = SocketAddr::unix(\"/path/to/socket\")?;\n+    /// let address = SocketAddr::from_path(\"/path/to/socket\")?;\n     /// assert_eq!(address.as_pathname(), Some(Path::new(\"/path/to/socket\")));\n     /// # Ok(())\n     /// # }\n     /// ```\n+    ///\n+    /// Creating a `SocketAddr` with a NULL byte results in an error.\n+    ///\n+    /// ```\n+    /// #![feature(unix_socket_creation)]\n+    /// use std::os::unix::net::SocketAddr;\n+    ///\n+    /// assert!(SocketAddr::from_path(\"/path/with/\\0/bytes\").is_err());\n+    /// ```\n     #[unstable(feature = \"unix_socket_creation\", issue = \"65275\")]\n-    pub fn unix<P>(path: P) -> io::Result<SocketAddr>\n+    pub fn from_path<P>(path: P) -> io::Result<SocketAddr>\n     where\n         P: AsRef<Path>,\n     {\n         // SAFETY: All zeros is a valid representation for `sockaddr_un`.\n         let mut storage: libc::sockaddr_un = unsafe { mem::zeroed() };\n \n         let bytes = path.as_ref().as_os_str().as_bytes();\n-        let too_long = match bytes.first() {\n-            None => false,\n-            // linux abstract namespaces aren't null-terminated.\n-            Some(&0) => bytes.len() > storage.sun_path.len(),\n-            Some(_) => bytes.len() >= storage.sun_path.len(),\n-        };\n-        if too_long {\n+        if bytes.contains(&b'\\0') {\n+            return Err(io::Error::new(\n+                io::ErrorKind::InvalidInput,\n+                \"path can't contain null bytes\",\n+            ));\n+        } else if bytes.len() >= storage.sun_path.len() {\n             return Err(io::Error::new(\n                 io::ErrorKind::InvalidInput,\n                 \"path must be shorter than SUN_LEN\",\n@@ -184,12 +193,7 @@ impl SocketAddr {\n         let base = &storage as *const _ as usize;\n         let path = &storage.sun_path as *const _ as usize;\n         let sun_path_offset = path - base;\n-        let length = sun_path_offset\n-            + bytes.len()\n-            + match bytes.first() {\n-                Some(&0) | None => 0,\n-                Some(_) => 1,\n-            };\n+        let length = sun_path_offset + bytes.len() + 1;\n \n         Ok(SocketAddr { addr: storage, len: length as _ })\n     }"}]}