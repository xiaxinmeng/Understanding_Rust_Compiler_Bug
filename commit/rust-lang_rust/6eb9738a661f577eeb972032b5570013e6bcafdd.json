{"sha": "6eb9738a661f577eeb972032b5570013e6bcafdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjk3MzhhNjYxZjU3N2VlYjk3MjAzMmI1NTcwMDEzZTZiY2FmZGQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T08:38:23Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-14T08:38:23Z"}, "message": "Rename ast::controlflow to ast::ret_style\n\nIt will include information about returning by alias.", "tree": {"sha": "526faf2c5e590605d2d796371c75a9e98c35f1ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526faf2c5e590605d2d796371c75a9e98c35f1ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb9738a661f577eeb972032b5570013e6bcafdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9738a661f577eeb972032b5570013e6bcafdd", "html_url": "https://github.com/rust-lang/rust/commit/6eb9738a661f577eeb972032b5570013e6bcafdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9738a661f577eeb972032b5570013e6bcafdd/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c", "html_url": "https://github.com/rust-lang/rust/commit/f6fe07d1f3f8e98120169dea59ebc4d2eee4255c"}], "stats": {"total": 119, "additions": 58, "deletions": 61}, "files": [{"sha": "fcc4f8831395f33094f063aed6eeed271d7dcb7e", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -178,7 +178,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n          output: ret_ty,\n          purity: ast::impure_fn,\n          il: ast::il_normal,\n-         cf: ast::return,\n+         cf: ast::return_val,\n          constraints: []};\n     let proto = ast::proto_fn;\n \n@@ -205,7 +205,7 @@ fn empty_fn_ty() -> ast::ty {\n     let proto = ast::proto_fn;\n     let input_ty = [];\n     let ret_ty = @nospan(ast::ty_nil);\n-    let cf = ast::return;\n+    let cf = ast::return_val;\n     let constrs = [];\n     ret nospan(ast::ty_fn(proto, input_ty, ret_ty, cf, constrs));\n }\n@@ -298,7 +298,7 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n          output: @ret_ty,\n          purity: ast::impure_fn,\n          il: ast::il_normal,\n-         cf: ast::return,\n+         cf: ast::return_val,\n          constraints: []};\n     let proto = ast::proto_fn;\n "}, {"sha": "cc342fe46476510657166a783a577469828605ce", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -371,7 +371,7 @@ fn parse_hex(st: @pstate) -> uint {\n }\n \n fn parse_ty_fn(st: @pstate, sd: str_def) ->\n-   {args: [ty::arg], ty: ty::t, cf: ast::controlflow, cs: [@ty::constr]} {\n+   {args: [ty::arg], ty: ty::t, cf: ast::ret_style, cs: [@ty::constr]} {\n     assert (next(st) as char == '[');\n     let inputs: [ty::arg] = [];\n     while peek(st) as char != ']' {\n@@ -391,7 +391,7 @@ fn parse_ty_fn(st: @pstate, sd: str_def) ->\n       a_bang. {\n         ret {args: inputs, ty: ty::mk_bot(st.tcx), cf: ast::noreturn, cs: cs};\n       }\n-      a_ty(t) { ret {args: inputs, ty: t, cf: ast::return, cs: cs}; }\n+      a_ty(t) { ret {args: inputs, ty: t, cf: ast::return_val, cs: cs}; }\n     }\n }\n "}, {"sha": "07df8fed24ab19c94325a6e5f52d7436c94da147", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -148,7 +148,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n           native_abi_llvm. { w.write_char('l'); }\n           native_abi_x86stdcall. { w.write_char('s'); }\n         }\n-        enc_ty_fn(w, cx, args, out, return, []);\n+        enc_ty_fn(w, cx, args, out, return_val, []);\n       }\n       ty::ty_obj(methods) {\n         w.write_str(\"O[\");\n@@ -199,7 +199,7 @@ fn enc_proto(w: io::writer, proto: proto) {\n }\n \n fn enc_ty_fn(w: io::writer, cx: @ctxt, args: [ty::arg], out: ty::t,\n-             cf: controlflow, constrs: [@ty::constr]) {\n+             cf: ret_style, constrs: [@ty::constr]) {\n     w.write_char('[');\n     for arg: ty::arg in args {\n         alt arg.mode {\n@@ -219,7 +219,6 @@ fn enc_ty_fn(w: io::writer, cx: @ctxt, args: [ty::arg], out: ty::t,\n         enc_constr(w, cx, c);\n     }\n     alt cf { noreturn. { w.write_char('!'); } _ { enc_ty(w, cx, out); } }\n-\n }\n \n // FIXME less copy-and-paste"}, {"sha": "45c25980bafd9ec324ebe7391694a8e1ca875b81", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -254,7 +254,7 @@ type fn_info =\n     // Doesn't seem to work without the @ -- bug\n     {constrs: constr_map,\n      num_constraints: uint,\n-     cf: controlflow,\n+     cf: ret_style,\n      i_return: tsconstr,\n      i_diverge: tsconstr,\n      used_vars: @mutable [node_id]};\n@@ -489,10 +489,10 @@ fn new_crate_ctxt(cx: ty::ctxt) -> crate_ctxt {\n /* Use e's type to determine whether it returns.\n  If it has a function type with a ! annotation,\n the answer is noreturn. */\n-fn controlflow_expr(ccx: crate_ctxt, e: @expr) -> controlflow {\n+fn controlflow_expr(ccx: crate_ctxt, e: @expr) -> ret_style {\n     alt ty::struct(ccx.tcx, ty::node_id_to_type(ccx.tcx, e.id)) {\n       ty::ty_fn(_, _, _, cf, _) { ret cf; }\n-      _ { ret return; }\n+      _ { ret return_val; }\n     }\n }\n "}, {"sha": "45dc8d87d2b763110b00f032b9e982f4621dc580", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -1,7 +1,7 @@\n \n import syntax::ast;\n import ast::{method, item, item_fn, _fn, obj_field, _obj, stmt, ident,\n-             fn_ident, node_id, def_id, ty_param, crate, return, noreturn,\n+             fn_ident, node_id, def_id, ty_param, crate, return_val, noreturn,\n              expr};\n import syntax::ast_util::local_def;\n import syntax::visit;\n@@ -119,7 +119,7 @@ fn check_states_against_conditions(fcx: fn_ctxt, f: _fn, tps: [ast::ty_param],\n     if f.proto != ast::proto_iter &&\n            !promises(fcx, post, fcx.enclosing.i_return) &&\n            !type_is_nil(fcx.ccx.tcx, ret_ty_of_fn(fcx.ccx.tcx, id)) &&\n-           f.decl.cf == return {\n+           f.decl.cf == return_val {\n         fcx.ccx.tcx.sess.span_err(f.body.span,\n                                   \"In function \" + fcx.name +\n                                       \", not all control paths \\"}, {"sha": "a37092e97afcf30aad0d0536110b0c0e16941e2e", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -52,7 +52,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n              enclosing:\n                  {constrs: @new_def_hash::<constraint>(),\n                   num_constraints: 0u,\n-                  cf: return,\n+                  cf: return_val,\n                   i_return: ninit(0, \"\"),\n                   i_diverge: ninit(0, \"\"),\n                   used_vars: v},"}, {"sha": "620592fd37885216975c95d0f3a8857dd33a4bf5", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -169,7 +169,7 @@ fn find_pre_post_state_two(fcx: fn_ctxt, pres: prestate, lhs: @expr,\n \n fn find_pre_post_state_call(fcx: fn_ctxt, pres: prestate, a: @expr,\n                             id: node_id, ops: [init_op], bs: [@expr],\n-                            cf: controlflow) -> bool {\n+                            cf: ret_style) -> bool {\n     let changed = find_pre_post_state_expr(fcx, pres, a);\n     // FIXME: This could be a typestate constraint\n     if vec::len(bs) != vec::len(ops) {\n@@ -183,7 +183,7 @@ fn find_pre_post_state_call(fcx: fn_ctxt, pres: prestate, a: @expr,\n }\n \n fn find_pre_post_state_exprs(fcx: fn_ctxt, pres: prestate, id: node_id,\n-                             ops: [init_op], es: [@expr], cf: controlflow) ->\n+                             ops: [init_op], es: [@expr], cf: ret_style) ->\n    bool {\n     let rs = seq_states(fcx, pres, anon_bindings(ops, es));\n     let changed = rs.changed | set_prestate_ann(fcx.ccx, id, pres);\n@@ -333,7 +333,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n                                       vec::init_elt(init_assign,\n                                                     vec::len(elts)), elts,\n-                                      return);\n+                                      return_val);\n       }\n       expr_call(operator, operands) {\n         ret find_pre_post_state_call(fcx, pres, operator, e.id,\n@@ -354,7 +354,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n             i += 1;\n         }\n         ret find_pre_post_state_call(fcx, pres, operator, e.id, ops, args,\n-                                     return);\n+                                     return_val);\n       }\n       expr_path(_) { ret pure_exp(fcx.ccx, e.id, pres); }\n       expr_log(_, ex) {\n@@ -381,7 +381,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n             find_pre_post_state_exprs(fcx, pres, e.id,\n                                       vec::init_elt(init_assign,\n                                                     vec::len(fields)),\n-                                      field_exprs(fields), return);\n+                                      field_exprs(fields), return_val);\n         alt maybe_base {\n           none. {/* do nothing */ }\n           some(base) {\n@@ -397,7 +397,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         ret find_pre_post_state_exprs(fcx, pres, e.id,\n                                       vec::init_elt(init_assign,\n                                                     vec::len(elts)), elts,\n-                                      return);\n+                                      return_val);\n       }\n       expr_copy(a) { ret find_pre_post_state_sub(fcx, pres, a, e.id, none); }\n       expr_move(lhs, rhs) {"}, {"sha": "f2d91c5729b5918cb233f5af76b9199dbcb5b7ff", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -185,7 +185,7 @@ type method =\n      ident: ast::ident,\n      inputs: [arg],\n      output: t,\n-     cf: controlflow,\n+     cf: ret_style,\n      constrs: [@constr]};\n \n type constr_table = hashmap<ast::node_id, [constr]>;\n@@ -255,7 +255,7 @@ tag sty {\n     ty_vec(mt);\n     ty_ptr(mt);\n     ty_rec([field]);\n-    ty_fn(ast::proto, [arg], t, controlflow, [@constr]);\n+    ty_fn(ast::proto, [arg], t, ret_style, [@constr]);\n     ty_native_fn(ast::native_abi, [arg], t);\n     ty_obj([method]);\n     ty_res(def_id, t, [t]);\n@@ -556,7 +556,7 @@ fn mk_constr(cx: ctxt, t: t, cs: [@type_constr]) -> t {\n \n fn mk_tup(cx: ctxt, ts: [t]) -> t { ret gen_ty(cx, ty_tup(ts)); }\n \n-fn mk_fn(cx: ctxt, proto: ast::proto, args: [arg], ty: t, cf: controlflow,\n+fn mk_fn(cx: ctxt, proto: ast::proto, args: [arg], ty: t, cf: ret_style,\n          constrs: [@constr]) -> t {\n     ret gen_ty(cx, ty_fn(proto, args, ty, cf, constrs));\n }\n@@ -583,7 +583,7 @@ fn mk_native(cx: ctxt, did: def_id) -> t { ret gen_ty(cx, ty_native(did)); }\n \n fn mk_iter_body_fn(cx: ctxt, output: t) -> t {\n     ret mk_fn(cx, ast::proto_block, [{mode: ast::by_ref, ty: output}],\n-              ty::mk_nil(cx), ast::return, []);\n+              ty::mk_nil(cx), ast::return_val, []);\n }\n \n // Returns the one-level-deep type structure of the given type.\n@@ -1948,16 +1948,12 @@ mod unify {\n     fn unify_fn(cx: @ctxt, e_proto: ast::proto, a_proto: ast::proto,\n                 expected: t, actual: t, expected_inputs: [arg],\n                 expected_output: t, actual_inputs: [arg], actual_output: t,\n-                expected_cf: controlflow, actual_cf: controlflow,\n+                expected_cf: ret_style, actual_cf: ret_style,\n                 _expected_constrs: [@constr], actual_constrs: [@constr]) ->\n        result {\n         if e_proto != a_proto { ret ures_err(terr_mismatch); }\n         alt expected_cf {\n-          ast::return. { }\n-\n-\n-\n-\n+          ast::return_val. { }\n           // ok\n           ast::noreturn. {\n             alt actual_cf {"}, {"sha": "5608f57ddcce6eadb5c2b5af66b1b05a2c7de30a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -593,8 +593,8 @@ mod collect {\n         }\n \n         let t_fn =\n-            ty::mk_fn(cx.tcx, ast::proto_fn, t_inputs, t_obj.ty, ast::return,\n-                      []);\n+            ty::mk_fn(cx.tcx, ast::proto_fn, t_inputs, t_obj.ty,\n+                      ast::return_val, []);\n         let tpt = {kinds: ty_param_kinds(ty_params), ty: t_fn};\n         cx.tcx.tcache.insert(local_def(ctor_id), tpt);\n         ret tpt;\n@@ -704,8 +704,8 @@ mod collect {\n                 let tag_t = ty::mk_tag(cx.tcx, tag_id, ty_param_tys);\n                 // FIXME: this will be different for constrained types\n                 result_ty =\n-                    ty::mk_fn(cx.tcx, ast::proto_fn, args, tag_t, ast::return,\n-                              []);\n+                    ty::mk_fn(cx.tcx, ast::proto_fn, args, tag_t,\n+                              ast::return_val, []);\n             }\n             let tpt = {kinds: ty_param_kinds(ty_params), ty: result_ty};\n             cx.tcx.tcache.insert(local_def(variant.node.id), tpt);\n@@ -774,11 +774,11 @@ mod collect {\n                 ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n                            mk_ty_params(cx, tps));\n             let t_ctor =\n-                ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg], t_res, ast::return,\n-                          []);\n+                ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg], t_res,\n+                          ast::return_val, []);\n             let t_dtor =\n                 ty::mk_fn(cx.tcx, ast::proto_fn, [t_arg], ty::mk_nil(cx.tcx),\n-                          ast::return, []);\n+                          ast::return_val, []);\n             write::ty_only(cx.tcx, it.id, t_res);\n             write::ty_only(cx.tcx, ctor_id, t_ctor);\n             cx.tcx.tcache.insert(local_def(ctor_id),\n@@ -2010,7 +2010,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             proto = ast::proto_fn;\n             arg_tys = arg_tys_;\n             rt = rt_;\n-            cf = ast::return;\n+            cf = ast::return_val;\n             constrs = [];\n           }\n           _ { fail \"LHS of bind expr didn't have a function type?!\"; }\n@@ -2685,7 +2685,7 @@ fn arg_is_argv_ty(tcx: ty::ctxt, a: ty::arg) -> bool {\n fn check_main_fn_ty(tcx: ty::ctxt, main_id: ast::node_id) {\n     let main_t = ty::node_id_to_monotype(tcx, main_id);\n     alt ty::struct(tcx, main_t) {\n-      ty::ty_fn(ast::proto_fn., args, rs, ast::return., constrs) {\n+      ty::ty_fn(ast::proto_fn., args, rs, ast::return_val., constrs) {\n         let ok = vec::len(constrs) == 0u;\n         ok &= ty::type_is_nil(tcx, rs);\n         let num_args = vec::len(args);"}, {"sha": "0db696654bef4e0445b90bd2584601596629c979", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -261,7 +261,7 @@ type ty_method_ =\n      ident: ident,\n      inputs: [ty_arg],\n      output: @ty,\n-     cf: controlflow,\n+     cf: ret_style,\n      constrs: [@constr]};\n \n type ty_field = spanned<ty_field_>;\n@@ -311,7 +311,7 @@ tag ty_ {\n     ty_port(@ty);\n     ty_chan(@ty);\n     ty_rec([ty_field]);\n-    ty_fn(proto, [ty_arg], @ty, controlflow, [@constr]);\n+    ty_fn(proto, [ty_arg], @ty, ret_style, [@constr]);\n     ty_obj([ty_method]);\n     ty_tup([@ty]);\n     ty_path(path, node_id);\n@@ -369,22 +369,19 @@ type fn_decl =\n      output: @ty,\n      purity: purity,\n      il: inlineness,\n-     cf: controlflow,\n+     cf: ret_style,\n      constraints: [@constr]};\n \n tag purity {\n     pure_fn; // declared with \"pure fn\"\n     impure_fn; // declared with \"fn\"\n }\n \n-tag controlflow {\n+tag ret_style {\n     noreturn; // functions with return type _|_ that always\n               // raise an error or exit (i.e. never return to the caller)\n-\n-\n-\n-\n-    return; // everything else\n+    return_val; // everything else\n+    return_alias;\n }\n \n type _fn = {decl: fn_decl, proto: proto, body: blk};"}, {"sha": "e6679f60b17405e9dcb571bfdeb8cb06a0b463f9", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -289,10 +289,10 @@ fn parse_ty_fn(proto: ast::proto, p: parser) -> ast::ty_ {\n     //  auto constrs = parse_constrs(~[], p);\n     let constrs: [@ast::constr] = [];\n     let output: @ast::ty;\n-    let cf = ast::return;\n+    let cf = ast::return_val;\n     if p.peek() == token::RARROW {\n         p.bump();\n-        let tmp = parse_ty_or_bang(p);\n+        let tmp = parse_ret_ty(p);\n         alt tmp {\n           a_ty(t) { output = t; }\n           a_bang. {\n@@ -452,7 +452,12 @@ fn parse_ty_postfix(orig_t: ast::ty_, p: parser, colons_before_params: bool)\n     }\n }\n \n-fn parse_ty_or_bang(p: parser) -> ty_or_bang {\n+fn parse_ret_ty(p: parser) -> ty_or_bang {\n+/*    if eat(p, token::RARROW) {\n+\n+    } else {\n+\n+    }*/\n     alt p.peek() {\n       token::NOT. { p.bump(); ret a_bang; }\n       _ { ret a_ty(parse_ty(p, false)); }\n@@ -1766,7 +1771,7 @@ fn parse_fn_decl(p: parser, purity: ast::purity, il: ast::inlineness) ->\n     }\n     if p.peek() == token::RARROW {\n         p.bump();\n-        rslt = parse_ty_or_bang(p);\n+        rslt = parse_ret_ty(p);\n     } else {\n         rslt = a_ty(@spanned(inputs.span.lo, inputs.span.hi, ast::ty_nil));\n     }\n@@ -1776,7 +1781,7 @@ fn parse_fn_decl(p: parser, purity: ast::purity, il: ast::inlineness) ->\n              output: t,\n              purity: purity,\n              il: il,\n-             cf: ast::return,\n+             cf: ast::return_val,\n              constraints: constrs};\n       }\n       a_bang. {\n@@ -1803,7 +1808,7 @@ fn parse_fn_block_decl(p: parser) -> ast::fn_decl {\n          output: @spanned(p.get_lo_pos(), p.get_hi_pos(), ast::ty_infer),\n          purity: ast::impure_fn,\n          il: ast::il_normal,\n-         cf: ast::return,\n+         cf: ast::return_val,\n          constraints: []};\n }\n \n@@ -1899,7 +1904,7 @@ fn parse_item_res(p: parser, attrs: [ast::attribute]) -> @ast::item {\n          output: @spanned(lo, lo, ast::ty_nil),\n          purity: ast::impure_fn,\n          il: ast::il_normal,\n-         cf: ast::return,\n+         cf: ast::return_val,\n          constraints: []};\n     let f = {decl: decl, proto: ast::proto_fn, body: dtor};\n     ret mk_item(p, lo, dtor.span.hi, ident,"}, {"sha": "4230beab7db39d6a4147e92c1ed649d0959266e3", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -1401,7 +1401,7 @@ fn print_mt(s: ps, mt: ast::mt) {\n }\n \n fn print_ty_fn(s: ps, proto: ast::proto, id: option::t<ast::ident>,\n-               inputs: [ast::ty_arg], output: @ast::ty, cf: ast::controlflow,\n+               inputs: [ast::ty_arg], output: @ast::ty, cf: ast::ret_style,\n                constrs: [@ast::constr]) {\n     ibox(s, indent_unit);\n     word(s.s, proto_to_str(proto));\n@@ -1420,7 +1420,7 @@ fn print_ty_fn(s: ps, proto: ast::proto, id: option::t<ast::ident>,\n         ibox(s, indent_unit);\n         word_space(s, \"->\");\n         alt cf {\n-          ast::return. { print_type(s, output); }\n+          ast::return_val. { print_type(s, output); }\n           ast::noreturn. { word_nbsp(s, \"!\"); }\n         }\n         end(s);"}, {"sha": "7e299922fe8b1ceb72f5510ca69d4db422ab05b8", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb9738a661f577eeb972032b5570013e6bcafdd/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=6eb9738a661f577eeb972032b5570013e6bcafdd", "patch": "@@ -48,7 +48,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         ret s + ty_to_str(cx, input.ty);\n     }\n     fn fn_to_str(cx: ctxt, proto: ast::proto, ident: option::t<ast::ident>,\n-                 inputs: [arg], output: t, cf: ast::controlflow,\n+                 inputs: [arg], output: t, cf: ast::ret_style,\n                  constrs: [@constr]) -> str {\n         let s = proto_to_str(proto);\n         alt ident { some(i) { s += \" \"; s += i; } _ { } }\n@@ -60,7 +60,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         if struct(cx, output) != ty_nil {\n             alt cf {\n               ast::noreturn. { s += \" -> !\"; }\n-              ast::return. { s += \" -> \" + ty_to_str(cx, output); }\n+              ast::return_val. { s += \" -> \" + ty_to_str(cx, output); }\n             }\n         }\n         s += constrs_str(constrs);\n@@ -121,8 +121,8 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n             fn_to_str(cx, proto, none, inputs, output, cf, constrs)\n           }\n           ty_native_fn(_, inputs, output) {\n-            fn_to_str(cx, ast::proto_fn, none, inputs, output, ast::return,\n-                      [])\n+            fn_to_str(cx, ast::proto_fn, none, inputs, output,\n+                      ast::return_val, [])\n           }\n           ty_obj(meths) {\n             let strs = [];"}]}