{"sha": "e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDkwY2JkYjAxZGZhODY4N2QyOWM0MmFjM2U3MzQyZmYyYmFmYWY=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2014-01-02T06:43:47Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2014-01-06T04:04:26Z"}, "message": "librustc: add get_system_tools for target specific environment", "tree": {"sha": "ddf6f478c2e0b14b5741f3bb4535f0c93d4471b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf6f478c2e0b14b5741f3bb4535f0c93d4471b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf", "html_url": "https://github.com/rust-lang/rust/commit/e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8c99429d2d40e70824dae90305acae88a3d917d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c99429d2d40e70824dae90305acae88a3d917d", "html_url": "https://github.com/rust-lang/rust/commit/c8c99429d2d40e70824dae90305acae88a3d917d"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "414978df1dbe1d30992144199ba99c90580ef87e", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=e6490cbdb01dfa8687d29c42ac3e7342ff2bafaf", "patch": "@@ -724,32 +724,39 @@ pub fn get_cc_prog(sess: Session) -> ~str {\n     // instead of hard-coded gcc.\n     // For win32, there is no cc command, so we add a condition to make it use gcc.\n     match sess.targ_cfg.os {\n-        abi::OsAndroid => match sess.opts.android_cross_path {\n-            Some(ref path) => format!(\"{}/bin/arm-linux-androideabi-gcc\", *path),\n-            None => {\n-                sess.fatal(\"need Android NDK path for linking \\\n-                            (--android-cross-path)\")\n-            }\n-        },\n-        abi::OsWin32 => ~\"gcc\",\n-        _ => ~\"cc\",\n+        abi::OsWin32 => return ~\"gcc\",\n+        _ => {},\n     }\n+\n+    get_system_tool(sess, \"cc\")\n }\n \n pub fn get_ar_prog(sess: Session) -> ~str {\n+    match sess.opts.ar {\n+        Some(ref ar) => return ar.to_owned(),\n+        None => {}\n+    }\n+\n+    get_system_tool(sess, \"ar\")\n+}\n+\n+fn get_system_tool(sess: Session, tool: &str) -> ~str {\n     match sess.targ_cfg.os {\n         abi::OsAndroid => match sess.opts.android_cross_path {\n-            Some(ref path) => format!(\"{}/bin/arm-linux-androideabi-ar\", *path),\n+            Some(ref path) => {\n+                let tool_str = match tool {\n+                    \"cc\" => \"gcc\",\n+                    _ => tool\n+                };\n+                format!(\"{}/bin/arm-linux-androideabi-{}\", *path, tool_str)\n+            }\n             None => {\n-                sess.fatal(\"need Android NDK path for linking \\\n-                            (--android-cross-path)\")\n+                sess.fatal(format!(\"need Android NDK path for the '{}' tool \\\n+                                    (--android-cross-path)\", tool))\n             }\n         },\n-        _ => match sess.opts.ar {\n-            Some(ref ar) => format!(\"{}\", *ar),\n-            None => ~\"ar\"\n-        },\n-    }\n+        _ => tool.to_owned(),\n+    } \n }\n \n /// Perform the linkage portion of the compilation phase. This will generate all"}]}