{"sha": "8316701d37cd5a54c658220f6b6e8b1f43c5639e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMTY3MDFkMzdjZDVhNTRjNjU4MjIwZjZiNmU4YjFmNDNjNTYzOWU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-08T00:13:03Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-09T03:27:27Z"}, "message": "[mir-opt] Handle const-prop for the return place", "tree": {"sha": "a6b6a50635e7288b827b7d739dff5b2b31465d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b6a50635e7288b827b7d739dff5b2b31465d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8316701d37cd5a54c658220f6b6e8b1f43c5639e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8316701d37cd5a54c658220f6b6e8b1f43c5639e", "html_url": "https://github.com/rust-lang/rust/commit/8316701d37cd5a54c658220f6b6e8b1f43c5639e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8316701d37cd5a54c658220f6b6e8b1f43c5639e/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5264a03c2d873d9e23a22def748b9c6937c537", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5264a03c2d873d9e23a22def748b9c6937c537", "html_url": "https://github.com/rust-lang/rust/commit/0d5264a03c2d873d9e23a22def748b9c6937c537"}], "stats": {"total": 92, "additions": 87, "deletions": 5}, "files": [{"sha": "a0d04bd593212ff828d3ee3462f863b45a4fe2f2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8316701d37cd5a54c658220f6b6e8b1f43c5639e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8316701d37cd5a54c658220f6b6e8b1f43c5639e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8316701d37cd5a54c658220f6b6e8b1f43c5639e", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue, Local, UnOp,\n     StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo,\n-    BinOp, SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock,\n+    BinOp, SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock, RETURN_PLACE,\n };\n use rustc::mir::visit::{\n     Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n@@ -25,6 +25,7 @@ use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n+use crate::rustc::ty::subst::Subst;\n use crate::interpret::{\n     self, InterpCx, ScalarMaybeUndef, Immediate, OpTy,\n     StackPopCleanup, LocalValue, LocalState, AllocId, Frame,\n@@ -269,6 +270,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n+    ret: Option<OpTy<'tcx, ()>>,\n }\n \n impl<'mir, 'tcx> LayoutOf for ConstPropagator<'mir, 'tcx> {\n@@ -308,11 +310,21 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         let mut ecx = InterpCx::new(tcx.at(span), param_env, ConstPropMachine, ());\n         let can_const_prop = CanConstProp::check(body);\n \n+        let substs = &InternalSubsts::identity_for_item(tcx, def_id);\n+\n+        let ret =\n+            ecx\n+                .layout_of(body.return_ty().subst(tcx, substs))\n+                .ok()\n+                // Don't bother allocating memory for ZST types which have no values.\n+                .filter(|ret_layout| !ret_layout.is_zst())\n+                .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack));\n+\n         ecx.push_stack_frame(\n-            Instance::new(def_id, &InternalSubsts::identity_for_item(tcx, def_id)),\n+            Instance::new(def_id, substs),\n             span,\n             dummy_body,\n-            None,\n+            ret.map(Into::into),\n             StackPopCleanup::None {\n                 cleanup: false,\n             },\n@@ -327,6 +339,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             source_scope_local_data,\n             //FIXME(wesleywiser) we can't steal this because `Visitor::super_visit_body()` needs it\n             local_decls: body.local_decls.clone(),\n+            ret: ret.map(Into::into),\n         }\n     }\n \n@@ -335,6 +348,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n+        if local == RETURN_PLACE {\n+            // Try to read the return place as an immediate so that if it is representable as a\n+            // scalar, we can handle it as such, but otherwise, just return the value as is.\n+            return match self.ret.map(|ret| self.ecx.try_read_immediate(ret)) {\n+                Some(Ok(Ok(imm))) => Some(imm.into()),\n+                _ => self.ret,\n+            };\n+        }\n+\n         self.ecx.access_local(self.ecx.frame(), local, None).ok()\n     }\n \n@@ -643,7 +665,8 @@ impl CanConstProp {\n             //        lint for x != y\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n-            *val = body.local_kind(local) == LocalKind::Temp;\n+            let local_kind = body.local_kind(local);\n+            *val = local_kind == LocalKind::Temp || local_kind == LocalKind::ReturnPointer;\n \n             if !*val {\n                 trace!(\"local {:?} can't be propagated because it's not a temporary\", local);\n@@ -731,7 +754,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             }\n                         } else {\n                             trace!(\"can't propagate into {:?}\", local);\n-                            self.remove_const(local);\n+                            if local != RETURN_PLACE {\n+                                self.remove_const(local);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "64f23c0efa0e0623c301200d7238b52de89841b6", "filename": "src/test/mir-opt/const_prop/return_place.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8316701d37cd5a54c658220f6b6e8b1f43c5639e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8316701d37cd5a54c658220f6b6e8b1f43c5639e/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=8316701d37cd5a54c658220f6b6e8b1f43c5639e", "patch": "@@ -0,0 +1,57 @@\n+// compile-flags: -C overflow-checks=on\n+\n+fn add() -> u32 {\n+    2 + 2\n+}\n+\n+fn main() {\n+    add();\n+}\n+\n+// END RUST SOURCE\n+// START rustc.add.ConstProp.before.mir\n+// fn add() -> u32 {\n+//     let mut _0: u32;\n+//     let mut _1: (u32, bool);\n+//     bb0: {\n+//         _1 = CheckedAdd(const 2u32, const 2u32);\n+//         assert(!move (_1.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     }\n+//     bb1: {\n+//         _0 = move (_1.0: u32);\n+//         return;\n+//     }\n+//     bb2 (cleanup): {\n+//         resume;\n+//     }\n+// }\n+// END rustc.add.ConstProp.before.mir\n+// START rustc.add.ConstProp.after.mir\n+// fn add() -> u32 {\n+//     let mut _0: u32;\n+//     let mut _1: (u32, bool);\n+//     bb0: {\n+//         _1 = (const 4u32, const false);\n+//         assert(!const false, \"attempt to add with overflow\") -> bb1;\n+//     }\n+//     bb1: {\n+//         _0 = const 4u32;\n+//         return;\n+//     }\n+//     bb2 (cleanup): {\n+//         resume;\n+//     }\n+// }\n+// END rustc.add.ConstProp.after.mir\n+// START rustc.add.PreCodegen.before.mir\n+// fn add() -> u32 {\n+//     let mut _0: u32;\n+//     let mut _1: (u32, bool);\n+//     bb0: {\n+//         (_1.0: u32) = const 4u32;\n+//         (_1.1: bool) = const false;\n+//         _0 = const 4u32;\n+//         return;\n+//     }\n+// }\n+// END rustc.add.PreCodegen.before.mir"}]}