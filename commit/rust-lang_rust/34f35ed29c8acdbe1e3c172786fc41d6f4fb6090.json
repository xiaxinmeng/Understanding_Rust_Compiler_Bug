{"sha": "34f35ed29c8acdbe1e3c172786fc41d6f4fb6090", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZjM1ZWQyOWM4YWNkYmUxZTNjMTcyNzg2ZmM0MWQ2ZjRmYjYwOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-17T16:07:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-17T16:07:50Z"}, "message": "Auto merge of #34871 - petrochenkov:inherent, r=jseyfried\n\nDo not resolve inherent static methods from other crates prematurely\n\nUnder some specific circumstances paths like `Type::method` can be resolved early in rustc_resolve instead of type checker. `Type` must be defined in another crate, it should be an enum or a trait object (i.e. a type that acts as a \"module\" in resolve), and `method` should be an inherent static method.\nAs a result, such paths don't go through `resolve_ufcs`, may be resolved incorrectly and break some invariants in type checker. This patch removes special treatment of such methods.\n\nThe removed code was introduced in https://github.com/rust-lang/rust/commit/2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0 to fix a problem that no longer exists.\n\nr? @jseyfried", "tree": {"sha": "0fb3f8e6ab198477b5015ba7cf05f5a3a63a1e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb3f8e6ab198477b5015ba7cf05f5a3a63a1e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090", "html_url": "https://github.com/rust-lang/rust/commit/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6aba7be9a67467d31e6cbf75dc8b5f44d60cb5ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6aba7be9a67467d31e6cbf75dc8b5f44d60cb5ca", "html_url": "https://github.com/rust-lang/rust/commit/6aba7be9a67467d31e6cbf75dc8b5f44d60cb5ca"}, {"sha": "f66da5e7942954730fe19f8bba957759fa13984b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66da5e7942954730fe19f8bba957759fa13984b", "html_url": "https://github.com/rust-lang/rust/commit/f66da5e7942954730fe19f8bba957759fa13984b"}], "stats": {"total": 28, "additions": 1, "deletions": 27}, "files": [{"sha": "409cec282bce93de82457834f12ad5e479c33d57", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=34f35ed29c8acdbe1e3c172786fc41d6f4fb6090", "patch": "@@ -687,32 +687,6 @@ fn each_child_of_item_or_crate<F, G>(cdata: Cmd,\n         }\n     }\n \n-    // As a special case, iterate over all static methods of\n-    // associated implementations too. This is a bit of a botch.\n-    // --pcwalton\n-    for inherent_impl_def_id_doc in reader::tagged_docs(item_doc,\n-                                                             tag_items_data_item_inherent_impl) {\n-        let inherent_impl_def_id = item_def_id(inherent_impl_def_id_doc, cdata);\n-        if let Some(inherent_impl_doc) = cdata.get_item(inherent_impl_def_id.index) {\n-            for impl_item_def_id_doc in reader::tagged_docs(inherent_impl_doc,\n-                                                                 tag_item_impl_item) {\n-                let impl_item_def_id = item_def_id(impl_item_def_id_doc,\n-                                                   cdata);\n-                if let Some(impl_method_doc) = cdata.get_item(impl_item_def_id.index) {\n-                    if let StaticMethod = item_family(impl_method_doc) {\n-                        // Hand off the static method to the callback.\n-                        let static_method_name = item_name(impl_method_doc);\n-                        let static_method_def_like = item_to_def_like(cdata, impl_method_doc,\n-                                                                      impl_item_def_id);\n-                        callback(static_method_def_like,\n-                                 static_method_name,\n-                                 item_visibility(impl_method_doc));\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     for reexport_doc in reexports(item_doc) {\n         let def_id_doc = reader::get_doc(reexport_doc,\n                                          tag_items_data_item_reexport_def_id);"}, {"sha": "687cdba1542bdce4c9be2889ac2bd453bb5f7da9", "filename": "src/test/compile-fail/use-from-trait-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34f35ed29c8acdbe1e3c172786fc41d6f4fb6090/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs?ref=34f35ed29c8acdbe1e3c172786fc41d6f4fb6090", "patch": "@@ -31,6 +31,6 @@ use use_from_trait_xc::Bar::new as bnew;\n //~^ ERROR unresolved import `use_from_trait_xc::Bar::new`\n \n use use_from_trait_xc::Baz::new as baznew;\n-//~^ ERROR `baznew` is not directly importable\n+//~^ ERROR unresolved import `use_from_trait_xc::Baz::new`\n \n fn main() {}"}]}