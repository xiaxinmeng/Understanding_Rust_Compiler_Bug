{"sha": "7407c4e37d3342c20835bc2caaff28863078b266", "node_id": "C_kwDOAAsO6NoAKDc0MDdjNGUzN2QzMzQyYzIwODM1YmMyY2FhZmYyODg2MzA3OGIyNjY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-16T16:23:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-16T16:23:07Z"}, "message": "Rollup merge of #91172 - Ethiraric:ethiraric/fix90979, r=petrochenkov\n\nWarn when a `#[test]`-like built-in attribute macro is present multiple times.\n\nFixes #90979.", "tree": {"sha": "1fecadb33da818198fe0d125d4e1025d4f817c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fecadb33da818198fe0d125d4e1025d4f817c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7407c4e37d3342c20835bc2caaff28863078b266", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhu2frCRBK7hj4Ov3rIwAAoVwIADNlPjI/ff1y0x0Wksha+Lkk\nnPSCRkab2l0pTg9LqpwP+TZ3PcjTQDlzUG32lCO7UyVQtKfSZYWMBwfSOWyHgvgx\n+0y6bX/exUrYFga/oEaccWF4qHN/xHKhcUqW7m7W0NCdrKBzzYw60SIvk8lv6qEt\nUS21S9GG71nUzyHW+dbRmbqpc/Y7XcaftHmDROzLLHERknt/OASakFfPrSKeVEKL\nPKN9V/3p5+oE5zoPl5WbM13pToxdIsV1FXrTeZlS4Qw/Qb9IK8NgD8+WLbjD1DbX\nEAnVzA9LVLbgZTzLMsrjwLb+BgMTKe2E3MMNN5Jldq2y8yKkZfUcPdrJ45UTfRU=\n=Bp9W\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fecadb33da818198fe0d125d4e1025d4f817c35\nparent f8402169aaa12e7bbb9630796a8caec90a3055ca\nparent 2be94d43019961f855589c1c6e2e27063537d30a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639671787 +0100\ncommitter GitHub <noreply@github.com> 1639671787 +0100\n\nRollup merge of #91172 - Ethiraric:ethiraric/fix90979, r=petrochenkov\n\nWarn when a `#[test]`-like built-in attribute macro is present multiple times.\n\nFixes #90979.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7407c4e37d3342c20835bc2caaff28863078b266", "html_url": "https://github.com/rust-lang/rust/commit/7407c4e37d3342c20835bc2caaff28863078b266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7407c4e37d3342c20835bc2caaff28863078b266/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8402169aaa12e7bbb9630796a8caec90a3055ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8402169aaa12e7bbb9630796a8caec90a3055ca", "html_url": "https://github.com/rust-lang/rust/commit/f8402169aaa12e7bbb9630796a8caec90a3055ca"}, {"sha": "2be94d43019961f855589c1c6e2e27063537d30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2be94d43019961f855589c1c6e2e27063537d30a", "html_url": "https://github.com/rust-lang/rust/commit/2be94d43019961f855589c1c6e2e27063537d30a"}], "stats": {"total": 138, "additions": 134, "deletions": 4}, "files": [{"sha": "961a3ba9f19cf872505f91fd5dba3912422e0abb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -3688,6 +3688,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n+ \"rustc_lint_defs\",\n  \"rustc_parse\",\n  \"rustc_parse_format\",\n  \"rustc_session\","}, {"sha": "9031c3b2ecfbb57821e00d092a6391490b293267", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -15,6 +15,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "31086a2acf8cc2a0f0f5e723080b9da79ec5c59e", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -1,4 +1,4 @@\n-use crate::util::check_builtin_macro_attribute;\n+use crate::util::{check_builtin_macro_attribute, warn_on_duplicate_attribute};\n \n use rustc_ast as ast;\n use rustc_ast::mut_visit::MutVisitor;\n@@ -25,6 +25,7 @@ crate fn expand(\n     annotatable: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n+    warn_on_duplicate_attribute(&ecx, &annotatable, sym::cfg_eval);\n     vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable)]\n }\n "}, {"sha": "c08b141b557cae1db99280d915156929ab35d964", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -1,6 +1,6 @@\n /// The expansion from a test function to the appropriate test struct for libtest\n /// Ideally, this code would be in libtest but for efficiency and error messages it lives here.\n-use crate::util::check_builtin_macro_attribute;\n+use crate::util::{check_builtin_macro_attribute, warn_on_duplicate_attribute};\n \n use rustc_ast as ast;\n use rustc_ast::attr;\n@@ -27,6 +27,7 @@ pub fn expand_test_case(\n     anno_item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::test_case);\n+    warn_on_duplicate_attribute(&ecx, &anno_item, sym::test_case);\n \n     if !ecx.ecfg.should_test {\n         return vec![];\n@@ -55,6 +56,7 @@ pub fn expand_test(\n     item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(cx, meta_item, sym::test);\n+    warn_on_duplicate_attribute(&cx, &item, sym::test);\n     expand_test_or_bench(cx, attr_sp, item, false)\n }\n \n@@ -65,6 +67,7 @@ pub fn expand_bench(\n     item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(cx, meta_item, sym::bench);\n+    warn_on_duplicate_attribute(&cx, &item, sym::bench);\n     expand_test_or_bench(cx, attr_sp, item, true)\n }\n "}, {"sha": "527fe50eff0ceaa4d6dffeee84ef2fa045f947fe", "filename": "compiler/rustc_builtin_macros/src/util.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Futil.rs?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -1,6 +1,7 @@\n-use rustc_ast::MetaItem;\n-use rustc_expand::base::ExtCtxt;\n+use rustc_ast::{Attribute, MetaItem};\n+use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_feature::AttributeTemplate;\n+use rustc_lint_defs::builtin::DUPLICATE_MACRO_ATTRIBUTES;\n use rustc_parse::validate_attr;\n use rustc_span::Symbol;\n \n@@ -10,3 +11,33 @@ pub fn check_builtin_macro_attribute(ecx: &ExtCtxt<'_>, meta_item: &MetaItem, na\n     let attr = ecx.attribute(meta_item.clone());\n     validate_attr::check_builtin_attribute(&ecx.sess.parse_sess, &attr, name, template);\n }\n+\n+/// Emit a warning if the item is annotated with the given attribute. This is used to diagnose when\n+/// an attribute may have been mistakenly duplicated.\n+pub fn warn_on_duplicate_attribute(ecx: &ExtCtxt<'_>, item: &Annotatable, name: Symbol) {\n+    let attrs: Option<&[Attribute]> = match item {\n+        Annotatable::Item(item) => Some(&item.attrs),\n+        Annotatable::TraitItem(item) => Some(&item.attrs),\n+        Annotatable::ImplItem(item) => Some(&item.attrs),\n+        Annotatable::ForeignItem(item) => Some(&item.attrs),\n+        Annotatable::Expr(expr) => Some(&expr.attrs),\n+        Annotatable::Arm(arm) => Some(&arm.attrs),\n+        Annotatable::ExprField(field) => Some(&field.attrs),\n+        Annotatable::PatField(field) => Some(&field.attrs),\n+        Annotatable::GenericParam(param) => Some(&param.attrs),\n+        Annotatable::Param(param) => Some(&param.attrs),\n+        Annotatable::FieldDef(def) => Some(&def.attrs),\n+        Annotatable::Variant(variant) => Some(&variant.attrs),\n+        _ => None,\n+    };\n+    if let Some(attrs) = attrs {\n+        if let Some(attr) = ecx.sess.find_by_name(attrs, name) {\n+            ecx.parse_sess().buffer_lint(\n+                DUPLICATE_MACRO_ATTRIBUTES,\n+                attr.span,\n+                ecx.current_expansion.lint_node_id,\n+                \"duplicated attribute\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "27a06943cbc25b2f6b300866cc99ef3add07c3b2", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -3066,6 +3066,7 @@ declare_lint_pass! {\n         TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\n         DEREF_INTO_DYN_SUPERTRAIT,\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n+        DUPLICATE_MACRO_ATTRIBUTES,\n     ]\n }\n \n@@ -3603,3 +3604,32 @@ declare_lint! {\n         reference: \"issue #89460 <https://github.com/rust-lang/rust/issues/89460>\",\n     };\n }\n+\n+declare_lint! {\n+    /// The `duplicate_macro_attributes` lint detects when a `#[test]`-like built-in macro\n+    /// attribute is duplicated on an item. This lint may trigger on `bench`, `cfg_eval`, `test`\n+    /// and `test_case`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs --test)\n+    /// #[test]\n+    /// #[test]\n+    /// fn foo() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// A duplicated attribute may erroneously originate from a copy-paste and the effect of it\n+    /// being duplicated may not be obvious or desireable.\n+    ///\n+    /// For instance, doubling the `#[test]` attributes registers the test to be run twice with no\n+    /// change to its environment.\n+    ///\n+    /// [issue #90979]: https://github.com/rust-lang/rust/issues/90979\n+    pub DUPLICATE_MACRO_ATTRIBUTES,\n+    Warn,\n+    \"duplicated attribute\"\n+}"}, {"sha": "84a5abcf8b4bcec6f732edd8266a166269046a91", "filename": "src/test/ui/attributes/duplicated-attributes.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.rs?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -0,0 +1,41 @@\n+// Test that, if an item is annotated with a builtin attribute more than once, a warning is\n+// emitted.\n+// Tests https://github.com/rust-lang/rust/issues/90979\n+\n+// check-pass\n+// compile-flags: --test\n+\n+#![feature(test)]\n+#![feature(cfg_eval)]\n+\n+#[test]\n+#[test]\n+//~^ WARNING duplicated attribute\n+fn f() {}\n+\n+// The following shouldn't trigger an error. The attribute is not duplicated.\n+#[test]\n+fn f2() {}\n+\n+// The following shouldn't trigger an error either. The second attribute is not #[test].\n+#[test]\n+#[inline]\n+fn f3() {}\n+\n+extern crate test;\n+use test::Bencher;\n+\n+#[bench]\n+#[bench]\n+//~^ WARNING duplicated attribute\n+fn f4(_: &mut Bencher) {}\n+\n+#[cfg_eval]\n+#[cfg_eval]\n+//~^ WARNING duplicated attribute\n+struct S;\n+\n+#[cfg_eval]\n+struct S2;\n+\n+fn main() {}"}, {"sha": "735d950b27c220257573b9ff2a8e08782059dbb9", "filename": "src/test/ui/attributes/duplicated-attributes.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7407c4e37d3342c20835bc2caaff28863078b266/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7407c4e37d3342c20835bc2caaff28863078b266/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fduplicated-attributes.stderr?ref=7407c4e37d3342c20835bc2caaff28863078b266", "patch": "@@ -0,0 +1,22 @@\n+warning: duplicated attribute\n+  --> $DIR/duplicated-attributes.rs:12:1\n+   |\n+LL | #[test]\n+   | ^^^^^^^\n+   |\n+   = note: `#[warn(duplicate_macro_attributes)]` on by default\n+\n+warning: duplicated attribute\n+  --> $DIR/duplicated-attributes.rs:29:1\n+   |\n+LL | #[bench]\n+   | ^^^^^^^^\n+\n+warning: duplicated attribute\n+  --> $DIR/duplicated-attributes.rs:34:1\n+   |\n+LL | #[cfg_eval]\n+   | ^^^^^^^^^^^\n+\n+warning: 3 warnings emitted\n+"}]}