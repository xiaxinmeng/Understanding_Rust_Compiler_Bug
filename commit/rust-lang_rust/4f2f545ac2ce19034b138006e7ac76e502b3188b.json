{"sha": "4f2f545ac2ce19034b138006e7ac76e502b3188b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMmY1NDVhYzJjZTE5MDM0YjEzODAwNmU3YWM3NmU1MDJiMzE4OGI=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-10T21:45:59Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-11T18:05:27Z"}, "message": "add Iterator implementations for Option", "tree": {"sha": "e2e8749d451448a3f8b340ec4af67e5ba809acc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e8749d451448a3f8b340ec4af67e5ba809acc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2f545ac2ce19034b138006e7ac76e502b3188b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2f545ac2ce19034b138006e7ac76e502b3188b", "html_url": "https://github.com/rust-lang/rust/commit/4f2f545ac2ce19034b138006e7ac76e502b3188b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2f545ac2ce19034b138006e7ac76e502b3188b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea", "html_url": "https://github.com/rust-lang/rust/commit/d1d855993d0386fc13ad1b74df565b5ba6f6e4ea"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "8855ad0e30f5093b32930a7b3871ca5b4d7be3f1", "filename": "src/libstd/option.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4f2f545ac2ce19034b138006e7ac76e502b3188b/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2f545ac2ce19034b138006e7ac76e502b3188b/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=4f2f545ac2ce19034b138006e7ac76e502b3188b", "patch": "@@ -48,6 +48,7 @@ use util;\n use num::Zero;\n use old_iter::{BaseIter, MutableIter, ExtendedIter};\n use old_iter;\n+use iterator::Iterator;\n use str::StrSlice;\n use clone::DeepClone;\n \n@@ -146,7 +147,24 @@ impl<A> ExtendedIter<A> for Option<A> {\n }\n \n impl<T> Option<T> {\n+    #[inline]\n+    pub fn iter<'r>(&'r self) -> OptionIterator<'r, T> {\n+        match *self {\n+            Some(ref x) => OptionIterator{opt: Some(x)},\n+            None => OptionIterator{opt: None}\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn mut_iter<'r>(&'r mut self) -> OptionMutIterator<'r, T> {\n+        match *self {\n+            Some(ref mut x) => OptionMutIterator{opt: Some(x)},\n+            None => OptionMutIterator{opt: None}\n+        }\n+    }\n+\n     /// Returns true if the option equals `none`\n+    #[inline]\n     pub fn is_none(&const self) -> bool {\n         match *self { None => true, Some(_) => false }\n     }\n@@ -376,6 +394,26 @@ impl<T:Copy + Zero> Option<T> {\n     }\n }\n \n+pub struct OptionIterator<'self, A> {\n+    priv opt: Option<&'self A>\n+}\n+\n+impl<'self, A> Iterator<&'self A> for OptionIterator<'self, A> {\n+    fn next(&mut self) -> Option<&'self A> {\n+        util::replace(&mut self.opt, None)\n+    }\n+}\n+\n+pub struct OptionMutIterator<'self, A> {\n+    priv opt: Option<&'self mut A>\n+}\n+\n+impl<'self, A> Iterator<&'self mut A> for OptionMutIterator<'self, A> {\n+    fn next(&mut self) -> Option<&'self mut A> {\n+        util::replace(&mut self.opt, None)\n+    }\n+}\n+\n #[test]\n fn test_unwrap_ptr() {\n     unsafe {"}]}