{"sha": "447940c889d92b9cfa436a8c7fb964b1e1e4803a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Nzk0MGM4ODlkOTJiOWNmYTQzNmE4YzdmYjk2NGIxZTFlNDgwM2E=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-04-20T20:10:23Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-04-20T20:10:23Z"}, "message": "Added lint for mem_forget", "tree": {"sha": "d20463b0499d227f666471ef851d31137882bfa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d20463b0499d227f666471ef851d31137882bfa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447940c889d92b9cfa436a8c7fb964b1e1e4803a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447940c889d92b9cfa436a8c7fb964b1e1e4803a", "html_url": "https://github.com/rust-lang/rust/commit/447940c889d92b9cfa436a8c7fb964b1e1e4803a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447940c889d92b9cfa436a8c7fb964b1e1e4803a/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "html_url": "https://github.com/rust-lang/rust/commit/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "07a142060cb0bd77b353e88a3d761b0e8f57e776", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/447940c889d92b9cfa436a8c7fb964b1e1e4803a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447940c889d92b9cfa436a8c7fb964b1e1e4803a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=447940c889d92b9cfa436a8c7fb964b1e1e4803a", "patch": "@@ -78,6 +78,7 @@ pub mod len_zero;\n pub mod lifetimes;\n pub mod loops;\n pub mod map_clone;\n+pub mod mem_forget;\n pub mod matches;\n pub mod methods;\n pub mod minmax;\n@@ -236,13 +237,15 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_late_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n+    reg.register_late_lint_pass(box mem_forget::MemForget);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n         booleans::NONMINIMAL_BOOL,\n         enum_glob_use::ENUM_GLOB_USE,\n         if_not_else::IF_NOT_ELSE,\n         matches::SINGLE_MATCH_ELSE,\n+        mem_forget::MEM_FORGET,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,\n         methods::WRONG_PUB_SELF_CONVENTION,"}, {"sha": "836c60f84a97d5760814bae7075e3ab0f183b643", "filename": "src/mem_forget.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/447940c889d92b9cfa436a8c7fb964b1e1e4803a/src%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447940c889d92b9cfa436a8c7fb964b1e1e4803a/src%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmem_forget.rs?ref=447940c889d92b9cfa436a8c7fb964b1e1e4803a", "patch": "@@ -0,0 +1,38 @@\n+use rustc::lint::*;\n+use rustc::hir::{Expr, ExprCall, ExprPath};\n+use utils::{match_def_path, paths, span_lint};\n+\n+/// **What it does:** This lint checks for usage of `std::mem::forget(_)`.\n+///\n+/// **Why is this bad?** `std::mem::forget(t)` prevents `t` from running its destructor, possibly causing leaks\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `std::mem::forget(_))`\n+declare_lint! {\n+    pub MEM_FORGET,\n+    Allow,\n+    \"std::mem::forget usage is likely to cause memory leaks\"\n+}\n+\n+pub struct MemForget;\n+\n+impl LintPass for MemForget {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MEM_FORGET]\n+    }\n+}\n+\n+impl LateLintPass for MemForget {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let ExprCall(ref path_expr, _) = e.node {\n+            if let ExprPath(None, _) = path_expr.node {\n+                let def_id = cx.tcx.def_map.borrow()[&path_expr.id].def_id();\n+\n+                if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n+                    span_lint(cx, MEM_FORGET, e.span, \"usage of std::mem::forget\");\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "38985373085b606cf896f1915425605d9c504e35", "filename": "src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/447940c889d92b9cfa436a8c7fb964b1e1e4803a/src%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447940c889d92b9cfa436a8c7fb964b1e1e4803a/src%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fpaths.rs?ref=447940c889d92b9cfa436a8c7fb964b1e1e4803a", "patch": "@@ -20,6 +20,7 @@ pub const HASHMAP: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Ha\n pub const HASH: [&'static str; 2] = [\"hash\", \"Hash\"];\n pub const IO_PRINT: [&'static str; 3] = [\"std\", \"io\", \"_print\"];\n pub const LINKED_LIST: [&'static str; 3] = [\"collections\", \"linked_list\", \"LinkedList\"];\n+pub const MEM_FORGET: [&'static str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MUTEX: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPTION: [&'static str; 3] = [\"core\", \"option\", \"Option\"];"}, {"sha": "1b9cc810f968bfae2c893d52be47ceb584367a87", "filename": "tests/compile-fail/mem_forget.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/447940c889d92b9cfa436a8c7fb964b1e1e4803a/tests%2Fcompile-fail%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447940c889d92b9cfa436a8c7fb964b1e1e4803a/tests%2Fcompile-fail%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmem_forget.rs?ref=447940c889d92b9cfa436a8c7fb964b1e1e4803a", "patch": "@@ -0,0 +1,21 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+use std::sync::Arc;\n+\n+use std::mem::forget as forgetSomething;\n+use std::mem as memstuff;\n+\n+#[deny(mem_forget)]\n+fn main() {\n+    let five: i32 = 5;\n+    forgetSomething(five);\n+    //~^ ERROR usage of std::mem::forget\n+\n+    let six: Arc<i32> = Arc::new(6);\n+    memstuff::forget(six);\n+    //~^ ERROR usage of std::mem::forget\n+\n+    std::mem::forget(7);\n+    //~^ ERROR usage of std::mem::forget\n+}"}]}