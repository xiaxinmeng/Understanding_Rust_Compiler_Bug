{"sha": "89de52eff08d7416b9fd4ab0adc2e818590e84d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZGU1MmVmZjA4ZDc0MTZiOWZkNGFiMGFkYzJlODE4NTkwZTg0ZDA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-14T23:42:05Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T03:22:43Z"}, "message": "Add field `current_vis` to `Resolver`.", "tree": {"sha": "9b8a11f2eb4c70eef5e231ccb9f2f728189b04c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b8a11f2eb4c70eef5e231ccb9f2f728189b04c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89de52eff08d7416b9fd4ab0adc2e818590e84d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89de52eff08d7416b9fd4ab0adc2e818590e84d0", "html_url": "https://github.com/rust-lang/rust/commit/89de52eff08d7416b9fd4ab0adc2e818590e84d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89de52eff08d7416b9fd4ab0adc2e818590e84d0/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1362d8cc53176e0bf0db73fefc98ca9b9035457", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1362d8cc53176e0bf0db73fefc98ca9b9035457", "html_url": "https://github.com/rust-lang/rust/commit/c1362d8cc53176e0bf0db73fefc98ca9b9035457"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "579853446525e61d2fa6f9f982cf5fad48dfac0a", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89de52eff08d7416b9fd4ab0adc2e818590e84d0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89de52eff08d7416b9fd4ab0adc2e818590e84d0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=89de52eff08d7416b9fd4ab0adc2e818590e84d0", "patch": "@@ -81,6 +81,7 @@ impl<'b> Resolver<'b> {\n     /// Constructs the reduced graph for one item.\n     fn build_reduced_graph_for_item(&mut self, item: &Item) {\n         let parent = self.current_module;\n+        let parent_vis = self.current_vis;\n         let name = item.ident.name;\n         let sp = item.span;\n         let vis = self.resolve_visibility(&item.vis);\n@@ -207,7 +208,10 @@ impl<'b> Resolver<'b> {\n                 });\n                 self.define(parent, name, TypeNS, (module, sp, vis));\n                 self.module_map.insert(item.id, module);\n-                self.current_module = module; // Descend into the module.\n+\n+                // Descend into the module.\n+                self.current_module = module;\n+                self.current_vis = ty::Visibility::Restricted(item.id);\n             }\n \n             ItemKind::ForeignMod(..) => {}\n@@ -303,6 +307,7 @@ impl<'b> Resolver<'b> {\n \n         visit::walk_item(&mut BuildReducedGraphVisitor { resolver: self }, item);\n         self.current_module = parent;\n+        self.current_vis = parent_vis;\n     }\n \n     // Constructs the reduced graph for one variant. Variants exist in the"}, {"sha": "08cfc662e9bea71ef88b5124a7e80d5b6c5303f9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/89de52eff08d7416b9fd4ab0adc2e818590e84d0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89de52eff08d7416b9fd4ab0adc2e818590e84d0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=89de52eff08d7416b9fd4ab0adc2e818590e84d0", "patch": "@@ -969,6 +969,10 @@ pub struct Resolver<'a> {\n     // The module that represents the current item scope.\n     current_module: Module<'a>,\n \n+    // The visibility of `pub(self)` items in the current scope.\n+    // Equivalently, the visibility required for an item to be accessible from the current scope.\n+    current_vis: ty::Visibility,\n+\n     // The current set of local scopes, for values.\n     // FIXME #4948: Reuse ribs to avoid allocation.\n     value_ribs: Vec<Rib<'a>>,\n@@ -1154,6 +1158,7 @@ impl<'a> Resolver<'a> {\n             indeterminate_imports: Vec::new(),\n \n             current_module: graph_root,\n+            current_vis: ty::Visibility::Restricted(ast::CRATE_NODE_ID),\n             value_ribs: vec![Rib::new(ModuleRibKind(graph_root))],\n             type_ribs: vec![Rib::new(ModuleRibKind(graph_root))],\n             label_ribs: Vec::new(),\n@@ -1197,6 +1202,7 @@ impl<'a> Resolver<'a> {\n     /// Entry point to crate resolution.\n     pub fn resolve_crate(&mut self, krate: &Crate) {\n         self.current_module = self.graph_root;\n+        self.current_vis = ty::Visibility::Restricted(ast::CRATE_NODE_ID);\n         visit::walk_crate(self, krate);\n \n         check_unused::check_crate(self, krate);\n@@ -1562,13 +1568,15 @@ impl<'a> Resolver<'a> {\n         let module = self.module_map.get(&id).cloned(); // clones a reference\n         if let Some(module) = module {\n             // Move down in the graph.\n-            let orig_module = ::std::mem::replace(&mut self.current_module, module);\n+            let orig_module = replace(&mut self.current_module, module);\n+            let orig_vis = replace(&mut self.current_vis, ty::Visibility::Restricted(id));\n             self.value_ribs.push(Rib::new(ModuleRibKind(module)));\n             self.type_ribs.push(Rib::new(ModuleRibKind(module)));\n \n             f(self);\n \n             self.current_module = orig_module;\n+            self.current_vis = orig_vis;\n             self.value_ribs.pop();\n             self.type_ribs.pop();\n         } else {\n@@ -2706,7 +2714,6 @@ impl<'a> Resolver<'a> {\n     fn with_empty_ribs<T, F>(&mut self, f: F) -> T\n         where F: FnOnce(&mut Resolver<'a>) -> T,\n     {\n-        use ::std::mem::replace;\n         let value_ribs = replace(&mut self.value_ribs, Vec::new());\n         let type_ribs = replace(&mut self.type_ribs, Vec::new());\n         let label_ribs = replace(&mut self.label_ribs, Vec::new());\n@@ -3264,13 +3271,7 @@ impl<'a> Resolver<'a> {\n             ast::Visibility::Public => return ty::Visibility::Public,\n             ast::Visibility::Crate(_) => return ty::Visibility::Restricted(ast::CRATE_NODE_ID),\n             ast::Visibility::Restricted { ref path, id } => (path, id),\n-            ast::Visibility::Inherited => {\n-                let current_module =\n-                    self.get_nearest_normal_module_parent_or_self(self.current_module);\n-                let id =\n-                    self.definitions.as_local_node_id(current_module.def_id().unwrap()).unwrap();\n-                return ty::Visibility::Restricted(id);\n-            }\n+            ast::Visibility::Inherited => return self.current_vis,\n         };\n \n         let segments: Vec<_> = path.segments.iter().map(|seg| seg.identifier.name).collect();\n@@ -3299,9 +3300,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_accessible(&self, vis: ty::Visibility) -> bool {\n-        let current_module = self.get_nearest_normal_module_parent_or_self(self.current_module);\n-        let node_id = self.definitions.as_local_node_id(current_module.def_id().unwrap()).unwrap();\n-        vis.is_accessible_from(node_id, self)\n+        vis.is_at_least(self.current_vis, self)\n     }\n \n     fn check_privacy(&mut self, name: Name, binding: &'a NameBinding<'a>, span: Span) {"}, {"sha": "17933abec27b03ff81ba028dffa3b14c053e0a80", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89de52eff08d7416b9fd4ab0adc2e818590e84d0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89de52eff08d7416b9fd4ab0adc2e818590e84d0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=89de52eff08d7416b9fd4ab0adc2e818590e84d0", "patch": "@@ -356,6 +356,14 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     // remain or unsuccessfully when no forward progress in resolving imports\n     // is made.\n \n+    fn set_current_module(&mut self, module: Module<'b>) {\n+        self.current_module = module;\n+        self.current_vis = ty::Visibility::Restricted({\n+            let normal_module = self.get_nearest_normal_module_parent_or_self(module);\n+            self.definitions.as_local_node_id(normal_module.def_id().unwrap()).unwrap()\n+        });\n+    }\n+\n     /// Resolves all imports for the crate. This method performs the fixed-\n     /// point iteration.\n     fn resolve_imports(&mut self) {\n@@ -449,7 +457,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                module_to_string(self.current_module));\n \n         let module = directive.parent;\n-        self.current_module = module;\n+        self.set_current_module(module);\n \n         let target_module = match directive.target_module.get() {\n             Some(module) => module,"}]}