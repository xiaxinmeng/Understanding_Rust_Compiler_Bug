{"sha": "ecb51fe6a55f975f2d3bfd65d3568c263c248460", "node_id": "C_kwDOAAsO6NoAKGVjYjUxZmU2YTU1Zjk3NWYyZDNiZmQ2NWQzNTY4YzI2M2MyNDg0NjA", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-08T14:25:05Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-08T14:25:05Z"}, "message": "Lint `explicit_auto_deref` in implicit return positions for closures", "tree": {"sha": "82adc266358f5dfa2c222a5537cff6bca1f2dd75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82adc266358f5dfa2c222a5537cff6bca1f2dd75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecb51fe6a55f975f2d3bfd65d3568c263c248460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb51fe6a55f975f2d3bfd65d3568c263c248460", "html_url": "https://github.com/rust-lang/rust/commit/ecb51fe6a55f975f2d3bfd65d3568c263c248460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecb51fe6a55f975f2d3bfd65d3568c263c248460/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5285928bc0190efb54495d8126b68778873884b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5285928bc0190efb54495d8126b68778873884b9", "html_url": "https://github.com/rust-lang/rust/commit/5285928bc0190efb54495d8126b68778873884b9"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "1c19a9e0e60eed8e242db8cb787fbcdb19bfdb8d", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ecb51fe6a55f975f2d3bfd65d3568c263c248460/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb51fe6a55f975f2d3bfd65d3568c263c248460/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=ecb51fe6a55f975f2d3bfd65d3568c263c248460", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n-use clippy_utils::ty::{expr_sig, peel_mid_ty_refs, variant_of_res};\n+use clippy_utils::ty::{expr_sig, peel_mid_ty_refs, ty_sig, variant_of_res};\n use clippy_utils::{get_parent_expr, is_lint_allowed, path_to_local, walk_to_expr_usage};\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n@@ -704,24 +704,13 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                     let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n                     Some(\n                         if let Node::Expr(\n-                            closure @ Expr {\n-                                kind: ExprKind::Closure(&Closure { fn_decl, .. }),\n+                            closure_expr @ Expr {\n+                                kind: ExprKind::Closure(closure),\n                                 ..\n                             },\n                         ) = cx.tcx.hir().get(owner_id)\n                         {\n-                            match fn_decl.output {\n-                                FnRetTy::Return(ty) => {\n-                                    if let Some(sig) = expr_sig(cx, closure)\n-                                        && let Some(output) = sig.output()\n-                                    {\n-                                        binding_ty_auto_deref_stability(cx, ty, precedence, output.bound_vars())\n-                                    } else {\n-                                        Position::Other(precedence)\n-                                    }\n-                                },\n-                                FnRetTy::DefaultReturn(_) => Position::Other(precedence),\n-                            }\n+                            closure_result_position(cx, closure, cx.typeck_results().expr_ty(closure_expr), precedence)\n                         } else {\n                             let output = cx\n                                 .tcx\n@@ -730,6 +719,12 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                         },\n                     )\n                 },\n+                ExprKind::Closure(closure) => Some(closure_result_position(\n+                    cx,\n+                    closure,\n+                    cx.typeck_results().expr_ty(parent),\n+                    precedence,\n+                )),\n                 ExprKind::Call(func, _) if func.hir_id == child_id => {\n                     (child_id == e.hir_id).then_some(Position::Callee)\n                 },\n@@ -825,6 +820,26 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n     (position, adjustments)\n }\n \n+fn closure_result_position<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    closure: &'tcx Closure<'_>,\n+    ty: Ty<'tcx>,\n+    precedence: i8,\n+) -> Position {\n+    match closure.fn_decl.output {\n+        FnRetTy::Return(hir_ty) => {\n+            if let Some(sig) = ty_sig(cx, ty)\n+                && let Some(output) = sig.output()\n+            {\n+                binding_ty_auto_deref_stability(cx, hir_ty, precedence, output.bound_vars())\n+            } else {\n+                Position::Other(precedence)\n+            }\n+        },\n+        FnRetTy::DefaultReturn(_) => Position::Other(precedence),\n+    }\n+}\n+\n // Checks the stability of auto-deref when assigned to a binding with the given explicit type.\n //\n // e.g."}, {"sha": "e7d670766a050203793c22970b12c09bc26c2806", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecb51fe6a55f975f2d3bfd65d3568c263c248460/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb51fe6a55f975f2d3bfd65d3568c263c248460/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=ecb51fe6a55f975f2d3bfd65d3568c263c248460", "patch": "@@ -572,7 +572,8 @@ pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnS\n     }\n }\n \n-fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n+/// If the type is function like, get the signature for it.\n+pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'tcx>> {\n     if ty.is_box() {\n         return ty_sig(cx, ty.boxed_ty());\n     }"}, {"sha": "d1d35e5c0eb46f493aaa3c7b07fdda965be3bef4", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecb51fe6a55f975f2d3bfd65d3568c263c248460/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ecb51fe6a55f975f2d3bfd65d3568c263c248460/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=ecb51fe6a55f975f2d3bfd65d3568c263c248460", "patch": "@@ -257,13 +257,13 @@ fn main() {\n     let x = S7([0]);\n     let _: &[u32] = &*x;\n \n-    let c1 = |x: &Vec<&u32>| {};\n+    let c1 = |_: &Vec<&u32>| {};\n     let x = &&vec![&1u32];\n     c1(x);\n     let _ = for<'a, 'b> |x: &'a &'a Vec<&'b u32>, b: bool| -> &'a Vec<&'b u32> {\n         if b {\n             return x;\n         }\n-        *x\n+        x\n     };\n }"}, {"sha": "deedafad153b97ae0edd6d777637516d65c33410", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecb51fe6a55f975f2d3bfd65d3568c263c248460/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecb51fe6a55f975f2d3bfd65d3568c263c248460/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=ecb51fe6a55f975f2d3bfd65d3568c263c248460", "patch": "@@ -257,7 +257,7 @@ fn main() {\n     let x = S7([0]);\n     let _: &[u32] = &*x;\n \n-    let c1 = |x: &Vec<&u32>| {};\n+    let c1 = |_: &Vec<&u32>| {};\n     let x = &&vec![&1u32];\n     c1(*x);\n     let _ = for<'a, 'b> |x: &'a &'a Vec<&'b u32>, b: bool| -> &'a Vec<&'b u32> {"}, {"sha": "91863abcc5d2436cb297493c45c8f88a74e88703", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecb51fe6a55f975f2d3bfd65d3568c263c248460/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecb51fe6a55f975f2d3bfd65d3568c263c248460/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=ecb51fe6a55f975f2d3bfd65d3568c263c248460", "patch": "@@ -228,5 +228,11 @@ error: deref which would be done by auto-deref\n LL |             return *x;\n    |                    ^^ help: try this: `x`\n \n-error: aborting due to 38 previous errors\n+error: deref which would be done by auto-deref\n+  --> $DIR/explicit_auto_deref.rs:267:9\n+   |\n+LL |         *x\n+   |         ^^ help: try this: `x`\n+\n+error: aborting due to 39 previous errors\n "}]}