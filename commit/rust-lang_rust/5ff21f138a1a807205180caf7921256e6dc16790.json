{"sha": "5ff21f138a1a807205180caf7921256e6dc16790", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZjIxZjEzOGExYTgwNzIwNTE4MGNhZjc5MjEyNTZlNmRjMTY3OTA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-17T11:05:09Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-27T03:53:42Z"}, "message": "Refactor ModuleS fields `public_glob_count`, `private_glob_count`, and\n`resolved_globs` into a single field `globs: RefCell<Vec<ImportDirective>>`.", "tree": {"sha": "570ae84be15c43974bcbffbbc4a37958c37fd66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/570ae84be15c43974bcbffbbc4a37958c37fd66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ff21f138a1a807205180caf7921256e6dc16790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff21f138a1a807205180caf7921256e6dc16790", "html_url": "https://github.com/rust-lang/rust/commit/5ff21f138a1a807205180caf7921256e6dc16790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ff21f138a1a807205180caf7921256e6dc16790/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1bc02da84db560729e5f6276759001b234bb6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1bc02da84db560729e5f6276759001b234bb6c", "html_url": "https://github.com/rust-lang/rust/commit/0d1bc02da84db560729e5f6276759001b234bb6c"}], "stats": {"total": 82, "additions": 25, "deletions": 57}, "files": [{"sha": "2480fd02bea1d62bce238e78041d4f76afffecc3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ff21f138a1a807205180caf7921256e6dc16790/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff21f138a1a807205180caf7921256e6dc16790/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=5ff21f138a1a807205180caf7921256e6dc16790", "patch": "@@ -538,13 +538,6 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                 module_.increment_outstanding_references_for(target, ValueNS, is_public);\n                 module_.increment_outstanding_references_for(target, TypeNS, is_public);\n             }\n-            GlobImport if !is_prelude => {\n-                // Set the glob flag. This tells us that we don't know the\n-                // module's exports ahead of time.\n-                module_.inc_glob_count(is_public)\n-            }\n-            // Prelude imports are not included in the glob counts since they do not get added to\n-            // `resolved_globs` -- they are handled separately in `resolve_imports`.\n             GlobImport => {}\n         }\n "}, {"sha": "cc229f1f16136cd9d9edba4345ea538ae7671336", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ff21f138a1a807205180caf7921256e6dc16790/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff21f138a1a807205180caf7921256e6dc16790/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5ff21f138a1a807205180caf7921256e6dc16790", "patch": "@@ -849,13 +849,7 @@ pub struct ModuleS<'a> {\n     prelude: RefCell<Option<Module<'a>>>,\n \n     glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective<'a>)>>,\n-    resolved_globs: RefCell<(Vec<Module<'a>> /* public */, Vec<Module<'a>> /* private */)>,\n-\n-    // The number of public glob imports in this module.\n-    public_glob_count: Cell<usize>,\n-\n-    // The number of private glob imports in this module.\n-    private_glob_count: Cell<usize>,\n+    globs: RefCell<Vec<&'a ImportDirective<'a>>>,\n \n     // Whether this module is populated. If not populated, any attempt to\n     // access the children must be preceded with a\n@@ -883,19 +877,12 @@ impl<'a> ModuleS<'a> {\n             module_children: RefCell::new(NodeMap()),\n             prelude: RefCell::new(None),\n             glob_importers: RefCell::new(Vec::new()),\n-            resolved_globs: RefCell::new((Vec::new(), Vec::new())),\n-            public_glob_count: Cell::new(0),\n-            private_glob_count: Cell::new(0),\n+            globs: RefCell::new((Vec::new())),\n             populated: Cell::new(!external),\n             arenas: arenas\n         }\n     }\n \n-    fn add_import_directive(&self, import_directive: ImportDirective<'a>) {\n-        let import_directive = self.arenas.alloc_import_directive(import_directive);\n-        self.unresolved_imports.borrow_mut().push(import_directive);\n-    }\n-\n     fn for_each_child<F: FnMut(Name, Namespace, &'a NameBinding<'a>)>(&self, mut f: F) {\n         for (&(name, ns), name_resolution) in self.resolutions.borrow().iter() {\n             name_resolution.binding.map(|binding| f(name, ns, binding));\n@@ -928,11 +915,6 @@ impl<'a> ModuleS<'a> {\n             _ => false,\n         }\n     }\n-\n-    fn inc_glob_count(&self, is_public: bool) {\n-        let glob_count = if is_public { &self.public_glob_count } else { &self.private_glob_count };\n-        glob_count.set(glob_count.get() + 1);\n-    }\n }\n \n impl<'a> fmt::Debug for ModuleS<'a> {"}, {"sha": "86cfa928a9d2befbb6f8dcb978a309ac757248b5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5ff21f138a1a807205180caf7921256e6dc16790/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff21f138a1a807205180caf7921256e6dc16790/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5ff21f138a1a807205180caf7921256e6dc16790", "patch": "@@ -212,29 +212,15 @@ impl<'a> ::ModuleS<'a> {\n             });\n         }\n \n-        let (ref mut public_globs, ref mut private_globs) = *self.resolved_globs.borrow_mut();\n-\n-        // Check if the public globs are determined\n-        if public_globs.len() < self.public_glob_count.get() {\n-            return Indeterminate;\n-        }\n-        for module in public_globs.iter() {\n-            if let Indeterminate = module.resolve_name(name, ns, false) {\n-                return Indeterminate;\n-            }\n-        }\n-\n-        if !allow_private_imports {\n-            return Failed(None);\n-        }\n-\n-        // Check if the private globs are determined\n-        if private_globs.len() < self.private_glob_count.get() {\n-            return Indeterminate;\n-        }\n-        for module in private_globs.iter() {\n-            if let Indeterminate = module.resolve_name(name, ns, false) {\n-                return Indeterminate;\n+        // Check if the globs are determined\n+        for directive in self.globs.borrow().iter() {\n+            if !allow_private_imports && !directive.is_public { continue }\n+            match directive.target_module.get() {\n+                None => return Indeterminate,\n+                Some(target_module) => match target_module.resolve_name(name, ns, false) {\n+                    Indeterminate => return Indeterminate,\n+                    _ => {}\n+                }\n             }\n         }\n \n@@ -259,6 +245,18 @@ impl<'a> ::ModuleS<'a> {\n         })\n     }\n \n+    pub fn add_import_directive(&self, directive: ImportDirective<'a>) {\n+        let directive = self.arenas.alloc_import_directive(directive);\n+        self.unresolved_imports.borrow_mut().push(directive);\n+        if let GlobImport = directive.subclass {\n+            // We don't add prelude imports to the globs since they only affect lexical scopes,\n+            // which are not relevant to import resolution.\n+            if !directive.is_prelude {\n+                self.globs.borrow_mut().push(directive);\n+            }\n+        }\n+    }\n+\n     pub fn increment_outstanding_references_for(&self, name: Name, ns: Namespace, is_public: bool) {\n         self.resolutions.borrow_mut().entry((name, ns)).or_insert_with(Default::default)\n             .increment_outstanding_references(is_public);\n@@ -603,12 +601,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             return Success(());\n         }\n \n-        // Add to target_module's glob_importers and module_'s resolved_globs\n+        // Add to target_module's glob_importers\n         target_module.glob_importers.borrow_mut().push((module_, directive));\n-        match *module_.resolved_globs.borrow_mut() {\n-            (ref mut public_globs, _) if directive.is_public => public_globs.push(target_module),\n-            (_, ref mut private_globs) => private_globs.push(target_module),\n-        }\n \n         for (&(name, ns), resolution) in target_module.resolutions.borrow().iter() {\n             if let Some(Success(binding)) = resolution.try_result(false) {\n@@ -635,8 +629,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     // reporting conflicts, reporting the PRIVATE_IN_PUBLIC lint, and reporting unresolved imports.\n     fn finalize_resolutions(&mut self, module: Module<'b>, report_unresolved_imports: bool) {\n         // Since import resolution is finished, globs will not define any more names.\n-        module.public_glob_count.set(0); module.private_glob_count.set(0);\n-        *module.resolved_globs.borrow_mut() = (Vec::new(), Vec::new());\n+        *module.globs.borrow_mut() = Vec::new();\n \n         let mut reexports = Vec::new();\n         for (&(name, ns), resolution) in module.resolutions.borrow().iter() {"}]}