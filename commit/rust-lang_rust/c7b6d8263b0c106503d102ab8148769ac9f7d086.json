{"sha": "c7b6d8263b0c106503d102ab8148769ac9f7d086", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YjZkODI2M2IwYzEwNjUwM2QxMDJhYjgxNDg3NjlhYzlmN2QwODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-08T21:33:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-08T21:33:50Z"}, "message": "Auto merge of #45837 - SimonSapin:file_read_write, r=dtolnay\n\nAdd read, read_string, and write functions to std::fs\n\nNew APIs in `std::fs`:\n\n```rust\npub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> { \u2026 }\npub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> { \u2026 }\npub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> { ... }\n```\n\n(`read_string` is based on `read_to_string` and so returns an error on non-UTF-8 content.)\n\nBefore:\n\n```rust\nuse std::fs::File;\nuse std::io::Read;\n\nlet mut bytes = Vec::new();\nFile::open(filename)?.read_to_end(&mut bytes)?;\ndo_something_with(bytes)\n```\n\nAfter:\n\n```rust\nuse std::fs;\n\ndo_something_with(fs::read(filename)?)\n```", "tree": {"sha": "7ca26adbc35853f2715399407195409f07e4b16f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca26adbc35853f2715399407195409f07e4b16f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b6d8263b0c106503d102ab8148769ac9f7d086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6d8263b0c106503d102ab8148769ac9f7d086", "html_url": "https://github.com/rust-lang/rust/commit/c7b6d8263b0c106503d102ab8148769ac9f7d086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6d8263b0c106503d102ab8148769ac9f7d086/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3543db3408b8d4ca53133a2999833befde8494", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3543db3408b8d4ca53133a2999833befde8494", "html_url": "https://github.com/rust-lang/rust/commit/ad3543db3408b8d4ca53133a2999833befde8494"}, {"sha": "c5eff5442ca963e20225c8229aff7be28f65a0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5eff5442ca963e20225c8229aff7be28f65a0a6", "html_url": "https://github.com/rust-lang/rust/commit/c5eff5442ca963e20225c8229aff7be28f65a0a6"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "f40aed2478a17845c0920c9c55f3859b3f9f9fb1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6d8263b0c106503d102ab8148769ac9f7d086/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6d8263b0c106503d102ab8148769ac9f7d086/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=c7b6d8263b0c106503d102ab8148769ac9f7d086", "patch": "@@ -211,6 +211,115 @@ pub struct DirBuilder {\n     recursive: bool,\n }\n \n+/// Read the entire contents of a file into a bytes vector.\n+///\n+/// This is a convenience function for using [`File::open`] and [`read_to_end`]\n+/// with fewer imports and without an intermediate variable.\n+///\n+/// [`File::open`]: struct.File.html#method.open\n+/// [`read_to_end`]: ../io/trait.Read.html#method.read_to_end\n+///\n+/// # Errors\n+///\n+/// This function will return an error if `path` does not already exist.\n+/// Other errors may also be returned according to [`OpenOptions::open`].\n+///\n+/// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n+///\n+/// It will also return an error if it encounters while reading an error\n+/// of a kind other than [`ErrorKind::Interrupted`].\n+///\n+/// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(fs_read_write)]\n+///\n+/// use std::fs;\n+/// use std::net::SocketAddr;\n+///\n+/// # fn foo() -> Result<(), Box<std::error::Error + 'static>> {\n+/// let foo: SocketAddr = String::from_utf8_lossy(&fs::read(\"address.txt\")?).parse()?;\n+/// # Ok(())\n+/// # }\n+/// ```\n+#[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n+pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n+    let mut bytes = Vec::new();\n+    File::open(path)?.read_to_end(&mut bytes)?;\n+    Ok(bytes)\n+}\n+\n+/// Read the entire contents of a file into a string.\n+///\n+/// This is a convenience function for using [`File::open`] and [`read_to_string`]\n+/// with fewer imports and without an intermediate variable.\n+///\n+/// [`File::open`]: struct.File.html#method.open\n+/// [`read_to_string`]: ../io/trait.Read.html#method.read_to_string\n+///\n+/// # Errors\n+///\n+/// This function will return an error if `path` does not already exist.\n+/// Other errors may also be returned according to [`OpenOptions::open`].\n+///\n+/// [`OpenOptions::open`]: struct.OpenOptions.html#method.open\n+///\n+/// It will also return an error if it encounters while reading an error\n+/// of a kind other than [`ErrorKind::Interrupted`],\n+/// or if the contents of the file are not valid UTF-8.\n+///\n+/// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(fs_read_write)]\n+///\n+/// use std::fs;\n+/// use std::net::SocketAddr;\n+///\n+/// # fn foo() -> Result<(), Box<std::error::Error + 'static>> {\n+/// let foo: SocketAddr = fs::read_string(\"address.txt\")?.parse()?;\n+/// # Ok(())\n+/// # }\n+/// ```\n+#[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n+pub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n+    let mut string = String::new();\n+    File::open(path)?.read_to_string(&mut string)?;\n+    Ok(string)\n+}\n+\n+/// Write a slice as the entire contents of a file.\n+///\n+/// This function will create a file if it does not exist,\n+/// and will entirely replace its contents if it does.\n+///\n+/// This is a convenience function for using [`File::create`] and [`write_all`]\n+/// with fewer imports.\n+///\n+/// [`File::create`]: struct.File.html#method.create\n+/// [`write_all`]: ../io/trait.Write.html#method.write_all\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(fs_read_write)]\n+///\n+/// use std::fs;\n+///\n+/// # fn foo() -> std::io::Result<()> {\n+/// fs::write(\"foo.txt\", b\"Lorem ipsum\")?;\n+/// # Ok(())\n+/// # }\n+/// ```\n+#[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n+pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n+    File::create(path)?.write_all(contents.as_ref())\n+}\n+\n impl File {\n     /// Attempts to open a file in read-only mode.\n     ///\n@@ -1912,7 +2021,9 @@ mod tests {\n     ) }\n \n     #[cfg(unix)]\n-    macro_rules! error { ($e:expr, $s:expr) => (\n+    macro_rules! error { ($e:expr, $s:expr) => ( error_contains!($e, $s) ) }\n+\n+    macro_rules! error_contains { ($e:expr, $s:expr) => (\n         match $e {\n             Ok(_) => panic!(\"Unexpected success. Should've been: {:?}\", $s),\n             Err(ref err) => assert!(err.to_string().contains($s),\n@@ -2921,6 +3032,27 @@ mod tests {\n         assert!(v == &bytes[..]);\n     }\n \n+    #[test]\n+    fn write_then_read() {\n+        let mut bytes = [0; 1024];\n+        StdRng::new().unwrap().fill_bytes(&mut bytes);\n+\n+        let tmpdir = tmpdir();\n+\n+        check!(fs::write(&tmpdir.join(\"test\"), &bytes[..]));\n+        let v = check!(fs::read(&tmpdir.join(\"test\")));\n+        assert!(v == &bytes[..]);\n+\n+        check!(fs::write(&tmpdir.join(\"not-utf8\"), &[0xFF]));\n+        error_contains!(fs::read_string(&tmpdir.join(\"not-utf8\")),\n+                        \"stream did not contain valid UTF-8\");\n+\n+        let s = \"\ud800\udc41\ud800\udc13\ud800\udc20\ud800\udc34\ud800\udc0d\";\n+        check!(fs::write(&tmpdir.join(\"utf8\"), s.as_bytes()));\n+        let string = check!(fs::read_string(&tmpdir.join(\"utf8\")));\n+        assert_eq!(string, s);\n+    }\n+\n     #[test]\n     fn file_try_clone() {\n         let tmpdir = tmpdir();"}, {"sha": "12e6231136e16d96ff272d81bda466a55deef3cb", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6d8263b0c106503d102ab8148769ac9f7d086/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6d8263b0c106503d102ab8148769ac9f7d086/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c7b6d8263b0c106503d102ab8148769ac9f7d086", "patch": "@@ -260,6 +260,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(fs_read_write)]\n #![feature(fixed_size_array)]\n #![feature(float_from_str_radix)]\n #![feature(fn_traits)]"}]}