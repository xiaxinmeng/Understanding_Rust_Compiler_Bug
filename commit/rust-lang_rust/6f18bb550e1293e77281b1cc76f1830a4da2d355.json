{"sha": "6f18bb550e1293e77281b1cc76f1830a4da2d355", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMThiYjU1MGUxMjkzZTc3MjgxYjFjYzc2ZjE4MzBhNGRhMmQzNTU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-30T17:01:20Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-30T17:07:14Z"}, "message": "iter: add a find function", "tree": {"sha": "33d101fa2b1800070f7d795a6d389c742264f1fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d101fa2b1800070f7d795a6d389c742264f1fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f18bb550e1293e77281b1cc76f1830a4da2d355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f18bb550e1293e77281b1cc76f1830a4da2d355", "html_url": "https://github.com/rust-lang/rust/commit/6f18bb550e1293e77281b1cc76f1830a4da2d355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f18bb550e1293e77281b1cc76f1830a4da2d355/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fed4800733805156f0d157e45b01de405c4b48e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fed4800733805156f0d157e45b01de405c4b48e", "html_url": "https://github.com/rust-lang/rust/commit/7fed4800733805156f0d157e45b01de405c4b48e"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "6f3c6890228acdbf282eb23b39e480945054e6da", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f18bb550e1293e77281b1cc76f1830a4da2d355/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f18bb550e1293e77281b1cc76f1830a4da2d355/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=6f18bb550e1293e77281b1cc76f1830a4da2d355", "patch": "@@ -41,6 +41,8 @@ much easier to implement.\n \n */\n \n+use option::{Option, Some, None};\n+\n pub trait Times {\n     fn times(&self, it: &fn() -> bool);\n }\n@@ -104,6 +106,27 @@ pub fn all<T>(predicate: &fn(T) -> bool, iter: &fn(f: &fn(T) -> bool)) -> bool {\n     true\n }\n \n+/**\n+ * Return the first element where `predicate` returns `true`, otherwise return `Npne` if no element\n+ * is found.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * let xs = ~[1u, 2, 3, 4, 5, 6];\n+ * assert_eq!(*find(|& &x: & &uint| x > 3, |f| xs.each(f)).unwrap(), 4);\n+ * ~~~~\n+ */\n+#[inline(always)]\n+pub fn find<T>(predicate: &fn(&T) -> bool, iter: &fn(f: &fn(T) -> bool)) -> Option<T> {\n+    for iter |x| {\n+        if predicate(&x) {\n+            return Some(x);\n+        }\n+    }\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -128,4 +151,10 @@ mod tests {\n         assert!(all(|x: uint| x < 6, |f| uint::range(1, 6, f)));\n         assert!(!all(|x: uint| x < 5, |f| uint::range(1, 6, f)));\n     }\n+\n+    #[test]\n+    fn test_find() {\n+        let xs = ~[1u, 2, 3, 4, 5, 6];\n+        assert_eq!(*find(|& &x: & &uint| x > 3, |f| xs.each(f)).unwrap(), 4);\n+    }\n }"}]}