{"sha": "e37ba706ccc435346c35042c2b6c4b483494268b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzN2JhNzA2Y2NjNDM1MzQ2YzM1MDQyYzJiNmM0YjQ4MzQ5NDI2OGI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-07T10:41:42Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-11-07T10:41:42Z"}, "message": "cargo format", "tree": {"sha": "88ff5304460cc8c8a4614a4bf240d4253126d6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88ff5304460cc8c8a4614a4bf240d4253126d6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37ba706ccc435346c35042c2b6c4b483494268b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37ba706ccc435346c35042c2b6c4b483494268b", "html_url": "https://github.com/rust-lang/rust/commit/e37ba706ccc435346c35042c2b6c4b483494268b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37ba706ccc435346c35042c2b6c4b483494268b/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94796e6447c8af9d7444164c2175ca5dae4a563e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94796e6447c8af9d7444164c2175ca5dae4a563e", "html_url": "https://github.com/rust-lang/rust/commit/94796e6447c8af9d7444164c2175ca5dae4a563e"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "a2509dc9075fc23c4b791dc2225cbffd1eaba3aa", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e37ba706ccc435346c35042c2b6c4b483494268b/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ba706ccc435346c35042c2b6c4b483494268b/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=e37ba706ccc435346c35042c2b6c4b483494268b", "patch": "@@ -49,14 +49,16 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n                 if text.len() < 4 {\n                     errors.push(SyntaxError::new(TooShortAsciiCodeEscape, range));\n                 } else {\n-                    assert!(text.chars().count() == 4, \"AsciiCodeEscape cannot be longer than 4 chars\");\n+                    assert!(\n+                        text.chars().count() == 4,\n+                        \"AsciiCodeEscape cannot be longer than 4 chars\"\n+                    );\n \n                     match u8::from_str_radix(&text[2..], 16) {\n-                        Ok(code) if code < 128 => { /* Escape code is valid */ },\n+                        Ok(code) if code < 128 => { /* Escape code is valid */ }\n                         Ok(_) => errors.push(SyntaxError::new(AsciiCodeEscapeOutOfRange, range)),\n                         Err(_) => errors.push(SyntaxError::new(MalformedAsciiCodeEscape, range)),\n                     }\n-\n                 }\n             }\n             UnicodeEscape => {\n@@ -127,7 +129,7 @@ fn validate_char(node: ast::Char, errors: &mut Vec<SyntaxError>) {\n                 if text == \"\\t\" || text == \"\\r\" {\n                     errors.push(SyntaxError::new(UnescapedCodepoint, range));\n                 }\n-            },\n+            }\n         }\n     }\n \n@@ -162,13 +164,17 @@ mod test {\n \n     fn assert_valid_char(literal: &str) {\n         let file = build_file(literal);\n-        assert!(file.errors().len() == 0, \"Errors for literal '{}': {:?}\", literal, file.errors());\n+        assert!(\n+            file.errors().len() == 0,\n+            \"Errors for literal '{}': {:?}\",\n+            literal,\n+            file.errors()\n+        );\n     }\n \n-    fn assert_invalid_char(literal: &str) { //, expected_errors: HashSet<SyntaxErrorKind>) {\n+    fn assert_invalid_char(literal: &str) {\n         let file = build_file(literal);\n         assert!(file.errors().len() > 0);\n-        //let found_errors = file.errors().iter().map(|e| e.kind()).collect();\n     }\n \n     #[test]\n@@ -184,68 +190,60 @@ mod test {\n \n     #[test]\n     fn test_unicode_codepoints() {\n-        let valid = [\n-            \"\u0191\", \"\u30d0\", \"\u30e1\", \"\ufdfd\"\n-        ];\n+        let valid = [\"\u0191\", \"\u30d0\", \"\u30e1\", \"\ufdfd\"];\n         for c in &valid {\n             assert_valid_char(c);\n         }\n     }\n \n     #[test]\n     fn test_unicode_multiple_codepoints() {\n-        let invalid = [\n-            \"\u0928\u0940\", \"\ud83d\udc68\u200d\ud83d\udc68\u200d\"\n-        ];\n+        let invalid = [\"\u0928\u0940\", \"\ud83d\udc68\u200d\ud83d\udc68\u200d\"];\n         for c in &invalid {\n             assert_invalid_char(c);\n         }\n     }\n \n     #[test]\n     fn test_valid_ascii_escape() {\n-        let valid = [\n-            r\"\\'\", \"\\\"\", \"\\\\\\\"\", r\"\\n\", r\"\\r\", r\"\\t\", r\"\\0\", \"a\", \"b\"\n-        ];\n+        let valid = [r\"\\'\", \"\\\"\", \"\\\\\\\"\", r\"\\n\", r\"\\r\", r\"\\t\", r\"\\0\", \"a\", \"b\"];\n         for c in &valid {\n             assert_valid_char(c);\n         }\n     }\n \n     #[test]\n     fn test_invalid_ascii_escape() {\n-        let invalid = [\n-            r\"\\a\", r\"\\?\", r\"\\\"\n-        ];\n+        let invalid = [r\"\\a\", r\"\\?\", r\"\\\"];\n         for c in &invalid {\n             assert_invalid_char(c);\n         }\n     }\n \n     #[test]\n     fn test_valid_ascii_code_escape() {\n-        let valid = [\n-            r\"\\x00\", r\"\\x7F\", r\"\\x55\"\n-        ];\n+        let valid = [r\"\\x00\", r\"\\x7F\", r\"\\x55\"];\n         for c in &valid {\n             assert_valid_char(c);\n         }\n     }\n \n     #[test]\n     fn test_invalid_ascii_code_escape() {\n-        let invalid = [\n-            r\"\\x\", r\"\\x7\", r\"\\xF0\"\n-        ];\n+        let invalid = [r\"\\x\", r\"\\x7\", r\"\\xF0\"];\n         for c in &invalid {\n             assert_invalid_char(c);\n         }\n     }\n \n-     #[test]\n+    #[test]\n     fn test_valid_unicode_escape() {\n         let valid = [\n-            r\"\\u{FF}\", r\"\\u{0}\", r\"\\u{F}\", r\"\\u{10FFFF}\", r\"\\u{1_0__FF___FF_____}\"\n+            r\"\\u{FF}\",\n+            r\"\\u{0}\",\n+            r\"\\u{F}\",\n+            r\"\\u{10FFFF}\",\n+            r\"\\u{1_0__FF___FF_____}\",\n         ];\n         for c in &valid {\n             assert_valid_char(c);\n@@ -255,7 +253,14 @@ mod test {\n     #[test]\n     fn test_invalid_unicode_escape() {\n         let invalid = [\n-            r\"\\u\", r\"\\u{}\", r\"\\u{\", r\"\\u{FF\", r\"\\u{FFFFFF}\", r\"\\u{_F}\", r\"\\u{00FFFFF}\", r\"\\u{110000}\"\n+            r\"\\u\",\n+            r\"\\u{}\",\n+            r\"\\u{\",\n+            r\"\\u{FF\",\n+            r\"\\u{FFFFFF}\",\n+            r\"\\u{_F}\",\n+            r\"\\u{00FFFFF}\",\n+            r\"\\u{110000}\",\n         ];\n         for c in &invalid {\n             assert_invalid_char(c);"}, {"sha": "c524adf3954b34951e79b8e13dfad4421e5e0ada", "filename": "crates/ra_syntax/src/yellow/syntax_error.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e37ba706ccc435346c35042c2b6c4b483494268b/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ba706ccc435346c35042c2b6c4b483494268b/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs?ref=e37ba706ccc435346c35042c2b6c4b483494268b", "patch": "@@ -98,12 +98,16 @@ impl fmt::Display for SyntaxErrorKind {\n             UnclosedChar => write!(f, \"Unclosed char literal\"),\n             LongChar => write!(f, \"Char literal should be one character long\"),\n             TooShortAsciiCodeEscape => write!(f, \"Escape sequence should have two digits\"),\n-            AsciiCodeEscapeOutOfRange => write!(f, \"Escape sequence should be between \\\\x00 and \\\\x7F\"),\n+            AsciiCodeEscapeOutOfRange => {\n+                write!(f, \"Escape sequence should be between \\\\x00 and \\\\x7F\")\n+            }\n             MalformedAsciiCodeEscape => write!(f, \"Escape sequence should be a hexadecimal number\"),\n             UnclosedUnicodeEscape => write!(f, \"Missing `}}`\"),\n             MalformedUnicodeEscape => write!(f, \"Malformed unicode escape sequence\"),\n             EmptyUnicodeEcape => write!(f, \"Empty unicode escape sequence\"),\n-            OverlongUnicodeEscape => write!(f, \"Unicode escape sequence should have at most 6 digits\"),\n+            OverlongUnicodeEscape => {\n+                write!(f, \"Unicode escape sequence should have at most 6 digits\")\n+            }\n             UnicodeEscapeOutOfRange => write!(f, \"Unicode escape code should be at most 0x10FFFF\"),\n             ParseError(msg) => write!(f, \"{}\", msg.0),\n         }"}]}