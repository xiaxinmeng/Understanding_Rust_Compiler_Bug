{"sha": "666cd22fa64ee318edc3b6292efa507442eb2554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NmNkMjJmYTY0ZWUzMThlZGMzYjYyOTJlZmE1MDc0NDJlYjI1NTQ=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-13T16:34:43Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-13T16:34:43Z"}, "message": "Wrap hashmap for env vars in its own type", "tree": {"sha": "fcef31699b6da97f4316e82e30fbb47f770c5e12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcef31699b6da97f4316e82e30fbb47f770c5e12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666cd22fa64ee318edc3b6292efa507442eb2554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666cd22fa64ee318edc3b6292efa507442eb2554", "html_url": "https://github.com/rust-lang/rust/commit/666cd22fa64ee318edc3b6292efa507442eb2554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666cd22fa64ee318edc3b6292efa507442eb2554/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "253af9692afebc1a4b460fd2ac2cc842d007d573", "url": "https://api.github.com/repos/rust-lang/rust/commits/253af9692afebc1a4b460fd2ac2cc842d007d573", "html_url": "https://github.com/rust-lang/rust/commit/253af9692afebc1a4b460fd2ac2cc842d007d573"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "5e6c8129fb3108a8a08c322802ae2385a1237602", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=666cd22fa64ee318edc3b6292efa507442eb2554", "patch": "@@ -13,17 +13,17 @@ use crate::{\n     Scalar, Tag, Pointer, FnVal,\n     MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt, HelpersEvalContextExt,\n };\n-use crate::shims::env::alloc_env_value;\n+use crate::shims::env::EnvVars;\n \n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n+    /// Determine if validity checking and Stacked Borrows are enabled.\n     pub validate: bool,\n     /// Determines if communication with the host environment is enabled.\n     pub communicate: bool,\n     pub args: Vec<String>,\n-\n-    /// The seed to use when non-determinism is required (e.g. getrandom())\n+    /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n }\n \n@@ -165,10 +165,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n \n     if config.communicate {\n-        for (name, value) in std::env::vars() {\n-            let value = alloc_env_value(value.as_bytes(), ecx.memory_mut(), &tcx);\n-            ecx.machine.env_vars.insert(name.into_bytes(), value);\n-        }\n+        EnvVars::init(&mut ecx, &tcx);\n     }\n \n     Ok(ecx)"}, {"sha": "cc0c85d6603da301e97d3eb646d012eaefc3b6a2", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=666cd22fa64ee318edc3b6292efa507442eb2554", "patch": "@@ -3,7 +3,6 @@\n \n use std::rc::Rc;\n use std::borrow::Cow;\n-use std::collections::HashMap;\n use std::cell::RefCell;\n \n use rand::rngs::StdRng;\n@@ -15,6 +14,7 @@ use rustc::ty::{self, layout::{Size, LayoutOf}, TyCtxt};\n use rustc::mir;\n \n use crate::*;\n+use crate::shims::env::EnvVars;\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4*1024; // FIXME: adjust to target architecture\n@@ -79,7 +79,7 @@ impl MemoryExtra {\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`.\n     /// Miri does not expose env vars from the host to the emulated program.\n-    pub(crate) env_vars: HashMap<Vec<u8>, Pointer<Tag>>,\n+    pub(crate) env_vars: EnvVars,\n \n     /// Program arguments (`Option` because we can only initialize them after creating the ecx).\n     /// These are *pointers* to argc/argv because macOS.\n@@ -101,7 +101,7 @@ pub struct Evaluator<'tcx> {\n impl<'tcx> Evaluator<'tcx> {\n     pub(crate) fn new(communicate: bool) -> Self {\n         Evaluator {\n-            env_vars: HashMap::default(),\n+            env_vars: EnvVars::default(),\n             argc: None,\n             argv: None,\n             cmd_line: None,"}, {"sha": "09d87d27ebc2129d74fb78274916a006febfe0f2", "filename": "src/shims/env.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=666cd22fa64ee318edc3b6292efa507442eb2554", "patch": "@@ -1,8 +1,39 @@\n-use rustc::ty::{layout::{Size, Align}, TyCtxt};\n-use rustc_mir::interpret::Memory;\n+use std::collections::HashMap;\n \n+use rustc::ty::{layout::{Size, Align}, TyCtxt};\n+use rustc_mir::interpret::{Pointer, Memory};\n+use crate::stacked_borrows::Tag;\n use crate::*;\n \n+#[derive(Default)]\n+pub struct EnvVars {\n+    map: HashMap<Vec<u8>, Pointer<Tag>>,\n+}\n+\n+impl EnvVars {\n+    pub(crate) fn init<'mir, 'tcx>(\n+        ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+        tcx: &TyCtxt<'tcx>,\n+    ) {\n+        for (name, value) in std::env::vars() {\n+            let value = alloc_env_value(value.as_bytes(), ecx.memory_mut(), tcx);\n+            ecx.machine.env_vars.map.insert(name.into_bytes(), value);\n+        }\n+    }\n+\n+    pub(crate) fn get(&self, name: &[u8]) -> Option<&Pointer<Tag>> {\n+        self.map.get(name)\n+    }\n+\n+    pub(crate) fn unset(&mut self, name: &[u8]) -> Option<Pointer<Tag>> {\n+        self.map.remove(name)\n+    }\n+\n+    pub(crate) fn set(&mut self, name: Vec<u8>, ptr: Pointer<Tag>) -> Option<Pointer<Tag>>{\n+        self.map.insert(name, ptr)\n+    }\n+}\n+\n pub(crate) fn alloc_env_value<'mir, 'tcx>(\n     bytes: &[u8],\n     memory: &mut Memory<'mir, 'tcx, Evaluator<'tcx>>,"}, {"sha": "6705183da47f96c504562382ebf68147d75774d7", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666cd22fa64ee318edc3b6292efa507442eb2554/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=666cd22fa64ee318edc3b6292efa507442eb2554", "patch": "@@ -438,7 +438,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     if !this.is_null(name_ptr)? {\n                         let name = this.memory().read_c_str(name_ptr)?.to_owned();\n                         if !name.is_empty() && !name.contains(&b'=') {\n-                            success = Some(this.machine.env_vars.remove(&name));\n+                            success = Some(this.machine.env_vars.unset(&name));\n                         }\n                     }\n                 }\n@@ -467,7 +467,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n                 if let Some((name, value)) = new {\n                     let value_copy = alloc_env_value(&value, this.memory_mut(), tcx);\n-                    if let Some(var) = this.machine.env_vars.insert(name.to_owned(), value_copy) {\n+                    if let Some(var) = this.machine.env_vars.set(name.to_owned(), value_copy) {\n                         this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n                     }\n                     this.write_null(dest)?;"}]}