{"sha": "9a59272f5f3efd502f666c78ce901fff8db0dfba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTkyNzJmNWYzZWZkNTAyZjY2NmM3OGNlOTAxZmZmOGRiMGRmYmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-16T17:24:55Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-16T17:24:55Z"}, "message": "Merge #981\n\n981: Remove FnSig from FnDef type r=matklad a=flodiebold\n\nIt doesn't need to be in there since it's just information from the def. Another\r\nstep towards aligning Ty with Chalk's representation.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "dc7298ec39809f520362a5c1fa1dc98ce63900f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7298ec39809f520362a5c1fa1dc98ce63900f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a59272f5f3efd502f666c78ce901fff8db0dfba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a59272f5f3efd502f666c78ce901fff8db0dfba", "html_url": "https://github.com/rust-lang/rust/commit/9a59272f5f3efd502f666c78ce901fff8db0dfba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a59272f5f3efd502f666c78ce901fff8db0dfba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "76572e67eabffa959c665f8450dbb12d71848aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/76572e67eabffa959c665f8450dbb12d71848aba", "html_url": "https://github.com/rust-lang/rust/commit/76572e67eabffa959c665f8450dbb12d71848aba"}, {"sha": "7faae12311895b20b4dec47825708d15f3aaf034", "url": "https://api.github.com/repos/rust-lang/rust/commits/7faae12311895b20b4dec47825708d15f3aaf034", "html_url": "https://github.com/rust-lang/rust/commit/7faae12311895b20b4dec47825708d15f3aaf034"}], "stats": {"total": 277, "additions": 157, "deletions": 120}, "files": [{"sha": "5ad9547f14805714b12fc70147af9af7f7ddb494", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=9a59272f5f3efd502f666c78ce901fff8db0dfba", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n     nameres::{ItemMap, lower::{LoweredModule, ImportSourceMap}},\n-    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef},\n+    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig},\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n@@ -105,6 +105,9 @@ pub trait HirDatabase: PersistentHirDatabase {\n     #[salsa::invoke(crate::ty::type_for_field)]\n     fn type_for_field(&self, field: StructField) -> Ty;\n \n+    #[salsa::invoke(crate::ty::callable_item_sig)]\n+    fn callable_item_signature(&self, def: CallableDef) -> FnSig;\n+\n     #[salsa::invoke(crate::expr::body_with_source_map_query)]\n     fn body_with_source_map(\n         &self,"}, {"sha": "2ea3b341fc67bca4f524d38a3348ce453c09f948", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 51, "deletions": 44, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9a59272f5f3efd502f666c78ce901fff8db0dfba", "patch": "@@ -16,7 +16,7 @@ use std::{fmt, mem};\n \n use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase};\n \n-pub(crate) use lower::{TypableDef, CallableDef, type_for_def, type_for_field};\n+pub(crate) use lower::{TypableDef, CallableDef, type_for_def, type_for_field, callable_item_sig};\n pub(crate) use infer::{infer, InferenceResult, InferTy};\n use display::{HirDisplay, HirFormatter};\n \n@@ -77,8 +77,6 @@ pub enum Ty {\n     FnDef {\n         /// The definition of the function / constructor.\n         def: CallableDef,\n-        /// Parameters and return type\n-        sig: Arc<FnSig>,\n         /// Substitutions for the generic parameters of the type\n         substs: Substs,\n     },\n@@ -91,7 +89,7 @@ pub enum Ty {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n-    FnPtr(Arc<FnSig>),\n+    FnPtr(FnSig),\n \n     /// The never type `!`.\n     Never,\n@@ -128,13 +126,44 @@ impl Substs {\n     pub fn empty() -> Substs {\n         Substs(Arc::new([]))\n     }\n+\n+    pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n+        // Without an Arc::make_mut_slice, we can't avoid the clone here:\n+        let mut v: Vec<_> = self.0.iter().cloned().collect();\n+        for t in &mut v {\n+            t.walk_mut(f);\n+        }\n+        self.0 = v.into();\n+    }\n }\n \n /// A function signature.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct FnSig {\n-    input: Vec<Ty>,\n-    output: Ty,\n+    params_and_return: Arc<[Ty]>,\n+}\n+\n+impl FnSig {\n+    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty) -> FnSig {\n+        params.push(ret);\n+        FnSig { params_and_return: params.into() }\n+    }\n+    pub fn params(&self) -> &[Ty] {\n+        &self.params_and_return[0..self.params_and_return.len() - 1]\n+    }\n+\n+    pub fn ret(&self) -> &Ty {\n+        &self.params_and_return[self.params_and_return.len() - 1]\n+    }\n+\n+    pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n+        // Without an Arc::make_mut_slice, we can't avoid the clone here:\n+        let mut v: Vec<_> = self.params_and_return.iter().cloned().collect();\n+        for t in &mut v {\n+            t.walk_mut(f);\n+        }\n+        self.params_and_return = v.into();\n+    }\n }\n \n impl Ty {\n@@ -153,16 +182,12 @@ impl Ty {\n                 }\n             }\n             Ty::FnPtr(sig) => {\n-                for input in &sig.input {\n+                for input in sig.params() {\n                     input.walk(f);\n                 }\n-                sig.output.walk(f);\n+                sig.ret().walk(f);\n             }\n-            Ty::FnDef { substs, sig, .. } => {\n-                for input in &sig.input {\n-                    input.walk(f);\n-                }\n-                sig.output.walk(f);\n+            Ty::FnDef { substs, .. } => {\n                 for t in substs.0.iter() {\n                     t.walk(f);\n                 }\n@@ -199,32 +224,13 @@ impl Ty {\n                 *ts = v.into();\n             }\n             Ty::FnPtr(sig) => {\n-                let sig_mut = Arc::make_mut(sig);\n-                for input in &mut sig_mut.input {\n-                    input.walk_mut(f);\n-                }\n-                sig_mut.output.walk_mut(f);\n+                sig.walk_mut(f);\n             }\n-            Ty::FnDef { substs, sig, .. } => {\n-                let sig_mut = Arc::make_mut(sig);\n-                for input in &mut sig_mut.input {\n-                    input.walk_mut(f);\n-                }\n-                sig_mut.output.walk_mut(f);\n-                // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-                let mut v: Vec<_> = substs.0.iter().cloned().collect();\n-                for t in &mut v {\n-                    t.walk_mut(f);\n-                }\n-                substs.0 = v.into();\n+            Ty::FnDef { substs, .. } => {\n+                substs.walk_mut(f);\n             }\n             Ty::Adt { substs, .. } => {\n-                // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-                let mut v: Vec<_> = substs.0.iter().cloned().collect();\n-                for t in &mut v {\n-                    t.walk_mut(f);\n-                }\n-                substs.0 = v.into();\n+                substs.walk_mut(f);\n             }\n             Ty::Bool\n             | Ty::Char\n@@ -262,7 +268,7 @@ impl Ty {\n     pub fn apply_substs(self, substs: Substs) -> Ty {\n         match self {\n             Ty::Adt { def_id, .. } => Ty::Adt { def_id, substs },\n-            Ty::FnDef { def, sig, .. } => Ty::FnDef { def, sig, substs },\n+            Ty::FnDef { def, .. } => Ty::FnDef { def, substs },\n             _ => self,\n         }\n     }\n@@ -304,8 +310,8 @@ impl HirDisplay for Ty {\n         match self {\n             Ty::Bool => write!(f, \"bool\")?,\n             Ty::Char => write!(f, \"char\")?,\n-            Ty::Int(t) => write!(f, \"{}\", t.ty_to_string())?,\n-            Ty::Float(t) => write!(f, \"{}\", t.ty_to_string())?,\n+            Ty::Int(t) => write!(f, \"{}\", t)?,\n+            Ty::Float(t) => write!(f, \"{}\", t)?,\n             Ty::Str => write!(f, \"str\")?,\n             Ty::Slice(t) | Ty::Array(t) => {\n                 write!(f, \"[{}]\", t.display(f.db))?;\n@@ -328,10 +334,11 @@ impl HirDisplay for Ty {\n             }\n             Ty::FnPtr(sig) => {\n                 write!(f, \"fn(\")?;\n-                f.write_joined(&sig.input, \", \")?;\n-                write!(f, \") -> {}\", sig.output.display(f.db))?;\n+                f.write_joined(sig.params(), \", \")?;\n+                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n-            Ty::FnDef { def, substs, sig, .. } => {\n+            Ty::FnDef { def, substs, .. } => {\n+                let sig = f.db.callable_item_signature(*def);\n                 let name = match def {\n                     CallableDef::Function(ff) => ff.name(f.db),\n                     CallableDef::Struct(s) => s.name(f.db).unwrap_or_else(Name::missing),\n@@ -347,8 +354,8 @@ impl HirDisplay for Ty {\n                     write!(f, \">\")?;\n                 }\n                 write!(f, \"(\")?;\n-                f.write_joined(&sig.input, \", \")?;\n-                write!(f, \") -> {}\", sig.output.display(f.db))?;\n+                f.write_joined(sig.params(), \", \")?;\n+                write!(f, \") -> {}\", sig.ret().display(f.db))?;\n             }\n             Ty::Adt { def_id, substs, .. } => {\n                 let name = match def_id {"}, {"sha": "c9a5bc7a100aa00ca8df8bb802bf2f152786ca5b", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=9a59272f5f3efd502f666c78ce901fff8db0dfba", "patch": "@@ -724,11 +724,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Call { callee, args } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n-                    Ty::FnPtr(sig) => (sig.input.clone(), sig.output.clone()),\n-                    Ty::FnDef { substs, sig, .. } => {\n-                        let ret_ty = sig.output.clone().subst(&substs);\n+                    Ty::FnPtr(sig) => (sig.params().to_vec(), sig.ret().clone()),\n+                    Ty::FnDef { substs, def, .. } => {\n+                        let sig = self.db.callable_item_signature(*def);\n+                        let ret_ty = sig.ret().clone().subst(&substs);\n                         let param_tys =\n-                            sig.input.iter().map(|ty| ty.clone().subst(&substs)).collect();\n+                            sig.params().iter().map(|ty| ty.clone().subst(&substs)).collect();\n                         (param_tys, ret_ty)\n                     }\n                     _ => {\n@@ -762,19 +763,21 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let method_ty = self.insert_type_vars(method_ty);\n                 let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {\n                     Ty::FnPtr(sig) => {\n-                        if !sig.input.is_empty() {\n-                            (sig.input[0].clone(), sig.input[1..].to_vec(), sig.output.clone())\n+                        if !sig.params().is_empty() {\n+                            (sig.params()[0].clone(), sig.params()[1..].to_vec(), sig.ret().clone())\n                         } else {\n-                            (Ty::Unknown, Vec::new(), sig.output.clone())\n+                            (Ty::Unknown, Vec::new(), sig.ret().clone())\n                         }\n                     }\n-                    Ty::FnDef { substs, sig, .. } => {\n-                        let ret_ty = sig.output.clone().subst(&substs);\n-\n-                        if !sig.input.is_empty() {\n-                            let mut arg_iter = sig.input.iter().map(|ty| ty.clone().subst(&substs));\n-                            let receiver_ty = arg_iter.next().unwrap();\n-                            (receiver_ty, arg_iter.collect(), ret_ty)\n+                    Ty::FnDef { substs, def, .. } => {\n+                        let sig = self.db.callable_item_signature(*def);\n+                        let ret_ty = sig.ret().clone().subst(&substs);\n+\n+                        if !sig.params().is_empty() {\n+                            let mut params_iter =\n+                                sig.params().iter().map(|ty| ty.clone().subst(&substs));\n+                            let receiver_ty = params_iter.next().unwrap();\n+                            (receiver_ty, params_iter.collect(), ret_ty)\n                         } else {\n                             (Ty::Unknown, Vec::new(), ret_ty)\n                         }"}, {"sha": "278f592d391ced3f48ec3d29e702110b332029be", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=9a59272f5f3efd502f666c78ce901fff8db0dfba", "patch": "@@ -51,12 +51,10 @@ impl Ty {\n             }\n             TypeRef::Placeholder => Ty::Unknown,\n             TypeRef::Fn(params) => {\n-                let mut inner_tys =\n+                let inner_tys =\n                     params.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n-                let return_ty =\n-                    inner_tys.pop().expect(\"TypeRef::Fn should always have at least return type\");\n-                let sig = FnSig { input: inner_tys, output: return_ty };\n-                Ty::FnPtr(Arc::new(sig))\n+                let sig = FnSig { params_and_return: inner_tys.into() };\n+                Ty::FnPtr(sig)\n             }\n             TypeRef::Error => Ty::Unknown,\n         }\n@@ -214,6 +212,15 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n     }\n }\n \n+/// Build the signature of a callable item (function, struct or enum variant).\n+pub(crate) fn callable_item_sig(db: &impl HirDatabase, def: CallableDef) -> FnSig {\n+    match def {\n+        CallableDef::Function(f) => fn_sig_for_fn(db, f),\n+        CallableDef::Struct(s) => fn_sig_for_struct_constructor(db, s),\n+        CallableDef::EnumVariant(e) => fn_sig_for_enum_variant_constructor(db, e),\n+    }\n+}\n+\n /// Build the type of a specific field of a struct or enum variant.\n pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     let parent_def = field.parent_def(db);\n@@ -226,18 +233,21 @@ pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n     Ty::from_hir(db, &resolver, type_ref)\n }\n \n+fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n+    let signature = def.signature(db);\n+    let resolver = def.resolver(db);\n+    let params =\n+        signature.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n+    let ret = Ty::from_hir(db, &resolver, signature.ret_type());\n+    FnSig::from_params_and_return(params, ret)\n+}\n+\n /// Build the declared type of a function. This should not need to look at the\n /// function body.\n fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n-    let signature = def.signature(db);\n-    let resolver = def.resolver(db);\n     let generics = def.generic_params(db);\n-    let input =\n-        signature.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n-    let output = Ty::from_hir(db, &resolver, signature.ret_type());\n-    let sig = Arc::new(FnSig { input, output });\n     let substs = make_substs(&generics);\n-    Ty::FnDef { def: def.into(), sig, substs }\n+    Ty::FnDef { def: def.into(), substs }\n }\n \n /// Build the declared type of a const.\n@@ -256,42 +266,58 @@ fn type_for_static(db: &impl HirDatabase, def: Static) -> Ty {\n     Ty::from_hir(db, &resolver, signature.type_ref())\n }\n \n-/// Build the type of a tuple struct constructor.\n-fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n+fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n     let var_data = def.variant_data(db);\n     let fields = match var_data.fields() {\n         Some(fields) => fields,\n-        None => return type_for_struct(db, def), // Unit struct\n+        None => panic!(\"fn_sig_for_struct_constructor called on unit struct\"),\n     };\n     let resolver = def.resolver(db);\n-    let generics = def.generic_params(db);\n-    let input = fields\n+    let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n-    let output = type_for_struct(db, def);\n-    let sig = Arc::new(FnSig { input, output });\n+    let ret = type_for_struct(db, def);\n+    FnSig::from_params_and_return(params, ret)\n+}\n+\n+/// Build the type of a tuple struct constructor.\n+fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n+    let var_data = def.variant_data(db);\n+    if var_data.fields().is_none() {\n+        return type_for_struct(db, def); // Unit struct\n+    }\n+    let generics = def.generic_params(db);\n     let substs = make_substs(&generics);\n-    Ty::FnDef { def: def.into(), sig, substs }\n+    Ty::FnDef { def: def.into(), substs }\n }\n \n-/// Build the type of a tuple enum variant constructor.\n-fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n+fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> FnSig {\n     let var_data = def.variant_data(db);\n     let fields = match var_data.fields() {\n         Some(fields) => fields,\n-        None => return type_for_enum(db, def.parent_enum(db)), // Unit variant\n+        None => panic!(\"fn_sig_for_enum_variant_constructor called for unit variant\"),\n     };\n     let resolver = def.parent_enum(db).resolver(db);\n-    let generics = def.parent_enum(db).generic_params(db);\n-    let input = fields\n+    let params = fields\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n+    let generics = def.parent_enum(db).generic_params(db);\n+    let substs = make_substs(&generics);\n+    let ret = type_for_enum(db, def.parent_enum(db)).subst(&substs);\n+    FnSig::from_params_and_return(params, ret)\n+}\n+\n+/// Build the type of a tuple enum variant constructor.\n+fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n+    let var_data = def.variant_data(db);\n+    if var_data.fields().is_none() {\n+        return type_for_enum(db, def.parent_enum(db)); // Unit variant\n+    }\n+    let generics = def.parent_enum(db).generic_params(db);\n     let substs = make_substs(&generics);\n-    let output = type_for_enum(db, def.parent_enum(db)).subst(&substs);\n-    let sig = Arc::new(FnSig { input, output });\n-    Ty::FnDef { def: def.into(), sig, substs }\n+    Ty::FnDef { def: def.into(), substs }\n }\n \n fn make_substs(generics: &GenericParams) -> Substs {"}, {"sha": "30aeac48e6f1505617d08a330585b3942c02a683", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a59272f5f3efd502f666c78ce901fff8db0dfba/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=9a59272f5f3efd502f666c78ce901fff8db0dfba", "patch": "@@ -10,14 +10,6 @@ pub enum UncertainIntTy {\n }\n \n impl UncertainIntTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n-            UncertainIntTy::Unknown => \"{integer}\",\n-            UncertainIntTy::Signed(ty) => ty.ty_to_string(),\n-            UncertainIntTy::Unsigned(ty) => ty.ty_to_string(),\n-        }\n-    }\n-\n     pub fn from_name(name: &Name) -> Option<UncertainIntTy> {\n         if let Some(ty) = IntTy::from_name(name) {\n             Some(UncertainIntTy::Signed(ty))\n@@ -29,20 +21,23 @@ impl UncertainIntTy {\n     }\n }\n \n+impl fmt::Display for UncertainIntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            UncertainIntTy::Unknown => write!(f, \"{{integer}}\"),\n+            UncertainIntTy::Signed(ty) => write!(f, \"{}\", ty),\n+            UncertainIntTy::Unsigned(ty) => write!(f, \"{}\", ty),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq, Hash, Copy)]\n pub enum UncertainFloatTy {\n     Unknown,\n     Known(FloatTy),\n }\n \n impl UncertainFloatTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n-            UncertainFloatTy::Unknown => \"{float}\",\n-            UncertainFloatTy::Known(ty) => ty.ty_to_string(),\n-        }\n-    }\n-\n     pub fn from_name(name: &Name) -> Option<UncertainFloatTy> {\n         if let Some(ty) = FloatTy::from_name(name) {\n             Some(UncertainFloatTy::Known(ty))\n@@ -52,6 +47,15 @@ impl UncertainFloatTy {\n     }\n }\n \n+impl fmt::Display for UncertainFloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            UncertainFloatTy::Unknown => write!(f, \"{{float}}\"),\n+            UncertainFloatTy::Known(ty) => write!(f, \"{}\", ty),\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n pub enum IntTy {\n     Isize,\n@@ -70,22 +74,19 @@ impl fmt::Debug for IntTy {\n \n impl fmt::Display for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n-impl IntTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n+        let s = match *self {\n             IntTy::Isize => \"isize\",\n             IntTy::I8 => \"i8\",\n             IntTy::I16 => \"i16\",\n             IntTy::I32 => \"i32\",\n             IntTy::I64 => \"i64\",\n             IntTy::I128 => \"i128\",\n-        }\n+        };\n+        write!(f, \"{}\", s)\n     }\n+}\n \n+impl IntTy {\n     pub fn from_name(name: &Name) -> Option<IntTy> {\n         match name.as_known_name()? {\n             KnownName::Isize => Some(IntTy::Isize),\n@@ -109,18 +110,21 @@ pub enum UintTy {\n     U128,\n }\n \n-impl UintTy {\n-    pub fn ty_to_string(&self) -> &'static str {\n-        match *self {\n+impl fmt::Display for UintTy {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let s = match *self {\n             UintTy::Usize => \"usize\",\n             UintTy::U8 => \"u8\",\n             UintTy::U16 => \"u16\",\n             UintTy::U32 => \"u32\",\n             UintTy::U64 => \"u64\",\n             UintTy::U128 => \"u128\",\n-        }\n+        };\n+        write!(f, \"{}\", s)\n     }\n+}\n \n+impl UintTy {\n     pub fn from_name(name: &Name) -> Option<UintTy> {\n         match name.as_known_name()? {\n             KnownName::Usize => Some(UintTy::Usize),\n@@ -140,12 +144,6 @@ impl fmt::Debug for UintTy {\n     }\n }\n \n-impl fmt::Display for UintTy {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.ty_to_string())\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Copy, PartialOrd, Ord)]\n pub enum FloatTy {\n     F32,"}]}