{"sha": "319611b7382fc4c84170519dade68f4f558a44b1", "node_id": "C_kwDOAAsO6NoAKDMxOTYxMWI3MzgyZmM0Yzg0MTcwNTE5ZGFkZTY4ZjRmNTU4YTQ0YjE", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-10-29T22:44:34Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-10-29T22:44:34Z"}, "message": "Record diverging match arms in `InferenceResult`", "tree": {"sha": "f717fe9cf4b64a8d5c9b7f13b4780b6f836afb2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f717fe9cf4b64a8d5c9b7f13b4780b6f836afb2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319611b7382fc4c84170519dade68f4f558a44b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319611b7382fc4c84170519dade68f4f558a44b1", "html_url": "https://github.com/rust-lang/rust/commit/319611b7382fc4c84170519dade68f4f558a44b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319611b7382fc4c84170519dade68f4f558a44b1/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba28e19b7838e3ad4223ae82d074dc3950ef1548", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba28e19b7838e3ad4223ae82d074dc3950ef1548", "html_url": "https://github.com/rust-lang/rust/commit/ba28e19b7838e3ad4223ae82d074dc3950ef1548"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "05776e192193a197d89adeead2313ef54d73295e", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=319611b7382fc4c84170519dade68f4f558a44b1", "patch": "@@ -333,6 +333,8 @@ pub struct InferenceResult {\n     assoc_resolutions: FxHashMap<ExprOrPatId, AssocItemId>,\n     pub diagnostics: Vec<InferenceDiagnostic>,\n     pub type_of_expr: ArenaMap<ExprId, Ty>,\n+    /// For each match expr, record diverging arm's expr.\n+    pub diverging_arms: FxHashMap<ExprId, Vec<ExprId>>,\n     /// For each pattern record the type it resolves to.\n     ///\n     /// **Note**: When a pattern type is resolved it may still contain"}, {"sha": "3d2e091a0f6ad637e752da302699cf181dd6ac5c", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=319611b7382fc4c84170519dade68f4f558a44b1", "patch": "@@ -375,6 +375,7 @@ impl<'a> InferenceContext<'a> {\n \n                 let matchee_diverges = self.diverges;\n                 let mut all_arms_diverge = Diverges::Always;\n+                let mut diverging_arms = Vec::new();\n \n                 for arm in arms.iter() {\n                     self.diverges = Diverges::Maybe;\n@@ -387,11 +388,15 @@ impl<'a> InferenceContext<'a> {\n                     }\n \n                     let arm_ty = self.infer_expr_inner(arm.expr, &expected);\n+                    if self.diverges.is_always() {\n+                        diverging_arms.push(arm.expr);\n+                    }\n                     all_arms_diverge &= self.diverges;\n                     coerce.coerce(self, Some(arm.expr), &arm_ty);\n                 }\n \n                 self.diverges = matchee_diverges | all_arms_diverge;\n+                self.result.diverging_arms.insert(tgt_expr, diverging_arms);\n \n                 coerce.complete()\n             }"}, {"sha": "2f835657d37a1e67acd5337c7afb542405bf7758", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=319611b7382fc4c84170519dade68f4f558a44b1", "patch": "@@ -481,6 +481,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n     pub fn is_unsafe_ident_pat(&self, ident_pat: &ast::IdentPat) -> bool {\n         self.imp.is_unsafe_ident_pat(ident_pat)\n     }\n+\n+    pub fn is_diverging_match_arm(&self, match_arm: &ast::MatchArm) -> Option<bool> {\n+        self.imp.is_diverging_match_arm(match_arm)\n+    }\n }\n \n impl<'db> SemanticsImpl<'db> {\n@@ -1421,6 +1425,10 @@ impl<'db> SemanticsImpl<'db> {\n             .map(|ty| ty.original.is_packed(self.db))\n             .unwrap_or(false)\n     }\n+\n+    fn is_diverging_match_arm(&self, match_arm: &ast::MatchArm) -> Option<bool> {\n+        self.analyze(match_arm.syntax())?.is_diverging_match_arm(self.db, match_arm)\n+    }\n }\n \n fn macro_call_to_macro_id("}, {"sha": "2e61946a738de1e797be20ab5f0a50f9d2595af6", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319611b7382fc4c84170519dade68f4f558a44b1/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=319611b7382fc4c84170519dade68f4f558a44b1", "patch": "@@ -782,6 +782,21 @@ impl SourceAnalyzer {\n         false\n     }\n \n+    pub(crate) fn is_diverging_match_arm(\n+        &self,\n+        db: &dyn HirDatabase,\n+        match_arm: &ast::MatchArm,\n+    ) -> Option<bool> {\n+        let infer = self.infer.as_ref()?;\n+        let match_expr = match_arm.syntax().ancestors().find_map(ast::MatchExpr::cast)?;\n+        let match_id = self.expr_id(db, &match_expr.into())?;\n+        let diverging_arms = infer.diverging_arms.get(&match_id)?;\n+        let match_arm_expr = match_arm.expr()?;\n+        let match_arm_expr_id = self.expr_id(db, &match_arm_expr)?;\n+\n+        Some(diverging_arms.contains(&match_arm_expr_id))\n+    }\n+\n     fn resolve_impl_method_or_trait_def(\n         &self,\n         db: &dyn HirDatabase,"}]}