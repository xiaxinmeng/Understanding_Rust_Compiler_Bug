{"sha": "cb121987158d69bb894ba1bcc21dc45d1e0a488f", "node_id": "C_kwDOAAsO6NoAKGNiMTIxOTg3MTU4ZDY5YmI4OTRiYTFiY2MyMWRjNDVkMWUwYTQ4OGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-08T21:37:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-08T21:37:26Z"}, "message": "Auto merge of #96846 - matthiaskrgr:rollup-yxu9ot9, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #96617 (Fix incorrect syntax suggestion with `pub async fn`)\n - #96828 (Further elaborate the lack of guarantees from `Hasher`)\n - #96829 (Fix the `x.py clippy` command)\n - #96830 (Add and tweak const-generics tests)\n - #96835 (Add more eslint rules)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "43682525402a2eaf768866386ed5e14afc3310fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43682525402a2eaf768866386ed5e14afc3310fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb121987158d69bb894ba1bcc21dc45d1e0a488f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb121987158d69bb894ba1bcc21dc45d1e0a488f", "html_url": "https://github.com/rust-lang/rust/commit/cb121987158d69bb894ba1bcc21dc45d1e0a488f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb121987158d69bb894ba1bcc21dc45d1e0a488f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68461648bf20a230898404d2231d386fbcc09b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/68461648bf20a230898404d2231d386fbcc09b73", "html_url": "https://github.com/rust-lang/rust/commit/68461648bf20a230898404d2231d386fbcc09b73"}, {"sha": "43b3a491f51caa2fe3ddb27c85e2e00c296cf177", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b3a491f51caa2fe3ddb27c85e2e00c296cf177", "html_url": "https://github.com/rust-lang/rust/commit/43b3a491f51caa2fe3ddb27c85e2e00c296cf177"}], "stats": {"total": 162, "additions": 148, "deletions": 14}, "files": [{"sha": "d20ba99ebc9b5b2434bd7f07fc24891823adf550", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -1085,18 +1085,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             self.in_progress_typeck_results.map(|t| t.borrow())\n                             && let ty = typeck_results.expr_ty_adjusted(base)\n                             && let ty::FnDef(def_id, _substs) = ty.kind()\n-                            && let Some(hir::Node::Item(hir::Item { span, ident, .. })) =\n+                            && let Some(hir::Node::Item(hir::Item { ident, span, vis_span, .. })) =\n                                 hir.get_if_local(*def_id)\n                         {\n-                            err.span_suggestion_verbose(\n-                                span.shrink_to_lo(),\n-                                &format!(\n-                                    \"alternatively, consider making `fn {}` asynchronous\",\n-                                    ident\n-                                ),\n-                                \"async \".to_string(),\n-                                Applicability::MaybeIncorrect,\n+                            let msg = format!(\n+                                \"alternatively, consider making `fn {}` asynchronous\",\n+                                ident\n                             );\n+                            if vis_span.is_empty() {\n+                                err.span_suggestion_verbose(\n+                                    span.shrink_to_lo(),\n+                                    &msg,\n+                                    \"async \".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            } else {\n+                                err.span_suggestion_verbose(\n+                                    vis_span.shrink_to_hi(),\n+                                    &msg,\n+                                    \" async\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "3d168f62a09f5ff7e2b5e9e566c598343b0f64e6", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -268,10 +268,29 @@ pub use macros::Hash;\n /// instance (with [`write`] and [`write_u8`] etc.). Most of the time, `Hasher`\n /// instances are used in conjunction with the [`Hash`] trait.\n ///\n-/// This trait makes no assumptions about how the various `write_*` methods are\n+/// This trait provides no guarantees about how the various `write_*` methods are\n /// defined and implementations of [`Hash`] should not assume that they work one\n /// way or another. You cannot assume, for example, that a [`write_u32`] call is\n-/// equivalent to four calls of [`write_u8`].\n+/// equivalent to four calls of [`write_u8`].  Nor can you assume that adjacent\n+/// `write` calls are merged, so it's possible, for example, that\n+/// ```\n+/// # fn foo(hasher: &mut impl std::hash::Hasher) {\n+/// hasher.write(&[1, 2]);\n+/// hasher.write(&[3, 4, 5, 6]);\n+/// # }\n+/// ```\n+/// and\n+/// ```\n+/// # fn foo(hasher: &mut impl std::hash::Hasher) {\n+/// hasher.write(&[1, 2, 3, 4]);\n+/// hasher.write(&[5, 6]);\n+/// # }\n+/// ```\n+/// end up producing different hashes.\n+///\n+/// Thus to produce the same hash value, [`Hash`] implementations must ensure\n+/// for equivalent items that exactly the same sequence of calls is made -- the\n+/// same methods with the same parameters in the same order.\n ///\n /// # Examples\n ///"}, {"sha": "7d838c0a61d22f521012c1a787564949d1c6a715", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -534,7 +534,7 @@ impl<'a> Builder<'a> {\n                 native::Lld,\n                 native::CrtBeginEnd\n             ),\n-            Kind::Check => describe!(\n+            Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,\n                 check::Rustc,\n                 check::Rustdoc,\n@@ -664,7 +664,7 @@ impl<'a> Builder<'a> {\n             ),\n             Kind::Run => describe!(run::ExpandYamlAnchors, run::BuildManifest, run::BumpStage0),\n             // These commands either don't use paths, or they're special-cased in Build::build()\n-            Kind::Clean | Kind::Clippy | Kind::Fix | Kind::Format | Kind::Setup => vec![],\n+            Kind::Clean | Kind::Format | Kind::Setup => vec![],\n         }\n     }\n "}, {"sha": "52577b228aa1399e59057e451cb0b599d26d6804", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -21,6 +21,11 @@ module.exports = {\n             \"error\",\n             \"double\"\n         ],\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"no-trailing-spaces\": \"error\",\n         \"no-var\": [\"error\"],\n         \"prefer-const\": [\"error\"],\n         \"prefer-arrow-callback\": [\"error\"],"}, {"sha": "3cb8d3846ab7c62096ece221024c778fe366d6cb", "filename": "src/test/ui/const-generics/issues/issue-77357.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.rs?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "previous_filename": "src/test/ui/const-generics/issues/issue-775377.rs"}, {"sha": "804c0ae5175a8a7304b19e22d588d0a4a8970f56", "filename": "src/test/ui/const-generics/issues/issue-77357.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -1,5 +1,5 @@\n error: overly complex generic constant\n-  --> $DIR/issue-775377.rs:6:46\n+  --> $DIR/issue-77357.rs:6:46\n    |\n LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant", "previous_filename": "src/test/ui/const-generics/issues/issue-775377.stderr"}, {"sha": "8cf786dbe40bf3eff6873059fcc6076a6593aec9", "filename": "src/test/ui/const-generics/issues/issue-96654.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-96654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-96654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-96654.rs?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+struct A<const M: u32> {}\n+\n+struct B<const M: u32> {}\n+\n+impl<const M: u32> B<M> {\n+    const M: u32 = M;\n+}\n+\n+struct C<const M: u32> {\n+    a: A<{ B::<1>::M }>,\n+}\n+\n+fn main() {}"}, {"sha": "9f0a047c6e9a80c14949bbd6174b305c432ee82d", "filename": "src/test/ui/suggestions/issue-96555.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.rs?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+\n+async fn f() {\n+    m::f1().await; //~ ERROR `()` is not a future\n+    m::f2().await; //~ ERROR `()` is not a future\n+    m::f3().await; //~ ERROR `()` is not a future\n+}\n+\n+mod m {\n+    pub fn f1() {}\n+\n+    pub(crate) fn f2() {}\n+\n+    pub\n+    fn\n+    f3() {}\n+}\n+\n+fn main() {}"}, {"sha": "6d3b8844d954fb304d65e9addc72bb1e13b16456", "filename": "src/test/ui/suggestions/issue-96555.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb121987158d69bb894ba1bcc21dc45d1e0a488f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr?ref=cb121987158d69bb894ba1bcc21dc45d1e0a488f", "patch": "@@ -0,0 +1,66 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/issue-96555.rs:4:12\n+   |\n+LL |     m::f1().await;\n+   |     -------^^^^^^ `()` is not a future\n+   |     |\n+   |     this call returns `()`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+help: remove the `.await`\n+   |\n+LL -     m::f1().await;\n+LL +     m::f1();\n+   | \n+help: alternatively, consider making `fn f1` asynchronous\n+   |\n+LL |     pub async fn f1() {}\n+   |         +++++\n+\n+error[E0277]: `()` is not a future\n+  --> $DIR/issue-96555.rs:5:12\n+   |\n+LL |     m::f2().await;\n+   |     -------^^^^^^ `()` is not a future\n+   |     |\n+   |     this call returns `()`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+help: remove the `.await`\n+   |\n+LL -     m::f2().await;\n+LL +     m::f2();\n+   | \n+help: alternatively, consider making `fn f2` asynchronous\n+   |\n+LL |     pub(crate) async fn f2() {}\n+   |                +++++\n+\n+error[E0277]: `()` is not a future\n+  --> $DIR/issue-96555.rs:6:12\n+   |\n+LL |     m::f3().await;\n+   |     -------^^^^^^ `()` is not a future\n+   |     |\n+   |     this call returns `()`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n+help: remove the `.await`\n+   |\n+LL -     m::f3().await;\n+LL +     m::f3();\n+   | \n+help: alternatively, consider making `fn f3` asynchronous\n+   |\n+LL |     pub async\n+   |         +++++\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}