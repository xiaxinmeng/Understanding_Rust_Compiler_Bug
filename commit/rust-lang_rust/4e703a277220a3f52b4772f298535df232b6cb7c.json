{"sha": "4e703a277220a3f52b4772f298535df232b6cb7c", "node_id": "C_kwDOAAsO6NoAKDRlNzAzYTI3NzIyMGEzZjUyYjQ3NzJmMjk4NTM1ZGYyMzJiNmNiN2M", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-10-26T19:38:32Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-19T14:18:56Z"}, "message": "Add associated_items_for_impl_trait_in_trait query", "tree": {"sha": "cc75635d3ba7e5fe8bdaccae2fddf500cbb8ffb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc75635d3ba7e5fe8bdaccae2fddf500cbb8ffb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e703a277220a3f52b4772f298535df232b6cb7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPyL9IACgkQgTGiTgx5\n76+u7BAAiIM8QDAR9h2tj16wSDatlC1e9Y97xtb6PUgSmqSXX2jS8VIMYYZZ0e/5\nd0+V5IkYrIGdF29yl9bxMEEfpJmEOWu1p0Qi0u+rBIzOTIWPBZOAhBb0o7ipOaD5\n1Ut8UhhOB3rItfjSs6Xja2rBc0NxNIKLLCpF1cOzZC1RscZdhevyB523gnpE0yUA\niGzFa3p5/UagTZGHev+3hVohmaCaxFTG8qc32xWhPbEba/1Xxajb1gfu9m2aNBj1\n6a3W9EJLwYi5xCzexBHc4Dlgff+h3l00xPjj1jGTLCXyGTakunEBcotVdUtT5WHk\nV5hx2NsaS1PCRgiUxyhJjYvmK5WXy5t1vaOOvxhtbC3eolbC6ULAYg4mmkC9rrTL\nMJ6AaEQ/Q0PfQmO5AUqrnAWjdFYqhdks7UZ3WoXaenwxiKx08/xL9gjkJartlR2V\nABgYeuEaqe9HYhZBIPtoRnvnJotNw/jyCiYYuA869j7KEzMCo3pHRL/nMZnyG3UM\nF6XoNwbxgSyTkdHqSlMhzzs+Lp/LsreEJvJjhc6U2dtGjQFLPt6J9/d3Tm2Ul5Yj\nkZ83XMgD20SM5Zl2b31QSSVAJUK4gw0riRgRALz8ZvrDGPI1xcX6lWXrv2eVE0oq\nTXojKpS9vxm5SJVZ8oyygaqbtNASXoJPTR2/1E9WJ+S42MOnlZQ=\n=KLpR\n-----END PGP SIGNATURE-----", "payload": "tree cc75635d3ba7e5fe8bdaccae2fddf500cbb8ffb2\nparent 833b9154ac7d41d7040129468d6794444533c03f\nauthor Santiago Pastorino <spastorino@gmail.com> 1666813112 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676816336 -0300\n\nAdd associated_items_for_impl_trait_in_trait query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e703a277220a3f52b4772f298535df232b6cb7c", "html_url": "https://github.com/rust-lang/rust/commit/4e703a277220a3f52b4772f298535df232b6cb7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e703a277220a3f52b4772f298535df232b6cb7c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "833b9154ac7d41d7040129468d6794444533c03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/833b9154ac7d41d7040129468d6794444533c03f", "html_url": "https://github.com/rust-lang/rust/commit/833b9154ac7d41d7040129468d6794444533c03f"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "8ceb176491b6f95d37934f00f2cba89dd721f99f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -280,6 +280,8 @@ pub enum DefPathData {\n     AnonConst,\n     /// An `impl Trait` type node.\n     ImplTrait,\n+    /// `impl Trait` generated associated type node.\n+    ImplTraitAssocTy,\n }\n \n impl Definitions {\n@@ -403,7 +405,7 @@ impl DefPathData {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n             Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n-            | ImplTrait => None,\n+            | ImplTrait | ImplTraitAssocTy => None,\n         }\n     }\n \n@@ -422,7 +424,7 @@ impl DefPathData {\n             ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n             Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n             AnonConst => DefPathDataName::Anon { namespace: sym::constant },\n-            ImplTrait => DefPathDataName::Anon { namespace: sym::opaque },\n+            ImplTrait | ImplTraitAssocTy => DefPathDataName::Anon { namespace: sym::opaque },\n         }\n     }\n }"}, {"sha": "9ca8c1abc16d20da82f7c400ad87105769289612", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -248,6 +248,8 @@ provide! { tcx, def_id, other, cdata,\n             .process_decoded(tcx, || panic!(\"{def_id:?} does not have trait_impl_trait_tys\")))\n      }\n \n+    associated_items_for_impl_trait_in_trait => { table_defaulted_array }\n+\n     visibility => { cdata.get_visibility(def_id.index) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {"}, {"sha": "f0dafe73c004e9c99a41c98d0591fd985c3fdf93", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -1129,6 +1129,11 @@ fn should_encode_trait_impl_trait_tys(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     })\n }\n \n+// Return `false` to avoid encoding impl trait in trait, while we don't use the query.\n+fn should_encode_fn_impl_trait_in_trait<'tcx>(_tcx: TyCtxt<'tcx>, _def_id: DefId) -> bool {\n+    false\n+}\n+\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_attrs(&mut self, def_id: LocalDefId) {\n         let tcx = self.tcx;\n@@ -1211,6 +1216,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n+            if should_encode_fn_impl_trait_in_trait(tcx, def_id) {\n+                let table = tcx.associated_items_for_impl_trait_in_trait(def_id);\n+                record_defaulted_array!(self.tables.associated_items_for_impl_trait_in_trait[def_id] <- table);\n+            }\n         }\n \n         let inherent_impls = tcx.with_stable_hashing_context(|hcx| {"}, {"sha": "a7ec2d790b73a9efc962a67d2c5bedfd10d61243", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -354,6 +354,7 @@ define_tables! {\n     explicit_item_bounds: Table<DefIndex, LazyArray<(ty::Predicate<'static>, Span)>>,\n     inferred_outlives_of: Table<DefIndex, LazyArray<(ty::Clause<'static>, Span)>>,\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n+    associated_items_for_impl_trait_in_trait: Table<DefIndex, LazyArray<DefId>>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,"}, {"sha": "2df851a7857715d5c02764fe09feb0b3989e764a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -849,6 +849,13 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn get_fn_output(self, def_id: LocalDefId) -> Option<&'hir FnRetTy<'hir>> {\n+        match self.tcx.hir_owner(OwnerId { def_id }) {\n+            Some(Owner { node, .. }) => node.fn_decl().map(|fn_decl| &fn_decl.output),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn expect_variant(self, id: HirId) -> &'hir Variant<'hir> {\n         match self.find(id) {\n             Some(Node::Variant(variant)) => variant,"}, {"sha": "b7858d9f86d05c69222b6233544257cb8cdf4a29", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -767,6 +767,13 @@ rustc_queries! {\n         desc { |tcx| \"comparing impl items against trait for `{}`\", tcx.def_path_str(impl_id) }\n     }\n \n+    /// Given an `fn_def_id`, create and return the associated items for that function.\n+    query associated_items_for_impl_trait_in_trait(fn_def_id: DefId) -> &'tcx [DefId] {\n+        desc { |tcx| \"creating associated items for impl trait in trait returned by `{}`\", tcx.def_path_str(fn_def_id) }\n+        cache_on_disk_if { fn_def_id.is_local() }\n+        separate_provide_extern\n+    }\n+\n     /// Given an `impl_id`, return the trait it implements.\n     /// Return `None` if this is an inherent impl.\n     query impl_trait_ref(impl_id: DefId) -> Option<ty::EarlyBinder<ty::TraitRef<'tcx>>> {"}, {"sha": "f40047846266f69aa6f3e7784a5a8f34d9765c74", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -396,6 +396,7 @@ fn encode_ty_name(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n             hir::definitions::DefPathData::CrateRoot\n             | hir::definitions::DefPathData::Use\n             | hir::definitions::DefPathData::GlobalAsm\n+            | hir::definitions::DefPathData::ImplTraitAssocTy\n             | hir::definitions::DefPathData::MacroNs(..)\n             | hir::definitions::DefPathData::LifetimeNs(..) => {\n                 bug!(\"encode_ty_name: unexpected `{:?}`\", disambiguated_data.data);"}, {"sha": "d53f0cea6b54e4ae0ff8ede57583c8cb4e05bf56", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -791,6 +791,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             | DefPathData::Use\n             | DefPathData::GlobalAsm\n             | DefPathData::Impl\n+            | DefPathData::ImplTraitAssocTy\n             | DefPathData::MacroNs(_)\n             | DefPathData::LifetimeNs(_) => {\n                 bug!(\"symbol_names: unexpected DefPathData: {:?}\", disambiguated_data.data)"}, {"sha": "a6c137d2f3e234ee7cb0def1bc8c79d641143620", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e703a277220a3f52b4772f298535df232b6cb7c/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=4e703a277220a3f52b4772f298535df232b6cb7c", "patch": "@@ -1,13 +1,16 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::definitions::DefPathData;\n+use rustc_hir::intravisit::{self, Visitor};\n+use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         associated_item,\n         associated_item_def_ids,\n         associated_items,\n+        associated_items_for_impl_trait_in_trait,\n         impl_item_implementor_ids,\n         ..*providers\n     };\n@@ -112,3 +115,34 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n         fn_has_self_parameter: has_self,\n     }\n }\n+\n+fn associated_items_for_impl_trait_in_trait(tcx: TyCtxt<'_>, fn_def_id: DefId) -> &'_ [DefId] {\n+    struct RPITVisitor {\n+        rpits: Vec<LocalDefId>,\n+    }\n+\n+    impl<'v> Visitor<'v> for RPITVisitor {\n+        fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n+            if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n+                self.rpits.push(item_id.owner_id.def_id)\n+            }\n+            intravisit::walk_ty(self, ty)\n+        }\n+    }\n+\n+    let mut visitor = RPITVisitor { rpits: Vec::new() };\n+\n+    if let Some(output) = tcx.hir().get_fn_output(fn_def_id.expect_local()) {\n+        visitor.visit_fn_ret_ty(output);\n+\n+        let trait_def_id = tcx.parent(fn_def_id).expect_local();\n+\n+        tcx.arena.alloc_from_iter(visitor.rpits.iter().map(|_opaque_ty_def_id| {\n+            let trait_assoc_ty =\n+                tcx.at(output.span()).create_def(trait_def_id, DefPathData::ImplTraitAssocTy);\n+            trait_assoc_ty.def_id().to_def_id()\n+        }))\n+    } else {\n+        &[]\n+    }\n+}"}]}