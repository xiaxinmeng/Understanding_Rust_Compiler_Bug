{"sha": "15c9e5e35bc3a9675c476ae10eb656df2c2c14ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzllNWUzNWJjM2E5Njc1YzQ3NmFlMTBlYjY1NmRmMmMyYzE0ZWQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-20T00:39:14Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:04:42Z"}, "message": "Mutate llargs instead of reconstructing it.", "tree": {"sha": "7c821af2e03988cbae9baa44fff5608e73a89951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c821af2e03988cbae9baa44fff5608e73a89951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c9e5e35bc3a9675c476ae10eb656df2c2c14ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c9e5e35bc3a9675c476ae10eb656df2c2c14ed", "html_url": "https://github.com/rust-lang/rust/commit/15c9e5e35bc3a9675c476ae10eb656df2c2c14ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c9e5e35bc3a9675c476ae10eb656df2c2c14ed/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88202c5b838ea9f328d37f19c022eba5040e234f", "url": "https://api.github.com/repos/rust-lang/rust/commits/88202c5b838ea9f328d37f19c022eba5040e234f", "html_url": "https://github.com/rust-lang/rust/commit/88202c5b838ea9f328d37f19c022eba5040e234f"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "44e94a1dfe3e5937be8e07d5fd9548d16a3ade54", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/15c9e5e35bc3a9675c476ae10eb656df2c2c14ed/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c9e5e35bc3a9675c476ae10eb656df2c2c14ed/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=15c9e5e35bc3a9675c476ae10eb656df2c2c14ed", "patch": "@@ -331,16 +331,21 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let fcx = FunctionContext::new(ccx, lloncefn, fn_ty);\n     let mut bcx = fcx.get_entry_block();\n \n+    let callee = Callee {\n+        data: Fn(llreffn),\n+        ty: llref_fn_ty\n+    };\n+\n     // the first argument (`self`) will be the (by value) closure env.\n \n     let mut llargs = get_params(fcx.llfn);\n-    let mut self_idx = fcx.fn_ty.ret.is_indirect() as usize;\n+    let idx = fcx.fn_ty.ret.is_indirect() as usize;\n     let env_arg = &fcx.fn_ty.args[0];\n     let llenv = if env_arg.is_indirect() {\n-        llargs[self_idx]\n+        llargs[idx]\n     } else {\n         let scratch = alloc_ty(&bcx, closure_ty, \"self\");\n-        let mut llarg_idx = self_idx;\n+        let mut llarg_idx = idx;\n         env_arg.store_fn_arg(&bcx, &mut llarg_idx, scratch);\n         scratch\n     };\n@@ -349,35 +354,24 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Adjust llargs such that llargs[self_idx..] has the call arguments.\n     // For zero-sized closures that means sneaking in a new argument.\n     if env_arg.is_ignore() {\n-        if self_idx > 0 {\n-            self_idx -= 1;\n-            llargs[self_idx] = llenv;\n+        if fcx.fn_ty.ret.is_indirect() {\n+            llargs[0] = llenv;\n         } else {\n             llargs.insert(0, llenv);\n         }\n     } else {\n-        llargs[self_idx] = llenv;\n+        llargs[idx] = llenv;\n     }\n \n-    let callee = Callee {\n-        data: Fn(llreffn),\n-        ty: llref_fn_ty\n-    };\n-\n     // Call the by-ref closure body with `self` in a cleanup scope,\n     // to drop `self` when the body returns, or in case it unwinds.\n     let self_scope = fcx.schedule_drop_mem(llenv, closure_ty);\n     let fn_ret = callee.ty.fn_ret();\n     let fn_ty = callee.direct_fn_type(bcx.ccx, &[]);\n \n-    let first_llarg = if fn_ty.ret.is_indirect() && !fcx.fn_ty.ret.is_ignore() {\n-        Some(get_param(fcx.llfn, 0))\n-    } else {\n-        None\n-    };\n-    let llargs = first_llarg.into_iter().chain(llargs[self_idx..].iter().cloned())\n-        .collect::<Vec<_>>();\n-\n+    if fn_ty.ret.is_indirect() {\n+        llargs.insert(0, get_param(fcx.llfn, 0));\n+    }\n     let llfn = callee.reify(bcx.ccx);\n     let llret;\n     if let Some(landing_pad) = self_scope.landing_pad {"}]}