{"sha": "b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "node_id": "C_kwDOAAsO6NoAKGIzZjRjMzExOTk1N2FhMGEyNTBjYWIwOGFiNTg2YjdhOWE2ODBlZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-12T00:25:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-12T00:25:45Z"}, "message": "Auto merge of #99165 - matthiaskrgr:rollup-rqpelfa, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #97210 (Support `-A`, `-W`, `-D` and `-F` when running `./x.py clippy`)\n - #99055 (Fix rustdoc help options)\n - #99075 (Fix duplicated type annotation suggestion)\n - #99124 (Fix sized check ICE in asm check)\n - #99142 (fix(doctest): treat fatal parse errors as incomplete attributes)\n - #99145 (Don't rerun the build script for the compiler each time on non-windows platforms)\n - #99146 (Do not error during method probe on `Sized` predicates for types that aren't the method receiver)\n - #99161 (compiletest: trim edition before passing as flag)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e05cfc3eadb48f6b95e1ab524efb4a701b9bd4ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05cfc3eadb48f6b95e1ab524efb4a701b9bd4ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "html_url": "https://github.com/rust-lang/rust/commit/b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a3325496f89373cb1631a944539ff38d0966fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3325496f89373cb1631a944539ff38d0966fe8", "html_url": "https://github.com/rust-lang/rust/commit/8a3325496f89373cb1631a944539ff38d0966fe8"}, {"sha": "c05e27776416f211ccf0f163f5e1deddf8fd87b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05e27776416f211ccf0f163f5e1deddf8fd87b7", "html_url": "https://github.com/rust-lang/rust/commit/c05e27776416f211ccf0f163f5e1deddf8fd87b7"}], "stats": {"total": 619, "additions": 516, "deletions": 103}, "files": [{"sha": "39cf3e094c823078212ac4534f3a102a861c3803", "filename": "compiler/rustc/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2Fbuild.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -5,6 +5,9 @@ fn main() {\n     let target_env = env::var(\"CARGO_CFG_TARGET_ENV\");\n     if Ok(\"windows\") == target_os.as_deref() && Ok(\"msvc\") == target_env.as_deref() {\n         set_windows_exe_options();\n+    } else {\n+        // Avoid rerunning the build script every time.\n+        println!(\"cargo:rerun-if-changed=build.rs\");\n     }\n }\n "}, {"sha": "da321c45875090cfcc455ad9ec535e8bbdd7f27a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -614,6 +614,14 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Clear any existing suggestions.\n+    pub fn clear_suggestions(&mut self) -> &mut Self {\n+        if let Ok(suggestions) = &mut self.suggestions {\n+            suggestions.clear();\n+        }\n+        self\n+    }\n+\n     /// Helper for pushing to `self.suggestions`, if available (not disable).\n     fn push_suggestion(&mut self, suggestion: CodeSuggestion) {\n         if let Ok(suggestions) = &mut self.suggestions {"}, {"sha": "99ac6a3546ed69caf2a464faa89819e7db7c7574", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -461,6 +461,7 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     forward!(pub fn set_is_lint(&mut self,) -> &mut Self);\n \n     forward!(pub fn disable_suggestions(&mut self,) -> &mut Self);\n+    forward!(pub fn clear_suggestions(&mut self,) -> &mut Self);\n \n     forward!(pub fn multipart_suggestion(\n         &mut self,"}, {"sha": "8d7c6b26ba15266dcca8fba9bb597d3d65e748bc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -2094,6 +2094,9 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |\n                         //    = note: cannot satisfy `_: Tt`\n \n+                        // Clear any more general suggestions in favor of our specific one\n+                        err.clear_suggestions();\n+\n                         err.span_suggestion_verbose(\n                             span.shrink_to_hi(),\n                             &format!("}, {"sha": "a5add1e9a8acb629a73dca107039b07197cd77fe", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n-use rustc_middle::ty::{self, Article, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeVisitable, UintTy};\n+use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitable, UintTy};\n use rustc_session::lint;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};\n@@ -99,8 +99,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    // FIXME(compiler-errors): This could use `<$ty as Pointee>::Metadata == ()`\n     fn is_thin_ptr_ty(&self, ty: Ty<'tcx>) -> bool {\n-        if ty.is_sized(self.tcx.at(DUMMY_SP), self.param_env) {\n+        // Type still may have region variables, but `Sized` does not depend\n+        // on those, so just erase them before querying.\n+        if self.tcx.erase_regions(ty).is_sized(self.tcx.at(DUMMY_SP), self.param_env) {\n             return true;\n         }\n         if let ty::Foreign(..) = ty.kind() {\n@@ -128,30 +131,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             64 => InlineAsmType::I64,\n             _ => unreachable!(),\n         };\n+\n+        // Expect types to be fully resolved, no const or type variables.\n+        if ty.has_infer_types_or_consts() {\n+            assert!(self.is_tainted_by_errors());\n+            return None;\n+        }\n+\n         let asm_ty = match *ty.kind() {\n             // `!` is allowed for input but not for output (issue #87802)\n             ty::Never if is_input => return None,\n             ty::Error(_) => return None,\n             ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => Some(InlineAsmType::I8),\n             ty::Int(IntTy::I16) | ty::Uint(UintTy::U16) => Some(InlineAsmType::I16),\n-            // Somewhat of a hack: fallback in the presence of errors does not actually\n-            // fall back to i32, but to ty::Error. For integer inference variables this\n-            // means that they don't get any fallback and stay as `{integer}`.\n-            // Since compilation can't succeed anyway, it's fine to use this to avoid printing\n-            // \"cannot use value of type `{integer}`\", even though that would absolutely\n-            // work due due i32 fallback if the current function had no other errors.\n-            ty::Infer(InferTy::IntVar(_)) => {\n-                assert!(self.is_tainted_by_errors());\n-                Some(InlineAsmType::I32)\n-            }\n             ty::Int(IntTy::I32) | ty::Uint(UintTy::U32) => Some(InlineAsmType::I32),\n             ty::Int(IntTy::I64) | ty::Uint(UintTy::U64) => Some(InlineAsmType::I64),\n             ty::Int(IntTy::I128) | ty::Uint(UintTy::U128) => Some(InlineAsmType::I128),\n             ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize) => Some(asm_ty_isize),\n-            ty::Infer(InferTy::FloatVar(_)) => {\n-                assert!(self.is_tainted_by_errors());\n-                Some(InlineAsmType::F32)\n-            }\n             ty::Float(FloatTy::F32) => Some(InlineAsmType::F32),\n             ty::Float(FloatTy::F64) => Some(InlineAsmType::F64),\n             ty::FnPtr(_) => Some(asm_ty_isize),\n@@ -191,6 +187,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     _ => None,\n                 }\n             }\n+            ty::Infer(_) => unreachable!(),\n             _ => None,\n         };\n         let Some(asm_ty) = asm_ty else {\n@@ -204,11 +201,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         };\n \n-        if ty.has_infer_types_or_consts() {\n-            assert!(self.is_tainted_by_errors());\n-            return None;\n-        }\n-\n         // Check that the type implements Copy. The only case where this can\n         // possibly fail is for SIMD types which don't #[derive(Copy)].\n         if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, DUMMY_SP) {"}, {"sha": "b14f3d6de4ef1be75c45b024136dd6a31328c41e", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -81,11 +81,25 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n         let all_substs = self.instantiate_method_substs(&pick, segment, rcvr_substs);\n \n-        debug!(\"all_substs={:?}\", all_substs);\n+        debug!(\"rcvr_substs={rcvr_substs:?}, all_substs={all_substs:?}\");\n \n         // Create the final signature for the method, replacing late-bound regions.\n         let (method_sig, method_predicates) = self.instantiate_method_sig(&pick, all_substs);\n \n+        // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n+        // something which derefs to `Self` actually implements the trait and the caller\n+        // wanted to make a static dispatch on it but forgot to import the trait.\n+        // See test `src/test/ui/issue-35976.rs`.\n+        //\n+        // In that case, we'll error anyway, but we'll also re-run the search with all traits\n+        // in scope, and if we find another method which can be used, we'll output an\n+        // appropriate hint suggesting to import the trait.\n+        let filler_substs = rcvr_substs\n+            .extend_to(self.tcx, pick.item.def_id, |def, _| self.tcx.mk_param_from_def(def));\n+        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(\n+            &self.tcx.predicates_of(pick.item.def_id).instantiate(self.tcx, filler_substs),\n+        );\n+\n         // Unify the (adjusted) self type with what the method expects.\n         //\n         // SUBTLE: if we want good error messages, because of \"guessing\" while matching\n@@ -106,16 +120,6 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // Make sure nobody calls `drop()` explicitly.\n         self.enforce_illegal_method_limitations(&pick);\n \n-        // If there is a `Self: Sized` bound and `Self` is a trait object, it is possible that\n-        // something which derefs to `Self` actually implements the trait and the caller\n-        // wanted to make a static dispatch on it but forgot to import the trait.\n-        // See test `src/test/ui/issue-35976.rs`.\n-        //\n-        // In that case, we'll error anyway, but we'll also re-run the search with all traits\n-        // in scope, and if we find another method which can be used, we'll output an\n-        // appropriate hint suggesting to import the trait.\n-        let illegal_sized_bound = self.predicates_require_illegal_sized_bound(&method_predicates);\n-\n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case."}, {"sha": "c0b3a23fde437f0c5626c2cef6ccd25cffcbba96", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -20,8 +20,8 @@ use rustc_hir::def_id::DefId;\n use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, ToPredicate, Ty, TypeVisitable};\n+use rustc_middle::ty::{DefIdTree, GenericParamDefKind};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -221,7 +221,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // We probe again, taking all traits into account (not only those in scope).\n-            let candidates = match self.lookup_probe(\n+            let mut candidates = match self.lookup_probe(\n                 span,\n                 segment.ident,\n                 self_ty,\n@@ -243,6 +243,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .collect(),\n                 _ => Vec::new(),\n             };\n+            candidates.retain(|candidate| *candidate != self.tcx.parent(result.callee.def_id));\n \n             return Err(IllegalSizedBound(candidates, needs_mut, span));\n         }"}, {"sha": "9196b78c513fe3747761b592c83e47e899e0de82", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -20,7 +20,15 @@ fn args(builder: &Builder<'_>) -> Vec<String> {\n         arr.iter().copied().map(String::from)\n     }\n \n-    if let Subcommand::Clippy { fix, .. } = builder.config.cmd {\n+    if let Subcommand::Clippy {\n+        fix,\n+        clippy_lint_allow,\n+        clippy_lint_deny,\n+        clippy_lint_warn,\n+        clippy_lint_forbid,\n+        ..\n+    } = &builder.config.cmd\n+    {\n         // disable the most spammy clippy lints\n         let ignored_lints = vec![\n             \"many_single_char_names\", // there are a lot in stdarch\n@@ -32,7 +40,7 @@ fn args(builder: &Builder<'_>) -> Vec<String> {\n             \"wrong_self_convention\",\n         ];\n         let mut args = vec![];\n-        if fix {\n+        if *fix {\n             #[rustfmt::skip]\n             args.extend(strings(&[\n                 \"--fix\", \"-Zunstable-options\",\n@@ -44,6 +52,12 @@ fn args(builder: &Builder<'_>) -> Vec<String> {\n         }\n         args.extend(strings(&[\"--\", \"--cap-lints\", \"warn\"]));\n         args.extend(ignored_lints.iter().map(|lint| format!(\"-Aclippy::{}\", lint)));\n+        let mut clippy_lint_levels: Vec<String> = Vec::new();\n+        clippy_lint_allow.iter().for_each(|v| clippy_lint_levels.push(format!(\"-A{}\", v)));\n+        clippy_lint_deny.iter().for_each(|v| clippy_lint_levels.push(format!(\"-D{}\", v)));\n+        clippy_lint_warn.iter().for_each(|v| clippy_lint_levels.push(format!(\"-W{}\", v)));\n+        clippy_lint_forbid.iter().for_each(|v| clippy_lint_levels.push(format!(\"-F{}\", v)));\n+        args.extend(clippy_lint_levels);\n         args\n     } else {\n         vec![]"}, {"sha": "1822c2936b71ff23d499720c7a79d32d83344c0a", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -91,6 +91,10 @@ pub enum Subcommand {\n     Clippy {\n         fix: bool,\n         paths: Vec<PathBuf>,\n+        clippy_lint_allow: Vec<String>,\n+        clippy_lint_deny: Vec<String>,\n+        clippy_lint_warn: Vec<String>,\n+        clippy_lint_forbid: Vec<String>,\n     },\n     Fix {\n         paths: Vec<PathBuf>,\n@@ -246,6 +250,10 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         opts.optopt(\"\", \"rust-profile-use\", \"use PGO profile for rustc build\", \"PROFILE\");\n         opts.optflag(\"\", \"llvm-profile-generate\", \"generate PGO profile with llvm built for rustc\");\n         opts.optopt(\"\", \"llvm-profile-use\", \"use PGO profile for llvm build\", \"PROFILE\");\n+        opts.optmulti(\"A\", \"\", \"allow certain clippy lints\", \"OPT\");\n+        opts.optmulti(\"D\", \"\", \"deny certain clippy lints\", \"OPT\");\n+        opts.optmulti(\"W\", \"\", \"warn about certain clippy lints\", \"OPT\");\n+        opts.optmulti(\"F\", \"\", \"forbid certain clippy lints\", \"OPT\");\n \n         // We can't use getopt to parse the options until we have completed specifying which\n         // options are valid, but under the current implementation, some options are conditional on\n@@ -544,7 +552,14 @@ Arguments:\n                 }\n                 Subcommand::Check { paths }\n             }\n-            Kind::Clippy => Subcommand::Clippy { paths, fix: matches.opt_present(\"fix\") },\n+            Kind::Clippy => Subcommand::Clippy {\n+                paths,\n+                fix: matches.opt_present(\"fix\"),\n+                clippy_lint_allow: matches.opt_strs(\"A\"),\n+                clippy_lint_warn: matches.opt_strs(\"W\"),\n+                clippy_lint_deny: matches.opt_strs(\"D\"),\n+                clippy_lint_forbid: matches.opt_strs(\"F\"),\n+            },\n             Kind::Fix => Subcommand::Fix { paths },\n             Kind::Test => Subcommand::Test {\n                 paths,"}, {"sha": "1f30c7006f5afa60985d8180e956c294d7513c7a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -329,6 +329,17 @@ impl Options {\n             return Err(0);\n         }\n \n+        let z_flags = matches.opt_strs(\"Z\");\n+        if z_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-Z\", config::DB_OPTIONS);\n+            return Err(0);\n+        }\n+        let c_flags = matches.opt_strs(\"C\");\n+        if c_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-C\", config::CG_OPTIONS);\n+            return Err(0);\n+        }\n+\n         let color = config::parse_color(matches);\n         let config::JsonConfig { json_rendered, json_unused_externs, .. } =\n             config::parse_json(matches);\n@@ -343,17 +354,6 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(matches, &diag);\n \n-        let z_flags = matches.opt_strs(\"Z\");\n-        if z_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-Z\", config::DB_OPTIONS);\n-            return Err(0);\n-        }\n-        let c_flags = matches.opt_strs(\"C\");\n-        if c_flags.iter().any(|x| *x == \"help\") {\n-            print_flag_list(\"-C\", config::CG_OPTIONS);\n-            return Err(0);\n-        }\n-\n         if matches.opt_strs(\"passes\") == [\"list\"] {\n             println!(\"Available passes for running rustdoc:\");\n             for pass in passes::PASSES {"}, {"sha": "39ec6a6085640509a9b4895153bad362bcd5edd9", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -726,31 +726,58 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n         // Empty content so nothing to check in here...\n         return true;\n     }\n-    rustc_span::create_session_if_not_set_then(edition, |_| {\n-        let filename = FileName::anon_source_code(source);\n-        let sess = ParseSess::with_silent_emitter(None);\n-        let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source.to_owned())\n-        {\n-            Ok(p) => p,\n-            Err(_) => {\n-                debug!(\"Cannot build a parser to check mod attr so skipping...\");\n-                return true;\n+    rustc_driver::catch_fatal_errors(|| {\n+        rustc_span::create_session_if_not_set_then(edition, |_| {\n+            use rustc_errors::emitter::EmitterWriter;\n+            use rustc_errors::Handler;\n+            use rustc_span::source_map::FilePathMapping;\n+\n+            let filename = FileName::anon_source_code(source);\n+            // Any errors in parsing should also appear when the doctest is compiled for real, so just\n+            // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n+            let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+            let fallback_bundle =\n+                rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+\n+            let emitter = EmitterWriter::new(\n+                box io::sink(),\n+                None,\n+                None,\n+                fallback_bundle,\n+                false,\n+                false,\n+                false,\n+                None,\n+                false,\n+            );\n+\n+            let handler = Handler::with_emitter(false, None, box emitter);\n+            let sess = ParseSess::with_span_handler(handler, sm);\n+            let mut parser =\n+                match maybe_new_parser_from_source_str(&sess, filename, source.to_owned()) {\n+                    Ok(p) => p,\n+                    Err(_) => {\n+                        debug!(\"Cannot build a parser to check mod attr so skipping...\");\n+                        return true;\n+                    }\n+                };\n+            // If a parsing error happened, it's very likely that the attribute is incomplete.\n+            if let Err(e) = parser.parse_attribute(InnerAttrPolicy::Permitted) {\n+                e.cancel();\n+                return false;\n             }\n-        };\n-        // If a parsing error happened, it's very likely that the attribute is incomplete.\n-        if parser.parse_attribute(InnerAttrPolicy::Permitted).is_err() {\n-            return false;\n-        }\n-        // We now check if there is an unclosed delimiter for the attribute. To do so, we look at\n-        // the `unclosed_delims` and see if the opening square bracket was closed.\n-        parser\n-            .unclosed_delims()\n-            .get(0)\n-            .map(|unclosed| {\n-                unclosed.unclosed_span.map(|s| s.lo()).unwrap_or(BytePos(0)) != BytePos(2)\n-            })\n-            .unwrap_or(true)\n+            // We now check if there is an unclosed delimiter for the attribute. To do so, we look at\n+            // the `unclosed_delims` and see if the opening square bracket was closed.\n+            parser\n+                .unclosed_delims()\n+                .get(0)\n+                .map(|unclosed| {\n+                    unclosed.unclosed_span.map(|s| s.lo()).unwrap_or(BytePos(0)) != BytePos(2)\n+                })\n+                .unwrap_or(true)\n+        })\n     })\n+    .unwrap_or(false)\n }\n \n fn partition_source(s: &str, edition: Edition) -> (String, String, String) {"}, {"sha": "f63e8b08ecdad938de9d73347d06d25be1225ec3", "filename": "src/test/rustdoc-ui/c-help.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fc-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fc-help.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Chelp\n+\n+pub struct Foo;"}, {"sha": "75b2e2a2a43f4b54bb347e2075b6d835f8b6f749", "filename": "src/test/rustdoc-ui/c-help.stdout", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fc-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fc-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fc-help.stdout?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,51 @@\n+    -C                       ar=val -- this option is deprecated and does nothing\n+    -C               code-model=val -- choose the code model to use (`rustc --print code-models` for details)\n+    -C            codegen-units=val -- divide crate into N units to optimize in parallel\n+    -C       control-flow-guard=val -- use Windows Control Flow Guard (default: no)\n+    -C         debug-assertions=val -- explicitly enable the `cfg(debug_assertions)` directive\n+    -C                debuginfo=val -- debug info emission level (0 = no debug info, 1 = line tables only, 2 = full debug info with variable and type information; default: 0)\n+    -C default-linker-libraries=val -- allow the linker to link its default libraries (default: no)\n+    -C            embed-bitcode=val -- emit bitcode in rlibs (default: yes)\n+    -C           extra-filename=val -- extra data to put in each output filename\n+    -C     force-frame-pointers=val -- force use of the frame pointers\n+    -C      force-unwind-tables=val -- force use of unwind tables\n+    -C              incremental=val -- enable incremental compilation\n+    -C         inline-threshold=val -- set the threshold for inlining a function\n+    -C      instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -C                 link-arg=val -- a single extra argument to append to the linker invocation (can be used several times)\n+    -C                link-args=val -- extra arguments to append to the linker invocation (space separated)\n+    -C           link-dead-code=val -- keep dead code at link time (useful for code coverage) (default: no)\n+    -C      link-self-contained=val -- control whether to link Rust provided C objects/libraries or rely\n+        on C toolchain installed in the system\n+    -C                   linker=val -- system linker to link outputs with\n+    -C            linker-flavor=val -- linker flavor\n+    -C        linker-plugin-lto=val -- generate build artifacts that are compatible with linker-based LTO\n+    -C                llvm-args=val -- a list of arguments to pass to LLVM (space separated)\n+    -C                      lto=val -- perform LLVM link-time optimizations\n+    -C                 metadata=val -- metadata to mangle symbol names with\n+    -C    no-prepopulate-passes=val -- give an empty list of passes to the pass manager\n+    -C               no-redzone=val -- disable the use of the redzone\n+    -C           no-stack-check=val -- this option is deprecated and does nothing\n+    -C       no-vectorize-loops=val -- disable loop vectorization optimization passes\n+    -C         no-vectorize-slp=val -- disable LLVM's SLP vectorization pass\n+    -C                opt-level=val -- optimization level (0-3, s, or z; default: 0)\n+    -C          overflow-checks=val -- use overflow checks for integer arithmetic\n+    -C                    panic=val -- panic strategy to compile crate with\n+    -C                   passes=val -- a list of extra LLVM passes to run (space separated)\n+    -C           prefer-dynamic=val -- prefer dynamic linking to static linking (default: no)\n+    -C         profile-generate=val -- compile the program with profiling instrumentation\n+    -C              profile-use=val -- use the given `.profdata` file for profile-guided optimization\n+    -C         relocation-model=val -- control generation of position-independent code (PIC) (`rustc --print relocation-models` for details)\n+    -C                   remark=val -- print remarks for these optimization passes (space separated, or \"all\")\n+    -C                    rpath=val -- set rpath values in libs/exes (default: no)\n+    -C               save-temps=val -- save all temporary output files during compilation (default: no)\n+    -C               soft-float=val -- use soft float ABI (*eabihf targets only) (default: no)\n+    -C          split-debuginfo=val -- how to handle split-debuginfo, a platform-specific option\n+    -C                    strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -C  symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -C               target-cpu=val -- select target processor (`rustc --print target-cpus` for details)\n+    -C           target-feature=val -- target specific attributes. (`rustc --print target-features` for details). This feature is unsafe."}, {"sha": "a30472ac56b24aa1e59edc438fe5ff6be8578a14", "filename": "src/test/rustdoc-ui/doctest-multiline-crate-attribute.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags:--test --test-args=--test-threads=1\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// check-pass\n+\n+/// ```\n+/// #![deprecated(since = \"5.2\", note = \"foo was rarely used. \\\n+///    Users should instead use bar\")]\n+/// ```\n+pub fn f() {}"}, {"sha": "07a4f657dea6a15405d7ad22a0b570f1d20814f9", "filename": "src/test/rustdoc-ui/doctest-multiline-crate-attribute.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-multiline-crate-attribute.stdout?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/doctest-multiline-crate-attribute.rs - f (line 6) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "036c68c272b823daecd7f9d2398c848586d52220", "filename": "src/test/rustdoc-ui/z-help.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fz-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Zhelp\n+\n+pub struct Foo;"}, {"sha": "7296b35788a9d019c08be4586ae3803dd49394f3", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "added", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,195 @@\n+    -Z                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -Z                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -Z               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -Z                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -Z                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -Z                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -Z                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -Z                           cf-protection=val -- instrument control-flow architecture protection\n+    -Z               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -Z                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -Z                         codegen-backend=val -- the backend to use\n+    -Z                             combine-cgu=val -- combine CGUs into a single one\n+    -Z                              crate-attr=val -- inject the given attribute in the crate\n+    -Z                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -Z                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -Z                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -Z                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -Z                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -Z                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -Z                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -Z                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -Z                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -Z                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -Z                  dump-drop-tracking-cfg=val -- dump drop-tracking control-flow graph as a `.dot` file (default: no)\n+    -Z                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -Z                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -Z                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -Z            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n+    -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -Z                                    fuel=val -- set the optimization fuel quota for a crate\n+    -Z                       function-sections=val -- whether each function should go in its own section\n+    -Z                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -Z                                  gcc-ld=val -- implementation of ld used by cc\n+    -Z                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -Z                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -Z                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -Z                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -Z                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -Z                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -Z                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -Z              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -Z                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -Z                              inline-mir=val -- enable MIR inlining (default: no)\n+    -Z                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -Z               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -Z                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -Z                             input-stats=val -- gather statistics about the input (default: no)\n+    -Z                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -Z                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -Z                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -Z                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -Z                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -Z                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -Z                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -Z                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -Z                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -Z                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -Z                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -Z                              meta-stats=val -- gather metadata statistics (default: no)\n+    -Z                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -Z                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -Z                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -Z                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -Z                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -Z                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -Z                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -Z                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -Z                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -Z                              no-codegen=val -- run all passes except codegen; no output\n+    -Z              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -Z                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -Z                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -Z                                 no-link=val -- compile without linking\n+    -Z                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -Z                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -Z                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -Z                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -Z                                     oom=val -- panic strategy for out-of-memory handling\n+    -Z                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -Z                        diagnostic-width=val -- set the current output width for diagnostic truncation\n+    -Z                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -Z                           panic-in-drop=val -- panic strategy for panics in drops\n+    -Z                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -Z                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -Z pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -Z                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -Z                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -Z                            polymorphize=val -- perform polymorphization analysis\n+    -Z                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -Z                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -Z           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -Z                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -Z                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -Z                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -Z                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -Z                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -Z                                 profile=val -- insert profiling code (default: no)\n+    -Z                        profile-closures=val -- profile size of closures\n+    -Z                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -Z                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -Z                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -Z                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -Z                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -Z                             layout-seed=val -- seed layout randomization\n+    -Z                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -Z                             relro-level=val -- choose which RELRO level to use\n+    -Z                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -Z         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -Z                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -Z                               sanitizer=val -- use a sanitizer\n+    -Z          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -Z                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -Z                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -Z                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -Z                            self-profile=val -- run the self profiler and output the raw event data\n+    -Z                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -Z                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -Z                          share-generics=val -- make the current crate share its generic instantiations\n+    -Z                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -Z                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -Z                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -Z                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -Z                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -Z                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -Z                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -Z                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n+\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -Z                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -Z                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -Z                                   teach=val -- show extended diagnostic help (default: no)\n+    -Z                               temps-dir=val -- the directory the intermediate files are written to\n+    -Z                          translate-lang=val -- language identifier for diagnostic output\n+    -Z                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -Z        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -Z                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -Z                                 thinlto=val -- enable ThinLTO when possible\n+    -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -Z                                 threads=val -- use a thread pool with N threads\n+    -Z                                    time=val -- measure time of rustc processes (default: no)\n+    -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -Z   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -Z                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -Z                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -Z                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -Z                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -Z            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -Z          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -Z                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -Z                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -Z                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -Z                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -Z                            validate-mir=val -- validate MIR after each transformation\n+    -Z                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -Z                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -Z            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -Z                         wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "e282884289db3dba4eba2c6cdb997b82f221c036", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -411,7 +411,7 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:538:19\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:539:19\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`"}, {"sha": "cfb9fd90a55b7c56075ec484311cb5647c729018", "filename": "src/test/ui/asm/issue-99122-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasm%2Fissue-99122-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasm%2Fissue-99122-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-99122-2.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+// needs-asm-support\n+// only-x86_64\n+\n+// This demonstrates why we need to erase regions before sized check in intrinsicck\n+\n+struct NoCopy;\n+\n+struct Wrap<'a, T, Tail: ?Sized>(&'a T, Tail);\n+\n+pub unsafe fn test() {\n+    let i = NoCopy;\n+    let j = Wrap(&i, ());\n+    let pointer = &j as *const _;\n+    core::arch::asm!(\n+        \"nop\",\n+        in(\"eax\") pointer,\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "744a563d3d147695436784a6445a5119a37eb94c", "filename": "src/test/ui/asm/issue-99122.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasm%2Fissue-99122.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasm%2Fissue-99122.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-99122.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,13 @@\n+// needs-asm-support\n+// only-x86_64\n+\n+pub unsafe fn test() {\n+    let pointer = 1u32 as *const _;\n+    //~^ ERROR cannot cast to a pointer of an unknown kind\n+    core::arch::asm!(\n+        \"nop\",\n+        in(\"eax\") pointer,\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "2758a4ac4377e955ce7d22860834b13c92259ef5", "filename": "src/test/ui/asm/issue-99122.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasm%2Fissue-99122.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasm%2Fissue-99122.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-99122.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,11 @@\n+error[E0641]: cannot cast to a pointer of an unknown kind\n+  --> $DIR/issue-99122.rs:5:27\n+   |\n+LL |     let pointer = 1u32 as *const _;\n+   |                           ^^^^^^^^ needs more type information\n+   |\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0641`."}, {"sha": "9cabf16f8bba98e432fdea8c1ba2e10fdccf1dce", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -6,7 +6,7 @@\n \n #![allow(unused)]\n \n-// edition:2018\n+// edition: 2018\n // aux-build:arc_wake.rs\n \n extern crate arc_wake;"}, {"sha": "5c52e7bcfab694f5c494fc7a3733be25facadba3", "filename": "src/test/ui/inference/erase-type-params-in-label.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Ferase-type-params-in-label.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -10,10 +10,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T, K, W: Default, Z: Default>(t: T, k: K) -> Foo<T, K, W, Z> {\n    |                 ^^^^^^^ required by this bound in `foo`\n-help: consider giving `foo` an explicit type, where the type for type parameter `W` is specified\n-   |\n-LL |     let foo: Foo<i32, &str, W, Z> = foo(1, \"\");\n-   |            ++++++++++++++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     let foo = foo::<T, K, W, Z>(1, \"\");\n@@ -31,10 +27,6 @@ note: required by a bound in `bar`\n    |\n LL | fn bar<T, K, Z: Default>(t: T, k: K) -> Bar<T, K, Z> {\n    |                 ^^^^^^^ required by this bound in `bar`\n-help: consider giving `bar` an explicit type, where the type for type parameter `Z` is specified\n-   |\n-LL |     let bar: Bar<i32, &str, Z> = bar(1, \"\");\n-   |            +++++++++++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     let bar = bar::<T, K, Z>(1, \"\");"}, {"sha": "04673a375cf0176f780abe3d45b33bfe8a97c407", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -13,10 +13,6 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the generic argument\n-   |\n-LL |         .get::<Q>(&\"key\".into())\n-   |             +++++\n help: consider specifying the type argument in the function call\n    |\n LL |         .get::<Q>(&\"key\".into())"}, {"sha": "fe16f97b9d0f5c54fc78895b4c9f609e2eb8e8af", "filename": "src/test/ui/issues/issue-35976.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -6,11 +6,6 @@ LL |         fn wait(&self) where Self: Sized;\n ...\n LL |     arg.wait();\n    |         ^^^^\n-   |\n-help: another candidate was found in the following trait, perhaps add a `use` for it:\n-   |\n-LL | use private::Future;\n-   |\n \n error: aborting due to previous error\n "}, {"sha": "c5ca0326e430c466d8eb9729857da836bf3e2033", "filename": "src/test/ui/methods/issues/issue-61525.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,20 @@\n+pub trait Example {\n+    fn query<Q>(self, q: Q);\n+}\n+\n+impl Example for i32 {\n+    fn query<Q>(self, _: Q) {\n+        unimplemented!()\n+    }\n+}\n+\n+mod nested {\n+    use super::Example;\n+    fn example() {\n+        1.query::<dyn ToString>(\"\")\n+        //~^ ERROR the size for values of type `dyn ToString` cannot be known at compilation time\n+        //~| ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "aec968d7c44f45538a9c05e5e35997ea7a1ffcaf", "filename": "src/test/ui/methods/issues/issue-61525.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -0,0 +1,39 @@\n+error[E0277]: the size for values of type `dyn ToString` cannot be known at compilation time\n+  --> $DIR/issue-61525.rs:14:33\n+   |\n+LL |         1.query::<dyn ToString>(\"\")\n+   |           -----                 ^^ doesn't have a size known at compile-time\n+   |           |\n+   |           required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn ToString`\n+note: required by a bound in `Example::query`\n+  --> $DIR/issue-61525.rs:2:14\n+   |\n+LL |     fn query<Q>(self, q: Q);\n+   |              ^ required by this bound in `Example::query`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL |     fn query<Q: ?Sized>(self, q: Q);\n+   |               ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61525.rs:14:33\n+   |\n+LL |         1.query::<dyn ToString>(\"\")\n+   |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n+   |           |\n+   |           arguments to this function are incorrect\n+   |\n+   = note: expected trait object `dyn ToString`\n+                 found reference `&'static str`\n+note: associated function defined here\n+  --> $DIR/issue-61525.rs:2:8\n+   |\n+LL |     fn query<Q>(self, q: Q);\n+   |        ^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "2b832e27c5224ac26a388ed73810dc9a4f6a77b7", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -13,10 +13,6 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the generic argument\n-   |\n-LL |     opts.get::<Q>(opt.as_ref());\n-   |             +++++\n help: consider specifying the type argument in the function call\n    |\n LL |     opts.get::<Q>(opt.as_ref());"}, {"sha": "cbec35934214886d693b3d5a6625b1ec0ca16033", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -30,10 +30,6 @@ LL | fn test<T,U>(_: T, _: U)\n    |    ---- required by a bound in this\n LL | where T : Convert<U>\n    |           ^^^^^^^^^^ required by this bound in `test`\n-help: consider specifying the generic arguments\n-   |\n-LL |     test::<i32, U>(22, std::default::Default::default());\n-   |         ++++++++++\n help: consider specifying the type arguments in the function call\n    |\n LL |     test::<T, U>(22, std::default::Default::default());"}, {"sha": "4af4c22f75166153ab35739f1c1c2fd8ac3869df", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -10,10 +10,6 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}\n    |           ^^^^^^^^^^^^ required by this bound in `foo`\n-help: consider specifying the generic argument\n-   |\n-LL |     foo::<T>(42);\n-   |        +++++\n help: consider specifying the type argument in the function call\n    |\n LL |     foo::<T>(42);"}, {"sha": "21d685861716d90946310a540087e7f52613aa19", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f4c3119957aa0a250cab08ab586b7a9a680ef1/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "patch": "@@ -294,7 +294,7 @@ impl TestProps {\n                 }\n \n                 if let Some(edition) = config.parse_edition(ln) {\n-                    self.compile_flags.push(format!(\"--edition={}\", edition));\n+                    self.compile_flags.push(format!(\"--edition={}\", edition.trim()));\n                     has_edition = true;\n                 }\n "}]}