{"sha": "8a6a129aec86341a2b066a338a78b9e5509137c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNmExMjlhZWM4NjM0MWEyYjA2NmEzMzhhNzhiOWU1NTA5MTM3YzU=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T10:31:15Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-22T08:56:10Z"}, "message": "Remove save() and load().", "tree": {"sha": "61eb2ba5d2404a5eb9a8dc1d457ad2cddcd64700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61eb2ba5d2404a5eb9a8dc1d457ad2cddcd64700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a6a129aec86341a2b066a338a78b9e5509137c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6a129aec86341a2b066a338a78b9e5509137c5", "html_url": "https://github.com/rust-lang/rust/commit/8a6a129aec86341a2b066a338a78b9e5509137c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a6a129aec86341a2b066a338a78b9e5509137c5/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b3e14d7fa5f6e07f38ca174daed489edcfc113", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b3e14d7fa5f6e07f38ca174daed489edcfc113", "html_url": "https://github.com/rust-lang/rust/commit/27b3e14d7fa5f6e07f38ca174daed489edcfc113"}], "stats": {"total": 27, "additions": 1, "deletions": 26}, "files": [{"sha": "e1ae87475ca9f8f7463f9abcafa23f88ae93c7f3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8a6a129aec86341a2b066a338a78b9e5509137c5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6a129aec86341a2b066a338a78b9e5509137c5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8a6a129aec86341a2b066a338a78b9e5509137c5", "patch": "@@ -54,15 +54,14 @@ use self::OutputLocation::*;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};\n use regex::Regex;\n-use serialize::{json, Decodable, Encodable};\n+use serialize::Encodable;\n use term::Terminal;\n use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n use std::any::Any;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::fmt;\n-use std::io::fs::PathExtensions;\n use std::io::stdio::StdWriter;\n use std::io::{File, ChanReader, ChanWriter};\n use std::io;\n@@ -990,30 +989,6 @@ impl MetricMap {\n         MetricMap(BTreeMap::new())\n     }\n \n-    /// Load MetricDiff from a file.\n-    ///\n-    /// # Panics\n-    ///\n-    /// This function will panic if the path does not exist or the path does not\n-    /// contain a valid metric map.\n-    pub fn load(p: &Path) -> MetricMap {\n-        assert!(p.exists());\n-        let mut f = File::open(p).unwrap();\n-        let value = json::from_reader(&mut f as &mut io::Reader).unwrap();\n-        let mut decoder = json::Decoder::new(value);\n-        MetricMap(match Decodable::decode(&mut decoder) {\n-            Ok(t) => t,\n-            Err(e) => panic!(\"failure decoding JSON: {:?}\", e)\n-        })\n-    }\n-\n-    /// Write MetricDiff to a file.\n-    pub fn save(&self, p: &Path) -> io::IoResult<()> {\n-        let mut file = try!(File::create(p));\n-        let MetricMap(ref map) = *self;\n-        write!(&mut file, \"{}\", json::as_json(map))\n-    }\n-\n     /// Insert a named `value` (+/- `noise`) metric into the map. The value\n     /// must be non-negative. The `noise` indicates the uncertainty of the\n     /// metric, which doubles as the \"noise range\" of acceptable"}]}