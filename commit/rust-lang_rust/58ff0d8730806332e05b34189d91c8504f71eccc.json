{"sha": "58ff0d8730806332e05b34189d91c8504f71eccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZmYwZDg3MzA4MDYzMzJlMDViMzQxODlkOTFjODUwNGY3MWVjY2M=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-24T10:06:27Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-24T10:06:27Z"}, "message": "Merge pull request #515 from Wafflespeanut/coverage\n\nCoverage mode for rustfmt...", "tree": {"sha": "4dd73cb4f12e7c45a06fc8aee8dcc42f0231320e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dd73cb4f12e7c45a06fc8aee8dcc42f0231320e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58ff0d8730806332e05b34189d91c8504f71eccc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58ff0d8730806332e05b34189d91c8504f71eccc", "html_url": "https://github.com/rust-lang/rust/commit/58ff0d8730806332e05b34189d91c8504f71eccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58ff0d8730806332e05b34189d91c8504f71eccc/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b244b67ed6708b42507067d029a56614c1c484", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b244b67ed6708b42507067d029a56614c1c484", "html_url": "https://github.com/rust-lang/rust/commit/29b244b67ed6708b42507067d029a56614c1c484"}, {"sha": "7f7d7631751b762e0660003fe62575367bed5889", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7d7631751b762e0660003fe62575367bed5889", "html_url": "https://github.com/rust-lang/rust/commit/7f7d7631751b762e0660003fe62575367bed5889"}], "stats": {"total": 112, "additions": 86, "deletions": 26}, "files": [{"sha": "60c1312b6c64ef061cbcea16ee511e9cda92eaa4", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -108,7 +108,7 @@ fn determine_params<I>(args: I) -> Option<(PathBuf, WriteMode)>\n     opts.optopt(\"\",\n                 \"write-mode\",\n                 \"mode to write in\",\n-                \"[replace|overwrite|display|diff]\");\n+                \"[replace|overwrite|display|diff|coverage]\");\n     let matches = match opts.parse(args) {\n         Ok(m) => m,\n         Err(e) => {"}, {"sha": "20a637bffcade36a5d182e9fcb75fa4133944ea4", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -422,7 +422,7 @@ impl Rewrite for ast::Block {\n             return Some(user_str);\n         }\n \n-        let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config);\n+        let mut visitor = FmtVisitor::from_codemap(context.codemap, context.config, None);\n         visitor.block_indent = context.block_indent;\n \n         let prefix = match self.rules {\n@@ -833,7 +833,7 @@ impl Rewrite for ast::Arm {\n         let attr_str = if !attrs.is_empty() {\n             // We only use this visitor for the attributes, should we use it for\n             // more?\n-            let mut attr_visitor = FmtVisitor::from_codemap(context.codemap, context.config);\n+            let mut attr_visitor = FmtVisitor::from_codemap(context.codemap, context.config, None);\n             attr_visitor.block_indent = context.block_indent;\n             attr_visitor.last_pos = attrs[0].span.lo;\n             if attr_visitor.visit_attrs(attrs) {"}, {"sha": "72174679386cdad24aa2eb17827af81aa43e547b", "filename": "src/filemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -100,7 +100,7 @@ fn write_file(text: &StringBuffer,\n             let file = try!(File::create(&filename));\n             try!(write_system_newlines(file, text, config));\n         }\n-        WriteMode::Display => {\n+        WriteMode::Display | WriteMode::Coverage => {\n             println!(\"{}:\\n\", filename);\n             let stdout = stdout();\n             let stdout_lock = stdout.lock();"}, {"sha": "337535243487965ee7f64acc71e292034df5aec0", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -182,6 +182,8 @@ pub enum WriteMode {\n     Diff,\n     // Return the result as a mapping from filenames to Strings.\n     Return,\n+    // Display how much of the input file was processed\n+    Coverage,\n }\n \n impl FromStr for WriteMode {\n@@ -193,6 +195,7 @@ impl FromStr for WriteMode {\n             \"display\" => Ok(WriteMode::Display),\n             \"overwrite\" => Ok(WriteMode::Overwrite),\n             \"diff\" => Ok(WriteMode::Diff),\n+            \"coverage\" => Ok(WriteMode::Coverage),\n             _ => Err(()),\n         }\n     }\n@@ -277,11 +280,11 @@ impl fmt::Display for FormatReport {\n }\n \n // Formatting which depends on the AST.\n-fn fmt_ast(krate: &ast::Crate, codemap: &CodeMap, config: &Config) -> FileMap {\n+fn fmt_ast(krate: &ast::Crate, codemap: &CodeMap, config: &Config, mode: WriteMode) -> FileMap {\n     let mut file_map = FileMap::new();\n     for (path, module) in modules::list_files(krate, codemap) {\n         let path = path.to_str().unwrap();\n-        let mut visitor = FmtVisitor::from_codemap(codemap, config);\n+        let mut visitor = FmtVisitor::from_codemap(codemap, config, Some(mode));\n         visitor.format_separate_mod(module, path);\n         file_map.insert(path.to_owned(), visitor.buffer);\n     }\n@@ -370,10 +373,10 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-pub fn format(file: &Path, config: &Config) -> FileMap {\n+pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n     let parse_session = ParseSess::new();\n     let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n-    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config);\n+    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config, mode);\n \n     // For some reason, the codemap does not include terminating\n     // newlines so we must add one on for each file. This is sad.\n@@ -387,7 +390,7 @@ pub fn format(file: &Path, config: &Config) -> FileMap {\n // write_mode determines what happens to the result of running rustfmt, see\n // WriteMode.\n pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n-    let mut result = format(file, config);\n+    let mut result = format(file, config, write_mode);\n \n     println!(\"{}\", fmt_lines(&mut result, config));\n "}, {"sha": "b83f07e05d768de1c921b998e815445809191153", "filename": "src/missed_spans.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use WriteMode;\n use visitor::FmtVisitor;\n-\n use syntax::codemap::{self, BytePos, Span, Pos};\n use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n \n@@ -80,7 +80,7 @@ impl<'a> FmtVisitor<'a> {\n     fn write_snippet_inner<F>(&mut self,\n                               big_snippet: &str,\n                               big_diff: usize,\n-                              snippet: &str,\n+                              old_snippet: &str,\n                               process_last_snippet: F)\n         where F: Fn(&mut FmtVisitor, &str, &str)\n     {\n@@ -91,6 +91,26 @@ impl<'a> FmtVisitor<'a> {\n         let mut last_wspace = None;\n         let mut rewrite_next_comment = true;\n \n+        fn replace_chars(string: &str) -> String {\n+            string.chars()\n+                  .map(|ch| {\n+                      match ch.is_whitespace() {\n+                          true => ch,\n+                          false => 'X',\n+                      }\n+                  })\n+                  .collect()\n+        }\n+\n+        let replaced = match self.write_mode {\n+            Some(mode) => match mode {\n+                WriteMode::Coverage => replace_chars(old_snippet),\n+                _ => old_snippet.to_owned(),\n+            },\n+            None => old_snippet.to_owned(),\n+        };\n+        let snippet = &*replaced;\n+\n         for (kind, offset, subslice) in CommentCodeSlices::new(snippet) {\n             if let CodeCharKind::Comment = kind {\n                 let last_char = big_snippet[..(offset + big_diff)]"}, {"sha": "9a33fdae02446494e68450e373d364011cde520b", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -14,7 +14,7 @@ use syntax::visit;\n \n use strings::string_buffer::StringBuffer;\n \n-use Indent;\n+use {Indent, WriteMode};\n use utils;\n use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n@@ -29,6 +29,7 @@ pub struct FmtVisitor<'a> {\n     // TODO: RAII util for indenting\n     pub block_indent: Indent,\n     pub config: &'a Config,\n+    pub write_mode: Option<WriteMode>,\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -356,7 +357,10 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn from_codemap(codemap: &'a CodeMap, config: &'a Config) -> FmtVisitor<'a> {\n+    pub fn from_codemap(codemap: &'a CodeMap,\n+                        config: &'a Config,\n+                        mode: Option<WriteMode>)\n+                        -> FmtVisitor<'a> {\n         FmtVisitor {\n             codemap: codemap,\n             buffer: StringBuffer::new(),\n@@ -366,6 +370,7 @@ impl<'a> FmtVisitor<'a> {\n                 alignment: 0,\n             },\n             config: config,\n+            write_mode: mode,\n         }\n     }\n "}, {"sha": "379e8e5820e52af35a27f84d35f90c273817f46b", "filename": "tests/coverage-source/comments.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/tests%2Fcoverage-source%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/tests%2Fcoverage-source%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcoverage-source%2Fcomments.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -0,0 +1,6 @@\n+/// Here's a doc comment!\n+fn main() {\n+    // foo is bar\n+    let foo = \"bar\";\n+    // loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong comment!!!!!\n+}"}, {"sha": "74d17bffd15782f2c8566246241c400be03cacbf", "filename": "tests/coverage-target/comments.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/tests%2Fcoverage-target%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/tests%2Fcoverage-target%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcoverage-target%2Fcomments.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -0,0 +1,6 @@\n+/// Here's a doc comment!\n+fn main() {\n+    XX XXX XX XXX\n+    let foo = \"bar\";\n+    XX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXXXX\n+}"}, {"sha": "4a924c578337a5dfcec8185165fc8ed3a1f2b41d", "filename": "tests/system.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/58ff0d8730806332e05b34189d91c8504f71eccc/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ff0d8730806332e05b34189d91c8504f71eccc/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=58ff0d8730806332e05b34189d91c8504f71eccc", "patch": "@@ -43,13 +43,25 @@ fn system_tests() {\n     // Turn a DirEntry into a String that represents the relative path to the\n     // file.\n     let files = files.map(get_path_string);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, WriteMode::Return);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n     assert!(fails == 0, \"{} system tests failed\", fails);\n }\n \n+// Do the same for tests/coverage-source directory\n+// the only difference is the coverage mode\n+#[test]\n+fn coverage_tests() {\n+    let files = fs::read_dir(\"tests/coverage-source\").ok().expect(\"Couldn't read source dir.\");\n+    let files = files.map(get_path_string);\n+    let (_reports, count, fails) = check_files(files, WriteMode::Coverage);\n+\n+    println!(\"Ran {} tests in coverage mode.\", count);\n+    assert!(fails == 0, \"{} tests failed\", fails);\n+}\n+\n // Idempotence tests. Files in tests/target are checked to be unaltered by\n // rustfmt.\n #[test]\n@@ -59,7 +71,7 @@ fn idempotence_tests() {\n                     .ok()\n                     .expect(\"Couldn't read target dir.\")\n                     .map(get_path_string);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, WriteMode::Return);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -78,7 +90,7 @@ fn self_tests() {\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n \n-    let (reports, count, fails) = check_files(files);\n+    let (reports, count, fails) = check_files(files, WriteMode::Return);\n     let mut warnings = 0;\n \n     // Display results.\n@@ -97,7 +109,7 @@ fn self_tests() {\n \n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n-fn check_files<I>(files: I) -> (Vec<FormatReport>, u32, u32)\n+fn check_files<I>(files: I, write_mode: WriteMode) -> (Vec<FormatReport>, u32, u32)\n     where I: Iterator<Item = String>\n {\n     let mut count = 0;\n@@ -107,7 +119,7 @@ fn check_files<I>(files: I) -> (Vec<FormatReport>, u32, u32)\n     for file_name in files.filter(|f| f.ends_with(\".rs\")) {\n         println!(\"Testing '{}'...\", file_name);\n \n-        match idempotent_check(file_name) {\n+        match idempotent_check(file_name, write_mode) {\n             Ok(report) => reports.push(report),\n             Err(msg) => {\n                 print_mismatches(msg);\n@@ -132,7 +144,9 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n     assert!(t.reset().unwrap());\n }\n \n-pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n+pub fn idempotent_check(filename: String,\n+                        write_mode: WriteMode)\n+                        -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n \n@@ -145,14 +159,14 @@ pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String\n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n \n-    let mut file_map = format(Path::new(&filename), &config);\n+    let mut file_map = format(Path::new(&filename), &config, write_mode);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n     // Won't panic, as we're not doing any IO.\n     let write_result = filemap::write_all_files(&file_map, WriteMode::Return, &config).unwrap();\n     let target = sig_comments.get(\"target\").map(|x| &(*x)[..]);\n \n-    handle_result(write_result, target).map(|_| format_report)\n+    handle_result(write_result, target, write_mode).map(|_| format_report)\n }\n \n // Reads test config file from comments and reads its contents.\n@@ -205,13 +219,14 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n // Compare output to input.\n // TODO: needs a better name, more explanation.\n fn handle_result(result: HashMap<String, String>,\n-                 target: Option<&str>)\n+                 target: Option<&str>,\n+                 write_mode: WriteMode)\n                  -> Result<(), HashMap<String, Vec<Mismatch>>> {\n     let mut failures = HashMap::new();\n \n     for (file_name, fmt_text) in result {\n         // If file is in tests/source, compare to file with same name in tests/target.\n-        let target = get_target(&file_name, target);\n+        let target = get_target(&file_name, target, write_mode);\n         let mut f = fs::File::open(&target).ok().expect(\"Couldn't open target.\");\n \n         let mut text = String::new();\n@@ -231,9 +246,14 @@ fn handle_result(result: HashMap<String, String>,\n }\n \n // Map source file paths to their target paths.\n-fn get_target(file_name: &str, target: Option<&str>) -> String {\n+fn get_target(file_name: &str, target: Option<&str>, write_mode: WriteMode) -> String {\n     let file_path = Path::new(file_name);\n-    let source_path_prefix = Path::new(\"tests/source/\");\n+    let (source_path_prefix, target_path_prefix) = match write_mode {\n+        WriteMode::Coverage => (Path::new(\"tests/coverage-source/\"),\n+                                \"tests/coverage-target/\"),\n+        _ => (Path::new(\"tests/source/\"), \"tests/target/\"),\n+    };\n+\n     if file_path.starts_with(source_path_prefix) {\n         let mut components = file_path.components();\n         // Can't skip(2) as the resulting iterator can't as_path()\n@@ -246,7 +266,7 @@ fn get_target(file_name: &str, target: Option<&str>) -> String {\n         };\n         let base = target.unwrap_or(new_target);\n \n-        format!(\"tests/target/{}\", base)\n+        format!(\"{}{}\", target_path_prefix, base)\n     } else {\n         file_name.to_owned()\n     }"}]}