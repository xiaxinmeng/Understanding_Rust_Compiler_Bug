{"sha": "8234ac32bd9002a02d7c70a989a04c2278acf78d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMzRhYzMyYmQ5MDAyYTAyZDdjNzBhOTg5YTA0YzIyNzhhY2Y3OGQ=", "commit": {"author": {"name": "Tobias Rapp", "email": "t.rapp@noa-archive.com", "date": "2019-04-17T13:28:57Z"}, "committer": {"name": "Tobias Rapp", "email": "t.rapp@noa-archive.com", "date": "2019-04-25T15:04:11Z"}, "message": "Add saturating_abs() and saturating_neg() functions to signed integer types\n\nSimilar to wrapping_abs() / wrapping_neg() functions but saturating at\nthe numeric bounds instead of wrapping around. Complements the existing\nset of functions with saturation mechanics.", "tree": {"sha": "2f08c996d1462af6aba59cba65aa96eed0190477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f08c996d1462af6aba59cba65aa96eed0190477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8234ac32bd9002a02d7c70a989a04c2278acf78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8234ac32bd9002a02d7c70a989a04c2278acf78d", "html_url": "https://github.com/rust-lang/rust/commit/8234ac32bd9002a02d7c70a989a04c2278acf78d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8234ac32bd9002a02d7c70a989a04c2278acf78d/comments", "author": {"login": "t-rapp", "id": 20061583, "node_id": "MDQ6VXNlcjIwMDYxNTgz", "avatar_url": "https://avatars.githubusercontent.com/u/20061583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-rapp", "html_url": "https://github.com/t-rapp", "followers_url": "https://api.github.com/users/t-rapp/followers", "following_url": "https://api.github.com/users/t-rapp/following{/other_user}", "gists_url": "https://api.github.com/users/t-rapp/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-rapp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-rapp/subscriptions", "organizations_url": "https://api.github.com/users/t-rapp/orgs", "repos_url": "https://api.github.com/users/t-rapp/repos", "events_url": "https://api.github.com/users/t-rapp/events{/privacy}", "received_events_url": "https://api.github.com/users/t-rapp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "t-rapp", "id": 20061583, "node_id": "MDQ6VXNlcjIwMDYxNTgz", "avatar_url": "https://avatars.githubusercontent.com/u/20061583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-rapp", "html_url": "https://github.com/t-rapp", "followers_url": "https://api.github.com/users/t-rapp/followers", "following_url": "https://api.github.com/users/t-rapp/following{/other_user}", "gists_url": "https://api.github.com/users/t-rapp/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-rapp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-rapp/subscriptions", "organizations_url": "https://api.github.com/users/t-rapp/orgs", "repos_url": "https://api.github.com/users/t-rapp/repos", "events_url": "https://api.github.com/users/t-rapp/events{/privacy}", "received_events_url": "https://api.github.com/users/t-rapp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bee49f42b6dfb039d2a8e59e5181e26531c3c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bee49f42b6dfb039d2a8e59e5181e26531c3c11", "html_url": "https://github.com/rust-lang/rust/commit/3bee49f42b6dfb039d2a8e59e5181e26531c3c11"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "88cdac073c7c598cc0fc0cd8309e83ea05fe3773", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8234ac32bd9002a02d7c70a989a04c2278acf78d/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8234ac32bd9002a02d7c70a989a04c2278acf78d/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8234ac32bd9002a02d7c70a989a04c2278acf78d", "patch": "@@ -930,6 +930,62 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Saturating integer negation. Computes `-self`, returning `MAX` if `self == MIN`\n+instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(saturating_neg)]\n+assert_eq!(100\", stringify!($SelfT), \".saturating_neg(), -100);\n+assert_eq!((-100\", stringify!($SelfT), \").saturating_neg(), 100);\n+assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_neg(), \", stringify!($SelfT),\n+\"::max_value());\n+assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_neg(), \", stringify!($SelfT),\n+\"::min_value() + 1);\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[inline]\n+            pub fn saturating_neg(self) -> Self {\n+                intrinsics::saturating_sub(0, self)\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Saturating absolute value. Computes `self.abs()`, returning `MAX` if `self ==\n+MIN` instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(saturating_neg)]\n+assert_eq!(100\", stringify!($SelfT), \".saturating_abs(), 100);\n+assert_eq!((-100\", stringify!($SelfT), \").saturating_abs(), 100);\n+assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_abs(), \", stringify!($SelfT),\n+\"::max_value());\n+assert_eq!((\", stringify!($SelfT), \"::min_value() + 1).saturating_abs(), \", stringify!($SelfT),\n+\"::max_value());\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[unstable(feature = \"saturating_neg\", issue = \"59983\")]\n+            #[inline]\n+            pub fn saturating_abs(self) -> Self {\n+                if self.is_negative() {\n+                    self.saturating_neg()\n+                } else {\n+                    self\n+                }\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Saturating integer multiplication. Computes `self * rhs`, saturating at the\n numeric bounds instead of overflowing."}]}