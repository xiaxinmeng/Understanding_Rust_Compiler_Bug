{"sha": "de07c8490332c17deafa89d29724a6483a1765b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDdjODQ5MDMzMmMxN2RlYWZhODlkMjk3MjRhNjQ4M2ExNzY1YjM=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-21T04:07:03Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Detect usage of `(x + 1).ln()` and suggest `x.ln_1p()` instead", "tree": {"sha": "81ee03520f23af7f02a0f6dbc4275913f978edfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ee03520f23af7f02a0f6dbc4275913f978edfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de07c8490332c17deafa89d29724a6483a1765b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de07c8490332c17deafa89d29724a6483a1765b3", "html_url": "https://github.com/rust-lang/rust/commit/de07c8490332c17deafa89d29724a6483a1765b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de07c8490332c17deafa89d29724a6483a1765b3/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f", "html_url": "https://github.com/rust-lang/rust/commit/a60ae5d31cea7dff1a5b02b958d3295b474a7c9f"}], "stats": {"total": 108, "additions": 84, "deletions": 24}, "files": [{"sha": "6a135126078335ecfd3a2c5209051731b4892178", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de07c8490332c17deafa89d29724a6483a1765b3/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de07c8490332c17deafa89d29724a6483a1765b3/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=de07c8490332c17deafa89d29724a6483a1765b3", "patch": "@@ -94,24 +94,26 @@ fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n     }\n }\n \n-// TODO: Lint expressions of the form `(x + 1).ln()` and `(x + y).ln()`\n-// where y > 1 and suggest usage of `(x + (y - 1)).ln_1p()` instead\n+// TODO: Lint expressions of the form `(x + y).ln()` where y > 1 and\n+// suggest usage of `(x + (y - 1)).ln_1p()` instead\n fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n     if_chain! {\n         if let ExprKind::Binary(op, ref lhs, ref rhs) = &args[0].kind;\n         if op.node == BinOpKind::Add;\n-        if let Some((value, _)) = constant(cx, cx.tables, lhs);\n-        if F32(1.0) == value || F64(1.0) == value;\n         then {\n-            let arg = sugg::Sugg::hir(cx, rhs, \"..\").maybe_par();\n+            let recv = match (constant(cx, cx.tables, lhs), constant(cx, cx.tables, rhs)) {\n+                (Some((value, _)), _) if F32(1.0) == value || F64(1.0) == value => rhs,\n+                (_, Some((value, _))) if F32(1.0) == value || F64(1.0) == value => lhs,\n+                _ => return,\n+            };\n \n             span_lint_and_sugg(\n                 cx,\n                 FLOATING_POINT_IMPROVEMENTS,\n                 expr.span,\n                 \"ln(1 + x) can be computed more accurately\",\n                 \"consider using\",\n-                format!(\"{}.ln_1p()\", arg),\n+                format!(\"{}.ln_1p()\", sugg::Sugg::hir(cx, recv, \"..\").maybe_par()),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "9a46d2803be35d90280ce7339709028cc6157769", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de07c8490332c17deafa89d29724a6483a1765b3/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de07c8490332c17deafa89d29724a6483a1765b3/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=de07c8490332c17deafa89d29724a6483a1765b3", "patch": "@@ -25,18 +25,28 @@ fn check_ln1p() {\n     let _ = (1.0 + x.powi(2)).ln();\n     let _ = (1.0 + x.powi(2) * 2.0).ln();\n     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n-    // Cases where the lint shouldn't be applied\n     let _ = (x + 1.0).ln();\n+    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x + 2.0 + 1.0).ln();\n+    let _ = (x * 2.0 + 1.0).ln();\n+    // Cases where the lint shouldn't be applied\n     let _ = (1.0 + x + 2.0).ln();\n+    let _ = (x + 1.0 + 2.0).ln();\n+    let _ = (x + 1.0 * 2.0).ln();\n     let _ = (1.0 + x - 2.0).ln();\n \n     let x = 1f64;\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x * 2.0).ln();\n     let _ = (1.0 + x.powi(2)).ln();\n-    // Cases where the lint shouldn't be applied\n     let _ = (x + 1.0).ln();\n+    let _ = (x.powi(2) + 1.0).ln();\n+    let _ = (x + 2.0 + 1.0).ln();\n+    let _ = (x * 2.0 + 1.0).ln();\n+    // Cases where the lint shouldn't be applied\n     let _ = (1.0 + x + 2.0).ln();\n+    let _ = (x + 1.0 + 2.0).ln();\n+    let _ = (x + 1.0 * 2.0).ln();\n     let _ = (1.0 + x - 2.0).ln();\n }\n "}, {"sha": "6ae9de02f2ca2a48183d2837b88079141f167a43", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 64, "deletions": 16, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/de07c8490332c17deafa89d29724a6483a1765b3/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de07c8490332c17deafa89d29724a6483a1765b3/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=de07c8490332c17deafa89d29724a6483a1765b3", "patch": "@@ -79,94 +79,142 @@ LL |     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `((std::f32::consts::E - 1.0)).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:34:13\n+  --> $DIR/floating_point_log.rs:28:13\n+   |\n+LL |     let _ = (x + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:29:13\n+   |\n+LL |     let _ = (x.powi(2) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:30:13\n+   |\n+LL |     let _ = (x + 2.0 + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:31:13\n+   |\n+LL |     let _ = (x * 2.0 + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:39:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:35:13\n+  --> $DIR/floating_point_log.rs:40:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:36:13\n+  --> $DIR/floating_point_log.rs:41:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:42:13\n+   |\n+LL |     let _ = (x + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:43:13\n+   |\n+LL |     let _ = (x.powi(2) + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:44:13\n+   |\n+LL |     let _ = (x + 2.0 + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:45:13\n+   |\n+LL |     let _ = (x * 2.0 + 1.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n+\n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:48:13\n+  --> $DIR/floating_point_log.rs:58:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:49:13\n+  --> $DIR/floating_point_log.rs:59:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:50:13\n+  --> $DIR/floating_point_log.rs:60:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:51:13\n+  --> $DIR/floating_point_log.rs:61:13\n    |\n LL |     let _ = x.log(4.0) / y.log(4.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:52:13\n+  --> $DIR/floating_point_log.rs:62:13\n    |\n LL |     let _ = x.log(b) / y.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:54:13\n+  --> $DIR/floating_point_log.rs:64:13\n    |\n LL |     let _ = x.log(b) / 2f32.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:60:13\n+  --> $DIR/floating_point_log.rs:70:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:61:13\n+  --> $DIR/floating_point_log.rs:71:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:62:13\n+  --> $DIR/floating_point_log.rs:72:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:63:13\n+  --> $DIR/floating_point_log.rs:73:13\n    |\n LL |     let _ = x.log(4.0) / y.log(4.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:64:13\n+  --> $DIR/floating_point_log.rs:74:13\n    |\n LL |     let _ = x.log(b) / y.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:66:13\n+  --> $DIR/floating_point_log.rs:76:13\n    |\n LL |     let _ = x.log(b) / 2f64.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 36 previous errors\n "}]}