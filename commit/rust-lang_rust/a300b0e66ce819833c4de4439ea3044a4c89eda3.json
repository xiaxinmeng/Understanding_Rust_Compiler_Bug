{"sha": "a300b0e66ce819833c4de4439ea3044a4c89eda3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDBiMGU2NmNlODE5ODMzYzRkZTQ0MzllYTMwNDRhNGM4OWVkYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-30T15:08:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-30T15:08:27Z"}, "message": "Auto merge of #7144 - rust-lang:while_immutable_mut_cond, r=flip1995\n\nwhile_immutable_cond: check condition for mutation\n\nThis fixes #6689 by also checking the bindings mutated in the condition, whereas it was previously only checked in the loop body.\n\n---\n\nchangelog: Fix FP in [`while_immutable_cond`] where mutation in the loop variable wasn't picked up.", "tree": {"sha": "b2d1f7727897bb8bd95d8716ce053ac6ac4a8425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d1f7727897bb8bd95d8716ce053ac6ac4a8425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a300b0e66ce819833c4de4439ea3044a4c89eda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a300b0e66ce819833c4de4439ea3044a4c89eda3", "html_url": "https://github.com/rust-lang/rust/commit/a300b0e66ce819833c4de4439ea3044a4c89eda3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a300b0e66ce819833c4de4439ea3044a4c89eda3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e49c4bd67d69131265cb414a29d5489a9eb35a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e49c4bd67d69131265cb414a29d5489a9eb35a1", "html_url": "https://github.com/rust-lang/rust/commit/5e49c4bd67d69131265cb414a29d5489a9eb35a1"}, {"sha": "63425de77db7f4dee55cfceeed7e174bfe986b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/63425de77db7f4dee55cfceeed7e174bfe986b0d", "html_url": "https://github.com/rust-lang/rust/commit/63425de77db7f4dee55cfceeed7e174bfe986b0d"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "55404b87ec9ce60400bf8137ac93a8dbe8a09e23", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a300b0e66ce819833c4de4439ea3044a4c89eda3/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300b0e66ce819833c4de4439ea3044a4c89eda3/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=a300b0e66ce819833c4de4439ea3044a4c89eda3", "patch": "@@ -28,11 +28,14 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'\n         return;\n     }\n     let used_in_condition = &var_visitor.ids;\n-    let no_cond_variable_mutated = if let Some(used_mutably) = mutated_variables(expr, cx) {\n-        used_in_condition.is_disjoint(&used_mutably)\n-    } else {\n-        return;\n-    };\n+    let mutated_in_body = mutated_variables(expr, cx);\n+    let mutated_in_condition = mutated_variables(cond, cx);\n+    let no_cond_variable_mutated =\n+        if let (Some(used_mutably_body), Some(used_mutably_cond)) = (mutated_in_body, mutated_in_condition) {\n+            used_in_condition.is_disjoint(&used_mutably_body) && used_in_condition.is_disjoint(&used_mutably_cond)\n+        } else {\n+            return;\n+        };\n     let mutable_static_in_cond = var_visitor.def_ids.iter().any(|(_, v)| *v);\n \n     let mut has_break_or_return_visitor = HasBreakOrReturnVisitor {"}, {"sha": "3d8fb8507e515c470a8ff1d2a59d5002b7ef3fd1", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a300b0e66ce819833c4de4439ea3044a4c89eda3/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a300b0e66ce819833c4de4439ea3044a4c89eda3/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=a300b0e66ce819833c4de4439ea3044a4c89eda3", "patch": "@@ -192,11 +192,23 @@ fn while_loop_with_break_and_return() {\n     }\n }\n \n+fn immutable_condition_false_positive(mut n: u64) -> u32 {\n+    let mut count = 0;\n+    while {\n+        n >>= 1;\n+        n != 0\n+    } {\n+        count += 1;\n+    }\n+    count\n+}\n+\n fn main() {\n     immutable_condition();\n     unused_var();\n     used_immutable();\n     internally_mutable();\n+    immutable_condition_false_positive(5);\n \n     let mut c = Counter { count: 0 };\n     c.inc_n(5);"}]}