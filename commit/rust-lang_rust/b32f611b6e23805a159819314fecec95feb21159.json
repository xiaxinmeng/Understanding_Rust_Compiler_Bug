{"sha": "b32f611b6e23805a159819314fecec95feb21159", "node_id": "C_kwDOAAsO6NoAKGIzMmY2MTFiNmUyMzgwNWExNTk4MTkzMTRmZWNlYzk1ZmViMjExNTk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-08T13:54:31Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-08T13:54:31Z"}, "message": "fix: Fix outline modules spilling inner doc injections into their parent", "tree": {"sha": "a2d559cd32a93aa8bcf072c27e9a9f75b6a59b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d559cd32a93aa8bcf072c27e9a9f75b6a59b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32f611b6e23805a159819314fecec95feb21159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32f611b6e23805a159819314fecec95feb21159", "html_url": "https://github.com/rust-lang/rust/commit/b32f611b6e23805a159819314fecec95feb21159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32f611b6e23805a159819314fecec95feb21159/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47591f0fb2eb4814c488b1d72fcb00c43869104c", "url": "https://api.github.com/repos/rust-lang/rust/commits/47591f0fb2eb4814c488b1d72fcb00c43869104c", "html_url": "https://github.com/rust-lang/rust/commit/47591f0fb2eb4814c488b1d72fcb00c43869104c"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "a244d321495123925a7165222af5fba0d77e5b2e", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b32f611b6e23805a159819314fecec95feb21159/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32f611b6e23805a159819314fecec95feb21159/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=b32f611b6e23805a159819314fecec95feb21159", "patch": "@@ -390,7 +390,9 @@ impl AttrsWithOwner {\n                         if let InFile { file_id, value: ModuleSource::SourceFile(file) } =\n                             mod_data.definition_source(db)\n                         {\n-                            map.merge(AttrSourceMap::new(InFile::new(file_id, &file)));\n+                            map.append_module_inline_attrs(AttrSourceMap::new(InFile::new(\n+                                file_id, &file,\n+                            )));\n                         }\n                         return map;\n                     }\n@@ -552,18 +554,31 @@ fn inner_attributes(\n pub struct AttrSourceMap {\n     source: Vec<Either<ast::Attr, ast::Comment>>,\n     file_id: HirFileId,\n+    /// If this map is for a module, this will be the [`HirFileId`] of the module's definition site,\n+    /// while `file_id` will be the one of the module declaration site.\n+    /// The usize is the index into `source` from which point on the entries reside in the def site\n+    /// file.\n+    mod_def_site_file_id: Option<(HirFileId, usize)>,\n }\n \n impl AttrSourceMap {\n     fn new(owner: InFile<&dyn ast::HasAttrs>) -> Self {\n         Self {\n             source: collect_attrs(owner.value).map(|(_, it)| it).collect(),\n             file_id: owner.file_id,\n+            mod_def_site_file_id: None,\n         }\n     }\n \n-    fn merge(&mut self, other: Self) {\n+    /// Append a second source map to this one, this is required for modules, whose outline and inline\n+    /// attributes can reside in different files\n+    fn append_module_inline_attrs(&mut self, other: Self) {\n+        assert!(self.mod_def_site_file_id.is_none() && other.mod_def_site_file_id.is_none());\n+        let len = self.source.len();\n         self.source.extend(other.source);\n+        if other.file_id != self.file_id {\n+            self.mod_def_site_file_id = Some((other.file_id, len));\n+        }\n     }\n \n     /// Maps the lowered `Attr` back to its original syntax node.\n@@ -577,9 +592,15 @@ impl AttrSourceMap {\n     }\n \n     fn source_of_id(&self, id: AttrId) -> InFile<&Either<ast::Attr, ast::Comment>> {\n+        let ast_idx = id.ast_index as usize;\n+        let file_id = match self.mod_def_site_file_id {\n+            Some((file_id, def_site_cut)) if def_site_cut <= ast_idx => file_id,\n+            _ => self.file_id,\n+        };\n+\n         self.source\n-            .get(id.ast_index as usize)\n-            .map(|it| InFile::new(self.file_id, it))\n+            .get(ast_idx)\n+            .map(|it| InFile::new(file_id, it))\n             .unwrap_or_else(|| panic!(\"cannot find attr at index {:?}\", id))\n     }\n }"}, {"sha": "a04a211825d4d175f29f14540580b9559e439502", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b32f611b6e23805a159819314fecec95feb21159/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/b32f611b6e23805a159819314fecec95feb21159/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=b32f611b6e23805a159819314fecec95feb21159", "patch": "@@ -46,6 +46,8 @@\n <span class=\"comment documentation\">//! </span><span class=\"keyword injected\">fn</span><span class=\"none injected\"> </span><span class=\"function declaration injected\">test</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span>\n <span class=\"comment documentation\">//! ```</span>\n \n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">outline_module</span><span class=\"semicolon\">;</span>\n+\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n@@ -170,4 +172,6 @@\n     ```\n     </span><span class=\"function documentation injected intra_doc_link\">[`block_comments`]</span><span class=\"comment documentation\"> tests these without indentation\n */</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">block_comments2</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">block_comments2</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "4beab9909c41a1be9be9fd1e131899797bc6cbd3", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b32f611b6e23805a159819314fecec95feb21159/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32f611b6e23805a159819314fecec95feb21159/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b32f611b6e23805a159819314fecec95feb21159", "patch": "@@ -641,11 +641,14 @@ fn main() {\n fn test_highlight_doc_comment() {\n     check_highlighting(\n         r#\"\n+//- /main.rs\n //! This is a module to test doc injection.\n //! ```\n //! fn test() {}\n //! ```\n \n+mod outline_module;\n+\n /// ```\n /// let _ = \"early doctests should not go boom\";\n /// ```\n@@ -771,6 +774,13 @@ pub fn block_comments() {}\n     [`block_comments`] tests these without indentation\n */\n pub fn block_comments2() {}\n+\n+//- /outline_module.rs\n+//! This is an outline module whose purpose is to test that its inline attribute injection does not\n+//! spill into its parent.\n+//! ```\n+//! fn test() {}\n+//! ```\n \"#\n         .trim(),\n         expect_file![\"./test_data/highlight_doctest.html\"],"}]}