{"sha": "4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OTJkMmJmNzllOWRhNmRiNzU5ZWI4ZTE3MTVmOTBmMzFlYzdlYjk=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-11-28T19:10:16Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-11-28T19:10:16Z"}, "message": "Infer range types", "tree": {"sha": "9396eb224a6865aa76c64937bc88c02b6ade04b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9396eb224a6865aa76c64937bc88c02b6ade04b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl3gG5gACgkQztOS3gxI\nPQCnlA//btscucrdqvGNOMjKIQ8yzbWn4pNe6XJwYyXgI55/28XXsrmc8wp8Cqp+\n77hu7ud6I3SygTEg4zQUW17I6e4kOat3OcP83G3nU63hK5nvCv3r6EZ03Kulat65\n2hYqgqBh4RvWDrQgZtJuq8S23qs5KTu/iX8TiVyE37jAlCxJpLa+d8N8rLeOUHyF\nLsjmw7xYT/b1+xKtGel+vrbim7gJNCnkQlAK9vbdbAsNSE+0vmhIoPUbb2XKyY5r\nKrW9PBN/nfbFagVzkdNAsFvefRE7/e4aG1QN4Q1zoZyXeA768/Ysp4qc+uJ6keKL\nXSqZZhffmAL+xFRYn3evH6lkoK1U8B3gGLdd95dxFNJAPAs6rPG1sTK0CSqN7jo4\nvmsHujLNG6ukNEf7h8Re+z91vVkSz+eOMH6wucNMpu/LVOmYiMklFayff0+LJz5y\nB82vUYco0KG3AMwCf2y9lcdDTs6DTrLMUltukI+hMXX+9K1Mtb7jiyEaNUy0OaHP\nVyi5LF6p0rMHgMURHmskzA4h/s6fYUsA7UgdynpAsA1QtJ4ME82aFAQ1cFMGZx+3\nk3hVViU8hKcDBrdUky21CnUJIDzcKMm0aECfH+htH3gT10KGPOIhoyRsRQr+Hn2n\nDiwr8lXa2KVmRr2IIrutjMx2dXh66lmn1xsrgvvWWQUmRrdyHp8=\n=EVmb\n-----END PGP SIGNATURE-----", "payload": "tree 9396eb224a6865aa76c64937bc88c02b6ade04b8\nparent 8b278b1ab660df0728508e45e88ac769a2e03a58\nauthor oxalica <oxalicc@pm.me> 1574968216 +0800\ncommitter oxalica <oxalicc@pm.me> 1574968216 +0800\n\nInfer range types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "html_url": "https://github.com/rust-lang/rust/commit/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b278b1ab660df0728508e45e88ac769a2e03a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b278b1ab660df0728508e45e88ac769a2e03a58", "html_url": "https://github.com/rust-lang/rust/commit/8b278b1ab660df0728508e45e88ac769a2e03a58"}], "stats": {"total": 213, "additions": 209, "deletions": 4}, "files": [{"sha": "d18964d54bdb32341b9fe9e6a87291b957a6163a", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -8,7 +8,7 @@ use hir_expand::{\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n+        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner, RangeOp,\n         TypeAscriptionOwner,\n     },\n     AstNode, AstPtr,\n@@ -429,10 +429,28 @@ where\n                 let index = self.collect_expr_opt(e.index());\n                 self.alloc_expr(Expr::Index { base, index }, syntax_ptr)\n             }\n+            ast::Expr::RangeExpr(e) => {\n+                let lhs = e.start().map(|lhs| self.collect_expr(lhs));\n+                let rhs = e.end().map(|rhs| self.collect_expr(rhs));\n+                match (lhs, e.op_kind(), rhs) {\n+                    (None, _, None) => self.alloc_expr(Expr::RangeFull, syntax_ptr),\n+                    (Some(lhs), _, None) => self.alloc_expr(Expr::RangeFrom { lhs }, syntax_ptr),\n+                    (None, Some(RangeOp::Inclusive), Some(rhs)) => {\n+                        self.alloc_expr(Expr::RangeToInclusive { rhs }, syntax_ptr)\n+                    }\n+                    (Some(lhs), Some(RangeOp::Inclusive), Some(rhs)) => {\n+                        self.alloc_expr(Expr::RangeInclusive { lhs, rhs }, syntax_ptr)\n+                    }\n+                    // If RangeOp is missing, fallback to exclusive range.\n+                    (None, _, Some(rhs)) => self.alloc_expr(Expr::RangeTo { rhs }, syntax_ptr),\n+                    (Some(lhs), _, Some(rhs)) => {\n+                        self.alloc_expr(Expr::Range { lhs, rhs }, syntax_ptr)\n+                    }\n+                }\n+            }\n \n             // FIXME implement HIR for these:\n             ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::Expr::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::Expr::MacroCall(e) => match self.expander.enter_expand(self.db, e) {\n                 Some((mark, expansion)) => {\n                     let id = self.collect_expr(expansion);"}, {"sha": "115090218cb0e164f5053d25b533e68e3684c3da", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -130,6 +130,24 @@ pub enum Expr {\n         rhs: ExprId,\n         op: Option<BinaryOp>,\n     },\n+    RangeFull,\n+    RangeFrom {\n+        lhs: ExprId,\n+    },\n+    RangeTo {\n+        rhs: ExprId,\n+    },\n+    Range {\n+        lhs: ExprId,\n+        rhs: ExprId,\n+    },\n+    RangeToInclusive {\n+        rhs: ExprId,\n+    },\n+    RangeInclusive {\n+        lhs: ExprId,\n+        rhs: ExprId,\n+    },\n     Index {\n         base: ExprId,\n         index: ExprId,\n@@ -284,15 +302,21 @@ impl Expr {\n             Expr::Lambda { body, .. } => {\n                 f(*body);\n             }\n-            Expr::BinaryOp { lhs, rhs, .. } => {\n+            Expr::BinaryOp { lhs, rhs, .. }\n+            | Expr::Range { lhs, rhs }\n+            | Expr::RangeInclusive { lhs, rhs } => {\n                 f(*lhs);\n                 f(*rhs);\n             }\n             Expr::Index { base, index } => {\n                 f(*base);\n                 f(*index);\n             }\n-            Expr::Field { expr, .. }\n+            Expr::RangeFull => {}\n+            Expr::RangeFrom { lhs: expr }\n+            | Expr::RangeTo { rhs: expr }\n+            | Expr::RangeToInclusive { rhs: expr }\n+            | Expr::Field { expr, .. }\n             | Expr::Await { expr }\n             | Expr::Try { expr }\n             | Expr::Cast { expr, .. }"}, {"sha": "ff252fe442d4b733eefcf9b942084b13a1a63a87", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -409,6 +409,36 @@ pub mod known {\n         Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::TRY_TYPE])\n     }\n \n+    pub fn std_ops_range() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::RANGE_TYPE])\n+    }\n+\n+    pub fn std_ops_range_from() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::RANGE_FROM_TYPE])\n+    }\n+\n+    pub fn std_ops_range_full() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::RANGE_FULL_TYPE])\n+    }\n+\n+    pub fn std_ops_range_inclusive() -> Path {\n+        Path::from_simple_segments(\n+            PathKind::Abs,\n+            vec![name::STD, name::OPS, name::RANGE_INCLUSIVE_TYPE],\n+        )\n+    }\n+\n+    pub fn std_ops_range_to() -> Path {\n+        Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::OPS, name::RANGE_TO_TYPE])\n+    }\n+\n+    pub fn std_ops_range_to_inclusive() -> Path {\n+        Path::from_simple_segments(\n+            PathKind::Abs,\n+            vec![name::STD, name::OPS, name::RANGE_TO_INCLUSIVE_TYPE],\n+        )\n+    }\n+\n     pub fn std_result_result() -> Path {\n         Path::from_simple_segments(PathKind::Abs, vec![name::STD, name::RESULT, name::RESULT_TYPE])\n     }"}, {"sha": "05ba370706449aed22c9c628b917a40e000e1144", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -140,6 +140,12 @@ pub const RESULT_TYPE: Name = Name::new_inline_ascii(6, b\"Result\");\n pub const OUTPUT_TYPE: Name = Name::new_inline_ascii(6, b\"Output\");\n pub const TARGET_TYPE: Name = Name::new_inline_ascii(6, b\"Target\");\n pub const BOX_TYPE: Name = Name::new_inline_ascii(3, b\"Box\");\n+pub const RANGE_FROM_TYPE: Name = Name::new_inline_ascii(9, b\"RangeFrom\");\n+pub const RANGE_FULL_TYPE: Name = Name::new_inline_ascii(9, b\"RangeFull\");\n+pub const RANGE_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(14, b\"RangeInclusive\");\n+pub const RANGE_TO_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(16, b\"RangeToInclusive\");\n+pub const RANGE_TO_TYPE: Name = Name::new_inline_ascii(7, b\"RangeTo\");\n+pub const RANGE_TYPE: Name = Name::new_inline_ascii(5, b\"Range\");\n \n // Builtin Macros\n pub const FILE_MACRO: Name = Name::new_inline_ascii(4, b\"file\");"}, {"sha": "fe259371f5f9fbc54c48ba6acb74ba34b4cb03aa", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -577,6 +577,42 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n         Some(struct_.into())\n     }\n+\n+    fn resolve_range_full(&self) -> Option<AdtId> {\n+        let path = known::std_ops_range_full();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        Some(struct_.into())\n+    }\n+\n+    fn resolve_range(&self) -> Option<AdtId> {\n+        let path = known::std_ops_range();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        Some(struct_.into())\n+    }\n+\n+    fn resolve_range_inclusive(&self) -> Option<AdtId> {\n+        let path = known::std_ops_range_inclusive();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        Some(struct_.into())\n+    }\n+\n+    fn resolve_range_from(&self) -> Option<AdtId> {\n+        let path = known::std_ops_range_from();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        Some(struct_.into())\n+    }\n+\n+    fn resolve_range_to(&self) -> Option<AdtId> {\n+        let path = known::std_ops_range_to();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        Some(struct_.into())\n+    }\n+\n+    fn resolve_range_to_inclusive(&self) -> Option<AdtId> {\n+        let path = known::std_ops_range_to_inclusive();\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        Some(struct_.into())\n+    }\n }\n \n /// The ID of a type variable."}, {"sha": "a00aa426a2ad97eafd15df8d518cdb8c60e2420a", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -415,6 +415,47 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n                 _ => Ty::Unknown,\n             },\n+            Expr::RangeFull => match self.resolve_range_full() {\n+                Some(adt) => Ty::simple(TypeCtor::Adt(adt)),\n+                None => Ty::Unknown,\n+            },\n+            Expr::Range { lhs, rhs } => {\n+                let lhs_ty = self.infer_expr(*lhs, &Expectation::none());\n+                let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(lhs_ty));\n+                match self.resolve_range() {\n+                    Some(adt) => Ty::apply_one(TypeCtor::Adt(adt), rhs_ty),\n+                    None => Ty::Unknown,\n+                }\n+            }\n+            Expr::RangeInclusive { lhs, rhs } => {\n+                let lhs_ty = self.infer_expr(*lhs, &Expectation::none());\n+                let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(lhs_ty));\n+                match self.resolve_range_inclusive() {\n+                    Some(adt) => Ty::apply_one(TypeCtor::Adt(adt), rhs_ty),\n+                    None => Ty::Unknown,\n+                }\n+            }\n+            Expr::RangeFrom { lhs } => {\n+                let ty = self.infer_expr(*lhs, &Expectation::none());\n+                match self.resolve_range_from() {\n+                    Some(adt) => Ty::apply_one(TypeCtor::Adt(adt), ty),\n+                    None => Ty::Unknown,\n+                }\n+            }\n+            Expr::RangeTo { rhs } => {\n+                let ty = self.infer_expr(*rhs, &Expectation::none());\n+                match self.resolve_range_to() {\n+                    Some(adt) => Ty::apply_one(TypeCtor::Adt(adt), ty),\n+                    None => Ty::Unknown,\n+                }\n+            }\n+            Expr::RangeToInclusive { rhs } => {\n+                let ty = self.infer_expr(*rhs, &Expectation::none());\n+                match self.resolve_range_to_inclusive() {\n+                    Some(adt) => Ty::apply_one(TypeCtor::Adt(adt), ty),\n+                    None => Ty::Unknown,\n+                }\n+            }\n             Expr::Index { base, index } => {\n                 let _base_ty = self.infer_expr(*base, &Expectation::none());\n                 let _index_ty = self.infer_expr(*index, &Expectation::none());"}, {"sha": "4ba87e667ad6f4a5d81c2cee5af26a2fdabdbe58", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4992d2bf79e9da6db759eb8e1715f90f31ec7eb9/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=4992d2bf79e9da6db759eb8e1715f90f31ec7eb9", "patch": "@@ -221,6 +221,56 @@ mod collections {\n     assert_eq!(\"&str\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_ranges() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+fn test() {\n+    let a = ..;\n+    let b = 1..;\n+    let c = ..2u32;\n+    let d = 1..2usize;\n+    let e = ..=10;\n+    let f = 'a'..='z';\n+\n+    let t = (a, b, c, d, e, f);\n+    t<|>;\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import] use prelude::*;\n+mod prelude {}\n+\n+pub mod ops {\n+    pub struct Range<Idx> {\n+        pub start: Idx,\n+        pub end: Idx,\n+    }\n+    pub struct RangeFrom<Idx> {\n+        pub start: Idx,\n+    }\n+    struct RangeFull;\n+    pub struct RangeInclusive<Idx> {\n+        start: Idx,\n+        end: Idx,\n+        is_empty: u8,\n+    }\n+    pub struct RangeTo<Idx> {\n+        pub end: Idx,\n+    }\n+    pub struct RangeToInclusive<Idx> {\n+        pub end: Idx,\n+    }\n+}\n+\"#,\n+    );\n+    assert_eq!(\n+        \"(RangeFull, RangeFrom<i32>, RangeTo<u32>, Range<usize>, RangeToInclusive<i32>, RangeInclusive<char>)\",\n+        type_at_pos(&db, pos),\n+    );\n+}\n+\n #[test]\n fn infer_while_let() {\n     let (db, pos) = TestDB::with_position("}]}