{"sha": "bd2511652fec706c306a3c11742e69756a4d0fb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMjUxMTY1MmZlYzcwNmMzMDZhM2MxMTc0MmU2OTc1NmE0ZDBmYjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-24T15:55:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:37Z"}, "message": "extend `dump_mir` to work for any tcx, not just global tcx", "tree": {"sha": "4202f141383c76daf12c9997d7c1be307aaab25d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4202f141383c76daf12c9997d7c1be307aaab25d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd2511652fec706c306a3c11742e69756a4d0fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2511652fec706c306a3c11742e69756a4d0fb1", "html_url": "https://github.com/rust-lang/rust/commit/bd2511652fec706c306a3c11742e69756a4d0fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd2511652fec706c306a3c11742e69756a4d0fb1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b5f244fb21ebbec2bf3a27820de44a56fbd8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b5f244fb21ebbec2bf3a27820de44a56fbd8b0", "html_url": "https://github.com/rust-lang/rust/commit/16b5f244fb21ebbec2bf3a27820de44a56fbd8b0"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "92e62b14693f4f746c29914291a8db745db0cf9e", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd2511652fec706c306a3c11742e69756a4d0fb1/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2511652fec706c306a3c11742e69756a4d0fb1/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=bd2511652fec706c306a3c11742e69756a4d0fb1", "patch": "@@ -39,13 +39,13 @@ pub enum MirSource {\n     GeneratorDrop(NodeId),\n }\n \n-impl<'a, 'tcx> MirSource {\n+impl<'a, 'gcx, 'tcx> MirSource {\n     pub fn from_local_def_id(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> MirSource {\n         let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n         Self::from_node(tcx, id)\n     }\n \n-    pub fn from_node(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: NodeId) -> MirSource {\n+    pub fn from_node(tcx: TyCtxt<'a, 'gcx, 'tcx>, id: NodeId) -> MirSource {\n         use hir::*;\n \n         // Handle constants in enum discriminants, types, and repeat expressions."}, {"sha": "1d924175b2167dca4fd27ca849a2322b00f42059", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bd2511652fec706c306a3c11742e69756a4d0fb1/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd2511652fec706c306a3c11742e69756a4d0fb1/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=bd2511652fec706c306a3c11742e69756a4d0fb1", "patch": "@@ -56,13 +56,13 @@ pub enum PassWhere {\n /// - `substring1&substring2,...` -- `&`-separated list of substrings\n ///   that can appear in the pass-name or the `item_path_str` for the given\n ///   node-id. If any one of the substrings match, the data is dumped out.\n-pub fn dump_mir<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             pass_num: Option<(MirSuite, MirPassIndex)>,\n-                             pass_name: &str,\n-                             disambiguator: &Display,\n-                             source: MirSource,\n-                             mir: &Mir<'tcx>,\n-                             extra_data: F)\n+pub fn dump_mir<'a, 'gcx, 'tcx, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                   pass_num: Option<(MirSuite, MirPassIndex)>,\n+                                   pass_name: &str,\n+                                   disambiguator: &Display,\n+                                   source: MirSource,\n+                                   mir: &Mir<'tcx>,\n+                                   extra_data: F)\n where\n     F: FnMut(PassWhere, &mut Write) -> io::Result<()>\n {\n@@ -77,10 +77,10 @@ where\n                           disambiguator, source, mir, extra_data);\n }\n \n-pub fn dump_enabled<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              pass_name: &str,\n-                              source: MirSource)\n-                              -> bool {\n+pub fn dump_enabled<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                    pass_name: &str,\n+                                    source: MirSource)\n+                                    -> bool {\n     let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n         None => return false,\n         Some(ref filters) => filters,\n@@ -101,14 +101,14 @@ pub fn dump_enabled<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n // `item_path_str()` would otherwise trigger `type_of`, and this can\n // run while we are already attempting to evaluate `type_of`.\n \n-fn dump_matched_mir_node<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                      pass_num: Option<(MirSuite, MirPassIndex)>,\n-                                      pass_name: &str,\n-                                      node_path: &str,\n-                                      disambiguator: &Display,\n-                                      source: MirSource,\n-                                      mir: &Mir<'tcx>,\n-                                      mut extra_data: F)\n+fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                            pass_num: Option<(MirSuite, MirPassIndex)>,\n+                                            pass_name: &str,\n+                                            node_path: &str,\n+                                            disambiguator: &Display,\n+                                            source: MirSource,\n+                                            mir: &Mir<'tcx>,\n+                                            mut extra_data: F)\n where\n     F: FnMut(PassWhere, &mut Write) -> io::Result<()>\n {\n@@ -161,10 +161,10 @@ where\n }\n \n /// Write out a human-readable textual representation for the given MIR.\n-pub fn write_mir_pretty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                  single: Option<DefId>,\n-                                  w: &mut Write)\n-                                  -> io::Result<()>\n+pub fn write_mir_pretty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                        single: Option<DefId>,\n+                                        w: &mut Write)\n+                                        -> io::Result<()>\n {\n     writeln!(w, \"// WARNING: This output format is intended for human consumers only\")?;\n     writeln!(w, \"// and is subject to change without notice. Knock yourself out.\")?;\n@@ -192,12 +192,12 @@ pub fn write_mir_pretty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Ok(())\n }\n \n-pub fn write_mir_fn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 src: MirSource,\n-                                 mir: &Mir<'tcx>,\n-                                 extra_data: &mut F,\n-                                 w: &mut Write)\n-                                 -> io::Result<()>\n+pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                       src: MirSource,\n+                                       mir: &Mir<'tcx>,\n+                                       extra_data: &mut F,\n+                                       w: &mut Write)\n+                                       -> io::Result<()>\n where\n     F: FnMut(PassWhere, &mut Write) -> io::Result<()>\n {\n@@ -321,11 +321,11 @@ fn write_scope_tree(tcx: TyCtxt,\n \n /// Write out a human-readable textual representation of the MIR's `fn` type and the types of its\n /// local variables (both user-defined bindings and compiler temporaries).\n-pub fn write_mir_intro<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             src: MirSource,\n-                             mir: &Mir,\n-                             w: &mut Write)\n-                             -> io::Result<()> {\n+pub fn write_mir_intro<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                       src: MirSource,\n+                                       mir: &Mir,\n+                                       w: &mut Write)\n+                                       -> io::Result<()> {\n     write_mir_sig(tcx, src, mir, w)?;\n     writeln!(w, \" {{\")?;\n "}]}