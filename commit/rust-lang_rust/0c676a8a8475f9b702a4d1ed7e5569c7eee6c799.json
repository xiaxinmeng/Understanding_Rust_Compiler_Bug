{"sha": "0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "node_id": "C_kwDOAAsO6NoAKDBjNjc2YThhODQ3NWY5YjcwMmE0ZDFlZDdlNTU2OWM3ZWVlNmM3OTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-23T11:26:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-23T11:26:40Z"}, "message": "Rollup merge of #94128 - mqy:master, r=Dylan-DPC\n\nrustdoc: several minor fixes\n\n``@rustbot`` label A-docs", "tree": {"sha": "9d9721deacd6522d2310a835a4f08a04a870ed89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9721deacd6522d2310a835a4f08a04a870ed89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFhnwCRBK7hj4Ov3rIwAAKLYIADT7Uj21XOlQlM3otHuIduLf\nspwhuXuUdFfxSUdaBB2E9kXM2xIgBxTUvQqF/LmxCH4ehequ1BupcvxIaf28xe1L\nBn99t/0htj23gvcHwHCs2Fyl7lhJ5hbb8jc4gtPnlU7e1rjfseS0v6in/BGiFFOp\nIz/z+SX07qQ+8yIUAPRoqMci+cEUMO2P9qGDbqdOhww/ShpLbCCH/NlshJWG0b0Q\nsGbQtYEzC73aTwOtp7WCv1uG4t8znEO7O+8AUOkUQHsIyTL6pSvP0pRSwNtsaNfS\n6sVhUYy8sh2MgUuiVM+pShveuR7dl0q4IDbiQH5MRTdAmQJ1fRXq7d/XskbXjCM=\n=/eNc\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d9721deacd6522d2310a835a4f08a04a870ed89\nparent c651ba8a542c7d89b271efbf024a31091c824f4b\nparent 997492538b5db29ca3e350f18ab1ca1fab0dadff\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645615600 +0100\ncommitter GitHub <noreply@github.com> 1645615600 +0100\n\nRollup merge of #94128 - mqy:master, r=Dylan-DPC\n\nrustdoc: several minor fixes\n\n``@rustbot`` label A-docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "html_url": "https://github.com/rust-lang/rust/commit/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c651ba8a542c7d89b271efbf024a31091c824f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c651ba8a542c7d89b271efbf024a31091c824f4b", "html_url": "https://github.com/rust-lang/rust/commit/c651ba8a542c7d89b271efbf024a31091c824f4b"}, {"sha": "997492538b5db29ca3e350f18ab1ca1fab0dadff", "url": "https://api.github.com/repos/rust-lang/rust/commits/997492538b5db29ca3e350f18ab1ca1fab0dadff", "html_url": "https://github.com/rust-lang/rust/commit/997492538b5db29ca3e350f18ab1ca1fab0dadff"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "e616a09024cec11994be5b77f43e0ea17c9bef55", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -285,7 +285,7 @@ impl ParenthesizedArgs {\n \n pub use crate::node_id::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n \n-/// A modifier on a bound, e.g., `?Sized` or `~const Trait`.\n+/// A modifier on a bound, e.g., `?Trait` or `~const Trait`.\n ///\n /// Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug)]"}, {"sha": "7c3b2a644e8db87a16dfe7094e8ce6dd3f32880c", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -47,7 +47,7 @@ pub enum GeneratorState<Y, R> {\n /// fn main() {\n ///     let mut generator = || {\n ///         yield 1;\n-///         return \"foo\"\n+///         \"foo\"\n ///     };\n ///\n ///     match Pin::new(&mut generator).resume(()) {"}, {"sha": "775d2ded9daad2c1933df0769d9d47b9b44cd88f", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -1100,8 +1100,8 @@ pub macro pin($value:expr $(,)?) {\n     //     that would break `Pin`'s invariants.\n     //   - `{ $value }` is braced, making it a _block expression_, thus **moving**\n     //     the given `$value`, and making it _become an **anonymous** temporary_.\n-    //     By virtue of being anonynomous, it can no longer be accessed, thus\n-    //     preventing any attemps to `mem::replace` it or `mem::forget` it, _etc._\n+    //     By virtue of being anonymous, it can no longer be accessed, thus\n+    //     preventing any attempts to `mem::replace` it or `mem::forget` it, _etc._\n     //\n     // This gives us a `pin!` definition that is sound, and which works, but only\n     // in certain scenarios:"}, {"sha": "8d19a054a1d2504bc2c06cdd03be49341dbdcb35", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c676a8a8475f9b702a4d1ed7e5569c7eee6c799/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=0c676a8a8475f9b702a4d1ed7e5569c7eee6c799", "patch": "@@ -8,7 +8,7 @@\n //! In Rust with `-Z gcc-ld=lld` we have gcc or clang invoke rust-lld. Since there is no way to\n //! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n //! and since Windows does not support symbolic links for files this wrapper is used in place of a\n-//! symblic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n+//! symbolic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n //! `../rust-lld -flavor ld64` if `ld64` is enabled. On Windows it spawns a `..\\rust-lld.exe`\n //! child process.\n "}]}