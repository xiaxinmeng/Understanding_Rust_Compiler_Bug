{"sha": "7cda0d43165ed38ab31086fc01f5d66712cc9994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZGEwZDQzMTY1ZWQzOGFiMzEwODZmYzAxZjVkNjY3MTJjYzk5OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T05:29:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T05:29:06Z"}, "message": "auto merge of #8481 : cmr/rust/bench/std/at_vec, r=graydon", "tree": {"sha": "b81e04ce8edc518691d4ba9e303d8099f79f4ae2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b81e04ce8edc518691d4ba9e303d8099f79f4ae2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cda0d43165ed38ab31086fc01f5d66712cc9994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cda0d43165ed38ab31086fc01f5d66712cc9994", "html_url": "https://github.com/rust-lang/rust/commit/7cda0d43165ed38ab31086fc01f5d66712cc9994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cda0d43165ed38ab31086fc01f5d66712cc9994/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c82549bd995833005cc4e6f0e1d43554ce441c", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c82549bd995833005cc4e6f0e1d43554ce441c", "html_url": "https://github.com/rust-lang/rust/commit/13c82549bd995833005cc4e6f0e1d43554ce441c"}, {"sha": "5b280886199926101514ed52abaac2269533fdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b280886199926101514ed52abaac2269533fdd0", "html_url": "https://github.com/rust-lang/rust/commit/5b280886199926101514ed52abaac2269533fdd0"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "31de7bf82f827adc371193c1431703eae85b6cae", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7cda0d43165ed38ab31086fc01f5d66712cc9994/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cda0d43165ed38ab31086fc01f5d66712cc9994/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=7cda0d43165ed38ab31086fc01f5d66712cc9994", "patch": "@@ -308,6 +308,7 @@ pub mod raw {\n mod test {\n     use super::*;\n     use prelude::*;\n+    use bh = extra::test::BenchHarness;\n \n     #[test]\n     fn test() {\n@@ -347,4 +348,84 @@ mod test {\n         assert_eq!(to_managed([@\"abc\", @\"123\"]), @[@\"abc\", @\"123\"]);\n         assert_eq!(to_managed([@[42]]), @[@[42]]);\n     }\n+\n+    #[bench]\n+    fn bench_capacity(b: &mut bh) {\n+        let x = @[1, 2, 3];\n+        do b.iter {\n+            capacity(x);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_build_sized(b: &mut bh) {\n+        let len = 64;\n+        do b.iter {\n+            build_sized(len, |push| for i in range(0, 1024) { push(i) });\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_build(b: &mut bh) {\n+        do b.iter {\n+            for i in range(0, 95) {\n+                build(|push| push(i));\n+            }\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_append(b: &mut bh) {\n+        let lhs = @[7, ..128];\n+        let rhs = range(0, 256).to_owned_vec();\n+        do b.iter {\n+            append(lhs, rhs);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_map(b: &mut bh) {\n+        let elts = range(0, 256).to_owned_vec();\n+        do b.iter {\n+            map(elts, |x| x*2);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_from_fn(b: &mut bh) {\n+        do b.iter {\n+            from_fn(1024, |x| x);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_from_elem(b: &mut bh) {\n+        do b.iter {\n+            from_elem(1024, 0u64);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_to_managed_move(b: &mut bh) {\n+        do b.iter {\n+            let elts = range(0, 1024).to_owned_vec(); // yikes! can't move out of capture, though\n+            to_managed_move(elts);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_to_managed(b: &mut bh) {\n+        let elts = range(0, 1024).to_owned_vec();\n+        do b.iter {\n+            to_managed(elts);\n+        }\n+    }\n+\n+    #[bench]\n+    fn bench_clone(b: &mut bh) {\n+        let elts = to_managed(range(0, 1024).to_owned_vec());\n+        do b.iter {\n+            elts.clone();\n+        }\n+    }\n }"}]}