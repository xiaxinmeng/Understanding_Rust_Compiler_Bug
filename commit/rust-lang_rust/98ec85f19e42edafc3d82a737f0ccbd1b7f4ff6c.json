{"sha": "98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWM4NWYxOWU0MmVkYWZjM2Q4MmE3MzdmMGNjYmQxYjdmNGZmNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-18T19:16:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-18T19:16:15Z"}, "message": "auto merge of #16575 : pcwalton/rust/import-foo-as-bar, r=aturon\n\nof `use bar as foo`.\r\n\r\nChange all uses of `use foo = bar` to `use bar as foo`.\r\n\r\nImplements RFC #47.\r\n\r\nCloses #16461.\r\n\r\n[breaking-change]\r\n\r\nr? @aturon", "tree": {"sha": "6d159da0fd6e2fb638ac02ab238cd85d808c73e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d159da0fd6e2fb638ac02ab238cd85d808c73e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "html_url": "https://github.com/rust-lang/rust/commit/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbf012ee6c8719090caa6041e0ec1312e1b7659", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbf012ee6c8719090caa6041e0ec1312e1b7659", "html_url": "https://github.com/rust-lang/rust/commit/fcbf012ee6c8719090caa6041e0ec1312e1b7659"}, {"sha": "67deb2e65e150a1b9b2fcd457da47e3e13b2c4f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/67deb2e65e150a1b9b2fcd457da47e3e13b2c4f7", "html_url": "https://github.com/rust-lang/rust/commit/67deb2e65e150a1b9b2fcd457da47e3e13b2c4f7"}], "stats": {"total": 276, "additions": 140, "deletions": 136}, "files": [{"sha": "33216c64a33bfb602efba06d8351d8fd7f401750", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -1801,7 +1801,7 @@ module through the rules above. It essentially allows public access into the\n re-exported item. For example, this program is valid:\n \n ~~~~\n-pub use api = self::implementation;\n+pub use self::implementation as api;\n \n mod implementation {\n     pub fn f() {}"}, {"sha": "0db25c4090ebc669b8ef432db83ba51c74674bf3", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -3112,7 +3112,7 @@ use farm::*;\n However, that's not all. You can also rename an item while you're bringing it into scope:\n \n ~~~\n-use egg_layer = farm::chicken;\n+use farm::chicken as egg_layer;\n # mod farm { pub fn chicken() { println!(\"Laying eggs is fun!\")  } }\n // ...\n \n@@ -3335,7 +3335,7 @@ you just have to import it with an `use` statement.\n For example, it re-exports `range` which is defined in `std::iter::range`:\n \n ~~~\n-use iter_range = std::iter::range;\n+use std::iter::range as iter_range;\n \n fn main() {\n     // `range` is imported by default"}, {"sha": "7809c17d9389846166e6133a7abd65003daf9011", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -86,7 +86,7 @@ extern crate libc;\n \n #[deprecated = \"use boxed instead\"]\n #[cfg(not(test))]\n-pub use owned = boxed;\n+pub use boxed as owned;\n \n // Heaps provided for low-level allocation strategies\n "}, {"sha": "4ce39a683aea7d680ad63cb3e2c4b97aff7a9c10", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -73,7 +73,7 @@ use core::mem;\n use vec::Vec;\n \n /// Reexport the `sip::hash` function as our default hasher.\n-pub use hash = self::sip::hash;\n+pub use self::sip::hash as hash;\n \n pub mod sip;\n "}, {"sha": "66973fd41007996625793ccda5af46e1f2fcb06a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -19,13 +19,13 @@ use core::fmt;\n use core::mem;\n use core::ptr;\n // FIXME: ICE's abound if you import the `Slice` type while importing `Slice` trait\n-use RawSlice = core::raw::Slice;\n+use core::raw::Slice as RawSlice;\n \n use {Mutable, MutableSeq};\n use hash;\n use str;\n use str::{CharRange, StrAllocating, MaybeOwned, Owned};\n-use MaybeOwnedSlice = str::Slice; // So many `Slice`s...\n+use str::Slice as MaybeOwnedSlice; // So many `Slice`s...\n use vec::Vec;\n \n /// A growable string stored as a UTF-8 encoded buffer."}, {"sha": "6e4f2bc54819abbb386301a5706a7679c115e6ed", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -13,13 +13,13 @@\n use core::prelude::*;\n \n use alloc::heap::{allocate, reallocate, deallocate};\n-use RawSlice = core::raw::Slice;\n use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n use core::mem;\n use core::num;\n use core::ptr;\n+use core::raw::Slice as RawSlice;\n use core::uint;\n \n use {Mutable, MutableSeq};"}, {"sha": "9d64a25149fcfd7bbd5df898ea0f1191459fba4a", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -21,7 +21,7 @@ by the compiler automatically for the types to which they apply.\n */\n \n #[deprecated = \"This has been renamed to Sync\"]\n-pub use Share = self::Sync;\n+pub use self::Sync as Share;\n \n /// Types able to be transferred across task boundaries.\n #[lang=\"send\"]"}, {"sha": "7e2ea492d4ccfc77e1506374adae623b38809270", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -107,7 +107,7 @@ pub mod collections;\n /// Deprecated module in favor of `std::cell`\n pub mod ty {\n     #[deprecated = \"this type has been renamed to `UnsafeCell`\"]\n-    pub use Unsafe = cell::UnsafeCell;\n+    pub use cell::UnsafeCell as Unsafe;\n }\n \n /* Core types and methods on primitives */"}, {"sha": "826f25101fb7028ab9de788f50e25740b6601d3a", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -50,7 +50,7 @@ use mem::size_of;\n use kinds::marker;\n use raw::Repr;\n // Avoid conflicts with *both* the Slice trait (buggy) and the `slice::raw` module.\n-use RawSlice = raw::Slice;\n+use raw::Slice as RawSlice;\n \n \n //"}, {"sha": "7cac0d25abfee0ba6f6d98dbb7af1ac34bacd7af", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -47,7 +47,7 @@ forming a diamond-shaped acyclic graph and then pointing to the fifth\n which is cyclic.\n \n ```rust\n-use dot = graphviz;\n+use graphviz as dot;\n use graphviz::maybe_owned_vec::IntoMaybeOwnedVector;\n \n type Nd = int;\n@@ -147,7 +147,7 @@ labelled with the &sube; character (specified using the HTML character\n entity `&sube`).\n \n ```rust\n-use dot = graphviz;\n+use graphviz as dot;\n use std::str;\n \n type Nd = uint;\n@@ -203,7 +203,7 @@ The output from this example is the same as the second example: the\n Hasse-diagram for the subsets of the set `{x, y}`.\n \n ```rust\n-use dot = graphviz;\n+use graphviz as dot;\n use std::str;\n \n type Nd<'a> = (uint, &'a str);"}, {"sha": "d4f2b255158bb2fb6fb9d9a37eb9eae5b8458413", "filename": "src/libgreen/message_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibgreen%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibgreen%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmessage_queue.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use alloc::arc::Arc;\n-use mpsc = std::sync::mpsc_queue;\n+use std::sync::mpsc_queue as mpsc;\n use std::kinds::marker;\n \n pub enum PopResult<T> {"}, {"sha": "22001cf1070179189ff1e7a6d5bdebbe4290ae0f", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -25,7 +25,7 @@ use coroutine::Coroutine;\n use sleeper_list::SleeperList;\n use stack::StackPool;\n use task::{TypeSched, GreenTask, HomeSched, AnySched};\n-use msgq = message_queue;\n+use message_queue as msgq;\n \n /// A scheduler is responsible for coordinating the execution of Tasks\n /// on a single thread. The scheduler runs inside a slightly modified"}, {"sha": "5d66100732918695b8a8c8235a2cc1dce07c5175", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -79,8 +79,8 @@ mod tty;\n #[cfg(windows)] #[path = \"c_win32.rs\"] mod c;\n \n fn unimpl() -> IoError {\n-    #[cfg(unix)] use ERROR = libc::ENOSYS;\n-    #[cfg(windows)] use ERROR = libc::ERROR_CALL_NOT_IMPLEMENTED;\n+    #[cfg(unix)] use libc::ENOSYS as ERROR;\n+    #[cfg(windows)] use libc::ERROR_CALL_NOT_IMPLEMENTED as ERROR;\n     IoError {\n         code: ERROR as uint,\n         extra: 0,"}, {"sha": "2255578ba8038fc8b8b4fefadd17e77533a1525a", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -210,8 +210,8 @@ pub fn sockaddr_to_addr(storage: &libc::sockaddr_storage,\n             })\n         }\n         _ => {\n-            #[cfg(unix)] use ERROR = libc::EINVAL;\n-            #[cfg(windows)] use ERROR = libc::WSAEINVAL;\n+            #[cfg(unix)] use libc::EINVAL as ERROR;\n+            #[cfg(windows)] use libc::WSAEINVAL as ERROR;\n             Err(IoError {\n                 code: ERROR as uint,\n                 extra: 0,"}, {"sha": "895b8b5929c96e69597b64ad130b82e0ae209969", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -39,8 +39,8 @@ fn addr_to_sockaddr_un(addr: &CString,\n \n     let len = addr.len();\n     if len > s.sun_path.len() - 1 {\n-        #[cfg(unix)] use ERROR = libc::EINVAL;\n-        #[cfg(windows)] use ERROR = libc::WSAEINVAL;\n+        #[cfg(unix)] use libc::EINVAL as ERROR;\n+        #[cfg(windows)] use libc::WSAEINVAL as ERROR;\n         return Err(IoError {\n             code: ERROR as uint,\n             extra: 0,"}, {"sha": "443d7645388a32644e9bcc3266a0f15864c0b3ff", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -148,8 +148,8 @@ impl rtio::RtioProcess for Process {\n     }\n \n     fn kill(&mut self, signum: int) -> IoResult<()> {\n-        #[cfg(unix)] use ERROR = libc::EINVAL;\n-        #[cfg(windows)] use ERROR = libc::ERROR_NOTHING_TO_TERMINATE;\n+        #[cfg(unix)] use libc::EINVAL as ERROR;\n+        #[cfg(windows)] use libc::ERROR_NOTHING_TO_TERMINATE as ERROR;\n \n         // On linux (and possibly other unices), a process that has exited will\n         // continue to accept signals because it is \"defunct\". The delivery of\n@@ -192,8 +192,8 @@ impl Drop for Process {\n }\n \n fn pipe() -> IoResult<(file::FileDesc, file::FileDesc)> {\n-    #[cfg(unix)] use ERROR = libc::EMFILE;\n-    #[cfg(windows)] use ERROR = libc::WSAEMFILE;\n+    #[cfg(unix)] use libc::EMFILE as ERROR;\n+    #[cfg(windows)] use libc::WSAEMFILE as ERROR;\n     struct Closer { fd: libc::c_int }\n \n     let os::Pipe { reader, writer } = match unsafe { os::pipe() } {"}, {"sha": "356805d91de7a314747150f25a59c75e96eb29cb", "filename": "src/libnative/io/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibnative%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Futil.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -25,8 +25,8 @@ pub enum SocketStatus {\n }\n \n pub fn timeout(desc: &'static str) -> IoError {\n-    #[cfg(unix)] use ERROR = libc::ETIMEDOUT;\n-    #[cfg(windows)] use ERROR = libc::ERROR_OPERATION_ABORTED;\n+    #[cfg(unix)] use libc::ETIMEDOUT as ERROR;\n+    #[cfg(windows)] use libc::ERROR_OPERATION_ABORTED as ERROR;\n     IoError {\n         code: ERROR as uint,\n         extra: 0,\n@@ -35,8 +35,8 @@ pub fn timeout(desc: &'static str) -> IoError {\n }\n \n pub fn short_write(n: uint, desc: &'static str) -> IoError {\n-    #[cfg(unix)] use ERROR = libc::EAGAIN;\n-    #[cfg(windows)] use ERROR = libc::ERROR_OPERATION_ABORTED;\n+    #[cfg(unix)] use libc::EAGAIN as ERROR;\n+    #[cfg(windows)] use libc::ERROR_OPERATION_ABORTED as ERROR;\n     IoError {\n         code: ERROR as uint,\n         extra: n,\n@@ -102,10 +102,10 @@ pub fn connect_timeout(fd: net::sock_t,\n                        len: libc::socklen_t,\n                        timeout_ms: u64) -> IoResult<()> {\n     use std::os;\n-    #[cfg(unix)]    use INPROGRESS = libc::EINPROGRESS;\n-    #[cfg(windows)] use INPROGRESS = libc::WSAEINPROGRESS;\n-    #[cfg(unix)]    use WOULDBLOCK = libc::EWOULDBLOCK;\n-    #[cfg(windows)] use WOULDBLOCK = libc::WSAEWOULDBLOCK;\n+    #[cfg(unix)]    use libc::EINPROGRESS as INPROGRESS;\n+    #[cfg(windows)] use libc::WSAEINPROGRESS as INPROGRESS;\n+    #[cfg(unix)]    use libc::EWOULDBLOCK as WOULDBLOCK;\n+    #[cfg(windows)] use libc::WSAEWOULDBLOCK as WOULDBLOCK;\n \n     // Make sure the call to connect() doesn't block\n     try!(set_nonblocking(fd, true));"}, {"sha": "261d4be86b406c9430addd7e8a3c874e7d96d3d4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -21,7 +21,7 @@ use metadata::common::LinkMeta;\n use metadata::creader;\n use middle::borrowck::{FnPartsWithCFG};\n use middle::borrowck;\n-use borrowck_dot = middle::borrowck::graphviz;\n+use middle::borrowck::graphviz as borrowck_dot;\n use middle::cfg;\n use middle::cfg::graphviz::LabelledCFG;\n use middle::{trans, freevars, stability, kind, ty, typeck, reachable};\n@@ -35,7 +35,7 @@ use util::common::time;\n use util::ppaux;\n use util::nodemap::{NodeSet};\n \n-use dot = graphviz;\n+use graphviz as dot;\n \n use serialize::{json, Encodable};\n "}, {"sha": "52acb54d6f8a93a765c3c9746db01af67949ffba", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -16,7 +16,7 @@ use std::io::fs;\n use std::dynamic_lib::DynamicLibrary;\n use std::collections::HashSet;\n \n-use myfs = util::fs;\n+use util::fs as myfs;\n \n pub enum FileMatch { FileMatches, FileDoesntMatch }\n "}, {"sha": "3359d7ed030c479cce5a7eee26357e908f7077b9", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -12,18 +12,18 @@\n // FIXME: remove this after snapshot, and Results are handled\n #![allow(unused_must_use)]\n \n-use c = metadata::common;\n-use cstore = metadata::cstore;\n+use metadata::common as c;\n+use metadata::cstore as cstore;\n use driver::session::Session;\n use metadata::decoder;\n use middle::def;\n-use e = metadata::encoder;\n+use metadata::encoder as e;\n use middle::freevars::{CaptureMode, freevar_entry};\n use middle::freevars;\n use middle::region;\n use metadata::tydecode;\n-use metadata::tydecode::{DefIdSource, NominalType, TypeWithId, TypeParameter,\n-                         RegionParameter};\n+use metadata::tydecode::{DefIdSource, NominalType, TypeWithId, TypeParameter};\n+use metadata::tydecode::{RegionParameter};\n use metadata::tyencode;\n use middle::subst;\n use middle::subst::VecPerParamSpace;"}, {"sha": "a69fe6958e175d7745c5f7a8c5cef27fc162b33e", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -19,8 +19,8 @@\n \n \n use middle::borrowck::*;\n-use euv = middle::expr_use_visitor;\n-use mc = middle::mem_categorization;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "f58cc95038382ecd94f9dd9c91960aaf281f5b8d", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -12,12 +12,12 @@\n  * Computes moves.\n  */\n \n-use mc = middle::mem_categorization;\n use middle::borrowck::*;\n-use middle::borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n use middle::borrowck::gather_loans::move_error::MoveSpanAndPath;\n+use middle::borrowck::gather_loans::move_error::{MoveError, MoveErrorCollector};\n use middle::borrowck::move_data::*;\n-use euv = middle::expr_use_visitor;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use syntax::ast;\n use syntax::codemap::Span;"}, {"sha": "c6fbbed1f8a162bafcbfac2258cc11dece5eb267", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -14,8 +14,8 @@\n  */\n \n use middle::borrowck::*;\n-use euv = middle::expr_use_visitor;\n-use mc = middle::mem_categorization;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use util::ppaux::Repr;\n use syntax::ast;"}, {"sha": "82e1748465f613f458875a891fbb940ed66f72d1", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -18,8 +18,8 @@\n \n use middle::borrowck::*;\n use middle::borrowck::move_data::MoveData;\n-use euv = middle::expr_use_visitor;\n-use mc = middle::mem_categorization;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use util::ppaux::{Repr};\n "}, {"sha": "4f9e51a64f4518d3e4ff46be6afb7d1ff941225b", "filename": "src/librustc/middle/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use mc = middle::mem_categorization;\n+use middle::mem_categorization as mc;\n use middle::borrowck::BorrowckCtxt;\n use middle::ty;\n "}, {"sha": "d1e9a2c0a747509447da91655147b44e525f0f17", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -13,8 +13,8 @@\n  */\n \n use middle::borrowck::*;\n-use euv = middle::expr_use_visitor;\n-use mc = middle::mem_categorization;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use syntax::codemap::Span;\n use util::ppaux::Repr;"}, {"sha": "b19d01187281a4be44c3e64fb67ec8f9891e3d4d", "filename": "src/librustc/middle/borrowck/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgraphviz.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -13,9 +13,9 @@\n //! data to rendered labels.\n \n /// For clarity, rename the graphviz crate locally to dot.\n-use dot = graphviz;\n+use graphviz as dot;\n pub use middle::cfg::graphviz::{Node, Edge};\n-use cfg_dot = middle::cfg::graphviz;\n+use middle::cfg::graphviz as cfg_dot;\n \n use middle::borrowck;\n use middle::borrowck::{BorrowckCtxt, LoanPath};"}, {"sha": "9de55ccc46824a5664a8b2f28ff8234a6a4c7332", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -17,8 +17,8 @@ use middle::dataflow::DataFlowContext;\n use middle::dataflow::BitwiseOperator;\n use middle::dataflow::DataFlowOperator;\n use middle::def;\n-use euv = middle::expr_use_visitor;\n-use mc = middle::mem_categorization;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n "}, {"sha": "340056875f2b93817e4694f7c4d10d88391c53ce", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -24,8 +24,8 @@ use middle::cfg;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::BitwiseOperator;\n use middle::dataflow::DataFlowOperator;\n-use euv = middle::expr_use_visitor;\n-use mc = middle::mem_categorization;\n+use middle::expr_use_visitor as euv;\n+use middle::mem_categorization as mc;\n use middle::ty;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "0cccae8b8c9cd478ab2b6542e769f84a0fb284b6", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -12,7 +12,7 @@\n /// libgraphviz traits.\n \n /// For clarity, rename the graphviz crate locally to dot.\n-use dot = graphviz;\n+use graphviz as dot;\n \n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "6caf54790d1b4d9f2f63c8641e1ee59fa4e2056e", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -14,7 +14,7 @@\n  * `ExprUseVisitor` determines how expressions are being used.\n  */\n \n-use mc = middle::mem_categorization;\n+use middle::mem_categorization as mc;\n use middle::def;\n use middle::freevars;\n use middle::pat_util;"}, {"sha": "d8bdeb0abf6d539903d3d12f60cf0582d14f2b00", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -189,16 +189,16 @@\n #![allow(non_camel_case_types)]\n \n use back::abi;\n-use mc = middle::mem_categorization;\n use driver::config::FullDebugInfo;\n-use euv = middle::expr_use_visitor;\n-use llvm;\n use llvm::{ValueRef, BasicBlockRef};\n+use llvm;\n+use middle::check_match::StaticInliner;\n+use middle::check_match;\n use middle::const_eval;\n use middle::def;\n-use middle::check_match;\n-use middle::check_match::StaticInliner;\n+use middle::expr_use_visitor as euv;\n use middle::lang_items::StrEqFnLangItem;\n+use middle::mem_categorization as mc;\n use middle::pat_util::*;\n use middle::resolve::DefMap;\n use middle::trans::adt;"}, {"sha": "e397ee94c8a1154c6c54c028731468dbc12a6288", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -53,9 +53,9 @@ use middle::typeck::MethodCall;\n use util::ppaux::Repr;\n \n use std::gc::Gc;\n+use syntax::abi as synabi;\n use syntax::ast;\n use syntax::ast_map;\n-use synabi = syntax::abi;\n \n pub struct MethodData {\n     pub llfn: ValueRef,"}, {"sha": "0244d0ddc6e021336695be7155acc9b488996804", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -16,10 +16,10 @@ use driver::session::Session;\n use llvm;\n use llvm::{ValueRef, BasicBlockRef, BuilderRef};\n use llvm::{True, False, Bool};\n-use mc = middle::mem_categorization;\n use middle::def;\n use middle::freevars;\n use middle::lang_items::LangItem;\n+use middle::mem_categorization as mc;\n use middle::subst;\n use middle::subst::Subst;\n use middle::trans::base;"}, {"sha": "ae96937757f0ec2e3ef12c1e4f8c8af44e64a4c4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -12,16 +12,16 @@\n \n use back::svh::Svh;\n use driver::session::Session;\n-use metadata::csearch;\n-use mc = middle::mem_categorization;\n use lint;\n+use metadata::csearch;\n use middle::const_eval;\n use middle::def;\n use middle::dependency_format;\n use middle::freevars::CaptureModeMap;\n use middle::freevars;\n use middle::lang_items::{FnMutTraitLangItem, OpaqueStructLangItem};\n use middle::lang_items::{TyDescStructLangItem, TyVisitorTraitLangItem};\n+use middle::mem_categorization as mc;\n use middle::resolve;\n use middle::resolve_lifetime;\n use middle::stability;"}, {"sha": "add31ed87ce4c2e955c8e514ec8085dd8c993d3e", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -53,15 +53,15 @@ use middle::const_eval;\n use middle::def;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem};\n use middle::lang_items::{FnOnceTraitLangItem};\n+use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::subst::{VecPerParamSpace};\n use middle::ty;\n use middle::ty_fold::TypeFolder;\n-use middle::typeck::rscope::{ExplicitRscope, ImpliedSingleRscope};\n use middle::typeck::rscope::RegionScope;\n+use middle::typeck::rscope::{ExplicitRscope, ImpliedSingleRscope};\n use middle::typeck::{TypeAndSubsts, infer, lookup_def_tcx, rscope};\n use middle::typeck;\n-use rl = middle::resolve_lifetime;\n use util::ppaux::Repr;\n \n use std::rc::Rc;"}, {"sha": "8e41c9463f6b82e349937ed543fd039247febe61", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -121,7 +121,7 @@ and report an error, and it just seems like more mess in the end.)\n use middle::def;\n use middle::def::{DefArg, DefBinding, DefLocal, DefUpvar};\n use middle::freevars;\n-use mc = middle::mem_categorization;\n+use middle::mem_categorization as mc;\n use middle::ty::{ReScope};\n use middle::ty;\n use middle::typeck::astconv::AstConv;"}, {"sha": "97c11b9205970f316047795200ad68bba3809cb8", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -195,7 +195,7 @@ represents the \"variance transform\" as defined in the paper:\n use std::collections::HashMap;\n use arena;\n use arena::Arena;\n-use rl = middle::resolve_lifetime;\n+use middle::resolve_lifetime as rl;\n use middle::subst;\n use middle::subst::{ParamSpace, FnSpace, TypeSpace, SelfSpace, VecPerParamSpace};\n use middle::ty;"}, {"sha": "e0e9f0e6910b2838a2e41036e5a35e57149f9eb2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -10,27 +10,27 @@\n \n \n use middle::def;\n-use middle::subst;\n use middle::subst::{VecPerParamSpace,Subst};\n-use middle::ty::{ReSkolemized, ReVar};\n+use middle::subst;\n use middle::ty::{BoundRegion, BrAnon, BrNamed};\n use middle::ty::{ReEarlyBound, BrFresh, ctxt};\n-use middle::ty::{mt, t, ParamTy};\n use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n+use middle::ty::{ReSkolemized, ReVar};\n+use middle::ty::{mt, t, ParamTy};\n use middle::ty::{ty_bool, ty_char, ty_bot, ty_box, ty_struct, ty_enum};\n use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn, ty_closure};\n use middle::ty::{ty_nil, ty_param, ty_ptr, ty_rptr, ty_tup};\n-use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_infer};\n use middle::ty::{ty_unboxed_closure};\n+use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_infer};\n use middle::ty;\n-use middle::typeck;\n-use middle::typeck::infer;\n-use middle::typeck::infer::unify;\n-use VV = middle::typeck::infer::unify::VarValue;\n use middle::typeck::infer::region_inference;\n+use middle::typeck::infer::unify::VarValue as VV;\n+use middle::typeck::infer::unify;\n+use middle::typeck::infer;\n+use middle::typeck;\n \n-use std::rc::Rc;\n use std::gc::Gc;\n+use std::rc::Rc;\n use syntax::abi;\n use syntax::ast_map;\n use syntax::codemap::{Span, Pos};"}, {"sha": "bd6770b32561c1583f9c309cad02385c22030a18", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -16,7 +16,7 @@ use std::io;\n use std::os;\n use std::str;\n use syntax::abi;\n-use ErrorHandler = syntax::diagnostic::Handler;\n+use syntax::diagnostic::Handler as ErrorHandler;\n \n pub static METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n "}, {"sha": "373493885887061e59852032ff018fec7087218c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -545,7 +545,7 @@ impl fmt::Show for clean::ViewPath {\n                 if *name == src.path.segments.last().unwrap().name {\n                     write!(f, \"use {};\", *src)\n                 } else {\n-                    write!(f, \"use {} = {};\", *name, *src)\n+                    write!(f, \"use {} as {};\", *src, *name)\n                 }\n             }\n             clean::GlobImport(ref src) => {"}, {"sha": "85455b9df9ed1c6f03a1897c9599657b26c1af87", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -13,14 +13,12 @@\n //! This module uses libsyntax's lexer to provide token-based highlighting for\n //! the HTML documentation generated by rustdoc.\n \n-use std::io;\n-\n-use syntax::parse;\n-use syntax::parse::lexer;\n-\n use html::escape::Escape;\n \n-use t = syntax::parse::token;\n+use std::io;\n+use syntax::parse::lexer;\n+use syntax::parse::token as t;\n+use syntax::parse;\n \n /// Highlights some source code, returning the HTML output.\n pub fn highlight(src: &str, class: Option<&str>, id: Option<&str>) -> String {"}, {"sha": "b2edf5d6a2bccb05f20627edce878b534dc456de", "filename": "src/librustdoc/plugins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustdoc%2Fplugins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustdoc%2Fplugins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fplugins.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -10,7 +10,7 @@\n \n use clean;\n \n-use dl = std::dynamic_lib;\n+use std::dynamic_lib as dl;\n use serialize::json;\n use std::mem;\n use std::string::String;"}, {"sha": "ef56cd3b1da0b4e0a0316a1f265a175a15ed72bc", "filename": "src/librustrt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustrt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustrt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_ptr.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -240,7 +240,7 @@ pub mod native {\n     use alloc::boxed::Box;\n     use core::mem;\n     use core::ptr;\n-    use tls = thread_local_storage;\n+    use thread_local_storage as tls;\n \n     static mut RT_TLS_KEY: tls::Key = -1;\n "}, {"sha": "6525adf07f76f1a91b2b0065e7ed7eac41a6a3a5", "filename": "src/librustrt/rtio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustrt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustrt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Frtio.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -162,8 +162,8 @@ impl<'a> LocalIo<'a> {\n     pub fn maybe_raise<T>(f: |io: &mut IoFactory| -> IoResult<T>)\n         -> IoResult<T>\n     {\n-        #[cfg(unix)] use ERROR = libc::EINVAL;\n-        #[cfg(windows)] use ERROR = libc::ERROR_CALL_NOT_IMPLEMENTED;\n+        #[cfg(unix)] use libc::EINVAL as ERROR;\n+        #[cfg(windows)] use libc::ERROR_CALL_NOT_IMPLEMENTED as ERROR;\n         match LocalIo::borrow() {\n             Some(mut io) => f(io.get()),\n             None => Err(IoError {"}, {"sha": "204128cf6be71d82bb773399f59f45a8327b2755", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -74,7 +74,7 @@ use libc::c_void;\n use local::Local;\n use task::Task;\n \n-use uw = libunwind;\n+use libunwind as uw;\n \n pub struct Unwinder {\n     unwinding: bool,\n@@ -238,7 +238,7 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n #[doc(hidden)]\n #[allow(visible_private_types)]\n pub mod eabi {\n-    use uw = libunwind;\n+    use libunwind as uw;\n     use libc::c_int;\n \n     extern \"C\" {\n@@ -292,7 +292,7 @@ pub mod eabi {\n #[doc(hidden)]\n #[allow(visible_private_types)]\n pub mod eabi {\n-    use uw = libunwind;\n+    use libunwind as uw;\n     use libc::c_int;\n \n     extern \"C\" {\n@@ -345,7 +345,7 @@ pub mod eabi {\n #[doc(hidden)]\n #[allow(visible_private_types)]\n pub mod eabi {\n-    use uw = libunwind;\n+    use libunwind as uw;\n     use libc::c_int;\n \n     extern \"C\" {\n@@ -396,7 +396,7 @@ pub mod eabi {\n #[allow(visible_private_types)]\n #[allow(non_camel_case_types)]\n pub mod eabi {\n-    use uw = libunwind;\n+    use libunwind as uw;\n     use libc::{c_void, c_int};\n \n     struct EXCEPTION_RECORD;"}, {"sha": "6a0f2a27b184d23d22f61878af0dadde925226e3", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -25,7 +25,7 @@ use libc::c_void;\n use std::mem;\n use std::rt::mutex::NativeMutex;\n use std::rt::task::BlockedTask;\n-use mpsc = std::sync::mpsc_queue;\n+use std::sync::mpsc_queue as mpsc;\n \n use async::AsyncWatcher;\n use super::{Loop, UvHandle};"}, {"sha": "b31baa88e0c84e5eda3e16727772424cde004a43", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -27,10 +27,10 @@ use to_string::IntoStr;\n use vec::Vec;\n \n #[deprecated=\"this trait has been renamed to `AsciiExt`\"]\n-pub use StrAsciiExt = self::AsciiExt;\n+pub use self::AsciiExt as StrAsciiExt;\n \n #[deprecated=\"this trait has been renamed to `OwnedAsciiExt`\"]\n-pub use OwnedStrAsciiExt = self::OwnedAsciiExt;\n+pub use self::OwnedAsciiExt as OwnedStrAsciiExt;\n \n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero."}, {"sha": "d35b644b643d02ca0f528d7aa49b7b5139614855", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -175,7 +175,7 @@ pub use core::option;\n \n pub use alloc::boxed;\n #[deprecated = \"use boxed instead\"]\n-pub use owned = boxed;\n+pub use boxed as owned;\n \n pub use alloc::rc;\n \n@@ -289,7 +289,7 @@ mod std {\n     pub use vec; // used for vec![]\n \n     // The test runner calls ::std::os::args() but really wants realstd\n-    #[cfg(test)] pub use os = realstd::os;\n+    #[cfg(test)] pub use realstd::os as os;\n     // The test runner requires std::slice::Vector, so re-export std::slice just for it.\n     #[cfg(test)] pub use slice;\n "}, {"sha": "38d04324fe41788b03e2d70b05cb5db6305b4630", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -80,59 +80,59 @@ use vec::Vec;\n \n /// Typedef for POSIX file paths.\n /// See `posix::Path` for more info.\n-pub use PosixPath = self::posix::Path;\n+pub use self::posix::Path as PosixPath;\n \n /// Typedef for Windows file paths.\n /// See `windows::Path` for more info.\n-pub use WindowsPath = self::windows::Path;\n+pub use self::windows::Path as WindowsPath;\n \n /// Typedef for the platform-native path type\n #[cfg(unix)]\n-pub use Path = self::posix::Path;\n+pub use self::posix::Path as Path;\n /// Typedef for the platform-native path type\n #[cfg(windows)]\n-pub use Path = self::windows::Path;\n+pub use self::windows::Path as Path;\n \n /// Typedef for the platform-native component iterator\n #[cfg(unix)]\n-pub use Components = self::posix::Components;\n+pub use self::posix::Components as Components;\n /// Typedef for the platform-native component iterator\n #[cfg(windows)]\n-pub use Components = self::windows::Components;\n+pub use self::windows::Components as Components;\n \n /// Typedef for the platform-native str component iterator\n #[cfg(unix)]\n-pub use StrComponents = self::posix::StrComponents;\n+pub use self::posix::StrComponents as StrComponents;\n /// Typedef for the platform-native str component iterator\n #[cfg(windows)]\n-pub use StrComponents = self::windows::StrComponents;\n+pub use self::windows::StrComponents as StrComponents;\n \n /// Alias for the platform-native separator character.\n #[cfg(unix)]\n-pub use SEP = self::posix::SEP;\n+pub use self::posix::SEP as SEP;\n /// Alias for the platform-native separator character.\n #[cfg(windows)]\n-pub use SEP = self::windows::SEP;\n+pub use self::windows::SEP as SEP;\n \n /// Alias for the platform-native separator byte.\n #[cfg(unix)]\n-pub use SEP_BYTE = self::posix::SEP_BYTE;\n+pub use self::posix::SEP_BYTE as SEP_BYTE;\n /// Alias for the platform-native separator byte.\n #[cfg(windows)]\n-pub use SEP_BYTE = self::windows::SEP_BYTE;\n+pub use self::windows::SEP_BYTE as SEP_BYTE;\n \n /// Typedef for the platform-native separator char func\n #[cfg(unix)]\n-pub use is_sep = self::posix::is_sep;\n+pub use self::posix::is_sep as is_sep;\n /// Typedef for the platform-native separator char func\n #[cfg(windows)]\n-pub use is_sep = self::windows::is_sep;\n+pub use self::windows::is_sep as is_sep;\n /// Typedef for the platform-native separator byte func\n #[cfg(unix)]\n-pub use is_sep_byte = self::posix::is_sep_byte;\n+pub use self::posix::is_sep_byte as is_sep_byte;\n /// Typedef for the platform-native separator byte func\n #[cfg(windows)]\n-pub use is_sep_byte = self::windows::is_sep_byte;\n+pub use self::windows::is_sep_byte as is_sep_byte;\n \n pub mod posix;\n pub mod windows;"}, {"sha": "c02a97e09a41eb48eedb31383ae6fd5b0bf3f8d5", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -185,9 +185,9 @@ use result::{Ok, Err};\n use vec::Vec;\n \n #[cfg(not(target_word_size=\"64\"))]\n-use IsaacWordRng = core_rand::IsaacRng;\n+use core_rand::IsaacRng as IsaacWordRng;\n #[cfg(target_word_size=\"64\")]\n-use IsaacWordRng = core_rand::Isaac64Rng;\n+use core_rand::Isaac64Rng as IsaacWordRng;\n \n pub use core_rand::{Rand, Rng, SeedableRng, Open01, Closed01};\n pub use core_rand::{XorShiftRng, IsaacRng, Isaac64Rng};"}, {"sha": "8cfa1ebd59847b33a578735b57ec56ea15485656", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -27,7 +27,7 @@ pub use core_sync::{Semaphore, SemaphoreGuard};\n pub use core_sync::one::{Once, ONCE_INIT};\n \n #[deprecated = \"use atomic instead\"]\n-pub use atomics = core_sync::atomic;\n+pub use core_sync::atomic as atomics;\n \n pub use self::future::Future;\n pub use self::task_pool::TaskPool;"}, {"sha": "cb35bd8afb77287b1140068ae3f1c0676f242578", "filename": "src/libsync/comm/shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsync%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsync%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fshared.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -29,7 +29,7 @@ use rustrt::task::{Task, BlockedTask};\n use rustrt::thread::Thread;\n \n use atomic;\n-use mpsc = mpsc_queue;\n+use mpsc_queue as mpsc;\n \n static DISCONNECTED: int = int::MIN;\n static FUDGE: int = 1024;"}, {"sha": "36fe335128e4d7dae7cd3f573c8ab2801747eeab", "filename": "src/libsync/comm/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsync%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsync%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fstream.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -28,7 +28,7 @@ use rustrt::thread::Thread;\n \n use atomic;\n use comm::Receiver;\n-use spsc = spsc_queue;\n+use spsc_queue as spsc;\n \n static DISCONNECTED: int = int::MIN;\n #[cfg(test)]"}, {"sha": "12de615a81b79b0737bf1e6f43eab591fea41e7a", "filename": "src/libsync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmutex.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -68,7 +68,7 @@ use rustrt::mutex;\n use rustrt::task::{BlockedTask, Task};\n use rustrt::thread::Thread;\n \n-use q = mpsc_intrusive;\n+use mpsc_intrusive as q;\n \n pub static LOCKED: uint = 1 << 0;\n pub static GREEN_BLOCKED: uint = 1 << 1;"}, {"sha": "835181d55c4573da039584103f8688b85620a9aa", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -14,10 +14,10 @@ use codemap::{Span, respan};\n use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n+use fmt_macros as parse;\n use parse::token::InternedString;\n use parse::token;\n \n-use parse = fmt_macros;\n use std::collections::HashMap;\n use std::gc::{Gc, GC};\n "}, {"sha": "e76e4adcd7fdf25df55b1755186711b04d74b29a", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -328,7 +328,7 @@ pub mod with_hygiene {\n                       -> Vec<ast::TokenTree> {\n         // it appears to me that the cfg doesn't matter here... indeed,\n         // parsing tt's probably shouldn't require a parser at all.\n-        use make_reader = super::lexer::make_reader_with_embedded_idents;\n+        use super::lexer::make_reader_with_embedded_idents as make_reader;\n         let cfg = Vec::new();\n         let srdr = make_reader(&sess.span_diagnostic, filemap);\n         let mut p1 = Parser::new(sess, cfg, box srdr);"}, {"sha": "5273addf4f57d73d7253540e5c34545d294591c5", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -34,6 +34,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteOwnedSelf,\n     ObsoleteManagedType,\n     ObsoleteManagedExpr,\n+    ObsoleteImportRenaming,\n }\n \n pub trait ParserObsoleteMethods {\n@@ -83,6 +84,10 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n                 \"`@` notation for a managed pointer allocation\",\n                 \"use the `box(GC)` operator instead of `@`\"\n             ),\n+            ObsoleteImportRenaming => (\n+                \"`use foo = bar` syntax\",\n+                \"write `use bar as foo` instead\"\n+            )\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "9e2829e638050005d4e4f630cf97cb3bd313601b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -5385,7 +5385,6 @@ impl<'a> Parser<'a> {\n         match self.token {\n           token::EQ => {\n             // x = foo::bar\n-            // NOTE(stage0, #16461, pcwalton): Deprecate after snapshot.\n             self.bump();\n             let path_lo = self.span.lo;\n             path = vec!(self.parse_ident());\n@@ -5394,8 +5393,10 @@ impl<'a> Parser<'a> {\n                 let id = self.parse_ident();\n                 path.push(id);\n             }\n+            let span = mk_sp(path_lo, self.span.hi);\n+            self.obsolete(span, ObsoleteImportRenaming);\n             let path = ast::Path {\n-                span: mk_sp(path_lo, self.span.hi),\n+                span: span,\n                 global: false,\n                 segments: path.move_iter().map(|identifier| {\n                     ast::PathSegment {"}, {"sha": "262721bd63676d1df3e32eeeaf3583d718228e2e", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -225,7 +225,7 @@ impl<'a> Iterator<&'a str> for Graphemes<'a> {\n \n     #[inline]\n     fn next(&mut self) -> Option<&'a str> {\n-        use gr = tables::grapheme;\n+        use tables::grapheme as gr;\n         if self.string.len() == 0 {\n             return None;\n         }\n@@ -325,7 +325,7 @@ impl<'a> Iterator<&'a str> for Graphemes<'a> {\n impl<'a> DoubleEndedIterator<&'a str> for Graphemes<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a str> {\n-        use gr = tables::grapheme;\n+        use tables::grapheme as gr;\n         if self.string.len() == 0 {\n             return None;\n         }"}, {"sha": "d13503b23fb16a6c88594cdfb513b4543cc7231d", "filename": "src/test/compile-fail/resolve-conflict-import-vs-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std = std::slice; //~ ERROR import conflicts with imported crate\n+use std::slice as std; //~ ERROR import conflicts with imported crate\n \n fn main() {\n }"}, {"sha": "d6c6389fdb63bda3465e870000c926b281099b1e", "filename": "src/test/run-pass/extern-mod-ordering-exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs?ref=98ec85f19e42edafc3d82a737f0ccbd1b7f4ff6c", "patch": "@@ -12,7 +12,7 @@\n \n extern crate extern_mod_ordering_lib;\n \n-use the_lib = extern_mod_ordering_lib::extern_mod_ordering_lib;\n+use extern_mod_ordering_lib::extern_mod_ordering_lib as the_lib;\n \n pub fn main() {\n     the_lib::f();"}]}