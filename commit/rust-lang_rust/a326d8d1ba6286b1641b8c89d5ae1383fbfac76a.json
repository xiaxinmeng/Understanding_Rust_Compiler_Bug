{"sha": "a326d8d1ba6286b1641b8c89d5ae1383fbfac76a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMjZkOGQxYmE2Mjg2YjE2NDFiOGM4OWQ1YWUxMzgzZmJmYWM3NmE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-26T21:53:03Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-26T21:53:03Z"}, "message": "Document non-obvious behavior of fmt::UpperHex & co for negative integers\n\nBefore stabilization I\u2019d have suggested changing the behavior,\nbut that time is past.", "tree": {"sha": "8aa320a5680d66b101d0c6478da3aa377d3d884a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa320a5680d66b101d0c6478da3aa377d3d884a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a326d8d1ba6286b1641b8c89d5ae1383fbfac76a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a326d8d1ba6286b1641b8c89d5ae1383fbfac76a", "html_url": "https://github.com/rust-lang/rust/commit/a326d8d1ba6286b1641b8c89d5ae1383fbfac76a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a326d8d1ba6286b1641b8c89d5ae1383fbfac76a/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71da1c21ebc79f19e749344c8b4e2c13f533872e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e", "html_url": "https://github.com/rust-lang/rust/commit/71da1c21ebc79f19e749344c8b4e2c13f533872e"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "28d78d596e1c405a661ae8019beca5daef882776", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a326d8d1ba6286b1641b8c89d5ae1383fbfac76a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a326d8d1ba6286b1641b8c89d5ae1383fbfac76a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a326d8d1ba6286b1641b8c89d5ae1383fbfac76a", "patch": "@@ -624,6 +624,9 @@ pub trait Display {\n ///\n /// The `Octal` trait should format its output as a number in base-8.\n ///\n+/// For primitive signed integers (`i8` to `i128`, and `isize`),\n+/// negative values are formatted as the two\u2019s complement representation.\n+///\n /// The alternate flag, `#`, adds a `0o` in front of the output.\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n@@ -639,6 +642,8 @@ pub trait Display {\n ///\n /// assert_eq!(format!(\"{:o}\", x), \"52\");\n /// assert_eq!(format!(\"{:#o}\", x), \"0o52\");\n+///\n+/// assert_eq!(format!(\"{:o}\", -16), \"37777777760\");\n /// ```\n ///\n /// Implementing `Octal` on a type:\n@@ -671,6 +676,9 @@ pub trait Octal {\n ///\n /// The `Binary` trait should format its output as a number in binary.\n ///\n+/// For primitive signed integers (`i8` to `i128`, and `isize`),\n+/// negative values are formatted as the two\u2019s complement representation.\n+///\n /// The alternate flag, `#`, adds a `0b` in front of the output.\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n@@ -686,6 +694,8 @@ pub trait Octal {\n ///\n /// assert_eq!(format!(\"{:b}\", x), \"101010\");\n /// assert_eq!(format!(\"{:#b}\", x), \"0b101010\");\n+///\n+/// assert_eq!(format!(\"{:b}\", -16), \"11111111111111111111111111110000\");\n /// ```\n ///\n /// Implementing `Binary` on a type:\n@@ -719,6 +729,9 @@ pub trait Binary {\n /// The `LowerHex` trait should format its output as a number in hexadecimal, with `a` through `f`\n /// in lower case.\n ///\n+/// For primitive signed integers (`i8` to `i128`, and `isize`),\n+/// negative values are formatted as the two\u2019s complement representation.\n+///\n /// The alternate flag, `#`, adds a `0x` in front of the output.\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n@@ -734,6 +747,8 @@ pub trait Binary {\n ///\n /// assert_eq!(format!(\"{:x}\", x), \"2a\");\n /// assert_eq!(format!(\"{:#x}\", x), \"0x2a\");\n+///\n+/// assert_eq!(format!(\"{:x}\", -16), \"fffffff0\");\n /// ```\n ///\n /// Implementing `LowerHex` on a type:\n@@ -767,6 +782,9 @@ pub trait LowerHex {\n /// The `UpperHex` trait should format its output as a number in hexadecimal, with `A` through `F`\n /// in upper case.\n ///\n+/// For primitive signed integers (`i8` to `i128`, and `isize`),\n+/// negative values are formatted as the two\u2019s complement representation.\n+///\n /// The alternate flag, `#`, adds a `0x` in front of the output.\n ///\n /// For more information on formatters, see [the module-level documentation][module].\n@@ -782,6 +800,8 @@ pub trait LowerHex {\n ///\n /// assert_eq!(format!(\"{:X}\", x), \"2A\");\n /// assert_eq!(format!(\"{:#X}\", x), \"0x2A\");\n+///\n+/// assert_eq!(format!(\"{:X}\", -16), \"FFFFFFF0\");\n /// ```\n ///\n /// Implementing `UpperHex` on a type:"}]}