{"sha": "0b1438307e9357904ecb5603023414e554dbeb26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMTQzODMwN2U5MzU3OTA0ZWNiNTYwMzAyMzQxNGU1NTRkYmViMjY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T16:00:44Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-14T16:00:44Z"}, "message": "incr.comp.: Add 'tcx to QueryDescription.", "tree": {"sha": "b7c58fe4cc67b405c6a77ae457bfaf029a5278ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c58fe4cc67b405c6a77ae457bfaf029a5278ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1438307e9357904ecb5603023414e554dbeb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1438307e9357904ecb5603023414e554dbeb26", "html_url": "https://github.com/rust-lang/rust/commit/0b1438307e9357904ecb5603023414e554dbeb26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1438307e9357904ecb5603023414e554dbeb26/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfab89aa258f25ceb8cc4973127fceaa5367ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfab89aa258f25ceb8cc4973127fceaa5367ec3", "html_url": "https://github.com/rust-lang/rust/commit/4bfab89aa258f25ceb8cc4973127fceaa5367ec3"}], "stats": {"total": 178, "additions": 89, "deletions": 89}, "files": [{"sha": "2d979dbe7804a9376b888549467748ff3c8e096c", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/0b1438307e9357904ecb5603023414e554dbeb26/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1438307e9357904ecb5603023414e554dbeb26/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=0b1438307e9357904ecb5603023414e554dbeb26", "patch": "@@ -23,11 +23,11 @@ pub trait QueryConfig {\n     type Value;\n }\n \n-pub(super) trait QueryDescription: QueryConfig {\n+pub(super) trait QueryDescription<'tcx>: QueryConfig {\n     fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n }\n \n-impl<M: QueryConfig<Key=DefId>> QueryDescription for M {\n+impl<'tcx, M: QueryConfig<Key=DefId>> QueryDescription<'tcx> for M {\n     default fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         if !tcx.sess.verbose() {\n             format!(\"processing `{}`\", tcx.item_path_str(def_id))\n@@ -38,502 +38,502 @@ impl<M: QueryConfig<Key=DefId>> QueryDescription for M {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_copy_raw<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_sized_raw<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_sized_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Sized`\", env.value)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_freeze_raw<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_freeze_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is freeze\", env.value)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::needs_drop_raw<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::needs_drop_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` needs drop\", env.value)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::layout_raw<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::layout_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing layout of `{}`\", env.value)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::super_predicates_of<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"computing the supertraits of `{}`\",\n                 tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::erase_regions_ty<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n     fn describe(_tcx: TyCtxt, ty: Ty<'tcx>) -> String {\n         format!(\"erasing regions from `{:?}`\", ty)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::type_param_predicates<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::type_param_predicates<'tcx> {\n     fn describe(tcx: TyCtxt, (_, def_id): (DefId, DefId)) -> String {\n         let id = tcx.hir.as_local_node_id(def_id).unwrap();\n         format!(\"computing the bounds for type parameter `{}`\",\n                 tcx.hir.ty_param_name(id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::coherent_trait<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::coherent_trait<'tcx> {\n     fn describe(tcx: TyCtxt, (_, def_id): (CrateNum, DefId)) -> String {\n         format!(\"coherence checking all impls of trait `{}`\",\n                 tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::crate_inherent_impls<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls<'tcx> {\n     fn describe(_: TyCtxt, k: CrateNum) -> String {\n         format!(\"all inherent impls defined in crate `{:?}`\", k)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::crate_inherent_impls_overlap_check<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::crate_inherent_impls_overlap_check<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         format!(\"check for overlap between inherent impls defined in this crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::crate_variances<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::crate_variances<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"computing the variances for items in this crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::mir_shims<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::mir_shims<'tcx> {\n     fn describe(tcx: TyCtxt, def: ty::InstanceDef<'tcx>) -> String {\n         format!(\"generating MIR shim for `{}`\",\n                 tcx.item_path_str(def.def_id()))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::privacy_access_levels<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::privacy_access_levels<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         format!(\"privacy access levels\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::typeck_item_bodies<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::typeck_item_bodies<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         format!(\"type-checking all item bodies\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::reachable_set<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::reachable_set<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         format!(\"reachability\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::const_eval<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n     fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>) -> String {\n         format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.0))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::mir_keys<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         format!(\"getting a list of all mir_keys\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::symbol_name<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     fn describe(_tcx: TyCtxt, instance: ty::Instance<'tcx>) -> String {\n         format!(\"computing the symbol for `{}`\", instance)\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::describe_def<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::describe_def<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"describe_def\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::def_span<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::def_span<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"def_span\")\n     }\n }\n \n \n-impl<'tcx> QueryDescription for queries::lookup_stability<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::lookup_stability<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"stability\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::lookup_deprecation_entry<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::lookup_deprecation_entry<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"deprecation\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::item_attrs<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::item_attrs<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"item_attrs\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_exported_symbol<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_exported_symbol<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"is_exported_symbol\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::fn_arg_names<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::fn_arg_names<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"fn_arg_names\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::impl_parent<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::impl_parent<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"impl_parent\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::trait_of_item<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::trait_of_item<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         bug!(\"trait_of_item\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::item_body_nested_bodies<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::item_body_nested_bodies<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"nested item bodies of `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::const_is_rvalue_promotable_to_static<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::const_is_rvalue_promotable_to_static<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"const checking if rvalue is promotable to static `{}`\",\n             tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::rvalue_promotable_map<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::rvalue_promotable_map<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"checking which parts of `{}` are promotable to static\",\n                 tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_mir_available<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_mir_available<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"checking if item is mir available: `{}`\",\n             tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::trans_fulfill_obligation<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::trans_fulfill_obligation<'tcx> {\n     fn describe(tcx: TyCtxt, key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> String {\n         format!(\"checking if `{}` fulfills its obligations\", tcx.item_path_str(key.1.def_id()))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::trait_impls_of<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::trait_impls_of<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"trait impls of `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_object_safe<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_object_safe<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"determine object safety of trait `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_const_fn<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_const_fn<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"checking if item is const fn: `{}`\", tcx.item_path_str(def_id))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::dylib_dependency_formats<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::dylib_dependency_formats<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"dylib dependency formats of crate\".to_string()\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_panic_runtime<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_panic_runtime<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"checking if the crate is_panic_runtime\".to_string()\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_compiler_builtins<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_compiler_builtins<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"checking if the crate is_compiler_builtins\".to_string()\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::has_global_allocator<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::has_global_allocator<'tcx> {\n     fn describe(_: TyCtxt, _: CrateNum) -> String {\n         \"checking if the crate has_global_allocator\".to_string()\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::extern_crate<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::extern_crate<'tcx> {\n     fn describe(_: TyCtxt, _: DefId) -> String {\n         \"getting crate's ExternCrateData\".to_string()\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::lint_levels<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::lint_levels<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"computing the lint levels for items in this crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::specializes<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::specializes<'tcx> {\n     fn describe(_tcx: TyCtxt, _: (DefId, DefId)) -> String {\n         format!(\"computing whether impls specialize one another\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::in_scope_traits_map<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::in_scope_traits_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n         format!(\"traits in scope at a block\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_no_builtins<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_no_builtins<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"test whether a crate has #![no_builtins]\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::panic_strategy<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::panic_strategy<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"query a crate's configured panic strategy\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_profiler_runtime<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_profiler_runtime<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"query a crate is #![profiler_runtime]\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_sanitizer_runtime<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_sanitizer_runtime<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"query a crate is #![sanitizer_runtime]\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::exported_symbol_ids<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::exported_symbol_ids<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the exported symbols of a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::native_libraries<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the native libraries of a linked crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::plugin_registrar_fn<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the plugin registrar for a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::derive_registrar_fn<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::derive_registrar_fn<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the derive registrar for a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::crate_disambiguator<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::crate_disambiguator<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the disambiguator a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::crate_hash<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::crate_hash<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the hash a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::original_crate_name<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::original_crate_name<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up the original name a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::implementations_of_trait<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::implementations_of_trait<'tcx> {\n     fn describe(_tcx: TyCtxt, _: (CrateNum, DefId)) -> String {\n         format!(\"looking up implementations of a trait in a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::all_trait_implementations<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::all_trait_implementations<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up all (?) trait implementations\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::link_args<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::link_args<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up link arguments for a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::named_region_map<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::named_region_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n         format!(\"looking up a named region\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_late_bound_map<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::is_late_bound_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n         format!(\"testing if a region is late boudn\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::object_lifetime_defaults_map<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::object_lifetime_defaults_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: DefIndex) -> String {\n         format!(\"looking up lifetime defaults for a region\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::dep_kind<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::dep_kind<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"fetching what a dependency looks like\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::crate_name<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::crate_name<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"fetching what a crate is named\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::get_lang_items<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::get_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"calculating the lang items map\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::defined_lang_items<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::defined_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"calculating the lang items defined in a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::missing_lang_items<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::missing_lang_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"calculating the missing lang items in a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::visible_parent_map<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::visible_parent_map<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"calculating the visible parent map\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::missing_extern_crate_item<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::missing_extern_crate_item<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"seeing if we're missing an `extern crate` item for this crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::used_crate_source<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::used_crate_source<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking at the source for a crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::postorder_cnums<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::postorder_cnums<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"generating a postorder list of CrateNums\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::maybe_unused_extern_crates<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::maybe_unused_extern_crates<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"looking up all possibly unused extern crates\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::stability_index<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::stability_index<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"calculating the stability index for the local crate\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::all_crate_nums<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::all_crate_nums<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"fetching all foreign CrateNum instances\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::exported_symbols<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::exported_symbols<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"exported_symbols\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::collect_and_partition_translation_items<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::collect_and_partition_translation_items<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"collect_and_partition_translation_items\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::codegen_unit<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::codegen_unit<'tcx> {\n     fn describe(_tcx: TyCtxt, _: InternedString) -> String {\n         format!(\"codegen_unit\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::compile_codegen_unit<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::compile_codegen_unit<'tcx> {\n     fn describe(_tcx: TyCtxt, _: InternedString) -> String {\n         format!(\"compile_codegen_unit\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::output_filenames<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::output_filenames<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"output_filenames\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::has_clone_closures<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::has_clone_closures<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"seeing if the crate has enabled `Clone` closures\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::vtable_methods<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::vtable_methods<'tcx> {\n     fn describe(tcx: TyCtxt, key: ty::PolyTraitRef<'tcx> ) -> String {\n         format!(\"finding all methods for trait {}\", tcx.item_path_str(key.def_id()))\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::has_copy_closures<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::has_copy_closures<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"seeing if the crate has enabled `Copy` closures\")\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::fully_normalize_monormophic_ty<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::fully_normalize_monormophic_ty<'tcx> {\n     fn describe(_tcx: TyCtxt, _: Ty) -> String {\n         format!(\"normalizing types\")\n     }"}, {"sha": "1096d306a130ea78ea6b25da85975687454b55d3", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b1438307e9357904ecb5603023414e554dbeb26/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1438307e9357904ecb5603023414e554dbeb26/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=0b1438307e9357904ecb5603023414e554dbeb26", "patch": "@@ -25,8 +25,8 @@ use std::marker::PhantomData;\n use std::mem;\n use syntax_pos::Span;\n \n-pub(super) struct QueryMap<D: QueryDescription> {\n-    phantom: PhantomData<D>,\n+pub(super) struct QueryMap<'tcx, D: QueryDescription<'tcx>> {\n+    phantom: PhantomData<(D, &'tcx ())>,\n     pub(super) map: FxHashMap<D::Key, QueryValue<D::Value>>,\n }\n \n@@ -46,8 +46,8 @@ impl<T> QueryValue<T> {\n     }\n }\n \n-impl<M: QueryDescription> QueryMap<M> {\n-    pub(super) fn new() -> QueryMap<M> {\n+impl<'tcx, M: QueryDescription<'tcx>> QueryMap<'tcx, M> {\n+    pub(super) fn new() -> QueryMap<'tcx, M> {\n         QueryMap {\n             phantom: PhantomData,\n             map: FxHashMap(),\n@@ -547,7 +547,7 @@ macro_rules! define_map_struct {\n         pub struct Maps<$tcx> {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             query_stack: RefCell<Vec<(Span, Query<$tcx>)>>,\n-            $($(#[$attr])*  $name: RefCell<QueryMap<queries::$name<$tcx>>>,)*\n+            $($(#[$attr])*  $name: RefCell<QueryMap<$tcx, queries::$name<$tcx>>>,)*\n         }\n     };\n }"}]}