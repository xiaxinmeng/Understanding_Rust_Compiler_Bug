{"sha": "fa6bf2afdb68e498a970662b43028ea567c5ab02", "node_id": "C_kwDOAAsO6NoAKGZhNmJmMmFmZGI2OGU0OThhOTcwNjYyYjQzMDI4ZWE1NjdjNWFiMDI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-02T19:20:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-02T19:48:49Z"}, "message": "Feed queries on impl side for RPITITs when using lower_impl_trait_in_trait_to_assoc_ty", "tree": {"sha": "afac6a4d0a1c505ddf4e08370ac258e903bdc0f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afac6a4d0a1c505ddf4e08370ac258e903bdc0f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6bf2afdb68e498a970662b43028ea567c5ab02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQA/aEACgkQgTGiTgx5\n76+9uQ/9FRXKbeVeaT/syT2KunajqIw3y+4OZ/WsCDDGX7MkEE0B44Wcn5UUE0OV\nH7MmPgLTbYqb3T6hVaNS0iRkRUqbvlRGFbPFFtb82Egr8nRI5tJs1pDXVzHhJsOy\nZdBX+8yVfxel4CmsAqqILpa6ZAhClNV3EPh+AvwxVW8m4k21ylX1N0Zb/ni82qmt\nFgtLGZysB9L7WFpiEYOA0W7BGjBldryoB5upt+RBE26PlYPZC2itOWBeEjGtr5Z0\ny9v9+is85V7X/0R7Mxeu1N2+WqVKoluQy9MFdxOVtPMT/RNmWma5F105SSOM4tGO\nbvsane1okOvabLqmTr9VtIg9PfObYp47VncUNGUcPOKN/PnohMioHssHQBC5b/ss\nvIwHSgqCDZDRhr02Y3uyhIrMe7wmD9MMgye/DjkhuFtjk5Y5xsUqPPQhmcvq5IMp\ngNLybfSdyBrq7rMj2gAOytyCG19V8q/CfAG7auy8e5KdXgnkqmLY6k4boJ95vNTn\n9/SAE06bhz6e2lKPfkiLApecyqzhNEddDDJTnIACktP4FtoEEVOTIzCw7PWeqPak\nyKGECiVKo51ojrZnWC9C7oyzw5GRgi2YVXF0URKRmg3ODIBMrPaZG05JJIb5Ibsj\n0A+9BaEcIGhGkc+qvbkRbpfurRAE56lzcPBcvxJqHOM1N9uiJKQ=\n=BIZl\n-----END PGP SIGNATURE-----", "payload": "tree afac6a4d0a1c505ddf4e08370ac258e903bdc0f7\nparent 12b81a57348e0318f5ca71e697c4a2ecbb524579\nauthor Santiago Pastorino <spastorino@gmail.com> 1677784848 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1677786529 -0300\n\nFeed queries on impl side for RPITITs when using lower_impl_trait_in_trait_to_assoc_ty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6bf2afdb68e498a970662b43028ea567c5ab02", "html_url": "https://github.com/rust-lang/rust/commit/fa6bf2afdb68e498a970662b43028ea567c5ab02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6bf2afdb68e498a970662b43028ea567c5ab02/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b81a57348e0318f5ca71e697c4a2ecbb524579", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b81a57348e0318f5ca71e697c4a2ecbb524579", "html_url": "https://github.com/rust-lang/rust/commit/12b81a57348e0318f5ca71e697c4a2ecbb524579"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "0648784b265709d4eb8cd41b5102c7e0da6c44ce", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fa6bf2afdb68e498a970662b43028ea567c5ab02/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6bf2afdb68e498a970662b43028ea567c5ab02/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=fa6bf2afdb68e498a970662b43028ea567c5ab02", "patch": "@@ -53,9 +53,37 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n                 )\n             }\n         }\n-        hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n-            impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n-        ),\n+        hir::ItemKind::Impl(ref impl_) => {\n+            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+                // We collect RPITITs for each trait method's return type, on the impl side too and\n+                // create a corresponding associated item using\n+                // associated_items_for_impl_trait_in_trait query.\n+                tcx.arena.alloc_from_iter(\n+                    impl_\n+                        .items\n+                        .iter()\n+                        .map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id())\n+                        .chain(impl_.of_trait.iter().flat_map(|_| {\n+                            impl_\n+                                .items\n+                                .iter()\n+                                .filter(|impl_item_ref| {\n+                                    matches!(impl_item_ref.kind, hir::AssocItemKind::Fn { .. })\n+                                })\n+                                .flat_map(|impl_item_ref| {\n+                                    let impl_fn_def_id =\n+                                        impl_item_ref.id.owner_id.def_id.to_def_id();\n+                                    tcx.associated_items_for_impl_trait_in_trait(impl_fn_def_id)\n+                                })\n+                                .map(|def_id| *def_id)\n+                        })),\n+                )\n+            } else {\n+                tcx.arena.alloc_from_iter(\n+                    impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n+                )\n+            }\n+        }\n         _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\"),\n     }\n }\n@@ -290,8 +318,40 @@ fn impl_associated_item_for_impl_trait_in_trait(\n ) -> LocalDefId {\n     let impl_def_id = tcx.local_parent(impl_fn_def_id);\n \n-    let span = tcx.def_span(trait_assoc_def_id);\n+    // FIXME fix the span, we probably want the def_id of the return type of the function\n+    let span = tcx.def_span(impl_fn_def_id);\n     let impl_assoc_ty = tcx.at(span).create_def(impl_def_id, DefPathData::ImplTraitAssocTy);\n \n-    impl_assoc_ty.def_id()\n+    let local_def_id = impl_assoc_ty.def_id();\n+    let def_id = local_def_id.to_def_id();\n+\n+    impl_assoc_ty.opt_def_kind(Some(DefKind::AssocTy));\n+\n+    // There's no HIR associated with this new synthesized `def_id`, so feed\n+    // `opt_local_def_id_to_hir_id` with `None`.\n+    impl_assoc_ty.opt_local_def_id_to_hir_id(None);\n+\n+    // Add the def_id of the function that generated this synthesized associated type.\n+    impl_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Impl {\n+        fn_def_id: impl_fn_def_id.to_def_id(),\n+    }));\n+\n+    impl_assoc_ty.associated_item(ty::AssocItem {\n+        name: kw::Empty,\n+        kind: ty::AssocKind::Type,\n+        def_id,\n+        trait_item_def_id: Some(trait_assoc_def_id.to_def_id()),\n+        container: ty::ImplContainer,\n+        fn_has_self_parameter: false,\n+    });\n+\n+    // Copy impl_defaultness of the containing function.\n+    impl_assoc_ty.impl_defaultness(tcx.impl_defaultness(impl_fn_def_id));\n+\n+    // Copy generics_of the trait's associated item.\n+    // FIXME: This is not correct, in particular the parent is going to be wrong. So we would need\n+    // to copy from trait_assoc_def_id and adjust things.\n+    impl_assoc_ty.generics_of(tcx.generics_of(trait_assoc_def_id).clone());\n+\n+    local_def_id\n }"}]}