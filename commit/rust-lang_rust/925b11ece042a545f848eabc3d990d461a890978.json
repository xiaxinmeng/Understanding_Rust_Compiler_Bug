{"sha": "925b11ece042a545f848eabc3d990d461a890978", "node_id": "C_kwDOAAsO6NoAKDkyNWIxMWVjZTA0MmE1NDVmODQ4ZWFiYzNkOTkwZDQ2MWE4OTA5Nzg", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-24T18:36:16Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:13:19Z"}, "message": "fix lifetime error", "tree": {"sha": "500d062072f617cd4c43ee1628ff354019152138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/500d062072f617cd4c43ee1628ff354019152138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/925b11ece042a545f848eabc3d990d461a890978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/925b11ece042a545f848eabc3d990d461a890978", "html_url": "https://github.com/rust-lang/rust/commit/925b11ece042a545f848eabc3d990d461a890978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/925b11ece042a545f848eabc3d990d461a890978/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbb49150ace414bf0b10476de83fb5c2c4b6630", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbb49150ace414bf0b10476de83fb5c2c4b6630", "html_url": "https://github.com/rust-lang/rust/commit/9bbb49150ace414bf0b10476de83fb5c2c4b6630"}], "stats": {"total": 32, "additions": 3, "deletions": 29}, "files": [{"sha": "ec3c3a972503dd67431edaa40b3dd7e6217ac663", "filename": "src/context.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/925b11ece042a545f848eabc3d990d461a890978/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925b11ece042a545f848eabc3d990d461a890978/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=925b11ece042a545f848eabc3d990d461a890978", "patch": "@@ -19,7 +19,6 @@ use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDat\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n use crate::callee::get_fn;\n-use crate::errors::LayoutSizeOverflow;\n \n #[derive(Clone)]\n pub struct FuncSig<'gcc> {\n@@ -299,7 +298,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         self.is_native_int_type(typ) || self.is_non_native_int_type(typ) || typ.is_compatible_with(self.bool_type)\n     }\n \n-    pub fn sess(&self) -> &Session {\n+    pub fn sess(&self) -> &'tcx Session {\n         &self.tcx.sess\n     }\n \n@@ -493,24 +492,7 @@ impl<'gcc, 'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n     #[inline]\n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n         if let LayoutError::SizeOverflow(_) = err {\n-            let _ = respan(span, err);\n-            //             error: lifetime may not live long enough\n-            //    --> src/context.rs:483:13\n-            //     |\n-            // 475 | impl<'gcc, 'tcx> LayoutOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n-            //     |      ----  ---- lifetime `'tcx` defined here\n-            //     |      |\n-            //     |      lifetime `'gcc` defined here\n-            // ...\n-            // 483 |             self.sess().emit_fatal(respan(span, err))\n-            //     |             ^^^^^^^^^^^ argument requires that `'gcc` must outlive `'tcx`\n-            //     |\n-            //     = help: consider adding the following bound: `'gcc: 'tcx`\n-            //     = note: requirement occurs because of the type `CodegenCx<'_, '_>`, which makes the generic argument `'_` invariant\n-            //     = note: the struct `CodegenCx<'gcc, 'tcx>` is invariant over the parameter `'gcc`\n-            //     = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-            // self.sess().emit_fatal(respan(span, err))\n-            self.sess().emit_fatal(LayoutSizeOverflow { span, error: err.to_string() })\n+            self.sess().emit_fatal(respan(span, err))\n         } else {\n             span_bug!(span, \"failed to get layout for `{}`: {}\", ty, err)\n         }\n@@ -528,7 +510,7 @@ impl<'gcc, 'tcx> FnAbiOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n-            self.sess().emit_fatal(LayoutSizeOverflow { span, error: err.to_string() })\n+            self.sess().emit_fatal(respan(span, err))\n         } else {\n             match fn_abi_request {\n                 FnAbiRequest::OfFnPtr { sig, extra_args } => {"}, {"sha": "eb8528104fac316913c4e097b9fea736eb3f7b5f", "filename": "src/errors.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/925b11ece042a545f848eabc3d990d461a890978/src%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/925b11ece042a545f848eabc3d990d461a890978/src%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferrors.rs?ref=925b11ece042a545f848eabc3d990d461a890978", "patch": "@@ -225,14 +225,6 @@ pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     pub in_elem: Ty<'a>,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_gcc::layout_size_overflow)]\n-pub(crate) struct LayoutSizeOverflow {\n-    #[primary_span]\n-    pub span: Span,\n-    pub error: String,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(codegen_gcc::linkage_const_or_mut_type)]\n pub(crate) struct LinkageConstOrMutType {"}]}