{"sha": "57bb618fd3f11d9ac817f76a965316723aa69ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YmI2MThmZDNmMTFkOWFjODE3Zjc2YTk2NTMxNjcyM2FhNjllZTk=", "commit": {"author": {"name": "Sergey Parilin", "email": "Sergey.Parilin@fxdd.com", "date": "2019-05-08T15:35:32Z"}, "committer": {"name": "Sergey Parilin", "email": "Sergey.Parilin@fxdd.com", "date": "2019-05-13T12:19:57Z"}, "message": "Implemented T! macro for syntax kinds", "tree": {"sha": "d754b59aec2e1f80849b518ce6565839108f63dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d754b59aec2e1f80849b518ce6565839108f63dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57bb618fd3f11d9ac817f76a965316723aa69ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57bb618fd3f11d9ac817f76a965316723aa69ee9", "html_url": "https://github.com/rust-lang/rust/commit/57bb618fd3f11d9ac817f76a965316723aa69ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57bb618fd3f11d9ac817f76a965316723aa69ee9/comments", "author": null, "committer": null, "parents": [{"sha": "ef782adc293deb287128f005dbab2038ba3ccdc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef782adc293deb287128f005dbab2038ba3ccdc1", "html_url": "https://github.com/rust-lang/rust/commit/ef782adc293deb287128f005dbab2038ba3ccdc1"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "163fa8c3c7960df240e8a61709f78fb186d466f1", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=57bb618fd3f11d9ac817f76a965316723aa69ee9", "patch": "@@ -4,6 +4,7 @@ use ra_syntax::{\n     algo::{find_covering_element, find_token_at_offset, TokenAtOffset},\n     SyntaxKind::*, SyntaxToken,\n     ast::{self, AstNode, AstToken},\n+    T\n };\n \n use crate::{FileRange, db::RootDatabase};\n@@ -135,7 +136,7 @@ fn pick_best<'a>(l: SyntaxToken<'a>, r: SyntaxToken<'a>) -> SyntaxToken<'a> {\n     fn priority(n: SyntaxToken) -> usize {\n         match n.kind() {\n             WHITESPACE => 0,\n-            IDENT | SELF_KW | SUPER_KW | CRATE_KW | LIFETIME => 2,\n+            IDENT | T![self] | T![super] | T![crate] | LIFETIME => 2,\n             _ => 1,\n         }\n     }"}, {"sha": "697d1b79498f84094c59bcd4e8c3cd3e096a2e2b", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=57bb618fd3f11d9ac817f76a965316723aa69ee9", "patch": "@@ -14,6 +14,7 @@\n \n #[macro_use]\n mod token_set;\n+#[macro_use]\n mod syntax_kind;\n mod event;\n mod parser;"}, {"sha": "00faa7799245a32400e2a2b105478823156d8e71", "filename": "crates/ra_parser/src/syntax_kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs?ref=57bb618fd3f11d9ac817f76a965316723aa69ee9", "patch": "@@ -1,3 +1,4 @@\n+#[macro_use]\n mod generated;\n \n use std::fmt;"}, {"sha": "1a08cc6eb12f41c0b456845271373ed8c52f86c6", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=57bb618fd3f11d9ac817f76a965316723aa69ee9", "patch": "@@ -241,6 +241,101 @@ pub enum SyntaxKind {\n }\n use self::SyntaxKind::*;\n \n+#[macro_export]\n+macro_rules! T {\n+    (;) => { $crate::SyntaxKind::SEMI };\n+    (,) => { $crate::SyntaxKind::COMMA };\n+    (() => { $crate::SyntaxKind::L_PAREN };\n+    ()) => { $crate::SyntaxKind::R_PAREN };\n+    ('{') => { $crate::SyntaxKind::L_CURLY };\n+    ('}') => { $crate::SyntaxKind::R_CURLY };\n+    ('[') => { $crate::SyntaxKind::L_BRACK };\n+    (']') => { $crate::SyntaxKind::R_BRACK };\n+    (<) => { $crate::SyntaxKind::L_ANGLE };\n+    (>) => { $crate::SyntaxKind::R_ANGLE };\n+    (@) => { $crate::SyntaxKind::AT };\n+    (#) => { $crate::SyntaxKind::POUND };\n+    (~) => { $crate::SyntaxKind::TILDE };\n+    (?) => { $crate::SyntaxKind::QUESTION };\n+    ($) => { $crate::SyntaxKind::DOLLAR };\n+    (&) => { $crate::SyntaxKind::AMP };\n+    (|) => { $crate::SyntaxKind::PIPE };\n+    (+) => { $crate::SyntaxKind::PLUS };\n+    (*) => { $crate::SyntaxKind::STAR };\n+    (/) => { $crate::SyntaxKind::SLASH };\n+    (^) => { $crate::SyntaxKind::CARET };\n+    (%) => { $crate::SyntaxKind::PERCENT };\n+    (_) => { $crate::SyntaxKind::UNDERSCORE };\n+    (.) => { $crate::SyntaxKind::DOT };\n+    (..) => { $crate::SyntaxKind::DOTDOT };\n+    (...) => { $crate::SyntaxKind::DOTDOTDOT };\n+    (..=) => { $crate::SyntaxKind::DOTDOTEQ };\n+    (:) => { $crate::SyntaxKind::COLON };\n+    (::) => { $crate::SyntaxKind::COLONCOLON };\n+    (=) => { $crate::SyntaxKind::EQ };\n+    (==) => { $crate::SyntaxKind::EQEQ };\n+    (=>) => { $crate::SyntaxKind::FAT_ARROW };\n+    (!) => { $crate::SyntaxKind::EXCL };\n+    (!=) => { $crate::SyntaxKind::NEQ };\n+    (-) => { $crate::SyntaxKind::MINUS };\n+    (->) => { $crate::SyntaxKind::THIN_ARROW };\n+    (<=) => { $crate::SyntaxKind::LTEQ };\n+    (>=) => { $crate::SyntaxKind::GTEQ };\n+    (+=) => { $crate::SyntaxKind::PLUSEQ };\n+    (-=) => { $crate::SyntaxKind::MINUSEQ };\n+    (|=) => { $crate::SyntaxKind::PIPEEQ };\n+    (&=) => { $crate::SyntaxKind::AMPEQ };\n+    (^=) => { $crate::SyntaxKind::CARETEQ };\n+    (/=) => { $crate::SyntaxKind::SLASHEQ };\n+    (*=) => { $crate::SyntaxKind::STAREQ };\n+    (%=) => { $crate::SyntaxKind::PERCENTEQ };\n+    (&&) => { $crate::SyntaxKind::AMPAMP };\n+    (||) => { $crate::SyntaxKind::PIPEPIPE };\n+    (<<) => { $crate::SyntaxKind::SHL };\n+    (>>) => { $crate::SyntaxKind::SHR };\n+    (<<=) => { $crate::SyntaxKind::SHLEQ };\n+    (>>=) => { $crate::SyntaxKind::SHREQ };\n+    (async) => { $crate::SyntaxKind::ASYNC_KW };\n+    (use) => { $crate::SyntaxKind::USE_KW };\n+    (fn) => { $crate::SyntaxKind::FN_KW };\n+    (struct) => { $crate::SyntaxKind::STRUCT_KW };\n+    (enum) => { $crate::SyntaxKind::ENUM_KW };\n+    (trait) => { $crate::SyntaxKind::TRAIT_KW };\n+    (impl) => { $crate::SyntaxKind::IMPL_KW };\n+    (dyn) => { $crate::SyntaxKind::DYN_KW };\n+    (true) => { $crate::SyntaxKind::TRUE_KW };\n+    (false) => { $crate::SyntaxKind::FALSE_KW };\n+    (as) => { $crate::SyntaxKind::AS_KW };\n+    (extern) => { $crate::SyntaxKind::EXTERN_KW };\n+    (crate) => { $crate::SyntaxKind::CRATE_KW };\n+    (mod) => { $crate::SyntaxKind::MOD_KW };\n+    (pub) => { $crate::SyntaxKind::PUB_KW };\n+    (self) => { $crate::SyntaxKind::SELF_KW };\n+    (super) => { $crate::SyntaxKind::SUPER_KW };\n+    (in) => { $crate::SyntaxKind::IN_KW };\n+    (where) => { $crate::SyntaxKind::WHERE_KW };\n+    (for) => { $crate::SyntaxKind::FOR_KW };\n+    (loop) => { $crate::SyntaxKind::LOOP_KW };\n+    (while) => { $crate::SyntaxKind::WHILE_KW };\n+    (continue) => { $crate::SyntaxKind::CONTINUE_KW };\n+    (break) => { $crate::SyntaxKind::BREAK_KW };\n+    (if) => { $crate::SyntaxKind::IF_KW };\n+    (else) => { $crate::SyntaxKind::ELSE_KW };\n+    (match) => { $crate::SyntaxKind::MATCH_KW };\n+    (const) => { $crate::SyntaxKind::CONST_KW };\n+    (static) => { $crate::SyntaxKind::STATIC_KW };\n+    (mut) => { $crate::SyntaxKind::MUT_KW };\n+    (unsafe) => { $crate::SyntaxKind::UNSAFE_KW };\n+    (type) => { $crate::SyntaxKind::TYPE_KW };\n+    (ref) => { $crate::SyntaxKind::REF_KW };\n+    (let) => { $crate::SyntaxKind::LET_KW };\n+    (move) => { $crate::SyntaxKind::MOVE_KW };\n+    (return) => { $crate::SyntaxKind::RETURN_KW };\n+    (auto) => { $crate::SyntaxKind::AUTO_KW };\n+    (default) => { $crate::SyntaxKind::DEFAULT_KW };\n+    (union) => { $crate::SyntaxKind::UNION_KW };\n+}\n+\n impl From<u16> for SyntaxKind {\n     fn from(d: u16) -> SyntaxKind {\n         assert!(d <= (__LAST as u16));"}, {"sha": "ccb8ca4bae3d65250a371f9c9fcded4f1feb2584", "filename": "crates/ra_parser/src/syntax_kind/generated.rs.tera", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera?ref=57bb618fd3f11d9ac817f76a965316723aa69ee9", "patch": "@@ -33,6 +33,20 @@ pub enum SyntaxKind {\n }\n use self::SyntaxKind::*;\n \n+#[macro_export]\n+macro_rules! T {\n+{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n+    {%- if t.0 == '{' or t.0 == '}' or t.0 == '[' or t.0 == ']' %}\n+    ('{{t.0}}') => { $crate::SyntaxKind::{{t.1}} };\n+    {%- else %}\n+    ({{t.0}}) => { $crate::SyntaxKind::{{t.1}} };\n+    {%- endif %}\n+{%- endfor -%}\n+{% for kw in concat(a=keywords, b=contextual_keywords) %}\n+    ({{kw}}) => { $crate::SyntaxKind::{{kw | upper}}_KW };\n+{%- endfor %}\n+}\n+\n impl From<u16> for SyntaxKind {\n     fn from(d: u16) -> SyntaxKind {\n         assert!(d <= (__LAST as u16));"}, {"sha": "4f51654524e262a2c76e1db7f0f9646bafc4fc75", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57bb618fd3f11d9ac817f76a965316723aa69ee9/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=57bb618fd3f11d9ac817f76a965316723aa69ee9", "patch": "@@ -34,6 +34,7 @@ pub mod fuzz;\n \n pub use rowan::{SmolStr, TextRange, TextUnit};\n pub use ra_parser::SyntaxKind;\n+pub use ra_parser::T;\n pub use crate::{\n     ast::AstNode,\n     syntax_error::{SyntaxError, SyntaxErrorKind, Location},"}]}