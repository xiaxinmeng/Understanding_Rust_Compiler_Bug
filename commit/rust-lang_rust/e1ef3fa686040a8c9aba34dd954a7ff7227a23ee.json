{"sha": "e1ef3fa686040a8c9aba34dd954a7ff7227a23ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZWYzZmE2ODYwNDBhOGM5YWJhMzRkZDk1NGE3ZmY3MjI3YTIzZWU=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-04T15:46:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-04T15:46:14Z"}, "message": "Consistent variable name alloc for raw_vec", "tree": {"sha": "f91d78a9ce09696c2e3e4a3af94f7cfa0f1d3656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91d78a9ce09696c2e3e4a3af94f7cfa0f1d3656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ef3fa686040a8c9aba34dd954a7ff7227a23ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKYLHCRBK7hj4Ov3rIwAAdHIIAFaOpPY4G/az01bv5NCOB6e8\nalQZUhTzw+vXZIYke1+MdVn4Sii145tXUm8LPwHRQoL0CDPWpY9wc5VSo2HC3t6Z\nz9fxZ37t+e0ajHK72vczdxzIL/QDxDlX6Ro9UOM6gmMKx5nIGHAVS8wY6l2mJNjO\nG/0UMzrIZk6Ka8w1cbWhhGGlxqFjcAKx5EDeETQZATNOmaxE+VqAIu2mZYGtL3uC\ntK3JIAoufR7rEdUgxClpPIcXIsiMNtbT3Fy1SY6Zfm/abz1VMBQFxQA9Te7Vfaov\ny1adtZmUjMuNDvl/PKSvkJQbE4VQPNv19GQFARqa0msHWMMOSia28fCPd7JIqyI=\n=p4Em\n-----END PGP SIGNATURE-----\n", "payload": "tree f91d78a9ce09696c2e3e4a3af94f7cfa0f1d3656\nparent 5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11\nauthor Ivan Tham <pickfire@riseup.net> 1596555974 +0800\ncommitter GitHub <noreply@github.com> 1596555974 +0800\n\nConsistent variable name alloc for raw_vec"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ef3fa686040a8c9aba34dd954a7ff7227a23ee", "html_url": "https://github.com/rust-lang/rust/commit/e1ef3fa686040a8c9aba34dd954a7ff7227a23ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ef3fa686040a8c9aba34dd954a7ff7227a23ee/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11", "html_url": "https://github.com/rust-lang/rust/commit/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "f403035ec406e027637174cdd1e861175914b1e4", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1ef3fa686040a8c9aba34dd954a7ff7227a23ee/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ef3fa686040a8c9aba34dd954a7ff7227a23ee/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=e1ef3fa686040a8c9aba34dd954a7ff7227a23ee", "patch": "@@ -203,13 +203,15 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     ///\n     /// # Safety\n     ///\n-    /// The `ptr` must be allocated (via the given allocator `a`), and with the given `capacity`.\n+    /// The `ptr` must be allocated (via the given allocator `alloc`), and with the given\n+    /// `capacity`.\n     /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit\n     /// systems). ZST vectors may have a capacity up to `usize::MAX`.\n-    /// If the `ptr` and `capacity` come from a `RawVec` created via `a`, then this is guaranteed.\n+    /// If the `ptr` and `capacity` come from a `RawVec` created via `alloc`, then this is\n+    /// guaranteed.\n     #[inline]\n-    pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, a: A) -> Self {\n-        Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc: a }\n+    pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {\n+        Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc }\n     }\n \n     /// Gets a raw pointer to the start of the allocation. Note that this is"}]}