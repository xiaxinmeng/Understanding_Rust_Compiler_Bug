{"sha": "6015edf9af375385ca9eb2ebbb8794c782fa7244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMTVlZGY5YWYzNzUzODVjYTllYjJlYmJiODc5NGM3ODJmYTcyNDQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-30T15:49:39Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:08Z"}, "message": "Remove name from GenericParamKind::Lifetime", "tree": {"sha": "e07b5a2233e2c32b950b84d3dd1547e62b983f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07b5a2233e2c32b950b84d3dd1547e62b983f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6015edf9af375385ca9eb2ebbb8794c782fa7244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6015edf9af375385ca9eb2ebbb8794c782fa7244", "html_url": "https://github.com/rust-lang/rust/commit/6015edf9af375385ca9eb2ebbb8794c782fa7244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6015edf9af375385ca9eb2ebbb8794c782fa7244/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e8e718807d1925769bdcdd055c6d8de05f20ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e8e718807d1925769bdcdd055c6d8de05f20ce", "html_url": "https://github.com/rust-lang/rust/commit/c4e8e718807d1925769bdcdd055c6d8de05f20ce"}], "stats": {"total": 89, "additions": 30, "deletions": 59}, "files": [{"sha": "5a41d71b93d1fd4b25dca04390f6356aaf1fcbcb", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -736,9 +736,7 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBou\n         TraitTyParamBound(ref typ, modifier) => {\n             visitor.visit_poly_trait_ref(typ, modifier);\n         }\n-        Outlives(ref lifetime) => {\n-            visitor.visit_lifetime(lifetime);\n-        }\n+        Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),\n     }\n }\n "}, {"sha": "ec162adf52bf97ce19a8df02317321dd485a4495", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -706,13 +706,8 @@ impl<'a> LoweringContext<'a> {\n                     kind: hir::GenericParamKind::Lifetime {\n                         lt_name: hir_name,\n                         in_band: true,\n-                        lifetime: hir::Lifetime {\n-                            id: def_node_id,\n-                            span,\n-                            name: hir_name,\n                         }\n                     }\n-                }\n             })\n             .chain(in_band_ty_params.into_iter())\n             .collect();\n@@ -1423,12 +1418,7 @@ impl<'a> LoweringContext<'a> {\n                         kind: hir::GenericParamKind::Lifetime {\n                             lt_name: name,\n                             in_band: false,\n-                            lifetime: hir::Lifetime {\n-                                id: def_node_id,\n-                                span: lifetime.span,\n-                                name,\n                             }\n-                        }\n                     });\n                 }\n             }\n@@ -1947,21 +1937,20 @@ impl<'a> LoweringContext<'a> {\n                            -> hir::GenericParam {\n         let mut bounds = self.lower_param_bounds(&param.bounds, itctx);\n         match param.kind {\n-            GenericParamKind::Lifetime { ref lifetime } => {\n+            GenericParamKind::Lifetime => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n \n-                let lifetime = self.lower_lifetime(lifetime);\n+                let lt = self.lower_lifetime(&Lifetime { id: param.id, ident: param.ident });\n                 let param = hir::GenericParam {\n-                    id: lifetime.id,\n-                    name: lifetime.name.name(),\n-                    span: lifetime.span,\n+                    id: lt.id,\n+                    name: lt.name.name(),\n+                    span: lt.span,\n                     pure_wrt_drop: attr::contains_name(&param.attrs, \"may_dangle\"),\n                     bounds,\n                     kind: hir::GenericParamKind::Lifetime {\n-                        lt_name: lifetime.name,\n+                        lt_name: lt.name,\n                         in_band: false,\n-                        lifetime,\n                     }\n                 };\n "}, {"sha": "cf0ae5aa94da544d2e988daeeaf85fe5945892c4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -454,8 +454,6 @@ pub enum GenericParamKind {\n         // as a result of an in-band lifetime usage like:\n         // `fn foo(x: &'a u8) -> &'a u8 { x }`\n         in_band: bool,\n-        // We keep a `Lifetime` around for now just so we can `visit_lifetime`.\n-        lifetime: Lifetime,\n     },\n     Type {\n         default: Option<P<Ty>>,"}, {"sha": "ae2bf1e4c742983fe663992dca15f7ae917d9f03", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -209,10 +209,9 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            hir::GenericParamKind::Lifetime { lt_name, in_band, ref lifetime } => {\n+            hir::GenericParamKind::Lifetime { lt_name, in_band } => {\n                 lt_name.hash_stable(hcx, hasher);\n                 in_band.hash_stable(hcx, hasher);\n-                lifetime.hash_stable(hcx, hasher);\n             }\n             hir::GenericParamKind::Type { ref default, synthetic, attrs } => {\n                 default.hash_stable(hcx, hasher);"}, {"sha": "98f786628f95b3e22ddaefc29f8a269c665b15fb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -301,9 +301,7 @@ pub type ParamBounds = Vec<ParamBound>;\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum GenericParamKind {\n     /// A lifetime definition, e.g. `'a: 'b+'c+'d`.\n-    Lifetime {\n-        lifetime: Lifetime,\n-    },\n+    Lifetime,\n     Type {\n         default: Option<P<Ty>>,\n     }"}, {"sha": "cc0bc7f0c745f54e9418184005fc75385d7a2aa5", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -484,9 +484,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             id: lifetime.id,\n             attrs: attrs.into(),\n             bounds,\n-            kind: ast::GenericParamKind::Lifetime {\n-                lifetime,\n-            }\n+            kind: ast::GenericParamKind::Lifetime,\n         }\n     }\n "}, {"sha": "b2cfb459c359a2e32313fd73d3182185f035ed34", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -4877,9 +4877,7 @@ impl<'a> Parser<'a> {\n                     id: lifetime.id,\n                     attrs: attrs.into(),\n                     bounds,\n-                    kind: ast::GenericParamKind::Lifetime {\n-                        lifetime,\n-                    }\n+                    kind: ast::GenericParamKind::Lifetime,\n                 });\n                 if seen_ty_param {\n                     self.span_err(self.prev_span,"}, {"sha": "5d39367f4b0d48f0580df6d24084f439aaae07a9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -308,8 +308,8 @@ pub fn expr_to_string(e: &ast::Expr) -> String {\n     to_string(|s| s.print_expr(e))\n }\n \n-pub fn lifetime_to_string(e: &ast::Lifetime) -> String {\n-    to_string(|s| s.print_lifetime(e))\n+pub fn lifetime_to_string(lt: &ast::Lifetime) -> String {\n+    to_string(|s| s.print_lifetime(*lt))\n }\n \n pub fn tt_to_string(tt: tokenstream::TokenTree) -> String {\n@@ -1008,18 +1008,17 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_opt_lifetime(&mut self,\n-                              lifetime: &Option<ast::Lifetime>) -> io::Result<()> {\n-        if let Some(l) = *lifetime {\n-            self.print_lifetime(&l)?;\n+    pub fn print_opt_lifetime(&mut self, lifetime: &Option<ast::Lifetime>) -> io::Result<()> {\n+        if let Some(lt) = *lifetime {\n+            self.print_lifetime(lt)?;\n             self.nbsp()?;\n         }\n         Ok(())\n     }\n \n     pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) -> io::Result<()> {\n         match generic_arg {\n-            GenericArg::Lifetime(lt) => self.print_lifetime(lt),\n+            GenericArg::Lifetime(lt) => self.print_lifetime(*lt),\n             GenericArg::Type(ty) => self.print_type(ty),\n         }\n     }\n@@ -2833,26 +2832,19 @@ impl<'a> State<'a> {\n                         }\n                         self.print_poly_trait_ref(tref)?;\n                     }\n-                    Outlives(lt) => {\n-                        self.print_lifetime(lt)?;\n-                    }\n+                    Outlives(lt) => self.print_lifetime(*lt)?,\n                 }\n             }\n         }\n         Ok(())\n     }\n \n-    pub fn print_lifetime(&mut self,\n-                          lifetime: &ast::Lifetime)\n-                          -> io::Result<()>\n-    {\n+    pub fn print_lifetime(&mut self, lifetime: ast::Lifetime) -> io::Result<()> {\n         self.print_name(lifetime.ident.name)\n     }\n \n-    pub fn print_lifetime_bounds(&mut self,\n-                                 lifetime: &ast::Lifetime,\n-                                 bounds: &ast::ParamBounds)\n-                                 -> io::Result<()>\n+    pub fn print_lifetime_bounds(&mut self, lifetime: ast::Lifetime, bounds: &ast::ParamBounds)\n+        -> io::Result<()>\n     {\n         self.print_lifetime(lifetime)?;\n         if !bounds.is_empty() {\n@@ -2862,7 +2854,7 @@ impl<'a> State<'a> {\n                     self.s.word(\" + \")?;\n                 }\n                 match bound {\n-                    ast::ParamBound::Outlives(lt) => self.print_lifetime(lt)?,\n+                    ast::ParamBound::Outlives(lt) => self.print_lifetime(*lt)?,\n                     _ => panic!(),\n                 }\n             }\n@@ -2882,9 +2874,10 @@ impl<'a> State<'a> {\n \n         self.commasep(Inconsistent, &generic_params, |s, param| {\n             match param.kind {\n-                ast::GenericParamKind::Lifetime { ref lifetime } => {\n+                ast::GenericParamKind::Lifetime => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n-                    s.print_lifetime_bounds(lifetime, &param.bounds)\n+                    let lt = ast::Lifetime { id: param.id, ident: param.ident };\n+                    s.print_lifetime_bounds(lt, &param.bounds)\n                 },\n                 ast::GenericParamKind::Type { ref default } => {\n                     s.print_outer_attributes_inline(&param.attrs)?;\n@@ -2934,7 +2927,7 @@ impl<'a> State<'a> {\n                 ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n                                                                                ref bounds,\n                                                                                ..}) => {\n-                    self.print_lifetime_bounds(lifetime, bounds)?;\n+                    self.print_lifetime_bounds(*lifetime, bounds)?;\n                 }\n                 ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref lhs_ty,\n                                                                        ref rhs_ty,"}, {"sha": "89b500441292d644a0872f2df9a52a62b9580fd4", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -665,8 +665,8 @@ impl<'a> TraitDef<'a> {\n         let trait_ref = cx.trait_ref(trait_path);\n \n         let self_params: Vec<_> = generics.params.iter().map(|param| match param.kind {\n-            GenericParamKind::Lifetime { ref lifetime, .. } => {\n-                GenericArg::Lifetime(*lifetime)\n+            GenericParamKind::Lifetime { .. } => {\n+                GenericArg::Lifetime(ast::Lifetime { id: param.id, ident: param.ident })\n             }\n             GenericParamKind::Type { .. } => {\n                 GenericArg::Type(cx.ty_ident(self.span, param.ident))"}, {"sha": "99b6398160e5f422c8fd2c22b50294139fe9388f", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6015edf9af375385ca9eb2ebbb8794c782fa7244/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=6015edf9af375385ca9eb2ebbb8794c782fa7244", "patch": "@@ -190,8 +190,8 @@ impl<'a> Ty<'a> {\n         match *self {\n             Self_ => {\n                 let params: Vec<_> = generics.params.iter().map(|param| match param.kind {\n-                    GenericParamKind::Lifetime { ref lifetime, .. } => {\n-                        GenericArg::Lifetime(*lifetime)\n+                    GenericParamKind::Lifetime { .. } => {\n+                        GenericArg::Lifetime(ast::Lifetime { id: param.id, ident: param.ident })\n                     }\n                     GenericParamKind::Type { .. } => {\n                         GenericArg::Type(cx.ty_ident(span, param.ident))"}]}