{"sha": "8c6d08b71f56541a540d365746aab460862d3149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNmQwOGI3MWY1NjU0MWE1NDBkMzY1NzQ2YWFiNDYwODYyZDMxNDk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-30T19:21:31Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-01T11:50:22Z"}, "message": "Add special cases for move from `Rc`/`Arc` errors.\n\nThis commit special cases the move out of borrowed content error,\npreviously:\n\n```\nerror[E0507]: cannot move out of borrowed content\n --> src/main.rs:7:10\n  |\n7 |     drop(x.field);\n  |          ^ cannot move out of borrowed content\n```\n\nto instead mention that it is a move out of a `Rc`/`Arc` which is more\nhelpful:\n\n```\nerror[E0507]: cannot move out of an `Rc`\n --> src/main.rs:7:10\n  |\n7 |     drop(x.field);\n  |          ^ cannot move out of an `Rc`\n```", "tree": {"sha": "e8222734e14ed4c4acd9441c0ad364e323d7bc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8222734e14ed4c4acd9441c0ad364e323d7bc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6d08b71f56541a540d365746aab460862d3149", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluyCf4ACgkQAXYLT59T\n8VRYvRAAhmArxsv9Xv/Cy8Iktv1ifCjjpfvTq1uRC3OKJuybq21AWliMKdwSk1Fy\nT6bnwCEVRlHZ+rO61dPshwxE9+kW4tpEfSOJ+v7jPuRWJVoRW22bDXxDfuqA5yta\nB6Kcuh5eY26v9GzuwX6bVFMGHIFugYdcwlzq9/U2ZRvPNwcdLU0+u/W4hop29Br9\nrtX7Bw9MyGJZOO7k9WpacDm7ZFqxgPdTHjbph+6SOSWdHkGMlnqPrmjdIBWRkxX0\nrUaFE2UAwSsZcw/UMIyKFpIEyZFU2Zrl9Komh57Pm46uX1rjsiGpK61veB0oQKi4\nRxY8GsfXvhyaklpHv0SvcXaBfQ6ZUMe8NXU8J+kjbUY/7SpVXZODQP9mDd/RsYR1\nqwWIt5lCtFZXVPqxutmnquq2s+6x39QEhX6E4df4g4dj9KjHYXNcyO0p3P7qT1Rw\n6/6FFLT3QV4+yitcI/nGAOC1XlPiyCjYGUsIHxyxHNBGGdY0eaTLW6bXvwxAd54U\noiO7IApr7UF5L4usxvrDcdaMgrX15sbHM14MdtCiW3twqBAhl1Y9wKPxL5MG/jq4\nEbDgU4zZY7lk63NgNvCiDsLCqZDzMC05gmUu2EFGxGrUD2XECsHCVN61yeHcmuXQ\n/dQByENYrJDqa72dyOulu3qkTgI5PhuZThlnyd15z+h09innFi8=\n=1imU\n-----END PGP SIGNATURE-----", "payload": "tree e8222734e14ed4c4acd9441c0ad364e323d7bc29\nparent da4a12038bac647b8d07211588c21f1ca07c12e3\nauthor David Wood <david@davidtw.co> 1538335291 +0200\ncommitter David Wood <david@davidtw.co> 1538394622 +0200\n\nAdd special cases for move from `Rc`/`Arc` errors.\n\nThis commit special cases the move out of borrowed content error,\npreviously:\n\n```\nerror[E0507]: cannot move out of borrowed content\n --> src/main.rs:7:10\n  |\n7 |     drop(x.field);\n  |          ^ cannot move out of borrowed content\n```\n\nto instead mention that it is a move out of a `Rc`/`Arc` which is more\nhelpful:\n\n```\nerror[E0507]: cannot move out of an `Rc`\n --> src/main.rs:7:10\n  |\n7 |     drop(x.field);\n  |          ^ cannot move out of an `Rc`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6d08b71f56541a540d365746aab460862d3149", "html_url": "https://github.com/rust-lang/rust/commit/8c6d08b71f56541a540d365746aab460862d3149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6d08b71f56541a540d365746aab460862d3149/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da4a12038bac647b8d07211588c21f1ca07c12e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/da4a12038bac647b8d07211588c21f1ca07c12e3", "html_url": "https://github.com/rust-lang/rust/commit/da4a12038bac647b8d07211588c21f1ca07c12e3"}], "stats": {"total": 183, "additions": 172, "deletions": 11}, "files": [{"sha": "693cfea3c95f0d4b3cbabdaa44d944abfb407c83", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 118, "deletions": 5, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -9,15 +9,19 @@\n // except according to those terms.\n \n use core::unicode::property::Pattern_White_Space;\n+use std::fmt::{self, Display};\n+\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n use borrow_check::prefixes::PrefixSet;\n-use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind};\n-use dataflow::move_paths::{LookupResult, MoveError, MovePathIndex};\n+use dataflow::move_paths::{\n+    IllegalMoveOrigin, IllegalMoveOriginKind, InitLocation,\n+    LookupResult, MoveError, MovePathIndex,\n+};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n \n // Often when desugaring a pattern match we may have many individual moves in\n@@ -61,6 +65,22 @@ enum GroupedMoveError<'tcx> {\n     },\n }\n \n+enum BorrowedContentSource {\n+    Arc,\n+    Rc,\n+    Other,\n+}\n+\n+impl Display for BorrowedContentSource {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            BorrowedContentSource::Arc => write!(f, \"an `Arc`\"),\n+            BorrowedContentSource::Rc => write!(f, \"an `Rc`\"),\n+            BorrowedContentSource::Other => write!(f, \"borrowed content\"),\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n     pub(crate) fn report_move_errors(&mut self, move_errors: Vec<(Place<'tcx>, MoveError<'tcx>)>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n@@ -305,9 +325,12 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n                                 diag\n                             }\n-                            _ => self.infcx.tcx.cannot_move_out_of(\n-                                span, \"borrowed content\", origin\n-                            ),\n+                            _ => {\n+                                let source = self.borrowed_content_source(place);\n+                                self.infcx.tcx.cannot_move_out_of(\n+                                    span, &format!(\"{}\", source), origin\n+                                )\n+                            },\n                         }\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n@@ -471,4 +494,94 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             );\n         }\n     }\n+\n+    fn borrowed_content_source(&self, place: &Place<'tcx>) -> BorrowedContentSource {\n+        // Look up the provided place and work out the move path index for it,\n+        // we'll use this to work back through where this value came from and check whether it\n+        // was originally part of an `Rc` or `Arc`.\n+        let initial_mpi = match self.move_data.rev_lookup.find(place) {\n+            LookupResult::Exact(mpi) | LookupResult::Parent(Some(mpi)) => mpi,\n+            _ => return BorrowedContentSource::Other,\n+        };\n+\n+        let mut queue = vec![initial_mpi];\n+        let mut visited = Vec::new();\n+        debug!(\"borrowed_content_source: queue={:?}\", queue);\n+        while let Some(mpi) = queue.pop() {\n+            debug!(\n+                \"borrowed_content_source: mpi={:?} queue={:?} visited={:?}\",\n+                mpi, queue, visited\n+            );\n+\n+            // Don't visit the same path twice.\n+            if visited.contains(&mpi) {\n+                continue;\n+            }\n+            visited.push(mpi);\n+\n+            for i in &self.move_data.init_path_map[mpi] {\n+                let init = &self.move_data.inits[*i];\n+                debug!(\"borrowed_content_source: init={:?}\", init);\n+                // We're only interested in statements that initialized a value, not the\n+                // initializations from arguments.\n+                let loc = match init.location {\n+                    InitLocation::Statement(stmt) => stmt,\n+                    _ => continue,\n+                };\n+\n+                let bbd = &self.mir[loc.block];\n+                let is_terminator = bbd.statements.len() == loc.statement_index;\n+                debug!(\"borrowed_content_source: loc={:?} is_terminator={:?}\", loc, is_terminator);\n+                if !is_terminator {\n+                    let stmt = &bbd.statements[loc.statement_index];\n+                    debug!(\"borrowed_content_source: stmt={:?}\", stmt);\n+                    // We're only interested in assignments (in particular, where the\n+                    // assignment came from - was it an `Rc` or `Arc`?).\n+                    if let StatementKind::Assign(_, box Rvalue::Ref(_, _, source)) = &stmt.kind {\n+                        let ty = source.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+                        let ty = match ty.sty {\n+                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            _ => ty,\n+                        };\n+                        debug!(\"borrowed_content_source: ty={:?}\", ty);\n+\n+                        if ty.is_arc() {\n+                            return BorrowedContentSource::Arc;\n+                        } else if ty.is_rc() {\n+                            return BorrowedContentSource::Rc;\n+                        } else {\n+                            queue.push(init.path);\n+                        }\n+                    }\n+                } else if let Some(Terminator {\n+                    kind: TerminatorKind::Call { args, .. },\n+                    ..\n+                }) = &bbd.terminator {\n+                    for arg in args {\n+                        let source = match arg {\n+                            Operand::Copy(place) | Operand::Move(place) => place,\n+                            _ => continue,\n+                        };\n+\n+                        let ty = source.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+                        let ty = match ty.sty {\n+                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            _ => ty,\n+                        };\n+                        debug!(\"borrowed_content_source: ty={:?}\", ty);\n+\n+                        if ty.is_arc() {\n+                            return BorrowedContentSource::Arc;\n+                        } else if ty.is_rc() {\n+                            return BorrowedContentSource::Rc;\n+                        } else {\n+                            queue.push(init.path);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        BorrowedContentSource::Other\n+    }\n }"}, {"sha": "d58beabb3038af551493e03d3d7a35312c100b9f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of an `Rc`\n+  --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:17:14\n+   |\n+LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n+   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "d58beabb3038af551493e03d3d7a35312c100b9f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.mir.stderr?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:17:14\n    |\n LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n \n error: aborting due to previous error\n "}, {"sha": "c9c8cf104ce2e769fa4aa36749ce6b14f9c1894f", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -1,10 +1,10 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-deref.rs:14:14\n    |\n LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n-   |              cannot move out of borrowed content\n+   |              cannot move out of an `Rc`\n    |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n \n error: aborting due to previous error"}, {"sha": "248f4ba066023bd8470507506301f09370e1f71d", "filename": "src/test/ui/nll/issue-52086.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.rs?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+struct Bar { field: Vec<i32> }\n+\n+fn main() {\n+    let x = Rc::new(Bar { field: vec![] });\n+    drop(x.field);\n+\n+    let y = Arc::new(Bar { field: vec![] });\n+    drop(y.field);\n+}"}, {"sha": "1455c49ea161c74946b93d7868c29a6eca9d0700", "filename": "src/test/ui/nll/issue-52086.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52086.stderr?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -0,0 +1,15 @@\n+error[E0507]: cannot move out of an `Rc`\n+  --> $DIR/issue-52086.rs:20:10\n+   |\n+LL |     drop(x.field);\n+   |          ^^^^^^^ cannot move out of an `Rc`\n+\n+error[E0507]: cannot move out of an `Arc`\n+  --> $DIR/issue-52086.rs:23:10\n+   |\n+LL |     drop(y.field);\n+   |          ^^^^^^^ cannot move out of an `Arc`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "8b8268b5b2c4986bf9973beb5bfc450b926d857f", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c6d08b71f56541a540d365746aab460862d3149/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=8c6d08b71f56541a540d365746aab460862d3149", "patch": "@@ -25,13 +25,13 @@ LL |     let s = **r;\n    |             cannot move out of borrowed content\n    |             help: consider removing the `*`: `*r`\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of an `Rc`\n   --> $DIR/move-errors.rs:40:13\n    |\n LL |     let s = *r;\n    |             ^^\n    |             |\n-   |             cannot move out of borrowed content\n+   |             cannot move out of an `Rc`\n    |             help: consider removing the `*`: `r`\n \n error[E0508]: cannot move out of type `[A; 1]`, a non-copy array"}]}