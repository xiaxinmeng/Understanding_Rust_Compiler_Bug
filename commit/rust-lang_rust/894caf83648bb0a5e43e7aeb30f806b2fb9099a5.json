{"sha": "894caf83648bb0a5e43e7aeb30f806b2fb9099a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NGNhZjgzNjQ4YmIwYTVlNDNlN2FlYjMwZjgwNmIyZmI5MDk5YTU=", "commit": {"author": {"name": "Nick Platt", "email": "platt.nicholas@gmail.com", "date": "2016-04-16T15:46:52Z"}, "committer": {"name": "Nick Platt", "email": "platt.nicholas@gmail.com", "date": "2016-04-18T01:41:55Z"}, "message": "rustdoc: Disambiguate anchors for assoc item impls", "tree": {"sha": "29892a77bf957f6c4d8ad217f34cde25e0299d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29892a77bf957f6c4d8ad217f34cde25e0299d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/894caf83648bb0a5e43e7aeb30f806b2fb9099a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/894caf83648bb0a5e43e7aeb30f806b2fb9099a5", "html_url": "https://github.com/rust-lang/rust/commit/894caf83648bb0a5e43e7aeb30f806b2fb9099a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/894caf83648bb0a5e43e7aeb30f806b2fb9099a5/comments", "author": {"login": "caipre", "id": 295094, "node_id": "MDQ6VXNlcjI5NTA5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/295094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caipre", "html_url": "https://github.com/caipre", "followers_url": "https://api.github.com/users/caipre/followers", "following_url": "https://api.github.com/users/caipre/following{/other_user}", "gists_url": "https://api.github.com/users/caipre/gists{/gist_id}", "starred_url": "https://api.github.com/users/caipre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caipre/subscriptions", "organizations_url": "https://api.github.com/users/caipre/orgs", "repos_url": "https://api.github.com/users/caipre/repos", "events_url": "https://api.github.com/users/caipre/events{/privacy}", "received_events_url": "https://api.github.com/users/caipre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "caipre", "id": 295094, "node_id": "MDQ6VXNlcjI5NTA5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/295094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caipre", "html_url": "https://github.com/caipre", "followers_url": "https://api.github.com/users/caipre/followers", "following_url": "https://api.github.com/users/caipre/following{/other_user}", "gists_url": "https://api.github.com/users/caipre/gists{/gist_id}", "starred_url": "https://api.github.com/users/caipre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caipre/subscriptions", "organizations_url": "https://api.github.com/users/caipre/orgs", "repos_url": "https://api.github.com/users/caipre/repos", "events_url": "https://api.github.com/users/caipre/events{/privacy}", "received_events_url": "https://api.github.com/users/caipre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed7c56796ef17f13227a50dc1a72a018b1d5e33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7c56796ef17f13227a50dc1a72a018b1d5e33f", "html_url": "https://github.com/rust-lang/rust/commit/ed7c56796ef17f13227a50dc1a72a018b1d5e33f"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "e873fd7569d9b0ca411314dab9dbe4f4c7fde869", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/894caf83648bb0a5e43e7aeb30f806b2fb9099a5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894caf83648bb0a5e43e7aeb30f806b2fb9099a5/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=894caf83648bb0a5e43e7aeb30f806b2fb9099a5", "patch": "@@ -1903,34 +1903,35 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     if t.items.is_empty() {\n         write!(w, \"{{ }}\")?;\n     } else {\n+        // FIXME: we should be using a derived_id for the Anchors here\n         write!(w, \"{{\\n\")?;\n         for t in &types {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, t, AssocItemLink::Anchor)?;\n+            render_assoc_item(w, t, AssocItemLink::Anchor(None))?;\n             write!(w, \";\\n\")?;\n         }\n         if !types.is_empty() && !consts.is_empty() {\n             w.write_str(\"\\n\")?;\n         }\n         for t in &consts {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, t, AssocItemLink::Anchor)?;\n+            render_assoc_item(w, t, AssocItemLink::Anchor(None))?;\n             write!(w, \";\\n\")?;\n         }\n         if !consts.is_empty() && !required.is_empty() {\n             w.write_str(\"\\n\")?;\n         }\n         for m in &required {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, m, AssocItemLink::Anchor)?;\n+            render_assoc_item(w, m, AssocItemLink::Anchor(None))?;\n             write!(w, \";\\n\")?;\n         }\n         if !required.is_empty() && !provided.is_empty() {\n             w.write_str(\"\\n\")?;\n         }\n         for m in &provided {\n             write!(w, \"    \")?;\n-            render_assoc_item(w, m, AssocItemLink::Anchor)?;\n+            render_assoc_item(w, m, AssocItemLink::Anchor(None))?;\n             write!(w, \" {{ ... }}\\n\")?;\n         }\n         write!(w, \"}}\")?;\n@@ -1947,7 +1948,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         write!(w, \"<h3 id='{id}' class='method stab {stab}'><code>\",\n                id = id,\n                stab = m.stability_class())?;\n-        render_assoc_item(w, m, AssocItemLink::Anchor)?;\n+        render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)))?;\n         write!(w, \"</code>\")?;\n         render_stability_since(w, m, t)?;\n         write!(w, \"</h3>\")?;\n@@ -2042,7 +2043,8 @@ fn naive_assoc_href(it: &clean::Item, link: AssocItemLink) -> String {\n \n     let anchor = format!(\"#{}.{}\", ty, name);\n     match link {\n-        AssocItemLink::Anchor => anchor,\n+        AssocItemLink::Anchor(Some(ref id)) => format!(\"#{}\", id),\n+        AssocItemLink::Anchor(None) => anchor,\n         AssocItemLink::GotoSource(did, _) => {\n             href(did).map(|p| format!(\"{}{}\", p.0, anchor)).unwrap_or(anchor)\n         }\n@@ -2117,7 +2119,8 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n         let name = meth.name.as_ref().unwrap();\n         let anchor = format!(\"#{}.{}\", shortty(meth), name);\n         let href = match link {\n-            AssocItemLink::Anchor => anchor,\n+            AssocItemLink::Anchor(Some(ref id)) => format!(\"#{}\", id),\n+            AssocItemLink::Anchor(None) => anchor,\n             AssocItemLink::GotoSource(did, provided_methods) => {\n                 // We're creating a link from an impl-item to the corresponding\n                 // trait-item and need to map the anchored type accordingly.\n@@ -2378,10 +2381,19 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n \n #[derive(Copy, Clone)]\n enum AssocItemLink<'a> {\n-    Anchor,\n+    Anchor(Option<&'a str>),\n     GotoSource(DefId, &'a HashSet<String>),\n }\n \n+impl<'a> AssocItemLink<'a> {\n+    fn anchor(&self, id: &'a String) -> Self {\n+        match *self {\n+            AssocItemLink::Anchor(_) => { AssocItemLink::Anchor(Some(&id)) },\n+            ref other => *other,\n+        }\n+    }\n+}\n+\n enum AssocItemRender<'a> {\n     All,\n     DerefFor { trait_: &'a clean::Type, type_: &'a clean::Type },\n@@ -2413,7 +2425,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             }\n         };\n         for i in &non_trait {\n-            render_impl(w, cx, i, AssocItemLink::Anchor, render_header,\n+            render_impl(w, cx, i, AssocItemLink::Anchor(None), render_header,\n                         containing_item.stable_since())?;\n         }\n     }\n@@ -2509,32 +2521,32 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     write!(w, \"<h4 id='{}' class='{}'>\", id, shortty)?;\n                     render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                     write!(w, \"<code>\")?;\n-                    render_assoc_item(w, item, link)?;\n+                    render_assoc_item(w, item, link.anchor(&id))?;\n                     write!(w, \"</code></h4>\\n\")?;\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = derive_id(format!(\"{}.{}\", ItemType::AssociatedType, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link)?;\n+                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", shortty, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_const(w, item, ty, default.as_ref(), link)?;\n+                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::ConstantItem(ref c) => {\n                 let id = derive_id(format!(\"{}.{}\", shortty, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_const(w, item, &c.type_, Some(&c.expr), link)?;\n+                assoc_const(w, item, &c.type_, Some(&c.expr), link.anchor(&id))?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", shortty, name));\n                 write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty)?;\n-                assoc_type(w, item, bounds, default.as_ref(), link)?;\n+                assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n                 write!(w, \"</code></h4>\\n\")?;\n             }\n             clean::StrippedItem(..) => return Ok(()),"}, {"sha": "ef62f12d55e3ccfc3dab2cba957c8fbc88a1979e", "filename": "src/test/rustdoc/issue-32890.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/894caf83648bb0a5e43e7aeb30f806b2fb9099a5/src%2Ftest%2Frustdoc%2Fissue-32890.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894caf83648bb0a5e43e7aeb30f806b2fb9099a5/src%2Ftest%2Frustdoc%2Fissue-32890.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32890.rs?ref=894caf83648bb0a5e43e7aeb30f806b2fb9099a5", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @has issue_32890/struct.Foo.html\n+pub struct Foo<T>(T);\n+\n+impl Foo<u8> {\n+    // @has - '//a[@href=\"#method.pass\"]' 'pass'\n+    pub fn pass() {}\n+}\n+\n+impl Foo<u16> {\n+    // @has - '//a[@href=\"#method.pass-1\"]' 'pass'\n+    pub fn pass() {}\n+}\n+\n+impl Foo<u32> {\n+    // @has - '//a[@href=\"#method.pass-2\"]' 'pass'\n+    pub fn pass() {}\n+}"}]}