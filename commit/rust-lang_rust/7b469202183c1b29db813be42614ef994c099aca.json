{"sha": "7b469202183c1b29db813be42614ef994c099aca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNDY5MjAyMTgzYzFiMjlkYjgxM2JlNDI2MTRlZjk5NGMwOTlhY2E=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-13T21:41:03Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-09-12T02:30:24Z"}, "message": "Fix linkcheck issues\n\nMost of these are because alloc uses `#[lang_item]` to define methods,\nbut core documents primitives before those methods are available.\n\n- Fix rustdoc-js-std test\n\n  For some reason this change made CStr not show up in the results for\n  `str,u8`. Since it still shows up for str, and since it wasn't a great\n  match for that query anyway, I think this is ok to let slide.\n\n- Add test that all primitives can be linked to\n- Enable `doc(primitive)` in `core` as well\n- Add linkcheck exception specifically for Windows\n\n  Ideally this would be done automatically by the linkchecker by\n  replacing `\\\\` with forward slashes, but this PR is already a ton of\n  work ...\n\n- Don't forcibly fail linkchecking if there's a broken intra-doc link on Windows\n\n  Previously, it would exit with a hard error if a missing file had `::`\n  in it. This changes it to report a missing file instead, which allows\n  adding an exception.", "tree": {"sha": "cc525e7bdbcb40a7c27842e4d3bd1bc0bfabe53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc525e7bdbcb40a7c27842e4d3bd1bc0bfabe53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b469202183c1b29db813be42614ef994c099aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b469202183c1b29db813be42614ef994c099aca", "html_url": "https://github.com/rust-lang/rust/commit/7b469202183c1b29db813be42614ef994c099aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b469202183c1b29db813be42614ef994c099aca/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb7e527692bd01c68f01fd373db0c49dbc8670ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7e527692bd01c68f01fd373db0c49dbc8670ce", "html_url": "https://github.com/rust-lang/rust/commit/cb7e527692bd01c68f01fd373db0c49dbc8670ce"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "b1dd6aef97493e13500ce026a614005a1ee7c779", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b469202183c1b29db813be42614ef994c099aca/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b469202183c1b29db813be42614ef994c099aca/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=7b469202183c1b29db813be42614ef994c099aca", "patch": "@@ -24,7 +24,7 @@ impl char {\n     /// decoding error.\n     ///\n     /// It can occur, for example, when giving ill-formed UTF-8 bytes to\n-    /// [`String::from_utf8_lossy`](string/struct.String.html#method.from_utf8_lossy).\n+    /// [`String::from_utf8_lossy`](../std/string/struct.String.html#method.from_utf8_lossy).\n     #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';\n "}, {"sha": "a04e479e8570dc542b02066998b52266c096e18a", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b469202183c1b29db813be42614ef994c099aca/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b469202183c1b29db813be42614ef994c099aca/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=7b469202183c1b29db813be42614ef994c099aca", "patch": "@@ -2257,9 +2257,9 @@ impl<T> [T] {\n     /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     // Lint rustdoc::broken_intra_doc_links is allowed as `slice::sort_by_key` is\n-    // in crate `alloc`, and as such doesn't exists yet when building `core`.\n-    // links to downstream crate: #74481. Since primitives are only documented in\n-    // libstd (#73423), this never leads to broken links in practice.\n+    // in crate `alloc`, and as such doesn't exists yet when building `core`: #74481.\n+    // This breaks links when slice is displayed in core, but changing it to use relative links\n+    // would break when the item is re-exported. So allow the core links to be broken for now.\n     #[allow(rustdoc::broken_intra_doc_links)]\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n     #[inline]"}, {"sha": "454602481e3c5a57140a54378da2cb200cfdf76e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b469202183c1b29db813be42614ef994c099aca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b469202183c1b29db813be42614ef994c099aca/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7b469202183c1b29db813be42614ef994c099aca", "patch": "@@ -1774,7 +1774,7 @@ impl PrimitiveType {\n                 debug!(?crate_num, ?crate_name);\n                 for &(def_id, prim) in &e.primitives(tcx) {\n                     // HACK: try to link to std instead where possible\n-                    if crate_name == sym::core && primitive_locations.get(&prim).is_some() {\n+                    if crate_name == sym::core && primitive_locations.contains_key(&prim) {\n                         continue;\n                     }\n                     primitive_locations.insert(prim, def_id);"}, {"sha": "1c92d019606b673f056ecd613478c877eb6d8afc", "filename": "src/test/rustdoc-js-std/multi-query.js", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b469202183c1b29db813be42614ef994c099aca/src%2Ftest%2Frustdoc-js-std%2Fmulti-query.js", "raw_url": "https://github.com/rust-lang/rust/raw/7b469202183c1b29db813be42614ef994c099aca/src%2Ftest%2Frustdoc-js-std%2Fmulti-query.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fmulti-query.js?ref=7b469202183c1b29db813be42614ef994c099aca", "patch": "@@ -2,8 +2,9 @@ const QUERY = 'str,u8';\n \n const EXPECTED = {\n     'others': [\n-        { 'path': 'std', 'name': 'str' },\n-        { 'path': 'std', 'name': 'u8' },\n-        { 'path': 'std::ffi', 'name': 'CStr' },\n+        { 'path': 'std', 'name': 'str', 'href': '../std/primitive.str.html' },\n+        { 'path': 'std', 'name': 'u8', 'href': '../std/primitive.u8.html'  },\n+        { 'path': 'std', 'name': 'str', 'href': '../std/str/index.html' },\n+        { 'path': 'std', 'name': 'u8', 'href': '../std/u8/index.html' },\n     ],\n };"}, {"sha": "f0f70cb6c1881dff604c29f3d253eea19601d569", "filename": "src/test/rustdoc/primitive/no_std.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b469202183c1b29db813be42614ef994c099aca/src%2Ftest%2Frustdoc%2Fprimitive%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b469202183c1b29db813be42614ef994c099aca/src%2Ftest%2Frustdoc%2Fprimitive%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive%2Fno_std.rs?ref=7b469202183c1b29db813be42614ef994c099aca", "patch": "@@ -1,6 +1,16 @@\n #![no_std]\n+#![deny(warnings)]\n+#![deny(rustdoc::broken_intra_doc_links)]\n \n // @has no_std/fn.foo.html '//a/[@href=\"{{channel}}/core/primitive.u8.html\"]' 'u8'\n // @has no_std/fn.foo.html '//a/[@href=\"{{channel}}/core/primitive.u8.html\"]' 'primitive link'\n /// Link to [primitive link][u8]\n pub fn foo() -> u8 {}\n+\n+// Test that all primitives can be linked to.\n+/// [isize] [i8] [i16] [i32] [i64] [i128]\n+/// [usize] [u8] [u16] [u32] [u64] [u128]\n+/// [f32] [f64]\n+/// [char] [bool] [str] [slice] [array] [tuple] [unit]\n+/// [pointer] [reference] [fn] [never]\n+pub fn bar() {}"}, {"sha": "94ebbb33e8d8ffad075cd6d06d3248e13e5ecf48", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b469202183c1b29db813be42614ef994c099aca/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b469202183c1b29db813be42614ef994c099aca/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=7b469202183c1b29db813be42614ef994c099aca", "patch": "@@ -30,13 +30,27 @@ use regex::Regex;\n // If at all possible you should use intra-doc links to avoid linkcheck issues. These\n // are cases where that does not work\n // [(generated_documentation_page, &[broken_links])]\n+#[rustfmt::skip]\n const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n     // These try to link to std::collections, but are defined in alloc\n     // https://github.com/rust-lang/rust/issues/74481\n     (\"std/collections/btree_map/struct.BTreeMap.html\", &[\"#insert-and-complex-keys\"]),\n     (\"std/collections/btree_set/struct.BTreeSet.html\", &[\"#insert-and-complex-keys\"]),\n     (\"alloc/collections/btree_map/struct.BTreeMap.html\", &[\"#insert-and-complex-keys\"]),\n     (\"alloc/collections/btree_set/struct.BTreeSet.html\", &[\"#insert-and-complex-keys\"]),\n+\n+    // These try to link to various things in std, but are defined in core.\n+    // The docs in std::primitive use proper intra-doc links, so these seem fine to special-case.\n+    // Most these are broken because liballoc uses `#[lang_item]` magic to define things on\n+    // primitives that aren't available in core.\n+    (\"alloc/slice/trait.Join.html\", &[\"#method.join\"]),\n+    (\"alloc/slice/trait.Concat.html\", &[\"#method.concat\"]),\n+    (\"alloc/slice/index.html\", &[\"#method.concat\", \"#method.join\"]),\n+    (\"alloc/vec/struct.Vec.html\", &[\"#method.sort_by_key\", \"#method.sort_by_cached_key\"]),\n+    (\"core/primitive.str.html\", &[\"#method.to_ascii_uppercase\", \"#method.to_ascii_lowercase\"]),\n+    (\"core/primitive.slice.html\", &[\"#method.to_ascii_uppercase\", \"#method.to_ascii_lowercase\",\n+                                    \"core/slice::sort_by_key\", \"core\\\\slice::sort_by_key\",\n+                                    \"#method.sort_by_cached_key\"]),\n ];\n \n #[rustfmt::skip]\n@@ -376,6 +390,10 @@ impl Checker {\n \n     /// Load a file from disk, or from the cache if available.\n     fn load_file(&mut self, file: &Path, report: &mut Report) -> (String, &FileEntry) {\n+        // https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--0-499-\n+        #[cfg(windows)]\n+        const ERROR_INVALID_NAME: i32 = 123;\n+\n         let pretty_path =\n             file.strip_prefix(&self.root).unwrap_or(&file).to_str().unwrap().to_string();\n \n@@ -392,6 +410,14 @@ impl Checker {\n                 }\n                 Err(e) if e.kind() == ErrorKind::NotFound => FileEntry::Missing,\n                 Err(e) => {\n+                    // If a broken intra-doc link contains `::`, on windows, it will cause `ERROR_INVALID_NAME` rather than `NotFound`.\n+                    // Explicitly check for that so that the broken link can be allowed in `LINKCHECK_EXCEPTIONS`.\n+                    #[cfg(windows)]\n+                    if e.raw_os_error() == Some(ERROR_INVALID_NAME)\n+                        && file.as_os_str().to_str().map_or(false, |s| s.contains(\"::\"))\n+                    {\n+                        return FileEntry::Missing;\n+                    }\n                     panic!(\"unexpected read error for {}: {}\", file.display(), e);\n                 }\n             });"}]}