{"sha": "31f5f816e3747c1a0972d2f0aca25ded9980cd36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjVmODE2ZTM3NDdjMWEwOTcyZDJmMGFjYTI1ZGVkOTk4MGNkMzY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-02-27T16:07:14Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-02-27T16:07:14Z"}, "message": "Remove unnecessary file_id argument", "tree": {"sha": "587dfb041597441ea0a60fdb8aa0ab0a52c63edd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/587dfb041597441ea0a60fdb8aa0ab0a52c63edd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f5f816e3747c1a0972d2f0aca25ded9980cd36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f5f816e3747c1a0972d2f0aca25ded9980cd36", "html_url": "https://github.com/rust-lang/rust/commit/31f5f816e3747c1a0972d2f0aca25ded9980cd36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f5f816e3747c1a0972d2f0aca25ded9980cd36/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d23d8bc299b718e7f026a7e6c1363dde3342817", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d23d8bc299b718e7f026a7e6c1363dde3342817", "html_url": "https://github.com/rust-lang/rust/commit/5d23d8bc299b718e7f026a7e6c1363dde3342817"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "f198b1f252d5853791e167f41e9c11a6671e899b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f5f816e3747c1a0972d2f0aca25ded9980cd36/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5f816e3747c1a0972d2f0aca25ded9980cd36/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=31f5f816e3747c1a0972d2f0aca25ded9980cd36", "patch": "@@ -555,7 +555,7 @@ pub(crate) fn handle_runnables(\n         if should_skip_target(&runnable, cargo_spec.as_ref()) {\n             continue;\n         }\n-        let mut runnable = to_proto::runnable(&snap, file_id, runnable)?;\n+        let mut runnable = to_proto::runnable(&snap, runnable)?;\n         if expect_test {\n             runnable.label = format!(\"{} + expect\", runnable.label);\n             runnable.args.expect_test = Some(true);\n@@ -773,7 +773,7 @@ pub(crate) fn handle_hover(\n             contents: HoverContents::Markup(to_proto::markup_content(info.info.markup)),\n             range: Some(range),\n         },\n-        actions: prepare_hover_actions(&snap, position.file_id, &info.info.actions),\n+        actions: prepare_hover_actions(&snap, &info.info.actions),\n     };\n \n     Ok(Some(hover))\n@@ -1438,17 +1438,16 @@ fn show_impl_command_link(\n \n fn runnable_action_links(\n     snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n     runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    let cargo_spec = CargoTargetSpec::for_file(&snap, file_id).ok()?;\n+    let cargo_spec = CargoTargetSpec::for_file(&snap, runnable.nav.file_id).ok()?;\n     let hover_config = snap.config.hover();\n     if !hover_config.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n         return None;\n     }\n \n     let action: &'static _ = runnable.action();\n-    to_proto::runnable(snap, file_id, runnable).ok().map(|r| {\n+    to_proto::runnable(snap, runnable).ok().map(|r| {\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n         if hover_config.run {\n@@ -1487,7 +1486,6 @@ fn goto_type_action_links(\n \n fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n     if snap.config.hover().none() || !snap.config.hover_actions() {\n@@ -1498,7 +1496,7 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementation(position) => show_impl_command_link(snap, position),\n-            HoverAction::Runnable(r) => runnable_action_links(snap, file_id, r.clone()),\n+            HoverAction::Runnable(r) => runnable_action_links(snap, r.clone()),\n             HoverAction::GoToType(targets) => goto_type_action_links(snap, targets),\n         })\n         .collect()"}, {"sha": "e8fd9bb28487b7f3ada43eab5b939b6ab001e9c3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31f5f816e3747c1a0972d2f0aca25ded9980cd36/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f5f816e3747c1a0972d2f0aca25ded9980cd36/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=31f5f816e3747c1a0972d2f0aca25ded9980cd36", "patch": "@@ -828,11 +828,10 @@ pub(crate) fn resolved_code_action(\n \n pub(crate) fn runnable(\n     snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n     runnable: Runnable,\n ) -> Result<lsp_ext::Runnable> {\n     let config = snap.config.runnables();\n-    let spec = CargoTargetSpec::for_file(snap, file_id)?;\n+    let spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id)?;\n     let workspace_root = spec.as_ref().map(|it| it.workspace_root.clone());\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n@@ -865,7 +864,7 @@ pub(crate) fn code_lens(\n             let annotation_range = range(&line_index, annotation.range);\n \n             let action = run.action();\n-            let r = runnable(&snap, run.nav.file_id, run)?;\n+            let r = runnable(&snap, run)?;\n \n             let command = if debug {\n                 command::debug_single(&r)"}]}