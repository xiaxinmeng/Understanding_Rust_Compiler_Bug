{"sha": "1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMmVhOGY1OTY0MzM4NmMxY2YyYzQxY2E5YTE5Mzc5ZDBmY2FjNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-01T06:29:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-01T06:29:10Z"}, "message": "Rollup merge of #60327 - matthewjasper:handle-local-outlives-lbl, r=nikomatsakis\n\nSearch for incompatible universes in borrow errors\n\nIf we have a borrow that has to live for `'static` we need to check for\nany regions in incompatible universes when trying to find the cause.\n\ncloses #60274", "tree": {"sha": "572229a0499608fe55f8a55eee8dc79f9f95bfd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/572229a0499608fe55f8a55eee8dc79f9f95bfd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyTy2CRBK7hj4Ov3rIwAAdHIIAHo+O6ZdhtXYhis5pnxKfEMK\nvuJCvDaTpgr154B+NKdtkDVliPCitg9xV0NVItChpH1fdZ6ko/fXFj2iOEYEM5ZZ\npfCvBlv/HoBfZhSYzqeXBAg8Q+gACSNb2ZsE06zn7dTcF9FCG4dkRfNCiB3tquI+\nL0L8eEWJ42pKgml6ipGbLfv2chLsMkUrYGo65cTACmNZaNSa7xAvJ4HQXDlsbodB\nsPJbwtsm8iU0HL1gFq6UACCoYyDPIuwTwKD0Q86x7kFGL5c2vAZhcAxKjRb/U/N3\nd0PBdJKDq9R/If8o0Sxp9KXge1b/sJ3h/tZtSZjAcvSH5DiAJZQNPvRSTHNgVTw=\n=vRLg\n-----END PGP SIGNATURE-----\n", "payload": "tree 572229a0499608fe55f8a55eee8dc79f9f95bfd1\nparent a8b854bde0145f0ca052f067a4b86b778ecc17ab\nparent a962274903e7947c5847dbaffbe6c554748e29b9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556692150 +0200\ncommitter GitHub <noreply@github.com> 1556692150 +0200\n\nRollup merge of #60327 - matthewjasper:handle-local-outlives-lbl, r=nikomatsakis\n\nSearch for incompatible universes in borrow errors\n\nIf we have a borrow that has to live for `'static` we need to check for\nany regions in incompatible universes when trying to find the cause.\n\ncloses #60274\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "html_url": "https://github.com/rust-lang/rust/commit/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b854bde0145f0ca052f067a4b86b778ecc17ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b854bde0145f0ca052f067a4b86b778ecc17ab", "html_url": "https://github.com/rust-lang/rust/commit/a8b854bde0145f0ca052f067a4b86b778ecc17ab"}, {"sha": "a962274903e7947c5847dbaffbe6c554748e29b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a962274903e7947c5847dbaffbe6c554748e29b9", "html_url": "https://github.com/rust-lang/rust/commit/a962274903e7947c5847dbaffbe6c554748e29b9"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "00e81ee049183f255efe2ea4c0f910269a6b6d77", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "patch": "@@ -674,8 +674,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n     ) -> (ConstraintCategory, bool, Span, Option<RegionName>) {\n-        let (category, from_closure, span) =\n-            self.best_blame_constraint(mir, borrow_region, |r| r == outlived_region);\n+        let (category, from_closure, span) = self.best_blame_constraint(\n+            mir,\n+            borrow_region,\n+            |r| self.provides_universal_region(r, borrow_region, outlived_region)\n+        );\n         let outlived_fr_name =\n             self.give_region_a_name(infcx, mir, upvars, mir_def_id, outlived_region, &mut 1);\n         (category, from_closure, span, outlived_fr_name)"}, {"sha": "5f1f9b3a7f2299ce9d12133785edfe5583a61802", "filename": "src/test/ui/nll/local-outlives-static-via-hrtb.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.rs?ref=1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "patch": "@@ -0,0 +1,26 @@\n+// Test that we handle the case when a local variable is borrowed for `'static`\n+// due to an outlives constraint involving a region in an incompatible universe\n+\n+pub trait Outlives<'this> {}\n+\n+impl<'this, T> Outlives<'this> for T where T: 'this {}\n+trait Reference {\n+    type AssociatedType;\n+}\n+\n+impl<'a, T: 'a> Reference for &'a T {\n+    type AssociatedType = &'a ();\n+}\n+\n+fn assert_static_via_hrtb<G>(_: G) where for<'a> G: Outlives<'a> {}\n+\n+fn assert_static_via_hrtb_with_assoc_type<T>(_: &'_ T)\n+where\n+    for<'a> &'a T: Reference<AssociatedType = &'a ()>,\n+{}\n+\n+fn main() {\n+    let local = 0;\n+    assert_static_via_hrtb(&local); //~ ERROR `local` does not live long enough\n+    assert_static_via_hrtb_with_assoc_type(&&local); //~ ERROR `local` does not live long enough\n+}"}, {"sha": "61009da49ffed8d5b5f0019b6f45c7865913a715", "filename": "src/test/ui/nll/local-outlives-static-via-hrtb.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c2ea8f59643386c1cf2c41ca9a19379d0fcac72/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Flocal-outlives-static-via-hrtb.stderr?ref=1c2ea8f59643386c1cf2c41ca9a19379d0fcac72", "patch": "@@ -0,0 +1,26 @@\n+error[E0597]: `local` does not live long enough\n+  --> $DIR/local-outlives-static-via-hrtb.rs:24:28\n+   |\n+LL |     assert_static_via_hrtb(&local);\n+   |     -----------------------^^^^^^-\n+   |     |                      |\n+   |     |                      borrowed value does not live long enough\n+   |     argument requires that `local` is borrowed for `'static`\n+LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n+LL | }\n+   | - `local` dropped here while still borrowed\n+\n+error[E0597]: `local` does not live long enough\n+  --> $DIR/local-outlives-static-via-hrtb.rs:25:45\n+   |\n+LL |     assert_static_via_hrtb_with_assoc_type(&&local);\n+   |     ----------------------------------------^^^^^^-\n+   |     |                                       |\n+   |     |                                       borrowed value does not live long enough\n+   |     argument requires that `local` is borrowed for `'static`\n+LL | }\n+   | - `local` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}