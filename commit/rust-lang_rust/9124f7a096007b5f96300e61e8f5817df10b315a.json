{"sha": "9124f7a096007b5f96300e61e8f5817df10b315a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMjRmN2EwOTYwMDdiNWY5NjMwMGU2MWU4ZjU4MTdkZjEwYjMxNWE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-23T17:28:55Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-11-12T16:38:37Z"}, "message": "update suggestion ui test", "tree": {"sha": "9c71bb5d45a90dfae9179a2392c0f1cdea92d1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c71bb5d45a90dfae9179a2392c0f1cdea92d1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9124f7a096007b5f96300e61e8f5817df10b315a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9124f7a096007b5f96300e61e8f5817df10b315a", "html_url": "https://github.com/rust-lang/rust/commit/9124f7a096007b5f96300e61e8f5817df10b315a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9124f7a096007b5f96300e61e8f5817df10b315a/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc14c40eee3139e53bfacd3854af8a5a3d379e8", "html_url": "https://github.com/rust-lang/rust/commit/dcc14c40eee3139e53bfacd3854af8a5a3d379e8"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "effc13c8301ef81303d2d9ca87cb789a45bbd7cc", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -2124,6 +2124,16 @@ impl<'a> LoweringContext<'a> {\n         impl_trait_return_allow: bool,\n         make_ret_async: Option<NodeId>,\n     ) -> P<hir::FnDecl> {\n+        debug!(\"lower_fn_decl(\\\n+            fn_decl: {:?}, \\\n+            in_band_ty_params: {:?}, \\\n+            impl_trait_return_allow: {}, \\\n+            make_ret_async: {:?})\",\n+            decl,\n+            in_band_ty_params,\n+            impl_trait_return_allow,\n+            make_ret_async,\n+        );\n         let lt_mode = if make_ret_async.is_some() {\n             // In `async fn`, argument-position elided lifetimes\n             // must be transformed into fresh generic parameters so that\n@@ -2416,7 +2426,7 @@ impl<'a> LoweringContext<'a> {\n \n         hir::FunctionRetTy::Return(P(hir::Ty {\n             kind: opaque_ty_ref,\n-            span,\n+            span: opaque_ty_span,\n             hir_id: self.next_id(),\n         }))\n     }\n@@ -2526,7 +2536,7 @@ impl<'a> LoweringContext<'a> {\n         hir::Lifetime {\n             hir_id: self.lower_node_id(id),\n             span,\n-            name: name,\n+            name,\n         }\n     }\n "}, {"sha": "01ba748c4e1f9a3d6dd3ce43f01afd19ce69e897", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -53,11 +53,14 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         }) => name.to_string(),\n                         _ => \"'_\".to_owned(),\n                     };\n-                    if let Ok(snippet) = self.tcx().sess.source_map().span_to_snippet(return_sp) {\n-                        // only apply this suggestion onto non-async fnunctions\n-                        if !return_ty.unwrap().1 {\n+                    let fn_return_span = return_ty.unwrap().1;\n+                    if let Ok(snippet) =\n+                        self.tcx().sess.source_map().span_to_snippet(fn_return_span) {\n+                        // only apply this suggestion onto functions with\n+                        // explicit non-desugar'able return.\n+                        if fn_return_span.desugaring_kind().is_none() {\n                             err.span_suggestion(\n-                                return_sp,\n+                                fn_return_span,\n                                 &format!(\n                                     \"you can add a constraint to the return type to make it last \\\n                                  less than `'static` and match {}\","}, {"sha": "3985d47abe1dc6c3cda286e54f2ded4ef5a16e4f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -1559,7 +1559,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn return_type_impl_trait(\n         &self,\n         scope_def_id: DefId,\n-    ) -> Option<(Ty<'tcx>, bool)> {\n+    ) -> Option<(Ty<'tcx>, Span)> {\n         // HACK: `type_of_def_id()` will fail on these (#55796), so return `None`.\n         let hir_id = self.hir().as_local_hir_id(scope_def_id).unwrap();\n         match self.hir().get(hir_id) {\n@@ -1579,10 +1579,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::FnDef(_, _) => {\n                 let sig = ret_ty.fn_sig(*self);\n                 let output = self.erase_late_bound_regions(&sig.output());\n-                let is_async_fn =\n-                    hir::IsAsync::Async == self.asyncness(scope_def_id);\n                 if output.is_impl_trait() {\n-                    Some((output, is_async_fn))\n+                    let fn_decl = self.hir().fn_decl_by_hir_id(hir_id).unwrap();\n+                    Some((output, fn_decl.output.span()))\n                 } else {\n                     None\n                 }"}, {"sha": "0c64f90cb9fae64d540934f60d741dd9c366b5e7", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -0,0 +1,29 @@\n+error[E0373]: closure may outlive the current function, but it borrows `self`, which is owned by the current function\n+  --> $DIR/issue-62097.rs:13:13\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |             ^^ ---- `self` is borrowed here\n+   |             |\n+   |             may outlive borrowed value `self`\n+   |\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `self` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |         foo(move || self.bar()).await;\n+   |             ^^^^^^^\n+\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/issue-62097.rs:13:9\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ----- `self` is a reference that is only valid in the function body\n+LL |         foo(|| self.bar()).await;\n+   |         ^^^^^^^^^^^^^^^^^^ `self` escapes the function body here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "94afccc06a9e7c1dd1d578d4f05233faefe29a06", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -0,0 +1,16 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/issue-62097.rs:12:31\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ^^^^^ ...but this borrow...\n+LL |         foo(|| self.bar()).await;\n+   |         --- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime `'_` as defined on the method body at 12:31\n+  --> $DIR/issue-62097.rs:12:31\n+   |\n+LL |     pub async fn run_dummy_fn(&self) {\n+   |                               ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e45d588c6c6c31c72d7d10ea1f36d1b8fce2742", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -20,10 +20,6 @@ note: ...can't outlive the lifetime `'_` as defined on the method body at 11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 11:14\n-   |\n-LL |         foo + '_\n-   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "91075ffbdb6059eecbdfcf83b21c9c4f65b7d510", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9124f7a096007b5f96300e61e8f5817df10b315a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=9124f7a096007b5f96300e61e8f5817df10b315a", "patch": "@@ -11,10 +11,6 @@ note: ...can't outlive the lifetime `'_` as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'_` as defined on the method body at 8:26\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n-   |                                     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}