{"sha": "6e14e60af45ebc79f06eeeb75004e77de4658a80", "node_id": "C_kwDOAAsO6NoAKDZlMTRlNjBhZjQ1ZWJjNzlmMDZlZWViNzUwMDRlNzdkZTQ2NThhODA", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-08-31T19:08:33Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-09-01T10:51:13Z"}, "message": "Fix {subopt,imprec}_float not lint const.*(const)\n\nFixes #9402\nFixes #9201", "tree": {"sha": "285b4c318a0e73c311bf0731a8154cb95fcd7f80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285b4c318a0e73c311bf0731a8154cb95fcd7f80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e14e60af45ebc79f06eeeb75004e77de4658a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e14e60af45ebc79f06eeeb75004e77de4658a80", "html_url": "https://github.com/rust-lang/rust/commit/6e14e60af45ebc79f06eeeb75004e77de4658a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e14e60af45ebc79f06eeeb75004e77de4658a80/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e4659a862f8a244fedf473a06b9a85448d3a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e4659a862f8a244fedf473a06b9a85448d3a17", "html_url": "https://github.com/rust-lang/rust/commit/09e4659a862f8a244fedf473a06b9a85448d3a17"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "9120507f48c8546a54ee9d131bedd6ead8522ffe", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e14e60af45ebc79f06eeeb75004e77de4658a80/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e14e60af45ebc79f06eeeb75004e77de4658a80/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=6e14e60af45ebc79f06eeeb75004e77de4658a80", "patch": "@@ -238,23 +238,23 @@ fn get_integer_from_float_constant(value: &Constant) -> Option<i32> {\n fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     // Check receiver\n     if let Some((value, _)) = constant(cx, cx.typeck_results(), &args[0]) {\n-        let method = if F32(f32_consts::E) == value || F64(f64_consts::E) == value {\n-            \"exp\"\n+        if let Some(method) = if F32(f32_consts::E) == value || F64(f64_consts::E) == value {\n+            Some(\"exp\")\n         } else if F32(2.0) == value || F64(2.0) == value {\n-            \"exp2\"\n+            Some(\"exp2\")\n         } else {\n-            return;\n-        };\n-\n-        span_lint_and_sugg(\n-            cx,\n-            SUBOPTIMAL_FLOPS,\n-            expr.span,\n-            \"exponent for bases 2 and e can be computed more accurately\",\n-            \"consider using\",\n-            format!(\"{}.{}()\", prepare_receiver_sugg(cx, &args[1]), method),\n-            Applicability::MachineApplicable,\n-        );\n+            None\n+        } {\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"exponent for bases 2 and e can be computed more accurately\",\n+                \"consider using\",\n+                format!(\"{}.{}()\", prepare_receiver_sugg(cx, &args[1]), method),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n     }\n \n     // Check argument"}, {"sha": "e7ef45634dff4e0bd4e2d7d17915b8bcc0f64b6b", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e14e60af45ebc79f06eeeb75004e77de4658a80/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6e14e60af45ebc79f06eeeb75004e77de4658a80/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=6e14e60af45ebc79f06eeeb75004e77de4658a80", "patch": "@@ -18,6 +18,11 @@ fn main() {\n     let _ = x.powi(-16_777_215);\n     let _ = (x as f32).powi(-16_777_215);\n     let _ = (x as f32).powi(3);\n+    let _ = (1.5_f32 + 1.0).cbrt();\n+    let _ = 1.5_f64.cbrt();\n+    let _ = 1.5_f64.sqrt();\n+    let _ = 1.5_f64.powi(3);\n+\n     // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);"}, {"sha": "d749aa2d48a418d79552a77eb44f403738217d0a", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e14e60af45ebc79f06eeeb75004e77de4658a80/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e14e60af45ebc79f06eeeb75004e77de4658a80/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=6e14e60af45ebc79f06eeeb75004e77de4658a80", "patch": "@@ -18,6 +18,11 @@ fn main() {\n     let _ = x.powf(-16_777_215.0);\n     let _ = (x as f32).powf(-16_777_215.0);\n     let _ = (x as f32).powf(3.0);\n+    let _ = (1.5_f32 + 1.0).powf(1.0 / 3.0);\n+    let _ = 1.5_f64.powf(1.0 / 3.0);\n+    let _ = 1.5_f64.powf(1.0 / 2.0);\n+    let _ = 1.5_f64.powf(3.0);\n+\n     // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);"}, {"sha": "e9693de8fc9090f47802fd465fd5aa5f66c91b07", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6e14e60af45ebc79f06eeeb75004e77de4658a80/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e14e60af45ebc79f06eeeb75004e77de4658a80/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=6e14e60af45ebc79f06eeeb75004e77de4658a80", "patch": "@@ -92,77 +92,101 @@ error: exponentiation with integer powers can be computed more efficiently\n LL |     let _ = (x as f32).powf(3.0);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x as f32).powi(3)`\n \n+error: cube-root of a number can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:21:13\n+   |\n+LL |     let _ = (1.5_f32 + 1.0).powf(1.0 / 3.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(1.5_f32 + 1.0).cbrt()`\n+\n+error: cube-root of a number can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:22:13\n+   |\n+LL |     let _ = 1.5_f64.powf(1.0 / 3.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.5_f64.cbrt()`\n+\n+error: square-root of a number can be computed more efficiently and accurately\n+  --> $DIR/floating_point_powf.rs:23:13\n+   |\n+LL |     let _ = 1.5_f64.powf(1.0 / 2.0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.5_f64.sqrt()`\n+\n+error: exponentiation with integer powers can be computed more efficiently\n+  --> $DIR/floating_point_powf.rs:24:13\n+   |\n+LL |     let _ = 1.5_f64.powf(3.0);\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `1.5_f64.powi(3)`\n+\n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:28:13\n+  --> $DIR/floating_point_powf.rs:33:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:29:13\n+  --> $DIR/floating_point_powf.rs:34:13\n    |\n LL |     let _ = 2f64.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:30:13\n+  --> $DIR/floating_point_powf.rs:35:13\n    |\n LL |     let _ = 2f64.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:31:13\n+  --> $DIR/floating_point_powf.rs:36:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:32:13\n+  --> $DIR/floating_point_powf.rs:37:13\n    |\n LL |     let _ = std::f64::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:33:13\n+  --> $DIR/floating_point_powf.rs:38:13\n    |\n LL |     let _ = std::f64::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:34:13\n+  --> $DIR/floating_point_powf.rs:39:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:35:13\n+  --> $DIR/floating_point_powf.rs:40:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:36:13\n+  --> $DIR/floating_point_powf.rs:41:13\n    |\n LL |     let _ = x.powf(3.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(3)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:37:13\n+  --> $DIR/floating_point_powf.rs:42:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:38:13\n+  --> $DIR/floating_point_powf.rs:43:13\n    |\n LL |     let _ = x.powf(-2_147_483_648.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-2_147_483_648)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:39:13\n+  --> $DIR/floating_point_powf.rs:44:13\n    |\n LL |     let _ = x.powf(2_147_483_647.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2_147_483_647)`\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 31 previous errors\n "}]}