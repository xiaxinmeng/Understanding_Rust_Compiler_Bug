{"sha": "0fcabec6204065a66b35e3a4aed1b1d9fada409c", "node_id": "C_kwDOAAsO6NoAKDBmY2FiZWM2MjA0MDY1YTY2YjM1ZTNhNGFlZDFiMWQ5ZmFkYTQwOWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-24T16:20:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T16:20:11Z"}, "message": "Rollup merge of #100888 - spastorino:coherence-negative-impls-implied-bounds, r=lcnr\n\nCoherence negative impls implied bounds\n\nFixes #93875\n\nThis PR is rebased on top of #100789 and it would need to include that one which is already r+ed.\n\nr? ``@nikomatsakis``\n\ncc ``@lcnr`` (which I've talked about https://github.com/rust-lang/rust/commit/3222f420d9d2312efe0735eb48160c7b070adc54, I guess after you finish your reordering of modules and work with OutlivesEnvironmentEnv this commit can just be reverted).", "tree": {"sha": "7b2eea4e8fe4da11d52920851acb570eb99ac943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b2eea4e8fe4da11d52920851acb570eb99ac943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fcabec6204065a66b35e3a4aed1b1d9fada409c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBk+7CRBK7hj4Ov3rIwAAf4kIAAtVqDdF4qB7oa7ejaArs2hv\nRQ789ZIm6q1qldqP8Kp1sznJ8iQBM5YhqXgJVLMg3sxNmlhpoezqGnxLGoIPfi/z\nS18HGdEuP0QzhSk+V5pkDicK1BlWGkTYSYp2wb4lHn9unHBEC1PFskb0Z8flL1is\nu55K/DmQ2KhwKkHbcqKFAsGQHU7TDkWU7C/rc6SsMs4FuIKxgUpXV02JwwbVybK5\nESXWSpFmIzFp7uK85CA2MpiLBjN4lCdEZSesCh9AyWOrW6uCbzHkyq92mWry5h84\n8Gt4/IvgowbEvS+aXeC1dgxqPekUzu8irvdROn3pik+sl6yQljijMAlrW94la8k=\n=+x3r\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b2eea4e8fe4da11d52920851acb570eb99ac943\nparent e802df9e8b2232b7a105eba75852c55f33019c1b\nparent 4da14ef50eb697298f36d41f91cb02dc800275bf\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661358011 +0200\ncommitter GitHub <noreply@github.com> 1661358011 +0200\n\nRollup merge of #100888 - spastorino:coherence-negative-impls-implied-bounds, r=lcnr\n\nCoherence negative impls implied bounds\n\nFixes #93875\n\nThis PR is rebased on top of #100789 and it would need to include that one which is already r+ed.\n\nr? ``@nikomatsakis``\n\ncc ``@lcnr`` (which I've talked about https://github.com/rust-lang/rust/commit/3222f420d9d2312efe0735eb48160c7b070adc54, I guess after you finish your reordering of modules and work with OutlivesEnvironmentEnv this commit can just be reverted).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcabec6204065a66b35e3a4aed1b1d9fada409c", "html_url": "https://github.com/rust-lang/rust/commit/0fcabec6204065a66b35e3a4aed1b1d9fada409c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fcabec6204065a66b35e3a4aed1b1d9fada409c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e802df9e8b2232b7a105eba75852c55f33019c1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e802df9e8b2232b7a105eba75852c55f33019c1b", "html_url": "https://github.com/rust-lang/rust/commit/e802df9e8b2232b7a105eba75852c55f33019c1b"}, {"sha": "4da14ef50eb697298f36d41f91cb02dc800275bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da14ef50eb697298f36d41f91cb02dc800275bf", "html_url": "https://github.com/rust-lang/rust/commit/4da14ef50eb697298f36d41f91cb02dc800275bf"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "ce48d4c99e9de1805c8c466c4459cdd945a0ad0d", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -20,6 +20,7 @@\n #![feature(let_else)]\n #![feature(if_let_guard)]\n #![feature(never_type)]\n+#![feature(type_alias_impl_trait)]\n #![recursion_limit = \"512\"] // For rustdoc\n \n #[macro_use]"}, {"sha": "292787d4dbb24563f4fb6b76b04f951a784c9df2", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -6,16 +6,18 @@\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::infer::{CombinedSnapshot, InferOk};\n+use crate::traits::outlives_bounds::InferCtxtExt as _;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n-    self, Normalized, Obligation, ObligationCause, PredicateObligation, PredicateObligations,\n-    SelectionContext,\n+    self, Normalized, Obligation, ObligationCause, ObligationCtxt, PredicateObligation,\n+    PredicateObligations, SelectionContext,\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::CRATE_HIR_ID;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::util;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n@@ -322,7 +324,7 @@ fn negative_impl<'cx, 'tcx>(\n         let (subject2, obligations) =\n             impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n \n-        !equate(&infcx, impl_env, subject1, subject2, obligations)\n+        !equate(&infcx, impl_env, subject1, subject2, obligations, impl1_def_id)\n     })\n }\n \n@@ -332,6 +334,7 @@ fn equate<'cx, 'tcx>(\n     subject1: ImplSubject<'tcx>,\n     subject2: ImplSubject<'tcx>,\n     obligations: impl Iterator<Item = PredicateObligation<'tcx>>,\n+    body_def_id: DefId,\n ) -> bool {\n     // do the impls unify? If not, not disjoint.\n     let Ok(InferOk { obligations: more_obligations, .. }) =\n@@ -342,8 +345,10 @@ fn equate<'cx, 'tcx>(\n     };\n \n     let selcx = &mut SelectionContext::new(&infcx);\n-    let opt_failing_obligation =\n-        obligations.into_iter().chain(more_obligations).find(|o| negative_impl_exists(selcx, o));\n+    let opt_failing_obligation = obligations\n+        .into_iter()\n+        .chain(more_obligations)\n+        .find(|o| negative_impl_exists(selcx, o, body_def_id));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -358,14 +363,15 @@ fn equate<'cx, 'tcx>(\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n     o: &PredicateObligation<'tcx>,\n+    body_def_id: DefId,\n ) -> bool {\n-    if resolve_negative_obligation(selcx.infcx().fork(), o) {\n+    if resolve_negative_obligation(selcx.infcx().fork(), o, body_def_id) {\n         return true;\n     }\n \n     // Try to prove a negative obligation exists for super predicates\n     for o in util::elaborate_predicates(selcx.tcx(), iter::once(o.predicate)) {\n-        if resolve_negative_obligation(selcx.infcx().fork(), &o) {\n+        if resolve_negative_obligation(selcx.infcx().fork(), &o, body_def_id) {\n             return true;\n         }\n     }\n@@ -377,6 +383,7 @@ fn negative_impl_exists<'cx, 'tcx>(\n fn resolve_negative_obligation<'cx, 'tcx>(\n     infcx: InferCtxt<'cx, 'tcx>,\n     o: &PredicateObligation<'tcx>,\n+    body_def_id: DefId,\n ) -> bool {\n     let tcx = infcx.tcx;\n \n@@ -385,12 +392,24 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n     };\n \n     let param_env = o.param_env;\n-    let errors = super::fully_solve_obligation(&infcx, o);\n-    if !errors.is_empty() {\n+    if !super::fully_solve_obligation(&infcx, o).is_empty() {\n         return false;\n     }\n \n-    let outlives_env = OutlivesEnvironment::new(param_env);\n+    let (body_id, body_def_id) = if let Some(body_def_id) = body_def_id.as_local() {\n+        (tcx.hir().local_def_id_to_hir_id(body_def_id), body_def_id)\n+    } else {\n+        (CRATE_HIR_ID, CRATE_DEF_ID)\n+    };\n+\n+    let ocx = ObligationCtxt::new(&infcx);\n+    let wf_tys = ocx.assumed_wf_types(param_env, DUMMY_SP, body_def_id);\n+    let outlives_env = OutlivesEnvironment::with_bounds(\n+        param_env,\n+        Some(&infcx),\n+        infcx.implied_bounds_tys(param_env, body_id, wf_tys),\n+    );\n+\n     infcx.process_registered_region_obligations(outlives_env.region_bound_pairs(), param_env);\n \n     infcx.resolve_regions(&outlives_env).is_empty()"}, {"sha": "904c81f9215c01d2d3949805524ccfe5a2a09e0d", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -13,6 +13,7 @@ mod fulfill;\n pub mod misc;\n mod object_safety;\n mod on_unimplemented;\n+pub mod outlives_bounds;\n mod project;\n pub mod query;\n pub(crate) mod relationships;"}, {"sha": "a4b540182280b601b0115adfa63090fba8035d60", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -1,11 +1,11 @@\n+use crate::infer::InferCtxt;\n+use crate::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n+use crate::traits::query::NoSolution;\n+use crate::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::HirId;\n use rustc_middle::ty::{self, ParamEnv, Ty};\n-use rustc_trait_selection::infer::InferCtxt;\n-use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n-use rustc_trait_selection::traits::query::NoSolution;\n-use rustc_trait_selection::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n ", "previous_filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs"}, {"sha": "804306814a24127b2c352a21ec17364e31c0a077", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -1,6 +1,5 @@\n use super::potentially_plural_count;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n-use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n@@ -17,6 +16,7 @@ use rustc_middle::ty::{self, DefIdTree};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n+use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, ObligationCtxt, Reveal,\n };"}, {"sha": "ce42647c837a54844f8f621668c376ad1e149862", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -1,5 +1,4 @@\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n-use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -22,6 +21,7 @@ use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n+use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n     self, ObligationCause, ObligationCauseCode, ObligationCtxt, WellFormedLoc,"}, {"sha": "2741d9f776ce2bd4313a80e1801ce1ee119c5aed", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -67,7 +67,6 @@\n \n use crate::constrained_generic_params as cgp;\n use crate::errors::SubstsOnOverriddenImpl;\n-use crate::outlives::outlives_bounds::InferCtxtExt as _;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -79,6 +78,7 @@ use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n+use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, translate_substs, wf, ObligationCtxt};\n \n pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {"}, {"sha": "e50c267659e3f3b5a754e80966f59d2ea23eb75c", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -9,7 +9,6 @@ use rustc_span::Span;\n \n mod explicit;\n mod implicit_infer;\n-pub(crate) mod outlives_bounds;\n /// Code to write unit test for outlives.\n pub mod test;\n mod utils;"}, {"sha": "3acf0d8d39ab96e97126c43eb537afd9bc218ad3", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fcabec6204065a66b35e3a4aed1b1d9fada409c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcabec6204065a66b35e3a4aed1b1d9fada409c/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs?ref=0fcabec6204065a66b35e3a4aed1b1d9fada409c", "patch": "@@ -1,9 +1,9 @@\n // revisions: stock with_negative_coherence\n+//[with_negative_coherence] check-pass\n+\n #![feature(negative_impls)]\n #![cfg_attr(with_negative_coherence, feature(with_negative_coherence))]\n \n-// FIXME: this should compile\n-\n trait MyPredicate<'a> {}\n \n impl<'a, T> !MyPredicate<'a> for &'a T where T: 'a {}\n@@ -12,6 +12,6 @@ trait MyTrait<'a> {}\n \n impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n impl<'a, T> MyTrait<'a> for &'a T {}\n-//~^ ERROR: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n+//[stock]~^ ERROR: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n \n fn main() {}"}, {"sha": "097cc4e0fe3e67ef63d66d392917c57087fbb2c1", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e802df9e8b2232b7a105eba75852c55f33019c1b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e802df9e8b2232b7a105eba75852c55f33019c1b/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.with_negative_coherence.stderr?ref=e802df9e8b2232b7a105eba75852c55f33019c1b", "patch": "@@ -1,11 +0,0 @@\n-error[E0119]: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n-  --> $DIR/coherence-negative-outlives-lifetimes.rs:14:1\n-   |\n-LL | impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n-   | ---------------------------------------------- first implementation here\n-LL | impl<'a, T> MyTrait<'a> for &'a T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0119`."}]}