{"sha": "4f76db43e65c6f500b0024be59510814912a0943", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNzZkYjQzZTY1YzZmNTAwYjAwMjRiZTU5NTEwODE0OTEyYTA5NDM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T11:54:39Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-11T19:33:44Z"}, "message": "Convert std::sha1 and std::rand over to ifaces", "tree": {"sha": "7fcddc83ac71283d46863689af00af89cc49a673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcddc83ac71283d46863689af00af89cc49a673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f76db43e65c6f500b0024be59510814912a0943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f76db43e65c6f500b0024be59510814912a0943", "html_url": "https://github.com/rust-lang/rust/commit/4f76db43e65c6f500b0024be59510814912a0943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f76db43e65c6f500b0024be59510814912a0943/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26610dbbc8d39f98b11797b16cabdb573c00863d", "url": "https://api.github.com/repos/rust-lang/rust/commits/26610dbbc8d39f98b11797b16cabdb573c00863d", "html_url": "https://github.com/rust-lang/rust/commit/26610dbbc8d39f98b11797b16cabdb573c00863d"}], "stats": {"total": 78, "additions": 40, "deletions": 38}, "files": [{"sha": "236b0bd8a3916fda588205f5d7506e8ea932b615", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f76db43e65c6f500b0024be59510814912a0943/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f76db43e65c6f500b0024be59510814912a0943/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=4f76db43e65c6f500b0024be59510814912a0943", "patch": "@@ -18,7 +18,7 @@ Obj: rng\n \n A random number generator\n */\n-type rng = obj {\n+iface rng {\n     /*\n     Method: next\n \n@@ -46,7 +46,7 @@ type rng = obj {\n     Return a random byte string.\n     */\n     fn gen_bytes(len: uint) -> [u8];\n-};\n+}\n \n resource rand_res(c: rustrt::rctx) { rustrt::rand_free(c); }\n \n@@ -58,12 +58,12 @@ Function: mk_rng\n Create a random number generator\n */\n fn mk_rng() -> rng {\n-    obj rt_rng(c: @rand_res) {\n-        fn next() -> u32 { ret rustrt::rand_next(**c); }\n+    impl of rng for @rand_res {\n+        fn next() -> u32 { ret rustrt::rand_next(**self); }\n         fn next_float() -> float {\n-          let u1 = rustrt::rand_next(**c) as float;\n-          let u2 = rustrt::rand_next(**c) as float;\n-          let u3 = rustrt::rand_next(**c) as float;\n+          let u1 = rustrt::rand_next(**self) as float;\n+          let u2 = rustrt::rand_next(**self) as float;\n+          let u3 = rustrt::rand_next(**self) as float;\n           let scale = u32::max_value as float;\n           ret ((u1 / scale + u2) / scale + u3) / scale;\n         }\n@@ -74,7 +74,7 @@ fn mk_rng() -> rng {\n             let s = \"\";\n             let i = 0u;\n             while (i < len) {\n-                let n = rustrt::rand_next(**c) as uint %\n+                let n = rustrt::rand_next(**self) as uint %\n                     str::char_len(charset);\n                 s = s + str::from_char(str::char_at(charset, n));\n                 i += 1u;\n@@ -85,14 +85,14 @@ fn mk_rng() -> rng {\n             let v = [];\n             let i = 0u;\n             while i < len {\n-                let n = rustrt::rand_next(**c) as uint;\n+                let n = rustrt::rand_next(**self) as uint;\n                 v += [(n % (u8::max_value as uint)) as u8];\n                 i += 1u;\n             }\n             v\n         }\n     }\n-    ret rt_rng(@rand_res(rustrt::rand_new()));\n+    @rand_res(rustrt::rand_new()) as rng\n }\n // Local Variables:\n // mode: rust;"}, {"sha": "0e28731411119ca0ba3216aba26461481a2c0f22", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4f76db43e65c6f500b0024be59510814912a0943/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f76db43e65c6f500b0024be59510814912a0943/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=4f76db43e65c6f500b0024be59510814912a0943", "patch": "@@ -25,11 +25,11 @@ export mk_sha1;\n /* Section: Types */\n \n /*\n-Obj: sha1\n+Iface: sha1\n \n-The SHA-1 object\n+The SHA-1 interface\n */\n-type sha1 = obj {\n+iface sha1 {\n     /*\n     Method: input\n \n@@ -62,7 +62,7 @@ type sha1 = obj {\n     Reset the SHA-1 state for reuse\n     */\n     fn reset();\n-};\n+}\n \n /* Section: Operations */\n \n@@ -248,39 +248,41 @@ fn mk_sha1() -> sha1 {\n         st.msg_block[63] = st.len_low & 0xFFu32 as u8;\n         process_msg_block(st);\n     }\n-    obj sha1(st: sha1state) {\n+\n+    impl of sha1 for sha1state {\n         fn reset() {\n             // FIXME: Should be typestate precondition\n-            assert (vec::len(st.h) == digest_buf_len);\n-            st.len_low = 0u32;\n-            st.len_high = 0u32;\n-            st.msg_block_idx = 0u;\n-            st.h[0] = 0x67452301u32;\n-            st.h[1] = 0xEFCDAB89u32;\n-            st.h[2] = 0x98BADCFEu32;\n-            st.h[3] = 0x10325476u32;\n-            st.h[4] = 0xC3D2E1F0u32;\n-            st.computed = false;\n+            assert (vec::len(self.h) == digest_buf_len);\n+            self.len_low = 0u32;\n+            self.len_high = 0u32;\n+            self.msg_block_idx = 0u;\n+            self.h[0] = 0x67452301u32;\n+            self.h[1] = 0xEFCDAB89u32;\n+            self.h[2] = 0x98BADCFEu32;\n+            self.h[3] = 0x10325476u32;\n+            self.h[4] = 0xC3D2E1F0u32;\n+            self.computed = false;\n         }\n-        fn input(msg: [u8]) { add_input(st, msg); }\n-        fn input_str(msg: str) { add_input(st, str::bytes(msg)); }\n-        fn result() -> [u8] { ret mk_result(st); }\n+        fn input(msg: [u8]) { add_input(self, msg); }\n+        fn input_str(msg: str) { add_input(self, str::bytes(msg)); }\n+        fn result() -> [u8] { ret mk_result(self); }\n         fn result_str() -> str {\n-            let r = mk_result(st);\n+            let r = mk_result(self);\n             let s = \"\";\n             for b: u8 in r { s += uint::to_str(b as uint, 16u); }\n             ret s;\n         }\n     }\n-    let st =\n-        {h: vec::init_elt_mut::<u32>(0u32, digest_buf_len),\n-         mutable len_low: 0u32,\n-         mutable len_high: 0u32,\n-         msg_block: vec::init_elt_mut::<u8>(0u8, msg_block_len),\n-         mutable msg_block_idx: 0u,\n-         mutable computed: false,\n-         work_buf: vec::init_elt_mut::<u32>(0u32, work_buf_len)};\n-    let sh = sha1(st);\n+    let st = {\n+        h: vec::init_elt_mut(0u32, digest_buf_len),\n+        mutable len_low: 0u32,\n+        mutable len_high: 0u32,\n+        msg_block: vec::init_elt_mut(0u8, msg_block_len),\n+        mutable msg_block_idx: 0u,\n+        mutable computed: false,\n+        work_buf: vec::init_elt_mut(0u32, work_buf_len)\n+    };\n+    let sh = st as sha1;\n     sh.reset();\n     ret sh;\n }"}]}