{"sha": "0dd4bfa35616d43bb6b24f209baade9270afdb59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDRiZmEzNTYxNmQ0M2JiNmIyNGYyMDliYWFkZTkyNzBhZmRiNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-18T21:56:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-18T21:56:39Z"}, "message": "Rollup merge of #57302 - sinkuu:unused_assignments_fp, r=estebank\n\nFix unused_assignments false positive\n\nFixes #22630.\n\nIn liveness analysis, make `continue` jump to the loop condition's `LiveNode` (`cond` as in comment) instead of the loop's one (`expr`).\n\nhttps://github.com/rust-lang/rust/blob/069b0c410808c1d1d33b495e048b1186e9f8d57f/src/librustc/middle/liveness.rs#L1358-L1370", "tree": {"sha": "d33f6cbf0189accd484e103303b9d88c1fe1e42d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33f6cbf0189accd484e103303b9d88c1fe1e42d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd4bfa35616d43bb6b24f209baade9270afdb59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQkuXCRBK7hj4Ov3rIwAAdHIIABlnSKwDi6N93RH0PYlLwZGL\nEBeKNXcfJFHzIgZlHchGJrPYT4rM8rUo/VH3yxWWfy2wKZOs7MKxor6kHVcofQDQ\nlelbnNhokov5dezE4ty7kTO8c+tTmj2xuZnuaI/T8X+d485SgOJu3Uaaxzue1zTa\nTwW74RxbIb+F2mwMbd9at08M9bAZ3srdO1Z6DohqrEbDfMO5KV1munQklHO253W2\niZG3pyOTRsyA16JAr0sE5iO5EYpUtjKE0HixXBr2vIskNe9zrjWzrE1V7lQwMBtm\nY0SZ0L4jngOJE0gV4a+wy9oDOEGsLySCJvWJsoQrZxrUE8oUPJhIhDVFyMyqlOk=\n=LRiT\n-----END PGP SIGNATURE-----\n", "payload": "tree d33f6cbf0189accd484e103303b9d88c1fe1e42d\nparent bb683b9f3aacffd5db61c015a519349dbe4ed969\nparent 069b0c410808c1d1d33b495e048b1186e9f8d57f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547848599 +0100\ncommitter GitHub <noreply@github.com> 1547848599 +0100\n\nRollup merge of #57302 - sinkuu:unused_assignments_fp, r=estebank\n\nFix unused_assignments false positive\n\nFixes #22630.\n\nIn liveness analysis, make `continue` jump to the loop condition's `LiveNode` (`cond` as in comment) instead of the loop's one (`expr`).\n\nhttps://github.com/rust-lang/rust/blob/069b0c410808c1d1d33b495e048b1186e9f8d57f/src/librustc/middle/liveness.rs#L1358-L1370\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd4bfa35616d43bb6b24f209baade9270afdb59", "html_url": "https://github.com/rust-lang/rust/commit/0dd4bfa35616d43bb6b24f209baade9270afdb59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd4bfa35616d43bb6b24f209baade9270afdb59/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb683b9f3aacffd5db61c015a519349dbe4ed969", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb683b9f3aacffd5db61c015a519349dbe4ed969", "html_url": "https://github.com/rust-lang/rust/commit/bb683b9f3aacffd5db61c015a519349dbe4ed969"}, {"sha": "069b0c410808c1d1d33b495e048b1186e9f8d57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/069b0c410808c1d1d33b495e048b1186e9f8d57f", "html_url": "https://github.com/rust-lang/rust/commit/069b0c410808c1d1d33b495e048b1186e9f8d57f"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "2ca823929fd3885a28629e1b94f341697c2e3f6f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4bfa35616d43bb6b24f209baade9270afdb59/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4bfa35616d43bb6b24f209baade9270afdb59/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=0dd4bfa35616d43bb6b24f209baade9270afdb59", "patch": "@@ -911,17 +911,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn compute(&mut self, body: &hir::Expr) -> LiveNode {\n-        // if there is a `break` or `again` at the top level, then it's\n-        // effectively a return---this only occurs in `for` loops,\n-        // where the body is really a closure.\n-\n         debug!(\"compute: using id for body, {}\", self.ir.tcx.hir().node_to_pretty_string(body.id));\n \n-        let exit_ln = self.s.exit_ln;\n-\n-        self.break_ln.insert(body.id, exit_ln);\n-        self.cont_ln.insert(body.id, exit_ln);\n-\n         // the fallthrough exit is only for those cases where we do not\n         // explicitly return:\n         let s = self.s;\n@@ -1024,19 +1015,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&e, succ)\n             }\n \n-            hir::ExprKind::Closure(.., blk_id, _, _) => {\n+            hir::ExprKind::Closure(..) => {\n                 debug!(\"{} is an ExprKind::Closure\",\n                        self.ir.tcx.hir().node_to_pretty_string(expr.id));\n \n-                // The next-node for a break is the successor of the entire\n-                // loop. The next-node for a continue is the top of this loop.\n-                let node = self.live_node(expr.hir_id, expr.span);\n-\n-                let break_ln = succ;\n-                let cont_ln = node;\n-                self.break_ln.insert(blk_id.node_id, break_ln);\n-                self.cont_ln.insert(blk_id.node_id, cont_ln);\n-\n                 // the construction of a closure itself is not important,\n                 // but we have to consider the closed over variables.\n                 let caps = self.ir.capture_info_map.get(&expr.id).cloned().unwrap_or_else(||\n@@ -1407,15 +1389,16 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         debug!(\"propagate_through_loop: using id for loop body {} {}\",\n                expr.id, self.ir.tcx.hir().node_to_pretty_string(body.id));\n \n-        let break_ln = succ;\n-        let cont_ln = ln;\n-        self.break_ln.insert(expr.id, break_ln);\n-        self.cont_ln.insert(expr.id, cont_ln);\n+\n+        self.break_ln.insert(expr.id, succ);\n \n         let cond_ln = match kind {\n             LoopLoop => ln,\n             WhileLoop(ref cond) => self.propagate_through_expr(&cond, ln),\n         };\n+\n+        self.cont_ln.insert(expr.id, cond_ln);\n+\n         let body_ln = self.propagate_through_block(body, cond_ln);\n \n         // repeat until fixed point is reached:"}, {"sha": "004663c85ee5018371b1e2dbe1601b573f752a55", "filename": "src/test/ui/liveness/liveness-dead.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4bfa35616d43bb6b24f209baade9270afdb59/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4bfa35616d43bb6b24f209baade9270afdb59/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.rs?ref=0dd4bfa35616d43bb6b24f209baade9270afdb59", "patch": "@@ -27,4 +27,13 @@ fn f5(mut x: i32) {\n     x = 4; //~ ERROR: value assigned to `x` is never read\n }\n \n+// #22630\n+fn f6() {\n+    let mut done = false;\n+    while !done {\n+        done = true; // no error\n+        continue;\n+    }\n+}\n+\n fn main() {}"}]}