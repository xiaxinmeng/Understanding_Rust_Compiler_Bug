{"sha": "02aacaba8f7584ee334303840ad88fcd513e3f13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYWFjYWJhOGY3NTg0ZWUzMzQzMDM4NDBhZDg4ZmNkNTEzZTNmMTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-13T19:00:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-14T21:35:14Z"}, "message": "Fix DeBruijn accounting. It used to be that all trait-refs were binders,\nbut now only poly-trait-refs are binders. Fixes #20831.", "tree": {"sha": "8d4f2e1c2d915f50802bbd8f76d14c7989e9a175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4f2e1c2d915f50802bbd8f76d14c7989e9a175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02aacaba8f7584ee334303840ad88fcd513e3f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02aacaba8f7584ee334303840ad88fcd513e3f13", "html_url": "https://github.com/rust-lang/rust/commit/02aacaba8f7584ee334303840ad88fcd513e3f13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02aacaba8f7584ee334303840ad88fcd513e3f13/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94a9f033eb79b3b4fb037722366644650e8e16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a9f033eb79b3b4fb037722366644650e8e16c", "html_url": "https://github.com/rust-lang/rust/commit/e94a9f033eb79b3b4fb037722366644650e8e16c"}], "stats": {"total": 148, "additions": 119, "deletions": 29}, "files": [{"sha": "6c8ab50a9936691a446ae1eda4e9a2dce800b170", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/02aacaba8f7584ee334303840ad88fcd513e3f13/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aacaba8f7584ee334303840ad88fcd513e3f13/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=02aacaba8f7584ee334303840ad88fcd513e3f13", "patch": "@@ -516,8 +516,15 @@ pub fn instantiate_poly_trait_ref<'tcx>(\n {\n     let mut projections = Vec::new();\n \n+    // the trait reference introduces a binding level here, so\n+    // we need to shift the `rscope`. It'd be nice if we could\n+    // do away with this rscope stuff and work this knowledge\n+    // into resolve_lifetimes, as we do with non-omitted\n+    // lifetimes. Oh well, not there yet.\n+    let shifted_rscope = ShiftedRscope::new(rscope);\n+\n     let trait_ref =\n-        instantiate_trait_ref(this, rscope, &ast_trait_ref.trait_ref,\n+        instantiate_trait_ref(this, &shifted_rscope, &ast_trait_ref.trait_ref,\n                               self_ty, Some(&mut projections));\n \n     for projection in projections.into_iter() {\n@@ -561,6 +568,29 @@ pub fn instantiate_trait_ref<'tcx>(\n     }\n }\n \n+fn object_path_to_poly_trait_ref<'a,'tcx>(\n+    this: &AstConv<'tcx>,\n+    rscope: &RegionScope,\n+    trait_def_id: ast::DefId,\n+    path: &ast::Path,\n+    mut projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n+    -> ty::PolyTraitRef<'tcx>\n+{\n+    // we are introducing a binder here, so shift the\n+    // anonymous regions depth to account for that\n+    let shifted_rscope = ShiftedRscope::new(rscope);\n+\n+    let mut tmp = Vec::new();\n+    let trait_ref = ty::Binder(ast_path_to_trait_ref(this,\n+                                                     &shifted_rscope,\n+                                                     trait_def_id,\n+                                                     None,\n+                                                     path,\n+                                                     Some(&mut tmp)));\n+    projections.extend(tmp.into_iter().map(ty::Binder));\n+    trait_ref\n+}\n+\n fn ast_path_to_trait_ref<'a,'tcx>(\n     this: &AstConv<'tcx>,\n     rscope: &RegionScope,\n@@ -573,13 +603,6 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n     debug!(\"ast_path_to_trait_ref {:?}\", path);\n     let trait_def = this.get_trait_def(trait_def_id);\n \n-    // the trait reference introduces a binding level here, so\n-    // we need to shift the `rscope`. It'd be nice if we could\n-    // do away with this rscope stuff and work this knowledge\n-    // into resolve_lifetimes, as we do with non-omitted\n-    // lifetimes. Oh well, not there yet.\n-    let shifted_rscope = ShiftedRscope::new(rscope);\n-\n     let (regions, types, assoc_bindings) = match path.segments.last().unwrap().parameters {\n         ast::AngleBracketedParameters(ref data) => {\n             // For now, require that parenthetical notation be used\n@@ -595,7 +618,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                             the crate attributes to enable\");\n             }\n \n-            convert_angle_bracketed_parameters(this, &shifted_rscope, data)\n+            convert_angle_bracketed_parameters(this, rscope, data)\n         }\n         ast::ParenthesizedParameters(ref data) => {\n             // For now, require that parenthetical notation be used\n@@ -616,7 +639,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n     };\n \n     let substs = create_substs_for_ast_path(this,\n-                                            &shifted_rscope,\n+                                            rscope,\n                                             path.span,\n                                             &trait_def.generics,\n                                             self_ty,\n@@ -851,15 +874,11 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n             match this.tcx().def_map.borrow().get(&id) {\n                 Some(&def::DefTrait(trait_def_id)) => {\n                     let mut projection_bounds = Vec::new();\n-                    let trait_ref = ty::Binder(ast_path_to_trait_ref(this,\n-                                                                     rscope,\n-                                                                     trait_def_id,\n-                                                                     None,\n-                                                                     path,\n-                                                                     Some(&mut projection_bounds)));\n-                    let projection_bounds = projection_bounds.into_iter()\n-                                                             .map(ty::Binder)\n-                                                             .collect();\n+                    let trait_ref = object_path_to_poly_trait_ref(this,\n+                                                                  rscope,\n+                                                                  trait_def_id,\n+                                                                  path,\n+                                                                  &mut projection_bounds);\n                     Ok((trait_ref, projection_bounds))\n                 }\n                 _ => {\n@@ -1095,16 +1114,13 @@ pub fn ast_ty_to_ty<'tcx>(\n                         // N.B. this case overlaps somewhat with\n                         // TyObjectSum, see that fn for details\n                         let mut projection_bounds = Vec::new();\n-                        let trait_ref = ast_path_to_trait_ref(this,\n-                                                              rscope,\n-                                                              trait_def_id,\n-                                                              None,\n-                                                              path,\n-                                                              Some(&mut projection_bounds));\n-                        let trait_ref = ty::Binder(trait_ref);\n-                        let projection_bounds = projection_bounds.into_iter()\n-                                                                 .map(ty::Binder)\n-                                                                 .collect();\n+\n+                        let trait_ref = object_path_to_poly_trait_ref(this,\n+                                                                      rscope,\n+                                                                      trait_def_id,\n+                                                                      path,\n+                                                                      &mut projection_bounds);\n+\n                         trait_ref_to_object_type(this, rscope, path.span,\n                                                  trait_ref, projection_bounds, &[])\n                     }"}, {"sha": "aaf45f27398914cdc84574b3c91c73fbb0ec22ac", "filename": "src/test/compile-fail/issue-20831-debruijn.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/02aacaba8f7584ee334303840ad88fcd513e3f13/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aacaba8f7584ee334303840ad88fcd513e3f13/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs?ref=02aacaba8f7584ee334303840ad88fcd513e3f13", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #20831: debruijn index account was thrown off\n+// by the (anonymous) lifetime in `<Self as Publisher>::Output`\n+// below. Note that changing to a named lifetime made the problem go\n+// away.\n+\n+use std::ops::{Shl, Shr};\n+use std::cell::RefCell;\n+\n+pub trait Subscriber {\n+    type Input;\n+}\n+\n+pub trait Publisher<'a> {\n+    type Output;\n+    fn subscribe(&mut self, Box<Subscriber<Input=Self::Output> + 'a>);\n+}\n+\n+pub trait Processor<'a> : Subscriber + Publisher<'a> { }\n+\n+impl<'a, P> Processor<'a> for P where P : Subscriber + Publisher<'a> { }\n+\n+struct MyStruct<'a> {\n+    sub: Box<Subscriber<Input=u64> + 'a>\n+}\n+\n+impl<'a> Publisher<'a> for MyStruct<'a> {\n+    type Output = u64;\n+    fn subscribe(&mut self, t : Box<Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+        // Not obvious, but there is an implicit lifetime here -------^\n+        //~^^ ERROR cannot infer\n+        //\n+        // The fact that `Publisher` is using an implicit lifetime is\n+        // what was causing the debruijn accounting to be off, so\n+        // leave it that way!\n+        self.sub = t;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b9d3ed49c625f6bb1376a2993c18d294e8d45883", "filename": "src/test/run-pass/regions-debruijn-of-object.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/02aacaba8f7584ee334303840ad88fcd513e3f13/src%2Ftest%2Frun-pass%2Fregions-debruijn-of-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aacaba8f7584ee334303840ad88fcd513e3f13/src%2Ftest%2Frun-pass%2Fregions-debruijn-of-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-debruijn-of-object.rs?ref=02aacaba8f7584ee334303840ad88fcd513e3f13", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct ctxt<'tcx> {\n+    x: &'tcx i32\n+}\n+\n+trait AstConv<'tcx> {\n+    fn tcx<'a>(&'a self) -> &'a ctxt<'tcx>;\n+}\n+\n+fn foo(conv: &AstConv) { }\n+\n+fn bar<'tcx>(conv: &AstConv<'tcx>) {\n+    foo(conv)\n+}\n+\n+fn main() { }"}]}