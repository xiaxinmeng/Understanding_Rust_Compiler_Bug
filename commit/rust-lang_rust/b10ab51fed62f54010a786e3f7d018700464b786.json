{"sha": "b10ab51fed62f54010a786e3f7d018700464b786", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMGFiNTFmZWQ2MmY1NDAxMGE3ODZlM2Y3ZDAxODcwMDQ2NGI3ODY=", "commit": {"author": {"name": "Nipunn Koorapati", "email": "nipunn1313@gmail.com", "date": "2021-08-08T01:00:51Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-09-09T04:27:51Z"}, "message": "rustfmt doc code blocks with multiple comma-separated attributes\n\nAdded test covering this. Chose to treat the code block\nas rust if and only if all of the comma-separated attributes\nare rust-valid. Chose to allow/preserve whitespace around commas\n\nFixes #3158", "tree": {"sha": "da141613b8f2601e1f4396eb228be184381fa065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da141613b8f2601e1f4396eb228be184381fa065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b10ab51fed62f54010a786e3f7d018700464b786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b10ab51fed62f54010a786e3f7d018700464b786", "html_url": "https://github.com/rust-lang/rust/commit/b10ab51fed62f54010a786e3f7d018700464b786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b10ab51fed62f54010a786e3f7d018700464b786/comments", "author": {"login": "nipunn1313", "id": 1300387, "node_id": "MDQ6VXNlcjEzMDAzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nipunn1313", "html_url": "https://github.com/nipunn1313", "followers_url": "https://api.github.com/users/nipunn1313/followers", "following_url": "https://api.github.com/users/nipunn1313/following{/other_user}", "gists_url": "https://api.github.com/users/nipunn1313/gists{/gist_id}", "starred_url": "https://api.github.com/users/nipunn1313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nipunn1313/subscriptions", "organizations_url": "https://api.github.com/users/nipunn1313/orgs", "repos_url": "https://api.github.com/users/nipunn1313/repos", "events_url": "https://api.github.com/users/nipunn1313/events{/privacy}", "received_events_url": "https://api.github.com/users/nipunn1313/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80688329c7bf696245b5ed6f3eeda6a80ab3721", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80688329c7bf696245b5ed6f3eeda6a80ab3721", "html_url": "https://github.com/rust-lang/rust/commit/a80688329c7bf696245b5ed6f3eeda6a80ab3721"}], "stats": {"total": 200, "additions": 171, "deletions": 29}, "files": [{"sha": "60825424858561d41ddddef355cc6845f17cef31", "filename": "src/comment.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b10ab51fed62f54010a786e3f7d018700464b786/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10ab51fed62f54010a786e3f7d018700464b786/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=b10ab51fed62f54010a786e3f7d018700464b786", "patch": "@@ -394,28 +394,26 @@ fn identify_comment(\n     }\n }\n \n-/// Attributes for code blocks in rustdoc.\n-/// See https://doc.rust-lang.org/rustdoc/print.html#attributes\n+/// Enum indicating if the code block contains rust based on attributes\n enum CodeBlockAttribute {\n     Rust,\n-    Ignore,\n-    Text,\n-    ShouldPanic,\n-    NoRun,\n-    CompileFail,\n+    NotRust,\n }\n \n impl CodeBlockAttribute {\n-    fn new(attribute: &str) -> CodeBlockAttribute {\n-        match attribute {\n-            \"rust\" | \"\" => CodeBlockAttribute::Rust,\n-            \"ignore\" => CodeBlockAttribute::Ignore,\n-            \"text\" => CodeBlockAttribute::Text,\n-            \"should_panic\" => CodeBlockAttribute::ShouldPanic,\n-            \"no_run\" => CodeBlockAttribute::NoRun,\n-            \"compile_fail\" => CodeBlockAttribute::CompileFail,\n-            _ => CodeBlockAttribute::Text,\n+    /// Parse comma separated attributes list. Return rust only if all\n+    /// attributes are valid rust attributes\n+    /// See https://doc.rust-lang.org/rustdoc/print.html#attributes\n+    fn new(attributes: &str) -> CodeBlockAttribute {\n+        for attribute in attributes.split(\",\") {\n+            match attribute.trim() {\n+                \"\" | \"rust\" | \"should_panic\" | \"no_run\" | \"edition2015\" | \"edition2018\"\n+                | \"edition2021\" => (),\n+                \"ignore\" | \"compile_fail\" | \"text\" => return CodeBlockAttribute::NotRust,\n+                _ => return CodeBlockAttribute::NotRust,\n+            }\n         }\n+        CodeBlockAttribute::Rust\n     }\n }\n \n@@ -649,25 +647,21 @@ impl<'a> CommentRewrite<'a> {\n         } else if self.code_block_attr.is_some() {\n             if line.starts_with(\"```\") {\n                 let code_block = match self.code_block_attr.as_ref().unwrap() {\n-                    CodeBlockAttribute::Ignore | CodeBlockAttribute::Text => {\n-                        trim_custom_comment_prefix(&self.code_block_buffer)\n-                    }\n-                    _ if self.code_block_buffer.is_empty() => String::new(),\n-                    _ => {\n+                    CodeBlockAttribute::Rust\n+                        if self.fmt.config.format_code_in_doc_comments()\n+                            && !self.code_block_buffer.is_empty() =>\n+                    {\n                         let mut config = self.fmt.config.clone();\n                         config.set().wrap_comments(false);\n-                        if config.format_code_in_doc_comments() {\n-                            if let Some(s) =\n-                                crate::format_code_block(&self.code_block_buffer, &config, false)\n-                            {\n-                                trim_custom_comment_prefix(&s.snippet)\n-                            } else {\n-                                trim_custom_comment_prefix(&self.code_block_buffer)\n-                            }\n+                        if let Some(s) =\n+                            crate::format_code_block(&self.code_block_buffer, &config, false)\n+                        {\n+                            trim_custom_comment_prefix(&s.snippet)\n                         } else {\n                             trim_custom_comment_prefix(&self.code_block_buffer)\n                         }\n                     }\n+                    _ => trim_custom_comment_prefix(&self.code_block_buffer),\n                 };\n                 if !code_block.is_empty() {\n                     self.result.push_str(&self.comment_line_separator);"}, {"sha": "315073db6af5a99864f3f418bd6a19fb3f95e33d", "filename": "tests/source/issue-3158.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b10ab51fed62f54010a786e3f7d018700464b786/tests%2Fsource%2Fissue-3158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10ab51fed62f54010a786e3f7d018700464b786/tests%2Fsource%2Fissue-3158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3158.rs?ref=b10ab51fed62f54010a786e3f7d018700464b786", "patch": "@@ -0,0 +1,74 @@\n+// rustfmt-format_code_in_doc_comments: true\n+\n+/// Should format\n+/// ```rust\n+/// assert!( false );\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic\n+/// assert!( false );\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic,edition2018\n+/// assert!( false );\n+/// ```\n+///\n+/// Should format\n+/// ```rust , should_panic , edition2018\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format\n+/// ```ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (not all are rust)\n+/// ```rust,ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```rust,compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Various unspecified ones that should format\n+/// ```\n+/// assert!( false );\n+/// ```\n+///\n+/// ```,\n+/// assert!( false );\n+/// ```\n+///\n+/// ```,,,,,\n+/// assert!( false );\n+/// ```\n+///\n+/// ```,,,  rust  ,,\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format\n+/// ```,,,  rust  ,  ignore,\n+/// assert!( false );\n+/// ```\n+///\n+/// Few empty ones\n+/// ```\n+/// ```\n+///\n+/// ```rust\n+/// ```\n+///\n+/// ```ignore\n+/// ```\n+fn foo() {}"}, {"sha": "4bbbdc1d039224eed7ad7dbeb510ba53f2689fda", "filename": "tests/target/issue-3158.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b10ab51fed62f54010a786e3f7d018700464b786/tests%2Ftarget%2Fissue-3158.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b10ab51fed62f54010a786e3f7d018700464b786/tests%2Ftarget%2Fissue-3158.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3158.rs?ref=b10ab51fed62f54010a786e3f7d018700464b786", "patch": "@@ -0,0 +1,74 @@\n+// rustfmt-format_code_in_doc_comments: true\n+\n+/// Should format\n+/// ```rust\n+/// assert!(false);\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic\n+/// assert!(false);\n+/// ```\n+///\n+/// Should format\n+/// ```rust,should_panic,edition2018\n+/// assert!(false);\n+/// ```\n+///\n+/// Should format\n+/// ```rust , should_panic , edition2018\n+/// assert!(false);\n+/// ```\n+///\n+/// Should not format\n+/// ```ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (not all are rust)\n+/// ```rust,ignore\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Should not format (rust compile_fail)\n+/// ```rust,compile_fail\n+/// assert!( false );\n+/// ```\n+///\n+/// Various unspecified ones that should format\n+/// ```\n+/// assert!(false);\n+/// ```\n+///\n+/// ```,\n+/// assert!(false);\n+/// ```\n+///\n+/// ```,,,,,\n+/// assert!(false);\n+/// ```\n+///\n+/// ```,,,  rust  ,,\n+/// assert!(false);\n+/// ```\n+///\n+/// Should not format\n+/// ```,,,  rust  ,  ignore,\n+/// assert!( false );\n+/// ```\n+///\n+/// Few empty ones\n+/// ```\n+/// ```\n+///\n+/// ```rust\n+/// ```\n+///\n+/// ```ignore\n+/// ```\n+fn foo() {}"}]}