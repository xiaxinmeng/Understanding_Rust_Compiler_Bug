{"sha": "0626afbcd23d9ef2e14617c609dc47765af117e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjZhZmJjZDIzZDllZjJlMTQ2MTdjNjA5ZGM0Nzc2NWFmMTE3ZTI=", "commit": {"author": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-09-29T14:13:08Z"}, "committer": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-09-29T14:18:27Z"}, "message": "First stab at fixing #54505", "tree": {"sha": "da468dd4f5c5f867f6885715059298cd31f82299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da468dd4f5c5f867f6885715059298cd31f82299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0626afbcd23d9ef2e14617c609dc47765af117e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0626afbcd23d9ef2e14617c609dc47765af117e2", "html_url": "https://github.com/rust-lang/rust/commit/0626afbcd23d9ef2e14617c609dc47765af117e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0626afbcd23d9ef2e14617c609dc47765af117e2/comments", "author": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7bc060c1564b19742fd241f40a02c9210e445c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7bc060c1564b19742fd241f40a02c9210e445c", "html_url": "https://github.com/rust-lang/rust/commit/7e7bc060c1564b19742fd241f40a02c9210e445c"}], "stats": {"total": 381, "additions": 378, "deletions": 3}, "files": [{"sha": "f53a8168548e5a589eb665c713909f9e2196e282", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=0626afbcd23d9ef2e14617c609dc47765af117e2", "patch": "@@ -310,9 +310,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = cm.span_to_snippet(sp) {\n                         let sugg_expr = match expr.node { // parenthesize if needed (Issue #46756)\n-                            hir::ExprKind::Cast(_, _) |\n-                            hir::ExprKind::Binary(_, _, _) => format!(\"({})\", src),\n-                            _ => src,\n+                            hir::ExprKind::Cast(_, _)        |\n+                            hir::ExprKind::Binary(_, _, _)   |\n+                            _ if self.is_range_literal(expr) => format!(\"({})\", src),\n+                            _                                => src,\n                         };\n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n@@ -374,6 +375,53 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n+    // This function checks if the specified expression is a built-in range literal\n+    // (See: librustc/hir/lowering.rs::LoweringContext::lower_expr() )\n+    fn is_range_literal(&self, expr: &hir::Expr) -> bool {\n+        use hir::{Path, QPath, ExprKind, TyKind};\n+\n+        // TODO how to work out std vs core here?\n+        let ops_path = [\"{{root}}\", \"std\", \"ops\"];\n+\n+        let is_range_path = |path: &Path| {\n+            let ident_names: Vec<_> = path.segments\n+                .iter()\n+                .map(|seg| seg.ident.as_str())\n+                .collect();\n+\n+            if let Some((last, preceding)) = ident_names.split_last() {\n+                last.starts_with(\"Range\") &&\n+                    preceding.len() == 3 &&\n+                    preceding.iter()\n+                        .zip(ops_path.iter())\n+                        .all(|(a, b)| a == b)\n+            } else {\n+                false\n+            }\n+        };\n+\n+        match expr.node {\n+            ExprKind::Struct(QPath::Resolved(None, ref path), _, _) |\n+            ExprKind::Path(QPath::Resolved(None, ref path)) => {\n+                return is_range_path(&path);\n+            }\n+\n+            ExprKind::Call(ref func, _) => {\n+                if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.node {\n+                    if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.node {\n+                        let calls_new = segment.ident.as_str() == \"new\";\n+\n+                        return is_range_path(&path) && calls_new;\n+                    }\n+                }\n+            }\n+\n+            _ => {}\n+        }\n+\n+        false\n+    }\n+\n     pub fn check_for_cast(&self,\n                       err: &mut DiagnosticBuilder<'tcx>,\n                       expr: &hir::Expr,"}, {"sha": "57d1938aca87a04ac340a01319abeccc622c251d", "filename": "src/test/ui/range/issue-54505-no-literals.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs?ref=0626afbcd23d9ef2e14617c609dc47765af117e2", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+// Regression test for changes introduced while fixing #54505\n+\n+// This test uses non-literals for Ranges\n+// (expecting no parens with borrow suggestion)\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(::std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFrom { start: 1 }\n+\n+    take_range(::std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFrom { start: 1 }\n+\n+    take_range(std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFull {}\n+\n+    take_range(::std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFull {}\n+\n+    take_range(std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(::std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeTo { end: 5 }\n+\n+    take_range(::std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeTo { end: 5 }\n+\n+    take_range(std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeToInclusive { end: 5 }\n+\n+    take_range(::std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeToInclusive { end: 5 }\n+}"}, {"sha": "8e8793c1736ba1a3c9dc3a9d24c8069c2d39926e", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=0626afbcd23d9ef2e14617c609dc47765af117e2", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// error-pattern: error: `#[panic_handler]` function required, but not found\n+// error-pattern: language item required, but not found: `panic_info`\n+\n+\n+// Regression test for #54505 - range borrowing suggestion had\n+// incorrect syntax (missing parentheses).\n+\n+// This test doesn't use std\n+// (so all Ranges resolve to core::ops::Range...)\n+\n+#![no_std]\n+\n+use core::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(0..1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..1)\n+\n+    take_range(1..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(1..)\n+\n+    take_range(..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..)\n+\n+    take_range(0..=1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..=1)\n+\n+    take_range(..5);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..5)\n+\n+    take_range(..=42);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..=42)\n+}"}, {"sha": "ef8ded0f7a3407cdf42102203c9262c7d618a1d4", "filename": "src/test/ui/range/issue-54505.fixed", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed?ref=0626afbcd23d9ef2e14617c609dc47765af117e2", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+// Regression test for #54505 - range borrowing suggestion had\n+// incorrect syntax (missing parentheses).\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(&(0..1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..1)\n+\n+    take_range(&(1..));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(1..)\n+\n+    take_range(&(..));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..)\n+\n+    take_range(&(0..=1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..=1)\n+\n+    take_range(&(..5));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..5)\n+\n+    take_range(&(..=42));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..=42)\n+}"}, {"sha": "b81c879a37ea4ff4566233103756e83b20e176e1", "filename": "src/test/ui/range/issue-54505.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs?ref=0626afbcd23d9ef2e14617c609dc47765af117e2", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+// Regression test for #54505 - range borrowing suggestion had\n+// incorrect syntax (missing parentheses).\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(0..1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..1)\n+\n+    take_range(1..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(1..)\n+\n+    take_range(..);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..)\n+\n+    take_range(0..=1);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(0..=1)\n+\n+    take_range(..5);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..5)\n+\n+    take_range(..=42);\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &(..=42)\n+}"}, {"sha": "5a59594ff50082e4c78b8dd595608b44892e5817", "filename": "src/test/ui/range/issue-54505.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0626afbcd23d9ef2e14617c609dc47765af117e2/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=0626afbcd23d9ef2e14617c609dc47765af117e2", "patch": "@@ -0,0 +1,75 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:24:16\n+   |\n+LL |     take_range(0..1);\n+   |                ^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::Range`\n+   |                help: consider borrowing here: `&(0..1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:29:16\n+   |\n+LL |     take_range(1..);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFrom`\n+   |                help: consider borrowing here: `&(1..)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:34:16\n+   |\n+LL |     take_range(..);\n+   |                ^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFull`\n+   |                help: consider borrowing here: `&(..)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:39:16\n+   |\n+LL |     take_range(0..=1);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&(0..=1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:44:16\n+   |\n+LL |     take_range(..5);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeTo`\n+   |                help: consider borrowing here: `&(..5)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505.rs:49:16\n+   |\n+LL |     take_range(..=42);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&(..=42)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeToInclusive<{integer}>`\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}