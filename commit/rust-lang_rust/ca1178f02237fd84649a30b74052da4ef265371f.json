{"sha": "ca1178f02237fd84649a30b74052da4ef265371f", "node_id": "C_kwDOAAsO6NoAKGNhMTE3OGYwMjIzN2ZkODQ2NDlhMzBiNzQwNTJkYTRlZjI2NTM3MWY", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-16T07:24:01Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-16T07:24:01Z"}, "message": "make `CastError::NeedsDeref` create a `MachineApplicable` suggestion + other misc fixes", "tree": {"sha": "bb89a639c02f331859dd7bec5e26445eed827b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb89a639c02f331859dd7bec5e26445eed827b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1178f02237fd84649a30b74052da4ef265371f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmPE+5EVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNENm8P/2E5KZbz/FXxX5S9e+aqSMVuitOh\nAiX53jOVzp2nG+c1I1TzFEjAhS1LBdiy3UYhsQRtmT+lJEw0gk7wvgNJB+x+5VH9\nVklGHwBs7hle5XCSeM7yahPdQxGShQH8Pu3Ch8c2TvfgkLwF49FO/H4ZvOWG2tUP\noSk5pPEBCiEQTqjVrT8QzH8hzHhn3vdJwpXscrAiiKP6V+nem0xJ11Gxb6gtVoL9\nfu08sxpaYO7bfw9qmLZgL1YCWi0oLnHS2BcQddtFIMYxcSEUkKMcRxVDjvdS8TEf\nlxx5bomxXwIVOhVkiM6ONhVEZ7iRkxIfhcMeEvdgLpO6I6HrV0Goi/Y76Af4CEKh\nx+7F3/5mCcdN6kEpyaSWsHYItSXJSjJoV30RYnMM9IY7uVM/V3XtKr9vpM3vU+Zg\niIVcWgl2QESqPKkkdQMPwUQt+grTmNU0yBRjqgLSd3eGZF/VK1G/8osKYsaEXj26\n9VBBsY/E2cxJKmv2mcIjjoMWk7SyQiuFlBPpagyh4sa3apz0pfHG3H9LAku1QcFb\n8+Lit364iS99njXG1vfdY7/ckkqe+x8YD5u9C/ZUinxs10N2dMq7Ax5QPEEGgVPh\n3dW9ngoSfGkg/GfYYPyKaBdb2llgguLSHVAg1TLBNWii+q81p3JAT4xv0H88a1TS\n76KFcoK0xDrJbcJv\n=e2cU\n-----END PGP SIGNATURE-----", "payload": "tree bb89a639c02f331859dd7bec5e26445eed827b00\nparent 41edaac716dde55b6a9d83ae4da0fba354ae5ba8\nauthor Ezra Shaw <ezrasure@outlook.com> 1673853841 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1673853841 +1300\n\nmake `CastError::NeedsDeref` create a `MachineApplicable` suggestion + other misc fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1178f02237fd84649a30b74052da4ef265371f", "html_url": "https://github.com/rust-lang/rust/commit/ca1178f02237fd84649a30b74052da4ef265371f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1178f02237fd84649a30b74052da4ef265371f/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41edaac716dde55b6a9d83ae4da0fba354ae5ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/41edaac716dde55b6a9d83ae4da0fba354ae5ba8", "html_url": "https://github.com/rust-lang/rust/commit/41edaac716dde55b6a9d83ae4da0fba354ae5ba8"}], "stats": {"total": 60, "additions": 29, "deletions": 31}, "files": [{"sha": "b312a3d30af0822f93235a9d8481510578df8090", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca1178f02237fd84649a30b74052da4ef265371f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1178f02237fd84649a30b74052da4ef265371f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=ca1178f02237fd84649a30b74052da4ef265371f", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n #[derive(Copy, Clone)]\n pub enum CastError {\n-    ErrorGuaranteed,\n+    ErrorGuaranteed(ErrorGuaranteed),\n \n     CastToBool,\n     CastToChar,\n@@ -176,8 +176,8 @@ pub enum CastError {\n }\n \n impl From<ErrorGuaranteed> for CastError {\n-    fn from(_: ErrorGuaranteed) -> Self {\n-        CastError::ErrorGuaranteed\n+    fn from(err: ErrorGuaranteed) -> Self {\n+        CastError::ErrorGuaranteed(err)\n     }\n }\n \n@@ -225,33 +225,25 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'tcx>, e: CastError) {\n         match e {\n-            CastError::ErrorGuaranteed => {\n+            CastError::ErrorGuaranteed(_) => {\n                 // an error has already been reported\n             }\n             CastError::NeedDeref => {\n-                let error_span = self.span;\n                 let mut err = make_invalid_casting_error(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     self.cast_ty,\n                     fcx,\n                 );\n-                let cast_ty = fcx.ty_to_string(self.cast_ty);\n-                err.span_label(\n-                    error_span,\n-                    format!(\"cannot cast `{}` as `{}`\", fcx.ty_to_string(self.expr_ty), cast_ty),\n+\n+                err.span_suggestion_verbose(\n+                    self.expr_span.shrink_to_lo(),\n+                    \"dereference the expression\",\n+                    \"*\",\n+                    Applicability::MachineApplicable,\n                 );\n-                if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr_span) {\n-                    err.span_suggestion(\n-                        self.expr_span,\n-                        \"dereference the expression\",\n-                        format!(\"*{}\", snippet),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                } else {\n-                    err.span_help(self.expr_span, \"dereference the expression with `*`\");\n-                }\n+\n                 err.emit();\n             }\n             CastError::NeedViaThinPtr | CastError::NeedViaPtr => {"}, {"sha": "586b1f2fd5472cf3befa743099f6580574073d37", "filename": "tests/ui/error-codes/E0606.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca1178f02237fd84649a30b74052da4ef265371f/tests%2Fui%2Ferror-codes%2FE0606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca1178f02237fd84649a30b74052da4ef265371f/tests%2Fui%2Ferror-codes%2FE0606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0606.stderr?ref=ca1178f02237fd84649a30b74052da4ef265371f", "patch": "@@ -2,10 +2,12 @@ error[E0606]: casting `&u8` as `u8` is invalid\n   --> $DIR/E0606.rs:2:5\n    |\n LL |     &0u8 as u8;\n-   |     ----^^^^^^\n-   |     |\n-   |     cannot cast `&u8` as `u8`\n-   |     help: dereference the expression: `*&0u8`\n+   |     ^^^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     *&0u8 as u8;\n+   |     +\n \n error: aborting due to previous error\n "}, {"sha": "e8ee1d96942f782562f80881dabc2b6f78846af4", "filename": "tests/ui/error-festival.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca1178f02237fd84649a30b74052da4ef265371f/tests%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca1178f02237fd84649a30b74052da4ef265371f/tests%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-festival.stderr?ref=ca1178f02237fd84649a30b74052da4ef265371f", "patch": "@@ -69,10 +69,12 @@ error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18\n    |\n LL |     let y: u32 = x as u32;\n-   |                  -^^^^^^^\n-   |                  |\n-   |                  cannot cast `&u8` as `u32`\n-   |                  help: dereference the expression: `*x`\n+   |                  ^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     let y: u32 = *x as u32;\n+   |                  +\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/error-festival.rs:41:5"}, {"sha": "2a36a352c7341644a4c6a653b6b25bcc34e1a476", "filename": "tests/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca1178f02237fd84649a30b74052da4ef265371f/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca1178f02237fd84649a30b74052da4ef265371f/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=ca1178f02237fd84649a30b74052da4ef265371f", "patch": "@@ -243,10 +243,12 @@ error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30\n    |\n LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>();\n-   |                              -^^^^^^^\n-   |                              |\n-   |                              cannot cast `&{float}` as `f32`\n-   |                              help: dereference the expression: `*s`\n+   |                              ^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     vec![0.0].iter().map(|s| *s as f32).collect::<Vec<f32>>();\n+   |                              +\n \n error: aborting due to 34 previous errors\n "}]}