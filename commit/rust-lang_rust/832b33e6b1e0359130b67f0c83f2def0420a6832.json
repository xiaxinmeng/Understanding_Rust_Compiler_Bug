{"sha": "832b33e6b1e0359130b67f0c83f2def0420a6832", "node_id": "C_kwDOAAsO6NoAKDgzMmIzM2U2YjFlMDM1OTEzMGI2N2YwYzgzZjJkZWYwNDIwYTY4MzI", "commit": {"author": {"name": "bwmf2", "email": "bwmf2@protonmail.com", "date": "2023-02-26T22:22:50Z"}, "committer": {"name": "bwmf2", "email": "bwmf2@protonmail.com", "date": "2023-03-02T20:58:49Z"}, "message": "Force parentheses around `match` expression in binary expression", "tree": {"sha": "4ee06bd97e3a94d073b8cc655feb7210ab6feb58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee06bd97e3a94d073b8cc655feb7210ab6feb58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832b33e6b1e0359130b67f0c83f2def0420a6832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832b33e6b1e0359130b67f0c83f2def0420a6832", "html_url": "https://github.com/rust-lang/rust/commit/832b33e6b1e0359130b67f0c83f2def0420a6832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832b33e6b1e0359130b67f0c83f2def0420a6832/comments", "author": {"login": "bwmf2", "id": 117049336, "node_id": "U_kgDOBvoH-A", "avatar_url": "https://avatars.githubusercontent.com/u/117049336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwmf2", "html_url": "https://github.com/bwmf2", "followers_url": "https://api.github.com/users/bwmf2/followers", "following_url": "https://api.github.com/users/bwmf2/following{/other_user}", "gists_url": "https://api.github.com/users/bwmf2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwmf2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwmf2/subscriptions", "organizations_url": "https://api.github.com/users/bwmf2/orgs", "repos_url": "https://api.github.com/users/bwmf2/repos", "events_url": "https://api.github.com/users/bwmf2/events{/privacy}", "received_events_url": "https://api.github.com/users/bwmf2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bwmf2", "id": 117049336, "node_id": "U_kgDOBvoH-A", "avatar_url": "https://avatars.githubusercontent.com/u/117049336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwmf2", "html_url": "https://github.com/bwmf2", "followers_url": "https://api.github.com/users/bwmf2/followers", "following_url": "https://api.github.com/users/bwmf2/following{/other_user}", "gists_url": "https://api.github.com/users/bwmf2/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwmf2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwmf2/subscriptions", "organizations_url": "https://api.github.com/users/bwmf2/orgs", "repos_url": "https://api.github.com/users/bwmf2/repos", "events_url": "https://api.github.com/users/bwmf2/events{/privacy}", "received_events_url": "https://api.github.com/users/bwmf2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "a4d91a956627337198777f92d76886aad5ad6130", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/832b33e6b1e0359130b67f0c83f2def0420a6832/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832b33e6b1e0359130b67f0c83f2def0420a6832/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=832b33e6b1e0359130b67f0c83f2def0420a6832", "patch": "@@ -244,6 +244,10 @@ impl<'a> State<'a> {\n             (&ast::ExprKind::Let { .. }, _) if !parser::needs_par_as_let_scrutinee(prec) => {\n                 parser::PREC_FORCE_PAREN\n             }\n+            // For a binary expression like `(match () { _ => a }) OP b`, the parens are required\n+            // otherwise the parser would interpret `match () { _ => a }` as a statement,\n+            // with the remaining `OP b` not making sense. So we force parens.\n+            (&ast::ExprKind::Match(..), _) => parser::PREC_FORCE_PAREN,\n             _ => left_prec,\n         };\n "}]}