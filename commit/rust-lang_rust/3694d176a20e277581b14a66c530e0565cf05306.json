{"sha": "3694d176a20e277581b14a66c530e0565cf05306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OTRkMTc2YTIwZTI3NzU4MWIxNGE2NmM1MzBlMDU2NWNmMDUzMDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T07:27:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T07:29:18Z"}, "message": "kill InterpError::description", "tree": {"sha": "dd30d460b42f8b8a6bc031f49a0ed897fadda6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd30d460b42f8b8a6bc031f49a0ed897fadda6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3694d176a20e277581b14a66c530e0565cf05306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3694d176a20e277581b14a66c530e0565cf05306", "html_url": "https://github.com/rust-lang/rust/commit/3694d176a20e277581b14a66c530e0565cf05306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3694d176a20e277581b14a66c530e0565cf05306/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "html_url": "https://github.com/rust-lang/rust/commit/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3"}], "stats": {"total": 270, "additions": 116, "deletions": 154}, "files": [{"sha": "4f837241cdd92f97f4eb1e21ad3cf00070b001f3", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 116, "deletions": 154, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/3694d176a20e277581b14a66c530e0565cf05306/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3694d176a20e277581b14a66c530e0565cf05306/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=3694d176a20e277581b14a66c530e0565cf05306", "patch": "@@ -329,151 +329,6 @@ pub enum InterpError<'tcx, O> {\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n-impl<'tcx, O> InterpError<'tcx, O> {\n-    pub(crate) fn description(&self) -> &str {\n-        use self::InterpError::*;\n-        match *self {\n-            MachineError(ref inner) => inner,\n-            Exit(..) =>\n-                \"exited\",\n-            FunctionAbiMismatch(..) | FunctionArgMismatch(..) | FunctionRetMismatch(..)\n-            | FunctionArgCountMismatch =>\n-                \"tried to call a function through a function pointer of incompatible type\",\n-            InvalidMemoryAccess =>\n-                \"tried to access memory through an invalid pointer\",\n-            DanglingPointerDeref =>\n-                \"dangling pointer was dereferenced\",\n-            DoubleFree =>\n-                \"tried to deallocate dangling pointer\",\n-            InvalidFunctionPointer =>\n-                \"tried to use a function pointer after offsetting it\",\n-            InvalidBool =>\n-                \"invalid boolean value read\",\n-            InvalidDiscriminant(..) =>\n-                \"invalid enum discriminant value read\",\n-            PointerOutOfBounds { .. } =>\n-                \"pointer offset outside bounds of allocation\",\n-            InvalidNullPointerUsage =>\n-                \"invalid use of NULL pointer\",\n-            ValidationFailure(..) =>\n-                \"type validation failed\",\n-            ReadPointerAsBytes =>\n-                \"a raw memory access tried to access part of a pointer value as raw bytes\",\n-            ReadBytesAsPointer =>\n-                \"a memory access tried to interpret some bytes as a pointer\",\n-            ReadForeignStatic =>\n-                \"tried to read from foreign (extern) static\",\n-            InvalidPointerMath =>\n-                \"attempted to do invalid arithmetic on pointers that would leak base addresses, \\\n-                e.g., comparing pointers into different allocations\",\n-            ReadUndefBytes(_) =>\n-                \"attempted to read undefined bytes\",\n-            DeadLocal =>\n-                \"tried to access a dead local variable\",\n-            InvalidBoolOp(_) =>\n-                \"invalid boolean operation\",\n-            Unimplemented(ref msg) => msg,\n-            DerefFunctionPointer =>\n-                \"tried to dereference a function pointer\",\n-            ExecuteMemory =>\n-                \"tried to treat a memory pointer as a function pointer\",\n-            Intrinsic(..) =>\n-                \"intrinsic failed\",\n-            NoMirFor(..) =>\n-                \"mir not found\",\n-            InvalidChar(..) =>\n-                \"tried to interpret an invalid 32-bit value as a char\",\n-            StackFrameLimitReached =>\n-                \"reached the configured maximum number of stack frames\",\n-            OutOfTls =>\n-                \"reached the maximum number of representable TLS keys\",\n-            TlsOutOfBounds =>\n-                \"accessed an invalid (unallocated) TLS key\",\n-            AbiViolation(ref msg) => msg,\n-            AlignmentCheckFailed{..} =>\n-                \"tried to execute a misaligned read or write\",\n-            CalledClosureAsFunction =>\n-                \"tried to call a closure through a function pointer\",\n-            VtableForArgumentlessMethod =>\n-                \"tried to call a vtable function without arguments\",\n-            ModifiedConstantMemory =>\n-                \"tried to modify constant memory\",\n-            ModifiedStatic =>\n-                \"tried to modify a static's initial value from another static's initializer\",\n-            AssumptionNotHeld =>\n-                \"`assume` argument was false\",\n-            InlineAsm =>\n-                \"miri does not support inline assembly\",\n-            TypeNotPrimitive(_) =>\n-                \"expected primitive type, got nonprimitive\",\n-            ReallocatedWrongMemoryKind(_, _) =>\n-                \"tried to reallocate memory from one kind to another\",\n-            DeallocatedWrongMemoryKind(_, _) =>\n-                \"tried to deallocate memory of the wrong kind\",\n-            ReallocateNonBasePtr =>\n-                \"tried to reallocate with a pointer not to the beginning of an existing object\",\n-            DeallocateNonBasePtr =>\n-                \"tried to deallocate with a pointer not to the beginning of an existing object\",\n-            IncorrectAllocationInformation(..) =>\n-                \"tried to deallocate or reallocate using incorrect alignment or size\",\n-            Layout(_) =>\n-                \"rustc layout computation failed\",\n-            UnterminatedCString(_) =>\n-                \"attempted to get length of a null terminated string, but no null found before end \\\n-                of allocation\",\n-            HeapAllocZeroBytes =>\n-                \"tried to re-, de- or allocate zero bytes on the heap\",\n-            HeapAllocNonPowerOfTwoAlignment(_) =>\n-                \"tried to re-, de-, or allocate heap memory with alignment that is not a power of \\\n-                two\",\n-            Unreachable =>\n-                \"entered unreachable code\",\n-            Panic(PanicMessage::Panic{..}) =>\n-                \"the evaluated program panicked\",\n-            Panic(PanicMessage::BoundsCheck{..}) =>\n-                \"array index out of bounds\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Add)) =>\n-                \"attempt to add with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Sub)) =>\n-                \"attempt to subtract with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Mul)) =>\n-                \"attempt to multiply with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Div)) =>\n-                \"attempt to divide with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Rem)) =>\n-                \"attempt to calculate the remainder with overflow\",\n-            Panic(PanicMessage::OverflowNeg) =>\n-                \"attempt to negate with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Shr)) =>\n-                \"attempt to shift right with overflow\",\n-            Panic(PanicMessage::Overflow(mir::BinOp::Shl)) =>\n-                \"attempt to shift left with overflow\",\n-            Panic(PanicMessage::Overflow(op)) =>\n-                bug!(\"{:?} cannot overflow\", op),\n-            Panic(PanicMessage::DivisionByZero) =>\n-                \"attempt to divide by zero\",\n-            Panic(PanicMessage::RemainderByZero) =>\n-                \"attempt to calculate the remainder with a divisor of zero\",\n-            ReadFromReturnPointer =>\n-                \"tried to read from the return pointer\",\n-            PathNotFound(_) =>\n-                \"a path could not be resolved, maybe the crate is not loaded\",\n-            UnimplementedTraitSelection =>\n-                \"there were unresolved type arguments during trait selection\",\n-            TypeckError =>\n-                \"encountered constants with type errors, stopping evaluation\",\n-            TooGeneric =>\n-                \"encountered overly generic constant\",\n-            ReferencedConstant =>\n-                \"referenced constant has errors\",\n-            GeneratorResumedAfterReturn => \"generator resumed after completion\",\n-            GeneratorResumedAfterPanic => \"generator resumed after panicking\",\n-            InfiniteLoop =>\n-                \"duplicate interpreter state observed here, const evaluation will never terminate\",\n-        }\n-    }\n-}\n-\n impl<'tcx> fmt::Display for InterpErrorInfo<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.kind)\n@@ -516,8 +371,6 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to deallocate {} memory but gave {} as the kind\", old, new),\n-            Intrinsic(ref err) =>\n-                write!(f, \"{}\", err),\n             InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             AlignmentCheckFailed { required, has } =>\n@@ -529,21 +382,130 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n                 write!(f, \"rustc layout computation failed: {:?}\", err),\n             PathNotFound(ref path) =>\n                 write!(f, \"Cannot find path {:?}\", path),\n-            MachineError(ref inner) =>\n-                write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            Panic(PanicMessage::Panic { ref msg, line, col, ref file }) =>\n-                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n-            Panic(PanicMessage::BoundsCheck { ref len, ref index }) =>\n-                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n             Exit(code) =>\n                 write!(f, \"exited with status code {}\", code),\n-            _ => write!(f, \"{}\", self.description()),\n+            InvalidMemoryAccess =>\n+                write!(f, \"tried to access memory through an invalid pointer\"),\n+            DanglingPointerDeref =>\n+                write!(f, \"dangling pointer was dereferenced\"),\n+            DoubleFree =>\n+                write!(f, \"tried to deallocate dangling pointer\"),\n+            InvalidFunctionPointer =>\n+                write!(f, \"tried to use a function pointer after offsetting it\"),\n+            InvalidBool =>\n+                write!(f, \"invalid boolean value read\"),\n+            InvalidNullPointerUsage =>\n+                write!(f, \"invalid use of NULL pointer\"),\n+            ReadPointerAsBytes =>\n+                write!(f, \"a raw memory access tried to access part of a pointer value as raw \\\n+                    bytes\"),\n+            ReadBytesAsPointer =>\n+                write!(f, \"a memory access tried to interpret some bytes as a pointer\"),\n+            ReadForeignStatic =>\n+                write!(f, \"tried to read from foreign (extern) static\"),\n+            InvalidPointerMath =>\n+                write!(f, \"attempted to do invalid arithmetic on pointers that would leak base \\\n+                    addresses, e.g., comparing pointers into different allocations\"),\n+            DeadLocal =>\n+                write!(f, \"tried to access a dead local variable\"),\n+            DerefFunctionPointer =>\n+                write!(f, \"tried to dereference a function pointer\"),\n+            ExecuteMemory =>\n+                write!(f, \"tried to treat a memory pointer as a function pointer\"),\n+            StackFrameLimitReached =>\n+                write!(f, \"reached the configured maximum number of stack frames\"),\n+            OutOfTls =>\n+                write!(f, \"reached the maximum number of representable TLS keys\"),\n+            TlsOutOfBounds =>\n+                write!(f, \"accessed an invalid (unallocated) TLS key\"),\n+            CalledClosureAsFunction =>\n+                write!(f, \"tried to call a closure through a function pointer\"),\n+            VtableForArgumentlessMethod =>\n+                write!(f, \"tried to call a vtable function without arguments\"),\n+            ModifiedConstantMemory =>\n+                write!(f, \"tried to modify constant memory\"),\n+            ModifiedStatic =>\n+                write!(f, \"tried to modify a static's initial value from another static's \\\n+                    initializer\"),\n+            AssumptionNotHeld =>\n+                write!(f, \"`assume` argument was false\"),\n+            InlineAsm =>\n+                write!(f, \"miri does not support inline assembly\"),\n+            ReallocateNonBasePtr =>\n+                write!(f, \"tried to reallocate with a pointer not to the beginning of an \\\n+                    existing object\"),\n+            DeallocateNonBasePtr =>\n+                write!(f, \"tried to deallocate with a pointer not to the beginning of an \\\n+                    existing object\"),\n+            HeapAllocZeroBytes =>\n+                write!(f, \"tried to re-, de- or allocate zero bytes on the heap\"),\n+            Unreachable =>\n+                write!(f, \"entered unreachable code\"),\n+            ReadFromReturnPointer =>\n+                write!(f, \"tried to read from the return pointer\"),\n+            UnimplementedTraitSelection =>\n+                write!(f, \"there were unresolved type arguments during trait selection\"),\n+            TypeckError =>\n+                write!(f, \"encountered constants with type errors, stopping evaluation\"),\n+            TooGeneric =>\n+                write!(f, \"encountered overly generic constant\"),\n+            ReferencedConstant =>\n+                write!(f, \"referenced constant has errors\"),\n+            GeneratorResumedAfterReturn =>\n+                write!(f, \"generator resumed after completion\"),\n+            GeneratorResumedAfterPanic =>\n+                write!(f, \"generator resumed after panicking\"),\n+            InfiniteLoop =>\n+                write!(f, \"duplicate interpreter state observed here, const evaluation will never \\\n+                    terminate\"),\n+            InvalidBoolOp(_) =>\n+                write!(f, \"invalid boolean operation\"),\n+            UnterminatedCString(_) =>\n+                write!(f, \"attempted to get length of a null terminated string, but no null \\\n+                    found before end of allocation\"),\n+            ReadUndefBytes(_) =>\n+                write!(f, \"attempted to read undefined bytes\"),\n+            HeapAllocNonPowerOfTwoAlignment(_) =>\n+                write!(f, \"tried to re-, de-, or allocate heap memory with alignment that is \\\n+                    not a power of two\"),\n+            MachineError(ref msg) |\n+            Unimplemented(ref msg) |\n+            AbiViolation(ref msg) |\n+            Intrinsic(ref msg) =>\n+                write!(f, \"{}\", msg),\n+\n+            Panic(PanicMessage::Panic { ref msg, line, col, ref file }) =>\n+                write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n+            Panic(PanicMessage::BoundsCheck { ref len, ref index }) =>\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Add)) =>\n+                write!(f, \"attempt to add with overflow\"),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Sub)) =>\n+                write!(f, \"attempt to subtract with overflow\"),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Mul)) =>\n+                write!(f, \"attempt to multiply with overflow\"),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Div)) =>\n+                write!(f, \"attempt to divide with overflow\"),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Rem)) =>\n+                write!(f, \"attempt to calculate the remainder with overflow\"),\n+            Panic(PanicMessage::OverflowNeg) =>\n+                write!(f, \"attempt to negate with overflow\"),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Shr)) =>\n+                write!(f, \"attempt to shift right with overflow\"),\n+            Panic(PanicMessage::Overflow(mir::BinOp::Shl)) =>\n+                write!(f, \"attempt to shift left with overflow\"),\n+            Panic(PanicMessage::Overflow(op)) =>\n+                bug!(\"{:?} cannot overflow\", op),\n+            Panic(PanicMessage::DivisionByZero) =>\n+                write!(f, \"attempt to divide by zero\"),\n+            Panic(PanicMessage::RemainderByZero) =>\n+                write!(f, \"attempt to calculate the remainder with a divisor of zero\"),\n         }\n     }\n }"}]}