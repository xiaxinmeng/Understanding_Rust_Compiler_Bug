{"sha": "27c90524a0521cafa89bc36a504111a1658782e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzkwNTI0YTA1MjFjYWZhODliYzM2YTUwNDExMWExNjU4NzgyZTg=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-03T23:25:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-03T23:25:43Z"}, "message": "Rollup merge of #64842 - pnkfelix:fix-issue-61631-self-in-type-param-default, r=alexreg\n\nDisallow Self in type param defaults of ADTs\n\nFix #61631\n\n(also includes a drive-by fix to a typo in some related diagnostic output.)", "tree": {"sha": "d715798bf158db6d5ef73cddd7b7342c33d294c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d715798bf158db6d5ef73cddd7b7342c33d294c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c90524a0521cafa89bc36a504111a1658782e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdloN3CRBK7hj4Ov3rIwAAdHIIAIxD1IrAOMxPDSTtLN+Z3Uqc\n6ySkm52dfgA8jDR6lUPAPY3BGAD+WJ7OZ9mSjdip8NzkfJOl/qewZpZmXHEx5Etl\naYFfIeoJ2bw1xmm/ZbwGp++fH+dVJGdjYyhCrLDnXQrra+P04CN4DqGEUTjBHUAP\nWzAUorjQf/PFVAjoiMMWhSVePjLC1+Hjg4/H6ayPgiFjW7ZtRYI1chc+6m2k7wZ/\nIRIdoEcuD0+ygSwRAS5y3NeV8t1j1V8goFPJYkqdtFAvf5enbbdKU8BTPQhKsnMb\n2gCCqfXN1DJMt73ccCE2k/+OyqvuI0nvavEQXxH6REkZO2wR/jJlN7IaAuAVgxk=\n=CMvp\n-----END PGP SIGNATURE-----\n", "payload": "tree d715798bf158db6d5ef73cddd7b7342c33d294c6\nparent 69837b14d69821c54c151b87ebf873f45c92868b\nparent e443e1bdf9f474f822008f88862fed630b50381f\nauthor Tyler Mandry <tmandry@gmail.com> 1570145143 -0700\ncommitter GitHub <noreply@github.com> 1570145143 -0700\n\nRollup merge of #64842 - pnkfelix:fix-issue-61631-self-in-type-param-default, r=alexreg\n\nDisallow Self in type param defaults of ADTs\n\nFix #61631\n\n(also includes a drive-by fix to a typo in some related diagnostic output.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c90524a0521cafa89bc36a504111a1658782e8", "html_url": "https://github.com/rust-lang/rust/commit/27c90524a0521cafa89bc36a504111a1658782e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c90524a0521cafa89bc36a504111a1658782e8/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69837b14d69821c54c151b87ebf873f45c92868b", "url": "https://api.github.com/repos/rust-lang/rust/commits/69837b14d69821c54c151b87ebf873f45c92868b", "html_url": "https://github.com/rust-lang/rust/commit/69837b14d69821c54c151b87ebf873f45c92868b"}, {"sha": "e443e1bdf9f474f822008f88862fed630b50381f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e443e1bdf9f474f822008f88862fed630b50381f", "html_url": "https://github.com/rust-lang/rust/commit/e443e1bdf9f474f822008f88862fed630b50381f"}], "stats": {"total": 175, "additions": 169, "deletions": 6}, "files": [{"sha": "7f819486f5bd3af609c66464df97703cc721966b", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -354,6 +354,17 @@ impl<'a> Resolver<'a> {\n                     span, \"defaulted type parameters cannot be forward declared\".to_string());\n                 err\n             }\n+            ResolutionError::SelfInTyParamDefault => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0735,\n+                    \"type parameters cannot use `Self` in their defaults\"\n+                );\n+                err.span_label(\n+                    span, \"`Self` in type parameter default\".to_string());\n+                err\n+            }\n             ResolutionError::ConstParamDependentOnTypeParam => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "47346774180fe4ae091533b6951dd2d2dc0075f0", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -8,9 +8,9 @@ Type parameter defaults can only use parameters that occur before them.\n Erroneous code example:\n \n ```compile_fail,E0128\n-struct Foo<T=U, U=()> {\n+struct Foo<T = U, U = ()> {\n     field1: T,\n-    filed2: U,\n+    field2: U,\n }\n // error: type parameters with a default cannot use forward declared\n // identifiers\n@@ -20,9 +20,9 @@ Since type parameters are evaluated in-order, you may be able to fix this issue\n by doing:\n \n ```\n-struct Foo<U=(), T=U> {\n+struct Foo<U = (), T = U> {\n     field1: T,\n-    filed2: U,\n+    field2: U,\n }\n ```\n \n@@ -1705,6 +1705,21 @@ fn const_id<T, const N: T>() -> T { // error: const parameter\n }\n ```\n \"##,\n+\n+E0735: r##\"\n+Type parameter defaults cannot use `Self` on structs, enums, or unions.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0735\n+struct Foo<X = Box<Self>> {\n+    field1: Option<X>,\n+    field2: Option<X>,\n+}\n+// error: type parameters cannot use `Self` in their defaults.\n+```\n+\"##,\n+\n ;\n //  E0153, unused error code\n //  E0157, unused error code"}, {"sha": "93c96b9f75ba20c6de1d283dd063c20d732b1d26", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -468,6 +468,19 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 }\n             }));\n \n+        // rust-lang/rust#61631: The type `Self` is essentially\n+        // another type parameter. For ADTs, we consider it\n+        // well-defined only after all of the ADT type parameters have\n+        // been provided. Therefore, we do not allow use of `Self`\n+        // anywhere in ADT type parameter defaults.\n+        //\n+        // (We however cannot ban `Self` for defaults on *all* generic\n+        // lists; e.g. trait generics can usefully refer to `Self`,\n+        // such as in the case of `trait Add<Rhs = Self>`.)\n+        if self.current_self_item.is_some() { // (`Some` if + only if we are in ADT's generics.)\n+            default_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);\n+        }\n+\n         // We also ban access to type parameters for use as the types of const parameters.\n         let mut const_ty_param_ban_rib = Rib::new(TyParamAsConstParamTy);\n         const_ty_param_ban_rib.bindings.extend(generics.params.iter()"}, {"sha": "e7292b52ab3e88c512dbafab43797192f40a5cd8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -214,6 +214,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// Error E0735: type parameters with a default cannot use `Self`\n+    SelfInTyParamDefault,\n     /// Error E0671: const parameter cannot depend on type parameter.\n     ConstParamDependentOnTypeParam,\n }\n@@ -1536,7 +1538,7 @@ impl<'a> Resolver<'a> {\n             if let Some(res) = ribs[i].bindings.get(&rib_ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(\n-                    self.validate_res_from_ribs(i, res, record_used, path_span, ribs),\n+                    self.validate_res_from_ribs(i, rib_ident, res, record_used, path_span, ribs),\n                 ));\n             }\n \n@@ -2122,6 +2124,7 @@ impl<'a> Resolver<'a> {\n     fn validate_res_from_ribs(\n         &mut self,\n         rib_index: usize,\n+        rib_ident: Ident,\n         res: Res,\n         record_used: bool,\n         span: Span,\n@@ -2133,7 +2136,12 @@ impl<'a> Resolver<'a> {\n         // An invalid forward use of a type parameter from a previous default.\n         if let ForwardTyParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n-                self.report_error(span, ResolutionError::ForwardDeclaredTyParam);\n+                let res_error = if rib_ident.name == kw::SelfUpper {\n+                    ResolutionError::SelfInTyParamDefault\n+                } else {\n+                    ResolutionError::ForwardDeclaredTyParam\n+                };\n+                self.report_error(span, res_error);\n             }\n             assert_eq!(res, Res::Err);\n             return Res::Err;"}, {"sha": "cc93794e8fcdc1ab5642df7811d7d00d1e3a7d68", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.rs?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -0,0 +1,20 @@\n+#![crate_type=\"lib\"]\n+\n+// rust-lang/rust#61631: The use of `Self` in the defaults of generic\n+// types in a *trait* definition are allowed.\n+//\n+// It *must* be accepted; we have used this pattern extensively since\n+// Rust 1.0 (see e.g. `trait Add<Rhs=Self>`).\n+trait Tnobound<P = Self> {}\n+\n+impl Tnobound for () { }\n+\n+// This variant is accepted at the definition site; but it will be\n+// rejected at every possible usage site (such as the one immediately\n+// below). Maybe one day we will attempt to catch it at the definition\n+// site, but today this is accepted due to compiler implementation\n+// limitations.\n+trait Tsized<P: Sized = [Self]> {}\n+\n+impl Tsized for () {}\n+//~^ ERROR the size for values of type `[()]` cannot be known at compilation time [E0277]"}, {"sha": "ea0664c48d4d8b6b862640ec9b78d55d6fe509d2", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n+   |\n+LL | impl Tsized for () {}\n+   |      ^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[()]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b560cc2ce7060d33f03ca8c61584136de9a5e8c7", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.rs?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -0,0 +1,45 @@\n+#![crate_type=\"lib\"]\n+\n+// rust-lang/rust#61631: Uses of `Self` in the defaults of generic\n+// types for ADT's are not allowed. We justify this because the `Self`\n+// type could be considered the \"final\" type parameter, that is only\n+// well-defined after all of the other type parameters on the ADT have\n+// been instantiated.\n+//\n+// These were previously were ICE'ing at the usage point anyway (see\n+// `demo_usages` below), so there should not be any backwards\n+// compatibility concern.\n+\n+struct Snobound<'a, P = Self> { x: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+// Disallowing `Self` in defaults sidesteps need to check the bounds\n+// on the defaults in cases like these.\n+\n+struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n+//~^ ERROR type parameters cannot use `Self` in their defaults [E0735]\n+\n+fn demo_usages() {\n+    // An ICE means you only get the error from the first line of the\n+    // demo; comment each out to observe the other ICEs when trying\n+    // this out on older versions of Rust.\n+\n+    let _ice: Snobound;\n+    let _ice: Enobound;\n+    let _ice: Unobound;\n+    let _ice: Ssized;\n+    let _ice: Esized;\n+    let _ice: Usized;\n+}"}, {"sha": "689ffbd0febc2e7bf1ea8a7c076b0bf98f3c7158", "filename": "src/test/ui/generics/issue-61631-default-type-param-cannot-reference-self.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27c90524a0521cafa89bc36a504111a1658782e8/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-cannot-reference-self.stderr?ref=27c90524a0521cafa89bc36a504111a1658782e8", "patch": "@@ -0,0 +1,39 @@\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:13:25\n+   |\n+LL | struct Snobound<'a, P = Self> { x: Option<&'a P> }\n+   |                         ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:16:23\n+   |\n+LL | enum Enobound<'a, P = Self> { A, B(Option<&'a P>) }\n+   |                       ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:19:24\n+   |\n+LL | union Unobound<'a, P = Self> { x: i32, y: Option<&'a P> }\n+   |                        ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:25:31\n+   |\n+LL | struct Ssized<'a, P: Sized = [Self]> { x: Option<&'a P> }\n+   |                               ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:28:29\n+   |\n+LL | enum Esized<'a, P: Sized = [Self]> { A, B(Option<&'a P>) }\n+   |                             ^^^^ `Self` in type parameter default\n+\n+error[E0735]: type parameters cannot use `Self` in their defaults\n+  --> $DIR/issue-61631-default-type-param-cannot-reference-self.rs:31:30\n+   |\n+LL | union Usized<'a, P: Sized = [Self]> { x: i32, y: Option<&'a P> }\n+   |                              ^^^^ `Self` in type parameter default\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0735`."}]}