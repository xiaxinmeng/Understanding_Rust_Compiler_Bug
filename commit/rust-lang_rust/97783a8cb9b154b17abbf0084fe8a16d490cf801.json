{"sha": "97783a8cb9b154b17abbf0084fe8a16d490cf801", "node_id": "C_kwDOAAsO6NoAKDk3NzgzYThjYjliMTU0YjE3YWJiZjAwODRmZThhMTZkNDkwY2Y4MDE", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-09-07T10:31:14Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Return a struct and add applicability", "tree": {"sha": "9641fd5c15272f9c40b76df0ce0a1f4d18e44cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9641fd5c15272f9c40b76df0ce0a1f4d18e44cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97783a8cb9b154b17abbf0084fe8a16d490cf801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97783a8cb9b154b17abbf0084fe8a16d490cf801", "html_url": "https://github.com/rust-lang/rust/commit/97783a8cb9b154b17abbf0084fe8a16d490cf801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97783a8cb9b154b17abbf0084fe8a16d490cf801/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0dd797709540f460ee6c9ac26f1231335781b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dd797709540f460ee6c9ac26f1231335781b40", "html_url": "https://github.com/rust-lang/rust/commit/d0dd797709540f460ee6c9ac26f1231335781b40"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "a12061994600e74779387dcf9d206da7f18b3f09", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/97783a8cb9b154b17abbf0084fe8a16d490cf801/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97783a8cb9b154b17abbf0084fe8a16d490cf801/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=97783a8cb9b154b17abbf0084fe8a16d490cf801", "patch": "@@ -41,6 +41,7 @@ pub(super) fn check<'tcx>(\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n             // suggest `any(|..| *..)` instead of `any(|..| **..)` for `find(|..| **..).is_some()`\n+            let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n                 if let hir::ExprKind::Closure(_, _, body_id, ..) = search_arg.kind;\n@@ -52,8 +53,12 @@ pub(super) fn check<'tcx>(\n                     } else if let PatKind::Binding(..) = strip_pat_refs(closure_arg.pat).kind {\n                         // `find()` provides a reference to the item, but `any` does not,\n                         // so we should fix item usages for suggestion\n-                        get_closure_suggestion(cx, search_arg, closure_body)\n-                            .or_else(|| Some(search_snippet.to_string()))\n+                        if let Some(closure_sugg) = get_closure_suggestion(cx, search_arg, closure_body) {\n+                            applicability = closure_sugg.applicability;\n+                            Some(closure_sugg.suggestion)\n+                        } else {\n+                            Some(search_snippet.to_string())\n+                        }\n                     } else {\n                         None\n                     }\n@@ -73,7 +78,7 @@ pub(super) fn check<'tcx>(\n                         \"any({})\",\n                         any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                     ),\n-                    Applicability::MachineApplicable,\n+                    applicability,\n                 );\n             } else {\n                 let iter = snippet(cx, search_recv.span, \"..\");\n@@ -88,7 +93,7 @@ pub(super) fn check<'tcx>(\n                         iter,\n                         any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                     ),\n-                    Applicability::MachineApplicable,\n+                    applicability,\n                 );\n             }\n         } else {\n@@ -153,14 +158,19 @@ pub(super) fn check<'tcx>(\n     }\n }\n \n+struct ClosureSugg {\n+    applicability: Applicability,\n+    suggestion: String,\n+}\n+\n // Build suggestion gradually by handling closure arg specific usages,\n // such as explicit deref and borrowing cases.\n // Returns `None` if no such use cases have been triggered in closure body\n fn get_closure_suggestion<'tcx>(\n     cx: &LateContext<'_>,\n     search_arg: &'tcx hir::Expr<'_>,\n     closure_body: &hir::Body<'_>,\n-) -> Option<String> {\n+) -> Option<ClosureSugg> {\n     let mut visitor = DerefDelegate {\n         cx,\n         closure_span: search_arg.span,\n@@ -178,7 +188,10 @@ fn get_closure_suggestion<'tcx>(\n     if visitor.suggestion_start.is_empty() {\n         None\n     } else {\n-        Some(visitor.finish())\n+        Some(ClosureSugg {\n+            applicability: visitor.applicability,\n+            suggestion: visitor.finish(),\n+        })\n     }\n }\n "}]}