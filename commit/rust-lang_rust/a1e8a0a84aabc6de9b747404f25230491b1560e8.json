{"sha": "a1e8a0a84aabc6de9b747404f25230491b1560e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZThhMGE4NGFhYmM2ZGU5Yjc0NzQwNGYyNTIzMDQ5MWIxNTYwZTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-16T16:33:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-16T16:33:12Z"}, "message": "Rollup merge of #67323 - Centril:tes, r=davidtwco\n\nmake transparent enums more ordinary\n\nBy recognizing that structs & unions have one variant, we can make the treatment of transparent enums less ad-hoc.\n\ncc https://github.com/rust-lang/rust/issues/60405\n\nr? @davidtwco", "tree": {"sha": "5e097f7890c8d89da11280c52e0477ccc298f535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e097f7890c8d89da11280c52e0477ccc298f535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e8a0a84aabc6de9b747404f25230491b1560e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd97HICRBK7hj4Ov3rIwAAdHIIAD/Lb4d0BCDjxgLDa5TiA7m0\nSNHnXnNZXacGeDvnkRO/i8ZVCGS4r5uRmrQTiu6gmT3mPrc103PZMHivIo3aPcjK\nxMmEwYAqt5F9MGrxEvU6XNa7qr+FSo/BJJPzHF1zXHRIhFmBJkmwB4caHjX7anbZ\n2UiB2b6/yrjqTYToUP7INi1W7rpdmY56AzWjmSTLQ3soxv73IyT/bMlRBEmRYas6\nM208S57sauq9PitAILt2/xCuUiAva/rf+3p0VID7wJSjf96HeN1J/Zx+6BIKdKo/\nZJz8ylQJYMGFryHaLoWt7jZd5GqqwHE5wgVAyhm8vdalY5tmZVv8nMa5V3xwebE=\n=zbVK\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e097f7890c8d89da11280c52e0477ccc298f535\nparent 5609683fabfca0cd112c1b5ffebcefa7a31389fc\nparent 5d73af2d4c036e97b3fb430d53853ff5c4cd975c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576513992 +0100\ncommitter GitHub <noreply@github.com> 1576513992 +0100\n\nRollup merge of #67323 - Centril:tes, r=davidtwco\n\nmake transparent enums more ordinary\n\nBy recognizing that structs & unions have one variant, we can make the treatment of transparent enums less ad-hoc.\n\ncc https://github.com/rust-lang/rust/issues/60405\n\nr? @davidtwco\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e8a0a84aabc6de9b747404f25230491b1560e8", "html_url": "https://github.com/rust-lang/rust/commit/a1e8a0a84aabc6de9b747404f25230491b1560e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e8a0a84aabc6de9b747404f25230491b1560e8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5609683fabfca0cd112c1b5ffebcefa7a31389fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5609683fabfca0cd112c1b5ffebcefa7a31389fc", "html_url": "https://github.com/rust-lang/rust/commit/5609683fabfca0cd112c1b5ffebcefa7a31389fc"}, {"sha": "5d73af2d4c036e97b3fb430d53853ff5c4cd975c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d73af2d4c036e97b3fb430d53853ff5c4cd975c", "html_url": "https://github.com/rust-lang/rust/commit/5d73af2d4c036e97b3fb430d53853ff5c4cd975c"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "09771bb762536ae9434abe62792c092d63ec98bd", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8a0a84aabc6de9b747404f25230491b1560e8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8a0a84aabc6de9b747404f25230491b1560e8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a1e8a0a84aabc6de9b747404f25230491b1560e8", "patch": "@@ -2330,7 +2330,7 @@ fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, d\n     );\n     let mut err = struct_span_err!(tcx.sess, sp, E0731, \"transparent enum {}\", msg);\n     err.span_label(sp, &msg);\n-    if let &[ref start @ .., ref end] = &variant_spans[..] {\n+    if let [start @ .., end] = &*variant_spans {\n         for variant_span in start {\n             err.span_label(*variant_span, \"\");\n         }\n@@ -2372,23 +2372,14 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     }\n     let sp = tcx.sess.source_map().def_span(sp);\n \n-    if adt.is_enum() {\n-        if !tcx.features().transparent_enums {\n-            feature_err(\n-                &tcx.sess.parse_sess,\n-                sym::transparent_enums,\n-                sp,\n-                \"transparent enums are unstable\",\n-            )\n-            .emit();\n-        }\n-        if adt.variants.len() != 1 {\n-            bad_variant_count(tcx, adt, sp, def_id);\n-            if adt.variants.is_empty() {\n-                // Don't bother checking the fields. No variants (and thus no fields) exist.\n-                return;\n-            }\n-        }\n+    if adt.is_enum() && !tcx.features().transparent_enums {\n+        feature_err(\n+            &tcx.sess.parse_sess,\n+            sym::transparent_enums,\n+            sp,\n+            \"transparent enums are unstable\",\n+        )\n+        .emit();\n     }\n \n     if adt.is_union() && !tcx.features().transparent_unions {\n@@ -2401,6 +2392,14 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n         .emit();\n     }\n \n+    if adt.variants.len() != 1 {\n+        bad_variant_count(tcx, adt, sp, def_id);\n+        if adt.variants.is_empty() {\n+            // Don't bother checking the fields. No variants (and thus no fields) exist.\n+            return;\n+        }\n+    }\n+\n     // For each field, figure out if it's known to be a ZST and align(1)\n     let field_infos = adt.all_fields().map(|field| {\n         let ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, field.did));"}]}