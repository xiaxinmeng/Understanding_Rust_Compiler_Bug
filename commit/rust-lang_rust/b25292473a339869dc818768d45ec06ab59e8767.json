{"sha": "b25292473a339869dc818768d45ec06ab59e8767", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNTI5MjQ3M2EzMzk4NjlkYzgxODc2OGQ0NWVjMDZhYjU5ZTg3Njc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T15:57:04Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T16:12:48Z"}, "message": "Simplify make_input", "tree": {"sha": "7ef1fdae8735d2ade8e3874320699d959555d978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef1fdae8735d2ade8e3874320699d959555d978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25292473a339869dc818768d45ec06ab59e8767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25292473a339869dc818768d45ec06ab59e8767", "html_url": "https://github.com/rust-lang/rust/commit/b25292473a339869dc818768d45ec06ab59e8767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25292473a339869dc818768d45ec06ab59e8767/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6cfc6788800d0ba26d2295dfa1eb460e5ab887", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6cfc6788800d0ba26d2295dfa1eb460e5ab887", "html_url": "https://github.com/rust-lang/rust/commit/4a6cfc6788800d0ba26d2295dfa1eb460e5ab887"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "2b8c69a13079fb8720b78eb7b2c8d881e08a6d88", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b25292473a339869dc818768d45ec06ab59e8767/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25292473a339869dc818768d45ec06ab59e8767/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=b25292473a339869dc818768d45ec06ab59e8767", "patch": "@@ -235,21 +235,15 @@ fn run_compiler(\n         registry: diagnostics_registry(),\n     };\n \n-    match make_input(&matches.free) {\n-        Some((input, input_file_path, input_err)) => {\n-            if let Some(err) = input_err {\n-                // Immediately stop compilation if there was an issue reading\n-                // the input (for example if the input stream is not UTF-8).\n-                early_error_no_abort(config.opts.error_format, &err.to_string());\n-                return Err(ErrorReported);\n-            }\n-\n+    match make_input(config.opts.error_format, &matches.free) {\n+        Err(ErrorReported) => return Err(ErrorReported),\n+        Ok(Some((input, input_file_path))) => {\n             config.input = input;\n             config.input_path = input_file_path;\n \n             callbacks.config(&mut config);\n         }\n-        None => match matches.free.len() {\n+        Ok(None) => match matches.free.len() {\n             0 => {\n                 callbacks.config(&mut config);\n                 interface::run_compiler(config, |compiler| {\n@@ -469,19 +463,23 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n }\n \n // Extract input (string or file and optional path) from matches.\n-fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>, Option<io::Error>)> {\n+fn make_input(\n+    error_format: ErrorOutputType,\n+    free_matches: &[String],\n+) -> Result<Option<(Input, Option<PathBuf>)>, ErrorReported> {\n     if free_matches.len() == 1 {\n         let ifile = &free_matches[0];\n         if ifile == \"-\" {\n             let mut src = String::new();\n-            let err = if io::stdin().read_to_string(&mut src).is_err() {\n-                Some(io::Error::new(\n-                    io::ErrorKind::InvalidData,\n+            if io::stdin().read_to_string(&mut src).is_err() {\n+                // Immediately stop compilation if there was an issue reading\n+                // the input (for example if the input stream is not UTF-8).\n+                early_error_no_abort(\n+                    error_format,\n                     \"couldn't read from stdin, as it did not contain valid UTF-8\",\n-                ))\n-            } else {\n-                None\n-            };\n+                );\n+                return Err(ErrorReported);\n+            }\n             if let Ok(path) = env::var(\"UNSTABLE_RUSTDOC_TEST_PATH\") {\n                 let line = env::var(\"UNSTABLE_RUSTDOC_TEST_LINE\").expect(\n                     \"when UNSTABLE_RUSTDOC_TEST_PATH is set \\\n@@ -490,14 +488,15 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>, Option\n                 let line = isize::from_str_radix(&line, 10)\n                     .expect(\"UNSTABLE_RUSTDOC_TEST_LINE needs to be an number\");\n                 let file_name = FileName::doc_test_source_code(PathBuf::from(path), line);\n-                return Some((Input::Str { name: file_name, input: src }, None, err));\n+                Ok(Some((Input::Str { name: file_name, input: src }, None)))\n+            } else {\n+                Ok(Some((Input::Str { name: FileName::anon_source_code(&src), input: src }, None)))\n             }\n-            Some((Input::Str { name: FileName::anon_source_code(&src), input: src }, None, err))\n         } else {\n-            Some((Input::File(PathBuf::from(ifile)), Some(PathBuf::from(ifile)), None))\n+            Ok(Some((Input::File(PathBuf::from(ifile)), Some(PathBuf::from(ifile)))))\n         }\n     } else {\n-        None\n+        Ok(None)\n     }\n }\n "}]}