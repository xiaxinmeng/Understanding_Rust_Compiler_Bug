{"sha": "0816b94f02e1cd20031b764370ed74102963527d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTZiOTRmMDJlMWNkMjAwMzFiNzY0MzcwZWQ3NDEwMjk2MzUyN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-29T02:30:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-29T02:30:53Z"}, "message": "Auto merge of #42642 - venkatagiri:issue_42312, r=nikomatsakis\n\nrustc_typeck: enforce argument type is sized\n\ncloses #42312\n\nr? @nikomatsakis", "tree": {"sha": "cd07bd265937919df4eb2f9cfd5992ed3c85ce08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd07bd265937919df4eb2f9cfd5992ed3c85ce08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0816b94f02e1cd20031b764370ed74102963527d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0816b94f02e1cd20031b764370ed74102963527d", "html_url": "https://github.com/rust-lang/rust/commit/0816b94f02e1cd20031b764370ed74102963527d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0816b94f02e1cd20031b764370ed74102963527d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28cbfb127fb66846573955838c5ed1c920e7112", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28cbfb127fb66846573955838c5ed1c920e7112", "html_url": "https://github.com/rust-lang/rust/commit/c28cbfb127fb66846573955838c5ed1c920e7112"}, {"sha": "5ed21f5d47c28e0e1541c037683becb90adabe65", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed21f5d47c28e0e1541c037683becb90adabe65", "html_url": "https://github.com/rust-lang/rust/commit/5ed21f5d47c28e0e1541c037683becb90adabe65"}], "stats": {"total": 127, "additions": 61, "deletions": 66}, "files": [{"sha": "a684881c0912abbb7ee967433d60d15c5ab6ecbd", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use hir::{self, map, Local, Pat, Body};\n+use hir::{self, Local, Pat, Body};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use infer::InferCtxt;\n use infer::type_variable::TypeVariableOrigin;\n@@ -88,7 +88,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn need_type_info(&self, body_id: hir::BodyId, span: Span, ty: Ty<'tcx>) {\n+    pub fn need_type_info(&self, body_id: Option<hir::BodyId>, span: Span, ty: Ty<'tcx>) {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n         let name = self.extract_type_name(&ty);\n \n@@ -103,11 +103,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             found_arg_pattern: None,\n         };\n \n-        // #40294: cause.body_id can also be a fn declaration.\n-        // Currently, if it's anything other than NodeExpr, we just ignore it\n-        match self.tcx.hir.find(body_id.node_id) {\n-            Some(map::NodeExpr(expr)) => local_visitor.visit_expr(expr),\n-            _ => ()\n+        if let Some(body_id) = body_id {\n+            let expr = self.tcx.hir.expect_expr(body_id.node_id);\n+            local_visitor.visit_expr(expr);\n         }\n \n         if let Some(pattern) = local_visitor.found_arg_pattern {"}, {"sha": "e2e3d520d4777d96ade68f088a78af54cc46b95f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -45,7 +45,8 @@ use syntax_pos::{DUMMY_SP, Span};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n-                                     errors: &Vec<FulfillmentError<'tcx>>) {\n+                                     errors: &Vec<FulfillmentError<'tcx>>,\n+                                     body_id: Option<hir::BodyId>) {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -105,7 +106,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         for (error, suppressed) in errors.iter().zip(is_suppressed) {\n             if !suppressed {\n-                self.report_fulfillment_error(error);\n+                self.report_fulfillment_error(error, body_id);\n             }\n         }\n     }\n@@ -148,7 +149,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         false\n     }\n \n-    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>) {\n+    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>,\n+                                body_id: Option<hir::BodyId>) {\n         debug!(\"report_fulfillment_errors({:?})\", error);\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref e) => {\n@@ -158,7 +160,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self.report_projection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeAmbiguity => {\n-                self.maybe_report_ambiguity(&error.obligation);\n+                self.maybe_report_ambiguity(&error.obligation, body_id);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(&error.obligation.cause,\n@@ -869,14 +871,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n-    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>) {\n+    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>,\n+                              body_id: Option<hir::BodyId>) {\n         // Unable to successfully determine, probably means\n         // insufficient type information, but could mean\n         // ambiguous impls. The latter *ought* to be a\n         // coherence violation, so we don't report it here.\n \n         let predicate = self.resolve_type_vars_if_possible(&obligation.predicate);\n-        let body_id = hir::BodyId { node_id: obligation.cause.body_id };\n         let span = obligation.cause.span;\n \n         debug!(\"maybe_report_ambiguity(predicate={:?}, obligation={:?})\",\n@@ -953,7 +955,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n                     // both must be type variables, or the other would've been instantiated\n                     assert!(a.is_ty_var() && b.is_ty_var());\n-                    self.need_type_info(hir::BodyId { node_id: obligation.cause.body_id },\n+                    self.need_type_info(body_id,\n                                         obligation.cause.span,\n                                         a);\n                 }"}, {"sha": "c128438aea0d48305eefb929b832f155082140c9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -509,7 +509,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ) {\n             Ok(predicates) => predicates,\n             Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors);\n+                infcx.report_fulfillment_errors(&errors, None);\n                 // An unnormalized env is better than nothing.\n                 return elaborated_env;\n             }"}, {"sha": "68b687a2e6182c8ba34fddadcfc442e1ded1b03f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -996,7 +996,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                                               tcx.require_lang_item(lang_items::SyncTraitLangItem),\n                                               cause);\n                 if let Err(err) = fulfillment_cx.select_all_or_error(&infcx) {\n-                    infcx.report_fulfillment_errors(&err);\n+                    infcx.report_fulfillment_errors(&err, None);\n                 }\n             });\n         }"}, {"sha": "bf134f9547d3817893097baf4148f04abcabd9bc", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -328,7 +328,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors);\n+            infcx.report_fulfillment_errors(errors, None);\n             return Err(ErrorReported);\n         }\n \n@@ -793,7 +793,7 @@ pub fn compare_const_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         if let Err(ref errors) = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(errors);\n+            infcx.report_fulfillment_errors(errors, None);\n             return;\n         }\n "}, {"sha": "ed22cd1333e9c58cf5b25ad8a565c341be834eee", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -110,7 +110,7 @@ fn ensure_drop_params_and_item_params_correspond<'a, 'tcx>(\n \n         if let Err(ref errors) = fulfillment_cx.select_all_or_error(&infcx) {\n             // this could be reached when we get lazy normalization\n-            infcx.report_fulfillment_errors(errors);\n+            infcx.report_fulfillment_errors(errors, None);\n             return Err(ErrorReported);\n         }\n "}, {"sha": "34cf1d7f96ba02c04cc10bf49cff479383b7689d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 36, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -217,6 +217,8 @@ pub struct Inherited<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     /// environment is for an item or something where the \"callee\" is\n     /// not clear.\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n+\n+    body_id: Option<hir::BodyId>,\n }\n \n impl<'a, 'gcx, 'tcx> Deref for Inherited<'a, 'gcx, 'tcx> {\n@@ -605,6 +607,7 @@ impl<'a, 'gcx, 'tcx> Inherited<'a, 'gcx, 'tcx> {\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             anon_types: RefCell::new(NodeMap()),\n             implicit_region_bound,\n+            body_id,\n         }\n     }\n \n@@ -993,16 +996,17 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Add formal parameters.\n     for (arg_ty, arg) in fn_sig.inputs().iter().zip(&body.arguments) {\n-        // The type of the argument must be well-formed.\n-        //\n-        // NB -- this is now checked in wfcheck, but that\n-        // currently only results in warnings, so we issue an\n-        // old-style WF obligation here so that we still get the\n-        // errors that we used to get.\n-        fcx.register_old_wf_obligation(arg_ty, arg.pat.span, traits::MiscObligation);\n-\n         // Check the pattern.\n         fcx.check_pat_arg(&arg.pat, arg_ty, true);\n+\n+        // Check that argument is Sized.\n+        // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n+        // for simple cases like `fn foo(x: Trait)`,\n+        // where we would error once on the parameter as a whole, and once on the binding `x`.\n+        if arg.pat.simple_name().is_none() {\n+            fcx.require_type_is_sized(arg_ty, decl.output.span(), traits::MiscObligation);\n+        }\n+\n         fcx.write_ty(arg.id, arg_ty);\n     }\n \n@@ -1978,17 +1982,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Registers an obligation for checking later, during regionck, that the type `ty` must\n-    /// outlive the region `r`.\n-    pub fn register_region_obligation(&self,\n-                                      ty: Ty<'tcx>,\n-                                      region: ty::Region<'tcx>,\n-                                      cause: traits::ObligationCause<'tcx>)\n-    {\n-        let mut fulfillment_cx = self.fulfillment_cx.borrow_mut();\n-        fulfillment_cx.register_region_obligation(ty, region, cause);\n-    }\n-\n     /// Registers an obligation for checking later, during regionck, that the type `ty` must\n     /// outlive the region `r`.\n     pub fn register_wf_obligation(&self,\n@@ -2003,21 +1996,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                         ty::Predicate::WellFormed(ty)));\n     }\n \n-    pub fn register_old_wf_obligation(&self,\n-                                      ty: Ty<'tcx>,\n-                                      span: Span,\n-                                      code: traits::ObligationCauseCode<'tcx>)\n-    {\n-        // Registers an \"old-style\" WF obligation that uses the\n-        // implicator code.  This is basically a buggy version of\n-        // `register_wf_obligation` that is being kept around\n-        // temporarily just to help with phasing in the newer rules.\n-        //\n-        // FIXME(#27579) all uses of this should be migrated to register_wf_obligation eventually\n-        let cause = traits::ObligationCause::new(span, self.body_id, code);\n-        self.register_region_obligation(ty, self.tcx.types.re_empty, cause);\n-    }\n-\n     /// Registers obligations that all types appearing in `substs` are well-formed.\n     pub fn add_wf_bounds(&self, substs: &Substs<'tcx>, expr: &hir::Expr)\n     {\n@@ -2145,15 +2123,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         match fulfillment_cx.select_all_or_error(self) {\n             Ok(()) => { }\n-            Err(errors) => { self.report_fulfillment_errors(&errors); }\n+            Err(errors) => { self.report_fulfillment_errors(&errors, self.inh.body_id); }\n         }\n     }\n \n     /// Select as many obligations as we can at present.\n     fn select_obligations_where_possible(&self) {\n         match self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n             Ok(()) => { }\n-            Err(errors) => { self.report_fulfillment_errors(&errors); }\n+            Err(errors) => { self.report_fulfillment_errors(&errors, self.inh.body_id); }\n         }\n     }\n "}, {"sha": "81e5dae5477ebcf8df619c8790364c43127f86c4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -377,7 +377,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n \n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n-            self.infcx.need_type_info(self.body.id(), self.span.to_span(&self.tcx), t);\n+            self.infcx.need_type_info(Some(self.body.id()), self.span.to_span(&self.tcx), t);\n         }\n     }\n }"}, {"sha": "9305eff1436520e7b3ee0bebf1c2e21c4e105198", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -386,7 +386,7 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         // Check that all transitive obligations are satisfied.\n         if let Err(errors) = fulfill_cx.select_all_or_error(&infcx) {\n-            infcx.report_fulfillment_errors(&errors);\n+            infcx.report_fulfillment_errors(&errors, None);\n         }\n \n         // Finally, resolve all regions."}, {"sha": "2857b5fb5e05e3c7c61ef9c5e3eeac07680ca29e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -166,7 +166,7 @@ fn require_same_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         match fulfill_cx.select_all_or_error(infcx) {\n             Ok(()) => true,\n             Err(errors) => {\n-                infcx.report_fulfillment_errors(&errors);\n+                infcx.report_fulfillment_errors(&errors, None);\n                 false\n             }\n         }"}, {"sha": "129f7c8b1ea0eb8b203f45b4f5f15dc6262bb295", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -24,7 +24,7 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR type annotations needed\n+    let ex = |x| { //~ ERROR type annotations needed\n+        let_(add(x,x), |y| {\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "896728b6da0f1df15d6b1a26f692556cd869f3cc", "filename": "src/test/compile-fail/issue-38954.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n-\n fn _test(ref _p: str) {}\n+//~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied [E0277]\n \n-#[rustc_error]\n-fn main() { } //~ ERROR compilation successful\n+fn main() { }"}, {"sha": "06573b42b592db5c0dd61dc9ce62f311e39af538", "filename": "src/test/compile-fail/issue-42312.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+pub trait Foo {\n+    fn baz(_: Self::Target) where Self: Deref {}\n+    //~^ ERROR `<Self as std::ops::Deref>::Target: std::marker::Sized` is not satisfied\n+}\n+\n+pub fn f(_: ToString) {}\n+//~^ ERROR the trait bound `std::string::ToString + 'static: std::marker::Sized` is not satisfied\n+\n+fn main() { }"}, {"sha": "d8d42f2cba281c5cc75095f97d19633fe9cfae43", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0816b94f02e1cd20031b764370ed74102963527d/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=0816b94f02e1cd20031b764370ed74102963527d", "patch": "@@ -15,8 +15,6 @@ use std::ops::Deref;\n pub trait Foo {\n     type A;\n     fn boo(&self) -> Self::A;\n-\n-    fn baz(_: Self::Target) where Self: Deref {}\n }\n \n impl Foo for isize {"}]}