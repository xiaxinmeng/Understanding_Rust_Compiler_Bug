{"sha": "129a6239d28aeaea87a9d27191e50b55e6b8923a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOWE2MjM5ZDI4YWVhZWE4N2E5ZDI3MTkxZTUwYjU1ZTZiODkyM2E=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-02-02T02:41:29Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-02-02T02:41:29Z"}, "message": "docs: Standardize on 'Errors' header in std docs", "tree": {"sha": "fddc672c2bc2dbb4ef7a2c3905febae5f8bf4710", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddc672c2bc2dbb4ef7a2c3905febae5f8bf4710"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/129a6239d28aeaea87a9d27191e50b55e6b8923a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/129a6239d28aeaea87a9d27191e50b55e6b8923a", "html_url": "https://github.com/rust-lang/rust/commit/129a6239d28aeaea87a9d27191e50b55e6b8923a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/129a6239d28aeaea87a9d27191e50b55e6b8923a/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49fe5197916ed8065e6d6ff267826546d631be86", "url": "https://api.github.com/repos/rust-lang/rust/commits/49fe5197916ed8065e6d6ff267826546d631be86", "html_url": "https://github.com/rust-lang/rust/commit/49fe5197916ed8065e6d6ff267826546d631be86"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "118675ab2c51dfec613400b3228c3080f50ecef0", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -1644,7 +1644,7 @@ impl str {\n     ///\n     /// [`FromStr`]: str/trait.FromStr.html\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Will return `Err` if it's not possible to parse this string slice into\n     /// the desired type."}, {"sha": "b1242ba6d4df25a8e4135e218c2c9544a092e56c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -433,7 +433,7 @@ impl String {\n     ///\n     /// [`str::from_utf8()`]: ../str/fn.from_utf8.html\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n     /// provided bytes are not UTF-8. The vector you moved in is also included."}, {"sha": "f19970546d79b20d1991b9ee8e3feb20f03c69f9", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -188,7 +188,7 @@ impl Utf8Error {\n /// it, this function is one way to have a stack-allocated string. There is\n /// an example of this in the examples section below.\n ///\n-/// # Failure\n+/// # Errors\n ///\n /// Returns `Err` if the slice is not UTF-8 with a description as to why the\n /// provided slice is not UTF-8."}, {"sha": "9386453d660d23b60600c2b63638f09a9431592b", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -194,7 +194,7 @@ impl char {\n     /// * `a-z`\n     /// * `A-Z`\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// Returns `None` if the `char` does not refer to a digit in the given radix.\n     ///"}, {"sha": "d12cfa6183a241aee0391405af3bd2d9f85d5616", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -70,7 +70,7 @@ pub struct Metadata(fs_imp::FileAttr);\n /// information like the entry's path and possibly other metadata can be\n /// learned.\n ///\n-/// # Failure\n+/// # Errors\n ///\n /// This `io::Result` will be an `Err` if there's some sort of intermittent\n /// IO error during iteration."}, {"sha": "9a786752365f1d4c890f909bae85b5d56d80a876", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -129,7 +129,7 @@ impl Condvar {\n     /// the predicate must always be checked each time this function returns to\n     /// protect against spurious wakeups.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the mutex being waited on is\n     /// poisoned when this thread re-acquires the lock. For more information,"}, {"sha": "fe9f0371abd5d3b418980eb81954952b02c08c7c", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -205,7 +205,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// held. An RAII guard is returned to allow scoped unlock of the lock. When\n     /// the guard goes out of scope, the mutex will be unlocked.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error once the mutex is acquired.\n@@ -223,7 +223,7 @@ impl<T: ?Sized> Mutex<T> {\n     ///\n     /// This function does not block.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n@@ -250,7 +250,7 @@ impl<T: ?Sized> Mutex<T> {\n \n     /// Consumes this mutex, returning the underlying data.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead.\n@@ -280,7 +280,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// Since this call borrows the `Mutex` mutably, no actual locking needs to\n     /// take place---the mutable borrow statically guarantees no locks exist.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return an error instead."}, {"sha": "63ef7732ad650cc71deb1cd9984fed434a52dfaf", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -169,7 +169,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Returns an RAII guard which will release this thread's shared access\n     /// once it is dropped.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock.\n@@ -192,7 +192,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// This function does not provide any guarantees with respect to the ordering\n     /// of whether contentious readers or writers will acquire the lock first.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -217,7 +217,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Returns an RAII guard which will drop the write access of this rwlock\n     /// when dropped.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock.\n@@ -240,7 +240,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// This function does not provide any guarantees with respect to the ordering\n     /// of whether contentious readers or writers will acquire the lock first.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -269,7 +269,7 @@ impl<T: ?Sized> RwLock<T> {\n \n     /// Consumes this `RwLock`, returning the underlying data.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An\n@@ -301,7 +301,7 @@ impl<T: ?Sized> RwLock<T> {\n     /// Since this call borrows the `RwLock` mutably, no actual locking needs to\n     /// take place---the mutable borrow statically guarantees no locks exist.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// This function will return an error if the RwLock is poisoned. An RwLock\n     /// is poisoned whenever a writer panics while holding an exclusive lock. An"}, {"sha": "2e2be63c3cb5b300ea63c813cc8951e74acc53a9", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129a6239d28aeaea87a9d27191e50b55e6b8923a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=129a6239d28aeaea87a9d27191e50b55e6b8923a", "patch": "@@ -78,7 +78,7 @@ impl<T> ReentrantMutex<T> {\n     /// calling this method already holds the lock, the call shall succeed without\n     /// blocking.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be\n@@ -95,7 +95,7 @@ impl<T> ReentrantMutex<T> {\n     ///\n     /// This function does not block.\n     ///\n-    /// # Failure\n+    /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n     /// this call will return failure if the mutex would otherwise be"}]}