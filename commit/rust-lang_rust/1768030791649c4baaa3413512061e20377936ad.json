{"sha": "1768030791649c4baaa3413512061e20377936ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjgwMzA3OTE2NDljNGJhYWEzNDEzNTEyMDYxZTIwMzc3OTM2YWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-22T14:02:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:17:23Z"}, "message": "rustc: track the body owner DefId in MC and EUV.", "tree": {"sha": "dd44bab7754b3a45f2c3552a3c6d5e351a4ea96b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd44bab7754b3a45f2c3552a3c6d5e351a4ea96b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1768030791649c4baaa3413512061e20377936ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1768030791649c4baaa3413512061e20377936ad", "html_url": "https://github.com/rust-lang/rust/commit/1768030791649c4baaa3413512061e20377936ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1768030791649c4baaa3413512061e20377936ad/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961fe5479f3e981aafb4f8f957faea52ec295365", "url": "https://api.github.com/repos/rust-lang/rust/commits/961fe5479f3e981aafb4f8f957faea52ec295365", "html_url": "https://github.com/rust-lang/rust/commit/961fe5479f3e981aafb4f8f957faea52ec295365"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "2d94874105a48567b98acfaac5468c3e34de5ac2", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -268,6 +268,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n     /// See also `with_infer`, which is used *during* typeck.\n     pub fn new(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+               body_owner: DefId,\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n@@ -276,6 +277,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n     {\n         ExprUseVisitor {\n             mc: mc::MemCategorizationContext::new(tcx,\n+                                                  body_owner,\n                                                   region_scope_tree,\n                                                   tables,\n                                                   rvalue_promotable_map),\n@@ -288,13 +290,19 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     pub fn with_infer(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n                       infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+                      body_owner: DefId,\n                       param_env: ty::ParamEnv<'tcx>,\n                       region_scope_tree: &'a region::ScopeTree,\n                       tables: &'a ty::TypeckTables<'tcx>)\n                       -> Self\n     {\n         ExprUseVisitor {\n-            mc: mc::MemCategorizationContext::with_infer(infcx, region_scope_tree, tables),\n+            mc: mc::MemCategorizationContext::with_infer(\n+                infcx,\n+                body_owner,\n+                region_scope_tree,\n+                tables,\n+            ),\n             delegate,\n             param_env,\n         }\n@@ -965,10 +973,9 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         // caller's perspective\n         if upvar.has_parent {\n             let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_hir_id);\n-            let parent_def_id = self.tcx().parent(closure_def_id).unwrap();\n-            assert!(self.tcx().is_closure(parent_def_id));\n+            assert_eq!(self.mc.body_owner, self.tcx().parent(closure_def_id).unwrap());\n             let var_nid = self.tcx().hir().hir_to_node_id(var_id);\n-            self.mc.cat_upvar(closure_hir_id, closure_span, var_nid, parent_def_id)\n+            self.mc.cat_upvar(closure_hir_id, closure_span, var_nid)\n         } else {\n             let var_ty = self.mc.node_ty(var_id)?;\n             self.mc.cat_res(closure_hir_id, closure_span, var_ty, Res::Local(var_id))"}, {"sha": "2022169dbf1b9b67b0125e3e9254af65029f2fa1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -288,6 +288,7 @@ impl HirNode for hir::Pat {\n #[derive(Clone)]\n pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    pub body_owner: DefId,\n     pub region_scope_tree: &'a region::ScopeTree,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n     rvalue_promotable_map: Option<&'tcx ItemLocalSet>,\n@@ -398,12 +399,14 @@ impl MutabilityCategory {\n \n impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+               body_owner: DefId,\n                region_scope_tree: &'a region::ScopeTree,\n                tables: &'a ty::TypeckTables<'tcx>,\n                rvalue_promotable_map: Option<&'tcx ItemLocalSet>)\n                -> MemCategorizationContext<'a, 'tcx, 'tcx> {\n         MemCategorizationContext {\n             tcx,\n+            body_owner,\n             region_scope_tree,\n             tables,\n             rvalue_promotable_map,\n@@ -423,6 +426,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     /// - similarly, as the results of upvar analysis are not yet\n     ///   known, the results around upvar accesses may be incorrect.\n     pub fn with_infer(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+                      body_owner: DefId,\n                       region_scope_tree: &'a region::ScopeTree,\n                       tables: &'a ty::TypeckTables<'tcx>)\n                       -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n@@ -436,6 +440,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         MemCategorizationContext {\n             tcx,\n+            body_owner,\n             region_scope_tree,\n             tables,\n             rvalue_promotable_map,\n@@ -739,8 +744,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n             Res::Upvar(var_id, closure_node_id) => {\n                 let var_nid = self.tcx.hir().hir_to_node_id(var_id);\n-                let closure_expr_def_id = self.tcx.hir().local_def_id(closure_node_id);\n-                self.cat_upvar(hir_id, span, var_nid, closure_expr_def_id)\n+                let closure_def_id = self.tcx.hir().local_def_id(closure_node_id);\n+                assert_eq!(self.body_owner, closure_def_id);\n+\n+                self.cat_upvar(hir_id, span, var_nid)\n             }\n \n             Res::Local(vid) => {\n@@ -766,7 +773,6 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         hir_id: hir::HirId,\n         span: Span,\n         var_id: ast::NodeId,\n-        closure_expr_def_id: DefId,\n     ) -> McResult<cmt_<'tcx>> {\n         // An upvar can have up to 3 components. We translate first to a\n         // `Categorization::Upvar`, which is itself a fiction -- it represents the reference to the\n@@ -791,6 +797,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // FnMut          | copied -> &'env mut  | upvar -> &'env mut -> &'up bk\n         // FnOnce         | copied               | upvar -> &'up bk\n \n+        let closure_expr_def_id = self.body_owner;\n         let fn_hir_id = self.tcx.hir().local_def_id_to_hir_id(\n             LocalDefId::from_def_id(closure_expr_def_id),\n         );"}, {"sha": "35e6c1c5bf5a762cddda221c937dc23519b2ca7b", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -208,6 +208,7 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let rvalue_promotable_map = bccx.tcx.rvalue_promotable_map(def_id);\n     euv::ExprUseVisitor::new(&mut clcx,\n                              bccx.tcx,\n+                             def_id,\n                              param_env,\n                              &bccx.region_scope_tree,\n                              bccx.tables,"}, {"sha": "e437c08c956ec73123764af4e3880236df599ead", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -44,6 +44,7 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let rvalue_promotable_map = bccx.tcx.rvalue_promotable_map(def_id);\n     euv::ExprUseVisitor::new(&mut glcx,\n                              bccx.tcx,\n+                             def_id,\n                              param_env,\n                              &bccx.region_scope_tree,\n                              bccx.tables,"}, {"sha": "215faee953230913674a78fc4d2a60bfa69d0f21", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -35,6 +35,7 @@ pub(crate) fn check_match<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n \n     MatchVisitor {\n         tcx,\n+        body_owner: def_id,\n         tables: tcx.body_tables(body_id),\n         region_scope_tree: &tcx.region_scope_tree(def_id),\n         param_env: tcx.param_env(def_id),\n@@ -48,6 +49,7 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n \n struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    body_owner: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     identity_substs: SubstsRef<'tcx>,\n@@ -632,6 +634,7 @@ fn check_for_mutation_in_guard(cx: &MatchVisitor<'_, '_>, guard: &hir::Guard) {\n         hir::Guard::If(expr) =>\n             ExprUseVisitor::new(&mut checker,\n                                 cx.tcx,\n+                                cx.body_owner,\n                                 cx.param_env,\n                                 cx.region_scope_tree,\n                                 cx.tables,"}, {"sha": "869cae3d3a8e4711b3af973df84c58e53ae4f848", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -199,8 +199,15 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let param_env = self.param_env;\n         let region_scope_tree = self.tcx.region_scope_tree(item_def_id);\n         let tables = self.tables;\n-        euv::ExprUseVisitor::new(self, tcx, param_env, &region_scope_tree, tables, None)\n-            .consume_body(body);\n+        euv::ExprUseVisitor::new(\n+            self,\n+            tcx,\n+            item_def_id,\n+            param_env,\n+            &region_scope_tree,\n+            tables,\n+            None,\n+        ).consume_body(body);\n \n         let body_promotable = self.check_expr(&body.value);\n         self.in_fn = outer_in_fn;"}, {"sha": "21d7e483e9d15fd12a24deebaa35657f321d961b", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -200,6 +200,7 @@ pub struct RegionCtxt<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n \n     // id of innermost fn body id\n     body_id: hir::HirId,\n+    body_owner: DefId,\n \n     // call_site scope of innermost fn\n     call_site_scope: Option<region::Scope>,\n@@ -236,6 +237,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n             region_scope_tree,\n             repeating_scope: initial_repeating_scope,\n             body_id: initial_body_id,\n+            body_owner: subject,\n             call_site_scope: None,\n             subject_def_id: subject,\n             outlives_environment,\n@@ -308,6 +310,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         let body_id = body.id();\n         self.body_id = body_id.hir_id;\n+        self.body_owner = self.tcx.hir().body_owner_def_id(body_id);\n \n         let call_site = region::Scope {\n             id: body.value.hir_id.local_id,\n@@ -466,6 +469,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n         // Save state of current function before invoking\n         // `visit_fn_body`.  We will restore afterwards.\n         let old_body_id = self.body_id;\n+        let old_body_owner = self.body_owner;\n         let old_call_site_scope = self.call_site_scope;\n         let env_snapshot = self.outlives_environment.push_snapshot_pre_closure();\n \n@@ -477,6 +481,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n             .pop_snapshot_post_closure(env_snapshot);\n         self.call_site_scope = old_call_site_scope;\n         self.body_id = old_body_id;\n+        self.body_owner = old_body_owner;\n     }\n \n     //visit_pat: visit_pat, // (..) see above\n@@ -829,6 +834,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     {\n         f(mc::MemCategorizationContext::with_infer(\n             &self.infcx,\n+            self.body_owner,\n             &self.region_scope_tree,\n             &self.tables.borrow(),\n         ))"}, {"sha": "82c173a6f7a57e90b7abd44ee4a6e6353aaf6fb2", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1768030791649c4baaa3413512061e20377936ad/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=1768030791649c4baaa3413512061e20377936ad", "patch": "@@ -167,6 +167,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n+        assert_eq!(body_owner_def_id, closure_def_id);\n         let region_scope_tree = &self.tcx.region_scope_tree(body_owner_def_id);\n         let mut delegate = InferBorrowKind {\n             fcx: self,\n@@ -178,6 +179,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         euv::ExprUseVisitor::with_infer(\n             &mut delegate,\n             &self.infcx,\n+            body_owner_def_id,\n             self.param_env,\n             region_scope_tree,\n             &self.tables.borrow(),"}]}