{"sha": "a74feaf1594673bcec77ed45bd4b6766289a25b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NGZlYWYxNTk0NjczYmNlYzc3ZWQ0NWJkNGI2NzY2Mjg5YTI1YjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-05T19:45:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-05T19:46:22Z"}, "message": "rustc: Link with intrinsics.bc; change intrinsics linkage to linkonce_odr", "tree": {"sha": "0e9ae545b866d22b99d6d22424fed528a76b6796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e9ae545b866d22b99d6d22424fed528a76b6796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a74feaf1594673bcec77ed45bd4b6766289a25b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a74feaf1594673bcec77ed45bd4b6766289a25b3", "html_url": "https://github.com/rust-lang/rust/commit/a74feaf1594673bcec77ed45bd4b6766289a25b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a74feaf1594673bcec77ed45bd4b6766289a25b3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e0de22c129c2faec142c879c820f6db91b75b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e0de22c129c2faec142c879c820f6db91b75b2", "html_url": "https://github.com/rust-lang/rust/commit/48e0de22c129c2faec142c879c820f6db91b75b2"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "ebeda8dc36be4375ee3564e85b04cf7df9570e2a", "filename": "src/comp/back/Link.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Fcomp%2Fback%2FLink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Fcomp%2Fback%2FLink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2FLink.rs?ref=a74feaf1594673bcec77ed45bd4b6766289a25b3", "patch": "@@ -2,12 +2,14 @@ import driver.session;\n import lib.llvm.llvm;\n import middle.trans;\n import std._str;\n+import std.fs;\n \n import lib.llvm.llvm.ModuleRef;\n import lib.llvm.llvm.ValueRef;\n import lib.llvm.mk_pass_manager;\n import lib.llvm.mk_target_data;\n import lib.llvm.mk_type_names;\n+import lib.llvm.False;\n \n tag output_type {\n     output_type_none;\n@@ -16,8 +18,30 @@ tag output_type {\n     output_type_object;\n }\n \n+fn llvm_err(session.session sess, str msg) {\n+    sess.err(msg + \": \" + _str.str_from_cstr(llvm.LLVMRustGetLastError()));\n+    fail;\n+}\n+\n fn link_intrinsics(session.session sess, ModuleRef llmod) {\n-    // TODO\n+    auto path = fs.connect(sess.get_opts().sysroot, \"intrinsics.bc\");\n+    auto membuf =\n+        llvm.LLVMRustCreateMemoryBufferWithContentsOfFile(_str.buf(path));\n+    if ((membuf as uint) == 0u) {\n+        llvm_err(sess, \"installation problem: couldn't open intrinstics.bc\");\n+        fail;\n+    }\n+\n+    auto llintrinsicsmod = llvm.LLVMRustParseBitcode(membuf);\n+    if ((llintrinsicsmod as uint) == 0u) {\n+        llvm_err(sess, \"installation problem: couldn't parse intrinstics.bc\");\n+        fail;\n+    }\n+\n+    if (llvm.LLVMLinkModules(llmod, llintrinsicsmod) == False) {\n+        llvm_err(sess, \"couldn't link the module with the intrinsics\");\n+        fail;\n+    }\n }\n \n mod Write {"}, {"sha": "a40592d5d7e1211161663e07369c1eb4b72278f7", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=a74feaf1594673bcec77ed45bd4b6766289a25b3", "patch": "@@ -336,7 +336,9 @@ fn get_meta_sect_name() -> str {\n \n fn get_data_layout() -> str {\n     if (_str.eq(target_os(), \"macos\")) {\n-      ret \"e-p:32:32-f64:32:64-i64:32:64-f80:128:128-n8:16:32\";\n+      ret \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64\" +\n+        \"-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128\" +\n+        \"-n8:16:32\";\n     }\n     if (_str.eq(target_os(), \"win32\")) {\n       ret \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\";"}, {"sha": "b327c0f105f937c16b3d1176bacc92931d32b430", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=a74feaf1594673bcec77ed45bd4b6766289a25b3", "patch": "@@ -1,3 +1,6 @@\n+// Use `clang++ -emit-llvm -S -arch i386 -O3 -I../isaac -I../uthash -o\n+//      intrinsics.ll intrinsics.cpp`\n+\n #include \"../rust_internal.h\"\n \n extern \"C\" size_t"}, {"sha": "ab78bab75ccf56632351f6079d69847dbd68cd89", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/a74feaf1594673bcec77ed45bd4b6766289a25b3/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=a74feaf1594673bcec77ed45bd4b6766289a25b3", "patch": "@@ -51,7 +51,7 @@ target triple = \"@CFG_LLVM_TRIPLE@\"\n %struct.stk_seg = type { i32, i32, [0 x i8] }\n %struct.type_desc = type { %struct.type_desc**, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n \n-define i32 @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind readonly ssp {\n+define linkonce_odr i32 @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind readonly ssp {\n entry:\n   %fill = getelementptr inbounds %struct.rust_vec* %v, i32 0, i32 2\n   %tmp1 = load i32* %fill, align 4, !tbaa !0"}]}