{"sha": "fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "node_id": "C_kwDOAAsO6NoAKGZiMDA0ZTlhOTU3OTNiNzY3MmQ1NWIyOTg0ZDY1ZDRhYzAwYTNjZmM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-18T07:35:21Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-03T14:41:12Z"}, "message": "fix #101749, use . instead of :: when accessing a method of an object", "tree": {"sha": "033e66ea5bd1771498488df7520e37976531d7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/033e66ea5bd1771498488df7520e37976531d7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "html_url": "https://github.com/rust-lang/rust/commit/fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28a53cdb4695b71cb9ee39959df88542056479cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/28a53cdb4695b71cb9ee39959df88542056479cd", "html_url": "https://github.com/rust-lang/rust/commit/28a53cdb4695b71cb9ee39959df88542056479cd"}], "stats": {"total": 284, "additions": 218, "deletions": 66}, "files": [{"sha": "649165f55572c680556a94eb24c6e3f023206ac1", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -470,6 +470,7 @@ pub enum StashKey {\n     /// Maybe there was a typo where a comma was forgotten before\n     /// FRU syntax\n     MaybeFruTypo,\n+    CallAssocMethod,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "c873b0cd08f1dfe726140abd4eac3e00b3589054", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -528,6 +528,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.resolve_ty_and_res_fully_qualified_call(qpath, expr.hir_id, expr.span);\n         let ty = match res {\n             Res::Err => {\n+                self.suggest_assoc_method_call(segs);\n                 let e =\n                     self.tcx.sess.delay_span_bug(qpath.span(), \"`Res::Err` but no error emitted\");\n                 self.set_tainted_by_errors(e);"}, {"sha": "3549a48250ff39b41043bd667ddc8b80647b43bf", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -5,6 +5,7 @@ use crate::errors;\n use crate::FnCtxt;\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::StashKey;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n     MultiSpan,\n@@ -13,6 +14,8 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n+use rustc_hir::PatKind::Binding;\n+use rustc_hir::PathSegment;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::{\n     type_variable::{TypeVariableOrigin, TypeVariableOriginKind},\n@@ -35,11 +38,11 @@ use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n };\n \n-use std::cmp::Ordering;\n-use std::iter;\n-\n use super::probe::{AutorefOrPtrAdjustment, IsSuggestion, Mode, ProbeScope};\n use super::{CandidateSource, MethodError, NoMatchData};\n+use rustc_hir::intravisit::Visitor;\n+use std::cmp::Ordering;\n+use std::iter;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn is_fn_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n@@ -1470,6 +1473,61 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    /// For code `rect::area(...)`,\n+    /// if `rect` is a local variable and `area` is a valid assoc method for it,\n+    /// we try to suggest `rect.area()`\n+    pub(crate) fn suggest_assoc_method_call(&self, segs: &[PathSegment<'_>]) {\n+        debug!(\"suggest_assoc_method_call segs: {:?}\", segs);\n+        let [seg1, seg2] = segs else { return; };\n+        let Some(mut diag) =\n+                self.tcx.sess.diagnostic().steal_diagnostic(seg1.ident.span, StashKey::CallAssocMethod)\n+                else { return };\n+\n+        let map = self.infcx.tcx.hir();\n+        let body = map.body(rustc_hir::BodyId { hir_id: self.body_id });\n+        struct LetVisitor<'a> {\n+            result: Option<&'a hir::Expr<'a>>,\n+            ident_name: Symbol,\n+        }\n+\n+        impl<'v> Visitor<'v> for LetVisitor<'v> {\n+            fn visit_stmt(&mut self, ex: &'v hir::Stmt<'v>) {\n+                if let hir::StmtKind::Local(hir::Local { pat, init, .. }) = &ex.kind {\n+                    if let Binding(_, _, ident, ..) = pat.kind &&\n+                        ident.name == self.ident_name {\n+                        self.result = *init;\n+                    }\n+                }\n+                hir::intravisit::walk_stmt(self, ex);\n+            }\n+        }\n+\n+        let mut visitor = LetVisitor { result: None, ident_name: seg1.ident.name };\n+        visitor.visit_body(&body);\n+\n+        let parent = self.tcx.hir().get_parent_node(seg1.hir_id);\n+        if let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent) &&\n+            let Some(expr) = visitor.result {\n+            let self_ty = self.node_ty(expr.hir_id);\n+            let probe = self.lookup_probe(\n+                seg2.ident,\n+                self_ty,\n+                call_expr,\n+                ProbeScope::TraitsInScope,\n+            );\n+            if probe.is_ok() {\n+                let sm = self.infcx.tcx.sess.source_map();\n+                diag.span_suggestion_verbose(\n+                    sm.span_extend_while(seg1.ident.span.shrink_to_hi(), |c| c == ':').unwrap(),\n+                    \"you may have meant to call an instance method\",\n+                    \".\".to_string(),\n+                    Applicability::MaybeIncorrect\n+                );\n+            }\n+        }\n+        diag.emit();\n+    }\n+\n     /// Suggest calling a method on a field i.e. `a.field.bar()` instead of `a.bar()`\n     fn suggest_calling_method_on_field(\n         &self,"}, {"sha": "f6b6cf3a94c18e93f3075ae246db451067694c35", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -1840,13 +1840,16 @@ impl<'a> Resolver<'a> {\n \n             (format!(\"use of undeclared type `{}`\", ident), suggestion)\n         } else {\n-            let suggestion = if ident.name == sym::alloc {\n-                Some((\n+            let mut suggestion = None;\n+            if ident.name == sym::alloc {\n+                suggestion = Some((\n                     vec![],\n                     String::from(\"add `extern crate alloc` to use the `alloc` crate\"),\n                     Applicability::MaybeIncorrect,\n                 ))\n-            } else {\n+            }\n+\n+            suggestion = suggestion.or_else(|| {\n                 self.find_similarly_named_module_or_crate(ident.name, &parent_scope.module).map(\n                     |sugg| {\n                         (\n@@ -1856,7 +1859,7 @@ impl<'a> Resolver<'a> {\n                         )\n                     },\n                 )\n-            };\n+            });\n             (format!(\"use of undeclared crate or module `{}`\", ident), suggestion)\n         }\n     }"}, {"sha": "107987c2673f7f42b0943c497c34eeba8b6544c1", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -3364,13 +3364,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // Before we start looking for candidates, we have to get our hands\n             // on the type user is trying to perform invocation on; basically:\n             // we're transforming `HashMap::new` into just `HashMap`.\n-            let path = match path.split_last() {\n+            let prefix_path = match path.split_last() {\n                 Some((_, path)) if !path.is_empty() => path,\n                 _ => return Some(parent_err),\n             };\n \n             let (mut err, candidates) =\n-                this.smart_resolve_report_errors(path, path_span, PathSource::Type, None);\n+                this.smart_resolve_report_errors(prefix_path, path_span, PathSource::Type, None);\n \n             // There are two different error messages user might receive at\n             // this point:\n@@ -3414,11 +3414,23 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             if this.should_report_errs() {\n                 if candidates.is_empty() {\n-                    // When there is no suggested imports, we can just emit the error\n-                    // and suggestions immediately. Note that we bypass the usually error\n-                    // reporting routine (ie via `self.r.report_error`) because we need\n-                    // to post-process the `ResolutionError` above.\n-                    err.emit();\n+                    if path.len() == 2 && prefix_path.len() == 1 {\n+                        // Delay to check whether methond name is an associated function or not\n+                        // ```\n+                        // let foo = Foo {};\n+                        // foo::bar(); // possibly suggest to foo.bar();\n+                        //```\n+                        err.stash(\n+                            prefix_path[0].ident.span,\n+                            rustc_errors::StashKey::CallAssocMethod,\n+                        );\n+                    } else {\n+                        // When there is no suggested imports, we can just emit the error\n+                        // and suggestions immediately. Note that we bypass the usually error\n+                        // reporting routine (ie via `self.r.report_error`) because we need\n+                        // to post-process the `ResolutionError` above.\n+                        err.emit();\n+                    }\n                 } else {\n                     // If there are suggested imports, the error reporting is delayed\n                     this.r.use_injections.push(UseError {\n@@ -3427,7 +3439,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         def_id,\n                         instead: false,\n                         suggestion: None,\n-                        path: path.into(),\n+                        path: prefix_path.into(),\n                         is_call: source.is_call(),\n                     });\n                 }"}, {"sha": "558760c6793ab08dc34bdde3589725466ba53d91", "filename": "src/test/ui/resolve/bad-module.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fbad-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fbad-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-module.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -1,15 +1,15 @@\n-error[E0433]: failed to resolve: use of undeclared crate or module `thing`\n-  --> $DIR/bad-module.rs:2:15\n-   |\n-LL |     let foo = thing::len(Vec::new());\n-   |               ^^^^^ use of undeclared crate or module `thing`\n-\n error[E0433]: failed to resolve: use of undeclared crate or module `foo`\n   --> $DIR/bad-module.rs:5:15\n    |\n LL |     let foo = foo::bar::baz();\n    |               ^^^ use of undeclared crate or module `foo`\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `thing`\n+  --> $DIR/bad-module.rs:2:15\n+   |\n+LL |     let foo = thing::len(Vec::new());\n+   |               ^^^^^ use of undeclared crate or module `thing`\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "4d3d469447c2b9b20519bc079c1e32f6cf5ed7c2", "filename": "src/test/ui/resolve/issue-101749-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-101749-2.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -0,0 +1,16 @@\n+struct Rectangle {\n+    width: i32,\n+    height: i32,\n+}\n+impl Rectangle {\n+    fn new(width: i32, height: i32) -> Self {\n+        Self { width, height }\n+    }\n+}\n+\n+fn main() {\n+    let rect = Rectangle::new(3, 4);\n+    // `area` is not implemented for `Rectangle`, so this should not suggest\n+    let _ = rect::area();\n+    //~^ ERROR failed to resolve: use of undeclared crate or module `rect`\n+}"}, {"sha": "370d4b14540d634c4f2b5e32f037823d126d7f10", "filename": "src/test/ui/resolve/issue-101749-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-101749-2.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared crate or module `rect`\n+  --> $DIR/issue-101749-2.rs:14:13\n+   |\n+LL |     let _ = rect::area();\n+   |             ^^^^ use of undeclared crate or module `rect`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "3e5544296e462f4653e24aa8c5b88359a46bf874", "filename": "src/test/ui/resolve/issue-101749.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.fixed?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+struct Rectangle {\n+    width: i32,\n+    height: i32,\n+}\n+impl Rectangle {\n+    fn new(width: i32, height: i32) -> Self {\n+        Self { width, height }\n+    }\n+    fn area(&self) -> i32 {\n+        self.height * self.width\n+    }\n+}\n+\n+fn main() {\n+    let rect = Rectangle::new(3, 4);\n+    let _ = rect.area();\n+    //~^ ERROR failed to resolve: use of undeclared crate or module `rect`\n+}"}, {"sha": "fd67ccab6fa7522c80a0199a8bcdf9ff8f28b3af", "filename": "src/test/ui/resolve/issue-101749.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.rs?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+struct Rectangle {\n+    width: i32,\n+    height: i32,\n+}\n+impl Rectangle {\n+    fn new(width: i32, height: i32) -> Self {\n+        Self { width, height }\n+    }\n+    fn area(&self) -> i32 {\n+        self.height * self.width\n+    }\n+}\n+\n+fn main() {\n+    let rect = Rectangle::new(3, 4);\n+    let _ = rect::area();\n+    //~^ ERROR failed to resolve: use of undeclared crate or module `rect`\n+}"}, {"sha": "dd29d7fc051039a477700735a19acfeb7211798f", "filename": "src/test/ui/resolve/issue-101749.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-101749.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -0,0 +1,14 @@\n+error[E0433]: failed to resolve: use of undeclared crate or module `rect`\n+  --> $DIR/issue-101749.rs:17:13\n+   |\n+LL |     let _ = rect::area();\n+   |             ^^^^ use of undeclared crate or module `rect`\n+   |\n+help: you may have meant to call an instance method\n+   |\n+LL |     let _ = rect.area();\n+   |                 ~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "82f5a1d5b57b3a167741b4600fe18a6dc9486846", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -1,15 +1,3 @@\n-error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n-  --> $DIR/issue-24968.rs:21:19\n-   |\n-LL | const FOO2: u32 = Self::bar();\n-   |                   ^^^^ `Self` is only available in impls, traits, and type definitions\n-\n-error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n-  --> $DIR/issue-24968.rs:27:22\n-   |\n-LL | static FOO_S2: u32 = Self::bar();\n-   |                      ^^^^ `Self` is only available in impls, traits, and type definitions\n-\n error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-24968.rs:3:11\n    |\n@@ -51,6 +39,18 @@ LL | static FOO_S: Self = 0;\n    |        |\n    |        `Self` not allowed in a static item\n \n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n+  --> $DIR/issue-24968.rs:21:19\n+   |\n+LL | const FOO2: u32 = Self::bar();\n+   |                   ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n+  --> $DIR/issue-24968.rs:27:22\n+   |\n+LL | static FOO_S2: u32 = Self::bar();\n+   |                      ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0411, E0433."}, {"sha": "89b69e1409967544f917a7bb296e3843210dc5e0", "filename": "src/test/ui/resolve/typo-suggestion-mistyped-in-path.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -1,3 +1,24 @@\n+error[E0433]: failed to resolve: could not find `Struc` in `module`\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:35:13\n+   |\n+LL |     module::Struc::foo();\n+   |             ^^^^^\n+   |             |\n+   |             could not find `Struc` in `module`\n+   |             help: a struct with a similar name exists: `Struct`\n+\n+error[E0599]: no function or associated item named `fob` found for struct `Struct` in the current scope\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:23:13\n+   |\n+LL | struct Struct;\n+   | ------------- function or associated item `fob` not found for this struct\n+...\n+LL |     Struct::fob();\n+   |             ^^^\n+   |             |\n+   |             function or associated item not found in `Struct`\n+   |             help: there is an associated function with a similar name: `foo`\n+\n error[E0433]: failed to resolve: use of undeclared type `Struc`\n   --> $DIR/typo-suggestion-mistyped-in-path.rs:27:5\n    |\n@@ -18,15 +39,6 @@ help: there is a crate or module with a similar name\n LL |     module::foo();\n    |     ~~~~~~\n \n-error[E0433]: failed to resolve: could not find `Struc` in `module`\n-  --> $DIR/typo-suggestion-mistyped-in-path.rs:35:13\n-   |\n-LL |     module::Struc::foo();\n-   |             ^^^^^\n-   |             |\n-   |             could not find `Struc` in `module`\n-   |             help: a struct with a similar name exists: `Struct`\n-\n error[E0433]: failed to resolve: use of undeclared type `Trai`\n   --> $DIR/typo-suggestion-mistyped-in-path.rs:39:5\n    |\n@@ -36,18 +48,6 @@ LL |     Trai::foo();\n    |     use of undeclared type `Trai`\n    |     help: a trait with a similar name exists: `Trait`\n \n-error[E0599]: no function or associated item named `fob` found for struct `Struct` in the current scope\n-  --> $DIR/typo-suggestion-mistyped-in-path.rs:23:13\n-   |\n-LL | struct Struct;\n-   | ------------- function or associated item `fob` not found for this struct\n-...\n-LL |     Struct::fob();\n-   |             ^^^\n-   |             |\n-   |             function or associated item not found in `Struct`\n-   |             help: there is an associated function with a similar name: `foo`\n-\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0433, E0599."}, {"sha": "54ad853831f368bbf1dcba37ee673abfd8cec7d4", "filename": "src/test/ui/resolve/use_suggestion.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared type `GooMap`\n-  --> $DIR/use_suggestion.rs:3:14\n-   |\n-LL |     let x2 = GooMap::new();\n-   |              ^^^^^^ use of undeclared type `GooMap`\n-\n error[E0433]: failed to resolve: use of undeclared type `HashMap`\n   --> $DIR/use_suggestion.rs:2:14\n    |\n@@ -32,6 +26,12 @@ error[E0412]: cannot find type `GooMap` in this scope\n LL |     let y2: GooMap;\n    |             ^^^^^^ not found in this scope\n \n+error[E0433]: failed to resolve: use of undeclared type `GooMap`\n+  --> $DIR/use_suggestion.rs:3:14\n+   |\n+LL |     let x2 = GooMap::new();\n+   |              ^^^^^^ use of undeclared type `GooMap`\n+\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0412, E0433."}, {"sha": "98b88b4fb9202cc7d5ccbe50e6f81e3278dad298", "filename": "src/test/ui/suggestions/crate-or-module-typo.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb004e9a95793b7672d55b2984d65d4ac00a3cfc/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcrate-or-module-typo.stderr?ref=fb004e9a95793b7672d55b2984d65d4ac00a3cfc", "patch": "@@ -20,12 +20,6 @@ help: there is a crate or module with a similar name\n LL | use bar::bar;\n    |     ~~~\n \n-error[E0433]: failed to resolve: use of undeclared crate or module `bar`\n-  --> $DIR/crate-or-module-typo.rs:6:20\n-   |\n-LL |     pub fn bar() { bar::baz(); }\n-   |                    ^^^ use of undeclared crate or module `bar`\n-\n error[E0433]: failed to resolve: use of undeclared crate or module `st`\n   --> $DIR/crate-or-module-typo.rs:14:10\n    |\n@@ -37,6 +31,12 @@ help: there is a crate or module with a similar name\n LL |     bar: std::cell::Cell<bool>\n    |          ~~~\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `bar`\n+  --> $DIR/crate-or-module-typo.rs:6:20\n+   |\n+LL |     pub fn bar() { bar::baz(); }\n+   |                    ^^^ use of undeclared crate or module `bar`\n+\n error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0432, E0433."}]}