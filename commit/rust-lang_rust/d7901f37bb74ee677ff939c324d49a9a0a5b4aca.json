{"sha": "d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTAxZjM3YmI3NGVlNjc3ZmY5MzljMzI0ZDQ5YTlhMGE1YjRhY2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T08:50:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T08:50:24Z"}, "message": "Auto merge of #86694 - cjgillot:pmmd, r=petrochenkov\n\nStore macro parent module in ExpnData.\n\nAs a consequence, its value is hashed as part of the ExpnId's stable hash.\n\nCloses #85999", "tree": {"sha": "92a64dff608db62f942f6b757870585d75c44cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a64dff608db62f942f6b757870585d75c44cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "html_url": "https://github.com/rust-lang/rust/commit/d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a27044f42ace9eb652781b53f598e25d4e7e918", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a27044f42ace9eb652781b53f598e25d4e7e918", "html_url": "https://github.com/rust-lang/rust/commit/9a27044f42ace9eb652781b53f598e25d4e7e918"}, {"sha": "3162c37b59009f17d92aeb8affc64d33c2d34acb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3162c37b59009f17d92aeb8affc64d33c2d34acb", "html_url": "https://github.com/rust-lang/rust/commit/3162c37b59009f17d92aeb8affc64d33c2d34acb"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "67d71ce48ffa1e90dcd9c6ad71ef306f1a0462b0", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -809,6 +809,7 @@ impl SyntaxExtension {\n         call_site: Span,\n         descr: Symbol,\n         macro_def_id: Option<DefId>,\n+        parent_module: Option<DefId>,\n     ) -> ExpnData {\n         use SyntaxExtensionKind::*;\n         let proc_macro = match self.kind {\n@@ -828,6 +829,7 @@ impl SyntaxExtension {\n             self.local_inner_macros,\n             self.edition,\n             macro_def_id,\n+            parent_module,\n         )\n     }\n }"}, {"sha": "325bec309af55205537aa45c7b24ab7846befecc", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -5,9 +5,7 @@\n //! expressions) that are mostly just leftovers.\n \n pub use crate::def_id::DefPathHash;\n-use crate::def_id::{\n-    CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, CRATE_DEF_INDEX, LOCAL_CRATE,\n-};\n+use crate::def_id::{CrateNum, DefIndex, LocalDefId, StableCrateId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::hir;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -108,9 +106,6 @@ pub struct Definitions {\n     /// The reverse mapping of `def_id_to_hir_id`.\n     pub(super) hir_id_to_def_id: FxHashMap<hir::HirId, LocalDefId>,\n \n-    /// If `ExpnId` is an ID of some macro expansion,\n-    /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n-    parent_modules_of_macro_defs: FxHashMap<ExpnId, DefId>,\n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expansions_that_defined: FxHashMap<LocalDefId, ExpnId>,\n }\n@@ -353,7 +348,6 @@ impl Definitions {\n             def_id_to_hir_id: Default::default(),\n             hir_id_to_def_id: Default::default(),\n             expansions_that_defined: Default::default(),\n-            parent_modules_of_macro_defs: Default::default(),\n         }\n     }\n \n@@ -420,14 +414,6 @@ impl Definitions {\n         self.expansions_that_defined.get(&id).copied().unwrap_or_else(ExpnId::root)\n     }\n \n-    pub fn parent_module_of_macro_def(&self, expn_id: ExpnId) -> DefId {\n-        self.parent_modules_of_macro_defs[&expn_id]\n-    }\n-\n-    pub fn add_parent_module_of_macro_def(&mut self, expn_id: ExpnId, module: DefId) {\n-        self.parent_modules_of_macro_defs.insert(expn_id, module);\n-    }\n-\n     pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {\n         self.def_id_to_hir_id.iter_enumerated().map(|(k, _)| k)\n     }"}, {"sha": "156e860e1a3fbc0ab1648f8384ed5cd0ef02a78b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -1902,13 +1902,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         scope: DefId,\n         block: hir::HirId,\n     ) -> (Ident, DefId) {\n-        let scope =\n-            match ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope)) {\n-                Some(actual_expansion) => {\n-                    self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n-                }\n-                None => self.parent_module(block).to_def_id(),\n-            };\n+        let scope = ident\n+            .span\n+            .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))\n+            .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)\n+            .unwrap_or_else(|| self.parent_module(block).to_def_id());\n         (ident, scope)\n     }\n "}, {"sha": "c8791ec227cdfdd2eeda3cacb3671fa467f8332b", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -836,7 +836,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n \n     fn visit_span(&mut self, span: &mut Span) {\n         let mut expn_data =\n-            ExpnData::default(ExpnKind::Inlined, *span, self.tcx.sess.edition(), None);\n+            ExpnData::default(ExpnKind::Inlined, *span, self.tcx.sess.edition(), None, None);\n         expn_data.def_site = self.body_span;\n         // Make sure that all spans track the fact that they were inlined.\n         *span = self.callsite_span.fresh_expansion(expn_data);"}, {"sha": "f91bf0cbab727f45ad59489197d1871638f3f2bc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -159,6 +159,10 @@ impl<'a> Resolver<'a> {\n             Some(def_id) => def_id,\n             None => return self.ast_transform_scopes.get(&expn_id).unwrap_or(&self.graph_root),\n         };\n+        self.macro_def_scope_from_def_id(def_id)\n+    }\n+\n+    crate fn macro_def_scope_from_def_id(&mut self, def_id: DefId) -> Module<'a> {\n         if let Some(id) = def_id.as_local() {\n             self.local_macro_def_scopes[&id]\n         } else {"}, {"sha": "1727586071d5f58601b09cad297faeca8593cc50", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -20,7 +20,7 @@ use rustc_expand::compile_declarative_macro;\n use rustc_expand::expand::{AstFragment, Invocation, InvocationKind, SupportsMacroExpansion};\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n-use rustc_hir::def_id::{self, CrateNum};\n+use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_hir::PrimTy;\n use rustc_middle::middle::stability;\n use rustc_middle::ty;\n@@ -217,26 +217,20 @@ impl<'a> ResolverExpand for Resolver<'a> {\n         features: &[Symbol],\n         parent_module_id: Option<NodeId>,\n     ) -> ExpnId {\n+        let parent_module = parent_module_id.map(|module_id| self.local_def_id(module_id));\n         let expn_id = ExpnId::fresh(Some(ExpnData::allow_unstable(\n             ExpnKind::AstPass(pass),\n             call_site,\n             self.session.edition(),\n             features.into(),\n             None,\n+            parent_module.map(LocalDefId::to_def_id),\n         )));\n \n-        let parent_scope = if let Some(module_id) = parent_module_id {\n-            let parent_def_id = self.local_def_id(module_id);\n-            self.definitions.add_parent_module_of_macro_def(expn_id, parent_def_id.to_def_id());\n-            self.module_map[&parent_def_id]\n-        } else {\n-            self.definitions.add_parent_module_of_macro_def(\n-                expn_id,\n-                def_id::DefId::local(def_id::CRATE_DEF_INDEX),\n-            );\n-            self.empty_module\n-        };\n+        let parent_scope = parent_module\n+            .map_or(self.empty_module, |parent_def_id| self.module_map[&parent_def_id]);\n         self.ast_transform_scopes.insert(expn_id, parent_scope);\n+\n         expn_id\n     }\n \n@@ -298,12 +292,12 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             span,\n             fast_print_path(path),\n             res.opt_def_id(),\n+            res.opt_def_id().map(|macro_def_id| {\n+                self.macro_def_scope_from_def_id(macro_def_id).nearest_parent_mod\n+            }),\n         ));\n \n         if let Res::Def(_, _) = res {\n-            let normal_module_def_id = self.macro_def_scope(invoc_id).nearest_parent_mod;\n-            self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n-\n             // Gate macro attributes in `#[derive]` output.\n             if !self.session.features_untracked().macro_attributes_in_derive_output\n                 && kind == MacroKind::Attr"}, {"sha": "913aeeca78bebca2a2c9fdd9d96f55a7b1c558c8", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7901f37bb74ee677ff939c324d49a9a0a5b4aca/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=d7901f37bb74ee677ff939c324d49a9a0a5b4aca", "patch": "@@ -181,6 +181,7 @@ impl HygieneData {\n             DUMMY_SP,\n             edition,\n             Some(DefId::local(CRATE_DEF_INDEX)),\n+            None,\n         );\n         root_data.orig_id = Some(0);\n \n@@ -687,7 +688,7 @@ impl Span {\n     ) -> Span {\n         self.fresh_expansion(ExpnData {\n             allow_internal_unstable,\n-            ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None)\n+            ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)\n         })\n     }\n }\n@@ -734,6 +735,8 @@ pub struct ExpnData {\n     /// The `DefId` of the macro being invoked,\n     /// if this `ExpnData` corresponds to a macro invocation\n     pub macro_def_id: Option<DefId>,\n+    /// The normal module (`mod`) in which the expanded macro was defined.\n+    pub parent_module: Option<DefId>,\n     /// The crate that originally created this `ExpnData`. During\n     /// metadata serialization, we only encode `ExpnData`s that were\n     /// created locally - when our serialized metadata is decoded,\n@@ -777,6 +780,7 @@ impl ExpnData {\n         local_inner_macros: bool,\n         edition: Edition,\n         macro_def_id: Option<DefId>,\n+        parent_module: Option<DefId>,\n     ) -> ExpnData {\n         ExpnData {\n             kind,\n@@ -788,6 +792,7 @@ impl ExpnData {\n             local_inner_macros,\n             edition,\n             macro_def_id,\n+            parent_module,\n             krate: LOCAL_CRATE,\n             orig_id: None,\n             disambiguator: 0,\n@@ -800,6 +805,7 @@ impl ExpnData {\n         call_site: Span,\n         edition: Edition,\n         macro_def_id: Option<DefId>,\n+        parent_module: Option<DefId>,\n     ) -> ExpnData {\n         ExpnData {\n             kind,\n@@ -811,6 +817,7 @@ impl ExpnData {\n             local_inner_macros: false,\n             edition,\n             macro_def_id,\n+            parent_module,\n             krate: LOCAL_CRATE,\n             orig_id: None,\n             disambiguator: 0,\n@@ -823,10 +830,11 @@ impl ExpnData {\n         edition: Edition,\n         allow_internal_unstable: Lrc<[Symbol]>,\n         macro_def_id: Option<DefId>,\n+        parent_module: Option<DefId>,\n     ) -> ExpnData {\n         ExpnData {\n             allow_internal_unstable: Some(allow_internal_unstable),\n-            ..ExpnData::default(kind, call_site, edition, macro_def_id)\n+            ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)\n         }\n     }\n "}]}