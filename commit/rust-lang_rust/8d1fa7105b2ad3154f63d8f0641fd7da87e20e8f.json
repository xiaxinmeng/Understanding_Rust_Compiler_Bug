{"sha": "8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f", "node_id": "C_kwDOAAsO6NoAKDhkMWZhNzEwNWIyYWQzMTU0ZjYzZDhmMDY0MWZkN2RhODdlMjBlOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T05:05:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T05:05:46Z"}, "message": "Auto merge of #100205 - cjgillot:noice-doc, r=camelid\n\nAvoid ICE in rustdoc when using `Fn` bounds\n\nFixes https://github.com/rust-lang/rust/issues/100143", "tree": {"sha": "0706d50c40f34d245bfa077567f75f6f318c8872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0706d50c40f34d245bfa077567f75f6f318c8872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f", "html_url": "https://github.com/rust-lang/rust/commit/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03", "html_url": "https://github.com/rust-lang/rust/commit/f03ce30962cf1b2a5158667eabae8bf6e8d1cb03"}, {"sha": "28e4b9e64e436f52b03ba53e0f859a206ef3c93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e4b9e64e436f52b03ba53e0f859a206ef3c93e", "html_url": "https://github.com/rust-lang/rust/commit/28e4b9e64e436f52b03ba53e0f859a206ef3c93e"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "af33c1a6ada7431a99e214ec6fa97b014829c416", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f", "patch": "@@ -348,15 +348,13 @@ where\n     fn make_final_bounds(\n         &self,\n         ty_to_bounds: FxHashMap<Type, FxHashSet<GenericBound>>,\n-        ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)>,\n+        ty_to_fn: FxHashMap<Type, (PolyTrait, Option<Type>)>,\n         lifetime_to_bounds: FxHashMap<Lifetime, FxHashSet<GenericBound>>,\n     ) -> Vec<WherePredicate> {\n         ty_to_bounds\n             .into_iter()\n             .flat_map(|(ty, mut bounds)| {\n-                if let Some(data) = ty_to_fn.get(&ty) {\n-                    let (poly_trait, output) =\n-                        (data.0.as_ref().unwrap().clone(), data.1.as_ref().cloned().map(Box::new));\n+                if let Some((ref poly_trait, ref output)) = ty_to_fn.get(&ty) {\n                     let mut new_path = poly_trait.trait_.clone();\n                     let last_segment = new_path.segments.pop().expect(\"segments were empty\");\n \n@@ -374,8 +372,9 @@ where\n                         GenericArgs::Parenthesized { inputs, output } => (inputs, output),\n                     };\n \n+                    let output = output.as_ref().cloned().map(Box::new);\n                     if old_output.is_some() && old_output != output {\n-                        panic!(\"Output mismatch for {:?} {:?} {:?}\", ty, old_output, data.1);\n+                        panic!(\"Output mismatch for {:?} {:?} {:?}\", ty, old_output, output);\n                     }\n \n                     let new_params = GenericArgs::Parenthesized { inputs: old_input, output };\n@@ -385,7 +384,10 @@ where\n                         .push(PathSegment { name: last_segment.name, args: new_params });\n \n                     bounds.insert(GenericBound::TraitBound(\n-                        PolyTrait { trait_: new_path, generic_params: poly_trait.generic_params },\n+                        PolyTrait {\n+                            trait_: new_path,\n+                            generic_params: poly_trait.generic_params.clone(),\n+                        },\n                         hir::TraitBoundModifier::None,\n                     ));\n                 }\n@@ -471,7 +473,7 @@ where\n         let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n         let mut ty_to_traits: FxHashMap<Type, FxHashSet<Path>> = Default::default();\n \n-        let mut ty_to_fn: FxHashMap<Type, (Option<PolyTrait>, Option<Type>)> = Default::default();\n+        let mut ty_to_fn: FxHashMap<Type, (PolyTrait, Option<Type>)> = Default::default();\n \n         for p in clean_where_predicates {\n             let (orig_p, p) = (p, p.clean(self.cx));\n@@ -535,8 +537,8 @@ where\n                         if is_fn {\n                             ty_to_fn\n                                 .entry(ty.clone())\n-                                .and_modify(|e| *e = (Some(poly_trait.clone()), e.1.clone()))\n-                                .or_insert(((Some(poly_trait.clone())), None));\n+                                .and_modify(|e| *e = (poly_trait.clone(), e.1.clone()))\n+                                .or_insert(((poly_trait.clone()), None));\n \n                             ty_to_bounds.entry(ty.clone()).or_default();\n                         } else {\n@@ -559,7 +561,13 @@ where\n                                     .and_modify(|e| {\n                                         *e = (e.0.clone(), Some(rhs.ty().unwrap().clone()))\n                                     })\n-                                    .or_insert((None, Some(rhs.ty().unwrap().clone())));\n+                                    .or_insert((\n+                                        PolyTrait {\n+                                            trait_: trait_.clone(),\n+                                            generic_params: Vec::new(),\n+                                        },\n+                                        Some(rhs.ty().unwrap().clone()),\n+                                    ));\n                                 continue;\n                             }\n "}, {"sha": "4c4ffddc8a648abaafe7a17c0e3251acc785a9a9", "filename": "src/test/rustdoc/fn-bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f/src%2Ftest%2Frustdoc%2Ffn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f/src%2Ftest%2Frustdoc%2Ffn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffn-bound.rs?ref=8d1fa7105b2ad3154f63d8f0641fd7da87e20e8f", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #100143\n+\n+use std::iter::Peekable;\n+\n+pub struct Span<F: Fn(&i32)> {\n+    inner: Peekable<ConditionalIterator<F>>,\n+}\n+\n+pub struct ConditionalIterator<F> {\n+    f: F,\n+}\n+\n+\n+// @has 'fn_bound/struct.ConditionalIterator.html' '//h3[@class=\"code-header in-band\"]' 'impl<F: Fn(&i32)> Iterator for ConditionalIterator<F>'\n+impl<F: Fn(&i32)> Iterator for ConditionalIterator<F> {\n+    type Item = ();\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        todo!()\n+    }\n+}"}]}