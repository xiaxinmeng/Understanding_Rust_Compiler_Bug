{"sha": "08bea1d9a2347841711987fc0cd4457e43b2cc96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4YmVhMWQ5YTIzNDc4NDE3MTE5ODdmYzBjZDQ0NTdlNDNiMmNjOTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-23T23:31:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-23T23:31:30Z"}, "message": "Revert \"Change the type of the second argument of upcalls to be a %task*.\", breaks win32 build.\n\nThis reverts commit dcf122ede03af71d8a1d892a077a9e2435b64ef3.", "tree": {"sha": "f05f0d926f60a949c992e277e766cc7b9c058821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f05f0d926f60a949c992e277e766cc7b9c058821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08bea1d9a2347841711987fc0cd4457e43b2cc96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08bea1d9a2347841711987fc0cd4457e43b2cc96", "html_url": "https://github.com/rust-lang/rust/commit/08bea1d9a2347841711987fc0cd4457e43b2cc96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08bea1d9a2347841711987fc0cd4457e43b2cc96/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b617dab3c6a563d7c31dabcd0fba5c6342c09c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b617dab3c6a563d7c31dabcd0fba5c6342c09c1", "html_url": "https://github.com/rust-lang/rust/commit/9b617dab3c6a563d7c31dabcd0fba5c6342c09c1"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "a65bb284121f84d71207729ea71c1741eeb83adc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/08bea1d9a2347841711987fc0cd4457e43b2cc96/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08bea1d9a2347841711987fc0cd4457e43b2cc96/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=08bea1d9a2347841711987fc0cd4457e43b2cc96", "patch": "@@ -861,11 +861,8 @@ fn decl_upcall_glue(ModuleRef llmod, type_names tn,\n     let int n = _n as int;\n     let str s = abi.upcall_glue_name(n, pass_task);\n     let vec[TypeRef] args = vec(T_int()); // callee\n-\n-    args += vec(T_taskptr(tn));\n-\n-    if (pass_task) {\n-        n -= 1; // taskptr is included in n\n+    if (!pass_task) {\n+        args += vec(T_int()); // taskptr, will not be passed\n     }\n     args += _vec.init_elt[TypeRef](T_int(), n as uint);\n \n@@ -886,8 +883,10 @@ fn get_upcall(&hashmap[str, ValueRef] upcalls,\n \n fn trans_upcall(@block_ctxt cx, str name, vec[ValueRef] args) -> result {\n     auto cxx = cx.fcx.ccx;\n-    auto t = trans_upcall2(cx.build, cxx.glues, cx.fcx.lltaskptr,\n-                           cxx.upcalls, cxx.tn, cxx.llmod, name, true, args);\n+    auto lltaskptr = cx.build.PtrToInt(cx.fcx.lltaskptr, T_int());\n+    auto args2 = vec(lltaskptr) + args;\n+    auto t = trans_upcall2(cx.build, cxx.glues, lltaskptr,\n+                           cxx.upcalls, cxx.tn, cxx.llmod, name, true, args2);\n     ret res(cx, t);\n }\n \n@@ -896,9 +895,6 @@ fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n                  type_names tn, ModuleRef llmod, str name,\n                  bool pass_task, vec[ValueRef] args) -> ValueRef {\n     let int n = (_vec.len[ValueRef](args) as int);\n-    if (pass_task) {\n-        n += 1;\n-    }\n     let ValueRef llupcall = get_upcall(upcalls, llmod, name, n);\n     llupcall = llvm.LLVMConstPointerCast(llupcall, T_int());\n \n@@ -910,7 +906,9 @@ fn trans_upcall2(builder b, @glue_fns glues, ValueRef lltaskptr,\n     }\n     let vec[ValueRef] call_args = vec(llupcall);\n \n-    call_args += vec(lltaskptr);\n+    if (!pass_task) {\n+        call_args += vec(lltaskptr);\n+    }\n \n     for (ValueRef a in args) {\n         call_args += vec(b.ZExtOrBitCast(a, T_int()));\n@@ -5733,9 +5731,11 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n     auto arg_n = 3u;\n     auto pass_task;\n \n+    auto lltaskptr = bcx.build.PtrToInt(fcx.lltaskptr, T_int());\n     alt (abi) {\n         case (ast.native_abi_rust) {\n             pass_task = true;\n+            call_args += vec(lltaskptr);\n             for each (uint i in _uint.range(0u, num_ty_param)) {\n                 auto llarg = llvm.LLVMGetParam(fcx.llfn, arg_n);\n                 check (llarg as int != 0);\n@@ -5755,8 +5755,8 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n         arg_n += 1u;\n     }\n \n-    auto r = trans_upcall2(bcx.build, cx.glues, fcx.lltaskptr, cx.upcalls,\n-                           cx.tn, cx.llmod, name, pass_task, call_args);\n+    auto r = trans_upcall2(bcx.build, cx.glues, lltaskptr, cx.upcalls, cx.tn,\n+                           cx.llmod, name, pass_task, call_args);\n     auto rptr = bcx.build.BitCast(fcx.llretptr, T_ptr(T_i32()));\n     bcx.build.Store(r, rptr);\n     bcx.build.RetVoid();"}]}