{"sha": "deee0f73da885a71ebf9c8d29213c663dba467b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZWUwZjczZGE4ODVhNzFlYmY5YzhkMjkyMTNjNjYzZGJhNDY3Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-27T13:13:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-27T13:13:53Z"}, "message": "Auto merge of #32252 - durka:derive-21714, r=alexcrichton\n\nderive: use discriminant_value in #[derive(Hash)]\n\nderive: use discriminant_value in #[derive(Hash)]\n\nFixes #21714.\n\nSpawned from #32139.\n\nr? @alexcrichton", "tree": {"sha": "fae606c1a9af5ae0f3f0f83edad23d232776b4b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae606c1a9af5ae0f3f0f83edad23d232776b4b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deee0f73da885a71ebf9c8d29213c663dba467b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deee0f73da885a71ebf9c8d29213c663dba467b9", "html_url": "https://github.com/rust-lang/rust/commit/deee0f73da885a71ebf9c8d29213c663dba467b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deee0f73da885a71ebf9c8d29213c663dba467b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abb3a107e45b93ca5332ab11bfa6cc8d5a882fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/abb3a107e45b93ca5332ab11bfa6cc8d5a882fb4", "html_url": "https://github.com/rust-lang/rust/commit/abb3a107e45b93ca5332ab11bfa6cc8d5a882fb4"}, {"sha": "1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9", "html_url": "https://github.com/rust-lang/rust/commit/1e67d8a57099eb9d286b5a4adfa798c1b3d437b9"}], "stats": {"total": 99, "additions": 62, "deletions": 37}, "files": [{"sha": "05018d2a94062cbde4e37fd4ca8091463b722ae0", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deee0f73da885a71ebf9c8d29213c663dba467b9/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/deee0f73da885a71ebf9c8d29213c663dba467b9/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=deee0f73da885a71ebf9c8d29213c663dba467b9", "patch": "@@ -123,7 +123,7 @@ DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts \\\n                 test rustc_lint rustc_front\n \n \n-TOOL_DEPS_compiletest := test getopts\n+TOOL_DEPS_compiletest := test getopts log\n TOOL_DEPS_rustdoc := rustdoc\n TOOL_DEPS_rustc := rustc_driver\n TOOL_DEPS_rustbook := std rustdoc"}, {"sha": "10743ef2e257e0f359d5123dde6fc75e609eb2d2", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deee0f73da885a71ebf9c8d29213c663dba467b9/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/deee0f73da885a71ebf9c8d29213c663dba467b9/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=deee0f73da885a71ebf9c8d29213c663dba467b9", "patch": "@@ -493,7 +493,7 @@ endif\n LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3) := \\\n     $$(CURDIR)/$$(HLIB$(1)_H_$(3)):$$(CFG_LLVM_INST_DIR_$(3))/lib\n LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n-    $$(CURDIR)/$$(TLIB1_T_$(2)_H_$(CFG_BUILD))\n+    $$(CURDIR)/$$(TLIB$(1)_T_$(2)_H_$(CFG_BUILD))\n \n HOST_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n   $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))"}, {"sha": "7d452b14dae84ce3fb05fa32fadb9b134a451370", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=deee0f73da885a71ebf9c8d29213c663dba467b9", "patch": "@@ -209,6 +209,8 @@ use syntax::ptr::P;\n \n use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};\n \n+use deriving;\n+\n pub mod ty;\n \n pub struct TraitDef<'a> {\n@@ -381,22 +383,6 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n     visitor.types\n }\n \n-/// Replacement for expr_unreachable which generates intrinsics::unreachable()\n-/// instead of unreachable!()\n-fn expr_unreachable_intrinsic(cx: &ExtCtxt, sp: Span) -> P<Expr> {\n-    let path = cx.std_path(&[\"intrinsics\", \"unreachable\"]);\n-    let call = cx.expr_call_global(\n-        sp, path, vec![]);\n-    let unreachable = cx.expr_block(P(ast::Block {\n-        stmts: vec![],\n-        expr: Some(call),\n-        id: ast::DUMMY_NODE_ID,\n-        rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-        span: sp }));\n-\n-    unreachable\n-}\n-\n impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n@@ -1279,15 +1265,11 @@ impl<'a> MethodDef<'a> {\n \n             let mut first_ident = None;\n             for (&ident, self_arg) in vi_idents.iter().zip(&self_args) {\n-                let path = cx.std_path(&[\"intrinsics\", \"discriminant_value\"]);\n-                let call = cx.expr_call_global(\n-                    sp, path, vec![cx.expr_addr_of(sp, self_arg.clone())]);\n-                let variant_value = cx.expr_block(P(ast::Block {\n-                    stmts: vec![],\n-                    expr: Some(call),\n-                    id: ast::DUMMY_NODE_ID,\n-                    rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n-                    span: sp }));\n+                let self_addr = cx.expr_addr_of(sp, self_arg.clone());\n+                let variant_value = deriving::call_intrinsic(cx,\n+                                                             sp,\n+                                                             \"discriminant_value\",\n+                                                             vec![self_addr]);\n \n                 let target_ty = cx.ty_ident(sp, cx.ident_of(target_type_name));\n                 let variant_disr = cx.expr_cast(sp, variant_value, target_ty);\n@@ -1315,7 +1297,9 @@ impl<'a> MethodDef<'a> {\n             //Since we know that all the arguments will match if we reach the match expression we\n             //add the unreachable intrinsics as the result of the catch all which should help llvm\n             //in optimizing it\n-            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], expr_unreachable_intrinsic(cx, sp)));\n+            match_arms.push(cx.arm(sp,\n+                                   vec![cx.pat_wild(sp)],\n+                                   deriving::call_intrinsic(cx, sp, \"unreachable\", vec![])));\n \n             // Final wrinkle: the self_args are expressions that deref\n             // down to desired l-values, but we cannot actually deref\n@@ -1391,7 +1375,7 @@ impl<'a> MethodDef<'a> {\n             // derive Debug on such a type could here generate code\n             // that needs the feature gate enabled.)\n \n-            expr_unreachable_intrinsic(cx, sp)\n+            deriving::call_intrinsic(cx, sp, \"unreachable\", vec![])\n         }\n         else {\n "}, {"sha": "c37ae116d379be84c496ad42e604f8cba24cb28c", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=deee0f73da885a71ebf9c8d29213c663dba467b9", "patch": "@@ -81,15 +81,13 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n \n     let fields = match *substr.fields {\n         Struct(_, ref fs) => fs,\n-        EnumMatching(index, variant, ref fs) => {\n-            // Determine the discriminant. We will feed this value to the byte\n-            // iteration function.\n-            let discriminant = match variant.node.disr_expr {\n-                Some(ref d) => d.clone(),\n-                None => cx.expr_usize(trait_span, index)\n-            };\n+        EnumMatching(_, _, ref fs) => {\n+            let variant_value = deriving::call_intrinsic(cx,\n+                                                         trait_span,\n+                                                         \"discriminant_value\",\n+                                                         vec![cx.expr_self(trait_span)]);\n \n-            stmts.push(call_hash(trait_span, discriminant));\n+            stmts.push(call_hash(trait_span, variant_value));\n \n             fs\n         }"}, {"sha": "92a141fb4ec863f43db5666b4c251fa030f29b94", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=deee0f73da885a71ebf9c8d29213c663dba467b9", "patch": "@@ -18,6 +18,7 @@ use syntax::ext::build::AstBuilder;\n use syntax::feature_gate;\n use syntax::codemap::Span;\n use syntax::parse::token::{intern, intern_and_get_ident};\n+use syntax::ptr::P;\n \n macro_rules! pathvec {\n     ($($x:ident)::+) => (\n@@ -271,3 +272,19 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n     typaram\n }\n \n+/// Constructs an expression that calls an intrinsic\n+fn call_intrinsic(cx: &ExtCtxt,\n+                  span: Span,\n+                  intrinsic: &str,\n+                  args: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n+    let path = cx.std_path(&[\"intrinsics\", intrinsic]);\n+    let call = cx.expr_call_global(span, path, args);\n+\n+    cx.expr_block(P(ast::Block {\n+        stmts: vec![],\n+        expr: Some(call),\n+        id: ast::DUMMY_NODE_ID,\n+        rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n+        span: span }))\n+}\n+"}, {"sha": "91bfc2f9201b7796cbf713117c3e6618b295ffb3", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deee0f73da885a71ebf9c8d29213c663dba467b9/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=deee0f73da885a71ebf9c8d29213c663dba467b9", "patch": "@@ -12,6 +12,7 @@\n #![feature(hash_default)]\n \n use std::hash::{Hash, SipHasher, Hasher};\n+use std::mem::size_of;\n \n #[derive(Hash)]\n struct Person {\n@@ -24,12 +25,30 @@ struct Person {\n #[derive(Hash)] struct __H__H;\n #[derive(Hash)] enum Collision<__H> { __H { __H__H: __H } }\n \n+#[derive(Hash)]\n+enum E { A=1, B }\n+\n fn hash<T: Hash>(t: &T) -> u64 {\n     let mut s = SipHasher::new_with_keys(0, 0);\n     t.hash(&mut s);\n     s.finish()\n }\n \n+struct FakeHasher<'a>(&'a mut Vec<u8>);\n+impl<'a> Hasher for FakeHasher<'a> {\n+    fn finish(&self) -> u64 {\n+        unimplemented!()\n+    }\n+\n+    fn write(&mut self, bytes: &[u8]) {\n+        self.0.extend(bytes);\n+    }\n+}\n+\n+fn fake_hash(v: &mut Vec<u8>, e: E) {\n+    e.hash(&mut FakeHasher(v));\n+}\n+\n fn main() {\n     let person1 = Person {\n         id: 5,\n@@ -43,4 +62,11 @@ fn main() {\n     };\n     assert_eq!(hash(&person1), hash(&person1));\n     assert!(hash(&person1) != hash(&person2));\n+\n+    // test #21714\n+    let mut va = vec![];\n+    let mut vb = vec![];\n+    fake_hash(&mut va, E::A);\n+    fake_hash(&mut vb, E::B);\n+    assert!(va != vb);\n }"}]}