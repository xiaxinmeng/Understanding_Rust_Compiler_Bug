{"sha": "bdd1b85f951fa93eb7693527fc42de0f259e7598", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDFiODVmOTUxZmE5M2ViNzY5MzUyN2ZjNDJkZTBmMjU5ZTc1OTg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-20T16:40:18Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-27T17:45:39Z"}, "message": "Rename within_fn_param to outermost_fn_param_pat", "tree": {"sha": "fcef09957b4a861d431aaeaece808cfb21053c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcef09957b4a861d431aaeaece808cfb21053c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd1b85f951fa93eb7693527fc42de0f259e7598", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+YXMMACgkQgTGiTgx5\n76+rEw/+P0KtBAujk389k2zZ+oE0uvzmgNzXvmNL1RCriLvVaYEJSc1Ti2PFJnRQ\nPIsCcTiFoYJzlJCZ+9ZDw8IvPWfhfJlMiF+4PZxqM5PjbcTfCUR2GwzqCIUoV2hq\nLE3doQYuoM5QnkWMD8KBfXessEg7iBChvx9mW17FNaISgy/AieydUYiE3gVmmbAe\nDkcOBhzkczYQB+K6IMszgtJz7bweH3vsrmRFxhdrdMyZnC/mYyI9+TmywGQsSzu7\ntmpItPBk6WCqYqKsNx/2bqV+gHCIGMYbNAns12C+AjeHSNH2nRUsJ0/o/+GnHq5l\n+7ZS+0uAmoL0mlhSGDqya4wawA/8DYxLYrr/FyDck/yX4cZhHg2PmCVwylbcv3qo\nbyT3XZr9cNQSjLCtjLiT94BmW2BeoVOu1v1HaAiFrJ6b7IWEMqXE7s+WfmfSa/Oq\n6ANckMB5N+UUnBa2aQKYSI5PvwYMCrmpqkG7cZNa1slv7KvI3SJYrqb88NNr+LyH\nZ2hzFXp5KiJML7YPHQqLT5kcSUWG0fbK7DtQkQxAk4C/dj40h1EGnbWLp0trqpf3\nNBHMpZPZPOZ7HY8IbpHwAb4jlWzkk7zeePOyYqz3/frL8tqr3s/m03lKYOBH957m\nrETjooKkOZl/N3L5wcp+Z1zvR5kzWMgLFzTwkTZuMH2FFemPLd0=\n=5rwE\n-----END PGP SIGNATURE-----", "payload": "tree fcef09957b4a861d431aaeaece808cfb21053c51\nparent ca41681bf0d5175dd39a91e97aca28b007241a29\nauthor Santiago Pastorino <spastorino@gmail.com> 1603212018 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1603820739 -0300\n\nRename within_fn_param to outermost_fn_param_pat\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd1b85f951fa93eb7693527fc42de0f259e7598", "html_url": "https://github.com/rust-lang/rust/commit/bdd1b85f951fa93eb7693527fc42de0f259e7598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd1b85f951fa93eb7693527fc42de0f259e7598/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca41681bf0d5175dd39a91e97aca28b007241a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca41681bf0d5175dd39a91e97aca28b007241a29", "html_url": "https://github.com/rust-lang/rust/commit/ca41681bf0d5175dd39a91e97aca28b007241a29"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f1bbe8b6d6bc34bb45d5323a6faded980ea59565", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bdd1b85f951fa93eb7693527fc42de0f259e7598/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd1b85f951fa93eb7693527fc42de0f259e7598/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=bdd1b85f951fa93eb7693527fc42de0f259e7598", "patch": "@@ -14,16 +14,16 @@ pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     // params are special cases of pats, but we want to handle them as\n     // *distinct* cases. so track when we are hitting a pat *within* an fn\n     // param.\n-    within_fn_param: bool,\n+    outermost_fn_param_pat: bool,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     pub(super) fn new(\n         fcx: &'a FnCtxt<'a, 'tcx>,\n         parent_id: hir::HirId,\n-        within_fn_param: bool,\n+        outermost_fn_param_pat: bool,\n     ) -> Self {\n-        Self { fcx, parent_id, within_fn_param }\n+        Self { fcx, parent_id, outermost_fn_param_pat }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -98,17 +98,17 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        let old_within_fn_param = mem::replace(&mut self.within_fn_param, true);\n+        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, true);\n         intravisit::walk_param(self, param);\n-        self.within_fn_param = old_within_fn_param;\n+        self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }\n \n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n         if let PatKind::Binding(_, _, ident, _) = p.kind {\n             let var_ty = self.assign(p.span, p.hir_id, None);\n \n-            if self.within_fn_param {\n+            if self.outermost_fn_param_pat {\n                 if !self.fcx.tcx.features().unsized_fn_params {\n                     self.fcx.require_type_is_sized(\n                         var_ty,\n@@ -129,9 +129,9 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                 var_ty\n             );\n         }\n-        let old_within_fn_param = mem::replace(&mut self.within_fn_param, false);\n+        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, false);\n         intravisit::walk_pat(self, p);\n-        self.within_fn_param = old_within_fn_param;\n+        self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }\n \n     // Don't descend into the bodies of nested closures."}]}