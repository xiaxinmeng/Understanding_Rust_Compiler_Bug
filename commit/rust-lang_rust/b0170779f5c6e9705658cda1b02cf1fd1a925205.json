{"sha": "b0170779f5c6e9705658cda1b02cf1fd1a925205", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTcwNzc5ZjVjNmU5NzA1NjU4Y2RhMWIwMmNmMWZkMWE5MjUyMDU=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-23T20:39:11Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-23T21:53:16Z"}, "message": "Add comment and extra test", "tree": {"sha": "18c8d16c0ba375ae93e436bb973ae44473785ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c8d16c0ba375ae93e436bb973ae44473785ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0170779f5c6e9705658cda1b02cf1fd1a925205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0170779f5c6e9705658cda1b02cf1fd1a925205", "html_url": "https://github.com/rust-lang/rust/commit/b0170779f5c6e9705658cda1b02cf1fd1a925205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0170779f5c6e9705658cda1b02cf1fd1a925205/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df6eb8ae8358ebab76fcfa35ac7cc41e18a2560", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df6eb8ae8358ebab76fcfa35ac7cc41e18a2560", "html_url": "https://github.com/rust-lang/rust/commit/6df6eb8ae8358ebab76fcfa35ac7cc41e18a2560"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "c384e0dcb2cae418bf238647e14d776166823917", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0170779f5c6e9705658cda1b02cf1fd1a925205/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0170779f5c6e9705658cda1b02cf1fd1a925205/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b0170779f5c6e9705658cda1b02cf1fd1a925205", "patch": "@@ -1240,9 +1240,35 @@ pub fn check_type_bounds<'tcx>(\n     // }\n     //\n     // - `impl_trait_ref` would be `<(A, B) as Foo<u32>>\n-    // - `impl_ty_substs` would be `[A, B, ^0.0]`\n+    // - `impl_ty_substs` would be `[A, B, ^0.0]` (`^0.0` here is the bound var with db 0 and index 0)\n     // - `rebased_substs` would be `[(A, B), u32, ^0.0]`, combining the substs from\n     //    the *trait* with the generic associated type parameters (as bound vars).\n+    //\n+    // A note regarding the use of bound vars here:\n+    // Imagine as an example\n+    // ```\n+    // trait Family {\n+    //     type Member<C: Eq>;\n+    // }\n+    //\n+    // impl Family for VecFamily {\n+    //     type Member<C: Eq> = i32;\n+    // }\n+    // ```\n+    // Here, we would generate\n+    // ```notrust\n+    // forall<C> { Normalize(<VecFamily as Family>::Member<C> => i32) }\n+    // ```\n+    // when we really would like to generate\n+    // ```notrust\n+    // forall<C> { Normalize(<VecFamily as Family>::Member<C> => i32) :- Implemented(C: Eq) }\n+    // ```\n+    // But, this is probably fine, because although the first clause can be used with types C that\n+    // do not implement Eq, for it to cause some kind of problem, there would have to be a\n+    // VecFamily::Member<X> for some type X where !(X: Eq), that appears in the value of type\n+    // Member<C: Eq> = .... That type would fail a well-formedness check that we ought to be doing\n+    // elsewhere, which would check that any <T as Family>::Member<X> meets the bounds declared in\n+    // the trait (notably, that X: Eq and T: Family).\n     let defs: &ty::Generics = tcx.generics_of(impl_ty.def_id);\n     let mut substs = smallvec::SmallVec::with_capacity(defs.count());\n     if let Some(def_id) = defs.parent {"}, {"sha": "d35bb098abdf008325209ea597275c370b64c067", "filename": "src/test/ui/generic-associated-types/issue-87429-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b0170779f5c6e9705658cda1b02cf1fd1a925205/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0170779f5c6e9705658cda1b02cf1fd1a925205/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-2.rs?ref=b0170779f5c6e9705658cda1b02cf1fd1a925205", "patch": "@@ -0,0 +1,20 @@\n+// Derived from `issue-87429`. A test that ensures that using bound vars in the\n+// predicates in the param env when checking that an associated type satisfies\n+// its bounds does not cause us to not be able to use the bounds on the parameters.\n+\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Family {\n+    type Member<'a, C: Eq>: for<'b> MyBound<'b, C>;\n+}\n+\n+trait MyBound<'a, C> { }\n+impl<'a, C: Eq> MyBound<'a, C> for i32 { }\n+\n+impl Family for () {\n+    type Member<'a, C: Eq> = i32;\n+}\n+\n+fn main() {}"}, {"sha": "01cb0bfc72cd152c9101d12a5f114ae4dcb7966d", "filename": "src/test/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0170779f5c6e9705658cda1b02cf1fd1a925205/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0170779f5c6e9705658cda1b02cf1fd1a925205/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=b0170779f5c6e9705658cda1b02cf1fd1a925205", "patch": "@@ -2,12 +2,14 @@ error[E0277]: can't compare `Foo` with `Foo`\n   --> $DIR/issue-87429-associated-type-default.rs:14:5\n    |\n LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n-   |     ^^^^^^^^^^^^^^^^^-----------------------------------^^^^^^^\n-   |     |                |\n-   |     |                required by this bound in `Family2::Member`\n-   |     no implementation for `Foo == Foo`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Foo == Foo`\n    |\n    = help: the trait `PartialEq` is not implemented for `Foo`\n+note: required by a bound in `Family2::Member`\n+  --> $DIR/issue-87429-associated-type-default.rs:14:22\n+   |\n+LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`\n \n error: aborting due to previous error\n "}, {"sha": "87bd35f58788f50fcf6a2fe20c15a067a4727295", "filename": "src/test/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0170779f5c6e9705658cda1b02cf1fd1a925205/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0170779f5c6e9705658cda1b02cf1fd1a925205/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=b0170779f5c6e9705658cda1b02cf1fd1a925205", "patch": "@@ -11,13 +11,15 @@ LL | #![feature(specialization)]\n error[E0277]: can't compare `Foo` with `Foo`\n   --> $DIR/issue-87429-specialization.rs:21:5\n    |\n-LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n-   |                      ----------------------------------- required by this bound in `Family::Member`\n-...\n LL |     default type Member<'a> = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Foo == Foo`\n    |\n    = help: the trait `PartialEq` is not implemented for `Foo`\n+note: required by a bound in `Family::Member`\n+  --> $DIR/issue-87429-specialization.rs:8:22\n+   |\n+LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`\n \n error: aborting due to previous error; 1 warning emitted\n "}]}