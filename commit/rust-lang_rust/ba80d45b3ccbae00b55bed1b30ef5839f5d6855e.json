{"sha": "ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "node_id": "C_kwDOAAsO6NoAKGJhODBkNDViM2NjYmFlMDBiNTViZWQxYjMwZWY1ODM5ZjVkNjg1NWU", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-01-30T03:58:49Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-01-30T03:58:49Z"}, "message": "update testsuite", "tree": {"sha": "c2fad469516fb60c87fedc29adbaf1acd19576a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fad469516fb60c87fedc29adbaf1acd19576a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "html_url": "https://github.com/rust-lang/rust/commit/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccd26462032427741f753424702e78e1050e96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccd26462032427741f753424702e78e1050e96b", "html_url": "https://github.com/rust-lang/rust/commit/8ccd26462032427741f753424702e78e1050e96b"}], "stats": {"total": 149, "additions": 145, "deletions": 4}, "files": [{"sha": "94b554ad6cb499c08bda865b8e14531e505f1710", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n-#![deny(clippy::get_unwrap)]\n+#![deny(clippy::get_unwrap, clippy::unwrap_used)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "9da892bb1aa7dd9a5f69fd364dae1e04ed19011f", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n-#![deny(clippy::get_unwrap)]\n+#![deny(clippy::get_unwrap, clippy::unwrap_used)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "5b02e54b17c6b887122c913b4367d28bd72ffc18", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 143, "deletions": 2, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba80d45b3ccbae00b55bed1b30ef5839f5d6855e/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=ba80d45b3ccbae00b55bed1b30ef5839f5d6855e", "patch": "@@ -7,80 +7,221 @@ LL |         let _ = boxed_slice.get(1).unwrap();\n note: the lint level is defined here\n   --> $DIR/get_unwrap.rs:3:9\n    |\n-LL | #![deny(clippy::get_unwrap)]\n+LL | #![deny(clippy::get_unwrap, clippy::unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:34:17\n+   |\n+LL |         let _ = boxed_slice.get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/get_unwrap.rs:3:29\n+   |\n+LL | #![deny(clippy::get_unwrap, clippy::unwrap_used)]\n+   |                             ^^^^^^^^^^^^^^^^^^^\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:35:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:35:17\n+   |\n+LL |         let _ = some_slice.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:36:17\n+   |\n+LL |         let _ = some_vec.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:37:17\n+   |\n+LL |         let _ = some_vecdeque.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:38:17\n+   |\n+LL |         let _ = some_hashmap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:39:17\n+   |\n+LL |         let _ = some_btreemap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:40:17\n+   |\n+LL |         let _ = false_positive.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:42:21\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:42:22\n+   |\n+LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:47:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:47:10\n+   |\n+LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:48:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:48:10\n+   |\n+LL |         *some_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:49:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:49:10\n+   |\n+LL |         *some_vec.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:50:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:50:10\n+   |\n+LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:52:10\n+   |\n+LL |         *some_hashmap.get_mut(&1).unwrap() = 'b';\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:53:10\n+   |\n+LL |         *some_btreemap.get_mut(&1).unwrap() = 'b';\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:54:10\n+   |\n+LL |         *false_positive.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:59:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:59:17\n+   |\n+LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:60:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: aborting due to 13 previous errors\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/get_unwrap.rs:60:17\n+   |\n+LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: aborting due to 30 previous errors\n "}]}