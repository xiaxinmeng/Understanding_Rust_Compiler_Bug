{"sha": "45bb4097b4bb2670f93d0836d40d31bbde38aab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YmI0MDk3YjRiYjI2NzBmOTNkMDgzNmQ0MGQzMWJiZGUzOGFhYjI=", "commit": {"author": {"name": "Edward Barnard", "email": "eabarnard@gmail.com", "date": "2019-06-03T21:11:57Z"}, "committer": {"name": "Edward Barnard", "email": "eabarnard@gmail.com", "date": "2019-06-03T21:11:57Z"}, "message": "Only show methods that appear in the impl block for types in the Implementors and Implementations on Foreign Types sections of trait documentation pages.", "tree": {"sha": "f32a0fec628f76e336b022cecc17c7fdd6221117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f32a0fec628f76e336b022cecc17c7fdd6221117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45bb4097b4bb2670f93d0836d40d31bbde38aab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45bb4097b4bb2670f93d0836d40d31bbde38aab2", "html_url": "https://github.com/rust-lang/rust/commit/45bb4097b4bb2670f93d0836d40d31bbde38aab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45bb4097b4bb2670f93d0836d40d31bbde38aab2/comments", "author": {"login": "ebarnard", "id": 1059683, "node_id": "MDQ6VXNlcjEwNTk2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1059683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebarnard", "html_url": "https://github.com/ebarnard", "followers_url": "https://api.github.com/users/ebarnard/followers", "following_url": "https://api.github.com/users/ebarnard/following{/other_user}", "gists_url": "https://api.github.com/users/ebarnard/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebarnard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebarnard/subscriptions", "organizations_url": "https://api.github.com/users/ebarnard/orgs", "repos_url": "https://api.github.com/users/ebarnard/repos", "events_url": "https://api.github.com/users/ebarnard/events{/privacy}", "received_events_url": "https://api.github.com/users/ebarnard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebarnard", "id": 1059683, "node_id": "MDQ6VXNlcjEwNTk2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1059683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebarnard", "html_url": "https://github.com/ebarnard", "followers_url": "https://api.github.com/users/ebarnard/followers", "following_url": "https://api.github.com/users/ebarnard/following{/other_user}", "gists_url": "https://api.github.com/users/ebarnard/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebarnard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebarnard/subscriptions", "organizations_url": "https://api.github.com/users/ebarnard/orgs", "repos_url": "https://api.github.com/users/ebarnard/repos", "events_url": "https://api.github.com/users/ebarnard/events{/privacy}", "received_events_url": "https://api.github.com/users/ebarnard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7096ff0ce16b0544b717986ec335798b3151dd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7096ff0ce16b0544b717986ec335798b3151dd8e", "html_url": "https://github.com/rust-lang/rust/commit/7096ff0ce16b0544b717986ec335798b3151dd8e"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "88ac5aa58d64edec1ea92f2cbf80a43e7813a614", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45bb4097b4bb2670f93d0836d40d31bbde38aab2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bb4097b4bb2670f93d0836d40d31bbde38aab2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=45bb4097b4bb2670f93d0836d40d31bbde38aab2", "patch": "@@ -3066,7 +3066,7 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter<'\n         _ => false,\n     };\n     render_impl(w, cx, implementor, AssocItemLink::Anchor(None), RenderMode::Normal,\n-                implementor.impl_item.stable_since(), false, Some(use_absolute), false)?;\n+                implementor.impl_item.stable_since(), false, Some(use_absolute), false, false)?;\n     Ok(())\n }\n \n@@ -3077,7 +3077,7 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter<'_>,\n         let did = i.trait_did().unwrap();\n         let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);\n         render_impl(w, cx, i, assoc_link,\n-                    RenderMode::Normal, containing_item.stable_since(), true, None, false)?;\n+                    RenderMode::Normal, containing_item.stable_since(), true, None, false, true)?;\n     }\n     Ok(())\n }\n@@ -3307,7 +3307,7 @@ fn item_trait(\n                 );\n                 render_impl(w, cx, &implementor, assoc_link,\n                             RenderMode::Normal, implementor.impl_item.stable_since(), false,\n-                            None, true)?;\n+                            None, true, false)?;\n             }\n             write_loading_content(w, \"\")?;\n         }\n@@ -3979,7 +3979,7 @@ fn render_assoc_items(w: &mut fmt::Formatter<'_>,\n         };\n         for i in &non_trait {\n             render_impl(w, cx, i, AssocItemLink::Anchor(None), render_mode,\n-                        containing_item.stable_since(), true, None, false)?;\n+                        containing_item.stable_since(), true, None, false, true)?;\n         }\n     }\n     if let AssocItemRender::DerefFor { .. } = what {\n@@ -4161,7 +4161,8 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n \n fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocItemLink<'_>,\n                render_mode: RenderMode, outer_version: Option<&str>, show_def_docs: bool,\n-               use_absolute: Option<bool>, is_on_foreign_type: bool) -> fmt::Result {\n+               use_absolute: Option<bool>, is_on_foreign_type: bool,\n+               show_default_items: bool) -> fmt::Result {\n     if render_mode == RenderMode::Normal {\n         let id = cx.derive_id(match i.inner_impl().trait_ {\n             Some(ref t) => if is_on_foreign_type {\n@@ -4345,9 +4346,13 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n \n     // If we've implemented a trait, then also emit documentation for all\n     // default items which weren't overridden in the implementation block.\n-    if let Some(t) = trait_ {\n-        render_default_items(w, cx, t, &i.inner_impl(),\n-                             render_mode, outer_version, show_def_docs)?;\n+    // We don't emit documentation for default items if they appear in the\n+    // Implementations on Foreign Types or Implementors sections.\n+    if show_default_items {\n+        if let Some(t) = trait_ {\n+            render_default_items(w, cx, t, &i.inner_impl(),\n+                                render_mode, outer_version, show_def_docs)?;\n+        }\n     }\n     write!(w, \"</div>\")?;\n "}]}