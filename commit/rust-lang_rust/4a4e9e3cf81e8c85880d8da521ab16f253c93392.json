{"sha": "4a4e9e3cf81e8c85880d8da521ab16f253c93392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNGU5ZTNjZjgxZThjODU4ODBkOGRhNTIxYWIxNmYyNTNjOTMzOTI=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-05T17:14:55Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-05T17:14:55Z"}, "message": "Store field remapping information together with the LLVM type in a new TypeLowering struct instead of an extra cache.", "tree": {"sha": "ce888e5dd195bdda95b2f6df972c47fb837e3150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce888e5dd195bdda95b2f6df972c47fb837e3150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4e9e3cf81e8c85880d8da521ab16f253c93392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4e9e3cf81e8c85880d8da521ab16f253c93392", "html_url": "https://github.com/rust-lang/rust/commit/4a4e9e3cf81e8c85880d8da521ab16f253c93392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4e9e3cf81e8c85880d8da521ab16f253c93392/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbc568325c929eeefc261532b034f904cf4d5b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbc568325c929eeefc261532b034f904cf4d5b4", "html_url": "https://github.com/rust-lang/rust/commit/7dbc568325c929eeefc261532b034f904cf4d5b4"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "d28a579ff1059a130bb53b932d3848b445664837", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a4e9e3cf81e8c85880d8da521ab16f253c93392/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4e9e3cf81e8c85880d8da521ab16f253c93392/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=4a4e9e3cf81e8c85880d8da521ab16f253c93392", "patch": "@@ -74,15 +74,15 @@ pub struct CodegenCx<'ll, 'tcx> {\n     /// See <https://llvm.org/docs/LangRef.html#the-llvm-used-global-variable> for details\n     pub used_statics: RefCell<Vec<&'ll Value>>,\n \n-    pub lltypes: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), &'ll Type>>,\n+    /// Mapping of non-scalar types to llvm types and field remapping if needed.\n+    pub type_lowering: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), TypeLowering<'ll>>>,\n+\n+    /// Mapping of scalar types to llvm types.\n     pub scalar_lltypes: RefCell<FxHashMap<Ty<'tcx>, &'ll Type>>,\n+\n     pub pointee_infos: RefCell<FxHashMap<(Ty<'tcx>, Size), Option<PointeeInfo>>>,\n     pub isize_ty: &'ll Type,\n \n-    /// Cache for the mapping from source index to llvm index for struct fields,\n-    /// only present if synthetic fields are inserted for padding.\n-    pub field_projection_cache: RefCell<FxHashMap<TyAndLayout<'tcx>, Vec<u32>>>,\n-\n     pub coverage_cx: Option<coverageinfo::CrateCoverageContext<'ll, 'tcx>>,\n     pub dbg_cx: Option<debuginfo::CrateDebugContext<'ll, 'tcx>>,\n \n@@ -96,6 +96,15 @@ pub struct CodegenCx<'ll, 'tcx> {\n     local_gen_sym_counter: Cell<usize>,\n }\n \n+pub struct TypeLowering<'ll> {\n+    /// Associated LLVM type\n+    pub lltype: &'ll Type,\n+\n+    /// If padding is used the slice maps fields from source order\n+    /// to llvm order.\n+    pub field_remapping: Option<Box<[u32]>>,\n+}\n+\n fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n     match tls_model {\n         TlsModel::GeneralDynamic => llvm::ThreadLocalMode::GeneralDynamic,\n@@ -308,11 +317,10 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             const_globals: Default::default(),\n             statics_to_rauw: RefCell::new(Vec::new()),\n             used_statics: RefCell::new(Vec::new()),\n-            lltypes: Default::default(),\n+            type_lowering: Default::default(),\n             scalar_lltypes: Default::default(),\n             pointee_infos: Default::default(),\n             isize_ty,\n-            field_projection_cache: Default::default(),\n             coverage_cx,\n             dbg_cx,\n             eh_personality: Cell::new(None),"}, {"sha": "24669bec9653186483aea3be397c9be72596d649", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4a4e9e3cf81e8c85880d8da521ab16f253c93392/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4e9e3cf81e8c85880d8da521ab16f253c93392/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=4a4e9e3cf81e8c85880d8da521ab16f253c93392", "patch": "@@ -1,5 +1,6 @@\n use crate::abi::FnAbi;\n use crate::common::*;\n+use crate::context::TypeLowering;\n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n@@ -17,6 +18,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     layout: TyAndLayout<'tcx>,\n     defer: &mut Option<(&'a Type, TyAndLayout<'tcx>)>,\n+    field_remapping: &mut Option<Box<[u32]>>,\n ) -> &'a Type {\n     match layout.abi {\n         Abi::Scalar(_) => bug!(\"handled elsewhere\"),\n@@ -75,7 +77,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n         FieldsShape::Array { count, .. } => cx.type_array(layout.field(cx, 0).llvm_type(cx), count),\n         FieldsShape::Arbitrary { .. } => match name {\n             None => {\n-                let (llfields, packed) = struct_llfields(cx, layout);\n+                let (llfields, packed, new_field_remapping) = struct_llfields(cx, layout);\n+                *field_remapping = new_field_remapping;\n                 cx.type_struct(&llfields, packed)\n             }\n             Some(ref name) => {\n@@ -90,7 +93,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n fn struct_llfields<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     layout: TyAndLayout<'tcx>,\n-) -> (Vec<&'a Type>, bool) {\n+) -> (Vec<&'a Type>, bool, Option<Box<[u32]>>) {\n     debug!(\"struct_llfields: {:#?}\", layout);\n     let field_count = layout.fields.count();\n \n@@ -147,11 +150,8 @@ fn struct_llfields<'a, 'tcx>(\n     } else {\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n-    if padding_used {\n-        cx.field_projection_cache.borrow_mut().insert(layout, projection);\n-    }\n \n-    (result, packed)\n+    (result, packed, padding_used.then_some(projection.into_boxed_slice()))\n }\n \n impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n@@ -243,8 +243,8 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n             Variants::Single { index } => Some(index),\n             _ => None,\n         };\n-        if let Some(&llty) = cx.lltypes.borrow().get(&(self.ty, variant_index)) {\n-            return llty;\n+        if let Some(ref llty) = cx.type_lowering.borrow().get(&(self.ty, variant_index)) {\n+            return llty.lltype;\n         }\n \n         debug!(\"llvm_type({:#?})\", self);\n@@ -256,24 +256,29 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n         let normal_ty = cx.tcx.erase_regions(self.ty);\n \n         let mut defer = None;\n+        let mut field_remapping = None;\n         let llty = if self.ty != normal_ty {\n             let mut layout = cx.layout_of(normal_ty);\n             if let Some(v) = variant_index {\n                 layout = layout.for_variant(cx, v);\n             }\n             layout.llvm_type(cx)\n         } else {\n-            uncached_llvm_type(cx, *self, &mut defer)\n+            uncached_llvm_type(cx, *self, &mut defer, &mut field_remapping)\n         };\n         debug!(\"--> mapped {:#?} to llty={:?}\", self, llty);\n \n-        cx.lltypes.borrow_mut().insert((self.ty, variant_index), llty);\n+        cx.type_lowering\n+            .borrow_mut()\n+            .insert((self.ty, variant_index), TypeLowering { lltype: llty, field_remapping: None });\n \n         if let Some((llty, layout)) = defer {\n-            let (llfields, packed) = struct_llfields(cx, layout);\n-            cx.set_struct_body(llty, &llfields, packed)\n+            let (llfields, packed, new_field_remapping) = struct_llfields(cx, layout);\n+            cx.set_struct_body(llty, &llfields, packed);\n+            field_remapping = new_field_remapping;\n         }\n-\n+        cx.type_lowering.borrow_mut().get_mut(&(self.ty, variant_index)).unwrap().field_remapping =\n+            field_remapping;\n         llty\n     }\n \n@@ -363,12 +368,23 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n \n             FieldsShape::Array { .. } => index as u64,\n \n-            // Look up llvm field index in projection cache if present. If no projection cache\n-            // is present no padding is used and the llvm field index matches the memory index.\n-            FieldsShape::Arbitrary { .. } => match cx.field_projection_cache.borrow().get(self) {\n-                Some(projection) => projection[index] as u64,\n-                None => self.fields.memory_index(index) as u64,\n-            },\n+            FieldsShape::Arbitrary { .. } => {\n+                let variant_index = match self.variants {\n+                    Variants::Single { index } => Some(index),\n+                    _ => None,\n+                };\n+\n+                // Look up llvm field if indexes do not match memory order due to padding. If\n+                // `field_remapping` is `None` no padding was used and the llvm field index\n+                // matches the memory index.\n+                match cx.type_lowering.borrow().get(&(self.ty, variant_index)) {\n+                    Some(TypeLowering { field_remapping: Some(ref prj), .. }) => prj[index] as u64,\n+                    Some(_) => self.fields.memory_index(index) as u64,\n+                    None => {\n+                        bug!(\"TyAndLayout::llvm_field_index({:?}): type info not found\", self)\n+                    }\n+                }\n+            }\n         }\n     }\n "}]}