{"sha": "319f12a4c4d290b12a6d7396e8592391d4fcb1a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOWYxMmE0YzRkMjkwYjEyYTZkNzM5NmU4NTkyMzkxZDRmY2IxYTk=", "commit": {"author": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-08-15T16:41:59Z"}, "committer": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-24T19:40:16Z"}, "message": "implement lint for mutable range bound", "tree": {"sha": "6ae3f68c56fb0d09f8687d0fbc4b059eb4d0af1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ae3f68c56fb0d09f8687d0fbc4b059eb4d0af1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/319f12a4c4d290b12a6d7396e8592391d4fcb1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/319f12a4c4d290b12a6d7396e8592391d4fcb1a9", "html_url": "https://github.com/rust-lang/rust/commit/319f12a4c4d290b12a6d7396e8592391d4fcb1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/319f12a4c4d290b12a6d7396e8592391d4fcb1a9/comments", "author": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b091fb9b2464907a34279ab99aeffd0552827192", "url": "https://api.github.com/repos/rust-lang/rust/commits/b091fb9b2464907a34279ab99aeffd0552827192", "html_url": "https://github.com/rust-lang/rust/commit/b091fb9b2464907a34279ab99aeffd0552827192"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "31b8b04ecf6f9414eb5a8b29a9298471cc3c4419", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/319f12a4c4d290b12a6d7396e8592391d4fcb1a9/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319f12a4c4d290b12a6d7396e8592391d4fcb1a9/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=319f12a4c4d290b12a6d7396e8592391d4fcb1a9", "patch": "@@ -614,6 +614,7 @@ fn check_for_loop<'a, 'tcx>(\n     check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n+    check_for_mut_range_bound(cx, arg, expr);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n }\n \n@@ -1303,6 +1304,44 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n     }\n }\n \n+fn check_for_mut_range_bound(cx: &LateContext, arg: &Expr, expr: &Expr) {\n+    if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(arg) {\n+        let bounds = vec![start, end];\n+        for bound in &bounds {\n+            if check_for_mutability(cx, bound) {\n+                span_lint(cx, MUT_RANGE_BOUND, expr.span, \"you are looping over a range where at least one bound was defined as a mutable variable. keep in mind that mutating this variable inside the loop will not affect the range\");   \n+                return;\n+            }\n+        }\n+    }\n+}\n+\n+fn check_for_mutability(cx: &LateContext, bound: &Expr) -> bool {\n+    if_let_chain! {[\n+        let ExprPath(ref qpath) = bound.node,\n+        let QPath::Resolved(None, ref path) = *qpath,\n+        path.segments.len() == 1,\n+    ], {\n+        let def = cx.tables.qpath_def(qpath, bound.id);\n+        match def {\n+            Def::Local(..) | Def::Upvar(..) => {\n+                let def_id = def.def_id();\n+                let node_id = cx.tcx.hir.as_local_node_id(def_id).expect(\"local/upvar are local nodes\");\n+                let node_str = cx.tcx.hir.get(node_id);\n+                if_let_chain! {[\n+                    let map::Node::NodeLocal(pat) = node_str,\n+                    let PatKind::Binding(bind_ann, _, _, _) = pat.node,\n+                    let BindingAnnotation::Mutable = bind_ann,\n+                ], {\n+                    return true;\n+                }} \n+            },\n+            _ => (),\n+        }}\n+    }\n+    return false;\n+}\n+\n /// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`.\n fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     match *pat {"}, {"sha": "af5cb8f8035a5f1e2b30be52e83136d733cb5426", "filename": "tests/run-pass/mut_range_bound_tmp.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/319f12a4c4d290b12a6d7396e8592391d4fcb1a9/tests%2Frun-pass%2Fmut_range_bound_tmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/319f12a4c4d290b12a6d7396e8592391d4fcb1a9/tests%2Frun-pass%2Fmut_range_bound_tmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmut_range_bound_tmp.rs?ref=319f12a4c4d290b12a6d7396e8592391d4fcb1a9", "patch": "@@ -0,0 +1,30 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+fn main() {\n+    mut_range_bound_upper();\n+    mut_range_bound_lower();\n+    mut_range_bound_both();\n+    immut_range_bound();\n+}\n+\n+fn mut_range_bound_upper() {\n+    let mut m = 4;\n+    for i in 0..m { continue; } // WARNING the range upper bound is mutable\n+}\n+\n+fn mut_range_bound_lower() {\n+    let mut m = 4;\n+    for i in m..10 { continue; } // WARNING the range lower bound is mutable\n+}\n+\n+fn mut_range_bound_both() {\n+    let mut m = 4;\n+    let mut n = 6;\n+    for i in m..n { continue; } // WARNING both bounds are mutable (should get just one warning for this)\n+}\n+\n+fn immut_range_bound() {\n+    let m = 4;\n+    for i in 0..m { continue; } // no warning\n+}"}]}