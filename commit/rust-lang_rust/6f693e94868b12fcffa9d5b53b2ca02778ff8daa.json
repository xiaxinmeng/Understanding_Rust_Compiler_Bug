{"sha": "6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNjkzZTk0ODY4YjEyZmNmZmE5ZDViNTNiMmNhMDI3NzhmZjhkYWE=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-19T06:36:19Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-03-19T06:36:19Z"}, "message": "Stabilize Entry types\n\nThis commit marks as `#[stable]` the `Entry` types for the maps provided\nby `std`. The main reason these had been left unstable previously was\nuncertainty about an eventual trait design, but several plausible\ndesigns have been proposed that all work fine with the current type definitions.", "tree": {"sha": "51adf0ab2fdcf265406dc136f00006e883880767", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51adf0ab2fdcf265406dc136f00006e883880767"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "html_url": "https://github.com/rust-lang/rust/commit/6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0084f92302b3352372bfd14ebbf083bae695d16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0084f92302b3352372bfd14ebbf083bae695d16e", "html_url": "https://github.com/rust-lang/rust/commit/0084f92302b3352372bfd14ebbf083bae695d16e"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "75c0ec486cfa98114330c3cd3d62445b89b1889a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "patch": "@@ -124,26 +124,26 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K:'a, V:'a> {\n     /// A vacant Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(VacantEntry<'a, K, V>),\n+\n     /// An occupied Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(OccupiedEntry<'a, K, V>),\n }\n \n /// A vacant Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K:'a, V:'a> {\n     key: K,\n     stack: stack::SearchStack<'a, K, V, node::handle::Edge, node::handle::Leaf>,\n }\n \n /// An occupied Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K:'a, V:'a> {\n     stack: stack::SearchStack<'a, K, V, node::handle::KV, node::handle::LeafOrInternal>,\n }\n@@ -1124,9 +1124,9 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> Entry<'a, K, V> {\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"will soon be replaced by or_insert\")]\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),"}, {"sha": "056be4acaeb80413079a48a0556add59196913c6", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "patch": "@@ -67,26 +67,28 @@ pub struct VecMap<V> {\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, V:'a> {\n     /// A vacant Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(VacantEntry<'a, V>),\n+\n     /// An occupied Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(OccupiedEntry<'a, V>),\n }\n \n /// A vacant Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, V:'a> {\n     map: &'a mut VecMap<V>,\n     index: usize,\n }\n \n /// An occupied Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, V:'a> {\n     map: &'a mut VecMap<V>,\n     index: usize,\n@@ -651,7 +653,7 @@ impl<V> VecMap<V> {\n \n impl<'a, V> Entry<'a, V> {\n     #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+               reason = \"will soon be replaced by or_insert\")]\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, V>> {\n         match self {"}, {"sha": "43e60d4dc4f1cf121f9d2eea3d8004b973d03832", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f693e94868b12fcffa9d5b53b2ca02778ff8daa/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=6f693e94868b12fcffa9d5b53b2ca02778ff8daa", "patch": "@@ -1335,28 +1335,28 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n }\n \n /// A view into a single occupied location in a HashMap.\n-#[unstable(feature = \"std_misc\",\n-           reason = \"precise API still being fleshed out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n /// A view into a single empty location in a HashMap.\n-#[unstable(feature = \"std_misc\",\n-           reason = \"precise API still being fleshed out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     hash: SafeHash,\n     key: K,\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n }\n \n /// A view into a single location in a map, which may be vacant or occupied.\n-#[unstable(feature = \"std_misc\",\n-           reason = \"precise API still being fleshed out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied Entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(OccupiedEntry<'a, K, V>),\n+\n     /// A vacant Entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(VacantEntry<'a, K, V>),\n }\n \n@@ -1477,10 +1477,10 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n impl<'a, K, V> Entry<'a, K, V> {\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"will soon be replaced by or_insert\")]\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),"}]}