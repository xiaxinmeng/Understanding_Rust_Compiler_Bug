{"sha": "4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlY2YxMmJmMGViODM4NjYyNmNjZGI1ZjcyMWE3MTgzY2NjNGViYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T15:26:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T15:26:26Z"}, "message": "Auto merge of #51063 - mixi:musl-bootstrap, r=alexcrichton\n\nFix building rustc on and for musl hosts.\n\nThis fixes all problems I had when trying to compile rustc on a musl-based distribution (with `crt-static = false` in `config.toml`).\n\nThis is a fixed version of what ended up being #50105, making it possible to compile rustc on musl targets.\n\nThe differences to the old (now merged and subsequently reverted) pull request are:\n - The commit (6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935) that caused the regression for which the original commits were reverted in #50709 is left out. This means the corresponding bug #36710 is still not fixed with `+crt-static`.\n - The test for issue 36710 is skipped for musl targets (until the issue is properly fixed).\n - Building cargo-vendor if `crt-static = false` is needed was broken (cargo-vendor links to some shared libraries if they exist on the system and this produces broken binaries with `+crt-static`)\n\nCC @alexcrichton", "tree": {"sha": "495e7a8fbd326152b746ea6bc43bd0960a0f3875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495e7a8fbd326152b746ea6bc43bd0960a0f3875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "html_url": "https://github.com/rust-lang/rust/commit/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d830f46b77bbb97fbff6397f0d9c352a880f796d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d830f46b77bbb97fbff6397f0d9c352a880f796d", "html_url": "https://github.com/rust-lang/rust/commit/d830f46b77bbb97fbff6397f0d9c352a880f796d"}, {"sha": "a8be9bdd7bd58733a175a5fd33359424097fae4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8be9bdd7bd58733a175a5fd33359424097fae4f", "html_url": "https://github.com/rust-lang/rust/commit/a8be9bdd7bd58733a175a5fd33359424097fae4f"}], "stats": {"total": 188, "additions": 165, "deletions": 23}, "files": [{"sha": "4607ca5cf9f48e72b32672d424f97c48399c2e6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -268,6 +268,15 @@ fn main() {\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n+\n+        if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n+            if s == \"true\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n+            }\n+            if s == \"false\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n+            }\n+        }\n     }\n \n     if env::var_os(\"RUSTC_PARALLEL_QUERIES\").is_some() {"}, {"sha": "28f5192f2cdf455d9e6730f64ce324ab679a8af5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -489,7 +489,7 @@ def bin_root(self):\n         \"\"\"\n         return os.path.join(self.build_dir, self.build, \"stage0\")\n \n-    def get_toml(self, key):\n+    def get_toml(self, key, section=None):\n         \"\"\"Returns the value of the given key in config.toml, otherwise returns None\n \n         >>> rb = RustBuild()\n@@ -501,12 +501,29 @@ def get_toml(self, key):\n \n         >>> rb.get_toml(\"key3\") is None\n         True\n+\n+        Optionally also matches the section the key appears in\n+\n+        >>> rb.config_toml = '[a]\\\\nkey = \"value1\"\\\\n[b]\\\\nkey = \"value2\"'\n+        >>> rb.get_toml('key', 'a')\n+        'value1'\n+        >>> rb.get_toml('key', 'b')\n+        'value2'\n+        >>> rb.get_toml('key', 'c') is None\n+        True\n         \"\"\"\n+\n+        cur_section = None\n         for line in self.config_toml.splitlines():\n+            section_match = re.match(r'^\\s*\\[(.*)\\]\\s*$', line)\n+            if section_match is not None:\n+                cur_section = section_match.group(1)\n+\n             match = re.match(r'^{}\\s*=(.*)$'.format(key), line)\n             if match is not None:\n                 value = match.group(1)\n-                return self.get_string(value) or value.strip()\n+                if section is None or section == cur_section:\n+                    return self.get_string(value) or value.strip()\n         return None\n \n     def cargo(self):\n@@ -589,7 +606,17 @@ def build_bootstrap(self):\n         env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n-        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2\"\n+        env[\"RUSTFLAGS\"] = \"-Cdebuginfo=2 \"\n+\n+        build_section = \"target.{}\".format(self.build_triple())\n+        target_features = []\n+        if self.get_toml(\"crt-static\", build_section) == \"true\":\n+            target_features += [\"+crt-static\"]\n+        elif self.get_toml(\"crt-static\", build_section) == \"false\":\n+            target_features += [\"-crt-static\"]\n+        if target_features:\n+            env[\"RUSTFLAGS\"] += \"-C target-feature=\" + (\",\".join(target_features)) + \" \"\n+\n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):"}, {"sha": "c9c9c73c84af2f2097689d845df7c709cb3e2a14", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -698,9 +698,14 @@ impl<'a> Builder<'a> {\n         let out_dir = self.stage_out(compiler, mode);\n         cargo\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n-            .arg(cmd)\n-            .arg(\"--target\")\n-            .arg(target);\n+            .arg(cmd);\n+\n+        if cmd != \"install\" {\n+            cargo.arg(\"--target\")\n+                 .arg(target);\n+        } else {\n+            assert_eq!(target, compiler.host);\n+        }\n \n         // Set a flag for `check` so that certain build scripts can do less work\n         // (e.g. not building/requiring LLVM).\n@@ -842,6 +847,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_CRT_STATIC\", x.to_string());\n         }\n \n+        if let Some(x) = self.crt_static(compiler.host) {\n+            cargo.env(\"RUSTC_HOST_CRT_STATIC\", x.to_string());\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);\n@@ -1018,8 +1027,8 @@ impl<'a> Builder<'a> {\n         }\n \n         if self.config.rust_optimize {\n-            // FIXME: cargo bench does not accept `--release`\n-            if cmd != \"bench\" {\n+            // FIXME: cargo bench/install do not accept `--release`\n+            if cmd != \"bench\" && cmd != \"install\" {\n                 cargo.arg(\"--release\");\n             }\n         }"}, {"sha": "82ba03ec7773caf67479238588a3903baf1f9d01", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -951,13 +951,16 @@ impl Step for PlainSourceTarball {\n                 has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n             }\n             if !has_cargo_vendor {\n-                let mut cmd = Command::new(&builder.initial_cargo);\n-                cmd.arg(\"install\")\n-                   .arg(\"--force\")\n+                let mut cmd = builder.cargo(\n+                    builder.compiler(0, builder.config.build),\n+                    Mode::Tool,\n+                    builder.config.build,\n+                    \"install\"\n+                );\n+                cmd.arg(\"--force\")\n                    .arg(\"--debug\")\n                    .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-                   .arg(\"cargo-vendor\")\n-                   .env(\"RUSTC\", &builder.initial_rustc);\n+                   .arg(\"cargo-vendor\");\n                 if let Some(dir) = builder.openssl_install_dir(builder.config.build) {\n                     builder.ensure(native::Openssl {\n                         target: builder.config.build,"}, {"sha": "4e9910e58f391dcb79aca2626d2b1c57100cc53a", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -625,6 +625,11 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n+        if sess.crt_static() {\n+            cmd.args(args);\n+        }\n+    }\n     if let Some(ref args) = sess.opts.debugging_opts.pre_link_args {\n         cmd.args(args);\n     }\n@@ -639,6 +644,12 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n \n+    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n+\n     if sess.target.target.options.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -660,6 +671,11 @@ fn link_natively(sess: &Session,\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }\n+    if sess.crt_static() {\n+        for obj in &sess.target.target.options.post_link_objects_crt {\n+            cmd.arg(root.join(obj));\n+        }\n+    }\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }"}, {"sha": "7a3f3c2a518bc7d065602ce42d30d3f9abc1ad1e", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -15,7 +15,8 @@ pub fn opts() -> TargetOptions {\n \n     // Make sure that the linker/gcc really don't pull in anything, including\n     // default objects, libs, etc.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n+    base.pre_link_args_crt.insert(LinkerFlavor::Gcc, Vec::new());\n+    base.pre_link_args_crt.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-nostdlib\".to_string());\n \n     // At least when this was tested, the linker would not add the\n     // `GNU_EH_FRAME` program header to executables generated, which is required\n@@ -55,9 +56,9 @@ pub fn opts() -> TargetOptions {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n-    base.post_link_objects.push(\"crtn.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n+    base.post_link_objects_crt.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;"}, {"sha": "e54cd773123c8e5b7b5d88ad4a2118d7ee2dd6ee", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -426,20 +426,22 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n-    /// Linker arguments that are unconditionally passed *before* any\n-    /// user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs, // ... unconditionally\n+    pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n     /// Objects to link before all others, always found within the\n     /// sysroot folder.\n-    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n+    pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n     /// Objects to link after all others, always found within the\n     /// sysroot folder.\n-    pub post_link_objects: Vec<String>,\n+    pub post_link_objects: Vec<String>, // ... unconditionally\n+    pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -639,6 +641,7 @@ impl Default for TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n+            pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n             cpu: \"generic\".to_string(),\n@@ -672,8 +675,10 @@ impl Default for TargetOptions {\n             position_independent_executables: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n+            pre_link_objects_exe_crt: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n+            post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -892,10 +897,13 @@ impl Target {\n         key!(is_builtin, bool);\n         key!(linker, optional);\n         key!(pre_link_args, link_args);\n+        key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n+        key!(pre_link_objects_exe_crt, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n+        key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1097,10 +1105,13 @@ impl ToJson for Target {\n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n         target_option_val!(link_args - pre_link_args);\n+        target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n+        target_option_val!(pre_link_objects_exe_crt);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n+        target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}, {"sha": "928bdf532df8e0ab113a163e25d84831deea25f9", "filename": "src/test/run-make-fulldeps/issue-36710/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+ifeq (musl,$(findstring musl,$(TARGET)))\n+all: skip\n+else\n+all: test\n+endif\n+\n+test: foo\n+\t$(call RUN,foo)\n+\n+skip:\n+\techo \"expected failure\"\n+\n+foo: foo.rs $(call NATIVE_STATICLIB,foo)\n+\t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n+\n+$(TMPDIR)/libfoo.o: foo.cpp\n+\t$(call COMPILE_OBJ_CXX,$@,$<)\n+\n+.PHONY: all test skip"}, {"sha": "fbd0ead7a506cb9de7ea3766d3b8c4a68c1a7738", "filename": "src/test/run-make-fulldeps/issue-36710/foo.cpp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.cpp?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <stdint.h>\n+\n+struct A {\n+    A() { v = 1234; }\n+    ~A() { v = 1; }\n+    uint32_t v;\n+};\n+\n+A a;\n+\n+extern \"C\" {\n+    uint32_t get() {\n+        return a.v;\n+    }\n+}"}, {"sha": "6e50566ddfde02850b20ff9acf743915ad94d7f3", "filename": "src/test/run-make-fulldeps/issue-36710/foo.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2Ffoo.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that linking to C++ code with global destructors works.\n+\n+extern { fn get() -> u32; }\n+\n+fn main() {\n+    let i = unsafe { get() };\n+    assert_eq!(i, 1234);\n+}"}, {"sha": "3de358fa50007140e480d160ec4b66e01d70d08d", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -59,12 +59,14 @@ endif\n \n ifdef IS_MSVC\n COMPILE_OBJ = $(CC) -c -Fo:`cygpath -w $(1)` $(2)\n+COMPILE_OBJ_CXX = $(CXX) -c -Fo:`cygpath -w $(1)` $(2)\n NATIVE_STATICLIB_FILE = $(1).lib\n NATIVE_STATICLIB = $(TMPDIR)/$(call NATIVE_STATICLIB_FILE,$(1))\n OUT_EXE=-Fe:`cygpath -w $(TMPDIR)/$(call BIN,$(1))` \\\n \t-Fo:`cygpath -w $(TMPDIR)/$(1).obj`\n else\n COMPILE_OBJ = $(CC) -c -o $(1) $(2)\n+COMPILE_OBJ_CXX = $(CXX) -c -o $(1) $(2)\n NATIVE_STATICLIB_FILE = lib$(1).a\n NATIVE_STATICLIB = $(call STATICLIB,$(1))\n OUT_EXE=-o $(TMPDIR)/$(1)"}, {"sha": "cc00f200171d88261db9d626de728b9fdaa01fb9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "patch": "@@ -2529,7 +2529,7 @@ impl<'test> TestCx<'test> {\n                 .env(\"IS_WINDOWS\", \"1\")\n                 .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n                 .env(\"CC\", format!(\"'{}' {}\", self.config.cc, cflags))\n-                .env(\"CXX\", &self.config.cxx);\n+                .env(\"CXX\", format!(\"'{}'\", &self.config.cxx));\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n                 .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags))"}]}