{"sha": "3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYzJhZWVhMGYyNDJhN2ZlN2E5YzlhZGQ3MzFhMWRlMTQ5NWE1OWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-18T12:46:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-18T12:46:28Z"}, "message": "internal: parser cleanup", "tree": {"sha": "f91b706c27d7fe23d599dc83eed36899014563e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91b706c27d7fe23d599dc83eed36899014563e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "html_url": "https://github.com/rust-lang/rust/commit/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af9fd37cd9a003cc26c07abdbd82473d501f95f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9fd37cd9a003cc26c07abdbd82473d501f95f1", "html_url": "https://github.com/rust-lang/rust/commit/af9fd37cd9a003cc26c07abdbd82473d501f95f1"}], "stats": {"total": 291, "additions": 175, "deletions": 116}, "files": [{"sha": "96a2ba40129b120be8bc316b7009b77ca2339cd6", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -19,7 +19,7 @@ use super::*;\n // struct S;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attrs(p);\n-    while !(stop_on_r_curly && p.at(T!['}']) || p.at(EOF)) {\n+    while !p.at(EOF) && !(p.at(T!['}']) && stop_on_r_curly) {\n         item_or_macro(p, stop_on_r_curly)\n     }\n }"}, {"sha": "f5db4c7222f669db27a2dacf3ca6742c20f4f9e6", "filename": "crates/parser/src/grammar/type_params.rs", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -1,12 +1,13 @@\n use super::*;\n \n pub(super) fn opt_generic_param_list(p: &mut Parser) {\n-    if !p.at(T![<]) {\n-        return;\n+    if p.at(T![<]) {\n+        generic_param_list(p);\n     }\n-    generic_param_list(p);\n }\n \n+// test generic_param_list\n+// fn f<T: Clone>() {}\n fn generic_param_list(p: &mut Parser) {\n     assert!(p.at(T![<]));\n     let m = p.start();\n@@ -15,9 +16,8 @@ fn generic_param_list(p: &mut Parser) {\n     while !p.at(EOF) && !p.at(T![>]) {\n         let m = p.start();\n \n-        // test generic_lifetime_type_attribute\n-        // fn foo<#[derive(Lifetime)] 'a, #[derive(Type)] T>(_: &'a T) {\n-        // }\n+        // test generic_param_list_param_attribute\n+        // fn foo<#[lt_attr] 'a, #[t_attr] T>() {}\n         attributes::outer_attrs(p);\n \n         match p.current() {\n@@ -37,6 +37,8 @@ fn generic_param_list(p: &mut Parser) {\n     m.complete(p, GENERIC_PARAM_LIST);\n }\n \n+// test lifetime_param\n+// fn f<'a: 'b>() {}\n fn lifetime_param(p: &mut Parser, m: Marker) {\n     assert!(p.at(LIFETIME_IDENT));\n     lifetime(p);\n@@ -46,15 +48,17 @@ fn lifetime_param(p: &mut Parser, m: Marker) {\n     m.complete(p, LIFETIME_PARAM);\n }\n \n+// test type_param\n+// fn f<T: Clone>() {}\n fn type_param(p: &mut Parser, m: Marker) {\n     assert!(p.at(IDENT));\n     name(p);\n     if p.at(T![:]) {\n         bounds(p);\n     }\n-    // test type_param_default\n-    // struct S<T = i32>;\n     if p.at(T![=]) {\n+        // test type_param_default\n+        // struct S<T = i32>;\n         p.bump(T![=]);\n         types::type_(p)\n     }\n@@ -64,7 +68,6 @@ fn type_param(p: &mut Parser, m: Marker) {\n // test const_param\n // struct S<const N: u32>;\n fn const_param(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![const]));\n     p.bump(T![const]);\n     name(p);\n     if p.at(T![:]) {\n@@ -73,26 +76,18 @@ fn const_param(p: &mut Parser, m: Marker) {\n         p.error(\"missing type for const parameter\");\n     }\n \n-    // test const_param_defaults\n-    // struct A<const N: i32 = -1>;\n-    // struct B<const N: i32 = {}>;\n-    // struct C<const N: i32 = some::CONST>;\n     if p.at(T![=]) {\n+        // test const_param_defaults\n+        // struct A<const N: i32 = -1>;\n+        // struct B<const N: i32 = {}>;\n+        // struct C<const N: i32 = some::CONST>;\n         p.bump(T![=]);\n         type_args::const_arg(p);\n     }\n \n     m.complete(p, CONST_PARAM);\n }\n \n-// test type_param_bounds\n-// struct S<T: 'a + ?Sized + (Copy)>;\n-pub(super) fn bounds(p: &mut Parser) {\n-    assert!(p.at(T![:]));\n-    p.bump(T![:]);\n-    bounds_without_colon(p);\n-}\n-\n fn lifetime_bounds(p: &mut Parser) {\n     assert!(p.at(T![:]));\n     p.bump(T![:]);\n@@ -104,21 +99,28 @@ fn lifetime_bounds(p: &mut Parser) {\n     }\n }\n \n+// test type_param_bounds\n+// struct S<T: 'a + ?Sized + (Copy)>;\n+pub(super) fn bounds(p: &mut Parser) {\n+    assert!(p.at(T![:]));\n+    p.bump(T![:]);\n+    bounds_without_colon(p);\n+}\n+\n+pub(super) fn bounds_without_colon(p: &mut Parser) {\n+    let m = p.start();\n+    bounds_without_colon_m(p, m);\n+}\n+\n pub(super) fn bounds_without_colon_m(p: &mut Parser, marker: Marker) -> CompletedMarker {\n     while type_bound(p) {\n         if !p.eat(T![+]) {\n             break;\n         }\n     }\n-\n     marker.complete(p, TYPE_BOUND_LIST)\n }\n \n-pub(super) fn bounds_without_colon(p: &mut Parser) {\n-    let m = p.start();\n-    bounds_without_colon_m(p, m);\n-}\n-\n fn type_bound(p: &mut Parser) -> bool {\n     let m = p.start();\n     let has_paren = p.eat(T!['(']);\n@@ -160,8 +162,9 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n \n         let comma = p.eat(T![,]);\n \n-        if is_where_clause_end(p) {\n-            break;\n+        match p.current() {\n+            T!['{'] | T![;] | T![=] => break,\n+            _ => (),\n         }\n \n         if !comma {\n@@ -170,20 +173,16 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n     }\n \n     m.complete(p, WHERE_CLAUSE);\n-}\n \n-fn is_where_predicate(p: &mut Parser) -> bool {\n-    match p.current() {\n-        LIFETIME_IDENT => true,\n-        T![impl] => false,\n-        token => types::TYPE_FIRST.contains(token),\n+    fn is_where_predicate(p: &mut Parser) -> bool {\n+        match p.current() {\n+            LIFETIME_IDENT => true,\n+            T![impl] => false,\n+            token => types::TYPE_FIRST.contains(token),\n+        }\n     }\n }\n \n-fn is_where_clause_end(p: &mut Parser) -> bool {\n-    matches!(p.current(), T!['{'] | T![;] | T![=])\n-}\n-\n fn where_predicate(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n@@ -199,12 +198,12 @@ fn where_predicate(p: &mut Parser) {\n             p.error(\"expected lifetime or type\");\n         }\n         _ => {\n-            // test where_pred_for\n-            // fn for_trait<F>()\n-            // where\n-            //    for<'a> F: Fn(&'a str)\n-            // { }\n             if p.at(T![for]) {\n+                // test where_pred_for\n+                // fn for_trait<F>()\n+                // where\n+                //    for<'a> F: Fn(&'a str)\n+                // { }\n                 types::for_binder(p);\n             }\n "}, {"sha": "5682bd28c579adbf49fd0c5619847c95638ea833", "filename": "crates/syntax/test_data/parser/inline/ok/0122_generic_lifetime_type_attribute.rast", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/af9fd37cd9a003cc26c07abdbd82473d501f95f1/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/af9fd37cd9a003cc26c07abdbd82473d501f95f1/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast?ref=af9fd37cd9a003cc26c07abdbd82473d501f95f1", "patch": "@@ -1,69 +0,0 @@\n-SOURCE_FILE@0..64\n-  FN@0..63\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    GENERIC_PARAM_LIST@6..49\n-      L_ANGLE@6..7 \"<\"\n-      LIFETIME_PARAM@7..29\n-        ATTR@7..26\n-          POUND@7..8 \"#\"\n-          L_BRACK@8..9 \"[\"\n-          META@9..25\n-            PATH@9..15\n-              PATH_SEGMENT@9..15\n-                NAME_REF@9..15\n-                  IDENT@9..15 \"derive\"\n-            TOKEN_TREE@15..25\n-              L_PAREN@15..16 \"(\"\n-              IDENT@16..24 \"Lifetime\"\n-              R_PAREN@24..25 \")\"\n-          R_BRACK@25..26 \"]\"\n-        WHITESPACE@26..27 \" \"\n-        LIFETIME@27..29\n-          LIFETIME_IDENT@27..29 \"'a\"\n-      COMMA@29..30 \",\"\n-      WHITESPACE@30..31 \" \"\n-      TYPE_PARAM@31..48\n-        ATTR@31..46\n-          POUND@31..32 \"#\"\n-          L_BRACK@32..33 \"[\"\n-          META@33..45\n-            PATH@33..39\n-              PATH_SEGMENT@33..39\n-                NAME_REF@33..39\n-                  IDENT@33..39 \"derive\"\n-            TOKEN_TREE@39..45\n-              L_PAREN@39..40 \"(\"\n-              IDENT@40..44 \"Type\"\n-              R_PAREN@44..45 \")\"\n-          R_BRACK@45..46 \"]\"\n-        WHITESPACE@46..47 \" \"\n-        NAME@47..48\n-          IDENT@47..48 \"T\"\n-      R_ANGLE@48..49 \">\"\n-    PARAM_LIST@49..59\n-      L_PAREN@49..50 \"(\"\n-      PARAM@50..58\n-        WILDCARD_PAT@50..51\n-          UNDERSCORE@50..51 \"_\"\n-        COLON@51..52 \":\"\n-        WHITESPACE@52..53 \" \"\n-        REF_TYPE@53..58\n-          AMP@53..54 \"&\"\n-          LIFETIME@54..56\n-            LIFETIME_IDENT@54..56 \"'a\"\n-          WHITESPACE@56..57 \" \"\n-          PATH_TYPE@57..58\n-            PATH@57..58\n-              PATH_SEGMENT@57..58\n-                NAME_REF@57..58\n-                  IDENT@57..58 \"T\"\n-      R_PAREN@58..59 \")\"\n-    WHITESPACE@59..60 \" \"\n-    BLOCK_EXPR@60..63\n-      L_CURLY@60..61 \"{\"\n-      WHITESPACE@61..62 \"\\n\"\n-      R_CURLY@62..63 \"}\"\n-  WHITESPACE@63..64 \"\\n\""}, {"sha": "e8fdf741fb9133a15735183680b289c3c1e61997", "filename": "crates/syntax/test_data/parser/inline/ok/0122_generic_lifetime_type_attribute.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af9fd37cd9a003cc26c07abdbd82473d501f95f1/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9fd37cd9a003cc26c07abdbd82473d501f95f1/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rs?ref=af9fd37cd9a003cc26c07abdbd82473d501f95f1", "patch": "@@ -1,2 +0,0 @@\n-fn foo<#[derive(Lifetime)] 'a, #[derive(Type)] T>(_: &'a T) {\n-}"}, {"sha": "475c23676630eb52e422afd9ddacadeea8b74abf", "filename": "crates/syntax/test_data/parser/inline/ok/0181_generic_param_list_param_attribute.rast", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0181_generic_param_list_param_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0181_generic_param_list_param_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0181_generic_param_list_param_attribute.rast?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1,45 @@\n+SOURCE_FILE@0..40\n+  FN@0..39\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..6\n+      IDENT@3..6 \"foo\"\n+    GENERIC_PARAM_LIST@6..34\n+      L_ANGLE@6..7 \"<\"\n+      LIFETIME_PARAM@7..20\n+        ATTR@7..17\n+          POUND@7..8 \"#\"\n+          L_BRACK@8..9 \"[\"\n+          META@9..16\n+            PATH@9..16\n+              PATH_SEGMENT@9..16\n+                NAME_REF@9..16\n+                  IDENT@9..16 \"lt_attr\"\n+          R_BRACK@16..17 \"]\"\n+        WHITESPACE@17..18 \" \"\n+        LIFETIME@18..20\n+          LIFETIME_IDENT@18..20 \"'a\"\n+      COMMA@20..21 \",\"\n+      WHITESPACE@21..22 \" \"\n+      TYPE_PARAM@22..33\n+        ATTR@22..31\n+          POUND@22..23 \"#\"\n+          L_BRACK@23..24 \"[\"\n+          META@24..30\n+            PATH@24..30\n+              PATH_SEGMENT@24..30\n+                NAME_REF@24..30\n+                  IDENT@24..30 \"t_attr\"\n+          R_BRACK@30..31 \"]\"\n+        WHITESPACE@31..32 \" \"\n+        NAME@32..33\n+          IDENT@32..33 \"T\"\n+      R_ANGLE@33..34 \">\"\n+    PARAM_LIST@34..36\n+      L_PAREN@34..35 \"(\"\n+      R_PAREN@35..36 \")\"\n+    WHITESPACE@36..37 \" \"\n+    BLOCK_EXPR@37..39\n+      L_CURLY@37..38 \"{\"\n+      R_CURLY@38..39 \"}\"\n+  WHITESPACE@39..40 \"\\n\""}, {"sha": "0509f81da7ed7360b51ed403e8cede600a66cf7f", "filename": "crates/syntax/test_data/parser/inline/ok/0181_generic_param_list_param_attribute.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0181_generic_param_list_param_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0181_generic_param_list_param_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0181_generic_param_list_param_attribute.rs?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1 @@\n+fn foo<#[lt_attr] 'a, #[t_attr] T>() {}"}, {"sha": "0eb7361ce42c97c221f70d5122f2991e1253c4e9", "filename": "crates/syntax/test_data/parser/inline/ok/0182_lifetime_param.rast", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0182_lifetime_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0182_lifetime_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0182_lifetime_param.rast?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1,24 @@\n+SOURCE_FILE@0..18\n+  FN@0..17\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    GENERIC_PARAM_LIST@4..12\n+      L_ANGLE@4..5 \"<\"\n+      LIFETIME_PARAM@5..11\n+        LIFETIME@5..7\n+          LIFETIME_IDENT@5..7 \"'a\"\n+        COLON@7..8 \":\"\n+        WHITESPACE@8..9 \" \"\n+        LIFETIME@9..11\n+          LIFETIME_IDENT@9..11 \"'b\"\n+      R_ANGLE@11..12 \">\"\n+    PARAM_LIST@12..14\n+      L_PAREN@12..13 \"(\"\n+      R_PAREN@13..14 \")\"\n+    WHITESPACE@14..15 \" \"\n+    BLOCK_EXPR@15..17\n+      L_CURLY@15..16 \"{\"\n+      R_CURLY@16..17 \"}\"\n+  WHITESPACE@17..18 \"\\n\""}, {"sha": "2bb38ece8c6a0791d5020292d5b406e8fcccbb5f", "filename": "crates/syntax/test_data/parser/inline/ok/0182_lifetime_param.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0182_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0182_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0182_lifetime_param.rs?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1 @@\n+fn f<'a: 'b>() {}"}, {"sha": "9d8ab493e0787eff2bfd23fd65322fbcfe58ce1c", "filename": "crates/syntax/test_data/parser/inline/ok/0183_type_param.rast", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0183_type_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0183_type_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0183_type_param.rast?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1,29 @@\n+SOURCE_FILE@0..20\n+  FN@0..19\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    GENERIC_PARAM_LIST@4..14\n+      L_ANGLE@4..5 \"<\"\n+      TYPE_PARAM@5..13\n+        NAME@5..6\n+          IDENT@5..6 \"T\"\n+        COLON@6..7 \":\"\n+        WHITESPACE@7..8 \" \"\n+        TYPE_BOUND_LIST@8..13\n+          TYPE_BOUND@8..13\n+            PATH_TYPE@8..13\n+              PATH@8..13\n+                PATH_SEGMENT@8..13\n+                  NAME_REF@8..13\n+                    IDENT@8..13 \"Clone\"\n+      R_ANGLE@13..14 \">\"\n+    PARAM_LIST@14..16\n+      L_PAREN@14..15 \"(\"\n+      R_PAREN@15..16 \")\"\n+    WHITESPACE@16..17 \" \"\n+    BLOCK_EXPR@17..19\n+      L_CURLY@17..18 \"{\"\n+      R_CURLY@18..19 \"}\"\n+  WHITESPACE@19..20 \"\\n\""}, {"sha": "b250bc6bf07ced8b078996c8b6407182884a6fe8", "filename": "crates/syntax/test_data/parser/inline/ok/0183_type_param.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0183_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0183_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0183_type_param.rs?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1 @@\n+fn f<T: Clone>() {}"}, {"sha": "9d8ab493e0787eff2bfd23fd65322fbcfe58ce1c", "filename": "crates/syntax/test_data/parser/inline/ok/0184_generic_param_list.rast", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0184_generic_param_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0184_generic_param_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0184_generic_param_list.rast?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1,29 @@\n+SOURCE_FILE@0..20\n+  FN@0..19\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    GENERIC_PARAM_LIST@4..14\n+      L_ANGLE@4..5 \"<\"\n+      TYPE_PARAM@5..13\n+        NAME@5..6\n+          IDENT@5..6 \"T\"\n+        COLON@6..7 \":\"\n+        WHITESPACE@7..8 \" \"\n+        TYPE_BOUND_LIST@8..13\n+          TYPE_BOUND@8..13\n+            PATH_TYPE@8..13\n+              PATH@8..13\n+                PATH_SEGMENT@8..13\n+                  NAME_REF@8..13\n+                    IDENT@8..13 \"Clone\"\n+      R_ANGLE@13..14 \">\"\n+    PARAM_LIST@14..16\n+      L_PAREN@14..15 \"(\"\n+      R_PAREN@15..16 \")\"\n+    WHITESPACE@16..17 \" \"\n+    BLOCK_EXPR@17..19\n+      L_CURLY@17..18 \"{\"\n+      R_CURLY@18..19 \"}\"\n+  WHITESPACE@19..20 \"\\n\""}, {"sha": "b250bc6bf07ced8b078996c8b6407182884a6fe8", "filename": "crates/syntax/test_data/parser/inline/ok/0184_generic_param_list.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0184_generic_param_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc2aeea0f242a7fe7a9c9add731a1de1495a59a/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0184_generic_param_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0184_generic_param_list.rs?ref=3dc2aeea0f242a7fe7a9c9add731a1de1495a59a", "patch": "@@ -0,0 +1 @@\n+fn f<T: Clone>() {}"}]}