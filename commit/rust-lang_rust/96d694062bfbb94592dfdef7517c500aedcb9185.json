{"sha": "96d694062bfbb94592dfdef7517c500aedcb9185", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZDY5NDA2MmJmYmI5NDU5MmRmZGVmNzUxN2M1MDBhZWRjYjkxODU=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-04-21T13:01:13Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-04-21T13:01:13Z"}, "message": "Remove `unwrap`s in \"Convert to named struct\" assist", "tree": {"sha": "bb3ddbdea819e7912a56054d979a0f61d0e51437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3ddbdea819e7912a56054d979a0f61d0e51437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96d694062bfbb94592dfdef7517c500aedcb9185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96d694062bfbb94592dfdef7517c500aedcb9185", "html_url": "https://github.com/rust-lang/rust/commit/96d694062bfbb94592dfdef7517c500aedcb9185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96d694062bfbb94592dfdef7517c500aedcb9185/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a60e71d7aab59858f62a16fce52ba35aeafc28", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a60e71d7aab59858f62a16fce52ba35aeafc28", "html_url": "https://github.com/rust-lang/rust/commit/e0a60e71d7aab59858f62a16fce52ba35aeafc28"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "086a44425922a73cd55d998fb92325c4abf45b50", "filename": "crates/ide_assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/96d694062bfbb94592dfdef7517c500aedcb9185/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d694062bfbb94592dfdef7517c500aedcb9185/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=96d694062bfbb94592dfdef7517c500aedcb9185", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Adt, ModuleDef};\n+use hir::{Adt, ModuleDef, Struct};\n use ide_db::defs::{Definition, NameRefClass};\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, VisibilityOwner},\n@@ -55,6 +55,7 @@ pub(crate) fn convert_tuple_struct_to_named_struct(\n         ast::FieldList::TupleFieldList(it) => it,\n         ast::FieldList::RecordFieldList(_) => return None,\n     };\n+    let strukt_def = ctx.sema.to_def(&strukt)?;\n \n     let target = strukt.syntax().text_range();\n     acc.add(\n@@ -64,7 +65,7 @@ pub(crate) fn convert_tuple_struct_to_named_struct(\n         |edit| {\n             let names = generate_names(tuple_fields.fields());\n             edit_field_references(ctx, edit, tuple_fields.fields(), &names);\n-            edit_struct_references(ctx, edit, &strukt, &names);\n+            edit_struct_references(ctx, edit, strukt_def, &names);\n             edit_struct_def(ctx, edit, &strukt, tuple_fields, names);\n         },\n     )\n@@ -80,7 +81,7 @@ fn edit_struct_def(\n     let record_fields = tuple_fields\n         .fields()\n         .zip(names)\n-        .map(|(f, name)| ast::make::record_field(f.visibility(), name, f.ty().unwrap()));\n+        .filter_map(|(f, name)| Some(ast::make::record_field(f.visibility(), name, f.ty()?)));\n     let record_fields = ast::make::record_field_list(record_fields);\n     let tuple_fields_text_range = tuple_fields.syntax().text_range();\n \n@@ -103,10 +104,9 @@ fn edit_struct_def(\n fn edit_struct_references(\n     ctx: &AssistContext,\n     edit: &mut AssistBuilder,\n-    strukt: &ast::Struct,\n+    strukt: Struct,\n     names: &[ast::Name],\n ) {\n-    let strukt = ctx.sema.to_def(strukt).unwrap();\n     let strukt_def = Definition::ModuleDef(ModuleDef::Adt(Adt::Struct(strukt)));\n     let usages = strukt_def.usages(&ctx.sema).include_self_kw_refs(true).all();\n \n@@ -117,10 +117,15 @@ fn edit_struct_references(\n                 match_ast! {\n                     match node {\n                         ast::TupleStructPat(tuple_struct_pat) => {\n+                            let path = match tuple_struct_pat.path() {\n+                                Some(it) => it,\n+                                None => continue,\n+                            };\n+\n                             edit.replace(\n                                 tuple_struct_pat.syntax().text_range(),\n                                 ast::make::record_pat_with_fields(\n-                                    tuple_struct_pat.path().unwrap(),\n+                                    path,\n                                     ast::make::record_pat_field_list(tuple_struct_pat.fields().zip(names).map(\n                                         |(pat, name)| {\n                                             ast::make::record_pat_field(\n@@ -135,7 +140,10 @@ fn edit_struct_references(\n                         },\n                         // for tuple struct creations like Foo(42)\n                         ast::CallExpr(call_expr) => {\n-                            let path = call_expr.syntax().descendants().find_map(ast::PathExpr::cast).unwrap().path().unwrap();\n+                            let path = match call_expr.syntax().descendants().find_map(ast::PathExpr::cast).map(|expr| expr.path()) {\n+                                Some(Some(it)) => it,\n+                                _ => continue,\n+                            };\n \n                             // this also includes method calls like Foo::new(42), we should skip them\n                             if let Some(Some(name_ref)) = path.segment().map(|s| s.name_ref()) {\n@@ -146,8 +154,10 @@ fn edit_struct_references(\n                                 };\n                             }\n \n-                            let arg_list =\n-                                call_expr.syntax().descendants().find_map(ast::ArgList::cast).unwrap();\n+                            let arg_list = match call_expr.syntax().descendants().find_map(ast::ArgList::cast) {\n+                                Some(it) => it,\n+                                None => continue,\n+                            };\n \n                             edit.replace(\n                                 call_expr.syntax().text_range(),"}]}