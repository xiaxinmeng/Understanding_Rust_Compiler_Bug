{"sha": "debb7e4641af2ea71cf8733b3f071d614803dcbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYmI3ZTQ2NDFhZjJlYTcxY2Y4NzMzYjNmMDcxZDYxNDgwM2RjYmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:11:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:11:00Z"}, "message": "Switch 'native' to 'extern' (or 'foreign' in some descriptions)", "tree": {"sha": "3c087869d79d340300a1383b95b994b2fce43517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c087869d79d340300a1383b95b994b2fce43517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/debb7e4641af2ea71cf8733b3f071d614803dcbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/debb7e4641af2ea71cf8733b3f071d614803dcbd", "html_url": "https://github.com/rust-lang/rust/commit/debb7e4641af2ea71cf8733b3f071d614803dcbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/debb7e4641af2ea71cf8733b3f071d614803dcbd/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7259195caff1fdcce6266e6ecf51c0fd614e041f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7259195caff1fdcce6266e6ecf51c0fd614e041f", "html_url": "https://github.com/rust-lang/rust/commit/7259195caff1fdcce6266e6ecf51c0fd614e041f"}], "stats": {"total": 498, "additions": 249, "deletions": 249}, "files": [{"sha": "e6a7a9fcfe6f8113b9c83db6478cb4a197309ae6", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -454,7 +454,7 @@ fn content_is_dangerous_to_run(code: str) -> bool {\n     let dangerous_patterns =\n         ~[\"xfail-test\",\n          \"import\",  // espeically fs, run\n-         \"native\",\n+         \"extern\",\n          \"unsafe\",\n          \"log\"];    // python --> rust pipe deadlock?\n "}, {"sha": "6b576afe50c1b324902430589d511753ebf30361", "filename": "src/libcore/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farc.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -9,7 +9,7 @@ export arc, get, clone, shared_arc, get_arc;\n export exclusive, methods;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     #[rust_stack]\n     fn rust_atomic_increment(p: &mut libc::intptr_t)\n         -> libc::intptr_t;"}, {"sha": "de611ab2c0a49bacdaa3c6bcad18e23df1318c4e", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -17,7 +17,7 @@ import libc::c_double;\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-native mod c_double {\n+extern mod c_double {\n \n     // Alpabetically sorted by link_name\n \n@@ -95,7 +95,7 @@ native mod c_double {\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-native mod c_float {\n+extern mod c_float {\n \n     // Alpabetically sorted by link_name\n "}, {"sha": "baf4e82ecd5150024fea95cce486d1b58c1ceef0", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -258,7 +258,7 @@ enum rust_port {}\n type port_id = int;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_port_id_send(target_port: port_id, data: *()) -> libc::uintptr_t;\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n@@ -280,7 +280,7 @@ native mod rustrt {\n }\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn init<T>() -> T;\n }\n "}, {"sha": "08da519a1bcb68310b1eeac6b14f1c26c4416d44", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -14,7 +14,7 @@ import libc::consts::os::extra::*;\n type fd_t = c_int;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_get_stdin() -> *libc::FILE;\n     fn rust_get_stdout() -> *libc::FILE;\n     fn rust_get_stderr() -> *libc::FILE;\n@@ -377,11 +377,11 @@ impl of writer for fd_t {\n         }\n     }\n     fn seek(_offset: int, _whence: seek_style) {\n-        #error(\"need 64-bit native calls for seek, sorry\");\n+        #error(\"need 64-bit foreign calls for seek, sorry\");\n         fail;\n     }\n     fn tell() -> uint {\n-        #error(\"need 64-bit native calls for tell, sorry\");\n+        #error(\"need 64-bit foreign calls for tell, sorry\");\n         fail;\n     }\n     fn flush() -> int { 0 }"}, {"sha": "4ccc9f2010d363c0c07d2d33257a8702aa135be0", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -731,7 +731,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod ctype {\n+        extern mod ctype {\n             fn isalnum(c: c_int) -> c_int;\n             fn isalpha(c: c_int) -> c_int;\n             fn iscntrl(c: c_int) -> c_int;\n@@ -749,7 +749,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod stdio {\n+        extern mod stdio {\n \n             fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n             fn freopen(filename: *c_char, mode: *c_char,\n@@ -793,7 +793,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod stdlib {\n+        extern mod stdlib {\n             fn abs(i: c_int) -> c_int;\n             fn labs(i: c_long) -> c_long;\n             // Omitted: div, ldiv (return type incomplete).\n@@ -818,7 +818,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod string {\n+        extern mod string {\n \n             fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n             fn strncpy(dst: *c_char, src: *c_char, n: size_t) -> *c_char;\n@@ -856,7 +856,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod stat {\n+        extern mod stat {\n             #[link_name = \"_chmod\"]\n             fn chmod(path: *c_char, mode: c_int) -> c_int;\n \n@@ -866,7 +866,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod stdio {\n+        extern mod stdio {\n             #[link_name = \"_popen\"]\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n \n@@ -882,7 +882,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod fcntl {\n+        extern mod fcntl {\n             #[link_name = \"_open\"]\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n \n@@ -892,13 +892,13 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod dirent {\n+        extern mod dirent {\n             // Not supplied at all.\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod unistd {\n+        extern mod unistd {\n             #[link_name = \"_access\"]\n             fn access(path: *c_char, amode: c_int) -> c_int;\n \n@@ -966,7 +966,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod stat {\n+        extern mod stat {\n             fn chmod(path: *c_char, mode: mode_t) -> c_int;\n             fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n             fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n@@ -975,7 +975,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod stdio {\n+        extern mod stdio {\n             fn popen(command: *c_char, mode: *c_char) -> *FILE;\n             fn pclose(stream: *FILE) -> c_int;\n             fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n@@ -984,15 +984,15 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod fcntl {\n+        extern mod fcntl {\n             fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n             fn creat(path: *c_char, mode: mode_t) -> c_int;\n             fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod dirent {\n+        extern mod dirent {\n             fn opendir(dirname: *c_char) -> *DIR;\n             fn closedir(dirp: *DIR) -> c_int;\n             fn readdir(dirp: *DIR) -> *dirent;\n@@ -1003,7 +1003,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod unistd {\n+        extern mod unistd {\n             fn access(path: *c_char, amode: c_int) -> c_int;\n             fn alarm(seconds: c_uint) -> c_uint;\n             fn chdir(dir: *c_char) -> c_int;\n@@ -1056,7 +1056,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod unistd {\n+        extern mod unistd {\n             fn readlink(path: *c_char, buf: *mut c_char,\n                         bufsz: size_t) -> ssize_t;\n \n@@ -1073,7 +1073,7 @@ mod funcs {\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        native mod wait {\n+        extern mod wait {\n             fn waitpid(pid: pid_t, status: *mut c_int,\n                        options: c_int) -> pid_t;\n         }\n@@ -1082,7 +1082,7 @@ mod funcs {\n     #[cfg(target_os = \"win32\")]\n     mod posix01 {\n         #[nolink]\n-        native mod unistd { }\n+        extern mod unistd { }\n     }\n \n \n@@ -1092,15 +1092,15 @@ mod funcs {\n     #[cfg(target_os = \"freebsd\")]\n     mod posix08 {\n         #[nolink]\n-        native mod unistd { }\n+        extern mod unistd { }\n     }\n \n \n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     #[nolink]\n     #[abi = \"cdecl\"]\n-    native mod bsd44 {\n+    extern mod bsd44 {\n \n         fn sysctl(name: *c_int, namelen: c_uint,\n                   oldp: *mut c_void, oldlenp: *mut size_t,\n@@ -1124,7 +1124,7 @@ mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[nolink]\n     #[abi = \"cdecl\"]\n-    native mod extra {\n+    extern mod extra {\n         fn _NSGetExecutablePath(buf: *mut c_char,\n                                 bufsize: *mut u32) -> c_int;\n     }\n@@ -1141,7 +1141,7 @@ mod funcs {\n         import types::os::arch::extra::*;\n \n         #[abi = \"stdcall\"]\n-        native mod kernel32 {\n+        extern mod kernel32 {\n             fn GetEnvironmentVariableW(n: LPCWSTR,\n                                        v: LPWSTR,\n                                        nsize: DWORD) -> DWORD;\n@@ -1165,7 +1165,7 @@ mod funcs {\n \n         #[abi = \"cdecl\"]\n         #[nolink]\n-        native mod msvcrt {\n+        extern mod msvcrt {\n             #[link_name = \"_commit\"]\n             fn commit(fd: c_int) -> c_int;\n         }"}, {"sha": "261a18f6f7df3f251a759b2b73ab40bfb845b638", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,7 +3,7 @@\n export console_on, console_off;\n \n #[nolink]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_log_console_on();\n     fn rust_log_console_off();\n }"}, {"sha": "ec553ad5e2f1afc28d74b836eb0982746fffdcf0", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -39,7 +39,7 @@ export walk_dir;\n // FIXME: move these to str perhaps? #2620\n export as_c_charp, fill_charp_buf;\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_env_pairs() -> ~[str];\n     fn rust_getcwd() -> str;\n     fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n@@ -135,7 +135,7 @@ mod global_env {\n     export getenv;\n     export setenv;\n \n-    native mod rustrt {\n+    extern mod rustrt {\n         fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n     }\n "}, {"sha": "447c9352dda801bb923022f5e819a6faba8038bd", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -6,7 +6,7 @@ import compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n \n type rust_port_id = uint;\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_compare_and_swap_ptr(address: *libc::uintptr_t,\n                                  oldval: libc::uintptr_t,\n                                  newval: libc::uintptr_t) -> bool;"}, {"sha": "b6913f9479e3c8aebcf492b0a42536b93005cb42", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -19,7 +19,7 @@ import libc::{c_void, size_t};\n \n #[nolink]\n #[abi = \"cdecl\"]\n-native mod libc_ {\n+extern mod libc_ {\n     #[rust_stack]\n     fn memcpy(dest: *c_void, src: *c_void, n: libc::size_t) -> *c_void;\n     #[rust_stack]\n@@ -29,7 +29,7 @@ native mod libc_ {\n }\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn addr_of<T>(val: T) -> *T;\n }\n "}, {"sha": "e004aa32dc71230a47ab56282a68f150ddb120bd", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -6,7 +6,7 @@ export xorshift, seeded_xorshift;\n enum rctx {}\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rand_seed() -> ~[u8];\n     fn rand_new() -> *rctx;\n     fn rand_new_seeded(seed: ~[u8]) -> *rctx;"}, {"sha": "8481793a8ff645d4ec9fcd258283fc4f4ff9fcfc", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -10,7 +10,7 @@ export spawn_process;\n export waitpid;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_run_program(argv: **libc::c_char, envp: *c_void,\n                         dir: *libc::c_char,\n                         in_fd: c_int, out_fd: c_int, err_fd: c_int)"}, {"sha": "8964067da0b80e6f71e9f4ad0e4a3f95c8f05453", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -34,7 +34,7 @@ fn walk_stack(visit: fn(frame) -> bool) {\n                 if *frame_address == 0u {\n                     #debug(\"encountered task_start_wrapper. ending walk\");\n                     // This is the task_start_wrapper_frame. There is\n-                    // no stack beneath it and it is a native frame.\n+                    // no stack beneath it and it is a foreign frame.\n                     break;\n                 }\n             }\n@@ -72,11 +72,11 @@ fn frame_address(f: fn(*u8)) {\n     rusti::frame_address(f)\n }\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_breakpoint();\n }\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn frame_address(f: fn(*u8));\n }"}, {"sha": "b87a575fdef2497edcfabe65db21603611c56255", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -106,7 +106,7 @@ export\n    extensions;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_str_push(&s: str, ch: u8);\n     fn str_reserve_shared(&ss: str, nn: libc::size_t);\n }\n@@ -1585,7 +1585,7 @@ const tag_six_b: uint = 252u;\n #[doc = \"\n Work with the byte buffer of a string.\n \n-Allows for unsafe manipulation of strings, which is useful for native\n+Allows for unsafe manipulation of strings, which is useful for foreign\n interop.\n \n # Example\n@@ -1604,7 +1604,7 @@ pure fn as_bytes<T>(s: str, f: fn(~[u8]) -> T) -> T {\n #[doc = \"\n Work with the byte buffer of a string.\n \n-Allows for unsafe manipulation of strings, which is useful for native\n+Allows for unsafe manipulation of strings, which is useful for foreign\n interop.\n \"]\n pure fn as_buf<T>(s: str, f: fn(*u8) -> T) -> T {\n@@ -1614,7 +1614,7 @@ pure fn as_buf<T>(s: str, f: fn(*u8) -> T) -> T {\n #[doc = \"\n Work with the byte buffer of a string as a null-terminated C string.\n \n-Allows for unsafe manipulation of strings, which is useful for native\n+Allows for unsafe manipulation of strings, which is useful for foreign\n interop, without copying the original string.\n \n # Example"}, {"sha": "992083c484b02da178623a5a8a5d54e5a25716d9", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -19,7 +19,7 @@ enum type_desc = {\n type rust_cond_lock = *libc::c_void;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn unsupervise();\n     pure fn shape_log_str(t: *sys::type_desc, data: *()) -> str;\n \n@@ -32,7 +32,7 @@ native mod rustrt {\n }\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn get_tydesc<T>() -> *();\n     fn size_of<T>() -> uint;\n     fn pref_align_of<T>() -> uint;"}, {"sha": "f97a39734b825f94d5c2c4620bfa2e015f050226", "filename": "src/libcore/task.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -609,7 +609,7 @@ type local_data_key<T> = fn@(+@T);\n // We use dvec because it's the best data structure in core. If TLS is used\n // heavily in future, this could be made more efficient with a proper map.\n type task_local_element = (*libc::c_void, *libc::c_void, fn@(+*libc::c_void));\n-// Has to be a pointer at the outermost layer; the native call returns void *.\n+// Has to be a pointer at outermost layer; the foreign call returns void *.\n type task_local_map = @dvec::dvec<option<task_local_element>>;\n \n crust fn cleanup_task_local_map(map_ptr: *libc::c_void) unsafe {\n@@ -763,7 +763,7 @@ unsafe fn local_data_modify<T>(key: local_data_key<T>,\n     local_modify(rustrt::rust_get_task(), key, modify_fn)\n }\n \n-native mod rustrt {\n+extern mod rustrt {\n     #[rust_stack]\n     fn rust_task_yield(task: *rust_task, &killed: bool);\n \n@@ -989,7 +989,7 @@ fn test_spawn_sched_childs_on_same_sched() {\n \n #[nolink]\n #[cfg(test)]\n-native mod testrt {\n+extern mod testrt {\n     fn rust_dbg_lock_create() -> *libc::c_void;\n     fn rust_dbg_lock_destroy(lock: *libc::c_void);\n     fn rust_dbg_lock_lock(lock: *libc::c_void);"}, {"sha": "a4e4c4fe1667265ba73ae39726bc021a30695285", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,7 +3,7 @@\n export reinterpret_cast, forget, bump_box_refcount, transmute;\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn forget<T>(-x: T);\n     fn reinterpret_cast<T, U>(e: T) -> U;\n }"}, {"sha": "81039ec552174e8a186622baca223d74dfc69b1e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -85,7 +85,7 @@ export u8;\n export extensions;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn vec_reserve_shared(++t: *sys::type_desc,\n                           ++v: **unsafe::vec_repr,\n                           ++n: libc::size_t);\n@@ -95,7 +95,7 @@ native mod rustrt {\n }\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn move_val_init<T>(&dst: T, -src: T);\n }\n \n@@ -1125,8 +1125,8 @@ pure fn windowed<TT: copy>(nn: uint, xx: &[TT]) -> ~[~[TT]] {\n #[doc = \"\n Work with the buffer of a vector.\n \n-Allows for unsafe manipulation of vector contents, which is useful for native\n-interop.\n+Allows for unsafe manipulation of vector contents, which is useful for\n+foreign interop.\n \"]\n fn as_buf<E,T>(v: &[E], f: fn(*E) -> T) -> T {\n     unpack_slice(v, |buf, _len| f(buf))"}, {"sha": "258bc432da141a061a3c6a50bf427487af819c0f", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -32,7 +32,7 @@ export len;\n export ptr;\n \n #[doc = \"\n-The type representing a native chunk of memory\n+The type representing a foreign chunk of memory\n \n Wrapped in a enum for opacity; FIXME #818 when it is possible to have\n truly opaque types, this should be revisited.\n@@ -57,11 +57,11 @@ class dtor_res {\n  */\n \n #[doc = \"\n-Create a `c_vec` from a native buffer with a given length.\n+Create a `c_vec` from a foreign buffer with a given length.\n \n # Arguments\n \n-* base - A native pointer to a buffer\n+* base - A foreign pointer to a buffer\n * len - The number of elements in the buffer\n \"]\n unsafe fn c_vec<T>(base: *mut T, len: uint) -> c_vec<T> {\n@@ -73,12 +73,12 @@ unsafe fn c_vec<T>(base: *mut T, len: uint) -> c_vec<T> {\n }\n \n #[doc = \"\n-Create a `c_vec` from a native buffer, with a given length,\n+Create a `c_vec` from a foreign buffer, with a given length,\n and a function to run upon destruction.\n \n # Arguments\n \n-* base - A native pointer to a buffer\n+* base - A foreign pointer to a buffer\n * len - The number of elements in the buffer\n * dtor - A function to run when the value is destructed, useful\n          for freeing the buffer, etc."}, {"sha": "be0330e543ac6b46ccd0b52a2542fac97522eb51", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -11,7 +11,7 @@ export ptr_cast;\n export breakpoint;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn debug_tydesc(td: *sys::type_desc);\n     fn debug_opaque(td: *sys::type_desc, x: *());\n     fn debug_box(td: *sys::type_desc, x: *());"}, {"sha": "3c9beb241980ac504b27cbb6c8b1b0783259ef0e", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -28,7 +28,7 @@ export listen, accept;\n export connect;\n \n #[nolink]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_uv_current_kernel_malloc(size: libc::c_uint) -> *libc::c_void;\n     fn rust_uv_current_kernel_free(mem: *libc::c_void);\n     fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;"}, {"sha": "bbf895840d86df166346fb8ae74b1f2a052762e8", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -22,7 +22,7 @@ export tr_ignored;\n export run_tests_console;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn sched_threads() -> libc::size_t;\n }\n "}, {"sha": "ba53bdbf01417fbb2989cfb85331a723d051f04d", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -17,7 +17,7 @@ export\n     strptime;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn get_time(&sec: i64, &nsec: i32);\n     fn precise_time_ns(&ns: u64);\n "}, {"sha": "df2c28be7c943e18a2e8c598c88e50cae05ec363", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -148,7 +148,7 @@ mod icu {\n \n     #[link_name = \"icuuc\"]\n     #[abi = \"cdecl\"]\n-    native mod libicu {\n+    extern mod libicu {\n         pure fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n         pure fn u_isdigit(c: UChar32) -> UBool;\n         pure fn u_islower(c: UChar32) -> UBool;"}, {"sha": "611100f61f774e4dfebe5f4199e018e676ff7b61", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -12,7 +12,7 @@ import priv::{chan_from_global_ptr, weaken_task};\n import comm::{port, chan, methods, select2, listen};\n import either::{left, right};\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_uv_get_kernel_global_chan_ptr() -> *libc::uintptr_t;\n }\n "}, {"sha": "d272299829905c741941913b5a7366bc6a6c50a1", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -556,7 +556,7 @@ mod uv_ll_struct_stubgen {\n }\n \n #[nolink]\n-native mod rustrt {\n+extern mod rustrt {\n     // libuv public API\n     fn rust_uv_loop_new() -> *libc::c_void;\n     fn rust_uv_loop_delete(lp: *libc::c_void);\n@@ -705,7 +705,7 @@ unsafe fn tcp_connect(connect_ptr: *uv_connect_t,\n                       addr_ptr: *sockaddr_in,\n                       ++after_connect_cb: *u8)\n -> libc::c_int {\n-    log(debug, #fmt(\"b4 native tcp_connect--addr port: %u cb: %u\",\n+    log(debug, #fmt(\"b4 foreign tcp_connect--addr port: %u cb: %u\",\n                     (*addr_ptr).sin_port as uint, after_connect_cb as uint));\n     ret rustrt::rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr,\n                                     after_connect_cb, addr_ptr);\n@@ -1527,7 +1527,7 @@ mod test {\n     fn test_uv_ll_struct_size_uv_tcp_t() {\n         let foreign_handle_size = rustrt::rust_uv_helper_uv_tcp_t_size();\n         let rust_handle_size = sys::size_of::<uv_tcp_t>();\n-        let output = #fmt(\"uv_tcp_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_tcp_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1538,7 +1538,7 @@ mod test {\n         let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_connect_t_size();\n         let rust_handle_size = sys::size_of::<uv_connect_t>();\n-        let output = #fmt(\"uv_connect_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_connect_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1549,7 +1549,7 @@ mod test {\n         let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_buf_t_size();\n         let rust_handle_size = sys::size_of::<uv_buf_t>();\n-        let output = #fmt(\"uv_buf_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_buf_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1560,7 +1560,7 @@ mod test {\n         let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_write_t_size();\n         let rust_handle_size = sys::size_of::<uv_write_t>();\n-        let output = #fmt(\"uv_write_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_write_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1572,7 +1572,7 @@ mod test {\n         let foreign_handle_size =\n             rustrt::rust_uv_helper_sockaddr_in_size();\n         let rust_handle_size = sys::size_of::<sockaddr_in>();\n-        let output = #fmt(\"sockaddr_in -- native: %u rust: %u\",\n+        let output = #fmt(\"sockaddr_in -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1583,7 +1583,7 @@ mod test {\n         let native_handle_size =\n             rustrt::rust_uv_helper_sockaddr_in6_size();\n         let rust_handle_size = sys::size_of::<sockaddr_in6>();\n-        let output = #fmt(\"sockaddr_in6 -- native: %u rust: %u\",\n+        let output = #fmt(\"sockaddr_in6 -- foreign: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         // FIXME #1645 .. rust appears to pad structs to the nearest byte..?\n@@ -1598,7 +1598,7 @@ mod test {\n         let native_handle_size =\n             rustrt::rust_uv_helper_addr_in_size();\n         let rust_handle_size = sys::size_of::<addr_in>();\n-        let output = #fmt(\"addr_in -- native: %u rust: %u\",\n+        let output = #fmt(\"addr_in -- foreign: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         // FIXME #1645 .. see note above about struct padding\n@@ -1611,7 +1611,7 @@ mod test {\n         let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_async_t_size();\n         let rust_handle_size = sys::size_of::<uv_async_t>();\n-        let output = #fmt(\"uv_async_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_async_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1623,7 +1623,7 @@ mod test {\n         let foreign_handle_size =\n             rustrt::rust_uv_helper_uv_timer_t_size();\n         let rust_handle_size = sys::size_of::<uv_timer_t>();\n-        let output = #fmt(\"uv_timer_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_timer_t -- foreign: %u rust: %u\",\n                           foreign_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert foreign_handle_size as uint == rust_handle_size;\n@@ -1636,7 +1636,7 @@ mod test {\n         let native_handle_size =\n             rustrt::rust_uv_helper_uv_getaddrinfo_t_size();\n         let rust_handle_size = sys::size_of::<uv_getaddrinfo_t>();\n-        let output = #fmt(\"uv_getaddrinfo_t -- native: %u rust: %u\",\n+        let output = #fmt(\"uv_getaddrinfo_t -- foreign: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert native_handle_size as uint == rust_handle_size;\n@@ -1649,7 +1649,7 @@ mod test {\n         let native_handle_size =\n             rustrt::rust_uv_helper_addrinfo_size();\n         let rust_handle_size = sys::size_of::<addrinfo>();\n-        let output = #fmt(\"addrinfo -- native: %u rust: %u\",\n+        let output = #fmt(\"addrinfo -- foreign: %u rust: %u\",\n                           native_handle_size as uint, rust_handle_size);\n         log(debug, output);\n         assert native_handle_size as uint == rust_handle_size;"}, {"sha": "4dff52615468935942fd097948214cad4871a3f0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -170,7 +170,7 @@ enum mutability { m_mutbl, m_imm, m_const, }\n \n #[auto_serialize]\n enum proto {\n-    proto_bare,    // native fn\n+    proto_bare,    // foreign fn\n     proto_any,     // fn\n     proto_uniq,    // fn~\n     proto_box,     // fn@"}, {"sha": "bd910058971e517c3ffe765bffcb3c64c75bacd8", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -270,7 +270,7 @@ fn node_id_to_str(map: map, id: node_id) -> str {\n         #fmt[\"item %s (id=%?)\", path_ident_to_str(*path, item.ident), id]\n       }\n       some(node_foreign_item(item, abi, path)) {\n-        #fmt[\"native item %s with abi %? (id=%?)\",\n+        #fmt[\"foreign item %s with abi %? (id=%?)\",\n              path_ident_to_str(*path, item.ident), abi, id]\n       }\n       some(node_method(m, impl_did, path)) {"}, {"sha": "33f9f376953c91fa0e55045c36358f8ad0c61cfe", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -609,7 +609,7 @@ fn link_binary(sess: session,\n     let ula = cstore::get_used_link_args(cstore);\n     for ula.each |arg| { vec::push(cc_args, arg); }\n \n-    // # Native library linking\n+    // # Extern library linking\n \n     // User-supplied library search paths (-L on the cammand line) These are\n     // the same paths used to find Rust crates, so some of them may have been\n@@ -620,7 +620,7 @@ fn link_binary(sess: session,\n     let addl_paths = sess.opts.addl_lib_search_paths;\n     for addl_paths.each |path| { vec::push(cc_args, \"-L\" + path); }\n \n-    // The names of the native libraries\n+    // The names of the extern libraries\n     let used_libs = cstore::get_used_libraries(cstore);\n     for used_libs.each |l| { vec::push(cc_args, \"-l\" + l); }\n \n@@ -673,7 +673,7 @@ fn link_binary(sess: session,\n     vec::push(cc_args, \"-lmorestack\");\n \n     // FIXME (#2397): At some point we want to rpath our guesses as to where\n-    // native libraries might live, based on the addl_lib_search_paths\n+    // extern libraries might live, based on the addl_lib_search_paths\n     vec::push_all(cc_args, rpath::get_rpath_flags(sess, output));\n \n     #debug(\"%s link args: %s\", cc_prog, str::connect(cc_args, \" \"));"}, {"sha": "2625a244bebfe8d9620a0d96b48887633980c491", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -27,7 +27,7 @@ fn get_rpath_flags(sess: session::session, out_filename: str) -> ~[str] {\n     let sysroot = sess.filesearch.sysroot();\n     let output = out_filename;\n     let libs = cstore::get_used_crate_files(sess.cstore);\n-    // We don't currently rpath native libraries, but we know\n+    // We don't currently rpath extern libraries, but we know\n     // where rustrt is and we know every rust program needs it\n     let libs = vec::append_one(libs, get_sysroot_absolute_rt_lib(sess));\n "}, {"sha": "cfd367bb889cda19a2bdc72cf484f1df03937a91", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -121,7 +121,7 @@ mod intrinsic {\n     }\n \n     #[abi = \"rust-intrinsic\"]\n-    native mod rusti {\n+    extern mod rusti {\n         fn visit_ty<T>(&&tv: ty_visitor);\n     }\n }"}, {"sha": "1df423cdbb226efefd187bebf7b5a02b1c1dd381", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -191,7 +191,7 @@ type SectionIteratorRef = *SectionIterator_opaque;\n #[link_args = \"-Lrustllvm\"]\n #[link_name = \"rustllvm\"]\n #[abi = \"cdecl\"]\n-native mod llvm {\n+extern mod llvm {\n     /* Create and destroy contexts. */\n     fn LLVMContextCreate() -> ContextRef;\n     fn LLVMGetGlobalContext() -> ContextRef;"}, {"sha": "bb001427121017b5f2843502d844bfc387539a66", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n #[doc = \"\n \n-Validates all used crates and native libraries and loads their metadata\n+Validates all used crates and extern libraries and loads their metadata\n \n \"];\n \n@@ -17,7 +17,7 @@ import dvec::{dvec, extensions};\n \n export read_crates;\n \n-// Traverses an AST, reading all the information about use'd crates and native\n+// Traverses an AST, reading all the information about use'd crates and extern\n // libraries necessary for later resolving, typechecking, linking, etc.\n fn read_crates(diag: span_handler, crate: ast::crate,\n                cstore: cstore::cstore, filesearch: filesearch,"}, {"sha": "4d92857375f312c2678a16104fe00c3e78eefe54", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -675,14 +675,14 @@ fn item_family_to_str(fam: char) -> str {\n       'f' { ret \"fn\"; }\n       'u' { ret \"unsafe fn\"; }\n       'p' { ret \"pure fn\"; }\n-      'F' { ret \"native fn\"; }\n-      'U' { ret \"unsafe native fn\"; }\n-      'P' { ret \"pure native fn\"; }\n+      'F' { ret \"foreign fn\"; }\n+      'U' { ret \"unsafe foreign fn\"; }\n+      'P' { ret \"pure foreign fn\"; }\n       'y' { ret \"type\"; }\n-      'T' { ret \"native type\"; }\n+      'T' { ret \"foreign type\"; }\n       't' { ret \"type\"; }\n       'm' { ret \"mod\"; }\n-      'n' { ret \"native mod\"; }\n+      'n' { ret \"foreign mod\"; }\n       'v' { ret \"enum\"; }\n       'i' { ret \"impl\"; }\n       'I' { ret \"iface\"; }"}, {"sha": "3c8083e7f76c8eced8e146924e184d910cb2cada", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -87,7 +87,7 @@ fn get_lint_dict() -> lint_dict {\n     let v = ~[\n         (\"ctypes\",\n          @{lint: ctypes,\n-           desc: \"proper use of core::libc types in native modules\",\n+           desc: \"proper use of core::libc types in foreign modules\",\n            default: warn}),\n \n         (\"unused_imports\",\n@@ -368,14 +368,14 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n                     cx.sess.span_lint(\n                         ctypes, id, fn_id,\n                         ty.span,\n-                        \"found rust type `int` in native module, while \\\n+                        \"found rust type `int` in foreign module, while \\\n                          libc::c_int or libc::c_long should be used\");\n                   }\n                   ast::def_prim_ty(ast::ty_uint(ast::ty_u)) {\n                     cx.sess.span_lint(\n                         ctypes, id, fn_id,\n                         ty.span,\n-                        \"found rust type `uint` in native module, while \\\n+                        \"found rust type `uint` in foreign module, while \\\n                          libc::c_uint or libc::c_ulong should be used\");\n                   }\n                   _ { }"}, {"sha": "330a5dac3833f138b32a81e06167cf80603b1f40", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -106,7 +106,7 @@ type indexed_mod = {\n     path: str\n };\n \n-/* native modules can't contain enums, and we don't store their ASTs because\n+/* foreign modules can't contain enums, and we don't store their ASTs because\n    we only need to look at them to determine exports, which they can't\n    control.*/\n \n@@ -1481,7 +1481,7 @@ fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n                      module %d not in mod_map\", node_id)); }\n     };\n     if dr == outside && !is_exported(e, id, inf) {\n-        // if we're in a native mod, then dr==inside, so inf.m is some _mod\n+        // if we're in a foreign mod, then dr==inside, so inf.m is some _mod\n         ret none; // name is not visible\n     }\n     alt inf.index.find(id) {"}, {"sha": "457ffd8e401222935672cad52a4f5061b933fb8b", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -4913,7 +4913,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n       ast::item_fn(decl, tps, body) {\n         if decl.purity == ast::extern_fn  {\n             let llfndecl = get_item_val(ccx, item.id);\n-            foreign::trans_extern_fn(ccx,\n+            foreign::trans_foreign_fn(ccx,\n                                      vec::append(\n                                          *path,\n                                          ~[path_name(item.ident)]),\n@@ -5194,7 +5194,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                 let llfn = if decl.purity != ast::extern_fn {\n                     register_fn(ccx, i.span, my_path, i.id)\n                 } else {\n-                    foreign::register_extern_fn(ccx, i.span, my_path, i.id)\n+                    foreign::register_foreign_fn(ccx, i.span, my_path, i.id)\n                 };\n                 set_inline_hint_if_appr(i.attrs, llfn);\n                 llfn"}, {"sha": "70464930fe6feb68515698096daeca1114b31919", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -19,7 +19,7 @@ import type_of::*;\n import std::map::hashmap;\n import util::ppaux::ty_to_str;\n \n-export link_name, trans_foreign_mod, register_extern_fn, trans_extern_fn,\n+export link_name, trans_foreign_mod, register_foreign_fn, trans_foreign_fn,\n        trans_intrinsic;\n \n enum x86_64_reg_class {\n@@ -541,15 +541,15 @@ fn build_wrap_fn_(ccx: @crate_ctxt,\n     Unreachable(ret_cx);\n }\n \n-// For each native function F, we generate a wrapper function W and a shim\n+// For each foreign function F, we generate a wrapper function W and a shim\n // function S that all work together.  The wrapper function W is the function\n // that other rust code actually invokes.  Its job is to marshall the\n // arguments into a struct.  It then uses a small bit of assembly to switch\n // over to the C stack and invoke the shim function.  The shim function S then\n // unpacks the arguments from the struct and invokes the actual function F\n // according to its specified calling convention.\n //\n-// Example: Given a native c-stack function F(x: X, y: Y) -> Z,\n+// Example: Given a foreign c-stack function F(x: X, y: Y) -> Z,\n // we generate a wrapper function W that looks like:\n //\n //    void W(Z* dest, void *env, X x, Y y) {\n@@ -984,15 +984,15 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n     finish_fn(fcx, lltop);\n }\n \n-fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n+fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n                   body: ast::blk, llwrapfn: ValueRef, id: ast::node_id) {\n \n-    let _icx = ccx.insn_ctxt(\"foreign::build_extern_fn\");\n+    let _icx = ccx.insn_ctxt(\"foreign::build_foreign_fn\");\n \n     fn build_rust_fn(ccx: @crate_ctxt, path: ast_map::path,\n                      decl: ast::fn_decl, body: ast::blk,\n                      id: ast::node_id) -> ValueRef {\n-        let _icx = ccx.insn_ctxt(\"foreign::extern::build_rust_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::foreign::build_rust_fn\");\n         let t = ty::node_id_to_type(ccx.tcx, id);\n         let ps = link::mangle_internal_name_by_path(\n             ccx, vec::append_one(path, ast_map::path_name(@\"__rust_abi\")));\n@@ -1005,7 +1005,7 @@ fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n     fn build_shim_fn(ccx: @crate_ctxt, path: ast_map::path,\n                      llrustfn: ValueRef, tys: @c_stack_tys) -> ValueRef {\n \n-        let _icx = ccx.insn_ctxt(\"foreign::extern::build_shim_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::foreign::build_shim_fn\");\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llargbundle: ValueRef) -> ~[ValueRef] {\n@@ -1042,11 +1042,11 @@ fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n     fn build_wrap_fn(ccx: @crate_ctxt, llshimfn: ValueRef,\n                      llwrapfn: ValueRef, tys: @c_stack_tys) {\n \n-        let _icx = ccx.insn_ctxt(\"foreign::extern::build_wrap_fn\");\n+        let _icx = ccx.insn_ctxt(\"foreign::foreign::build_wrap_fn\");\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llwrapfn: ValueRef, llargbundle: ValueRef) {\n-            let _icx = bcx.insn_ctxt(\"foreign::extern::wrap::build_args\");\n+            let _icx = bcx.insn_ctxt(\"foreign::foreign::wrap::build_args\");\n             alt tys.x86_64_tys {\n                 option::some(x86_64) {\n                     let mut atys = x86_64.arg_tys;\n@@ -1100,7 +1100,7 @@ fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n \n         fn build_ret(bcx: block, tys: @c_stack_tys,\n                      llargbundle: ValueRef) {\n-            let _icx = bcx.insn_ctxt(\"foreign::extern::wrap::build_ret\");\n+            let _icx = bcx.insn_ctxt(\"foreign::foreign::wrap::build_ret\");\n             alt tys.x86_64_tys {\n                 option::some(x86_64) {\n                     if x86_64.sret || !tys.ret_def {\n@@ -1137,14 +1137,14 @@ fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n     let llrustfn = build_rust_fn(ccx, path, decl, body, id);\n     // The internal shim function - runs on the Rust stack\n     let llshimfn = build_shim_fn(ccx, path, llrustfn, tys);\n-    // The external C function - runs on the C stack\n+    // The foreign C function - runs on the C stack\n     build_wrap_fn(ccx, llshimfn, llwrapfn, tys)\n }\n \n-fn register_extern_fn(ccx: @crate_ctxt, sp: span,\n+fn register_foreign_fn(ccx: @crate_ctxt, sp: span,\n                      path: ast_map::path, node_id: ast::node_id)\n     -> ValueRef {\n-    let _icx = ccx.insn_ctxt(\"foreign::register_extern_fn\");\n+    let _icx = ccx.insn_ctxt(\"foreign::register_foreign_fn\");\n     let t = ty::node_id_to_type(ccx.tcx, node_id);\n     let (llargtys, llretty, ret_ty) = c_arg_and_ret_lltys(ccx, node_id);\n     ret if ccx.sess.targ_cfg.arch == arch_x86_64 {"}, {"sha": "92fbac2088598a2f32eddf0d3658dc41350c36c4", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -259,8 +259,8 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n         if !ok {\n                 tcx.sess.span_err(main_span,\n                    #fmt(\"Wrong type in main function: found `%s`, \\\n-                   expecting `native fn(~[str]) -> ()` \\\n-                   or `native fn() -> ()`\",\n+                   expecting `extern fn(~[str]) -> ()` \\\n+                   or `extern fn() -> ()`\",\n                          ty_to_str(tcx, main_t)));\n          }\n       }"}, {"sha": "31bd88e85617bd894a3150447cb28528a3940b8b", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -403,7 +403,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n                 if (*tpt.bounds).is_not_empty() {\n                     ccx.tcx.sess.span_err(\n                         item.span,\n-                        #fmt[\"native items may not have type parameters\"]);\n+                        #fmt[\"foreign items may not have type parameters\"]);\n                 }\n             }\n         }\n@@ -740,8 +740,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                 // really hard due to the way that expr_bind() is\n                 // written.\n                 fcx.ccx.tcx.sess.span_fatal(sp, \"mismatched types: \\\n-                                                 expected function or native \\\n-                                                 function but found \"\n+                                            expected function or foreign \\\n+                                            function but found \"\n                                             + fcx.infcx.ty_to_str(in_fty));\n               }\n             };"}, {"sha": "f64cfed7c81be4f85473ec06ddfe92e1cd5e4856", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -398,7 +398,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n }\n fn convert_foreign(ccx: @crate_ctxt, i: @ast::foreign_item) {\n     // As above, this call populates the type table with the converted\n-    // type of the native item. We simply write it into the node type\n+    // type of the foreign item. We simply write it into the node type\n     // table.\n     let tpt = ty_of_foreign_item(ccx, i);\n     alt i.node {"}, {"sha": "d2afba56f28db9338773c62b61c600e7e2478ce1", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -117,13 +117,13 @@ fn should_extract_top_mod_attributes() {\n \n #[test]\n fn should_extract_foreign_mod_attributes() {\n-    let doc = test::mk_doc(\"#[doc = \\\"test\\\"] native mod a { }\");\n+    let doc = test::mk_doc(\"#[doc = \\\"test\\\"] extern mod a { }\");\n     assert doc.cratemod().nmods()[0].desc() == some(\"test\");\n }\n \n #[test]\n fn should_extract_foreign_fn_attributes() {\n-    let doc = test::mk_doc(\"native mod a { #[doc = \\\"test\\\"] fn a(); }\");\n+    let doc = test::mk_doc(\"extern mod a { #[doc = \\\"test\\\"] fn a(); }\");\n     assert doc.cratemod().nmods()[0].fns[0].desc() == some(\"test\");\n }\n "}, {"sha": "0d4182a6ee802192e0a5c8790eb2f91d9c2888b8", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -291,13 +291,13 @@ mod test {\n \n     #[test]\n     fn extract_foreign_mods() {\n-        let doc = mk_doc(\"native mod a { }\");\n+        let doc = mk_doc(\"extern mod a { }\");\n         assert doc.cratemod().nmods()[0].name() == \"a\";\n     }\n \n     #[test]\n     fn extract_fns_from_foreign_mods() {\n-        let doc = mk_doc(\"native mod a { fn a(); }\");\n+        let doc = mk_doc(\"extern mod a { fn a(); }\");\n         assert doc.cratemod().nmods()[0].fns[0].name() == \"a\";\n     }\n "}, {"sha": "83098ecd0452747571c8980e8520d0690d9189eb", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -179,10 +179,10 @@ fn should_index_mod_contents_multi_page() {\n fn should_index_foreign_mod_pages() {\n     let doc = test::mk_doc(\n         config::doc_per_mod,\n-        \"native mod a { }\"\n+        \"extern mod a { }\"\n     );\n     assert option::get(doc.cratemod().index).entries[0] == {\n-        kind: \"Native module\",\n+        kind: \"Foreign module\",\n         name: \"a\",\n         brief: none,\n         link: \"a.html\"\n@@ -202,7 +202,7 @@ fn should_add_brief_desc_to_index() {\n fn should_index_foreign_mod_contents() {\n     let doc = test::mk_doc(\n         config::doc_per_crate,\n-        \"native mod a { fn b(); }\"\n+        \"extern mod a { fn b(); }\"\n     );\n     assert option::get(doc.cratemod().nmods()[0].index).entries[0] == {\n         kind: \"Function\","}, {"sha": "cb3da77362dff50b55ff5954202aa5d91fcff26b", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -187,7 +187,7 @@ fn header_kind(doc: doc::itemtag) -> str {\n         }\n       }\n       doc::nmodtag(_) {\n-        \"Native module\"\n+        \"Foreign module\"\n       }\n       doc::fntag(_) {\n         \"Function\"\n@@ -414,7 +414,7 @@ fn should_not_write_index_if_no_entries() {\n \n #[test]\n fn should_write_index_for_foreign_mods() {\n-    let markdown = test::render(\"native mod a { fn a(); }\");\n+    let markdown = test::render(\"extern mod a { fn a(); }\");\n     assert str::contains(\n         markdown,\n         \"\\n\\n* [Function `a`](#function-a)\\n\\n\"\n@@ -435,20 +435,20 @@ fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n \n #[test]\n fn should_write_foreign_mods() {\n-    let markdown = test::render(\"#[doc = \\\"test\\\"] native mod a { }\");\n-    assert str::contains(markdown, \"Native module `a`\");\n+    let markdown = test::render(\"#[doc = \\\"test\\\"] extern mod a { }\");\n+    assert str::contains(markdown, \"Foreign module `a`\");\n     assert str::contains(markdown, \"test\");\n }\n \n #[test]\n fn should_write_foreign_fns() {\n-    let markdown = test::render(\"native mod a { #[doc = \\\"test\\\"] fn a(); }\");\n+    let markdown = test::render(\"extern mod a { #[doc = \\\"test\\\"] fn a(); }\");\n     assert str::contains(markdown, \"test\");\n }\n \n #[test]\n fn should_write_foreign_fn_headers() {\n-    let markdown = test::render(\"native mod a { #[doc = \\\"test\\\"] fn a(); }\");\n+    let markdown = test::render(\"extern mod a { #[doc = \\\"test\\\"] fn a(); }\");\n     assert str::contains(markdown, \"## Function `a`\");\n }\n "}, {"sha": "a360686e358624b8ecad5fdf6ff77c2df7c199e3", "filename": "src/rustdoc/page_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpage_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -150,13 +150,13 @@ fn should_remove_mods_from_containing_mods() {\n \n #[test]\n fn should_make_a_page_for_every_foreign_mod() {\n-    let doc = test::mk_doc(\"native mod a { }\");\n+    let doc = test::mk_doc(\"extern mod a { }\");\n     assert doc.pages.nmods()[0].name() == \"a\";\n }\n \n #[test]\n fn should_remove_foreign_mods_from_containing_mods() {\n-    let doc = test::mk_doc(\"native mod a { }\");\n+    let doc = test::mk_doc(\"extern mod a { }\");\n     assert vec::is_empty(doc.cratemod().nmods());\n }\n "}, {"sha": "07029029c6ed13dd2fd1fb50cc30380365b3af8a", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -88,7 +88,7 @@ fn should_record_fn_paths() {\n \n #[test]\n fn should_record_foreign_mod_paths() {\n-    let source = \"mod a { native mod b { } }\";\n+    let source = \"mod a { extern mod b { } }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, \"\");\n         let doc = run(srv, doc);\n@@ -98,7 +98,7 @@ fn should_record_foreign_mod_paths() {\n \n #[test]\n fn should_record_foreign_fn_paths() {\n-    let source = \"native mod a { fn b(); }\";\n+    let source = \"extern mod a { fn b(); }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, \"\");\n         let doc = run(srv, doc);"}, {"sha": "3c28501aa984477211c6176a21d8e4561115efac", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -446,7 +446,7 @@ fn should_duplicate_reexported_impls_crate() {\n \n #[test]\n fn should_duplicate_reexported_foreign_fns() {\n-    let source = \"native mod a { fn b(); } \\\n+    let source = \"extern mod a { fn b(); } \\\n                   mod c { import a::b; export b; }\";\n     let doc = test::mk_doc(source);\n     assert doc.cratemod().mods()[0].fns()[0].name() == \"b\";"}, {"sha": "de74f2f535ed20329fe1658335e0f4d413da3eb7", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -25,7 +25,7 @@ fn mk_pass() -> pass {\n fn test() {\n     let source =\n         \"mod imod { } \\\n-         native mod inmod { } \\\n+         extern mod inmod { } \\\n          const iconst: int = 0; \\\n          fn ifn() { } \\\n          enum ienum { ivar } \\"}, {"sha": "7de5f48db32b483608e5394edbb399af777db524", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -69,7 +69,7 @@ fn should_add_fn_sig() {\n \n #[test]\n fn should_add_foreign_fn_sig() {\n-    let doc = test::mk_doc(\"native mod a { fn a<T>() -> int; }\");\n+    let doc = test::mk_doc(\"extern mod a { fn a<T>() -> int; }\");\n     assert doc.cratemod().nmods()[0].fns[0].sig == some(\"fn a<T>() -> int\");\n }\n "}, {"sha": "ff4bb5266eca2ce98cbc90c7f8cb0f290b175b57", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn last_os_error() -> str;\n }\n\\ No newline at end of file"}, {"sha": "62389aece6adc5c75000dee6412deb6c5ac5bed1", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -87,7 +87,7 @@ enum rust_port {}\n type port_id = int;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n \n     fn new_port(unit_sz: libc::size_t) -> *rust_port;\n     fn del_port(po: *rust_port);\n@@ -100,7 +100,7 @@ native mod rustrt {\n }\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn init<T>() -> T;\n }\n "}, {"sha": "56b01325b245f1343c93ed889cf754a93808dcc7", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -9,7 +9,7 @@ use std;\n // stub. Kind of shocking. Might be able to make it faster still with\n // an llvm intrinsic.\n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn sqrt(n: float) -> float;\n }\n "}, {"sha": "79f21dc62c3163136b5e47806834a043c0e608b3", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:expecting `native fn(~[str])\n+// error-pattern:expecting `extern fn(~[str])\n \n fn main(x: int) { }"}, {"sha": "e7786129472b5e78bc134b5595f488ccc8bf9026", "filename": "src/test/compile-fail/bad-var-env-capture-in-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = 3;\n-    fn blah(_a: native fn()) {}\n+    fn blah(_a: extern fn()) {}\n     blah(|| {\n         log(debug, x); //~ ERROR attempted dynamic environment capture\n     });"}, {"sha": "9726dc9b4c98d7189ab993af330a9d1deb6d088a", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,10 +2,10 @@\n // other tycons.\n \n fn main() {\n-    fn f(f: native fn(native fn(native fn()))) {\n+    fn f(f: extern fn(extern fn(extern fn()))) {\n     }\n \n-    fn g(f: native fn(fn())) {\n+    fn g(f: extern fn(fn())) {\n     }\n \n     f(g);"}, {"sha": "dd8f77ce20e94933b4c1360ae1baafe28ea72784", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,10 +1,10 @@\n // Make sure that fn-to-block coercion isn't incorrectly lifted over\n // other tycons.\n \n-fn coerce(b: fn()) -> native fn() {\n-    fn lol(f: native fn(fn()) -> native fn(),\n-           g: fn()) -> native fn() { ret f(g); }\n-    fn fn_id(f: native fn()) -> native fn() { ret f }\n+fn coerce(b: fn()) -> extern fn() {\n+    fn lol(f: extern fn(fn()) -> extern fn(),\n+           g: fn()) -> extern fn() { ret f(g); }\n+    fn fn_id(f: extern fn()) -> extern fn() { ret f }\n     ret lol(fn_id, b);\n     //~^ ERROR mismatched types: expected `extern fn(fn()) -> extern fn()`\n }"}, {"sha": "61d8c25459afeccffe0a023a9f7f5d6fa8f135d9", "filename": "src/test/compile-fail/crust-no-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fcrust-no-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fcrust-no-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrust-no-call.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected function or native function but found *u8\n+// error-pattern:expected function or foreign function but found *u8\n crust fn f() {\n }\n "}, {"sha": "0b6cd08d6bce14a067db12c10750c2a3bc8c3519", "filename": "src/test/compile-fail/empty-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:empty #[link_name] not allowed; use #[nolink].\n \n #[link_name = \"\"]\n-native mod foo {\n+extern mod foo {\n }"}, {"sha": "2c87c7308e2152423f43527b4b86e1ff34493a3e", "filename": "src/test/compile-fail/empty-linkname2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,5 +3,5 @@\n \n #[link_name = \"\"]\n #[nolink]\n-native mod foo {\n+extern mod foo {\n }"}, {"sha": "c5c80d3a85271a667682e92948c6048aa6778df8", "filename": "src/test/compile-fail/foreign-unsafe-fn-called.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn-called.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n \n #[abi = \"cdecl\"]\n-native mod test {\n+extern mod test {\n     unsafe fn free();\n }\n ", "previous_filename": "src/test/compile-fail/native-unsafe-fn-called.rs"}, {"sha": "f0619e107bd0909830a399c7607c3b803f69b6b7", "filename": "src/test/compile-fail/foreign-unsafe-fn.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n \n #[abi = \"cdecl\"]\n-native mod test {\n+extern mod test {\n     unsafe fn free();\n }\n ", "previous_filename": "src/test/compile-fail/native-unsafe-fn.rs"}, {"sha": "713c8033a0e3384271fec0f18b1711b381f48188", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -6,6 +6,6 @@ the compiler output. */\n \n #[link_args = \"aFdEfSeVEEE\"]\n #[nolink]\n-native mod m1 { }\n+extern mod m1 { }\n \n fn main() { }\n\\ No newline at end of file"}, {"sha": "6a316886fe0312d21427284c48a443c38b7ea843", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -8,10 +8,10 @@\n \n #[link_name= \"m\"]\n #[link_args=\"-foo\"]             // this could have been elided.\n-native mod m1 {\n+extern mod m1 {\n }\n \n #[link_name= \"m\"]\n #[link_args=\"-bar\"]             // this is the actual error trigger.\n-native mod m2 {\n+extern mod m2 {\n }"}, {"sha": "319d17e144135e612cddd2a37c23c395cf9ecf25", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:unsupported cast\n \n fn main() {\n-  log(debug, 1.0 as *libc::FILE); // Can't cast float to native.\n+  log(debug, 1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "8ee712cb96f9f32bc2e6ec6daebc3f8b55624327", "filename": "src/test/compile-fail/warn-ctypes-err-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n #[warn(err_ctypes)];\n \n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn malloc(size: int) -> *u8;\n }\n "}, {"sha": "bfa1057a1f94cc1545e2e1c05d335a5aea4d9a79", "filename": "src/test/compile-fail/warn-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n // compile-flags:-W err-ctypes\n // error-pattern:found rust type\n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn malloc(size: int) -> *u8;\n }\n "}, {"sha": "4ff7d0edf05676cb2b3161eedf938bb7db51bf3c", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n //error-pattern:libc::c_int or libc::c_long should be used\n-native mod xx {\n+extern mod xx {\n   fn strlen(str: *u8) -> uint;\n   fn foo(x: int, y: uint);\n }", "previous_filename": "src/test/compile-fail/warn-native-int-types.rs"}, {"sha": "a5929248aafcbd389fc5f0ceb6ce7e5d2472af24", "filename": "src/test/run-fail/crust-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-fail%2Fcrust-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-fail%2Fcrust-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fcrust-fail.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n // Testing that runtime failure doesn't cause callbacks to abort abnormally.\n // Instead the failure will be delivered after the callbacks return.\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "0fce54cb82161993f0c7a7a184aee610facdcefc", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -7,7 +7,7 @@\n \n use std;\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn last_os_error() -> str;\n }\n "}, {"sha": "7bae808504ba94d329e5ba48cb98b612da721353", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -115,7 +115,7 @@ fn test_fn() {\n \n #[abi = \"cdecl\"]\n #[nolink]\n-native mod test {\n+extern mod test {\n     fn unsupervise();\n     fn get_task_id();\n }"}, {"sha": "1b10798166db3f76a20d381c4a34555b6d17cd05", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn unsupervise();\n }\n "}, {"sha": "4c7c2af982b4753302f009fdebcc6b7fe153433a", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,7 +3,7 @@ import str;\n \n #[abi = \"cdecl\"]\n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn atol(x: *u8) -> int;\n     fn atoll(x: *u8) -> i64;\n }"}, {"sha": "f7d113cdbfc69e2afd4b61e80b138e33c5c784ee", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n class cat {\n-  let done : native fn(uint);\n+  let done : extern fn(uint);\n   let meows : uint;\n-  new(done: native fn(uint)) {\n+  new(done: extern fn(uint)) {\n     self.meows = 0u;\n     self.done = done;\n   }"}, {"sha": "d1510e8de47c71514fcb809d5d224aeb4e65ab8c", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -5,14 +5,14 @@ const b: bool = true;\n \n #[cfg(bogus)]\n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     // This symbol doesn't exist and would be a link error if this\n     // module was translated\n     fn bogus();\n }\n \n #[abi = \"cdecl\"]\n-native mod rustrt { }\n+extern mod rustrt { }\n \n #[cfg(bogus)]\n type t = int;\n@@ -81,7 +81,7 @@ fn test_in_fn_ctxt() {\n \n mod test_foreign_items {\n     #[abi = \"cdecl\"]\n-    native mod rustrt {\n+    extern mod rustrt {\n         #[cfg(bogus)]\n         fn vec_from_buf_shared();\n         fn vec_from_buf_shared();"}, {"sha": "e3eb85a1a99666b75a78f038f0cf321273bf2de7", "filename": "src/test/run-pass/crust-call-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-call-deep.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,4 +1,4 @@\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "a4aa0dba4417524f256324f86f361495c58e8ad4", "filename": "src/test/run-pass/crust-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-call-deep2.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,4 +1,4 @@\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "fe94af2b2e6834ef68c8e06867db3df52d7374cd", "filename": "src/test/run-pass/crust-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-call-scrub.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n // make sure the stack pointers are maintained properly in both\n // directions\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "1a4c7bce2a5ee54057f6d97b2e547cd464856897", "filename": "src/test/run-pass/crust-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-call.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,4 +1,4 @@\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "fa28dc7217a237ebe35016279bfa620f7ebfd65a", "filename": "src/test/run-pass/crust-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-stress.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n // This creates a bunch of yielding tasks that run concurrently\n // while holding onto C stacks\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "6d5da38ef31712972cec83dfab5ed4cf7567a8c1", "filename": "src/test/run-pass/crust-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fcrust-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-yield.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,4 +1,4 @@\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_dbg_call(cb: *u8,\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }"}, {"sha": "9fbe930b7f7fa4a8e86a741a997662244d7d8da3", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n \n \n fn test_fn() {\n-    type t = native fn() -> int;\n+    type t = extern fn() -> int;\n     fn ten() -> int { ret 10; }\n     let rs: t = { ten };\n     assert (rs() == 10);"}, {"sha": "7f1a983ce7bc439983346caf8457b0dca1d69db7", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, B>(f: native fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f({|a|fix_help(f, a)}, x);\n }\n \n-fn fix<A, B>(f: native fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret {|a|fix_help(f, a)};\n }\n "}, {"sha": "be9354d015a5aad41cc13f22748e34311b840cc0", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,8 +1,8 @@\n-fn fix_help<A, B: send>(f: native fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A, B: send>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     ret f({|a|fix_help(f, a)}, x);\n }\n \n-fn fix<A, B: send>(f: native fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A, B: send>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     ret {|a|fix_help(f, a)};\n }\n "}, {"sha": "ea1e0ee7e37e550f942e9dae2f821148464437a6", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,7 +3,7 @@ fn f(i: int, &called: bool) {\n     called = true;\n }\n \n-fn g(f: native fn(int, &bool), &called: bool) {\n+fn g(f: extern fn(int, &bool), &called: bool) {\n     f(10, called);\n }\n "}, {"sha": "4ad9b5090cc71d904181a7ef1b66d67c11fe7033", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<T: send>(val: T, f: native fn(T)) {\n+fn spawn<T: send>(val: T, f: extern fn(T)) {\n     f(val);\n }\n "}, {"sha": "bc3eae6e707dc9a8f89aca1893192597e356eb63", "filename": "src/test/run-pass/fn-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-lval.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn foo(f: native fn(int) -> int) { }\n+fn foo(f: extern fn(int) -> int) { }\n \n fn id(x: int) -> int { ret x; }\n "}, {"sha": "ab6a7320e4574b6c7646b976b480dd68533bf395", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,13 +3,13 @@\n \n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n-native mod rustrt1 {\n+extern mod rustrt1 {\n     fn last_os_error() -> str;\n }\n \n #[abi = \"cdecl\"]\n #[link_name = \"rustrt\"]\n-native mod rustrt2 {\n+extern mod rustrt2 {\n     fn last_os_error() -> str;\n }\n ", "previous_filename": "src/test/run-pass/native-dupe.rs"}, {"sha": "46fa8cf97cd3af68e7d999bdb8cdbea1956d0fb7", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -5,7 +5,7 @@ import str;\n \n #[nolink]\n #[abi = \"cdecl\"]\n-native mod libc {\n+extern mod libc {\n     #[link_name = \"strlen\"]\n     fn my_strlen(str: *u8) -> uint;\n }", "previous_filename": "src/test/run-pass/native-fn-linkname.rs"}, {"sha": "99bf3c714f9c1bcaddb070e0759c30a7bacfc890", "filename": "src/test/run-pass/foreign-lib-path.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,11 +1,11 @@\n // xfail-test FIXME I don't know how to test this (#2604)\n // compile-flags:-L.\n-// The -L flag is also used for linking native libraries\n+// The -L flag is also used for linking foreign libraries\n \n // FIXME: I want to name a mod that would not link successfully\n // wouthout providing a -L argument to the compiler, and that\n // will also be found successfully at runtime.\n-native mod WHATGOESHERE {\n+extern mod WHATGOESHERE {\n     fn IDONTKNOW() -> u32;\n }\n ", "previous_filename": "src/test/run-pass/native-lib-path.rs"}, {"sha": "bee820cf3bee9608f99c8df76f3bcf019f818555", "filename": "src/test/run-pass/foreign-mod-src/inner.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-mod-src%2Finner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-mod-src%2Finner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-src%2Finner.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "previous_filename": "src/test/run-pass/native-mod-src/inner.rs"}, {"sha": "fe65719092e18240677e8fd65a992f4d3eae94f0", "filename": "src/test/run-pass/foreign-mod.rc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod.rc?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "previous_filename": "src/test/run-pass/native-mod.rc"}, {"sha": "6b853b7d0d20fe57b032b5678cf895044ba1ea98", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n // ABI is cdecl by default\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn unsupervise();\n }\n ", "previous_filename": "src/test/run-pass/native-no-abi.rs"}, {"sha": "b8ecacaa695968d7fad701a3bb63bbe168cdc524", "filename": "src/test/run-pass/foreign-src/foreign.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-src%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-src%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-src%2Fforeign.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -0,0 +1,9 @@\n+\n+\n+\n+// -*- rust -*-\n+fn main() {\n+    libc.puts(rustrt.str_buf(\"hello, extern world 1\"));\n+    libc.puts(rustrt.str_buf(\"hello, extern world 2\"));\n+    libc.puts(rustrt.str_buf(\"hello, extern world 3\"));\n+}"}, {"sha": "f88f47dd981b0f61fe152ec2ced1d51c13e7410c", "filename": "src/test/run-pass/foreign-struct.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-struct.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -4,7 +4,7 @@\n enum void { }\n \n #[nolink]\n-native mod bindgen {\n+extern mod bindgen {\n     fn printf(++v: void);\n }\n ", "previous_filename": "src/test/run-pass/native-struct.rs"}, {"sha": "18993397002b354a6cf0304ef34fd0f3979026e7", "filename": "src/test/run-pass/foreign.rc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign.rc", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign.rc?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "previous_filename": "src/test/run-pass/native.rc"}, {"sha": "b801051d4f686a3e5d8dbd6870d89e221bd70896", "filename": "src/test/run-pass/foreign2.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,27 +1,27 @@\n \n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn unsupervise();\n }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-native mod bar { }\n+extern mod bar { }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-native mod zed { }\n+extern mod zed { }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn write(fd: int, buf: *u8,\n              count: core::libc::size_t) -> core::libc::ssize_t;\n }\n \n #[abi = \"cdecl\"]\n #[nolink]\n-native mod baz { }\n+extern mod baz { }\n \n fn main(args: ~[str]) { }", "previous_filename": "src/test/run-pass/native2.rs"}, {"sha": "e89378fe1b5ecf58d72a772d16098ac134b7e177", "filename": "src/test/run-pass/fun-indirect-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -5,7 +5,7 @@\n fn f() -> int { ret 42; }\n \n fn main() {\n-    let g: native fn() -> int = f;\n+    let g: extern fn() -> int = f;\n     let i: int = g();\n     assert (i == 42);\n }"}, {"sha": "29a1a4482f78236e75d328448d7b043e16202533", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -4,13 +4,13 @@ fn mk() -> int { ret 1; }\n \n fn chk(&&a: int) { log(debug, a); assert (a == 1); }\n \n-fn apply<T>(produce: native fn() -> T,\n-            consume: native fn(T)) {\n+fn apply<T>(produce: extern fn() -> T,\n+            consume: extern fn(T)) {\n     consume(produce());\n }\n \n fn main() {\n-    let produce: native fn() -> int = mk;\n-    let consume: native fn(&&int) = chk;\n+    let produce: extern fn() -> int = mk;\n+    let consume: extern fn(&&int) = chk;\n     apply::<int>(produce, consume);\n }"}, {"sha": "212a6febef5b9abb3715f35037207fb10228116c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -29,7 +29,7 @@ mod map_reduce {\n \n     type putter = fn@(str, str);\n \n-    type mapper = native fn(str, putter);\n+    type mapper = extern fn(str, putter);\n \n     enum ctrl_proto { find_reducer(~[u8], chan<int>), mapper_done, }\n "}, {"sha": "51cd4ea49846bcecc2efafa02f146980b4abd1d8", "filename": "src/test/run-pass/import-from-foreign.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -4,7 +4,7 @@ mod spam {\n }\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     import spam::{ham, eggs};\n     export ham;\n     export eggs;", "previous_filename": "src/test/run-pass/import-from-native.rs"}, {"sha": "6415836988b7bcc4665dc8c432ac838fe0078e00", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -22,7 +22,7 @@ mod a2 {\n     //   |   |   |\n     #[abi = \"cdecl\"]\n     #[nolink]\n-    native mod b1 {\n+    extern mod b1 {\n         //   |   |   |\n         import a1::b2::*;\n         //   | <-/  -/"}, {"sha": "d379693de8cf1c9f031586c6aebcb6d2e883e85e", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,7 +1,7 @@\n // xfail-fast Does not work with main in a submodule\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }"}, {"sha": "5170e5b407ba19bd05e2f847e4bd3214289ec8ec", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn atomic_xchng(&dst: int, src: int) -> int;\n     fn atomic_xchng_acq(&dst: int, src: int) -> int;\n     fn atomic_xchng_rel(&dst: int, src: int) -> int;"}, {"sha": "31ea745d162d13c0761f385ac75c32a388e73e51", "filename": "src/test/run-pass/intrinsic-frame-address.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-frame-address.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn frame_address(f: fn(*u8));\n }\n "}, {"sha": "80dcf2a4199823d125f2a99225c4474de80dbbce", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn move_val_init<T>(&dst: T, -src: T);\n     fn move_val<T>(&dst: T, -src: T);\n }"}, {"sha": "0a73daa234d54bf199c0e0a7610e89b72667becd", "filename": "src/test/run-pass/issue-1251.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1251.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n #[link(name = \"unsupervise\")];\n \n-native mod rustrt {\n+extern mod rustrt {\n       fn unsupervise();\n }\n "}, {"sha": "c7219fbc2d945410cc3e30a230918216e2bed219", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,14 +1,14 @@\n // xfail-test\n mod a {\n     type rust_task = uint;\n-    native mod rustrt {\n+    extern mod rustrt {\n         fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     }\n }\n \n mod b {\n     type rust_task = bool;\n-    native mod rustrt {\n+    extern mod rustrt {\n         fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     }\n }"}, {"sha": "7847ef3c8e0a563c29253cba89042e9ae7915bc4", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -7,7 +7,7 @@ fn lgamma(n: c_double, value: &mut int) -> c_double {\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-native mod m {\n+extern mod m {\n     #[cfg(unix)]\n     #[link_name=\"lgamma_r\"] fn lgamma(n: c_double, sign: &mut c_int)\n       -> c_double;"}, {"sha": "1c73de5b0c880dc382c8f65ff247b60041b5a422", "filename": "src/test/run-pass/issue-506.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fissue-506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-506.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -6,7 +6,7 @@ use std;\n import task;\n \n #[abi = \"cdecl\"]\n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_task_allow_kill();\n }\n "}, {"sha": "bcb70aba648a0ffd324142b8b01f830d89a67abf", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -30,7 +30,7 @@ mod test_single_attr_outer {\n \n     #[attr = \"val\"]\n     #[abi = \"cdecl\"]\n-    native mod rustrt { }\n+    extern mod rustrt { }\n }\n \n mod test_multi_attr_outer {\n@@ -50,7 +50,7 @@ mod test_multi_attr_outer {\n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n     #[abi = \"cdecl\"]\n-    native mod rustrt { }\n+    extern mod rustrt { }\n \n     #[attr1 = \"val\"]\n     #[attr2 = \"val\"]\n@@ -74,7 +74,7 @@ mod test_stmt_single_attr_outer {\n \n         #[attr = \"val\"]\n         #[abi = \"cdecl\"]\n-        native mod rustrt {\n+        extern mod rustrt {\n         }\n         */\n     }\n@@ -101,7 +101,7 @@ mod test_stmt_multi_attr_outer {\n         #[attr1 = \"val\"]\n         #[attr2 = \"val\"]\n         #[abi = \"cdecl\"]\n-        native mod rustrt {\n+        extern mod rustrt {\n         }\n         */\n     }\n@@ -159,7 +159,7 @@ mod test_other_forms {\n \n mod test_foreign_items {\n     #[abi = \"cdecl\"]\n-    native mod rustrt {\n+    extern mod rustrt {\n         #[attr];\n \n         #[attr]"}, {"sha": "69a904e00cdd8d14481c14e92418335bf4efeb83", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -5,7 +5,7 @@ use std;\n import task;\n import std::rand;\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn debug_get_stk_seg() -> *u8;\n \n     fn unsupervise();"}, {"sha": "164c55d0e9fd3dab67faf2c2d68254a46e66cdab", "filename": "src/test/run-pass/native-src/native.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7259195caff1fdcce6266e6ecf51c0fd614e041f/src%2Ftest%2Frun-pass%2Fnative-src%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7259195caff1fdcce6266e6ecf51c0fd614e041f/src%2Ftest%2Frun-pass%2Fnative-src%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-src%2Fnative.rs?ref=7259195caff1fdcce6266e6ecf51c0fd614e041f", "patch": "@@ -1,9 +0,0 @@\n-\n-\n-\n-// -*- rust -*-\n-fn main() {\n-    libc.puts(rustrt.str_buf(\"hello, native world 1\"));\n-    libc.puts(rustrt.str_buf(\"hello, native world 2\"));\n-    libc.puts(rustrt.str_buf(\"hello, native world 3\"));\n-}"}, {"sha": "f6a9be124f309891291bd2e61cc4ac03a2ac5620", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,4 +1,4 @@\n-enum mytype = {compute: native fn(mytype) -> int, val: int};\n+enum mytype = {compute: extern fn(mytype) -> int, val: int};\n \n fn compute(i: mytype) -> int { ret i.val + 20; }\n "}, {"sha": "b35b81b11e217f95e89546e4dff43fc6f5d20532", "filename": "src/test/run-pass/nil-decl-in-foreign.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnil-decl-in-foreign.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n // Issue #901\n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn printf(x: ());\n }\n fn main() { }\n\\ No newline at end of file", "previous_filename": "src/test/run-pass/nil-decl-in-native.rs"}, {"sha": "3f109d78e521454e86e04fc4f359559b8c9fa627", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n // Issue #2303\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }"}, {"sha": "2476cf7d8183aa7ea04444690094929d79254efb", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n // Issue #2303\n \n #[abi = \"rust-intrinsic\"]\n-native mod rusti {\n+extern mod rusti {\n     fn pref_align_of<T>() -> uint;\n     fn min_align_of<T>() -> uint;\n }"}, {"sha": "21fe5461789c27ae8542d112269d4b15a8ec67a3", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,6 +1,6 @@\n class finish<T: copy> {\n-  let arg: {val: T, fin: native fn(T)};\n-  new(arg: {val: T, fin: native fn(T)}) {\n+  let arg: {val: T, fin: extern fn(T)};\n+  new(arg: {val: T, fin: extern fn(T)}) {\n     self.arg = arg;\n   }\n   drop { self.arg.fin(self.arg.val); }"}, {"sha": "a30b1964bda550add718fc3153d02b54ba5e3fd3", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -8,7 +8,7 @@ type task_id = *libc::c_void;\n type task = *libc::c_void;\n type closure = *libc::c_void;\n \n-native mod rustrt {\n+extern mod rustrt {\n     fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n     fn rust_get_sched_id() -> sched_id;\n     fn rust_new_task_in_sched(id: sched_id) -> task_id;"}, {"sha": "bc8ecd7047a468c0697655b72a793e66e2cf8946", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -23,7 +23,7 @@ fn test05_start(&&f: fn~(&&float, &&str) -> pair<float, str>) {\n     assert q.b == \"Ho\";\n }\n \n-fn spawn<A: copy, B: copy>(f: native fn(fn~(A,B)->pair<A,B>)) {\n+fn spawn<A: copy, B: copy>(f: extern fn(fn~(A,B)->pair<A,B>)) {\n     let arg = fn~(a: A, b: B) -> pair<A,B> {\n         ret make_generic_record(a, b);\n     };"}, {"sha": "34108f30f2dd415cf590d31b714df8493d9253ef", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@ type quad = { a: u64, b: u64, c: u64, d: u64 };\n type floats = { a: f64, b: u8, c: f64 };\n \n #[nolink]\n-native mod rustrt {\n+extern mod rustrt {\n     fn debug_abi_1(++q: quad) -> quad;\n     fn debug_abi_2(++f: floats) -> floats;\n }"}, {"sha": "c2d38c67aaf5aa82ead4a014cc8b600a9d9ae852", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -6,13 +6,13 @@ fn checktrue(rs: bool) -> bool { assert (rs); ret true; }\n \n fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n-fn evenk(n: int, k: native fn(bool) -> bool) -> bool {\n+fn evenk(n: int, k: extern fn(bool) -> bool) -> bool {\n     #debug(\"evenk\");\n     log(debug, n);\n     if n == 0 { ret k(true); } else { ret oddk(n - 1, k); }\n }\n \n-fn oddk(n: int, k: native fn(bool) -> bool) -> bool {\n+fn oddk(n: int, k: extern fn(bool) -> bool) -> bool {\n     #debug(\"oddk\");\n     log(debug, n);\n     if n == 0 { ret k(false); } else { ret evenk(n - 1, k); }"}, {"sha": "a2afde8d73f32b9eb39c13c0ffc2c0e513c1a895", "filename": "src/test/run-pass/type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ftype-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ftype-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -1,5 +1,5 @@\n \n \n-type lteq<T> = native fn(T) -> bool;\n+type lteq<T> = extern fn(T) -> bool;\n \n fn main(args: ~[str]) { }"}, {"sha": "bbaafa6770de528b5b1d79baa0e9375e5fa8caaf", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -5,7 +5,7 @@ fn range(lo: uint, hi: uint, it: fn(uint)) {\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }\n \n-fn create_index<T>(index: ~[{a: T, b: uint}], hash_fn: native fn(T) -> uint) {\n+fn create_index<T>(index: ~[{a: T, b: uint}], hash_fn: extern fn(T) -> uint) {\n     range(0u, 256u, |_i| { let bucket: ~[T] = ~[]; } )\n }\n "}, {"sha": "1ce376f07a4b0f180cbb728312e23f6c4545e5ef", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -3,7 +3,7 @@\n #[warn(no_ctypes)];\n \n #[nolink]\n-native mod libc {\n+extern mod libc {\n     fn malloc(size: int) -> *u8;\n }\n "}, {"sha": "3185080103410b4552554db05bd40335b9780504", "filename": "src/test/run-pass/x86stdcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fx86stdcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -2,7 +2,7 @@\n // xfail-test\n \n #[cfg(target_os = \"win32\")]\n-native \"stdcall\" mod kernel32 {\n+extern \"stdcall\" mod kernel32 {\n     fn SetLastError(err: uint);\n     fn GetLastError() -> uint;\n }"}, {"sha": "423bafae452393539f608deb593a877eff3f7404", "filename": "src/test/run-pass/x86stdcall2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/debb7e4641af2ea71cf8733b3f071d614803dcbd/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fx86stdcall2.rs?ref=debb7e4641af2ea71cf8733b3f071d614803dcbd", "patch": "@@ -6,7 +6,7 @@ type BOOL = u8;\n \n #[cfg(target_os = \"win32\")]\n #[abi = \"stdcall\"]\n-native mod kernel32 {\n+extern mod kernel32 {\n        fn GetProcessHeap() -> HANDLE;\n        fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n        fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;"}]}