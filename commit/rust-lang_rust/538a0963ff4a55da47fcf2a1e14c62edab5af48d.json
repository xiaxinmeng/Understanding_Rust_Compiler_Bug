{"sha": "538a0963ff4a55da47fcf2a1e14c62edab5af48d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOGEwOTYzZmY0YTU1ZGE0N2ZjZjJhMWUxNGM2MmVkYWI1YWY0OGQ=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-04T23:12:45Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-04T23:12:45Z"}, "message": "Add as_slice() to slice::IterMut and vec::Drain\n\nIn bluss/indexmap#88, we found that there was no easy way to implement\n`Debug` for our `IterMut` and `Drain` iterators. Those are built on\n`slice::IterMut` and `vec::Drain`, which implement `Debug` themselves,\nbut have no other way to access their data. With a new `as_slice()`\nmethod, we can read the data and customize its presentation.", "tree": {"sha": "4591fdc1ab918bebaef703d2b2b80237ab07c97a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4591fdc1ab918bebaef703d2b2b80237ab07c97a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/538a0963ff4a55da47fcf2a1e14c62edab5af48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/538a0963ff4a55da47fcf2a1e14c62edab5af48d", "html_url": "https://github.com/rust-lang/rust/commit/538a0963ff4a55da47fcf2a1e14c62edab5af48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/538a0963ff4a55da47fcf2a1e14c62edab5af48d/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9da8fc9c267c08cfdb8cf5b39da14f154d12939", "html_url": "https://github.com/rust-lang/rust/commit/a9da8fc9c267c08cfdb8cf5b39da14f154d12939"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "7c3cab77bfbbf94f9fd450676fe8b5185ce3225a", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/538a0963ff4a55da47fcf2a1e14c62edab5af48d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538a0963ff4a55da47fcf2a1e14c62edab5af48d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=538a0963ff4a55da47fcf2a1e14c62edab5af48d", "patch": "@@ -2468,6 +2468,25 @@ impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n     }\n }\n \n+impl<'a, T> Drain<'a, T> {\n+    /// Returns the remaining items of this iterator as a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(vec_drain_as_slice)]\n+    /// let mut vec = vec!['a', 'b', 'c'];\n+    /// let mut drain = vec.drain(..);\n+    /// assert_eq!(drain.as_slice(), &['a', 'b', 'c']);\n+    /// let _ = drain.next().unwrap();\n+    /// assert_eq!(drain.as_slice(), &['b', 'c']);\n+    /// ```\n+    #[unstable(feature = \"vec_drain_as_slice\", reason = \"recently added\", issue = \"0\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self.iter.as_slice()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<T: Sync> Sync for Drain<'_, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "b48101c23dad72816dd30a11a31b40754171059b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/538a0963ff4a55da47fcf2a1e14c62edab5af48d/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538a0963ff4a55da47fcf2a1e14c62edab5af48d/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=538a0963ff4a55da47fcf2a1e14c62edab5af48d", "patch": "@@ -3288,6 +3288,38 @@ impl<'a, T> IterMut<'a, T> {\n     pub fn into_slice(self) -> &'a mut [T] {\n         unsafe { from_raw_parts_mut(self.ptr, len!(self)) }\n     }\n+\n+    /// Views the underlying data as a subslice of the original data.\n+    ///\n+    /// To avoid creating `&mut` references that alias, this has a\n+    /// borrowed lifetime from the iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(slice_iter_mut_as_slice)]\n+    /// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n+    /// // struct (&[usize here]):\n+    /// let mut slice = &mut [1, 2, 3];\n+    ///\n+    /// // Then, we get the iterator:\n+    /// let mut iter = slice.iter_mut();\n+    /// // So if we print what `as_slice` method returns here, we have \"[1, 2, 3]\":\n+    /// println!(\"{:?}\", iter.as_slice());\n+    /// assert_eq!(iter.as_slice(), &[1, 2, 3]);\n+    ///\n+    /// // Next, we move to the second element of the slice:\n+    /// iter.next();\n+    /// // Now `as_slice` returns \"[2, 3]\":\n+    /// println!(\"{:?}\", iter.as_slice());\n+    /// assert_eq!(iter.as_slice(), &[2, 3]);\n+    /// ```\n+    #[unstable(feature = \"slice_iter_mut_as_slice\", reason = \"recently added\", issue = \"0\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self.make_slice()\n+    }\n }\n \n iterator!{struct IterMut -> *mut T, &'a mut T, mut, {mut}, {}}"}]}