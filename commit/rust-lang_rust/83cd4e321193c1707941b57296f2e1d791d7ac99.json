{"sha": "83cd4e321193c1707941b57296f2e1d791d7ac99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzY2Q0ZTMyMTE5M2MxNzA3OTQxYjU3Mjk2ZjJlMWQ3OTFkN2FjOTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T20:56:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T20:56:27Z"}, "message": "Rollup merge of #63537 - petrochenkov:novisit, r=alexcrichton\n\nexpand: Unimplement `MutVisitor` on `MacroExpander`\n\nEach call to `fully_expand_fragment` is something unique, interesting, and requiring attention.\nIt represents a \"root\" of expansion and its use means that something unusual is happening, like eager expansion or expansion performed outside of the primary expansion pass.\nSo, it shouldn't hide under a generic visitor call.\n\nAlso, from all the implemented visitor methods only two were actually used.\n\ncc https://github.com/rust-lang/rust/pull/63468#discussion_r313504119", "tree": {"sha": "a221795598359cf456bb2ca4e54ddd439be49785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a221795598359cf456bb2ca4e54ddd439be49785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83cd4e321193c1707941b57296f2e1d791d7ac99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVHV7CRBK7hj4Ov3rIwAAdHIIAHtx8Efh5mtsqRprQ2Cs6BDl\nmMrU00IID9F0n8Y0uXH5FesRClSMw+ENNXC0fMfE2pRcavwhdW2VGAW49mv8A0nr\n5d8TxbvnhAqqI50Qhg8YWo3gS9ZXOiC4FnJbCFzTuZj1Myw34Gob5+SPVoDk3GxT\nVFhoymDEYPLXwnskPERWrIgcfhX3+OL9LQ1M6j6UqL1WiWZL9KMjBJQmePNQr4UY\nQSB/bKXLWyWhmqf5eNWQ289HV5AM2OBET5qzOBb5dvf+pKAZMP5ronTZCbnIqtmI\n4VwwHIlear1YXKjrGvBQ3WowZQLldfzBUl63G/Zu6eQpELkjnosEGQSzgu2DukI=\n=THwc\n-----END PGP SIGNATURE-----\n", "payload": "tree a221795598359cf456bb2ca4e54ddd439be49785\nparent 409df9b530d0aaac7e0de5cfb652d847eedeae30\nparent d416ebeb6ee265c980778df9bc4d84dc4a7b8580\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565816187 +0200\ncommitter GitHub <noreply@github.com> 1565816187 +0200\n\nRollup merge of #63537 - petrochenkov:novisit, r=alexcrichton\n\nexpand: Unimplement `MutVisitor` on `MacroExpander`\n\nEach call to `fully_expand_fragment` is something unique, interesting, and requiring attention.\nIt represents a \"root\" of expansion and its use means that something unusual is happening, like eager expansion or expansion performed outside of the primary expansion pass.\nSo, it shouldn't hide under a generic visitor call.\n\nAlso, from all the implemented visitor methods only two were actually used.\n\ncc https://github.com/rust-lang/rust/pull/63468#discussion_r313504119\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83cd4e321193c1707941b57296f2e1d791d7ac99", "html_url": "https://github.com/rust-lang/rust/commit/83cd4e321193c1707941b57296f2e1d791d7ac99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83cd4e321193c1707941b57296f2e1d791d7ac99/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409df9b530d0aaac7e0de5cfb652d847eedeae30", "url": "https://api.github.com/repos/rust-lang/rust/commits/409df9b530d0aaac7e0de5cfb652d847eedeae30", "html_url": "https://github.com/rust-lang/rust/commit/409df9b530d0aaac7e0de5cfb652d847eedeae30"}, {"sha": "d416ebeb6ee265c980778df9bc4d84dc4a7b8580", "url": "https://api.github.com/repos/rust-lang/rust/commits/d416ebeb6ee265c980778df9bc4d84dc4a7b8580", "html_url": "https://github.com/rust-lang/rust/commit/d416ebeb6ee265c980778df9bc4d84dc4a7b8580"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "6886b4bf4211195855c409b5de572aaca0a80e89", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=83cd4e321193c1707941b57296f2e1d791d7ac99", "patch": "@@ -920,8 +920,10 @@ pub fn expr_to_spanned_string<'a>(\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     expr.span = expr.span.apply_mark(cx.current_expansion.id);\n \n-    // we want to be able to handle e.g., `concat!(\"foo\", \"bar\")`\n-    cx.expander().visit_expr(&mut expr);\n+    // Perform eager expansion on the expression.\n+    // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n+    let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();\n+\n     Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n             ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n@@ -986,8 +988,12 @@ pub fn get_exprs_from_tts(cx: &mut ExtCtxt<'_>,\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {\n-        let mut expr = panictry!(p.parse_expr());\n-        cx.expander().visit_expr(&mut expr);\n+        let expr = panictry!(p.parse_expr());\n+\n+        // Perform eager expansion on the expression.\n+        // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`.\n+        let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();\n+\n         es.push(expr);\n         if p.eat(&token::Comma) {\n             continue;"}, {"sha": "402b42dfbc80d29f26986bb4bc0a0eda5311d9e5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=83cd4e321193c1707941b57296f2e1d791d7ac99", "patch": "@@ -116,18 +116,6 @@ macro_rules! ast_fragments {\n             }\n         }\n \n-        impl<'a, 'b> MutVisitor for MacroExpander<'a, 'b> {\n-            fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n-                self.expand_fragment(AstFragment::OptExpr(Some(expr))).make_opt_expr()\n-            }\n-            $($(fn $mut_visit_ast(&mut self, ast: &mut $AstTy) {\n-                visit_clobber(ast, |ast| self.expand_fragment(AstFragment::$Kind(ast)).$make_ast());\n-            })?)*\n-            $($(fn $flat_map_ast_elt(&mut self, ast_elt: <$AstTy as IntoIterator>::Item) -> $AstTy {\n-                self.expand_fragment(AstFragment::$Kind(smallvec![ast_elt])).$make_ast()\n-            })?)*\n-        }\n-\n         impl<'a> MacResult for crate::ext::tt::macro_rules::ParserAnyMacro<'a> {\n             $(fn $make_ast(self: Box<crate::ext::tt::macro_rules::ParserAnyMacro<'a>>)\n                            -> Option<$AstTy> {\n@@ -265,7 +253,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             tokens: None,\n         })]);\n \n-        match self.expand_fragment(krate_item).make_items().pop().map(P::into_inner) {\n+        match self.fully_expand_fragment(krate_item).make_items().pop().map(P::into_inner) {\n             Some(ast::Item { attrs, node: ast::ItemKind::Mod(module), .. }) => {\n                 krate.attrs = attrs;\n                 krate.module = module;\n@@ -285,8 +273,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         krate\n     }\n \n-    // Fully expand all macro invocations in this AST fragment.\n-    fn expand_fragment(&mut self, input_fragment: AstFragment) -> AstFragment {\n+    // Recursively expand all macro invocations in this AST fragment.\n+    pub fn fully_expand_fragment(&mut self, input_fragment: AstFragment) -> AstFragment {\n         let orig_expansion_data = self.cx.current_expansion.clone();\n         self.cx.current_expansion.depth = 0;\n "}, {"sha": "70325539f301f4550698a4e58f126ab293775d90", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=83cd4e321193c1707941b57296f2e1d791d7ac99", "patch": "@@ -1,18 +1,17 @@\n use std::mem;\n \n+use smallvec::smallvec;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::source_map::{ExpnInfo, ExpnKind, respan};\n use syntax::ext::base::{ExtCtxt, MacroKind};\n-use syntax::ext::expand::ExpansionConfig;\n+use syntax::ext::expand::{AstFragment, ExpansionConfig};\n use syntax::ext::hygiene::ExpnId;\n use syntax::ext::proc_macro::is_proc_macro_attr;\n-use syntax::mut_visit::MutVisitor;\n use syntax::parse::ParseSess;\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym};\n use syntax::visit::{self, Visitor};\n-\n use syntax_pos::{Span, DUMMY_SP};\n \n struct ProcMacroDerive {\n@@ -409,5 +408,7 @@ fn mk_decls(\n         i\n     });\n \n-    cx.monotonic_expander().flat_map_item(module).pop().unwrap()\n+    // Integrate the new module into existing module structures.\n+    let module = AstFragment::Items(smallvec![module]);\n+    cx.monotonic_expander().fully_expand_fragment(module).make_items().pop().unwrap()\n }"}, {"sha": "0267637e5406222d245613be1a1ec6921351f187", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83cd4e321193c1707941b57296f2e1d791d7ac99/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=83cd4e321193c1707941b57296f2e1d791d7ac99", "patch": "@@ -6,7 +6,7 @@ use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n use syntax::ext::base::{ExtCtxt, Resolver};\n-use syntax::ext::expand::ExpansionConfig;\n+use syntax::ext::expand::{AstFragment, ExpansionConfig};\n use syntax::ext::hygiene::{ExpnId, MacroKind};\n use syntax::feature_gate::Features;\n use syntax::mut_visit::{*, ExpectOne};\n@@ -74,12 +74,7 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n         noop_visit_crate(c, self);\n \n         // Create a main function to run our tests\n-        let test_main = {\n-            let unresolved = mk_main(&mut self.cx);\n-            self.cx.ext_cx.monotonic_expander().flat_map_item(unresolved).pop().unwrap()\n-        };\n-\n-        c.module.items.push(test_main);\n+        c.module.items.push(mk_main(&mut self.cx));\n     }\n \n     fn flat_map_item(&mut self, i: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n@@ -216,17 +211,22 @@ fn mk_reexport_mod(cx: &mut TestCtxt<'_>,\n     let name = Ident::from_str(\"__test_reexports\").gensym();\n     let parent = if parent == ast::DUMMY_NODE_ID { ast::CRATE_NODE_ID } else { parent };\n     cx.ext_cx.current_expansion.id = cx.ext_cx.resolver.get_module_scope(parent);\n-    let it = cx.ext_cx.monotonic_expander().flat_map_item(P(ast::Item {\n+    let module = P(ast::Item {\n         ident: name,\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ItemKind::Mod(reexport_mod),\n         vis: dummy_spanned(ast::VisibilityKind::Public),\n         span: DUMMY_SP,\n         tokens: None,\n-    })).pop().unwrap();\n+    });\n \n-    (it, name)\n+    // Integrate the new module into existing module structures.\n+    let module = AstFragment::Items(smallvec![module]);\n+    let module =\n+        cx.ext_cx.monotonic_expander().fully_expand_fragment(module).make_items().pop().unwrap();\n+\n+    (module, name)\n }\n \n /// Crawl over the crate, inserting test reexports and the test main function\n@@ -321,16 +321,19 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n         None => Ident::from_str_and_span(\"main\", sp).gensym(),\n     };\n \n-    P(ast::Item {\n+    let main = P(ast::Item {\n         ident: main_id,\n         attrs: vec![main_attr],\n         id: ast::DUMMY_NODE_ID,\n         node: main,\n         vis: dummy_spanned(ast::VisibilityKind::Public),\n         span: sp,\n         tokens: None,\n-    })\n+    });\n \n+    // Integrate the new item into existing module structures.\n+    let main = AstFragment::Items(smallvec![main]);\n+    cx.ext_cx.monotonic_expander().fully_expand_fragment(main).make_items().pop().unwrap()\n }\n \n fn path_name_i(idents: &[Ident]) -> String {"}]}