{"sha": "aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZjliY2U5MDU1MGIxYzBhNzI2ZmJmNDJiZDMxN2RjMmZmOGU2ZWQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2017-05-29T22:11:08Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2017-06-17T16:23:37Z"}, "message": "Fix spans in `doc_markdown` in most cases", "tree": {"sha": "4244182e577332a1d9ebe1cf31b9e75b90b941c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4244182e577332a1d9ebe1cf31b9e75b90b941c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed", "html_url": "https://github.com/rust-lang/rust/commit/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2ef1b318d72909d029910389abeabbf13547f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ef1b318d72909d029910389abeabbf13547f01", "html_url": "https://github.com/rust-lang/rust/commit/d2ef1b318d72909d029910389abeabbf13547f01"}], "stats": {"total": 58, "additions": 24, "deletions": 34}, "files": [{"sha": "ed6b3a978a6f8fb937b895c037e9c1e1184707a6", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed", "patch": "@@ -3,7 +3,8 @@ use pulldown_cmark;\n use rustc::lint::*;\n use syntax::ast;\n use syntax::codemap::{Span, BytePos};\n-use utils::span_lint;\n+use syntax_pos::Pos;\n+use utils::{span_lint, snippet_opt};\n \n /// **What it does:** Checks for the presence of `_`, `::` or camel-case words\n /// outside ticks in documentation.\n@@ -134,7 +135,6 @@ pub fn check_attrs<'a>(cx: &EarlyContext, valid_idents: &[String], attrs: &'a [a\n         current += offset_copy;\n     }\n \n-    println!(\"{:?}\", spans);\n     if !doc.is_empty() {\n         let parser = Parser::new(pulldown_cmark::Parser::new(&doc));\n         let parser = parser.coalesce(|x, y| {\n@@ -163,6 +163,7 @@ fn check_doc<'a, Events: Iterator<Item=(usize, pulldown_cmark::Event<'a>)>>(\n \n     let mut in_code = false;\n \n+    println!(\"{:?}\", spans);\n     for (offset, event) in docs {\n         println!(\"{:?}, {:?}\", offset, event);\n         match event {\n@@ -180,7 +181,17 @@ fn check_doc<'a, Events: Iterator<Item=(usize, pulldown_cmark::Event<'a>)>>(\n                         Err(e) => e-1,\n                     };\n \n-                    let (_, span) = spans[index];\n+                    let (begin, span) = spans[index];\n+\n+                    println!(\"raw: {:?}, {}, {}, {:?}\", snippet_opt(cx, span), offset, begin, span);\n+\n+                    // Adjust for the begining of the current `Event`\n+                    let span = Span {\n+                        lo: span.lo + BytePos::from_usize(offset - begin),\n+                        ..span\n+                    };\n+\n+                    println!(\"adjusted: {:?}\", snippet_opt(cx, span));\n                     check_text(cx, valid_idents, &text, span);\n                 }\n             },\n@@ -199,6 +210,14 @@ fn check_text(cx: &EarlyContext, valid_idents: &[String], text: &str, span: Span\n             continue;\n         }\n \n+        // Adjust for the current word\n+        let offset = word.as_ptr() as usize - text.as_ptr() as usize;\n+        let span = Span {\n+            lo: span.lo + BytePos::from_usize(offset),\n+            hi: span.lo + BytePos::from_usize(offset + word.len()),\n+            ..span\n+        };\n+\n         check_word(cx, word, span);\n     }\n }"}, {"sha": "09dfe48b2e5f930ea6e4c6ebea05214ab5dcd643", "filename": "clippy_tests/examples/doc.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed/clippy_tests%2Fexamples%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed/clippy_tests%2Fexamples%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_tests%2Fexamples%2Fdoc.rs?ref=aaf9bce90550b1c0a726fbf42bd317dc2ff8e6ed", "patch": "@@ -2,13 +2,13 @@\n \n #![feature(plugin)]\n #![plugin(clippy)]\n-\n+#![allow(dead_code)]\n #![warn(doc_markdown)]\n \n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n /// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n /// which should be reported only once despite being __doubly bad__.\n-/// Here be ::is::a::global:path.\n+/// Here be ::a::global:path.\n /// That's not code ~NotInCodeBlock~.\n /// be_sure_we_got_to_the_end_of_it\n fn foo_bar() {\n@@ -49,35 +49,6 @@ fn test_emphasis() {\n fn test_units() {\n }\n \n-/// This one checks we don\u2019t try to split unicode codepoints\n-/// `\u00df`\n-/// `\u211d`\n-/// `\ud83d\udca3`\n-/// `\u2764\ufe0f`\n-/// \u00df_foo\n-/// \u211d_foo\n-/// \ud83d\udca3_foo\n-/// \u2764\ufe0f_foo\n-/// foo_\u00df\n-/// foo_\u211d\n-/// foo_\ud83d\udca3\n-/// foo_\u2764\ufe0f\n-/// [\u00dfdummy text\u00df][foo_1\u00df]\n-/// [\u211ddummy text\u211d][foo_2\u211d]\n-/// [\ud83d\udca3dummy tex\ud83d\udca3t][foo3_\ud83d\udca3]\n-/// [\u2764\ufe0fdummy text\u2764\ufe0f][foo_4\u2764\ufe0f]\n-/// [\u00dfdummy text\u00df](foo_5\u00df)\n-/// [\u211ddummy text\u211d](foo_6\u211d)\n-/// [\ud83d\udca3dummy tex\ud83d\udca3t](fo7o_\ud83d\udca3)\n-/// [\u2764\ufe0fdummy text\u2764\ufe0f](foo_8\u2764\ufe0f)\n-/// [foo1_\u00df]: dummy text\n-/// [foo2_\u211d]: dummy text\n-/// [foo3_\ud83d\udca3]: dummy text\n-/// [foo4_\u2764\ufe0f]: dummy text\n-/// be_sure_we_got_to_the_end_of_it\n-fn test_unicode() {\n-}\n-\n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n /// See also [the issue tracker](https://github.com/Manishearth/rust-clippy/search?q=doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link]."}]}