{"sha": "0a8c30a96fe09047da07a8e2980baa47a334a3d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOGMzMGE5NmZlMDkwNDdkYTA3YThlMjk4MGJhYTQ3YTMzNGEzZDc=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-06-01T20:29:07Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-06-01T20:32:05Z"}, "message": "internal: implement pattern adjustments.", "tree": {"sha": "f2c866fb519a6df6b03181f43d072716573c9ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2c866fb519a6df6b03181f43d072716573c9ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8c30a96fe09047da07a8e2980baa47a334a3d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8c30a96fe09047da07a8e2980baa47a334a3d7", "html_url": "https://github.com/rust-lang/rust/commit/0a8c30a96fe09047da07a8e2980baa47a334a3d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8c30a96fe09047da07a8e2980baa47a334a3d7/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99516bbd67a0018c3c0bf94cb895896857d4263c", "url": "https://api.github.com/repos/rust-lang/rust/commits/99516bbd67a0018c3c0bf94cb895896857d4263c", "html_url": "https://github.com/rust-lang/rust/commit/99516bbd67a0018c3c0bf94cb895896857d4263c"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "c8e1b23deeec40fb7bc78d70a052ef13282492dd", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a8c30a96fe09047da07a8e2980baa47a334a3d7/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8c30a96fe09047da07a8e2980baa47a334a3d7/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=0a8c30a96fe09047da07a8e2980baa47a334a3d7", "patch": "@@ -100,10 +100,19 @@ impl<'a> PatCtxt<'a> {\n     }\n \n     pub(crate) fn lower_pattern(&mut self, pat: hir_def::expr::PatId) -> Pat {\n-        // FIXME: implement pattern adjustments (implicit pattern dereference; \"RFC 2005-match-ergonomics\")\n+        // XXX(iDawer): Collecting pattern adjustments feels imprecise to me.\n+        // When lowering of & and box patterns are implemented this should be tested\n+        // in a manner of `match_ergonomics_issue_9095` test.\n+        // Pattern adjustment is part of RFC 2005-match-ergonomics.\n         // More info https://github.com/rust-lang/rust/issues/42640#issuecomment-313535089\n         let unadjusted_pat = self.lower_pattern_unadjusted(pat);\n-        unadjusted_pat\n+        self.infer.pat_adjustments.get(&pat).map(|it| &**it).unwrap_or_default().iter().rev().fold(\n+            unadjusted_pat,\n+            |subpattern, ref_ty| Pat {\n+                ty: ref_ty.clone(),\n+                kind: Box::new(PatKind::Deref { subpattern }),\n+            },\n+        )\n     }\n \n     fn lower_pattern_unadjusted(&mut self, pat: hir_def::expr::PatId) -> Pat {\n@@ -1236,6 +1245,21 @@ fn main(f: Foo) {\n         );\n     }\n \n+    #[test]\n+    fn match_ergonomics_issue_9095() {\n+        check_diagnostics(\n+            r#\"\n+enum Foo<T> { A(T) }\n+fn main() {\n+    match &Foo::A(true) {\n+        _ => {}\n+        Foo::A(_) => {}\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This"}, {"sha": "0e9f777dab07b1fda173ad45e63055b48db8fa97", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8c30a96fe09047da07a8e2980baa47a334a3d7/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8c30a96fe09047da07a8e2980baa47a334a3d7/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=0a8c30a96fe09047da07a8e2980baa47a334a3d7", "patch": "@@ -150,6 +150,8 @@ pub struct InferenceResult {\n     type_mismatches: FxHashMap<ExprOrPatId, TypeMismatch>,\n     /// Interned Unknown to return references to.\n     standard_types: InternedStandardTypes,\n+    /// Stores the types which were implicitly dereferenced in pattern binding modes.\n+    pub pat_adjustments: FxHashMap<PatId, Vec<Ty>>,\n }\n \n impl InferenceResult {"}, {"sha": "a21f44d6ae178fd80339ded6cb9de66f898fb4f2", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a8c30a96fe09047da07a8e2980baa47a334a3d7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8c30a96fe09047da07a8e2980baa47a334a3d7/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=0a8c30a96fe09047da07a8e2980baa47a334a3d7", "patch": "@@ -101,14 +101,21 @@ impl<'a> InferenceContext<'a> {\n         let mut expected = self.resolve_ty_shallow(expected);\n \n         if is_non_ref_pat(&body, pat) {\n+            let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n+                pat_adjustments.push(expected.clone());\n                 expected = self.resolve_ty_shallow(inner);\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),\n                     BindingMode::Ref(Mutability::Not) => BindingMode::Ref(Mutability::Not),\n                     BindingMode::Ref(Mutability::Mut) => BindingMode::Ref(mutability),\n                 }\n             }\n+\n+            if !pat_adjustments.is_empty() {\n+                pat_adjustments.shrink_to_fit();\n+                self.result.pat_adjustments.insert(pat, pat_adjustments);\n+            }\n         } else if let Pat::Ref { .. } = &body[pat] {\n             cov_mark::hit!(match_ergonomics_ref);\n             // When you encounter a `&pat` pattern, reset to Move."}]}