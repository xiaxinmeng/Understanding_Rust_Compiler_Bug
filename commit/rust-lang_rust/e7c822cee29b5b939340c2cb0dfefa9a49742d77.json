{"sha": "e7c822cee29b5b939340c2cb0dfefa9a49742d77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YzgyMmNlZTI5YjViOTM5MzQwYzJjYjBkZmVmYTlhNDk3NDJkNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-21T02:02:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-21T02:02:00Z"}, "message": "Auto merge of #34873 - alexcrichton:down-with-compiler-rt-for-good, r=brson\n\nmk: Stop using cmake for compiler-rt\n\nThe compiler-rt build system has been a never ending cause of pain for Rust\nunfortunately:\n\n* The build system is very difficult to invoke and configure to only build\n  compiler-rt, especially across platforms.\n* The standard build system doesn't actually do what we want, not working for\n  some of our platforms and requiring a significant number of patches on our end\n  which are difficult to apply when updating compiler-rt.\n* Compiling compiler-rt requires LLVM to be compiled, which... is a big\n  dependency! This also means that over time compiler-rt is not guaranteed to\n  build against older versions of LLVM (or newer versions), and we often want to\n  work with multiple versions of LLVM simultaneously.\n\nThe makefiles and rustbuild already know how to compile C code, the code here is\nfar from the *only* C code we're compiling. This patch jettisons all logic to\nwork with compiler-rt's build system and just goes straight to the source. We\njust list all files manually (copied from compiler-rt's\nlib/builtins/CMakeLists.txt) and compile them into an archive.\n\nIt's likely that this means we'll fail to pick up new files when we upgrade\ncompiler-rt, but that seems like a much less significant cost to pay than what\nwe're currently paying.\n\ncc #34400, first steps towards that", "tree": {"sha": "9ac2a451adf649e8a62bffaf17e00ce6509e747c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ac2a451adf649e8a62bffaf17e00ce6509e747c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c822cee29b5b939340c2cb0dfefa9a49742d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c822cee29b5b939340c2cb0dfefa9a49742d77", "html_url": "https://github.com/rust-lang/rust/commit/e7c822cee29b5b939340c2cb0dfefa9a49742d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c822cee29b5b939340c2cb0dfefa9a49742d77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936bfea94b800551c972e5689ae7da86d3d601de", "url": "https://api.github.com/repos/rust-lang/rust/commits/936bfea94b800551c972e5689ae7da86d3d601de", "html_url": "https://github.com/rust-lang/rust/commit/936bfea94b800551c972e5689ae7da86d3d601de"}, {"sha": "ee6011fc71e02485f2dffcc25be64631c2008775", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6011fc71e02485f2dffcc25be64631c2008775", "html_url": "https://github.com/rust-lang/rust/commit/ee6011fc71e02485f2dffcc25be64631c2008775"}], "stats": {"total": 959, "additions": 750, "deletions": 209}, "files": [{"sha": "5d822f1b1aba62c645969712bab2bba46ad73018", "filename": "mk/cfg/aarch64-apple-ios.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Faarch64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Faarch64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-apple-ios.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -17,7 +17,7 @@ CFG_STATIC_LIB_NAME_aarch64-apple-ios=lib$(1).a\n CFG_LIB_DSYM_GLOB_aarch64-apple-ios = lib$(1)-*.a.dSYM\n CFG_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n CFG_JEMALLOC_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_GCCISH_CFLAGS_aarch64-apple-ios := -Wall -Werror -fPIC $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n+CFG_GCCISH_CFLAGS_aarch64-apple-ios :=  -fPIC $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n CFG_GCCISH_CXXFLAGS_aarch64-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios) -I$(CFG_IOS_SDK_aarch64-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_aarch64-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_aarch64-apple-ios) -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_aarch64-apple-ios := -Wl,-exported_symbols_list,"}, {"sha": "34ca4de6563e41626fe59d68bca0af2a3437b724", "filename": "mk/cfg/armv7-apple-ios.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Farmv7-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Farmv7-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-apple-ios.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -15,7 +15,7 @@ CFG_INSTALL_ONLY_RLIB_armv7-apple-ios = 1\n CFG_STATIC_LIB_NAME_armv7-apple-ios=lib$(1).a\n CFG_LIB_DSYM_GLOB_armv7-apple-ios = lib$(1)-*.a.dSYM\n CFG_JEMALLOC_CFLAGS_armv7-apple-ios := -arch armv7 -mfpu=vfp3 $(CFG_IOS_SDK_FLAGS_armv7-apple-ios)\n-CFG_GCCISH_CFLAGS_armv7-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -mfpu=vfp3 -arch armv7\n+CFG_GCCISH_CFLAGS_armv7-apple-ios :=  -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -mfpu=vfp3 -arch armv7\n CFG_GCCISH_CXXFLAGS_armv7-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -I$(CFG_IOS_SDK_armv7-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_armv7-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7-apple-ios) -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_armv7-apple-ios := -Wl,-exported_symbols_list,"}, {"sha": "6da7905a7003bd955ebd6e7a18b5c3c0dfd2a3df", "filename": "mk/cfg/armv7s-apple-ios.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Farmv7s-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Farmv7s-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7s-apple-ios.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -15,7 +15,7 @@ CFG_INSTALL_ONLY_RLIB_armv7s-apple-ios = 1\n CFG_STATIC_LIB_NAME_armv7s-apple-ios=lib$(1).a\n CFG_LIB_DSYM_GLOB_armv7s-apple-ios = lib$(1)-*.a.dSYM\n CFG_JEMALLOC_CFLAGS_armv7s-apple-ios := -arch armv7s $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios)\n-CFG_GCCISH_CFLAGS_armv7s-apple-ios := -Wall -Werror -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -arch armv7s\n+CFG_GCCISH_CFLAGS_armv7s-apple-ios :=  -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -arch armv7s\n CFG_GCCISH_CXXFLAGS_armv7s-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -I$(CFG_IOS_SDK_armv7s-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_armv7s-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7s-apple-ios) -Wl,-no_compact_unwind\n CFG_GCCISH_DEF_FLAG_armv7s-apple-ios := -Wl,-exported_symbols_list,"}, {"sha": "a98a51b06b5d3374e38a2588b6a30d9adb1febc3", "filename": "mk/cfg/asmjs-unknown-emscripten.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_asmjs-unknown-emscripten=lib$(1).a\n CFG_LIB_GLOB_asmjs-unknown-emscripten=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_asmjs-unknown-emscripten=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_asmjs-unknown-emscripten := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_asmjs-unknown-emscripten := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_asmjs-unknown-emscripten :=  -g -fPIC -m32 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_asmjs-unknown-emscripten := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_asmjs-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_asmjs-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "bfb7fa281f242aadf870ef16185b5de8faaaed5e", "filename": "mk/cfg/i386-apple-ios.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi386-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi386-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi386-apple-ios.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -14,7 +14,7 @@ CFG_LIB_GLOB_i386-apple-ios = lib$(1)-*.dylib\n CFG_INSTALL_ONLY_RLIB_i386-apple-ios = 1\n CFG_STATIC_LIB_NAME_i386-apple-ios=lib$(1).a\n CFG_LIB_DSYM_GLOB_i386-apple-ios = lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_i386-apple-ios := -Wall -Werror -g -fPIC -m32 $(CFG_IOSSIM_FLAGS_i386-apple-ios)\n+CFG_GCCISH_CFLAGS_i386-apple-ios :=  -g -fPIC -m32 $(CFG_IOSSIM_FLAGS_i386-apple-ios)\n CFG_GCCISH_CXXFLAGS_i386-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_i386-apple-ios) -I$(CFG_IOSSIM_SDK_i386-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_i386-apple-ios := -lpthread -m32 -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios)\n CFG_GCCISH_DEF_FLAG_i386-apple-ios := -Wl,-exported_symbols_list,"}, {"sha": "14b9ebfdba66851f8c8d8031afc2eb006c526359", "filename": "mk/cfg/i586-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_i586-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_i586-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i586-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS) -march=pentium\n-CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS) -march=pentium\n+CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=pentium\n CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS) -march=pentium\n CFG_GCCISH_LINK_FLAGS_i586-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_i586-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "e4b3431e8b67f0256916445fafa712ffd94f3253", "filename": "mk/cfg/i686-apple-darwin.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-apple-darwin.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_i686-apple-darwin=lib$(1).a\n CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i686-apple-darwin := -m32 -arch i386 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-apple-darwin := -Wall -Werror -g -fPIC -m32 -arch i386 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-apple-darwin :=  -g -fPIC -m32 -arch i386 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m32\n CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,"}, {"sha": "50c2b8c98acd3c130d221dfdfc327f165b960036", "filename": "mk/cfg/i686-pc-windows-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_STATIC_LIB_NAME_i686-pc-windows-gnu=$(1).lib\n CFG_LIB_GLOB_i686-pc-windows-gnu=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_i686-pc-windows-gnu=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i686-pc-windows-gnu := -march=i686 -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-pc-windows-gnu := -Wall -Werror -g -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-pc-windows-gnu :=  -g -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_i686-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-pc-windows-gnu := -shared -g -m32\n CFG_GCCISH_DEF_FLAG_i686-pc-windows-gnu :="}, {"sha": "a9d4446d5d49b5048060977cb1585d62e3b7b77a", "filename": "mk/cfg/i686-unknown-freebsd.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-freebsd.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_i686-unknown-freebsd=lib$(1).a\n CFG_LIB_GLOB_i686-unknown-freebsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i686-unknown-freebsd=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i686-unknown-freebsd := -m32 -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-freebsd := -Wall -Werror -g -fPIC -m32 -arch i386 -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-unknown-freebsd :=  -g -fPIC -m32 -arch i386 -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-unknown-freebsd := -m32 -shared -fPIC -g -pthread -lrt\n CFG_GCCISH_DEF_FLAG_i686-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_i686-unknown-freebsd :="}, {"sha": "9e2312008a10ad6916ea34dbe5fb9b32b5d7cb6b", "filename": "mk/cfg/i686-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_i686-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_i686-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS) -march=i686\n+CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=i686\n CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "80918728316a665f6c110c6aa940cfde8796962b", "filename": "mk/cfg/i686-unknown-linux-musl.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-musl.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_LIB_NAME_i686-unknown-linux-musl=lib$(1).so\n CFG_STATIC_LIB_NAME_i686-unknown-linux-musl=lib$(1).a\n CFG_LIB_GLOB_i686-unknown-linux-musl=lib$(1)-*.so\n CFG_JEMALLOC_CFLAGS_i686-unknown-linux-musl := -m32 -Wl,-melf_i386\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-musl := -Wall -Werror -g -fPIC -m32 -Wl,-melf_i386\n+CFG_GCCISH_CFLAGS_i686-unknown-linux-musl :=  -g -fPIC -m32 -Wl,-melf_i386\n CFG_GCCISH_CXXFLAGS_i686-unknown-linux-musl :=\n CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-musl :=\n CFG_GCCISH_DEF_FLAG_i686-unknown-linux-musl :="}, {"sha": "9c5720de4b310dc8d44f9691d6382df55a456987", "filename": "mk/cfg/powerpc-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_STATIC_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_CFLAGS_powerpc-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_powerpc-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_powerpc-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_powerpc-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "389bb6f0cab492e02110d3f6f1bc74a33faa3f4b", "filename": "mk/cfg/powerpc64-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -10,7 +10,7 @@ CFG_LIB_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_powerpc64-unknown-linux-gnu := -m64\n CFG_CFLAGS_powerpc64-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_powerpc64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_powerpc64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n CFG_GCCISH_DEF_FLAG_powerpc64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "6884fa11e7412ceedd76d40cf4a5e44e15143c49", "filename": "mk/cfg/powerpc64le-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_STATIC_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_CFLAGS_powerpc64le-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc64le-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_powerpc64le-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_powerpc64le-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_powerpc64le-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n CFG_GCCISH_DEF_FLAG_powerpc64le-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "8af47b671a8505a2727b7d69adfae00b23afed19", "filename": "mk/cfg/x86_64-apple-darwin.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-darwin.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-apple-darwin=lib$(1).a\n CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-apple-darwin := -m64 -arch x86_64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-apple-darwin := -Wall -Werror -g -fPIC -m64 -arch x86_64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-apple-darwin :=  -g -fPIC -m64 -arch x86_64 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m64\n CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,"}, {"sha": "764cdc15996d0c5fe8fc93f8b0d1ca35bc949194", "filename": "mk/cfg/x86_64-apple-ios.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-ios.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -16,7 +16,7 @@ CFG_STATIC_LIB_NAME_x86_64-apple-ios=lib$(1).a\n CFG_LIB_DSYM_GLOB_x86_64-apple-ios = lib$(1)-*.a.dSYM\n CFG_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n CFG_JEMALLOC_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_GCCISH_CFLAGS_x86_64-apple-ios := -Wall -Werror -fPIC $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n+CFG_GCCISH_CFLAGS_x86_64-apple-ios :=  -fPIC $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n CFG_GCCISH_CXXFLAGS_x86_64-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_x86_64-apple-ios) -I$(CFG_IOSSIM_SDK_x86_64-apple-ios)/usr/include/c++/4.2.1\n CFG_GCCISH_LINK_FLAGS_x86_64-apple-ios := -lpthread -Wl,-no_compact_unwind -m64 -Wl,-syslibroot $(CFG_IOSSIM_SDK_x86_64-apple-ios)\n CFG_GCCISH_DEF_FLAG_x86_64-apple-ios := -Wl,-exported_symbols_list,"}, {"sha": "82e7b23279fb5339c9fe773df72f26341132880c", "filename": "mk/cfg/x86_64-pc-windows-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_STATIC_LIB_NAME_x86_64-pc-windows-gnu=$(1).lib\n CFG_LIB_GLOB_x86_64-pc-windows-gnu=$(1)-*.dll\n CFG_LIB_DSYM_GLOB_x86_64-pc-windows-gnu=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-pc-windows-gnu := -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-pc-windows-gnu := -Wall -Werror -g -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-pc-windows-gnu :=  -g -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-gnu := -shared -g -m64\n CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-gnu :="}, {"sha": "53d58b9fceaa6ab0b762bf74229558de5e0ca1a4", "filename": "mk/cfg/x86_64-rumprun-netbsd.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).so\n CFG_STATIC_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).a\n CFG_LIB_GLOB_x86_64-rumprun-netbsd=lib$(1)-*.so\n CFG_JEMALLOC_CFLAGS_x86_64-rumprun-netbsd := -m64\n-CFG_GCCISH_CFLAGS_x86_64-rumprun-netbsd := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CFLAGS_x86_64-rumprun-netbsd :=  -g -fPIC -m64\n CFG_GCCISH_CXXFLAGS_x86_64-rumprun-netbsd :=\n CFG_GCCISH_LINK_FLAGS_x86_64-rumprun-netbsd :=\n CFG_GCCISH_DEF_FLAG_x86_64-rumprun-netbsd :="}, {"sha": "7fc323b234aee9b750dfff8813d4904caa1a723b", "filename": "mk/cfg/x86_64-sun-solaris.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-sun-solaris.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_STATIC_LIB_NAME_x86_64-sun-solaris=lib$(1).a\n CFG_LIB_GLOB_x86_64-sun-solaris=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-sun-solaris=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-sun-solaris := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-sun-solaris := -Wall -Werror -g -D_POSIX_PTHREAD_SEMANTICS -fPIC -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-sun-solaris :=  -g -D_POSIX_PTHREAD_SEMANTICS -fPIC -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-sun-solaris := -shared -fPIC -g -pthread  -lrt\n CFG_GCCISH_DEF_FLAG_x86_64-sun-solaris := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-sun-solaris :="}, {"sha": "8ac31c176188b0a50a4efcf923f5825868ace821", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-bitrig=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-bitrig=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-bitrig=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig := -Wall -Werror -fPIE -fPIC -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig :=  -fPIE -fPIC -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-bitrig :="}, {"sha": "579a9a809e205604011e59c73deb368f3eb248ec", "filename": "mk/cfg/x86_64-unknown-dragonfly.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-dragonfly=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-dragonfly=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-dragonfly := -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly := -Wall -Werror -g -fPIC -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly :=  -g -fPIC -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-dragonfly := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-dragonfly :="}, {"sha": "c700601eac7a18a1427d48fcc866e37d5b40ad2b", "filename": "mk/cfg/x86_64-unknown-freebsd.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-freebsd=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-freebsd := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd := -Wall -Werror -g -fPIC -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd :=  -g -fPIC -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-freebsd := -shared -fPIC -g -pthread  -lrt\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-freebsd :="}, {"sha": "817ce22e4f59d10fdf099113ca8a6ea447210dac", "filename": "mk/cfg/x86_64-unknown-linux-gnu.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-gnu := -m64\n-CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu :=  -g -fPIC -m64\n CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-gnu := -fno-rtti\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list="}, {"sha": "3a03b2accd541449456dcadc2d86b4d11d363cee", "filename": "mk/cfg/x86_64-unknown-linux-musl.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).so\n CFG_STATIC_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-linux-musl=lib$(1)-*.so\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-musl := -m64\n-CFG_GCCISH_CFLAGS_x86_64-unknown-linux-musl := -Wall -Werror -g -fPIC -m64\n+CFG_GCCISH_CFLAGS_x86_64-unknown-linux-musl :=  -g -fPIC -m64\n CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-musl :=\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-musl :=\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-musl :="}, {"sha": "93bb2d672653e8f46b68cf5efb8dc1059fe04abf", "filename": "mk/cfg/x86_64-unknown-netbsd.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -9,7 +9,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-netbsd=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-netbsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-netbsd=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-netbsd := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-netbsd := -Wall -Werror -g -fPIC -I/usr/local/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-netbsd :=  -g -fPIC -I/usr/local/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-netbsd := -shared -fPIC -g -pthread  -lrt\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-netbsd := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-netbsd :="}, {"sha": "7cca1f7b18b3d6cdd5ffc65d6cbced0897f0ed6f", "filename": "mk/cfg/x86_64-unknown-openbsd.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -8,7 +8,7 @@ CFG_STATIC_LIB_NAME_x86_64-unknown-openbsd=lib$(1).a\n CFG_LIB_GLOB_x86_64-unknown-openbsd=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-openbsd=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-openbsd := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-openbsd := -Wall -Werror -g -fPIC -m64 -I/usr/include $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-openbsd :=  -g -fPIC -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_LINK_FLAGS_x86_64-unknown-openbsd := -shared -fPIC -g -pthread -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-openbsd :="}, {"sha": "067721fab4fa8353101c7f42aeafad01e8475197", "filename": "mk/rt.mk", "status": "modified", "additions": 327, "deletions": 101, "changes": 428, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -223,147 +223,373 @@ endif\n # compiler-rt\n ################################################################################\n \n-ifdef CFG_ENABLE_FAST_MAKE\n-COMPRT_DEPS := $(S)/.gitmodules\n-else\n-COMPRT_DEPS := $(wildcard \\\n-              $(S)src/compiler-rt/* \\\n-              $(S)src/compiler-rt/*/* \\\n-              $(S)src/compiler-rt/*/*/* \\\n-              $(S)src/compiler-rt/*/*/*/*)\n-endif\n-\n-# compiler-rt's build system is a godawful mess. Here we figure out\n-# the ridiculous platform-specific values and paths necessary to get\n-# useful artifacts out of it.\n+# Everything below is a manual compilation of compiler-rt, disregarding its\n+# build system. See comments in `src/bootstrap/native.rs` for more information.\n \n COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-COMPRT_ARCH_$(1) := $$(word 1,$$(subst -, ,$(1)))\n+# GENERIC_SOURCES in CMakeLists.txt\n+COMPRT_OBJS_$(1) := \\\n+  absvdi2.o \\\n+  absvsi2.o \\\n+  adddf3.o \\\n+  addsf3.o \\\n+  addvdi3.o \\\n+  addvsi3.o \\\n+  apple_versioning.o \\\n+  ashldi3.o \\\n+  ashrdi3.o \\\n+  clear_cache.o \\\n+  clzdi2.o \\\n+  clzsi2.o \\\n+  cmpdi2.o \\\n+  comparedf2.o \\\n+  comparesf2.o \\\n+  ctzdi2.o \\\n+  ctzsi2.o \\\n+  divdc3.o \\\n+  divdf3.o \\\n+  divdi3.o \\\n+  divmoddi4.o \\\n+  divmodsi4.o \\\n+  divsc3.o \\\n+  divsf3.o \\\n+  divsi3.o \\\n+  divxc3.o \\\n+  extendsfdf2.o \\\n+  extendhfsf2.o \\\n+  ffsdi2.o \\\n+  fixdfdi.o \\\n+  fixdfsi.o \\\n+  fixsfdi.o \\\n+  fixsfsi.o \\\n+  fixunsdfdi.o \\\n+  fixunsdfsi.o \\\n+  fixunssfdi.o \\\n+  fixunssfsi.o \\\n+  fixunsxfdi.o \\\n+  fixunsxfsi.o \\\n+  fixxfdi.o \\\n+  floatdidf.o \\\n+  floatdisf.o \\\n+  floatdixf.o \\\n+  floatsidf.o \\\n+  floatsisf.o \\\n+  floatundidf.o \\\n+  floatundisf.o \\\n+  floatundixf.o \\\n+  floatunsidf.o \\\n+  floatunsisf.o \\\n+  int_util.o \\\n+  lshrdi3.o \\\n+  moddi3.o \\\n+  modsi3.o \\\n+  muldc3.o \\\n+  muldf3.o \\\n+  muldi3.o \\\n+  mulodi4.o \\\n+  mulosi4.o \\\n+  muloti4.o \\\n+  mulsc3.o \\\n+  mulsf3.o \\\n+  mulvdi3.o \\\n+  mulvsi3.o \\\n+  mulxc3.o \\\n+  negdf2.o \\\n+  negdi2.o \\\n+  negsf2.o \\\n+  negvdi2.o \\\n+  negvsi2.o \\\n+  paritydi2.o \\\n+  paritysi2.o \\\n+  popcountdi2.o \\\n+  popcountsi2.o \\\n+  powidf2.o \\\n+  powisf2.o \\\n+  powixf2.o \\\n+  subdf3.o \\\n+  subsf3.o \\\n+  subvdi3.o \\\n+  subvsi3.o \\\n+  truncdfhf2.o \\\n+  truncdfsf2.o \\\n+  truncsfhf2.o \\\n+  ucmpdi2.o \\\n+  udivdi3.o \\\n+  udivmoddi4.o \\\n+  udivmodsi4.o \\\n+  udivsi3.o \\\n+  umoddi3.o \\\n+  umodsi3.o\n \n-# All this is to figure out the path to the compiler-rt bin\n-ifeq ($$(findstring windows-msvc,$(1)),windows-msvc)\n-COMPRT_DIR_$(1) := windows/Release\n-COMPRT_LIB_NAME_$(1) := clang_rt.builtins-$$(patsubst i%86,i386,$$(COMPRT_ARCH_$(1)))\n+ifeq ($$(findstring ios,$(1)),)\n+COMPRT_OBJS_$(1) += \\\n+  absvti2.o \\\n+  addtf3.o \\\n+  addvti3.o \\\n+  ashlti3.o \\\n+  ashrti3.o \\\n+  clzti2.o \\\n+  cmpti2.o \\\n+  ctzti2.o \\\n+  divtf3.o \\\n+  divti3.o \\\n+  ffsti2.o \\\n+  fixdfti.o \\\n+  fixsfti.o \\\n+  fixunsdfti.o \\\n+  fixunssfti.o \\\n+  fixunsxfti.o \\\n+  fixxfti.o \\\n+  floattidf.o \\\n+  floattisf.o \\\n+  floattixf.o \\\n+  floatuntidf.o \\\n+  floatuntisf.o \\\n+  floatuntixf.o \\\n+  lshrti3.o \\\n+  modti3.o \\\n+  multf3.o \\\n+  multi3.o \\\n+  mulvti3.o \\\n+  negti2.o \\\n+  negvti2.o \\\n+  parityti2.o \\\n+  popcountti2.o \\\n+  powitf2.o \\\n+  subtf3.o \\\n+  subvti3.o \\\n+  trampoline_setup.o \\\n+  ucmpti2.o \\\n+  udivmodti4.o \\\n+  udivti3.o \\\n+  umodti3.o\n endif\n \n-ifeq ($$(findstring windows-gnu,$(1)),windows-gnu)\n-COMPRT_DIR_$(1) := windows\n-COMPRT_LIB_NAME_$(1) := clang_rt.builtins-$$(COMPRT_ARCH_$(1))\n+ifeq ($$(findstring apple,$(1)),apple)\n+COMPRT_OBJS_$(1) +=  \\\n+\t    atomic_flag_clear.o \\\n+\t    atomic_flag_clear_explicit.o \\\n+\t    atomic_flag_test_and_set.o \\\n+\t    atomic_flag_test_and_set_explicit.o \\\n+\t    atomic_signal_fence.o \\\n+\t    atomic_thread_fence.o\n endif\n \n-ifeq ($$(findstring darwin,$(1)),darwin)\n-COMPRT_DIR_$(1) := builtins\n-COMPRT_LIB_NAME_$(1) := clang_rt.builtins_$$(patsubst i686,i386,$$(COMPRT_ARCH_$(1)))_osx\n+\n+ifeq ($$(findstring windows,$(1)),)\n+COMPRT_OBJS_$(1) += emutls.o\n endif\n \n-ifeq ($$(findstring ios,$(1)),ios)\n-COMPRT_DIR_$(1) := builtins\n-COMPRT_ARCH_$(1) := $$(patsubst armv7s,armv7em,$$(COMPRT_ARCH_$(1)))\n-COMPRT_LIB_NAME_$(1) := clang_rt.hard_pic_$$(COMPRT_ARCH_$(1))_macho_embedded\n-ifeq ($$(COMPRT_ARCH_$(1)),aarch64)\n-COMPRT_LIB_NAME_$(1) := clang_rt.builtins_arm64_ios\n+ifeq ($$(findstring msvc,$(1)),)\n+COMPRT_OBJS_$(1) += gcc_personality_v0.o\n+COMPRT_OBJS_$(1) += emutls.o\n+\n+ifeq ($$(findstring x86_64,$(1)),x86_64)\n+COMPRT_OBJS_$(1) += \\\n+      x86_64/chkstk.o \\\n+      x86_64/chkstk2.o \\\n+      x86_64/floatdidf.o \\\n+      x86_64/floatdisf.o \\\n+      x86_64/floatdixf.o \\\n+      x86_64/floatundidf.o \\\n+      x86_64/floatundisf.o \\\n+      x86_64/floatundixf.o\n endif\n-COMPRT_DEFINES_$(1) := -DCOMPILER_RT_ENABLE_IOS=ON\n+\n+ifeq ($$(findstring i686,$$(patsubts i%86,i686,$(1))),i686)\n+COMPRT_OBJS_$(1) += \\\n+      i386/ashldi3.o \\\n+      i386/ashrdi3.o \\\n+      i386/chkstk.o \\\n+      i386/chkstk2.o \\\n+      i386/divdi3.o \\\n+      i386/floatdidf.o \\\n+      i386/floatdisf.o \\\n+      i386/floatdixf.o \\\n+      i386/floatundidf.o \\\n+      i386/floatundisf.o \\\n+      i386/floatundixf.o \\\n+      i386/lshrdi3.o \\\n+      i386/moddi3.o \\\n+      i386/muldi3.o \\\n+      i386/udivdi3.o \\\n+      i386/umoddi3.o\n endif\n \n-ifndef COMPRT_DIR_$(1)\n-# NB: FreeBSD and NetBSD output to \"linux\"...\n-COMPRT_DIR_$(1) := linux\n-COMPRT_ARCH_$(1) := $$(patsubst i586,i386,$$(COMPRT_ARCH_$(1)))\n+else\n \n-ifeq ($$(findstring android,$(1)),android)\n-ifeq ($$(findstring arm,$$(COMPRT_ARCH_$(1))),arm)\n-COMPRT_ARCH_$(1) := armhf\n-endif\n+ifeq ($$(findstring x86_64,$(1)),x86_64)\n+COMPRT_OBJS_$(1) += \\\n+      x86_64/floatdidf.o \\\n+      x86_64/floatdisf.o \\\n+      x86_64/floatdixf.o\n endif\n \n-ifeq ($$(findstring eabihf,$(1)),eabihf)\n-ifeq ($$(findstring armv7,$(1)),)\n-COMPRT_LIB_NAME_$(1) := clang_rt.builtins-armhf\n-endif\n endif\n \n-ifndef COMPRT_LIB_NAME_$(1)\n-COMPRT_LIB_NAME_$(1) := clang_rt.builtins-$$(COMPRT_ARCH_$(1))\n+# Generic ARM sources, nothing compiles on iOS though\n+ifeq ($$(findstring arm,$(1)),arm)\n+ifeq ($$(findstring ios,$(1)),)\n+COMPRT_OBJS_$(1) += \\\n+  arm/aeabi_cdcmp.o \\\n+  arm/aeabi_cdcmpeq_check_nan.o \\\n+  arm/aeabi_cfcmp.o \\\n+  arm/aeabi_cfcmpeq_check_nan.o \\\n+  arm/aeabi_dcmp.o \\\n+  arm/aeabi_div0.o \\\n+  arm/aeabi_drsub.o \\\n+  arm/aeabi_fcmp.o \\\n+  arm/aeabi_frsub.o \\\n+  arm/aeabi_idivmod.o \\\n+  arm/aeabi_ldivmod.o \\\n+  arm/aeabi_memcmp.o \\\n+  arm/aeabi_memcpy.o \\\n+  arm/aeabi_memmove.o \\\n+  arm/aeabi_memset.o \\\n+  arm/aeabi_uidivmod.o \\\n+  arm/aeabi_uldivmod.o \\\n+  arm/bswapdi2.o \\\n+  arm/bswapsi2.o \\\n+  arm/clzdi2.o \\\n+  arm/clzsi2.o \\\n+  arm/comparesf2.o \\\n+  arm/divmodsi4.o \\\n+  arm/divsi3.o \\\n+  arm/modsi3.o \\\n+  arm/switch16.o \\\n+  arm/switch32.o \\\n+  arm/switch8.o \\\n+  arm/switchu8.o \\\n+  arm/sync_synchronize.o \\\n+  arm/udivmodsi4.o \\\n+  arm/udivsi3.o \\\n+  arm/umodsi3.o\n endif\n endif\n \n-\n-ifeq ($$(findstring windows-gnu,$(1)),windows-gnu)\n-COMPRT_LIB_FILE_$(1) := lib$$(COMPRT_LIB_NAME_$(1)).a\n+# Thumb sources\n+ifeq ($$(findstring armv7,$(1)),armv7)\n+COMPRT_OBJS_$(1) += \\\n+  arm/sync_fetch_and_add_4.o \\\n+  arm/sync_fetch_and_add_8.o \\\n+  arm/sync_fetch_and_and_4.o \\\n+  arm/sync_fetch_and_and_8.o \\\n+  arm/sync_fetch_and_max_4.o \\\n+  arm/sync_fetch_and_max_8.o \\\n+  arm/sync_fetch_and_min_4.o \\\n+  arm/sync_fetch_and_min_8.o \\\n+  arm/sync_fetch_and_nand_4.o \\\n+  arm/sync_fetch_and_nand_8.o \\\n+  arm/sync_fetch_and_or_4.o \\\n+  arm/sync_fetch_and_or_8.o \\\n+  arm/sync_fetch_and_sub_4.o \\\n+  arm/sync_fetch_and_sub_8.o \\\n+  arm/sync_fetch_and_umax_4.o \\\n+  arm/sync_fetch_and_umax_8.o \\\n+  arm/sync_fetch_and_umin_4.o \\\n+  arm/sync_fetch_and_umin_8.o \\\n+  arm/sync_fetch_and_xor_4.o \\\n+  arm/sync_fetch_and_xor_8.o\n endif\n \n-ifeq ($$(findstring android,$(1)),android)\n-ifeq ($$(findstring arm,$(1)),arm)\n-COMPRT_LIB_FILE_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$$(COMPRT_LIB_NAME_$(1))-android)\n-endif\n+# VFP sources\n+ifeq ($$(findstring eabihf,$(1)),eabihf)\n+COMPRT_OBJS_$(1) += \\\n+  arm/adddf3vfp.o \\\n+  arm/addsf3vfp.o \\\n+  arm/divdf3vfp.o \\\n+  arm/divsf3vfp.o \\\n+  arm/eqdf2vfp.o \\\n+  arm/eqsf2vfp.o \\\n+  arm/extendsfdf2vfp.o \\\n+  arm/fixdfsivfp.o \\\n+  arm/fixsfsivfp.o \\\n+  arm/fixunsdfsivfp.o \\\n+  arm/fixunssfsivfp.o \\\n+  arm/floatsidfvfp.o \\\n+  arm/floatsisfvfp.o \\\n+  arm/floatunssidfvfp.o \\\n+  arm/floatunssisfvfp.o \\\n+  arm/gedf2vfp.o \\\n+  arm/gesf2vfp.o \\\n+  arm/gtdf2vfp.o \\\n+  arm/gtsf2vfp.o \\\n+  arm/ledf2vfp.o \\\n+  arm/lesf2vfp.o \\\n+  arm/ltdf2vfp.o \\\n+  arm/ltsf2vfp.o \\\n+  arm/muldf3vfp.o \\\n+  arm/mulsf3vfp.o \\\n+  arm/negdf2vfp.o \\\n+  arm/negsf2vfp.o \\\n+  arm/nedf2vfp.o \\\n+  arm/nesf2vfp.o \\\n+  arm/restore_vfp_d8_d15_regs.o \\\n+  arm/save_vfp_d8_d15_regs.o \\\n+  arm/subdf3vfp.o \\\n+  arm/subsf3vfp.o \\\n+  arm/truncdfsf2vfp.o \\\n+  arm/unorddf2vfp.o \\\n+  arm/unordsf2vfp.o\n endif\n \n-ifndef COMPRT_LIB_FILE_$(1)\n-COMPRT_LIB_FILE_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$$(COMPRT_LIB_NAME_$(1)))\n+ifeq ($$(findstring aarch64,$(1)),aarch64)\n+COMPRT_OBJS_$(1) += \\\n+  comparetf2.o \\\n+  extenddftf2.o \\\n+  extendsftf2.o \\\n+  fixtfdi.o \\\n+  fixtfsi.o \\\n+  fixtfti.o \\\n+  fixunstfdi.o \\\n+  fixunstfsi.o \\\n+  fixunstfti.o \\\n+  floatditf.o \\\n+  floatsitf.o \\\n+  floatunditf.o \\\n+  floatunsitf.o \\\n+  multc3.o \\\n+  trunctfdf2.o \\\n+  trunctfsf2.o\n endif\n \n-COMPRT_OUTPUT_$(1) := $$(COMPRT_BUILD_DIR_$(1))/lib/$$(COMPRT_DIR_$(1))/$$(COMPRT_LIB_FILE_$(1))\n-\n-ifeq ($$(findstring windows-msvc,$(1)),windows-msvc)\n-COMPRT_BUILD_ARGS_$(1) := //v:m //nologo\n-COMPRT_BUILD_TARGET_$(1) := lib/builtins/builtins\n-COMPRT_BUILD_CC_$(1) :=\n+ifeq ($$(findstring msvc,$(1)),msvc)\n+$$(COMPRT_BUILD_DIR_$(1))/%.o: CFLAGS += -Zl -D__func__=__FUNCTION__\n else\n-COMPRT_BUILD_ARGS_$(1) :=\n-ifndef COMPRT_BUILD_TARGET_$(1)\n-COMPRT_BUILD_TARGET_$(1) := $$(COMPRT_LIB_NAME_$(1))\n+$$(COMPRT_BUILD_DIR_$(1))/%.o: CFLAGS += -fno-builtin -fvisibility=hidden \\\n+\t-fomit-frame-pointer -ffreestanding\n endif\n-COMPRT_BUILD_CC_$(1) := -DCMAKE_C_COMPILER=$$(call FIND_COMPILER,$$(CC_$(1))) \\\n-\t\t\t-DCMAKE_CXX_COMPILER=$$(call FIND_COMPILER,$$(CXX_$(1)))\n \n-ifeq ($$(findstring ios,$(1)),)\n-COMPRT_BUILD_CC_$(1) := $$(COMPRT_BUILD_CC_$(1)) \\\n-\t\t\t-DCMAKE_C_FLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1)) -Wno-error\"\n-endif\n+COMPRT_OBJS_$(1) := $$(COMPRT_OBJS_$(1):%=$$(COMPRT_BUILD_DIR_$(1))/%)\n+\n+$$(COMPRT_BUILD_DIR_$(1))/%.o: $(S)src/compiler-rt/lib/builtins/%.c\n+\t@mkdir -p $$(@D)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1),$$@,$$<)\n+\n+$$(COMPRT_BUILD_DIR_$(1))/%.o: $(S)src/compiler-rt/lib/builtins/%.S \\\n+\t    $$(LLVM_CONFIG_$$(CFG_BUILD))\n+\t@mkdir -p $$(@D)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n \n+ifeq ($$(findstring msvc,$(1)),msvc)\n+$$(COMPRT_BUILD_DIR_$(1))/%.o: \\\n+\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n endif\n \n ifeq ($$(findstring emscripten,$(1)),emscripten)\n-\n # FIXME: emscripten doesn't use compiler-rt and can't build it without\n # further hacks\n-$$(COMPRT_LIB_$(1)):\n-\ttouch $$@\n-\n-else\n-\n-$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@$$(call E, cmake: compiler-rt)\n-\t$$(Q)rm -rf $$(COMPRT_BUILD_DIR_$(1))\n-\t$$(Q)mkdir $$(COMPRT_BUILD_DIR_$(1))\n-\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; \\\n-\t\t$$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n-\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$$(CFG_BUILD)) \\\n-\t\t-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=$(1) \\\n-\t\t-DCOMPILER_RT_BUILD_SANITIZERS=OFF \\\n-\t\t-DCOMPILER_RT_BUILD_EMUTLS=OFF \\\n-\t\t$$(COMPRT_DEFINES_$(1)) \\\n-\t\t$$(COMPRT_BUILD_CC_$(1)) \\\n-\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n-ifneq ($$(CFG_NINJA),)\n-\t$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n-\t\t--target $$(COMPRT_BUILD_TARGET_$(1)) \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-- $$(COMPRT_BUILD_ARGS_$(1))\n-else\n-\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n-\t\t--target $$(COMPRT_BUILD_TARGET_$(1)) \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t-- $$(COMPRT_BUILD_ARGS_$(1)) $$(MFLAGS)\n+COMPRT_OBJS_$(1) :=\n endif\n-\t$$(Q)cp \"$$(COMPRT_OUTPUT_$(1))\" $$@\n \n-endif\n+$$(COMPRT_LIB_$(1)): $$(COMPRT_OBJS_$(1))\n+\t@$$(call E, link: $$@)\n+\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n \n ################################################################################\n # libbacktrace"}, {"sha": "1290f2a404b22cff42df43f162c667a5ac456cd3", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -5,7 +5,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.31 (git+https://github.com/alexcrichton/gcc-rs)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -25,7 +25,7 @@ name = \"cmake\"\n version = \"0.1.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.31 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -38,7 +38,12 @@ dependencies = [\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.26\"\n+version = \"0.3.31\"\n+source = \"git+https://github.com/alexcrichton/gcc-rs#b8e2400883f1a2749b323354dad372cdd1c838c7\"\n+\n+[[package]]\n+name = \"gcc\"\n+version = \"0.3.31\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]"}, {"sha": "02746034cca695460fac0eccda1fbdf395f59a75", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -29,6 +29,6 @@ getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n winapi = \"0.2\"\n kernel32-sys = \"0.2\"\n-gcc = \"0.3.17\"\n+gcc = { git = \"https://github.com/alexcrichton/gcc-rs\" }\n libc = \"0.2\"\n md5 = \"0.1\""}, {"sha": "05ecbc0cadaa9ab25113e8ce3bca2ca33e98696f", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 383, "deletions": 74, "changes": 457, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -133,86 +133,395 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n \n /// Compiles the `compiler-rt` library, or at least the builtins part of it.\n ///\n-/// This uses the CMake build system and an existing LLVM build directory to\n-/// compile the project.\n+/// Note that while compiler-rt has a build system associated with it, we\n+/// specifically don't use it here. The compiler-rt build system, written in\n+/// CMake, is actually *very* difficult to work with in terms of getting it to\n+/// compile on all the relevant platforms we want it to compile on. In the end\n+/// it became so much pain to work with local patches, work around the oddities\n+/// of the build system, etc, that we're just building everything by hand now.\n+///\n+/// In general compiler-rt is just a bunch of intrinsics that are in practice\n+/// *very* stable. We just need to make sure that all the relevant functions and\n+/// such are compiled somewhere and placed in an object file somewhere.\n+/// Eventually, these should all be written in Rust!\n+///\n+/// So below you'll find a listing of every single file in the compiler-rt repo\n+/// that we're compiling. We just reach in and compile with the `gcc` crate\n+/// which should have all the relevant flags and such already configured.\n+///\n+/// The risk here is that if we update compiler-rt we may need to compile some\n+/// new intrinsics, but to be honest we surely don't use all of the intrinsics\n+/// listed below today so the likelihood of us actually needing a new intrinsic\n+/// is quite low. The failure case is also just that someone reports a link\n+/// error (if any) and then we just add it to the list. Overall, that cost is\n+/// far far less than working with compiler-rt's build system over time.\n pub fn compiler_rt(build: &Build, target: &str) {\n-    let dst = build.compiler_rt_out(target);\n-    let arch = target.split('-').next().unwrap();\n-    let mode = if build.config.rust_optimize {\"Release\"} else {\"Debug\"};\n+    let build_dir = build.compiler_rt_out(target);\n+    let output = build_dir.join(staticlib(\"compiler-rt\", target));\n+    build.compiler_rt_built.borrow_mut().insert(target.to_string(),\n+                                                output.clone());\n+    t!(fs::create_dir_all(&build_dir));\n \n-    let build_llvm_config = build.llvm_config(&build.config.build);\n-    let mut cfg = cmake::Config::new(build.src.join(\"src/compiler-rt\"));\n-    cfg.target(target)\n+    let mut cfg = gcc::Config::new();\n+    cfg.cargo_metadata(false)\n+       .out_dir(&build_dir)\n+       .target(target)\n        .host(&build.config.build)\n-       .out_dir(&dst)\n-       .profile(mode)\n-       .define(\"LLVM_CONFIG_PATH\", build_llvm_config)\n-       .define(\"COMPILER_RT_DEFAULT_TARGET_TRIPLE\", target)\n-       .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"OFF\")\n-       .define(\"COMPILER_RT_BUILD_EMUTLS\", \"OFF\")\n-       // inform about c/c++ compilers, the c++ compiler isn't actually used but\n-       // it's needed to get the initial configure to work on all platforms.\n-       .define(\"CMAKE_C_COMPILER\", build.cc(target))\n-       .define(\"CMAKE_CXX_COMPILER\", build.cc(target));\n-\n-    let (dir, build_target, libname) = if target.contains(\"linux\") ||\n-                                          target.contains(\"freebsd\") ||\n-                                          target.contains(\"netbsd\") {\n-        let os_extra = if target.contains(\"android\") && target.contains(\"arm\") {\n-            \"-android\"\n-        } else {\n-            \"\"\n-        };\n-        let builtins_arch = match arch {\n-            \"i586\" => \"i386\",\n-            \"arm\" | \"armv7\" if target.contains(\"android\") => \"armhf\",\n-            \"arm\" if target.contains(\"eabihf\") => \"armhf\",\n-            _ => arch,\n-        };\n-        let target = format!(\"clang_rt.builtins-{}\", builtins_arch);\n-        (\"linux\".to_string(),\n-         target.clone(),\n-         format!(\"{}{}\", target, os_extra))\n-    } else if target.contains(\"apple-darwin\") {\n-        let builtins_arch = match arch {\n-            \"i686\" => \"i386\",\n-            _ => arch,\n-        };\n-        let target = format!(\"clang_rt.builtins_{}_osx\", builtins_arch);\n-        (\"builtins\".to_string(), target.clone(), target)\n-    } else if target.contains(\"apple-ios\") {\n-        cfg.define(\"COMPILER_RT_ENABLE_IOS\", \"ON\");\n-        let target = match arch {\n-            \"armv7s\" => \"hard_pic_armv7em_macho_embedded\".to_string(),\n-            \"aarch64\" => \"builtins_arm64_ios\".to_string(),\n-            _ => format!(\"hard_pic_{}_macho_embedded\", arch),\n-        };\n-        (\"builtins\".to_string(), target.clone(), target)\n-    } else if target.contains(\"windows-gnu\") {\n-        let target = format!(\"clang_rt.builtins-{}\", arch);\n-        (\"windows\".to_string(), target.clone(), target)\n-    } else if target.contains(\"windows-msvc\") {\n-        let builtins_arch = match arch {\n-            \"i586\" | \"i686\" => \"i386\",\n-            _ => arch,\n-        };\n-        (format!(\"windows/{}\", mode),\n-         \"lib/builtins/builtins\".to_string(),\n-         format!(\"clang_rt.builtins-{}\", builtins_arch))\n+       .opt_level(2)\n+       .debug(false);\n+\n+    if target.contains(\"msvc\") {\n+        // Don't pull in extra libraries on MSVC\n+        cfg.flag(\"/Zl\");\n+\n+        // Emulate C99 and C++11's __func__ for MSVC prior to 2013 CTP\n+        cfg.define(\"__func__\", Some(\"__FUNCTION__\"));\n     } else {\n-        panic!(\"can't get os from target: {}\", target)\n-    };\n-    let output = dst.join(\"build/lib\").join(dir)\n-                    .join(staticlib(&libname, target));\n-    build.compiler_rt_built.borrow_mut().insert(target.to_string(),\n-                                                output.clone());\n-    if fs::metadata(&output).is_ok() {\n+        // Turn off various features of gcc and such, mostly copying\n+        // compiler-rt's build system already\n+        cfg.flag(\"-fno-builtin\");\n+        cfg.flag(\"-fvisibility=hidden\");\n+        cfg.flag(\"-fomit-frame-pointer\");\n+        cfg.flag(\"-ffreestanding\");\n+    }\n+\n+    let mut sources = vec![\n+        \"absvdi2.c\",\n+        \"absvsi2.c\",\n+        \"adddf3.c\",\n+        \"addsf3.c\",\n+        \"addvdi3.c\",\n+        \"addvsi3.c\",\n+        \"apple_versioning.c\",\n+        \"ashldi3.c\",\n+        \"ashrdi3.c\",\n+        \"clear_cache.c\",\n+        \"clzdi2.c\",\n+        \"clzsi2.c\",\n+        \"cmpdi2.c\",\n+        \"comparedf2.c\",\n+        \"comparesf2.c\",\n+        \"ctzdi2.c\",\n+        \"ctzsi2.c\",\n+        \"divdc3.c\",\n+        \"divdf3.c\",\n+        \"divdi3.c\",\n+        \"divmoddi4.c\",\n+        \"divmodsi4.c\",\n+        \"divsc3.c\",\n+        \"divsf3.c\",\n+        \"divsi3.c\",\n+        \"divxc3.c\",\n+        \"extendsfdf2.c\",\n+        \"extendhfsf2.c\",\n+        \"ffsdi2.c\",\n+        \"fixdfdi.c\",\n+        \"fixdfsi.c\",\n+        \"fixsfdi.c\",\n+        \"fixsfsi.c\",\n+        \"fixunsdfdi.c\",\n+        \"fixunsdfsi.c\",\n+        \"fixunssfdi.c\",\n+        \"fixunssfsi.c\",\n+        \"fixunsxfdi.c\",\n+        \"fixunsxfsi.c\",\n+        \"fixxfdi.c\",\n+        \"floatdidf.c\",\n+        \"floatdisf.c\",\n+        \"floatdixf.c\",\n+        \"floatsidf.c\",\n+        \"floatsisf.c\",\n+        \"floatundidf.c\",\n+        \"floatundisf.c\",\n+        \"floatundixf.c\",\n+        \"floatunsidf.c\",\n+        \"floatunsisf.c\",\n+        \"int_util.c\",\n+        \"lshrdi3.c\",\n+        \"moddi3.c\",\n+        \"modsi3.c\",\n+        \"muldc3.c\",\n+        \"muldf3.c\",\n+        \"muldi3.c\",\n+        \"mulodi4.c\",\n+        \"mulosi4.c\",\n+        \"muloti4.c\",\n+        \"mulsc3.c\",\n+        \"mulsf3.c\",\n+        \"mulvdi3.c\",\n+        \"mulvsi3.c\",\n+        \"mulxc3.c\",\n+        \"negdf2.c\",\n+        \"negdi2.c\",\n+        \"negsf2.c\",\n+        \"negvdi2.c\",\n+        \"negvsi2.c\",\n+        \"paritydi2.c\",\n+        \"paritysi2.c\",\n+        \"popcountdi2.c\",\n+        \"popcountsi2.c\",\n+        \"powidf2.c\",\n+        \"powisf2.c\",\n+        \"powixf2.c\",\n+        \"subdf3.c\",\n+        \"subsf3.c\",\n+        \"subvdi3.c\",\n+        \"subvsi3.c\",\n+        \"truncdfhf2.c\",\n+        \"truncdfsf2.c\",\n+        \"truncsfhf2.c\",\n+        \"ucmpdi2.c\",\n+        \"udivdi3.c\",\n+        \"udivmoddi4.c\",\n+        \"udivmodsi4.c\",\n+        \"udivsi3.c\",\n+        \"umoddi3.c\",\n+        \"umodsi3.c\",\n+    ];\n+\n+    if !target.contains(\"ios\") {\n+        sources.extend(vec![\n+            \"absvti2.c\",\n+            \"addtf3.c\",\n+            \"addvti3.c\",\n+            \"ashlti3.c\",\n+            \"ashrti3.c\",\n+            \"clzti2.c\",\n+            \"cmpti2.c\",\n+            \"ctzti2.c\",\n+            \"divtf3.c\",\n+            \"divti3.c\",\n+            \"ffsti2.c\",\n+            \"fixdfti.c\",\n+            \"fixsfti.c\",\n+            \"fixunsdfti.c\",\n+            \"fixunssfti.c\",\n+            \"fixunsxfti.c\",\n+            \"fixxfti.c\",\n+            \"floattidf.c\",\n+            \"floattisf.c\",\n+            \"floattixf.c\",\n+            \"floatuntidf.c\",\n+            \"floatuntisf.c\",\n+            \"floatuntixf.c\",\n+            \"lshrti3.c\",\n+            \"modti3.c\",\n+            \"multf3.c\",\n+            \"multi3.c\",\n+            \"mulvti3.c\",\n+            \"negti2.c\",\n+            \"negvti2.c\",\n+            \"parityti2.c\",\n+            \"popcountti2.c\",\n+            \"powitf2.c\",\n+            \"subtf3.c\",\n+            \"subvti3.c\",\n+            \"trampoline_setup.c\",\n+            \"ucmpti2.c\",\n+            \"udivmodti4.c\",\n+            \"udivti3.c\",\n+            \"umodti3.c\",\n+        ]);\n+    }\n+\n+    if target.contains(\"apple\") {\n+        sources.extend(vec![\n+            \"atomic_flag_clear.c\",\n+            \"atomic_flag_clear_explicit.c\",\n+            \"atomic_flag_test_and_set.c\",\n+            \"atomic_flag_test_and_set_explicit.c\",\n+            \"atomic_signal_fence.c\",\n+            \"atomic_thread_fence.c\",\n+        ]);\n+    }\n+\n+    if !target.contains(\"windows\") {\n+        sources.push(\"emutls.c\");\n+    }\n+\n+    if target.contains(\"msvc\") {\n+        if target.contains(\"x86_64\") {\n+            sources.extend(vec![\n+                \"x86_64/floatdidf.c\",\n+                \"x86_64/floatdisf.c\",\n+                \"x86_64/floatdixf.c\",\n+            ]);\n+        }\n+    } else {\n+        sources.push(\"gcc_personality_v0.c\");\n+\n+        if target.contains(\"x86_64\") {\n+            sources.extend(vec![\n+                \"x86_64/chkstk.S\",\n+                \"x86_64/chkstk2.S\",\n+                \"x86_64/floatdidf.c\",\n+                \"x86_64/floatdisf.c\",\n+                \"x86_64/floatdixf.c\",\n+                \"x86_64/floatundidf.S\",\n+                \"x86_64/floatundisf.S\",\n+                \"x86_64/floatundixf.S\",\n+            ]);\n+        }\n+\n+        if target.contains(\"i386\") ||\n+           target.contains(\"i586\") ||\n+           target.contains(\"i686\") {\n+            sources.extend(vec![\n+                \"i386/ashldi3.S\",\n+                \"i386/ashrdi3.S\",\n+                \"i386/chkstk.S\",\n+                \"i386/chkstk2.S\",\n+                \"i386/divdi3.S\",\n+                \"i386/floatdidf.S\",\n+                \"i386/floatdisf.S\",\n+                \"i386/floatdixf.S\",\n+                \"i386/floatundidf.S\",\n+                \"i386/floatundisf.S\",\n+                \"i386/floatundixf.S\",\n+                \"i386/lshrdi3.S\",\n+                \"i386/moddi3.S\",\n+                \"i386/muldi3.S\",\n+                \"i386/udivdi3.S\",\n+                \"i386/umoddi3.S\",\n+            ]);\n+        }\n+    }\n+\n+    if target.contains(\"arm\") && !target.contains(\"ios\") {\n+        sources.extend(vec![\n+            \"arm/aeabi_cdcmp.S\",\n+            \"arm/aeabi_cdcmpeq_check_nan.c\",\n+            \"arm/aeabi_cfcmp.S\",\n+            \"arm/aeabi_cfcmpeq_check_nan.c\",\n+            \"arm/aeabi_dcmp.S\",\n+            \"arm/aeabi_div0.c\",\n+            \"arm/aeabi_drsub.c\",\n+            \"arm/aeabi_fcmp.S\",\n+            \"arm/aeabi_frsub.c\",\n+            \"arm/aeabi_idivmod.S\",\n+            \"arm/aeabi_ldivmod.S\",\n+            \"arm/aeabi_memcmp.S\",\n+            \"arm/aeabi_memcpy.S\",\n+            \"arm/aeabi_memmove.S\",\n+            \"arm/aeabi_memset.S\",\n+            \"arm/aeabi_uidivmod.S\",\n+            \"arm/aeabi_uldivmod.S\",\n+            \"arm/bswapdi2.S\",\n+            \"arm/bswapsi2.S\",\n+            \"arm/clzdi2.S\",\n+            \"arm/clzsi2.S\",\n+            \"arm/comparesf2.S\",\n+            \"arm/divmodsi4.S\",\n+            \"arm/divsi3.S\",\n+            \"arm/modsi3.S\",\n+            \"arm/switch16.S\",\n+            \"arm/switch32.S\",\n+            \"arm/switch8.S\",\n+            \"arm/switchu8.S\",\n+            \"arm/sync_synchronize.S\",\n+            \"arm/udivmodsi4.S\",\n+            \"arm/udivsi3.S\",\n+            \"arm/umodsi3.S\",\n+        ]);\n+    }\n+\n+    if target.contains(\"armv7\") {\n+        sources.extend(vec![\n+            \"arm/sync_fetch_and_add_4.S\",\n+            \"arm/sync_fetch_and_add_8.S\",\n+            \"arm/sync_fetch_and_and_4.S\",\n+            \"arm/sync_fetch_and_and_8.S\",\n+            \"arm/sync_fetch_and_max_4.S\",\n+            \"arm/sync_fetch_and_max_8.S\",\n+            \"arm/sync_fetch_and_min_4.S\",\n+            \"arm/sync_fetch_and_min_8.S\",\n+            \"arm/sync_fetch_and_nand_4.S\",\n+            \"arm/sync_fetch_and_nand_8.S\",\n+            \"arm/sync_fetch_and_or_4.S\",\n+            \"arm/sync_fetch_and_or_8.S\",\n+            \"arm/sync_fetch_and_sub_4.S\",\n+            \"arm/sync_fetch_and_sub_8.S\",\n+            \"arm/sync_fetch_and_umax_4.S\",\n+            \"arm/sync_fetch_and_umax_8.S\",\n+            \"arm/sync_fetch_and_umin_4.S\",\n+            \"arm/sync_fetch_and_umin_8.S\",\n+            \"arm/sync_fetch_and_xor_4.S\",\n+            \"arm/sync_fetch_and_xor_8.S\",\n+        ]);\n+    }\n+\n+    if target.contains(\"eabihf\") {\n+        sources.extend(vec![\n+            \"arm/adddf3vfp.S\",\n+            \"arm/addsf3vfp.S\",\n+            \"arm/divdf3vfp.S\",\n+            \"arm/divsf3vfp.S\",\n+            \"arm/eqdf2vfp.S\",\n+            \"arm/eqsf2vfp.S\",\n+            \"arm/extendsfdf2vfp.S\",\n+            \"arm/fixdfsivfp.S\",\n+            \"arm/fixsfsivfp.S\",\n+            \"arm/fixunsdfsivfp.S\",\n+            \"arm/fixunssfsivfp.S\",\n+            \"arm/floatsidfvfp.S\",\n+            \"arm/floatsisfvfp.S\",\n+            \"arm/floatunssidfvfp.S\",\n+            \"arm/floatunssisfvfp.S\",\n+            \"arm/gedf2vfp.S\",\n+            \"arm/gesf2vfp.S\",\n+            \"arm/gtdf2vfp.S\",\n+            \"arm/gtsf2vfp.S\",\n+            \"arm/ledf2vfp.S\",\n+            \"arm/lesf2vfp.S\",\n+            \"arm/ltdf2vfp.S\",\n+            \"arm/ltsf2vfp.S\",\n+            \"arm/muldf3vfp.S\",\n+            \"arm/mulsf3vfp.S\",\n+            \"arm/negdf2vfp.S\",\n+            \"arm/negsf2vfp.S\",\n+            \"arm/nedf2vfp.S\",\n+            \"arm/nesf2vfp.S\",\n+            \"arm/restore_vfp_d8_d15_regs.S\",\n+            \"arm/save_vfp_d8_d15_regs.S\",\n+            \"arm/subdf3vfp.S\",\n+            \"arm/subsf3vfp.S\",\n+            \"arm/truncdfsf2vfp.S\",\n+            \"arm/unorddf2vfp.S\",\n+            \"arm/unordsf2vfp.S\",\n+        ]);\n+    }\n+\n+    if target.contains(\"aarch64\") {\n+        sources.extend(vec![\n+            \"comparetf2.c\",\n+            \"extenddftf2.c\",\n+            \"extendsftf2.c\",\n+            \"fixtfdi.c\",\n+            \"fixtfsi.c\",\n+            \"fixtfti.c\",\n+            \"fixunstfdi.c\",\n+            \"fixunstfsi.c\",\n+            \"fixunstfti.c\",\n+            \"floatditf.c\",\n+            \"floatsitf.c\",\n+            \"floatunditf.c\",\n+            \"floatunsitf.c\",\n+            \"multc3.c\",\n+            \"trunctfdf2.c\",\n+            \"trunctfsf2.c\",\n+        ]);\n+    }\n+\n+    let mut out_of_date = false;\n+    for src in sources {\n+        let src = build.src.join(\"src/compiler-rt/lib/builtins\").join(src);\n+        out_of_date = out_of_date || !up_to_date(&src, &output);\n+        cfg.file(src);\n+    }\n+    if !out_of_date {\n         return\n     }\n-    let _ = fs::remove_dir_all(&dst);\n-    t!(fs::create_dir_all(&dst));\n-    cfg.build_target(&build_target);\n-    cfg.build();\n+    cfg.compile(\"libcompiler-rt.a\");\n }\n \n /// Compiles the `rust_test_helpers.c` library which we used in various"}, {"sha": "1ce8c73123244d92344468ffa7cc9f494528393e", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -347,9 +347,7 @@ impl<'a> Step<'a> {\n                 vec![self.libstd(compiler),\n                      self.target(host).rustc(compiler.stage)]\n             }\n-            Source::CompilerRt { _dummy } => {\n-                vec![self.llvm(()).target(&build.config.build)]\n-            }\n+            Source::CompilerRt { _dummy } => Vec::new(),\n             Source::Llvm { _dummy } => Vec::new(),\n             Source::TestHelpers { _dummy } => Vec::new(),\n             Source::DebuggerScripts { stage: _ } => Vec::new(),"}, {"sha": "b5230132bcb666e3cb9dac6e821fe1d9edd71c3c", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c822cee29b5b939340c2cb0dfefa9a49742d77/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=e7c822cee29b5b939340c2cb0dfefa9a49742d77", "patch": "@@ -103,7 +103,10 @@ pub fn add_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n /// Uses last-modified time checks to verify this.\n pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n     let threshold = mtime(dst);\n-    let meta = t!(fs::metadata(src));\n+    let meta = match fs::metadata(src) {\n+        Ok(meta) => meta,\n+        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n+    };\n     if meta.is_dir() {\n         dir_up_to_date(src, &threshold)\n     } else {"}]}