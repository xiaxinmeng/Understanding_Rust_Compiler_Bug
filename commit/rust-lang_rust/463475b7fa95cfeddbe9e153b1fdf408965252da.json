{"sha": "463475b7fa95cfeddbe9e153b1fdf408965252da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzQ3NWI3ZmE5NWNmZWRkYmU5ZTE1M2IxZmRmNDA4OTY1MjUyZGE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:09:35Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "librustc_llvm: use `#[deriving(Copy)]`", "tree": {"sha": "7bfec3f407c5ce1a1e2f09883028ae161a8b1724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfec3f407c5ce1a1e2f09883028ae161a8b1724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463475b7fa95cfeddbe9e153b1fdf408965252da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463475b7fa95cfeddbe9e153b1fdf408965252da", "html_url": "https://github.com/rust-lang/rust/commit/463475b7fa95cfeddbe9e153b1fdf408965252da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463475b7fa95cfeddbe9e153b1fdf408965252da/comments", "author": null, "committer": null, "parents": [{"sha": "db45be2616edb658427fb4986d2418b22150cb16", "url": "https://api.github.com/repos/rust-lang/rust/commits/db45be2616edb658427fb4986d2418b22150cb16", "html_url": "https://github.com/rust-lang/rust/commit/db45be2616edb658427fb4986d2418b22150cb16"}], "stats": {"total": 71, "additions": 22, "deletions": 49}, "files": [{"sha": "3bf9c2d44f72184a78eef8c528c643768561ae3d", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/463475b7fa95cfeddbe9e153b1fdf408965252da/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463475b7fa95cfeddbe9e153b1fdf408965252da/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=463475b7fa95cfeddbe9e153b1fdf408965252da", "patch": "@@ -17,15 +17,14 @@ use libc::c_char;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n \n+#[deriving(Copy)]\n pub enum OptimizationDiagnosticKind {\n     OptimizationRemark,\n     OptimizationMissed,\n     OptimizationAnalysis,\n     OptimizationFailure,\n }\n \n-impl Copy for OptimizationDiagnosticKind {}\n-\n impl OptimizationDiagnosticKind {\n     pub fn describe(self) -> &'static str {\n         match self {\n@@ -69,15 +68,14 @@ impl OptimizationDiagnostic {\n     }\n }\n \n+#[deriving(Copy)]\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n \n     /// LLVM has other types that we do not wrap here.\n     UnknownDiagnostic(DiagnosticInfoRef),\n }\n \n-impl Copy for Diagnostic {}\n-\n impl Diagnostic {\n     pub unsafe fn unpack(di: DiagnosticInfoRef) -> Diagnostic {\n         let kind = super::LLVMGetDiagInfoKind(di);"}, {"sha": "3528b510ea1bbf6ae4b8c89bc8958baae2fe9b66", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 45, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/463475b7fa95cfeddbe9e153b1fdf408965252da/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463475b7fa95cfeddbe9e153b1fdf408965252da/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=463475b7fa95cfeddbe9e153b1fdf408965252da", "patch": "@@ -68,7 +68,7 @@ pub const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to uint.\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum CallConv {\n     CCallConv = 0,\n     FastCallConv = 8,\n@@ -78,20 +78,18 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n }\n \n-impl Copy for CallConv {}\n-\n+#[deriving(Copy)]\n pub enum Visibility {\n     LLVMDefaultVisibility = 0,\n     HiddenVisibility = 1,\n     ProtectedVisibility = 2,\n }\n \n-impl Copy for Visibility {}\n-\n // This enum omits the obsolete (and no-op) linkage types DLLImportLinkage,\n // DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n // LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n // they've been removed in upstream LLVM commit r203866.\n+#[deriving(Copy)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n     AvailableExternallyLinkage = 1,\n@@ -106,19 +104,15 @@ pub enum Linkage {\n     CommonLinkage = 14,\n }\n \n-impl Copy for Linkage {}\n-\n #[repr(C)]\n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum DiagnosticSeverity {\n     Error,\n     Warning,\n     Remark,\n     Note,\n }\n \n-impl Copy for DiagnosticSeverity {}\n-\n bitflags! {\n     flags Attribute : u32 {\n         const ZExtAttribute = 1 << 0,\n@@ -152,6 +146,7 @@ bitflags! {\n \n \n #[repr(u64)]\n+#[deriving(Copy)]\n pub enum OtherAttribute {\n     // The following are not really exposed in\n     // the LLVM c api so instead to add these\n@@ -172,22 +167,18 @@ pub enum OtherAttribute {\n     NonNullAttribute = 1 << 44,\n }\n \n-impl Copy for OtherAttribute {}\n-\n+#[deriving(Copy)]\n pub enum SpecialAttribute {\n     DereferenceableAttribute(u64)\n }\n \n-impl Copy for SpecialAttribute {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum AttributeSet {\n     ReturnIndex = 0,\n     FunctionIndex = !0\n }\n \n-impl Copy for AttributeSet {}\n-\n pub trait AttrHelper {\n     fn apply_llfn(&self, idx: c_uint, llfn: ValueRef);\n     fn apply_callsite(&self, idx: c_uint, callsite: ValueRef);\n@@ -274,6 +265,7 @@ impl AttrBuilder {\n }\n \n // enum for the LLVM IntPredicate type\n+#[deriving(Copy)]\n pub enum IntPredicate {\n     IntEQ = 32,\n     IntNE = 33,\n@@ -287,9 +279,8 @@ pub enum IntPredicate {\n     IntSLE = 41,\n }\n \n-impl Copy for IntPredicate {}\n-\n // enum for the LLVM RealPredicate type\n+#[deriving(Copy)]\n pub enum RealPredicate {\n     RealPredicateFalse = 0,\n     RealOEQ = 1,\n@@ -309,11 +300,9 @@ pub enum RealPredicate {\n     RealPredicateTrue = 15,\n }\n \n-impl Copy for RealPredicate {}\n-\n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,\n@@ -334,9 +323,8 @@ pub enum TypeKind {\n     X86_MMX   = 15,\n }\n \n-impl Copy for TypeKind {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum AtomicBinOp {\n     AtomicXchg = 0,\n     AtomicAdd  = 1,\n@@ -351,9 +339,8 @@ pub enum AtomicBinOp {\n     AtomicUMin = 10,\n }\n \n-impl Copy for AtomicBinOp {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum AtomicOrdering {\n     NotAtomic = 0,\n     Unordered = 1,\n@@ -365,17 +352,15 @@ pub enum AtomicOrdering {\n     SequentiallyConsistent = 7\n }\n \n-impl Copy for AtomicOrdering {}\n-\n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum FileType {\n     AssemblyFileType = 0,\n     ObjectFileType = 1\n }\n \n-impl Copy for FileType {}\n-\n+#[deriving(Copy)]\n pub enum MetadataType {\n     MD_dbg = 0,\n     MD_tbaa = 1,\n@@ -385,17 +370,14 @@ pub enum MetadataType {\n     MD_tbaa_struct = 5\n }\n \n-impl Copy for MetadataType {}\n-\n // Inline Asm Dialect\n+#[deriving(Copy)]\n pub enum AsmDialect {\n     AD_ATT   = 0,\n     AD_Intel = 1\n }\n \n-impl Copy for AsmDialect {}\n-\n-#[deriving(PartialEq, Clone)]\n+#[deriving(Copy, PartialEq, Clone)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n     CodeGenLevelNone = 0,\n@@ -404,9 +386,7 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n-impl Copy for CodeGenOptLevel {}\n-\n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n     RelocDefault = 0,\n@@ -415,9 +395,8 @@ pub enum RelocMode {\n     RelocDynamicNoPic = 3,\n }\n \n-impl Copy for RelocMode {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum CodeGenModel {\n     CodeModelDefault = 0,\n     CodeModelJITDefault = 1,\n@@ -427,9 +406,8 @@ pub enum CodeGenModel {\n     CodeModelLarge = 5,\n }\n \n-impl Copy for CodeGenModel {}\n-\n #[repr(C)]\n+#[deriving(Copy)]\n pub enum DiagnosticKind {\n     DK_InlineAsm = 0,\n     DK_StackSize,\n@@ -441,8 +419,6 @@ pub enum DiagnosticKind {\n     DK_OptimizationFailure,\n }\n \n-impl Copy for DiagnosticKind {}\n-\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -537,6 +513,7 @@ pub mod debuginfo {\n     pub type DIArray = DIDescriptor;\n     pub type DISubrange = DIDescriptor;\n \n+    #[deriving(Copy)]\n     pub enum DIDescriptorFlags {\n       FlagPrivate            = 1 << 0,\n       FlagProtected          = 1 << 1,\n@@ -555,8 +532,6 @@ pub mod debuginfo {\n       FlagLValueReference    = 1 << 14,\n       FlagRValueReference    = 1 << 15\n     }\n-\n-    impl Copy for DIDescriptorFlags {}\n }\n \n "}]}