{"sha": "9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOWJiOWNlMWQ1MWUyYTljYTQ5NjNiZDQxOGUzNjViNmUxN2ZiZmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-24T19:55:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-26T21:52:38Z"}, "message": "Implement `Reflect` trait with a variant on the standard OIBIT\nsemantics that tests the *interface* of trait objects, rather\nthan what they close over.", "tree": {"sha": "9ba4c4fba17c9d7156bd95b0a46dc1c45f4984c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ba4c4fba17c9d7156bd95b0a46dc1c45f4984c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "html_url": "https://github.com/rust-lang/rust/commit/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a923278c6278c63468d74772c58dbf788e88f58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a923278c6278c63468d74772c58dbf788e88f58c", "html_url": "https://github.com/rust-lang/rust/commit/a923278c6278c63468d74772c58dbf788e88f58c"}], "stats": {"total": 281, "additions": 252, "deletions": 29}, "files": [{"sha": "f9bd0ab2f1e0fdbe1e3cb88fcb61413d1e21b8b6", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -244,13 +244,13 @@ pub trait BoxAny {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>>;\n+    fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>>;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl BoxAny for Box<Any> {\n     #[inline]\n-    fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n+    fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n@@ -270,7 +270,7 @@ impl BoxAny for Box<Any> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl BoxAny for Box<Any+Send> {\n     #[inline]\n-    fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n+    fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n         <Box<Any>>::downcast(self)\n     }\n }"}, {"sha": "d3bc07b173ac8e963f5541204ab68e3fded38731", "filename": "src/libcore/any.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -55,7 +55,7 @@\n //! }\n //!\n //! // This function wants to log its parameter out prior to doing work with it.\n-//! fn do_work<T: Debug + 'static>(value: &T) {\n+//! fn do_work<T: Any + Debug>(value: &T) {\n //!     log(value);\n //!     // ...do some other work\n //! }\n@@ -76,7 +76,7 @@ use mem::transmute;\n use option::Option::{self, Some, None};\n use raw::TraitObject;\n use intrinsics;\n-use marker::Sized;\n+use marker::{Reflect, Sized};\n \n ///////////////////////////////////////////////////////////////////////////////\n // Any trait\n@@ -88,14 +88,16 @@ use marker::Sized;\n ///\n /// [mod]: ../index.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Any: 'static {\n+pub trait Any: Reflect + 'static {\n     /// Get the `TypeId` of `self`\n     #[unstable(feature = \"core\",\n                reason = \"this method will likely be replaced by an associated static\")]\n     fn get_type_id(&self) -> TypeId;\n }\n \n-impl<T: 'static> Any for T {\n+impl<T> Any for T\n+    where T: Reflect + 'static\n+{\n     fn get_type_id(&self) -> TypeId { TypeId::of::<T>() }\n }\n \n@@ -107,7 +109,7 @@ impl Any {\n     /// Returns true if the boxed type is the same as `T`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is<T: 'static>(&self) -> bool {\n+    pub fn is<T: Any>(&self) -> bool {\n         // Get TypeId of the type this function is instantiated with\n         let t = TypeId::of::<T>();\n \n@@ -122,7 +124,7 @@ impl Any {\n     /// `None` if it isn't.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> {\n+    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n@@ -140,7 +142,7 @@ impl Any {\n     /// `None` if it isn't.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> {\n+    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         if self.is::<T>() {\n             unsafe {\n                 // Get the raw representation of the trait object\n@@ -159,21 +161,21 @@ impl Any+Send {\n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is<T: 'static>(&self) -> bool {\n+    pub fn is<T: Any>(&self) -> bool {\n         Any::is::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn downcast_ref<T: 'static>(&self) -> Option<&T> {\n+    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {\n         Any::downcast_ref::<T>(self)\n     }\n \n     /// Forwards to the method defined on the type `Any`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn downcast_mut<T: 'static>(&mut self) -> Option<&mut T> {\n+    pub fn downcast_mut<T: Any>(&mut self) -> Option<&mut T> {\n         Any::downcast_mut::<T>(self)\n     }\n }\n@@ -202,7 +204,7 @@ impl TypeId {\n     /// instantiated with\n     #[unstable(feature = \"core\",\n                reason = \"may grow a `Reflect` bound soon via marker traits\")]\n-    pub fn of<T: ?Sized + 'static>() -> TypeId {\n+    pub fn of<T: ?Sized + Any>() -> TypeId {\n         TypeId {\n             t: unsafe { intrinsics::type_id::<T>() },\n         }"}, {"sha": "7225b016e6ba645c6a8315b1159dbd14517e3145", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -72,6 +72,7 @@\n #![feature(rustc_attrs)]\n #![feature(optin_builtin_traits)]\n #![feature(concat_idents)]\n+#![feature(reflect)]\n \n #[macro_use]\n mod macros;"}, {"sha": "26bb53c6b2db76ee59dc1e45c1968a13bf1de0a9", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -450,3 +450,45 @@ pub struct CovariantType<T>;\n #[deprecated(since = \"1.0.0\", reason = \"Replace with `PhantomData<Cell<T>>`\")]\n #[lang=\"invariant_type\"]\n pub struct InvariantType<T>;\n+\n+/// A marker trait indicates a type that can be reflected over. This\n+/// trait is implemented for all types. Its purpose is to ensure that\n+/// when you write a generic function that will employ reflection,\n+/// that must be reflected (no pun intended) in the generic bounds of\n+/// that function. Here is an example:\n+///\n+/// ```\n+/// use std::marker::Reflect;\n+/// use std::any::Any;\n+/// fn foo<T:Reflect+'static>(x: &T) {\n+///     let any: &Any = x;\n+///     if any.is::<u32>() { println!(\"u32\"); }\n+/// }\n+/// ```\n+///\n+/// Without the declaration `T:Reflect`, `foo` would not type check\n+/// (note: as a matter of style, it would be preferable to to write\n+/// `T:Any`, because `T:Any` implies `T:Reflect` and `T:'static`, but\n+/// we use `Reflect` here to show how it works). The `Reflect` bound\n+/// thus serves to alert `foo`'s caller to the fact that `foo` may\n+/// behave differently depending on whether `T=u32` or not. In\n+/// particular, thanks to the `Reflect` bound, callers know that a\n+/// function declared like `fn bar<T>(...)` will always act in\n+/// precisely the same way no matter what type `T` is supplied,\n+/// beacuse there are no bounds declared on `T`. (The ability for a\n+/// caller to reason about what a function may do based solely on what\n+/// generic bounds are declared is often called the [\"parametricity\n+/// property\"][1].)\n+///\n+/// [1]: http://en.wikipedia.org/wiki/Parametricity\n+#[rustc_reflect_like]\n+#[unstable(feature = \"core\", reason = \"requires RFC and more experience\")]\n+pub trait Reflect : MarkerTrait {\n+}\n+\n+#[cfg(stage0)]\n+impl<T> Reflect for T { }\n+\n+#[cfg(not(stage0))]\n+impl Reflect for .. { }\n+"}, {"sha": "f299dc6aaff15183afc54be8de23ed444ffe2156", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -138,6 +138,7 @@ enum SelectionCandidate<'tcx> {\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(ast::DefId),\n     DefaultImplCandidate(ast::DefId),\n+    DefaultImplObjectCandidate(ast::DefId),\n \n     /// This is a trait matching with a projected type as `Self`, and\n     /// we found an applicable bound in the trait definition.\n@@ -1160,7 +1161,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         if ty::trait_has_default_impl(self.tcx(), def_id) {\n             match self_ty.sty {\n-                ty::ty_trait(..) |\n+                ty::ty_trait(..) => {\n+                    // For object types, we don't know what the closed\n+                    // over types are. For most traits, this means we\n+                    // conservatively say nothing; a candidate may be\n+                    // added by `assemble_candidates_from_object_ty`.\n+                    // However, for the kind of magic reflect trait,\n+                    // we consider it to be implemented even for\n+                    // object types, because it just lets you reflect\n+                    // onto the object type, not into the object's\n+                    // interior.\n+                    if ty::has_attr(self.tcx(), def_id, \"rustc_reflect_like\") {\n+                        candidates.vec.push(DefaultImplObjectCandidate(def_id));\n+                    }\n+                }\n                 ty::ty_param(..) |\n                 ty::ty_projection(..) => {\n                     // In these cases, we don't know what the actual\n@@ -1798,7 +1812,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             DefaultImplCandidate(trait_def_id) => {\n-                let data = try!(self.confirm_default_impl_candidate(obligation, trait_def_id));\n+                let data = self.confirm_default_impl_candidate(obligation, trait_def_id);\n+                Ok(VtableDefaultImpl(data))\n+            }\n+\n+            DefaultImplObjectCandidate(trait_def_id) => {\n+                let data = self.confirm_default_impl_object_candidate(obligation, trait_def_id);\n                 Ok(VtableDefaultImpl(data))\n             }\n \n@@ -1927,17 +1946,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// 2. For each where-clause `C` declared on `Foo`, `[Self => X] C` holds.\n     fn confirm_default_impl_candidate(&mut self,\n                                       obligation: &TraitObligation<'tcx>,\n-                                      impl_def_id: ast::DefId)\n-                              -> Result<VtableDefaultImplData<PredicateObligation<'tcx>>,\n-                                        SelectionError<'tcx>>\n+                                      trait_def_id: ast::DefId)\n+                                      -> VtableDefaultImplData<PredicateObligation<'tcx>>\n     {\n         debug!(\"confirm_default_impl_candidate({}, {})\",\n                obligation.repr(self.tcx()),\n-               impl_def_id.repr(self.tcx()));\n+               trait_def_id.repr(self.tcx()));\n \n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.0.self_ty());\n         match self.constituent_types_for_ty(self_ty) {\n-            Some(types) => Ok(self.vtable_default_impl(obligation, impl_def_id, types)),\n+            Some(types) => self.vtable_default_impl(obligation, trait_def_id, types),\n             None => {\n                 self.tcx().sess.bug(\n                     &format!(\n@@ -1947,6 +1965,39 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n+    fn confirm_default_impl_object_candidate(&mut self,\n+                                             obligation: &TraitObligation<'tcx>,\n+                                             trait_def_id: ast::DefId)\n+                                             -> VtableDefaultImplData<PredicateObligation<'tcx>>\n+    {\n+        debug!(\"confirm_default_impl_object_candidate({}, {})\",\n+               obligation.repr(self.tcx()),\n+               trait_def_id.repr(self.tcx()));\n+\n+        assert!(ty::has_attr(self.tcx(), trait_def_id, \"rustc_reflect_like\"));\n+\n+        let self_ty = self.infcx.shallow_resolve(obligation.predicate.0.self_ty());\n+        match self_ty.sty {\n+            ty::ty_trait(ref data) => {\n+                // OK to skip the binder, since vtable_default_impl reintroduces it\n+                let input_types = data.principal.skip_binder().substs.types.get_slice(TypeSpace);\n+                let assoc_types = data.bounds.projection_bounds\n+                                             .iter()\n+                                             .map(|pb| pb.skip_binder().ty);\n+                let all_types: Vec<_> = input_types.iter().cloned()\n+                                                          .chain(assoc_types)\n+                                                          .collect();\n+                self.vtable_default_impl(obligation, trait_def_id, all_types)\n+            }\n+            _ => {\n+                self.tcx().sess.bug(\n+                    &format!(\n+                        \"asked to confirm default object implementation for non-object type: {}\",\n+                        self_ty.repr(self.tcx())));\n+            }\n+        }\n+    }\n+\n     /// See `confirm_default_impl_candidate`\n     fn vtable_default_impl(&mut self,\n                            obligation: &TraitObligation<'tcx>,\n@@ -2530,6 +2581,7 @@ impl<'tcx> Repr<'tcx> for SelectionCandidate<'tcx> {\n             ParamCandidate(ref a) => format!(\"ParamCandidate({})\", a.repr(tcx)),\n             ImplCandidate(a) => format!(\"ImplCandidate({})\", a.repr(tcx)),\n             DefaultImplCandidate(t) => format!(\"DefaultImplCandidate({:?})\", t),\n+            DefaultImplObjectCandidate(t) => format!(\"DefaultImplObjectCandidate({:?})\", t),\n             ProjectionCandidate => format!(\"ProjectionCandidate\"),\n             FnPointerCandidate => format!(\"FnPointerCandidate\"),\n             ObjectCandidate => format!(\"ObjectCandidate\"),"}, {"sha": "46115ae468ff916aebf8f38d4a95d472f633e3b7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -74,6 +74,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     (\"rustc_diagnostic_macros\", \"1.0.0\", Active),\n     (\"unboxed_closures\", \"1.0.0\", Active),\n+    (\"reflect\", \"1.0.0\", Active),\n     (\"import_shadowing\", \"1.0.0\", Removed),\n     (\"advanced_slice_patterns\", \"1.0.0\", Active),\n     (\"tuple_indexing\", \"1.0.0\", Accepted),\n@@ -281,7 +282,11 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     // FIXME: #19470 this shouldn't be needed forever\n     (\"old_orphan_check\", Whitelisted),\n     (\"old_impl_check\", Whitelisted),\n-    (\"rustc_paren_sugar\", Whitelisted), // FIXME: #18101 temporary unboxed closure hack\n+\n+    (\"rustc_paren_sugar\", Gated(\"unboxed_closures\",\n+                                \"unboxed_closures are still evolving\")),\n+    (\"rustc_reflect_like\", Gated(\"reflect\",\n+                                 \"defining reflective traits is still evolving\")),\n \n     // Crate level attributes\n     (\"crate_name\", CrateLevel),"}, {"sha": "bd47054f093ce71ebe0d1ba5c7a3cd41d0a99f9c", "filename": "src/test/auxiliary/typeid-intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(core)]\n \n-use std::any::TypeId;\n+use std::any::{Any, TypeId};\n \n pub struct A;\n pub struct B(Option<A>);\n@@ -31,4 +31,4 @@ pub unsafe fn id_F() -> TypeId { TypeId::of::<F>() }\n pub unsafe fn id_G() -> TypeId { TypeId::of::<G>() }\n pub unsafe fn id_H() -> TypeId { TypeId::of::<H>() }\n \n-pub unsafe fn foo<T: 'static>() -> TypeId { TypeId::of::<T>() }\n+pub unsafe fn foo<T: Any>() -> TypeId { TypeId::of::<T>() }"}, {"sha": "5e81bf50ae449f0f9f3d48de057741c132b25746", "filename": "src/test/auxiliary/typeid-intrinsic2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(core)]\n \n-use std::any::TypeId;\n+use std::any::{Any, TypeId};\n \n pub struct A;\n pub struct B(Option<A>);\n@@ -31,4 +31,4 @@ pub unsafe fn id_F() -> TypeId { TypeId::of::<F>() }\n pub unsafe fn id_G() -> TypeId { TypeId::of::<G>() }\n pub unsafe fn id_H() -> TypeId { TypeId::of::<H>() }\n \n-pub unsafe fn foo<T: 'static>() -> TypeId { TypeId::of::<T>() }\n+pub unsafe fn foo<T:Any>() -> TypeId { TypeId::of::<T>() }"}, {"sha": "9cf0d252c2d55ce2d7af9471ef6d0b3f1c09b8e2", "filename": "src/test/compile-fail/reflect-assoc.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that types that appear in assoc bindings in an object\n+// type are subject to the reflect check.\n+\n+use std::marker::Reflect;\n+use std::io::Write;\n+\n+trait Get {\n+    type Output;\n+    fn get(self) -> Self::Output;\n+}\n+\n+struct Struct<T>(T);\n+\n+fn is_reflect<T:Reflect>() { }\n+\n+fn a<T>() {\n+    is_reflect::<Box<Get<Output=T>>>(); //~ ERROR not implemented\n+}\n+\n+fn ok_a<T: Reflect>() {\n+    is_reflect::<Box<Get<Output=T>>>(); // OK\n+}\n+\n+fn main() {\n+}"}, {"sha": "9f074667feb3dc67a80d60340c6556728fb06ec0", "filename": "src/test/compile-fail/reflect-object-param.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that types that appear in input types in an object type are\n+// subject to the reflect check.\n+\n+use std::marker::Reflect;\n+use std::io::Write;\n+\n+trait Get<T> {\n+    fn get(self) -> T;\n+}\n+\n+struct Struct<T>(T);\n+\n+fn is_reflect<T:Reflect>() { }\n+\n+fn a<T>() {\n+    is_reflect::<T>(); //~ ERROR not implemented\n+}\n+\n+fn ok_a<T: Reflect>() {\n+    is_reflect::<T>(); // OK\n+}\n+\n+fn b<T>() {\n+    is_reflect::<Box<Get<T>>>(); //~ ERROR not implemented\n+}\n+\n+fn ok_b<T: Reflect>() {\n+    is_reflect::<Box<Get<T>>>(); // OK\n+}\n+\n+fn c<T>() {\n+    is_reflect::<Box<Get<Struct<T>>>>(); //~ ERROR not implemented\n+}\n+\n+fn main() {\n+    is_reflect::<Box<Get<Struct<()>>>>(); // OK\n+}"}, {"sha": "701aa5b40bc0a6314b50e04b28a6975c9a95280a", "filename": "src/test/compile-fail/reflect.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fcompile-fail%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Fcompile-fail%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that there is no way to get a generic type `T` to be\n+// considered as `Reflect` (or accessible via something that is\n+// considered `Reflect`) without a reflect bound, but that any\n+// concrete type works fine. Note that object types are tested\n+// separately.\n+\n+use std::marker::Reflect;\n+use std::io::Write;\n+\n+struct Struct<T>(T);\n+\n+fn is_reflect<T:Reflect>() { }\n+\n+fn c<T>() {\n+    is_reflect::<Struct<T>>(); //~ ERROR not implemented\n+}\n+\n+fn ok_c<T: Reflect>() {\n+    is_reflect::<Struct<T>>(); // OK\n+}\n+\n+fn d<T>() {\n+    is_reflect::<(i32, T)>(); //~ ERROR not implemented\n+}\n+\n+fn main() {\n+    is_reflect::<&i32>(); // OK\n+    is_reflect::<Box<Write>>(); // OK\n+}"}, {"sha": "f4e056b3f21b1d68f9c15faa04ee73f07756541e", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -30,7 +30,7 @@ impl Wrap for int {\n     }\n }\n \n-fn is<T:'static>(x: &Any) -> bool {\n+fn is<T:Any>(x: &Any) -> bool {\n     x.is::<T>()\n }\n "}, {"sha": "a40989d4e37fedc31a939414c17cec2b1816d1cc", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=9c9bb9ce1d51e2a9ca4963bd418e365b6e17fbfa", "patch": "@@ -15,7 +15,7 @@\n \n #![feature(unboxed_closures, core)]\n \n-use std::any::TypeId;\n+use std::any::{Any, TypeId};\n \n fn main() {\n     // Bare fns\n@@ -63,7 +63,7 @@ fn main() {\n         assert!(a != b);\n     }\n \n-    fn id<T:'static>(_: T) -> TypeId {\n+    fn id<T:Any>(_: T) -> TypeId {\n         TypeId::of::<T>()\n     }\n }"}]}