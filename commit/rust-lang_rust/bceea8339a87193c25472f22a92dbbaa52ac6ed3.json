{"sha": "bceea8339a87193c25472f22a92dbbaa52ac6ed3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZWVhODMzOWE4NzE5M2MyNTQ3MmYyMmE5MmRiYmFhNTJhYzZlZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-28T00:05:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-28T14:31:28Z"}, "message": "change def's that are always local to use node_id, add --inline opt", "tree": {"sha": "6cc937e467ca51637917677d92ce039f09ac0132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc937e467ca51637917677d92ce039f09ac0132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bceea8339a87193c25472f22a92dbbaa52ac6ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bceea8339a87193c25472f22a92dbbaa52ac6ed3", "html_url": "https://github.com/rust-lang/rust/commit/bceea8339a87193c25472f22a92dbbaa52ac6ed3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bceea8339a87193c25472f22a92dbbaa52ac6ed3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b2f34bd0f301f550a55ad1ccf43b65f3d5a0c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b2f34bd0f301f550a55ad1ccf43b65f3d5a0c1", "html_url": "https://github.com/rust-lang/rust/commit/a1b2f34bd0f301f550a55ad1ccf43b65f3d5a0c1"}], "stats": {"total": 236, "additions": 125, "deletions": 111}, "files": [{"sha": "20e6f06802a665bd4312212d4c9e05676deaf077", "filename": "Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -410,12 +410,13 @@ TSREQS :=\t\t\t\t\t\t\t\t\t\t\t\\\n FUZZ := $(HBIN3_H_$(CFG_HOST_TRIPLE))/fuzzer$(X)\n CARGO := $(HBIN3_H_$(CFG_HOST_TRIPLE))/cargo$(X)\n RUSTDOC := $(HBIN3_H_$(CFG_HOST_TRIPLE))/rustdoc$(X)\n-SERIALIZER := $(HBIN2_H_$(CFG_HOST_TRIPLE))/serializer$(X)\n-# ^^ Note: we use HBIN2 because that is the only stage for which\n-#    we build a complete rustc by default, and serializer requires \n-#    the complete rustc.\n \n-all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC) $(SERIALIZER)\n+all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC) serializer\n+\n+serializer: $(HBIN1_H_$(CFG_HOST_TRIPLE))/serializer$(X) \\\n+            $(SREQ1_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n+# ^^ Note: we use HBIN1 because that is built by the snapshot compiler\n+#    and sometimes we need the serializer to build the later stages.\n \n endif\n "}, {"sha": "79ff333c30b69777cfb008c166ff08243a8be4fe", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/configure", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -670,5 +670,6 @@ rm -f config.mk.bak\n \n msg\n copy ${CFG_SRC_DIR}Makefile.in ./Makefile\n+chmod u-w Makefile # it is generated, make it read-only\n \n step_msg \"complete\""}, {"sha": "fd3b718231af67b87c871a8768d28ad083496502", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -177,9 +177,10 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                 last_uses: last_uses, impl_map: impl_map,\n                 method_map: method_map, dict_map: dict_map};\n \n+    let ienbld = sess.opts.inline;\n     let inline_map =\n         time(time_passes, \"inline\",\n-             bind inline::instantiate_inlines(ty_cx, maps, crate));\n+             bind inline::instantiate_inlines(ienbld, ty_cx, maps, crate));\n \n     let (llmod, link_meta) =\n         time(time_passes, \"translation\",\n@@ -363,6 +364,7 @@ fn build_session_options(match: getopts::match,\n         lint_opts += [(lint::ctypes, false)];\n     }\n     let monomorphize = opt_present(match, \"monomorphize\");\n+    let inline = opt_present(match, \"inline\");\n \n     let output_type =\n         if parse_only || no_trans {\n@@ -441,6 +443,7 @@ fn build_session_options(match: getopts::match,\n           no_trans: no_trans,\n           no_asm_comments: no_asm_comments,\n           monomorphize: monomorphize,\n+          inline: inline,\n           warn_unused_imports: warn_unused_imports};\n     ret sopts;\n }\n@@ -511,6 +514,7 @@ fn opts() -> [getopts::opt] {\n          optflag(\"no-verify\"),\n          optflag(\"no-lint-ctypes\"),\n          optflag(\"monomorphize\"),\n+         optflag(\"inline\"),\n          optmulti(\"cfg\"), optflag(\"test\"),\n          optflag(\"lib\"), optflag(\"bin\"), optflag(\"static\"), optflag(\"gc\"),\n          optflag(\"no-asm-comments\"),"}, {"sha": "b967ad23f58c031006b7d2586f4ccab1206e8b89", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -46,6 +46,7 @@ type options =\n      no_trans: bool,\n      no_asm_comments: bool,\n      monomorphize: bool,\n+     inline: bool,\n      warn_unused_imports: bool};\n \n type crate_metadata = {name: str, data: [u8]};"}, {"sha": "7b09bb59b0f34cadc209851a986ce6828a06a11e", "filename": "src/comp/metadata/astencode.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fastencode.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -354,24 +354,22 @@ impl of tr for ast::def {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def {\n         alt self {\n           ast::def_fn(did, p) { ast::def_fn(did.tr(xcx), p) }\n-          ast::def_self(did) { ast::def_self(did.tr(xcx)) }\n+          ast::def_self(nid) { ast::def_self(xcx.tr_id(nid)) }\n           ast::def_mod(did) { ast::def_mod(did.tr(xcx)) }\n           ast::def_native_mod(did) { ast::def_native_mod(did.tr(xcx)) }\n           ast::def_const(did) { ast::def_const(did.tr(xcx)) }\n-          ast::def_arg(did, m) { ast::def_arg(did.tr_intern(xcx), m) }\n-          ast::def_local(did) { ast::def_local(did.tr_intern(xcx)) }\n+          ast::def_arg(nid, m) { ast::def_arg(xcx.tr_id(nid), m) }\n+          ast::def_local(nid) { ast::def_local(xcx.tr_id(nid)) }\n           ast::def_variant(e_did, v_did) {\n             ast::def_variant(e_did.tr(xcx), v_did.tr(xcx))\n           }\n           ast::def_ty(did) { ast::def_ty(did.tr(xcx)) }\n           ast::def_prim_ty(p) { ast::def_prim_ty(p) }\n           ast::def_ty_param(did, v) { ast::def_ty_param(did.tr(xcx), v) }\n-          ast::def_binding(did) { ast::def_binding(did.tr(xcx)) }\n+          ast::def_binding(nid) { ast::def_binding(xcx.tr_id(nid)) }\n           ast::def_use(did) { ast::def_use(did.tr(xcx)) }\n-          ast::def_upvar(did, def, node_id) {\n-            ast::def_upvar(did.tr_intern(xcx),\n-                           @(*def).tr(xcx),\n-                           xcx.tr_id(node_id))\n+          ast::def_upvar(nid1, def, nid2) {\n+            ast::def_upvar(xcx.tr_id(nid1), @(*def).tr(xcx), xcx.tr_id(nid2))\n           }\n           ast::def_class(did) {\n             ast::def_class(did.tr(xcx))"}, {"sha": "648af0c7a5c4fa33dbe26886aa10755030ae3063", "filename": "src/comp/metadata/astencode_gen.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fastencode_gen.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -8009,20 +8009,20 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n \n     s.emit_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n+                /*syntax::ast::node_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n-                /*syntax::ast::def_id*/\n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n                 /*syntax::ast::mode<syntax::ast::rmode>*/\n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n                 /*syntax::ast::def_id*//*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::prim_ty*/\n                 /*syntax::ast::def_id*//*uint*/\n+                /*syntax::ast::node_id*/\n                 /*syntax::ast::def_id*/\n-                /*syntax::ast::def_id*/\n-                /*syntax::ast::def_id*//*@syntax::ast::def*/\n+                /*syntax::ast::node_id*//*@syntax::ast::def*/\n                 /*syntax::ast::node_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*//*syntax::ast::def_id*/\n@@ -8052,8 +8052,8 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n-                                                                                              v0)\n+                                                                                serialize_27(s,\n+                                                                                             v0)\n                                                                             })\n                                                 }\n                                             })\n@@ -8101,8 +8101,8 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n-                                                                                              v0)\n+                                                                                serialize_27(s,\n+                                                                                             v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n@@ -8118,8 +8118,8 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n-                                                                                              v0)\n+                                                                                serialize_27(s,\n+                                                                                             v0)\n                                                                             })\n                                                 }\n                                             })\n@@ -8192,8 +8192,8 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n-                                                                                              v0)\n+                                                                                serialize_27(s,\n+                                                                                             v0)\n                                                                             })\n                                                 }\n                                             })\n@@ -8216,8 +8216,8 @@ fn serialize_161<S: std::serialization::serializer>(s: S,\n                                                 {\n                                                     s.emit_enum_variant_arg(0u,\n                                                                             {||\n-                                                                                serialize_162(s,\n-                                                                                              v0)\n+                                                                                serialize_27(s,\n+                                                                                             v0)\n                                                                             });\n                                                     s.emit_enum_variant_arg(1u,\n                                                                             {||\n@@ -8367,18 +8367,18 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n     s.read_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n \n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n \n                 /*syntax::ast::def_id*/\n \n                 /*syntax::ast::def_id*/\n \n                 /*syntax::ast::def_id*/\n \n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n                 /*syntax::ast::mode<syntax::ast::rmode>*/\n \n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n \n                 /*syntax::ast::def_id*//*syntax::ast::def_id*/\n \n@@ -8388,11 +8388,11 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n \n                 /*syntax::ast::def_id*//*uint*/\n \n-                /*syntax::ast::def_id*/\n+                /*syntax::ast::node_id*/\n \n                 /*syntax::ast::def_id*/\n \n-                /*syntax::ast::def_id*//*@syntax::ast::def*/\n+                /*syntax::ast::node_id*//*@syntax::ast::def*/\n                 /*syntax::ast::node_id*/\n \n                 /*syntax::ast::def_id*/\n@@ -8416,7 +8416,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               1u {\n                                                 syntax::ast::def_self(s.read_enum_variant_arg(0u,\n                                                                                               {||\n-                                                                                                  deserialize_162(s)\n+                                                                                                  deserialize_27(s)\n                                                                                               }))\n                                               }\n                                               2u {\n@@ -8440,7 +8440,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               5u {\n                                                 syntax::ast::def_arg(s.read_enum_variant_arg(0u,\n                                                                                              {||\n-                                                                                                 deserialize_162(s)\n+                                                                                                 deserialize_27(s)\n                                                                                              }),\n                                                                      s.read_enum_variant_arg(1u,\n                                                                                              {||\n@@ -8450,7 +8450,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               6u {\n                                                 syntax::ast::def_local(s.read_enum_variant_arg(0u,\n                                                                                                {||\n-                                                                                                   deserialize_162(s)\n+                                                                                                   deserialize_27(s)\n                                                                                                }))\n                                               }\n                                               7u {\n@@ -8488,7 +8488,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               11u {\n                                                 syntax::ast::def_binding(s.read_enum_variant_arg(0u,\n                                                                                                  {||\n-                                                                                                     deserialize_162(s)\n+                                                                                                     deserialize_27(s)\n                                                                                                  }))\n                                               }\n                                               12u {\n@@ -8500,7 +8500,7 @@ fn deserialize_161<S: std::serialization::deserializer>(s: S) ->\n                                               13u {\n                                                 syntax::ast::def_upvar(s.read_enum_variant_arg(0u,\n                                                                                                {||\n-                                                                                                   deserialize_162(s)\n+                                                                                                   deserialize_27(s)\n                                                                                                }),\n                                                                        s.read_enum_variant_arg(1u,\n                                                                                                {||"}, {"sha": "9c05823f6ecd4369588d03831a1469deb80ac4aa", "filename": "src/comp/middle/inline.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Finline.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -18,7 +18,8 @@ enum ctxt = {\n     mutable to_process: [@ast::item]\n };\n \n-fn instantiate_inlines(tcx: ty::ctxt,\n+fn instantiate_inlines(enabled: bool,\n+                       tcx: ty::ctxt,\n                        maps: maps,\n                        crate: @ast::crate) -> inline_map {\n     let vt = visit::mk_vt(@{\n@@ -31,7 +32,7 @@ fn instantiate_inlines(tcx: ty::ctxt,\n     let inline_map = ast_util::new_def_id_hash();\n     let cx = ctxt({tcx: tcx, maps: maps,\n                    inline_map: inline_map, mutable to_process: []});\n-    visit::visit_crate(*crate, cx, vt);\n+    if enabled { visit::visit_crate(*crate, cx, vt); }\n     while !vec::is_empty(cx.to_process) {\n         let to_process = [];\n         to_process <-> cx.to_process;"}, {"sha": "9cef8b209741c7910657953938e34c2f19877032", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -288,15 +288,15 @@ fn clear_in_current(cx: ctx, my_def: node_id, to: bool) {\n fn clear_def_if_path(cx: ctx, d: def, to: bool)\n     -> option<node_id> {\n     alt d {\n-      def_local(def_id) {\n-        clear_in_current(cx, def_id.node, to);\n-        some(def_id.node)\n+      def_local(nid) {\n+        clear_in_current(cx, nid, to);\n+        some(nid)\n       }\n-      def_arg(def_id, m) {\n+      def_arg(nid, m) {\n         alt ty::resolved_mode(cx.tcx, m) {\n           by_copy | by_move {\n-            clear_in_current(cx, def_id.node, to);\n-            some(def_id.node)\n+            clear_in_current(cx, nid, to);\n+            some(nid)\n           }\n           by_ref | by_val | by_mutbl_ref {\n             none"}, {"sha": "44a42d70a8ba002eddef350d55a511402f4397fe", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -1019,7 +1019,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n               ast::item_iface(tps, _) {\n                 if ns == ns_type {\n                     if name == \"self\" {\n-                        ret some(def_self(local_def(it.id)));\n+                        ret some(def_self(it.id));\n                     }\n                     ret lookup_in_ty_params(e, name, tps);\n                 }\n@@ -1050,7 +1050,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n           }\n           scope_method(id, tps) {\n             if (name == \"self\" && ns == ns_val(value_or_enum)) {\n-                ret some(ast::def_self(local_def(id)));\n+                ret some(ast::def_self(id));\n             } else if ns == ns_type {\n                 ret lookup_in_ty_params(e, name, tps);\n             }\n@@ -1073,7 +1073,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n           scope_loop(local) {\n             if ns == ns_val(value_or_enum) {\n                 alt lookup_in_pat(e, name, local.node.pat) {\n-                  some(did) { ret some(ast::def_binding(did)); }\n+                  some(nid) { ret some(ast::def_binding(nid)); }\n                   _ { }\n                 }\n             }\n@@ -1084,7 +1084,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n           scope_arm(a) {\n             if ns == ns_val(value_or_enum) {\n                 alt lookup_in_pat(e, name, a.pats[0]) {\n-                  some(did) { ret some(ast::def_binding(did)); }\n+                  some(nid) { ret some(ast::def_binding(nid)); }\n                   _ { ret none; }\n                 }\n             }\n@@ -1127,8 +1127,10 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n                     let i = vec::len(closing);\n                     while i > 0u {\n                         i -= 1u;\n-                        df = ast::def_upvar(def_id_of_def(df), @df,\n-                                            closing[i]);\n+                        #debug[\"name=%s df=%?\", name, df];\n+                        assert def_is_local(df) || def_is_self(df);\n+                        let df_id = def_id_of_def(df).node;\n+                        df = ast::def_upvar(df_id, @df, closing[i]);\n                     }\n                 }\n                 ret some(df);\n@@ -1163,12 +1165,12 @@ fn lookup_in_ty_params(e: env, name: ident, ty_params: [ast::ty_param])\n     ret none;\n }\n \n-fn lookup_in_pat(e: env, name: ident, pat: @ast::pat) -> option<def_id> {\n+fn lookup_in_pat(e: env, name: ident, pat: @ast::pat) -> option<node_id> {\n     let found = none;\n \n     pat_util::pat_bindings(e.def_map, pat) {|p_id, _sp, n|\n         if str::eq(path_to_ident(n), name)\n-                    { found = some(local_def(p_id)); }\n+                    { found = some(p_id); }\n     };\n     ret found;\n }\n@@ -1180,7 +1182,7 @@ fn lookup_in_fn(e: env, name: ident, decl: ast::fn_decl,\n       ns_val(value_or_enum) {\n         for a: ast::arg in decl.inputs {\n             if str::eq(a.ident, name) {\n-                ret some(ast::def_arg(local_def(a.id), a.mode));\n+                ret some(ast::def_arg(a.id, a.mode));\n             }\n         }\n         ret none;\n@@ -1233,8 +1235,8 @@ fn lookup_in_block(e: env, name: ident, sp: span, b: ast::blk_, pos: uint,\n                         if ns == ns_val(value_or_enum)\n                                      && (i < pos || j < loc_pos) {\n                             alt lookup_in_pat(e, name, loc.node.pat) {\n-                              some(did) {\n-                                ret some(ast::def_local(did));\n+                              some(nid) {\n+                                ret some(ast::def_local(nid));\n                               }\n                               _ { }\n                             }"}, {"sha": "0d259d1392eb694a1a06c0130bf53290ac416620", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -2245,19 +2245,19 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         }\n     }\n     alt def {\n-      ast::def_upvar(did, _, _) {\n-        assert (cx.fcx.llupvars.contains_key(did.node));\n-        ret { val: cx.fcx.llupvars.get(did.node), kind: owned };\n+      ast::def_upvar(nid, _, _) {\n+        assert (cx.fcx.llupvars.contains_key(nid));\n+        ret { val: cx.fcx.llupvars.get(nid), kind: owned };\n       }\n-      ast::def_arg(did, _) {\n-        assert (cx.fcx.llargs.contains_key(did.node));\n-        ret take_local(cx.fcx.llargs, did.node);\n+      ast::def_arg(nid, _) {\n+        assert (cx.fcx.llargs.contains_key(nid));\n+        ret take_local(cx.fcx.llargs, nid);\n       }\n-      ast::def_local(did) | ast::def_binding(did) {\n-        assert (cx.fcx.lllocals.contains_key(did.node));\n-        ret take_local(cx.fcx.lllocals, did.node);\n+      ast::def_local(nid) | ast::def_binding(nid) {\n+        assert (cx.fcx.lllocals.contains_key(nid));\n+        ret take_local(cx.fcx.lllocals, nid);\n       }\n-      ast::def_self(did) {\n+      ast::def_self(nid) {\n         let slf = option::get(cx.fcx.llself);\n         let ptr = PointerCast(cx, slf.v,\n                               T_ptr(type_of_or_i8(cx.ccx(), slf.t)));"}, {"sha": "c9716d34cd37d755199aed9dc7cb95380bf110b2", "filename": "src/comp/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -362,6 +362,7 @@ fn build_closure(bcx0: block,\n \n     // Package up the captured upvars\n     vec::iter(cap_vars) { |cap_var|\n+        #debug[\"Building closure: captured variable %?\", cap_var];\n         let lv = trans_local_var(bcx, cap_var.def);\n         let nid = ast_util::def_id_of_def(cap_var.def).node;\n         let ty = node_id_type(bcx, nid);"}, {"sha": "9ab7cc850f636fce5a310530424d15dfe98bf9ec", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -576,10 +576,10 @@ fn expr_to_constr_arg(tcx: ty::ctxt, e: @expr) -> @constr_arg_use {\n     alt e.node {\n       expr_path(p) {\n         alt tcx.def_map.find(e.id) {\n-          some(def_local(id)) | some(def_arg(id, _)) |\n-          some(def_binding(id)) | some(def_upvar(id, _, _)) {\n+          some(def_local(nid)) | some(def_arg(nid, _)) |\n+          some(def_binding(nid)) | some(def_upvar(nid, _, _)) {\n             ret @respan(p.span,\n-                        carg_ident({ident: p.node.idents[0], node: id.node}));\n+                        carg_ident({ident: p.node.idents[0], node: nid}));\n           }\n           some(what) {\n               tcx.sess.span_bug(e.span,\n@@ -786,9 +786,9 @@ enum if_ty { if_check, plain_if, }\n fn local_node_id_to_def_id_strict(fcx: fn_ctxt, sp: span, i: node_id) ->\n    def_id {\n     alt local_node_id_to_def(fcx, i) {\n-      some(def_local(id)) | some(def_arg(id, _)) |\n-      some(def_upvar(id, _, _)) {\n-        ret id;\n+      some(def_local(nid)) | some(def_arg(nid, _)) |\n+      some(def_upvar(nid, _, _)) {\n+        ret local_def(nid);\n       }\n       some(_) {\n         fcx.ccx.tcx.sess.span_fatal(sp,\n@@ -810,9 +810,9 @@ fn local_node_id_to_def(fcx: fn_ctxt, i: node_id) -> option<def> {\n \n fn local_node_id_to_def_id(fcx: fn_ctxt, i: node_id) -> option<def_id> {\n     alt local_node_id_to_def(fcx, i) {\n-      some(def_local(id)) | some(def_arg(id, _)) | some(def_binding(id)) |\n-      some(def_upvar(id, _, _)) {\n-        some(id)\n+      some(def_local(nid)) | some(def_arg(nid, _)) | some(def_binding(nid)) |\n+      some(def_upvar(nid, _, _)) {\n+        some(local_def(nid))\n       }\n       _ { none }\n     }"}, {"sha": "f3d2be56b13238e4e8fae474d8ccbddbc7715dbf", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -185,8 +185,8 @@ fn clear_in_poststate_expr(fcx: fn_ctxt, e: @expr, t: poststate) {\n         alt vec::last(p.node.idents) {\n           some(i) {\n             alt local_node_id_to_def(fcx, e.id) {\n-              some(def_local(d_id)) {\n-                clear_in_poststate_(bit_num(fcx, ninit(d_id.node, i)), t);\n+              some(def_local(nid)) {\n+                clear_in_poststate_(bit_num(fcx, ninit(nid, i)), t);\n               }\n               some(_) {/* ignore args (for now...) */ }\n               _ {"}, {"sha": "fef7d525384751bd0ba8437f58f01e744c4056ad", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -176,13 +176,13 @@ fn gen_if_local(fcx: fn_ctxt, lhs: @expr, rhs: @expr, larger_id: node_id,\n     alt node_id_to_def(fcx.ccx, new_var) {\n       some(d) {\n         alt d {\n-          def_local(d_id) {\n+          def_local(nid) {\n             find_pre_post_expr(fcx, rhs);\n             let p = expr_pp(fcx.ccx, rhs);\n             set_pre_and_post(fcx.ccx, larger_id, p.precondition,\n                              p.postcondition);\n             gen(fcx, larger_id,\n-                ninit(d_id.node, path_to_ident(pth)));\n+                ninit(nid, path_to_ident(pth)));\n           }\n           _ { find_pre_post_exprs(fcx, [lhs, rhs], larger_id); }\n         }\n@@ -214,10 +214,8 @@ fn handle_update(fcx: fn_ctxt, parent: @expr, lhs: @expr, rhs: @expr,\n             // pure and assign_op require the lhs to be init'd\n             let df = node_id_to_def_strict(fcx.ccx.tcx, lhs.id);\n             alt df {\n-              def_local(d_id) {\n-                let i =\n-                    bit_num(fcx,\n-                            ninit(d_id.node, path_to_ident(p)));\n+              def_local(nid) {\n+                let i = bit_num(fcx, ninit(nid, path_to_ident(p)));\n                 require_and_preserve(i, expr_pp(fcx.ccx, lhs));\n               }\n               _ { }\n@@ -261,9 +259,9 @@ fn handle_var(fcx: fn_ctxt, rslt: pre_and_post, id: node_id, name: ident) {\n fn handle_var_def(fcx: fn_ctxt, rslt: pre_and_post, def: def, name: ident) {\n     log(debug, (\"handle_var_def: \", def, name));\n     alt def {\n-      def_local(d_id) | def_arg(d_id, _) {\n-        use_var(fcx, d_id.node);\n-        let i = bit_num(fcx, ninit(d_id.node, name));\n+      def_local(nid) | def_arg(nid, _) {\n+        use_var(fcx, nid);\n+        let i = bit_num(fcx, ninit(nid, name));\n         require_and_preserve(i, rslt);\n       }\n       _ {/* nothing to check */ }"}, {"sha": "162659d1718b64179ecb65487a4ee139ebac36c0", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -246,9 +246,8 @@ fn gen_if_local(fcx: fn_ctxt, p: poststate, e: @expr) -> bool {\n     alt e.node {\n       expr_path(pth) {\n         alt fcx.ccx.tcx.def_map.find(e.id) {\n-          some(def_local(loc)) {\n-            ret set_in_poststate_ident(fcx, loc.node,\n-                                       path_to_ident(pth), p);\n+          some(def_local(nid)) {\n+            ret set_in_poststate_ident(fcx, nid, path_to_ident(pth), p);\n           }\n           _ { ret false; }\n         }"}, {"sha": "f62775f02f96add4bd6283813f54666ec10d650a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -96,14 +96,14 @@ fn lookup_def(fcx: @fn_ctxt, sp: span, id: ast::node_id) -> ast::def {\n fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n    ty_param_bounds_and_ty {\n     alt defn {\n-      ast::def_arg(id, _) {\n-        assert (fcx.locals.contains_key(id.node));\n-        let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n+      ast::def_arg(nid, _) {\n+        assert (fcx.locals.contains_key(nid));\n+        let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         ret {bounds: @[], ty: typ};\n       }\n-      ast::def_local(id) {\n-        assert (fcx.locals.contains_key(id.node));\n-        let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n+      ast::def_local(nid) {\n+        assert (fcx.locals.contains_key(nid));\n+        let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         ret {bounds: @[], ty: typ};\n       }\n       ast::def_self(id) {\n@@ -131,9 +131,9 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_fn(id, _) | ast::def_const(id) |\n       ast::def_variant(_, id) | ast::def_class(id)\n          { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n-      ast::def_binding(id) {\n-        assert (fcx.locals.contains_key(id.node));\n-        let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n+      ast::def_binding(nid) {\n+        assert (fcx.locals.contains_key(nid));\n+        let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         ret {bounds: @[], ty: typ};\n       }\n       ast::def_ty(_) | ast::def_prim_ty(_) {\n@@ -360,7 +360,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n             ty::mk_param(tcx, n, id)\n           }\n           ast::def_self(iface_id) {\n-            alt check tcx.items.get(iface_id.node) {\n+            alt check tcx.items.get(iface_id) {\n               ast_map::node_item(@{node: ast::item_iface(tps, _), _}, _) {\n                 if vec::len(tps) != vec::len(path.node.types) {\n                     tcx.sess.span_err(ast_ty.span, \"incorrect number of type \\\n@@ -2912,8 +2912,7 @@ fn check_constraints(fcx: @fn_ctxt, cs: [@ast::constr], args: [ast::arg]) {\n                               fcx.ccx.tcx.sess.next_node_id();\n                           fcx.ccx.tcx.def_map.insert\n                               (arg_occ_node_id,\n-                               ast::def_arg(local_def(args[i].id),\n-                                            args[i].mode));\n+                               ast::def_arg(args[i].id, args[i].mode));\n                           {id: arg_occ_node_id,\n                            node: ast::expr_path(@respan(a.span, p)),\n                            span: a.span}"}, {"sha": "9e84cb9cd9007d5c1350ada67244d61833af52c4", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -33,19 +33,21 @@ type ty_param = {ident: ident, id: node_id, bounds: @[ty_param_bound]};\n \n enum def {\n     def_fn(def_id, purity),\n-    def_self(def_id),\n+    def_self(node_id),\n     def_mod(def_id),\n     def_native_mod(def_id),\n     def_const(def_id),\n-    def_arg(def_id, mode),\n-    def_local(def_id),\n+    def_arg(node_id, mode),\n+    def_local(node_id),\n     def_variant(def_id /* enum */, def_id /* variant */),\n     def_ty(def_id),\n     def_prim_ty(prim_ty),\n     def_ty_param(def_id, uint),\n-    def_binding(def_id),\n+    def_binding(node_id),\n     def_use(def_id),\n-    def_upvar(def_id, @def, node_id), // node_id == expr_fn or expr_fn_block\n+    def_upvar(node_id /* local id of closed over var */,\n+              @def    /* closed over def */,\n+              node_id /* expr node that creates the closure */),\n     def_class(def_id),\n     // first def_id is for parent class\n     def_class_field(def_id, def_id),"}, {"sha": "fb36fc172169b7ea13d73da31045823fd4397479", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -35,11 +35,17 @@ fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n \n fn def_id_of_def(d: def) -> def_id {\n     alt d {\n-      def_fn(id, _) | def_self(id) | def_mod(id) |\n-      def_native_mod(id) | def_const(id) | def_arg(id, _) | def_local(id) |\n+      def_fn(id, _) | def_mod(id) |\n+      def_native_mod(id) | def_const(id) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n-      def_binding(id) | def_use(id) | def_upvar(id, _, _) |\n+      def_use(id) |\n       def_class(id) | def_class_field(_, id) | def_class_method(_, id) { id }\n+\n+      def_self(id) | def_arg(id, _) | def_local(id) |\n+      def_upvar(id, _, _) | def_binding(id) {\n+        local_def(id)\n+      }\n+\n       def_prim_ty(_) { fail; }\n     }\n }"}, {"sha": "4d0cdf3142fd083297bfeedf32ce8428d12adaf5", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bceea8339a87193c25472f22a92dbbaa52ac6ed3/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=bceea8339a87193c25472f22a92dbbaa52ac6ed3", "patch": "@@ -145,6 +145,7 @@ fn build_session() -> (session::session, @mutable bool) {\n         no_trans: false,\n         no_asm_comments: false,\n         monomorphize: false,\n+        inline: false,\n         warn_unused_imports: false\n     };\n "}]}