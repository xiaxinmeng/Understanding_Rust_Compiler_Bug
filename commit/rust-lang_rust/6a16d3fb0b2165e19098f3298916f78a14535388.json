{"sha": "6a16d3fb0b2165e19098f3298916f78a14535388", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMTZkM2ZiMGIyMTY1ZTE5MDk4ZjMyOTg5MTZmNzhhMTQ1MzUzODg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T09:45:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T10:33:16Z"}, "message": "WIP: resolve across crates", "tree": {"sha": "77bc22c1bc6fa94ea49c9efc095bb882701111b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77bc22c1bc6fa94ea49c9efc095bb882701111b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a16d3fb0b2165e19098f3298916f78a14535388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a16d3fb0b2165e19098f3298916f78a14535388", "html_url": "https://github.com/rust-lang/rust/commit/6a16d3fb0b2165e19098f3298916f78a14535388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a16d3fb0b2165e19098f3298916f78a14535388/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b9ff46b378e37b256f6b93f1f6f3bb5bc122064", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9ff46b378e37b256f6b93f1f6f3bb5bc122064", "html_url": "https://github.com/rust-lang/rust/commit/8b9ff46b378e37b256f6b93f1f6f3bb5bc122064"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "768836b659f8c65746504059d40617ce310115ce", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6a16d3fb0b2165e19098f3298916f78a14535388/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a16d3fb0b2165e19098f3298916f78a14535388/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=6a16d3fb0b2165e19098f3298916f78a14535388", "patch": "@@ -31,7 +31,7 @@ use crate::{\n     DefId, DefLoc, DefKind,\n     SourceItemId, SourceFileItemId, SourceFileItems,\n     Path, PathKind,\n-    HirDatabase,\n+    HirDatabase, Crate,\n     module::{ModuleId, ModuleTree},\n };\n \n@@ -218,8 +218,8 @@ where\n         module_tree: Arc<ModuleTree>,\n     ) -> Resolver<'a, DB> {\n         Resolver {\n-            db: db,\n-            input: &input,\n+            db,\n+            input,\n             source_root,\n             module_tree,\n             result: ItemMap::default(),\n@@ -233,7 +233,7 @@ where\n \n         for &module_id in self.input.keys() {\n             self.db.check_canceled()?;\n-            self.resolve_imports(module_id);\n+            self.resolve_imports(module_id)?;\n         }\n         Ok(self.result)\n     }\n@@ -297,40 +297,66 @@ where\n         self.result.per_module.insert(module_id, module_items);\n     }\n \n-    fn resolve_imports(&mut self, module_id: ModuleId) {\n+    fn resolve_imports(&mut self, module_id: ModuleId) -> Cancelable<()> {\n         for import in self.input[&module_id].imports.iter() {\n-            self.resolve_import(module_id, import);\n+            self.resolve_import(module_id, import)?;\n         }\n+        Ok(())\n     }\n \n-    fn resolve_import(&mut self, module_id: ModuleId, import: &Import) {\n+    fn resolve_import(&mut self, module_id: ModuleId, import: &Import) -> Cancelable<()> {\n         let ptr = match import.kind {\n-            ImportKind::Glob => return,\n+            ImportKind::Glob => return Ok(()),\n             ImportKind::Named(ptr) => ptr,\n         };\n+        let mut segments = import.path.segments.iter().enumerate();\n \n         let mut curr = match import.path.kind {\n             // TODO: handle extern crates\n-            PathKind::Plain => return,\n+            PathKind::Plain => {\n+                let root_id = module_id.crate_root(&self.module_tree);\n+                let file_id = root_id.source(&self.module_tree).file_id();\n+                let crate_graph = self.db.crate_graph();\n+                let crate_id = match crate_graph.crate_id_for_crate_root(file_id) {\n+                    None => return Ok(()),\n+                    Some(it) => it,\n+                };\n+                let krate = Crate::new(crate_id);\n+                let crate_name = match segments.next() {\n+                    None => return Ok(()),\n+                    Some((_, it)) => it,\n+                };\n+                match krate\n+                    .dependencies(self.db)\n+                    .into_iter()\n+                    .find(|it| &it.name == crate_name)\n+                {\n+                    None => return Ok(()),\n+                    Some(dep) => match dep.krate.root_module(self.db)? {\n+                        None => return Ok(()),\n+                        Some(it) => it.module_id,\n+                    },\n+                }\n+            }\n             PathKind::Self_ => module_id,\n             PathKind::Super => {\n                 match module_id.parent(&self.module_tree) {\n                     Some(it) => it,\n                     // TODO: error\n-                    None => return,\n+                    None => return Ok(()),\n                 }\n             }\n             PathKind::Crate => module_id.crate_root(&self.module_tree),\n         };\n \n-        for (i, name) in import.path.segments.iter().enumerate() {\n+        for (i, name) in segments {\n             let is_last = i == import.path.segments.len() - 1;\n \n             let def_id = match self.result.per_module[&curr].items.get(name) {\n-                None => return,\n+                None => return Ok(()),\n                 Some(res) => match res.def_id {\n                     Some(it) => it,\n-                    None => return,\n+                    None => return Ok(()),\n                 },\n             };\n \n@@ -341,7 +367,7 @@ where\n                         module_id,\n                         ..\n                     } => module_id,\n-                    _ => return,\n+                    _ => return Ok(()),\n                 }\n             } else {\n                 self.update(module_id, |items| {\n@@ -353,6 +379,7 @@ where\n                 })\n             }\n         }\n+        Ok(())\n     }\n \n     fn update(&mut self, module_id: ModuleId, f: impl FnOnce(&mut ModuleScope)) {"}]}