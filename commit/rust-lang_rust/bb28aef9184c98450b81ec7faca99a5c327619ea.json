{"sha": "bb28aef9184c98450b81ec7faca99a5c327619ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjhhZWY5MTg0Yzk4NDUwYjgxZWM3ZmFjYTk5YTVjMzI3NjE5ZWE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-08T19:06:41Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-08T19:06:41Z"}, "message": "Fix `concat!` with integer literals", "tree": {"sha": "a1e40210c2644646553bdbc2bc821c06c56da9c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1e40210c2644646553bdbc2bc821c06c56da9c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb28aef9184c98450b81ec7faca99a5c327619ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb28aef9184c98450b81ec7faca99a5c327619ea", "html_url": "https://github.com/rust-lang/rust/commit/bb28aef9184c98450b81ec7faca99a5c327619ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb28aef9184c98450b81ec7faca99a5c327619ea/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fa57f8d30c80927465de9a1b8501d7a2ee4925", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fa57f8d30c80927465de9a1b8501d7a2ee4925", "html_url": "https://github.com/rust-lang/rust/commit/70fa57f8d30c80927465de9a1b8501d7a2ee4925"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "79b970850481d8223f952026cea55b402fd9cf60", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bb28aef9184c98450b81ec7faca99a5c327619ea/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb28aef9184c98450b81ec7faca99a5c327619ea/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=bb28aef9184c98450b81ec7faca99a5c327619ea", "patch": "@@ -287,23 +287,34 @@ fn concat_expand(\n     _arg_id: EagerMacroId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<Option<(tt::Subtree, FragmentKind)>> {\n+    let mut err = None;\n     let mut text = String::new();\n     for (i, t) in tt.token_trees.iter().enumerate() {\n         match t {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(it)) if i % 2 == 0 => {\n-                text += &match unquote_str(&it) {\n-                    Some(s) => s,\n-                    None => {\n-                        return ExpandResult::only_err(mbe::ExpandError::ConversionError);\n-                    }\n-                };\n+                // concat works with string and char literals, so remove any quotes.\n+                // It also works with integer, float and boolean literals, so just use the rest\n+                // as-is.\n+\n+                text += it\n+                    .text\n+                    .trim_start_matches(|c| match c {\n+                        'r' | '#' | '\\'' | '\"' => true,\n+                        _ => false,\n+                    })\n+                    .trim_end_matches(|c| match c {\n+                        '#' | '\\'' | '\"' => true,\n+                        _ => false,\n+                    });\n             }\n             tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if i % 2 == 1 && punct.char == ',' => (),\n-            _ => return ExpandResult::only_err(mbe::ExpandError::UnexpectedToken),\n+            _ => {\n+                err.get_or_insert(mbe::ExpandError::UnexpectedToken);\n+            }\n         }\n     }\n \n-    ExpandResult::ok(Some((quote!(#text), FragmentKind::Expr)))\n+    ExpandResult { value: Some((quote!(#text), FragmentKind::Expr)), err }\n }\n \n fn relative_file(\n@@ -686,4 +697,19 @@ mod tests {\n \n         assert_eq!(expanded, r#\"b\"\"\"#);\n     }\n+\n+    #[test]\n+    fn test_concat_expand() {\n+        let expanded = expand_builtin_macro(\n+            r##\"\n+            #[rustc_builtin_macro]\n+            macro_rules! concat {}\n+            concat!(\"foo\", 0, r#\"bar\"#);\n+            \"##,\n+        );\n+\n+        assert_eq!(expanded, r#\"\"foo0bar\"\"#);\n+\n+        // FIXME: `true`/`false` literals don't work.\n+    }\n }"}]}