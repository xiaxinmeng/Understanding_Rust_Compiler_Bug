{"sha": "2ae1b4804ca528d21005738f56018b7c6a6141e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZTFiNDgwNGNhNTI4ZDIxMDA1NzM4ZjU2MDE4YjdjNmE2MTQxZTk=", "commit": {"author": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-09T12:06:16Z"}, "committer": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-09T12:06:16Z"}, "message": "Enable `stdin_disable_all_formatting_test` test\n\nFixes: #1990.\n\nSigned-off-by: Otavio Salvador <otavio@ossystems.com.br>", "tree": {"sha": "ab851326ac5cc67c907d24456cbf41280f04c5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab851326ac5cc67c907d24456cbf41280f04c5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ae1b4804ca528d21005738f56018b7c6a6141e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae1b4804ca528d21005738f56018b7c6a6141e9", "html_url": "https://github.com/rust-lang/rust/commit/2ae1b4804ca528d21005738f56018b7c6a6141e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ae1b4804ca528d21005738f56018b7c6a6141e9/comments", "author": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f25ae7e579e4dd5e6417c12d433afd666bad7ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f25ae7e579e4dd5e6417c12d433afd666bad7ce", "html_url": "https://github.com/rust-lang/rust/commit/2f25ae7e579e4dd5e6417c12d433afd666bad7ce"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "1967c74da4515168d5323065290b4b2a393030f6", "filename": "src/test/mod.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2ae1b4804ca528d21005738f56018b7c6a6141e9/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ae1b4804ca528d21005738f56018b7c6a6141e9/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=2ae1b4804ca528d21005738f56018b7c6a6141e9", "patch": "@@ -17,6 +17,7 @@ use std::io::{self, BufRead, BufReader, Read, Write};\n use std::iter::{Enumerate, Peekable};\n use std::mem;\n use std::path::{Path, PathBuf};\n+use std::process::{Command, Stdio};\n use std::str::Chars;\n \n use config::{Color, Config, EmitMode, FileName, ReportTactic};\n@@ -287,28 +288,32 @@ fn stdin_formatting_smoke_test() {\n     assert_eq!(buf, \"fn main() {}\\r\\n\".as_bytes());\n }\n \n-// FIXME(#1990) restore this test\n-// #[test]\n-// fn stdin_disable_all_formatting_test() {\n-//     let input = String::from(\"fn main() { println!(\\\"This should not be formatted.\\\"); }\");\n-//     let mut child = Command::new(\"./target/debug/rustfmt\")\n-//         .stdin(Stdio::piped())\n-//         .stdout(Stdio::piped())\n-//         .arg(\"--config-path=./tests/config/disable_all_formatting.toml\")\n-//         .spawn()\n-//         .expect(\"failed to execute child\");\n-\n-//     {\n-//         let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n-//         stdin\n-//             .write_all(input.as_bytes())\n-//             .expect(\"failed to write stdin\");\n-//     }\n-//     let output = child.wait_with_output().expect(\"failed to wait on child\");\n-//     assert!(output.status.success());\n-//     assert!(output.stderr.is_empty());\n-//     assert_eq!(input, String::from_utf8(output.stdout).unwrap());\n-// }\n+#[test]\n+fn stdin_disable_all_formatting_test() {\n+    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n+        None | Some(\"nightly\") => {}\n+        _ => return, // these tests require nightly\n+    }\n+    let input = String::from(\"fn main() { println!(\\\"This should not be formatted.\\\"); }\");\n+    let mut child = Command::new(\"./target/debug/rustfmt\")\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .arg(\"--config-path=./tests/config/disable_all_formatting.toml\")\n+        .spawn()\n+        .expect(\"failed to execute child\");\n+\n+    {\n+        let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n+        stdin\n+            .write_all(input.as_bytes())\n+            .expect(\"failed to write stdin\");\n+    }\n+\n+    let output = child.wait_with_output().expect(\"failed to wait on child\");\n+    assert!(output.status.success());\n+    assert!(output.stderr.is_empty());\n+    assert_eq!(input, String::from_utf8(output.stdout).unwrap());\n+}\n \n #[test]\n fn format_lines_errors_are_reported() {"}]}