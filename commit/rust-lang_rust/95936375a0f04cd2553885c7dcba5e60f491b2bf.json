{"sha": "95936375a0f04cd2553885c7dcba5e60f491b2bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTM2Mzc1YTBmMDRjZDI1NTM4ODVjN2RjYmE1ZTYwZjQ5MWIyYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-07T10:01:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-07T10:01:06Z"}, "message": "Auto merge of #43709 - zackmdavis:de-orphan_extended_information, r=GuillaumeGomez\n\nde-orphan extended information\n\nBizarrely, librustc_passes, librustc_plugin, librustc_mir, and libsyntax [weren't getting their error explanations registered](https://github.com/rust-lang/rust/issues/35284) (leaving _several_ error codes absent from [the index](https://doc.rust-lang.org/nightly/error-index.html) and `--explain`). This surfaced a few latent doctest failures that were fixed where readily possible and ignored (with a recorded excuse) if not.\n\nAlso, we don't issue E0563 anymore.\n\nr? @GuillaumeGomez", "tree": {"sha": "61620831a3549ad18700d9eaddd7b25f0ec2da56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61620831a3549ad18700d9eaddd7b25f0ec2da56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95936375a0f04cd2553885c7dcba5e60f491b2bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95936375a0f04cd2553885c7dcba5e60f491b2bf", "html_url": "https://github.com/rust-lang/rust/commit/95936375a0f04cd2553885c7dcba5e60f491b2bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95936375a0f04cd2553885c7dcba5e60f491b2bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de807a00baac8139dbdcea5f893d9346ba80adc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de807a00baac8139dbdcea5f893d9346ba80adc", "html_url": "https://github.com/rust-lang/rust/commit/3de807a00baac8139dbdcea5f893d9346ba80adc"}, {"sha": "75b7a6f1a662dab0752d189ab635580a21b06e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7a6f1a662dab0752d189ab635580a21b06e42", "html_url": "https://github.com/rust-lang/rust/commit/75b7a6f1a662dab0752d189ab635580a21b06e42"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "4c337993468e6803eb82e1e1912254401769573a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -1207,6 +1207,10 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     all_errors.extend_from_slice(&rustc_trans::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_const_eval::DIAGNOSTICS);\n     all_errors.extend_from_slice(&rustc_metadata::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_passes::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_plugin::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&rustc_mir::DIAGNOSTICS);\n+    all_errors.extend_from_slice(&syntax::DIAGNOSTICS);\n \n     Registry::new(&all_errors)\n }"}, {"sha": "6530b356e33f43f024a75e5fd135e7fcf1158b23", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -122,10 +122,8 @@ On the other hand, static and constant pointers can point either to\n a known numeric address or to the address of a symbol.\n \n ```\n+static MY_STATIC: u32 = 42;\n static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n-// ... and also\n-static MY_STATIC_ADDR2: *const u32 = &MY_STATIC;\n-\n const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n ```\n \n@@ -160,6 +158,16 @@ Remember: you can't use a function call inside a const's initialization\n expression! However, you can totally use it anywhere else:\n \n ```\n+enum Test {\n+    V1\n+}\n+\n+impl Test {\n+    fn func(&self) -> i32 {\n+        12\n+    }\n+}\n+\n fn main() {\n     const FOO: Test = Test::V1;\n "}, {"sha": "ea8624930e5f5dd05e4d308839062dac4fc29b69", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -57,3 +57,5 @@ pub fn provide(providers: &mut Providers) {\n     shim::provide(providers);\n     transform::provide(providers);\n }\n+\n+__build_diagnostic_array! { librustc_mir, DIAGNOSTICS }"}, {"sha": "907a258a12dc68063df770b6ab2425a0bd40635e", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -221,7 +221,7 @@ while break {}\n \n To fix this, add a label specifying which loop is being broken out of:\n ```\n-`foo: while break `foo {}\n+'foo: while break 'foo {}\n ```\n \"##\n }"}, {"sha": "ed5ea69d04ea3226d17b5623f90968eda9bf1d7f", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -45,3 +45,5 @@ pub mod loops;\n pub mod mir_stats;\n pub mod no_asm;\n pub mod static_recursion;\n+\n+__build_diagnostic_array! { librustc_passes, DIAGNOSTICS }"}, {"sha": "e17a3c82b5020af3429e7a8d4a5c7999afcb275d", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -84,3 +84,5 @@ pub mod diagnostics;\n pub mod registry;\n pub mod load;\n pub mod build;\n+\n+__build_diagnostic_array! { librustc_plugin, DIAGNOSTICS }"}, {"sha": "35ca19698e8cf94e1039b2a8db103f8a8a9ed918", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -4765,7 +4765,7 @@ register_diagnostics! {\n            // between structures with the same definition\n     E0521, // redundant default implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n-    E0563, // cannot determine a type for this `impl Trait`: {}\n+//  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n     E0567, // auto traits can not have type parameters"}, {"sha": "6598ecb94448b7bbb15d47e56656151a050c40d2", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -42,7 +42,7 @@ The `inline` attribute was malformed.\n \n Erroneous code example:\n \n-```compile_fail,E0534\n+```ignore (compile_fail not working here; see Issue #43707)\n #[inline()] // error: expected one argument\n pub fn something() {}\n \n@@ -80,7 +80,7 @@ An unknown argument was given to the `inline` attribute.\n \n Erroneous code example:\n \n-```compile_fail,E0535\n+```ignore (compile_fail not working here; see Issue #43707)\n #[inline(unknown)] // error: invalid argument\n pub fn something() {}\n \n@@ -190,7 +190,9 @@ A literal was used in an attribute that doesn't support literals.\n \n Erroneous code example:\n \n-```compile_fail,E0565\n+```ignore (compile_fail not working here; see Issue #43707)\n+#![feature(attr_literals)]\n+\n #[inline(\"always\")] // error: unsupported literal\n pub fn something() {}\n ```\n@@ -209,7 +211,7 @@ A file wasn't found for an out-of-line module.\n \n Erroneous code example:\n \n-```compile_fail,E0583\n+```ignore (compile_fail not working here; see Issue #43707)\n mod file_that_doesnt_exist; // error: file not found for module\n \n fn main() {}\n@@ -251,23 +253,33 @@ An inclusive range was used with no end.\n Erroneous code example:\n \n ```compile_fail,E0586\n-let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-let x = &tmp[1...]; // error: inclusive range was used with no end\n+#![feature(inclusive_range_syntax)]\n+\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1...]; // error: inclusive range was used with no end\n+}\n ```\n \n An inclusive range needs an end in order to *include* it. If you just need a\n start and no end, use a non-inclusive range (with `..`):\n \n ```\n-let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-let x = &tmp[1..]; // ok!\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1..]; // ok!\n+}\n ```\n \n Or put an end to your inclusive range:\n \n ```\n-let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n-let x = &tmp[1...3]; // ok!\n+#![feature(inclusive_range_syntax)]\n+\n+fn main() {\n+    let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n+    let x = &tmp[1...3]; // ok!\n+}\n ```\n \"##,\n "}, {"sha": "43345b02bf614e65029c888192c048037afed96e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95936375a0f04cd2553885c7dcba5e60f491b2bf/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=95936375a0f04cd2553885c7dcba5e60f491b2bf", "patch": "@@ -148,4 +148,4 @@ pub mod ext {\n #[cfg(test)]\n mod test_snippet;\n \n-// __build_diagnostic_array! { libsyntax, DIAGNOSTICS }\n+__build_diagnostic_array! { libsyntax, DIAGNOSTICS }"}]}