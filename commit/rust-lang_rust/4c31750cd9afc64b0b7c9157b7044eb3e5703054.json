{"sha": "4c31750cd9afc64b0b7c9157b7044eb3e5703054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzE3NTBjZDlhZmM2NGIwYjdjOTE1N2I3MDQ0ZWIzZTU3MDMwNTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-14T17:27:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-21T21:26:53Z"}, "message": "remove `translation_items` from `SharedCrateContext`\n\nIf we are going to hash `SharedCrateContext`, we don't want a list of\nthings that pertain to **every CGU** in there.", "tree": {"sha": "b7f067ae84be109e198ad1879075eba529fe75e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f067ae84be109e198ad1879075eba529fe75e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c31750cd9afc64b0b7c9157b7044eb3e5703054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c31750cd9afc64b0b7c9157b7044eb3e5703054", "html_url": "https://github.com/rust-lang/rust/commit/4c31750cd9afc64b0b7c9157b7044eb3e5703054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c31750cd9afc64b0b7c9157b7044eb3e5703054/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8289e5a73e411f994d14c0b80ed97d7a6aa3c4cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8289e5a73e411f994d14c0b80ed97d7a6aa3c4cc", "html_url": "https://github.com/rust-lang/rust/commit/8289e5a73e411f994d14c0b80ed97d7a6aa3c4cc"}], "stats": {"total": 34, "additions": 11, "deletions": 23}, "files": [{"sha": "1420f52819b3c06ad20d7d7c646e26948de1f62e", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c31750cd9afc64b0b7c9157b7044eb3e5703054/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c31750cd9afc64b0b7c9157b7044eb3e5703054/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=4c31750cd9afc64b0b7c9157b7044eb3e5703054", "patch": "@@ -802,6 +802,7 @@ fn write_metadata<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n /// in any other compilation unit.  Give these symbols internal linkage.\n fn internalize_symbols<'a, 'tcx>(sess: &Session,\n                                  scx: &SharedCrateContext<'a, 'tcx>,\n+                                 translation_items: &FxHashSet<TransItem<'tcx>>,\n                                  llvm_modules: &[ModuleLlvm],\n                                  symbol_map: &SymbolMap<'tcx>,\n                                  exported_symbols: &ExportedSymbols) {\n@@ -854,7 +855,7 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n             let mut locally_defined_symbols = FxHashSet();\n             let mut linkage_fixed_explicitly = FxHashSet();\n \n-            for trans_item in scx.translation_items().borrow().iter() {\n+            for trans_item in translation_items {\n                 let symbol_name = symbol_map.get_or_compute(scx, *trans_item);\n                 if trans_item.explicit_linkage(tcx).is_some() {\n                     linkage_fixed_explicitly.insert(symbol_name.clone());\n@@ -1109,7 +1110,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Run the translation item collector and partition the collected items into\n     // codegen units.\n-    let (codegen_units, symbol_map) = collect_and_partition_translation_items(&shared_ccx);\n+    let (translation_items, codegen_units, symbol_map) =\n+        collect_and_partition_translation_items(&shared_ccx);\n \n     let symbol_map = Rc::new(symbol_map);\n \n@@ -1289,6 +1291,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     time(shared_ccx.sess().time_passes(), \"internalize symbols\", || {\n         internalize_symbols(sess,\n                             &shared_ccx,\n+                            &translation_items,\n                             &llvm_modules,\n                             &symbol_map,\n                             &exported_symbols);\n@@ -1517,7 +1520,9 @@ fn gather_type_sizes<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n }\n \n fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>)\n-                                                     -> (Vec<CodegenUnit<'tcx>>, SymbolMap<'tcx>) {\n+                                                     -> (FxHashSet<TransItem<'tcx>>,\n+                                                         Vec<CodegenUnit<'tcx>>,\n+                                                         SymbolMap<'tcx>) {\n     let time_passes = scx.sess().time_passes();\n \n     let collection_mode = match scx.sess().opts.debugging_opts.print_trans_items {\n@@ -1563,13 +1568,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n     assert!(scx.tcx().sess.opts.cg.codegen_units == codegen_units.len() ||\n             scx.tcx().sess.opts.debugging_opts.incremental.is_some());\n \n-    {\n-        let mut ccx_map = scx.translation_items().borrow_mut();\n-\n-        for trans_item in items.iter().cloned() {\n-            ccx_map.insert(trans_item);\n-        }\n-    }\n+    let translation_items: FxHashSet<TransItem<'tcx>> = items.iter().cloned().collect();\n \n     if scx.sess().opts.debugging_opts.print_trans_items.is_some() {\n         let mut item_to_cgus = FxHashMap();\n@@ -1624,5 +1623,5 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n         }\n     }\n \n-    (codegen_units, symbol_map)\n+    (translation_items, codegen_units, symbol_map)\n }"}, {"sha": "5fd36ecb767cb73250484e443c8bb9eaedf96bc3", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c31750cd9afc64b0b7c9157b7044eb3e5703054/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c31750cd9afc64b0b7c9157b7044eb3e5703054/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=4c31750cd9afc64b0b7c9157b7044eb3e5703054", "patch": "@@ -21,7 +21,6 @@ use declare;\n use monomorphize::Instance;\n \n use partitioning::CodegenUnit;\n-use trans_item::TransItem;\n use type_::Type;\n use rustc_data_structures::base_n;\n use rustc::ty::subst::Substs;\n@@ -31,7 +30,7 @@ use session::config::NoDebugInfo;\n use session::Session;\n use session::config;\n use symbol_map::SymbolMap;\n-use util::nodemap::{NodeSet, DefIdMap, FxHashMap, FxHashSet};\n+use util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n@@ -87,7 +86,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n \n     use_dll_storage_attrs: bool,\n \n-    translation_items: RefCell<FxHashSet<TransItem<'tcx>>>,\n     trait_cache: RefCell<DepTrackingMap<TraitSelectionCache<'tcx>>>,\n     project_cache: RefCell<DepTrackingMap<ProjectionCache<'tcx>>>,\n }\n@@ -385,7 +383,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             tcx: tcx,\n             check_overflow: check_overflow,\n             use_dll_storage_attrs: use_dll_storage_attrs,\n-            translation_items: RefCell::new(FxHashSet()),\n             trait_cache: RefCell::new(DepTrackingMap::new(tcx.dep_graph.clone())),\n             project_cache: RefCell::new(DepTrackingMap::new(tcx.dep_graph.clone())),\n         }\n@@ -430,10 +427,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.use_dll_storage_attrs\n     }\n-\n-    pub fn translation_items(&self) -> &RefCell<FxHashSet<TransItem<'tcx>>> {\n-        &self.translation_items\n-    }\n }\n \n impl<'tcx> LocalCrateContext<'tcx> {\n@@ -720,10 +713,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &*self.local().symbol_map\n     }\n \n-    pub fn translation_items(&self) -> &RefCell<FxHashSet<TransItem<'tcx>>> {\n-        &self.shared.translation_items\n-    }\n-\n     /// Given the def-id of some item that has no type parameters, make\n     /// a suitable \"empty substs\" for it.\n     pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> {"}]}