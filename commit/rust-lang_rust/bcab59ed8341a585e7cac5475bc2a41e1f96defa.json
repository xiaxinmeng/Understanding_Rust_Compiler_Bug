{"sha": "bcab59ed8341a585e7cac5475bc2a41e1f96defa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYWI1OWVkODM0MWE1ODVlN2NhYzU0NzViYzJhNDFlMWY5NmRlZmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-06T04:32:17Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-09T07:57:24Z"}, "message": "lowering: simplify HoFs", "tree": {"sha": "fb381b1f07502bc31ce5431c86e9958897f6b08d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb381b1f07502bc31ce5431c86e9958897f6b08d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcab59ed8341a585e7cac5475bc2a41e1f96defa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcab59ed8341a585e7cac5475bc2a41e1f96defa", "html_url": "https://github.com/rust-lang/rust/commit/bcab59ed8341a585e7cac5475bc2a41e1f96defa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcab59ed8341a585e7cac5475bc2a41e1f96defa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adc65725004c8aac16392fe4052c3e347181157d", "url": "https://api.github.com/repos/rust-lang/rust/commits/adc65725004c8aac16392fe4052c3e347181157d", "html_url": "https://github.com/rust-lang/rust/commit/adc65725004c8aac16392fe4052c3e347181157d"}], "stats": {"total": 67, "additions": 26, "deletions": 41}, "files": [{"sha": "7aef4b11ae3f90887f38bce6ef06094b6d70eaa8", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bcab59ed8341a585e7cac5475bc2a41e1f96defa/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcab59ed8341a585e7cac5475bc2a41e1f96defa/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=bcab59ed8341a585e7cac5475bc2a41e1f96defa", "patch": "@@ -26,12 +26,9 @@ pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n }\n \n impl<'a, 'lowering, 'hir> ItemLowerer<'a, 'lowering, 'hir> {\n-    fn with_trait_impl_ref<F>(&mut self, trait_impl_ref: &Option<TraitRef>, f: F)\n-    where\n-        F: FnOnce(&mut Self),\n-    {\n+    fn with_trait_impl_ref(&mut self, impl_ref: &Option<TraitRef>, f: impl FnOnce(&mut Self)) {\n         let old = self.lctx.is_in_trait_impl;\n-        self.lctx.is_in_trait_impl = if let &None = trait_impl_ref { false } else { true };\n+        self.lctx.is_in_trait_impl = if let &None = impl_ref { false } else { true };\n         f(self);\n         self.lctx.is_in_trait_impl = old;\n     }"}, {"sha": "5b68018683c476b74080c244e0b8a70ec6e9333f", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bcab59ed8341a585e7cac5475bc2a41e1f96defa/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcab59ed8341a585e7cac5475bc2a41e1f96defa/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=bcab59ed8341a585e7cac5475bc2a41e1f96defa", "patch": "@@ -433,10 +433,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }\n             }\n \n-            fn with_hir_id_owner<F, T>(&mut self, owner: Option<NodeId>, f: F) -> T\n-            where\n-                F: FnOnce(&mut Self) -> T,\n-            {\n+            fn with_hir_id_owner<T>(\n+                &mut self,\n+                owner: Option<NodeId>,\n+                f: impl FnOnce(&mut Self) -> T,\n+            ) -> T {\n                 let old = mem::replace(&mut self.hir_id_owner, owner);\n                 let r = f(self);\n                 self.hir_id_owner = old;\n@@ -577,10 +578,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         lowered\n     }\n \n-    fn lower_node_id_generic<F>(&mut self, ast_node_id: NodeId, alloc_hir_id: F) -> hir::HirId\n-    where\n-        F: FnOnce(&mut Self) -> hir::HirId,\n-    {\n+    fn lower_node_id_generic(\n+        &mut self,\n+        ast_node_id: NodeId,\n+        alloc_hir_id: impl FnOnce(&mut Self) -> hir::HirId,\n+    ) -> hir::HirId {\n         if ast_node_id == DUMMY_NODE_ID {\n             return hir::DUMMY_HIR_ID;\n         }\n@@ -604,10 +606,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn with_hir_id_owner<F, T>(&mut self, owner: NodeId, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n+    fn with_hir_id_owner<T>(&mut self, owner: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {\n         let counter = self\n             .item_local_id_counters\n             .insert(owner, HIR_ID_COUNTER_LOCKED)\n@@ -736,15 +735,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Presuming that in-band lifetimes are enabled, then\n     /// `self.anonymous_lifetime_mode` will be updated to match the\n     /// parameter while `f` is running (and restored afterwards).\n-    fn collect_in_band_defs<T, F>(\n+    fn collect_in_band_defs<T>(\n         &mut self,\n         parent_id: DefId,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n-        f: F,\n-    ) -> (Vec<hir::GenericParam<'hir>>, T)\n-    where\n-        F: FnOnce(&mut Self) -> (Vec<hir::GenericParam<'hir>>, T),\n-    {\n+        f: impl FnOnce(&mut Self) -> (Vec<hir::GenericParam<'hir>>, T),\n+    ) -> (Vec<hir::GenericParam<'hir>>, T) {\n         assert!(!self.is_collecting_in_band_lifetimes);\n         assert!(self.lifetimes_to_define.is_empty());\n         let old_anonymous_lifetime_mode = self.anonymous_lifetime_mode;\n@@ -847,10 +843,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // This is used to track which lifetimes have already been defined, and\n     // which are new in-band lifetimes that need to have a definition created\n     // for them.\n-    fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &[GenericParam], f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n+    fn with_in_scope_lifetime_defs<T>(\n+        &mut self,\n+        params: &[GenericParam],\n+        f: impl FnOnce(&mut Self) -> T,\n+    ) -> T {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n             GenericParamKind::Lifetime { .. } => Some(ParamName::Plain(param.ident.modern())),\n@@ -870,16 +867,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Presuming that in-band lifetimes are enabled, then\n     /// `self.anonymous_lifetime_mode` will be updated to match the\n     /// parameter while `f` is running (and restored afterwards).\n-    fn add_in_band_defs<F, T>(\n+    fn add_in_band_defs<T>(\n         &mut self,\n         generics: &Generics,\n         parent_id: DefId,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n-        f: F,\n-    ) -> (hir::Generics<'hir>, T)\n-    where\n-        F: FnOnce(&mut Self, &mut Vec<hir::GenericParam<'hir>>) -> T,\n-    {\n+        f: impl FnOnce(&mut Self, &mut Vec<hir::GenericParam<'hir>>) -> T,\n+    ) -> (hir::Generics<'hir>, T) {\n         let (in_band_defs, (mut lowered_generics, res)) =\n             self.with_in_scope_lifetime_defs(&generics.params, |this| {\n                 this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n@@ -917,10 +911,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         (lowered_generics, res)\n     }\n \n-    fn with_dyn_type_scope<T, F>(&mut self, in_scope: bool, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n+    fn with_dyn_type_scope<T>(&mut self, in_scope: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n         let was_in_dyn_type = self.is_in_dyn_type;\n         self.is_in_dyn_type = in_scope;\n \n@@ -931,10 +922,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         result\n     }\n \n-    fn with_new_scopes<T, F>(&mut self, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n+    fn with_new_scopes<T>(&mut self, f: impl FnOnce(&mut Self) -> T) -> T {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n "}]}