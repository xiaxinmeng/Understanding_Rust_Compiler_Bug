{"sha": "dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "node_id": "C_kwDOAAsO6NoAKGRiYzc3NTNmYjJiNWUxYWY1YzAwZjNjMWUyNDZjZmQ1OTQ2MTFjNzU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-03T17:35:10Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-03T23:09:49Z"}, "message": "Merge `SignificantDropInScrutinee` into `Matches` lint pass", "tree": {"sha": "ae38fba2174aac148b80f2455c7e7b640e65d44e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae38fba2174aac148b80f2455c7e7b640e65d44e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "html_url": "https://github.com/rust-lang/rust/commit/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15", "html_url": "https://github.com/rust-lang/rust/commit/8c8a52eeeb9ca47575200eacd1ab86bf46e8dc15"}], "stats": {"total": 223, "additions": 109, "deletions": 114}, "files": [{"sha": "435c0829a67705304945f89d8621ec57ef1a7383", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "patch": "@@ -151,6 +151,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(matches::MATCH_STR_CASE_MISMATCH),\n     LintId::of(matches::NEEDLESS_MATCH),\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n+    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(matches::SINGLE_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n     LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n@@ -282,7 +283,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n     LintId::of(serde_api::SERDE_API_MISUSE),\n-    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),"}, {"sha": "7fc6ff8a2fbe4326375da5b9056d9c96d268b4e5", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "patch": "@@ -276,6 +276,7 @@ store.register_lints(&[\n     matches::NEEDLESS_MATCH,\n     matches::REDUNDANT_PATTERN_MATCHING,\n     matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n+    matches::SIGNIFICANT_DROP_IN_SCRUTINEE,\n     matches::SINGLE_MATCH,\n     matches::SINGLE_MATCH_ELSE,\n     matches::WILDCARD_ENUM_MATCH_ARM,\n@@ -479,7 +480,6 @@ store.register_lints(&[\n     shadow::SHADOW_REUSE,\n     shadow::SHADOW_SAME,\n     shadow::SHADOW_UNRELATED,\n-    significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE,\n     single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES,\n     single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n     size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,"}, {"sha": "7b13713c36e59abdc34f34765d7c18c91bfd45ee", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "patch": "@@ -24,12 +24,12 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::MUT_RANGE_BOUND),\n+    LintId::of(matches::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n     LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n-    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n     LintId::of(swap_ptr_to_ref::SWAP_PTR_TO_REF),"}, {"sha": "742409d758be9cfc0b9bc69c68a9dbbda48e09ce", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "patch": "@@ -367,7 +367,6 @@ mod self_named_constructors;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n-mod significant_drop_in_scrutinee;\n mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n@@ -886,7 +885,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));\n     store.register_late_pass(|| Box::new(only_used_in_recursion::OnlyUsedInRecursion));\n-    store.register_late_pass(|| Box::new(significant_drop_in_scrutinee::SignificantDropInScrutinee));\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n     store.register_late_pass(move || Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;"}, {"sha": "3c0dc8041d81748ca47178bb956f22b3fcd1fc3e", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "patch": "@@ -25,6 +25,7 @@ mod needless_match;\n mod overlapping_arms;\n mod redundant_pattern_match;\n mod rest_pat_in_fully_bound_struct;\n+mod significant_drop_in_scrutinee;\n mod single_match;\n mod wild_in_or_pats;\n \n@@ -748,6 +749,82 @@ declare_clippy_lint! {\n     \"creation of a case altering match expression with non-compliant arms\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Check for temporaries returned from function calls in a match scrutinee that have the\n+    /// `clippy::has_significant_drop` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `clippy::has_significant_drop` attribute can be added to types whose Drop impls have\n+    /// an important side-effect, such as unlocking a mutex, making it important for users to be\n+    /// able to accurately understand their lifetimes. When a temporary is returned in a function\n+    /// call in a match scrutinee, its lifetime lasts until the end of the match block, which may\n+    /// be surprising.\n+    ///\n+    /// For `Mutex`es this can lead to a deadlock. This happens when the match scrutinee uses a\n+    /// function call that returns a `MutexGuard` and then tries to lock again in one of the match\n+    /// arms. In that case the `MutexGuard` in the scrutinee will not be dropped until the end of\n+    /// the match block and thus will not unlock.\n+    ///\n+    /// ### Example\n+    /// ```rust.ignore\n+    /// # use std::sync::Mutex;\n+    ///\n+    /// # struct State {}\n+    ///\n+    /// # impl State {\n+    /// #     fn foo(&self) -> bool {\n+    /// #         true\n+    /// #     }\n+    ///\n+    /// #     fn bar(&self) {}\n+    /// # }\n+    ///\n+    ///\n+    /// let mutex = Mutex::new(State {});\n+    ///\n+    /// match mutex.lock().unwrap().foo() {\n+    ///     true => {\n+    ///         mutex.lock().unwrap().bar(); // Deadlock!\n+    ///     }\n+    ///     false => {}\n+    /// };\n+    ///\n+    /// println!(\"All done!\");\n+    ///\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::sync::Mutex;\n+    ///\n+    /// # struct State {}\n+    ///\n+    /// # impl State {\n+    /// #     fn foo(&self) -> bool {\n+    /// #         true\n+    /// #     }\n+    ///\n+    /// #     fn bar(&self) {}\n+    /// # }\n+    ///\n+    /// let mutex = Mutex::new(State {});\n+    ///\n+    /// let is_foo = mutex.lock().unwrap().foo();\n+    /// match is_foo {\n+    ///     true => {\n+    ///         mutex.lock().unwrap().bar();\n+    ///     }\n+    ///     false => {}\n+    /// };\n+    ///\n+    /// println!(\"All done!\");\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub SIGNIFICANT_DROP_IN_SCRUTINEE,\n+    suspicious,\n+    \"warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime\"\n+}\n+\n #[derive(Default)]\n pub struct Matches {\n     msrv: Option<RustcVersion>,\n@@ -786,6 +863,7 @@ impl_lint_pass!(Matches => [\n     MANUAL_UNWRAP_OR,\n     MATCH_ON_VEC_ITEMS,\n     MATCH_STR_CASE_MISMATCH,\n+    SIGNIFICANT_DROP_IN_SCRUTINEE,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n@@ -796,9 +874,12 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         let from_expansion = expr.span.from_expansion();\n \n         if let ExprKind::Match(ex, arms, source) = expr.kind {\n-            if !span_starts_with(cx, expr.span, \"match\") {\n+            if source == MatchSource::Normal && !span_starts_with(cx, expr.span, \"match\") {\n                 return;\n             }\n+            if matches!(source, MatchSource::Normal | MatchSource::ForLoopDesugar) {\n+                significant_drop_in_scrutinee::check(cx, expr, ex, source);\n+            }\n \n             collapsible_match::check_match(cx, arms);\n             if !from_expansion {"}, {"sha": "a211dc18f9e1e75c2676fcc371ec21694de5f9b0", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "renamed", "additions": 24, "deletions": 108, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc7753fb2b5e1af5c00f3c1e246cfd594611c75/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=dbc7753fb2b5e1af5c00f3c1e246cfd594611c75", "patch": "@@ -5,98 +5,24 @@ use clippy_utils::source::{indent_of, snippet};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::{Expr, ExprKind, MatchSource};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{Ty, TypeAndMut};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Check for temporaries returned from function calls in a match scrutinee that have the\n-    /// `clippy::has_significant_drop` attribute.\n-    ///\n-    /// ### Why is this bad?\n-    /// The `clippy::has_significant_drop` attribute can be added to types whose Drop impls have\n-    /// an important side-effect, such as unlocking a mutex, making it important for users to be\n-    /// able to accurately understand their lifetimes. When a temporary is returned in a function\n-    /// call in a match scrutinee, its lifetime lasts until the end of the match block, which may\n-    /// be surprising.\n-    ///\n-    /// For `Mutex`es this can lead to a deadlock. This happens when the match scrutinee uses a\n-    /// function call that returns a `MutexGuard` and then tries to lock again in one of the match\n-    /// arms. In that case the `MutexGuard` in the scrutinee will not be dropped until the end of\n-    /// the match block and thus will not unlock.\n-    ///\n-    /// ### Example\n-    /// ```rust.ignore\n-    /// # use std::sync::Mutex;\n-    ///\n-    /// # struct State {}\n-    ///\n-    /// # impl State {\n-    /// #     fn foo(&self) -> bool {\n-    /// #         true\n-    /// #     }\n-    ///\n-    /// #     fn bar(&self) {}\n-    /// # }\n-    ///\n-    ///\n-    /// let mutex = Mutex::new(State {});\n-    ///\n-    /// match mutex.lock().unwrap().foo() {\n-    ///     true => {\n-    ///         mutex.lock().unwrap().bar(); // Deadlock!\n-    ///     }\n-    ///     false => {}\n-    /// };\n-    ///\n-    /// println!(\"All done!\");\n-    ///\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// # use std::sync::Mutex;\n-    ///\n-    /// # struct State {}\n-    ///\n-    /// # impl State {\n-    /// #     fn foo(&self) -> bool {\n-    /// #         true\n-    /// #     }\n-    ///\n-    /// #     fn bar(&self) {}\n-    /// # }\n-    ///\n-    /// let mutex = Mutex::new(State {});\n-    ///\n-    /// let is_foo = mutex.lock().unwrap().foo();\n-    /// match is_foo {\n-    ///     true => {\n-    ///         mutex.lock().unwrap().bar();\n-    ///     }\n-    ///     false => {}\n-    /// };\n-    ///\n-    /// println!(\"All done!\");\n-    /// ```\n-    #[clippy::version = \"1.60.0\"]\n-    pub SIGNIFICANT_DROP_IN_SCRUTINEE,\n-    suspicious,\n-    \"warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime\"\n-}\n-\n-declare_lint_pass!(SignificantDropInScrutinee => [SIGNIFICANT_DROP_IN_SCRUTINEE]);\n+use super::SIGNIFICANT_DROP_IN_SCRUTINEE;\n \n-impl<'tcx> LateLintPass<'tcx> for SignificantDropInScrutinee {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some((suggestions, message)) = has_significant_drop_in_scrutinee(cx, expr) {\n-            for found in suggestions {\n-                span_lint_and_then(cx, SIGNIFICANT_DROP_IN_SCRUTINEE, found.found_span, message, |diag| {\n-                    set_diagnostic(diag, cx, expr, found);\n-                });\n-            }\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n+    scrutinee: &'tcx Expr<'_>,\n+    source: MatchSource,\n+) {\n+    if let Some((suggestions, message)) = has_significant_drop_in_scrutinee(cx, scrutinee, source) {\n+        for found in suggestions {\n+            span_lint_and_then(cx, SIGNIFICANT_DROP_IN_SCRUTINEE, found.found_span, message, |diag| {\n+                set_diagnostic(diag, cx, expr, found);\n+            });\n         }\n     }\n }\n@@ -148,28 +74,18 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n /// may have a surprising lifetime.\n fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n     cx: &'a LateContext<'tcx>,\n-    expr: &'tcx Expr<'tcx>,\n+    scrutinee: &'tcx Expr<'tcx>,\n+    source: MatchSource,\n ) -> Option<(Vec<FoundSigDrop>, &'static str)> {\n-    match expr.kind {\n-        ExprKind::Match(match_expr, _, source) => {\n-            match source {\n-                MatchSource::Normal | MatchSource::ForLoopDesugar => {\n-                    let mut helper = SigDropHelper::new(cx);\n-                    helper.find_sig_drop(match_expr).map(|drops| {\n-                        let message = if source == MatchSource::Normal {\n-                            \"temporary with significant drop in match scrutinee\"\n-                        } else {\n-                            \"temporary with significant drop in for loop\"\n-                        };\n-                        (drops, message)\n-                    })\n-                },\n-                // MatchSource of TryDesugar or AwaitDesugar is out of scope for this lint\n-                MatchSource::TryDesugar | MatchSource::AwaitDesugar => None,\n-            }\n-        },\n-        _ => None,\n-    }\n+    let mut helper = SigDropHelper::new(cx);\n+    helper.find_sig_drop(scrutinee).map(|drops| {\n+        let message = if source == MatchSource::Normal {\n+            \"temporary with significant drop in match scrutinee\"\n+        } else {\n+            \"temporary with significant drop in for loop\"\n+        };\n+        (drops, message)\n+    })\n }\n \n struct SigDropHelper<'a, 'tcx> {", "previous_filename": "clippy_lints/src/significant_drop_in_scrutinee.rs"}]}