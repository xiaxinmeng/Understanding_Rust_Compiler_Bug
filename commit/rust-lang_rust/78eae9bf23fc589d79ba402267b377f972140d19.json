{"sha": "78eae9bf23fc589d79ba402267b377f972140d19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWFlOWJmMjNmYzU4OWQ3OWJhNDAyMjY3YjM3N2Y5NzIxNDBkMTk=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-03-31T13:32:31Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-03-31T15:03:27Z"}, "message": "Only allow using the atomic intrinsics on integer types", "tree": {"sha": "6533a697d8c4f0a83906aaa270e4229dbd03b888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6533a697d8c4f0a83906aaa270e4229dbd03b888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78eae9bf23fc589d79ba402267b377f972140d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78eae9bf23fc589d79ba402267b377f972140d19", "html_url": "https://github.com/rust-lang/rust/commit/78eae9bf23fc589d79ba402267b377f972140d19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78eae9bf23fc589d79ba402267b377f972140d19/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a3849f228833f9dc280120126d16aef3a292ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a3849f228833f9dc280120126d16aef3a292ba", "html_url": "https://github.com/rust-lang/rust/commit/30a3849f228833f9dc280120126d16aef3a292ba"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "85c1ce9400c912664bd8c850e3c0ca3b7a3f2a94", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/78eae9bf23fc589d79ba402267b377f972140d19/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eae9bf23fc589d79ba402267b377f972140d19/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=78eae9bf23fc589d79ba402267b377f972140d19", "patch": "@@ -752,33 +752,47 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n             match split[1] {\n                 \"cxchg\" | \"cxchgweak\" => {\n-                    let cmp = from_immediate(bcx, llargs[1]);\n-                    let src = from_immediate(bcx, llargs[2]);\n-                    let ptr = PointerCast(bcx, llargs[0], val_ty(src).ptr_to());\n-                    let weak = if split[1] == \"cxchgweak\" { llvm::True } else { llvm::False };\n-                    let val = AtomicCmpXchg(bcx, ptr, cmp, src, order, failorder, weak);\n-                    let result = ExtractValue(bcx, val, 0);\n-                    let success = ZExt(bcx, ExtractValue(bcx, val, 1), Type::bool(bcx.ccx()));\n-                    Store(bcx,\n-                          result,\n-                          PointerCast(bcx, StructGEP(bcx, llresult, 0), val_ty(src).ptr_to()));\n-                    Store(bcx, success, StructGEP(bcx, llresult, 1));\n+                    let sty = &substs.types.get(FnSpace, 0).sty;\n+                    if int_type_width_signed(sty, ccx).is_some() {\n+                        let weak = if split[1] == \"cxchgweak\" { llvm::True } else { llvm::False };\n+                        let val = AtomicCmpXchg(bcx, llargs[0], llargs[1], llargs[2],\n+                                                order, failorder, weak);\n+                        let result = ExtractValue(bcx, val, 0);\n+                        let success = ZExt(bcx, ExtractValue(bcx, val, 1), Type::bool(bcx.ccx()));\n+                        Store(bcx, result, StructGEP(bcx, llresult, 0));\n+                        Store(bcx, success, StructGEP(bcx, llresult, 1));\n+                    } else {\n+                        span_invalid_monomorphization_error(\n+                            tcx.sess, span,\n+                            &format!(\"invalid monomorphization of `{}` intrinsic: \\\n+                                      expected basic integer type, found `{}`\", name, sty));\n+                    }\n                     C_nil(ccx)\n                 }\n \n                 \"load\" => {\n-                    let tp_ty = *substs.types.get(FnSpace, 0);\n-                    let mut ptr = llargs[0];\n-                    if let Some(ty) = fn_ty.ret.cast {\n-                        ptr = PointerCast(bcx, ptr, ty.ptr_to());\n+                    let sty = &substs.types.get(FnSpace, 0).sty;\n+                    if int_type_width_signed(sty, ccx).is_some() {\n+                        AtomicLoad(bcx, llargs[0], order)\n+                    } else {\n+                        span_invalid_monomorphization_error(\n+                            tcx.sess, span,\n+                            &format!(\"invalid monomorphization of `{}` intrinsic: \\\n+                                      expected basic integer type, found `{}`\", name, sty));\n+                        C_nil(ccx)\n                     }\n-                    to_immediate(bcx, AtomicLoad(bcx, ptr, order), tp_ty)\n                 }\n \n                 \"store\" => {\n-                    let val = from_immediate(bcx, llargs[1]);\n-                    let ptr = PointerCast(bcx, llargs[0], val_ty(val).ptr_to());\n-                    AtomicStore(bcx, val, ptr, order);\n+                    let sty = &substs.types.get(FnSpace, 0).sty;\n+                    if int_type_width_signed(sty, ccx).is_some() {\n+                        AtomicStore(bcx, llargs[1], llargs[0], order);\n+                    } else {\n+                        span_invalid_monomorphization_error(\n+                            tcx.sess, span,\n+                            &format!(\"invalid monomorphization of `{}` intrinsic: \\\n+                                      expected basic integer type, found `{}`\", name, sty));\n+                    }\n                     C_nil(ccx)\n                 }\n \n@@ -809,9 +823,16 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                         _ => ccx.sess().fatal(\"unknown atomic operation\")\n                     };\n \n-                    let val = from_immediate(bcx, llargs[1]);\n-                    let ptr = PointerCast(bcx, llargs[0], val_ty(val).ptr_to());\n-                    AtomicRMW(bcx, atom_op, ptr, val, order)\n+                    let sty = &substs.types.get(FnSpace, 0).sty;\n+                    if int_type_width_signed(sty, ccx).is_some() {\n+                        AtomicRMW(bcx, atom_op, llargs[0], llargs[1], order)\n+                    } else {\n+                        span_invalid_monomorphization_error(\n+                            tcx.sess, span,\n+                            &format!(\"invalid monomorphization of `{}` intrinsic: \\\n+                                      expected basic integer type, found `{}`\", name, sty));\n+                        C_nil(ccx)\n+                    }\n                 }\n             }\n "}, {"sha": "6e20662b702a94c254547bf231018e1938bae0ea", "filename": "src/test/run-pass/issue-23550.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78eae9bf23fc589d79ba402267b377f972140d19/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eae9bf23fc589d79ba402267b377f972140d19/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23550.rs?ref=78eae9bf23fc589d79ba402267b377f972140d19", "patch": "@@ -16,24 +16,16 @@ use std::intrinsics;\n #[derive(Copy, Clone)]\n struct Wrap(i64);\n \n-// These volatile and atomic intrinsics used to cause an ICE\n+// These volatile intrinsics used to cause an ICE\n \n unsafe fn test_bool(p: &mut bool, v: bool) {\n     intrinsics::volatile_load(p);\n     intrinsics::volatile_store(p, v);\n-    intrinsics::atomic_load(p);\n-    intrinsics::atomic_cxchg(p, v, v);\n-    intrinsics::atomic_store(p, v);\n-    intrinsics::atomic_xchg(p, v);\n }\n \n unsafe fn test_immediate_fca(p: &mut Wrap, v: Wrap) {\n     intrinsics::volatile_load(p);\n     intrinsics::volatile_store(p, v);\n-    intrinsics::atomic_load(p);\n-    intrinsics::atomic_cxchg(p, v, v);\n-    intrinsics::atomic_store(p, v);\n-    intrinsics::atomic_xchg(p, v);\n }\n \n fn main() {}"}]}