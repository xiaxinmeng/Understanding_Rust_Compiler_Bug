{"sha": "0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MzZiOGRjYWFmY2ZjMGU1MTcxM2EwNWViMDA4MmE2ZTIwNzI1YjE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-18T21:07:04Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-03-18T23:09:06Z"}, "message": "Ensure LLVM is in the link path for rustc tools", "tree": {"sha": "dd0583c55005531efe4331b9b4dcb26600122fb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0583c55005531efe4331b9b4dcb26600122fb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "html_url": "https://github.com/rust-lang/rust/commit/0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0536b8dcaafcfc0e51713a05eb0082a6e20725b1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f5aed385b390dc53f8974092d5c7fd9a1ca634", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f5aed385b390dc53f8974092d5c7fd9a1ca634", "html_url": "https://github.com/rust-lang/rust/commit/71f5aed385b390dc53f8974092d5c7fd9a1ca634"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "31125ec4a26a22b34d4107251041e3d9740761c5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0536b8dcaafcfc0e51713a05eb0082a6e20725b1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0536b8dcaafcfc0e51713a05eb0082a6e20725b1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "patch": "@@ -11,7 +11,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n-use build_helper::t;\n+use build_helper::{output, t};\n \n use crate::cache::{Cache, Interned, INTERNER};\n use crate::check;\n@@ -23,7 +23,7 @@ use crate::install;\n use crate::native;\n use crate::test;\n use crate::tool;\n-use crate::util::{self, add_dylib_path, exe, libdir};\n+use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n use crate::{Build, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n@@ -1034,6 +1034,20 @@ impl<'a> Builder<'a> {\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n+        // Tools that use compiler libraries may inherit the `-lLLVM` link\n+        // requirement, but the `-L` library path is not propagated across\n+        // separate Cargo projects. We can add LLVM's library path to the\n+        // platform-specific environment variable as a workaround.\n+        //\n+        // Note that this is disabled if LLVM itself is disabled or we're in a\n+        // check build, where if we're in a check build there's no need to build\n+        // all of LLVM and such.\n+        if self.config.llvm_enabled() && self.kind != Kind::Check && mode == Mode::ToolRustc {\n+            let llvm_config = self.ensure(native::Llvm { target });\n+            let llvm_libdir = output(Command::new(&llvm_config).arg(\"--libdir\"));\n+            add_link_lib_path(vec![llvm_libdir.trim().into()], &mut cargo);\n+        }\n+\n         if self.config.incremental {\n             cargo.env(\"CARGO_INCREMENTAL\", \"1\");\n         } else {"}, {"sha": "2bc6f1939d97b5cc53b420e95e20f37710b27fd3", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0536b8dcaafcfc0e51713a05eb0082a6e20725b1/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0536b8dcaafcfc0e51713a05eb0082a6e20725b1/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=0536b8dcaafcfc0e51713a05eb0082a6e20725b1", "patch": "@@ -72,6 +72,31 @@ pub fn dylib_path() -> Vec<PathBuf> {\n     env::split_paths(&var).collect()\n }\n \n+/// Adds a list of lookup paths to `cmd`'s link library lookup path.\n+pub fn add_link_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n+    let mut list = link_lib_path();\n+    for path in path {\n+        list.insert(0, path);\n+    }\n+    cmd.env(link_lib_path_var(), t!(env::join_paths(list)));\n+}\n+\n+/// Returns the environment variable which the link library lookup path\n+/// resides in for this platform.\n+fn link_lib_path_var() -> &'static str {\n+    if cfg!(target_env = \"msvc\") { \"LIB\" } else { \"LIBRARY_PATH\" }\n+}\n+\n+/// Parses the `link_lib_path_var()` environment variable, returning a list of\n+/// paths that are members of this lookup path.\n+fn link_lib_path() -> Vec<PathBuf> {\n+    let var = match env::var_os(link_lib_path_var()) {\n+        Some(v) => v,\n+        None => return vec![],\n+    };\n+    env::split_paths(&var).collect()\n+}\n+\n /// `push` all components to `buf`. On windows, append `.exe` to the last component.\n pub fn push_exe_path(mut buf: PathBuf, components: &[&str]) -> PathBuf {\n     let (&file, components) = components.split_last().expect(\"at least one component required\");"}]}