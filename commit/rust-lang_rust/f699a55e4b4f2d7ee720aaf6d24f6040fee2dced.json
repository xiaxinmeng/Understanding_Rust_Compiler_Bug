{"sha": "f699a55e4b4f2d7ee720aaf6d24f6040fee2dced", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OTlhNTVlNGI0ZjJkN2VlNzIwYWFmNmQyNGY2MDQwZmVlMmRjZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-10T16:15:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T16:15:24Z"}, "message": "Rollup merge of #70981 - ssomers:btreemap_into_into_iter, r=Mark-Simulacrum\n\nRearrange BTreeMap::into_iter to match range_mut.\n\nr? @Mark-Simulacrum\nI wondered why you catered for the optional root differently in `into_iter` than in `range_mut`.", "tree": {"sha": "347a8dcd67c7b34cde6590175c543328d3ed96ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347a8dcd67c7b34cde6590175c543328d3ed96ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f699a55e4b4f2d7ee720aaf6d24f6040fee2dced", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekJucCRBK7hj4Ov3rIwAAdHIIAEWx+QOGNp3vPXC04imrdI2m\nSblCGhPZrWGyfMAxjDJqlvWF6hbC6ehhXM1+0huGlB2DVPfLZO2Ux9Jk4dHWNpE8\nIfLijYVcZDqEd3aoco7EG50Yw+JJhpAxnTU50Veu9Bleu8lxAyBYRiCWYw5DVeBe\n6ZC7izeJ/dAP2glTi0+lCDBEwhGHamIIDVhDuYIu17jD17YXUrzEuvdPBw72w5s7\n/UGsiA02d5nOsQcyVzaZr8+CL/Z50d2TE17SPmutX9+dYN070/sz20bOnyqv+wi1\nptAq8nky+e0QW6L6aZ56594ksmSC+c91BTzqj8SObufc6QBOkTLrs4/DN2w8lEQ=\n=d4qF\n-----END PGP SIGNATURE-----\n", "payload": "tree 347a8dcd67c7b34cde6590175c543328d3ed96ac\nparent 277ce9e2499f72d3d0d84b4921df77a1707ffe52\nparent 4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1586535324 +0200\ncommitter GitHub <noreply@github.com> 1586535324 +0200\n\nRollup merge of #70981 - ssomers:btreemap_into_into_iter, r=Mark-Simulacrum\n\nRearrange BTreeMap::into_iter to match range_mut.\n\nr? @Mark-Simulacrum\nI wondered why you catered for the optional root differently in `into_iter` than in `range_mut`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f699a55e4b4f2d7ee720aaf6d24f6040fee2dced", "html_url": "https://github.com/rust-lang/rust/commit/f699a55e4b4f2d7ee720aaf6d24f6040fee2dced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f699a55e4b4f2d7ee720aaf6d24f6040fee2dced/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "277ce9e2499f72d3d0d84b4921df77a1707ffe52", "url": "https://api.github.com/repos/rust-lang/rust/commits/277ce9e2499f72d3d0d84b4921df77a1707ffe52", "html_url": "https://github.com/rust-lang/rust/commit/277ce9e2499f72d3d0d84b4921df77a1707ffe52"}, {"sha": "4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "html_url": "https://github.com/rust-lang/rust/commit/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "38fa3d736246ca1523e60c17ee65622626aebd37", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f699a55e4b4f2d7ee720aaf6d24f6040fee2dced/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f699a55e4b4f2d7ee720aaf6d24f6040fee2dced/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f699a55e4b4f2d7ee720aaf6d24f6040fee2dced", "patch": "@@ -1544,19 +1544,19 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type IntoIter = IntoIter<K, V>;\n \n     fn into_iter(self) -> IntoIter<K, V> {\n-        let me = ManuallyDrop::new(self);\n-        if me.root.is_none() {\n-            return IntoIter { front: None, back: None, length: 0 };\n-        }\n-\n-        let root1 = unsafe { unwrap_unchecked(ptr::read(&me.root)).into_ref() };\n-        let root2 = unsafe { unwrap_unchecked(ptr::read(&me.root)).into_ref() };\n-        let len = me.length;\n-\n-        IntoIter {\n-            front: Some(root1.first_leaf_edge()),\n-            back: Some(root2.last_leaf_edge()),\n-            length: len,\n+        let mut me = ManuallyDrop::new(self);\n+        if let Some(root) = me.root.as_mut() {\n+            let root1 = unsafe { ptr::read(root).into_ref() };\n+            let root2 = unsafe { ptr::read(root).into_ref() };\n+            let len = me.length;\n+\n+            IntoIter {\n+                front: Some(root1.first_leaf_edge()),\n+                back: Some(root2.last_leaf_edge()),\n+                length: len,\n+            }\n+        } else {\n+            IntoIter { front: None, back: None, length: 0 }\n         }\n     }\n }"}]}