{"sha": "2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjIwNjNlNGM2ZmJkYjYxY2UyYTJkZDljZTUwZDEyZmU5ZjBlOWI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-15T16:03:52Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-18T23:16:49Z"}, "message": "[const-prop] Handle MIR Rvalue::Box", "tree": {"sha": "06637c0f742fb5cbf1bcd28ca7c9c077ba11b556", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06637c0f742fb5cbf1bcd28ca7c9c077ba11b556"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b", "html_url": "https://github.com/rust-lang/rust/commit/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d89031e801e03009e74a3028007dd387e859717", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d89031e801e03009e74a3028007dd387e859717", "html_url": "https://github.com/rust-lang/rust/commit/4d89031e801e03009e74a3028007dd387e859717"}], "stats": {"total": 75, "additions": 57, "deletions": 18}, "files": [{"sha": "984938d00b2f07fba318b10420cce8e6909d7f65", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n-    Local, NullOp, UnOp, StatementKind, Statement, LocalKind,\n+    Local, UnOp, StatementKind, Statement, LocalKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp,\n     SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock,\n };\n@@ -434,23 +434,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> Option<Const<'tcx>> {\n         let span = source_info.span;\n \n-        // if this isn't a supported operation, then return None\n-        match rvalue {\n-            Rvalue::NullaryOp(NullOp::Box, _) => return None,\n-\n-            Rvalue::Use(_) |\n-            Rvalue::Len(_) |\n-            Rvalue::Repeat(..) |\n-            Rvalue::Aggregate(..) |\n-            Rvalue::Discriminant(..) |\n-            Rvalue::Cast(..) |\n-            Rvalue::NullaryOp(..) |\n-            Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::Ref(..) |\n-            Rvalue::UnaryOp(..) |\n-            Rvalue::BinaryOp(..) => { }\n-        }\n-\n         // perform any special checking for specific Rvalue types\n         if let Rvalue::UnaryOp(op, arg) = rvalue {\n             trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);"}, {"sha": "cf134dadf27890ea552083929b28b6c00817ef43", "filename": "src/test/mir-opt/const_prop/boxes.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs?ref=2d22063e4c6fbdb61ce2a2dd9ce50d12fe9f0e9b", "patch": "@@ -0,0 +1,56 @@\n+// compile-flags: -O\n+// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32\n+// ignore-wasm64\n+\n+#![feature(box_syntax)]\n+\n+// Note: this test verifies that we, in fact, do not const prop `box`\n+\n+fn main() {\n+    let x = *(box 42) + 0;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _4 = Box(i32);\n+//      (*_4) = const 42i32;\n+//      _3 = move _4;\n+//      ...\n+//      _2 = (*_3);\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//      drop(_3) -> [return: bb2, unwind: bb1];\n+//  }\n+//  bb1 (cleanup): {\n+//      resume;\n+//  }\n+//  bb2: {\n+//      ...\n+//      _0 = ();\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _4 = Box(i32);\n+//      (*_4) = const 42i32;\n+//      _3 = move _4;\n+//      ...\n+//      _2 = (*_3);\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//      drop(_3) -> [return: bb2, unwind: bb1];\n+//  }\n+//  bb1 (cleanup): {\n+//      resume;\n+//  }\n+//  bb2: {\n+//      ...\n+//      _0 = ();\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}]}