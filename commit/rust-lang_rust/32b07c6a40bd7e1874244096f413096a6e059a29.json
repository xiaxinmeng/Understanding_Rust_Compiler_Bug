{"sha": "32b07c6a40bd7e1874244096f413096a6e059a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYjA3YzZhNDBiZDdlMTg3NDI0NDA5NmY0MTMwOTZhNmUwNTlhMjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-16T18:39:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-24T21:21:56Z"}, "message": "Remove unbound pipes from io::pipe\n\nThis isn't necessary for creating processes (or at least not right now), and\nit inherently attempts to expose implementation details.", "tree": {"sha": "6ac20628e90c670b3447e31259c833176cb6e49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ac20628e90c670b3447e31259c833176cb6e49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32b07c6a40bd7e1874244096f413096a6e059a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32b07c6a40bd7e1874244096f413096a6e059a29", "html_url": "https://github.com/rust-lang/rust/commit/32b07c6a40bd7e1874244096f413096a6e059a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32b07c6a40bd7e1874244096f413096a6e059a29/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc", "html_url": "https://github.com/rust-lang/rust/commit/c6fa4e277f5eb873e979d8ac1ae7a4c3ccb1e9cc"}], "stats": {"total": 76, "additions": 26, "deletions": 50}, "files": [{"sha": "eaff43378f2ed04316444478173b25b9dccc57e5", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -261,7 +261,6 @@ pub use self::net::tcp::TcpListener;\n pub use self::net::tcp::TcpStream;\n pub use self::net::udp::UdpStream;\n pub use self::pipe::PipeStream;\n-pub use self::pipe::UnboundPipeStream;\n pub use self::process::Process;\n \n // Some extension traits that all Readers and Writers get."}, {"sha": "67e04f57f4f2ffcbb11f3cfafdafcc1c12beedcd", "filename": "src/libstd/rt/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fpipe.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -16,35 +16,13 @@\n use prelude::*;\n use super::{Reader, Writer};\n use rt::io::{io_error, read_error, EndOfFile};\n-use rt::local::Local;\n-use rt::rtio::{RtioPipe, RtioPipeObject, IoFactoryObject, IoFactory};\n-use rt::rtio::RtioUnboundPipeObject;\n+use rt::rtio::{RtioPipe, RtioPipeObject};\n \n pub struct PipeStream {\n     priv obj: ~RtioPipeObject\n }\n \n-// This should not be a newtype, but rt::uv::process::set_stdio needs to reach\n-// into the internals of this :(\n-pub struct UnboundPipeStream(~RtioUnboundPipeObject);\n-\n impl PipeStream {\n-    /// Creates a new pipe initialized, but not bound to any particular\n-    /// source/destination\n-    pub fn new() -> Option<UnboundPipeStream> {\n-        let pipe = unsafe {\n-            let io: *mut IoFactoryObject = Local::unsafe_borrow();\n-            (*io).pipe_init(false)\n-        };\n-        match pipe {\n-            Ok(p) => Some(UnboundPipeStream(p)),\n-            Err(ioerr) => {\n-                io_error::cond.raise(ioerr);\n-                None\n-            }\n-        }\n-    }\n-\n     pub fn new_bound(inner: ~RtioPipeObject) -> PipeStream {\n         PipeStream { obj: inner }\n     }"}, {"sha": "f6e8b87344f98f5174779a180a293f7416c04c22", "filename": "src/libstd/rt/io/process.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fprocess.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -70,15 +70,13 @@ pub enum StdioContainer {\n     /// specified for.\n     InheritFd(libc::c_int),\n \n-    /// Creates a pipe for the specified file descriptor which will be directed\n-    /// into the previously-initialized pipe passed in.\n+    /// Creates a pipe for the specified file descriptor which will be created\n+    /// when the process is spawned.\n     ///\n     /// The first boolean argument is whether the pipe is readable, and the\n     /// second is whether it is writable. These properties are from the view of\n     /// the *child* process, not the parent process.\n-    CreatePipe(io::UnboundPipeStream,\n-               bool /* readable */,\n-               bool /* writable */),\n+    CreatePipe(bool /* readable */, bool /* writable */),\n }\n \n impl Process {"}, {"sha": "c37d9bf913b7b9050b6fe1b30f328f7e43c3ccf0", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -35,7 +35,6 @@ pub type RtioUdpSocketObject = uvio::UvUdpSocket;\n pub type RtioTimerObject = uvio::UvTimer;\n pub type PausibleIdleCallback = uvio::UvPausibleIdleCallback;\n pub type RtioPipeObject = uvio::UvPipeStream;\n-pub type RtioUnboundPipeObject = uvio::UvUnboundPipe;\n pub type RtioProcessObject = uvio::UvProcess;\n pub type RtioUnixListenerObject = uvio::UvUnixListener;\n pub type RtioUnixAcceptorObject = uvio::UvUnixAcceptor;\n@@ -88,7 +87,6 @@ pub trait IoFactory {\n     fn fs_rmdir<P: PathLike>(&mut self, path: &P) -> Result<(), IoError>;\n     fn fs_readdir<P: PathLike>(&mut self, path: &P, flags: c_int) ->\n         Result<~[Path], IoError>;\n-    fn pipe_init(&mut self, ipc: bool) -> Result<~RtioUnboundPipeObject, IoError>;\n     fn spawn(&mut self, config: ProcessConfig)\n             -> Result<(~RtioProcessObject, ~[Option<~RtioPipeObject>]), IoError>;\n "}, {"sha": "25c516b6008726426ae87e892e2f13fb257c4af1", "filename": "src/libstd/rt/uv/process.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fprocess.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -17,7 +17,7 @@ use vec;\n \n use rt::io::process::*;\n use rt::uv;\n-use rt::uv::uvio::UvPipeStream;\n+use rt::uv::uvio::{UvPipeStream, UvUnboundPipe};\n use rt::uv::uvll;\n \n /// A process wraps the handle of the underlying uv_process_t.\n@@ -68,7 +68,8 @@ impl Process {\n         unsafe {\n             vec::raw::set_len(&mut stdio, io.len());\n             for (slot, other) in stdio.iter().zip(io.move_iter()) {\n-                let io = set_stdio(slot as *uvll::uv_stdio_container_t, other);\n+                let io = set_stdio(slot as *uvll::uv_stdio_container_t, other,\n+                                   loop_);\n                 ret_io.push(io);\n             }\n         }\n@@ -144,7 +145,8 @@ impl Process {\n }\n \n unsafe fn set_stdio(dst: *uvll::uv_stdio_container_t,\n-                    io: StdioContainer) -> Option<~UvPipeStream> {\n+                    io: StdioContainer,\n+                    loop_: &uv::Loop) -> Option<~UvPipeStream> {\n     match io {\n         Ignored => {\n             uvll::set_stdio_container_flags(dst, uvll::STDIO_IGNORE);\n@@ -155,18 +157,19 @@ unsafe fn set_stdio(dst: *uvll::uv_stdio_container_t,\n             uvll::set_stdio_container_fd(dst, fd);\n             None\n         }\n-        CreatePipe(pipe, readable, writable) => {\n+        CreatePipe(readable, writable) => {\n             let mut flags = uvll::STDIO_CREATE_PIPE as libc::c_int;\n             if readable {\n                 flags |= uvll::STDIO_READABLE_PIPE as libc::c_int;\n             }\n             if writable {\n                 flags |= uvll::STDIO_WRITABLE_PIPE as libc::c_int;\n             }\n+            let pipe = UvUnboundPipe::new_fresh(loop_);\n             let handle = pipe.pipe.as_stream().native_handle();\n             uvll::set_stdio_container_flags(dst, flags);\n             uvll::set_stdio_container_stream(dst, handle);\n-            Some(~UvPipeStream::new(**pipe))\n+            Some(~UvPipeStream::new(pipe))\n         }\n     }\n }"}, {"sha": "db19bc7463a9cf0f9a82f8caeb6edb033297f681", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -749,11 +749,6 @@ impl IoFactory for UvIoFactory {\n         return result_cell.take();\n     }\n \n-    fn pipe_init(&mut self, ipc: bool) -> Result<~RtioUnboundPipeObject, IoError> {\n-        let home = get_handle_to_current_scheduler!();\n-        Ok(~UvUnboundPipe::new(Pipe::new(self.uv_loop(), ipc), home))\n-    }\n-\n     fn spawn(&mut self, config: ProcessConfig)\n             -> Result<(~RtioProcessObject, ~[Option<~RtioPipeObject>]), IoError>\n     {\n@@ -1069,9 +1064,19 @@ pub struct UvUnboundPipe {\n }\n \n impl UvUnboundPipe {\n+    /// Takes ownership of an unbound pipe along with the scheduler that it is\n+    /// homed on.\n     fn new(pipe: Pipe, home: SchedHandle) -> UvUnboundPipe {\n         UvUnboundPipe { pipe: pipe, home: home }\n     }\n+\n+    /// Creates a fresh new unbound pipe on the specified I/O loop\n+    pub fn new_fresh(loop_: &Loop) -> UvUnboundPipe {\n+        UvUnboundPipe {\n+            pipe: Pipe::new(loop_, false),\n+            home: get_handle_to_current_scheduler!(),\n+        }\n+    }\n }\n \n impl HomingIO for UvUnboundPipe {"}, {"sha": "14595f83ce506a1d3c950f71b9233b5be9b07690", "filename": "src/test/run-pass/rtio-processes.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b07c6a40bd7e1874244096f413096a6e059a29/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frtio-processes.rs?ref=32b07c6a40bd7e1874244096f413096a6e059a29", "patch": "@@ -25,7 +25,6 @@\n \n use std::rt::io::process::{Process, ProcessConfig, CreatePipe, Ignored};\n use std::rt::io::{Reader, Writer};\n-use std::rt::io::pipe::PipeStream;\n use std::str;\n \n #[test]\n@@ -105,8 +104,7 @@ fn run_output(args: ProcessConfig) -> ~str {\n #[test]\n #[cfg(unix, not(target_os=\"android\"))]\n fn stdout_works() {\n-    let pipe = PipeStream::new().unwrap();\n-    let io = ~[Ignored, CreatePipe(pipe, false, true)];\n+    let io = ~[Ignored, CreatePipe(false, true)];\n     let args = ProcessConfig {\n         program: \"/bin/sh\",\n         args: [~\"-c\", ~\"echo foobar\"],\n@@ -120,8 +118,7 @@ fn stdout_works() {\n #[test]\n #[cfg(unix, not(target_os=\"android\"))]\n fn set_cwd_works() {\n-    let pipe = PipeStream::new().unwrap();\n-    let io = ~[Ignored, CreatePipe(pipe, false, true)];\n+    let io = ~[Ignored, CreatePipe(false, true)];\n     let cwd = Some(\"/\");\n     let args = ProcessConfig {\n         program: \"/bin/sh\",\n@@ -136,10 +133,8 @@ fn set_cwd_works() {\n #[test]\n #[cfg(unix, not(target_os=\"android\"))]\n fn stdin_works() {\n-    let input = PipeStream::new().unwrap();\n-    let output = PipeStream::new().unwrap();\n-    let io = ~[CreatePipe(input, true, false),\n-               CreatePipe(output, false, true)];\n+    let io = ~[CreatePipe(true, false),\n+               CreatePipe(false, true)];\n     let args = ProcessConfig {\n         program: \"/bin/sh\",\n         args: [~\"-c\", ~\"read line; echo $line\"],"}]}