{"sha": "dee7c7b075292ed46d898cb5c685c876baf28cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTdjN2IwNzUyOTJlZDQ2ZDg5OGNiNWM2ODVjODc2YmFmMjhjZmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:22:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:22:10Z"}, "message": "Sync from rust a50d72158e08e02cfc051b863017bdbd2c45b637", "tree": {"sha": "1fcb7ca322b07914430bc6feb33f7f0bf33cf2bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcb7ca322b07914430bc6feb33f7f0bf33cf2bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee7c7b075292ed46d898cb5c685c876baf28cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee7c7b075292ed46d898cb5c685c876baf28cfe", "html_url": "https://github.com/rust-lang/rust/commit/dee7c7b075292ed46d898cb5c685c876baf28cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee7c7b075292ed46d898cb5c685c876baf28cfe/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9926a29bb9b4f3e5f8e9f20d881f45ebba81cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9926a29bb9b4f3e5f8e9f20d881f45ebba81cc", "html_url": "https://github.com/rust-lang/rust/commit/bc9926a29bb9b4f3e5f8e9f20d881f45ebba81cc"}, {"sha": "8224e72fbc599606bcc2d54630b653df21f0022d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8224e72fbc599606bcc2d54630b653df21f0022d", "html_url": "https://github.com/rust-lang/rust/commit/8224e72fbc599606bcc2d54630b653df21f0022d"}], "stats": {"total": 131, "additions": 16, "deletions": 115}, "files": [{"sha": "22897c43e7ef917cdc456010c9129d35aca97c1e", "filename": "src/archive.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=dee7c7b075292ed46d898cb5c685c876baf28cfe", "patch": "@@ -254,6 +254,15 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             }\n         }\n     }\n+\n+    fn inject_dll_import_lib(\n+        &mut self,\n+        _lib_name: &str,\n+        _dll_imports: &[rustc_middle::middle::cstore::DllImport],\n+        _tmpdir: &rustc_data_structures::temp_dir::MaybeTempDir,\n+    ) {\n+        bug!(\"injecting dll imports is not supported\");\n+    }\n }\n \n impl<'a> ArArchiveBuilder<'a> {"}, {"sha": "6676d88602c45d9e34991e80ce25e6cf158077e5", "filename": "src/driver/aot.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=dee7c7b075292ed46d898cb5c685c876baf28cfe", "patch": "@@ -177,21 +177,6 @@ pub(crate) fn run_aot(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)> {\n-    use rustc_span::symbol::sym;\n-\n-    let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n-    let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n-    let windows_subsystem = subsystem.map(|subsystem| {\n-        if subsystem != sym::windows && subsystem != sym::console {\n-            tcx.sess.fatal(&format!(\n-                \"invalid windows subsystem `{}`, only \\\n-                                    `windows` and `console` are allowed\",\n-                subsystem\n-            ));\n-        }\n-        subsystem.to_string()\n-    });\n-\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n@@ -307,12 +292,10 @@ pub(crate) fn run_aot(\n \n     Box::new((\n         CodegenResults {\n-            crate_name: tcx.crate_name(LOCAL_CRATE),\n             modules,\n             allocator_module,\n             metadata_module,\n             metadata,\n-            windows_subsystem,\n             linker_info: LinkerInfo::new(tcx, crate::target_triple(tcx.sess).to_string()),\n             crate_info: CrateInfo::new(tcx),\n         },"}, {"sha": "904efed5bd98c6e45800273a60a59da92529968a", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dee7c7b075292ed46d898cb5c685c876baf28cfe", "patch": "@@ -28,8 +28,7 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n \n@@ -164,17 +163,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         }\n     }\n \n-    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n-        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n-    }\n-\n-    fn provide(&self, _providers: &mut Providers) {}\n-    fn provide_extern(&self, _providers: &mut Providers) {}\n-\n     fn target_features(&self, _sess: &Session) -> Vec<rustc_span::Symbol> {\n         vec![]\n     }\n \n+    fn print_version(&self) {\n+        println!(\"Cranelift version: {}\", cranelift_codegen::VERSION);\n+    }\n+\n     fn codegen_crate(\n         &self,\n         tcx: TyCtxt<'_>,\n@@ -222,7 +218,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             sess,\n             &codegen_results,\n             outputs,\n-            &codegen_results.crate_name.as_str(),\n+            &codegen_results.crate_info.local_crate_name.as_str(),\n         );\n \n         Ok(())"}, {"sha": "f86236ef3eafc6eee6c6a476bb19d2fed1f13ce4", "filename": "src/toolchain.rs", "status": "modified", "additions": 1, "deletions": 88, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee7c7b075292ed46d898cb5c685c876baf28cfe/src%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftoolchain.rs?ref=dee7c7b075292ed46d898cb5c685c876baf28cfe", "patch": "@@ -2,9 +2,8 @@\n \n use std::path::PathBuf;\n \n-use rustc_middle::bug;\n+use rustc_codegen_ssa::back::link::linker_and_flavor;\n use rustc_session::Session;\n-use rustc_target::spec::LinkerFlavor;\n \n /// Tries to infer the path of a binary for the target toolchain from the linker name.\n pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n@@ -30,89 +29,3 @@ pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n \n     linker\n }\n-\n-// Adapted from https://github.com/rust-lang/rust/blob/5db778affee7c6600c8e7a177c48282dab3f6292/src/librustc_codegen_ssa/back/link.rs#L848-L931\n-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n-    fn infer_from(\n-        sess: &Session,\n-        linker: Option<PathBuf>,\n-        flavor: Option<LinkerFlavor>,\n-    ) -> Option<(PathBuf, LinkerFlavor)> {\n-        match (linker, flavor) {\n-            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n-            // only the linker flavor is known; use the default linker for the selected flavor\n-            (None, Some(flavor)) => Some((\n-                PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Gcc => {\n-                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n-                            // On historical Solaris systems, \"cc\" may have\n-                            // been Sun Studio, which is not flag-compatible\n-                            // with \"gcc\".  This history casts a long shadow,\n-                            // and many modern illumos distributions today\n-                            // ship GCC as \"gcc\" without also making it\n-                            // available as \"cc\".\n-                            \"gcc\"\n-                        } else {\n-                            \"cc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n-                    LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                }),\n-                flavor,\n-            )),\n-            (Some(linker), None) => {\n-                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n-                    sess.fatal(\"couldn't extract file stem from specified linker\")\n-                });\n-\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                {\n-                    LinkerFlavor::Gcc\n-                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::Ld\n-                } else if stem == \"link\" || stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.lld_flavor)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n-                Some((linker, flavor))\n-            }\n-            (None, None) => None,\n-        }\n-    }\n-\n-    // linker and linker flavor specified via command line have precedence over what the target\n-    // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n-        return ret;\n-    }\n-\n-    if let Some(ret) = infer_from(\n-        sess,\n-        sess.target.linker.clone().map(PathBuf::from),\n-        Some(sess.target.linker_flavor),\n-    ) {\n-        return ret;\n-    }\n-\n-    bug!(\"Not enough information provided to determine how to invoke the linker\");\n-}"}]}