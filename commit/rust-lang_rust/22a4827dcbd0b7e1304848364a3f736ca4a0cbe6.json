{"sha": "22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYTQ4MjdkY2JkMGI3ZTEzMDQ4NDgzNjRhM2Y3MzZjYTRhMGNiZTY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-14T05:21:42Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-28T13:12:53Z"}, "message": "Place::ty_from takes local by value", "tree": {"sha": "099029b0445b27fb2f98ff1aec646dfcaec15ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099029b0445b27fb2f98ff1aec646dfcaec15ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl4wM1UACgkQiMlBzaHU\nZDL5KA//WZ1Vzw7ar9TRDaaJyDLFyT9KOna+cfTK7Bqw0enNnEQ5WrfTz8F/U5I4\nrl6XiMQH8IxntsG7+xDmcUj8q5B0FFnAozKsnlb2KZV+waACyGE5HJY4qpzjoFpS\nlTifjBl/+04rHHgnT6XYbawJY14+skN+Lf/5vz2cbHzBX7O0P3uKk9adD6Y0iEIJ\nM5Z9ySoGD9huXAFEERGT0DDS2GFu4nWDeqxkSIRnqk3rUbqmoffwndJJO8uctAfp\n7RuaJe+wXBcf0YaForNU2hbKhlW31lsU68w1liJVkFafHZVpjnZ+ELKAf5/iHSW8\nY1OhjDD+koEhjbTjKXN3fUbGCYKfHeNTWLNv9doiaxs8mLo9HwVcf38wc2uQkU65\nb5VpmSwou8l5wGxVTK5ianb6C0C9SyP3jKxPj/awHle1vL/GMO1Tzz/bTnuzoBLN\nzCCSd6i3Ty3kMHVWaGPqG2+0ghTufGKH3XpRuiQ67/dl2HXXDy90cHgBXogtCisS\nKxF3TRzbhGW7wz8dr2LiPa1kF7iHW0YQ55hbYUGNlOoRjkgeBpAnxtX+ncwpGaHF\np9pBvMMZartZSM7i8kwF/PfIE9jEG3kG7abED8kbcEIMGuFuus9IWDQJXDI3sGGw\nZBe/Ly6gbkepMGKZKW0U0vdMNZvWN4JaqbtsUNZ9/SEk6UmugZs=\n=bZ6Q\n-----END PGP SIGNATURE-----", "payload": "tree 099029b0445b27fb2f98ff1aec646dfcaec15ed7\nparent b5b6be0ab7c500782c5f4d55166d09fa02f8103e\nauthor Santiago Pastorino <spastorino@gmail.com> 1578979302 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1580217173 -0300\n\nPlace::ty_from takes local by value\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "html_url": "https://github.com/rust-lang/rust/commit/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5b6be0ab7c500782c5f4d55166d09fa02f8103e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b6be0ab7c500782c5f4d55166d09fa02f8103e", "html_url": "https://github.com/rust-lang/rust/commit/b5b6be0ab7c500782c5f4d55166d09fa02f8103e"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "e6c7c84494cd80c0d934ae0aaace8a138fc5ddf1", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -114,7 +114,7 @@ impl<'tcx> PlaceTy<'tcx> {\n \n impl<'tcx> Place<'tcx> {\n     pub fn ty_from<D>(\n-        local: &Local,\n+        local: Local,\n         projection: &[PlaceElem<'tcx>],\n         local_decls: &D,\n         tcx: TyCtxt<'tcx>,\n@@ -124,7 +124,7 @@ impl<'tcx> Place<'tcx> {\n     {\n         projection\n             .iter()\n-            .fold(PlaceTy::from_ty(local_decls.local_decls()[*local].ty), |place_ty, elem| {\n+            .fold(PlaceTy::from_ty(local_decls.local_decls()[local].ty), |place_ty, elem| {\n                 place_ty.projection_ty(tcx, elem)\n             })\n     }\n@@ -133,7 +133,7 @@ impl<'tcx> Place<'tcx> {\n     where\n         D: HasLocalDecls<'tcx>,\n     {\n-        Place::ty_from(&self.local, &self.projection, local_decls, tcx)\n+        Place::ty_from(self.local, &self.projection, local_decls, tcx)\n     }\n }\n "}, {"sha": "d4b0ab0448a8b46b8cb73bb09b52b529eca2f7a7", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -128,7 +128,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             };\n             if is_consume {\n                 let base_ty =\n-                    mir::Place::ty_from(&place_ref.local, proj_base, *self.fx.mir, cx.tcx());\n+                    mir::Place::ty_from(place_ref.local, proj_base, *self.fx.mir, cx.tcx());\n                 let base_ty = self.fx.monomorphize(&base_ty);\n \n                 // ZSTs don't require any actual memory access."}, {"sha": "fa82daa0f7d526addf04a56654a049af6c280d45", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n     pub fn monomorphized_place_ty(&self, place_ref: mir::PlaceRef<'_, 'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n-        let place_ty = mir::Place::ty_from(&place_ref.local, place_ref.projection, *self.mir, tcx);\n+        let place_ty = mir::Place::ty_from(place_ref.local, place_ref.projection, *self.mir, tcx);\n         self.monomorphize(&place_ty.ty)\n     }\n }"}, {"sha": "338244307c2cebe978cdd1543f4ae3a0713152d0", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -186,7 +186,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n \n             let ty =\n-                Place::ty_from(&used_place.local, used_place.projection, *self.body, self.infcx.tcx)\n+                Place::ty_from(used_place.local, used_place.projection, *self.body, self.infcx.tcx)\n                     .ty;\n             let needs_note = match ty.kind {\n                 ty::Closure(id, _) => {\n@@ -604,7 +604,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     cursor = proj_base;\n \n                     match elem {\n-                        ProjectionElem::Field(field, _) if union_ty(local, proj_base).is_some() => {\n+                        ProjectionElem::Field(field, _) if union_ty(*local, proj_base).is_some() => {\n                             return Some((PlaceRef { local: *local, projection: proj_base }, field));\n                         }\n                         _ => {}\n@@ -622,7 +622,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     cursor = proj_base;\n \n                     if let ProjectionElem::Field(field, _) = elem {\n-                        if let Some(union_ty) = union_ty(local, proj_base) {\n+                        if let Some(union_ty) = union_ty(*local, proj_base) {\n                             if field != target_field\n                                 && *local == target_base.local\n                                 && proj_base == target_base.projection\n@@ -1513,7 +1513,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         StorageDeadOrDrop::LocalStorageDead\n                         | StorageDeadOrDrop::BoxedStorageDead => {\n                             assert!(\n-                                Place::ty_from(&place.local, proj_base, *self.body, tcx)\n+                                Place::ty_from(place.local, proj_base, *self.body, tcx)\n                                     .ty\n                                     .is_box(),\n                                 \"Drop of value behind a reference or raw pointer\"\n@@ -1523,7 +1523,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         StorageDeadOrDrop::Destructor(_) => base_access,\n                     },\n                     ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n-                        let base_ty = Place::ty_from(&place.local, proj_base, *self.body, tcx).ty;\n+                        let base_ty = Place::ty_from(place.local, proj_base, *self.body, tcx).ty;\n                         match base_ty.kind {\n                             ty::Adt(def, _) if def.has_dtor(tcx) => {\n                                 // Report the outermost adt with a destructor"}, {"sha": "ba4af59eede06f97774de81ffa4be85fa60c2f3f", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -316,7 +316,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n                 ProjectionElem::Downcast(_, variant_index) => {\n                     let base_ty =\n-                        Place::ty_from(&place.local, place.projection, *self.body, self.infcx.tcx)\n+                        Place::ty_from(place.local, place.projection, *self.body, self.infcx.tcx)\n                             .ty;\n                     self.describe_field_from_ty(&base_ty, field, Some(*variant_index))\n                 }\n@@ -447,7 +447,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // If we didn't find an overloaded deref or index, then assume it's a\n         // built in deref and check the type of the base.\n-        let base_ty = Place::ty_from(&deref_base.local, deref_base.projection, *self.body, tcx).ty;\n+        let base_ty = Place::ty_from(deref_base.local, deref_base.projection, *self.body, tcx).ty;\n         if base_ty.is_unsafe_ptr() {\n             BorrowedContentSource::DerefRawPointer\n         } else if base_ty.is_mutable_ptr() {"}, {"sha": "563ff1112c3a654ea2e6a8967e88ec6ebc645fdc", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: [proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             } => {\n                 debug_assert!(is_closure_or_generator(\n-                    Place::ty_from(&local, proj_base, *self.body, self.infcx.tcx).ty\n+                    Place::ty_from(local, proj_base, *self.body, self.infcx.tcx).ty\n                 ));\n \n                 item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     debug_assert!(self.body.local_decls[Local::new(1)].ty.is_region_ptr());\n                     debug_assert!(is_closure_or_generator(\n                         Place::ty_from(\n-                            &the_place_err.local,\n+                            the_place_err.local,\n                             the_place_err.projection,\n                             *self.body,\n                             self.infcx.tcx\n@@ -195,7 +195,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 if let Some((span, message)) = annotate_struct_field(\n                     self.infcx.tcx,\n-                    Place::ty_from(&local, proj_base, *self.body, self.infcx.tcx).ty,\n+                    Place::ty_from(local, proj_base, *self.body, self.infcx.tcx).ty,\n                     field,\n                 ) {\n                     err.span_suggestion(\n@@ -271,7 +271,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: [proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             } => {\n                 debug_assert!(is_closure_or_generator(\n-                    Place::ty_from(&local, proj_base, *self.body, self.infcx.tcx).ty\n+                    Place::ty_from(local, proj_base, *self.body, self.infcx.tcx).ty\n                 ));\n \n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));"}, {"sha": "717359d75c3bea7ec01ce7e9786139f55066c13c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -1623,7 +1623,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             place_span.0.projection\n         {\n             let place_ty =\n-                Place::ty_from(&place_span.0.local, base_proj, self.body(), self.infcx.tcx);\n+                Place::ty_from(place_span.0.local, base_proj, self.body(), self.infcx.tcx);\n             if let ty::Array(..) = place_ty.ty.kind {\n                 let array_place = PlaceRef { local: place_span.0.local, projection: base_proj };\n                 self.check_if_subslice_element_is_moved(\n@@ -1740,7 +1740,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     // assigning to `P.f` requires `P` itself\n                     // be already initialized\n                     let tcx = self.infcx.tcx;\n-                    let base_ty = Place::ty_from(&place.local, proj_base, self.body(), tcx).ty;\n+                    let base_ty = Place::ty_from(place.local, proj_base, self.body(), tcx).ty;\n                     match base_ty.kind {\n                         ty::Adt(def, _) if def.has_dtor(tcx) => {\n                             self.check_if_path_or_subpath_is_moved(\n@@ -1844,7 +1844,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n                 if let ty::Adt(def, _) =\n-                    Place::ty_from(&base.local, base.projection, this.body(), tcx).ty.kind\n+                    Place::ty_from(base.local, base.projection, this.body(), tcx).ty.kind\n                 {\n                     if def.is_union() {\n                         if this.move_data.path_map[mpi].iter().any(|moi| {\n@@ -2058,7 +2058,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 match elem {\n                     ProjectionElem::Deref => {\n                         let base_ty =\n-                            Place::ty_from(&place.local, proj_base, self.body(), self.infcx.tcx).ty;\n+                            Place::ty_from(place.local, proj_base, self.body(), self.infcx.tcx).ty;\n \n                         // Check the kind of deref to decide\n                         match base_ty.kind {\n@@ -2192,7 +2192,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         match place_projection {\n             [base @ .., ProjectionElem::Field(field, _ty)] => {\n                 let tcx = self.infcx.tcx;\n-                let base_ty = Place::ty_from(&place_ref.local, base, self.body(), tcx).ty;\n+                let base_ty = Place::ty_from(place_ref.local, base, self.body(), tcx).ty;\n \n                 if (base_ty.is_closure() || base_ty.is_generator())\n                     && (!by_ref || self.upvars[field.index()].by_ref)"}, {"sha": "01c44d0d905b6fa6bb1cd9b86de3502dd688ff25", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n             let proj_base = &self.projection[..i];\n \n             if *elem == ProjectionElem::Deref {\n-                let ty = Place::ty_from(&self.local, proj_base, body, tcx).ty;\n+                let ty = Place::ty_from(self.local, proj_base, body, tcx).ty;\n                 match ty.kind {\n                     ty::Ref(_, _, hir::Mutability::Not) if i == 0 => {\n                         // For references to thread-local statics, we do need"}, {"sha": "984de021ca11276da6b3648c87a3ac3d76053d8b", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -208,7 +208,7 @@ fn place_components_conflict<'tcx>(\n             // access cares about.\n \n             let proj_base = &borrow_place.projection[..access_place.projection.len() + i];\n-            let base_ty = Place::ty_from(&borrow_local, proj_base, body, tcx).ty;\n+            let base_ty = Place::ty_from(borrow_local, proj_base, body, tcx).ty;\n \n             match (elem, &base_ty.kind, access) {\n                 (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n@@ -329,7 +329,7 @@ fn place_projection_conflict<'tcx>(\n                 debug!(\"place_element_conflict: DISJOINT-OR-EQ-FIELD\");\n                 Overlap::EqualOrDisjoint\n             } else {\n-                let ty = Place::ty_from(&pi1_local, pi1_proj_base, body, tcx).ty;\n+                let ty = Place::ty_from(pi1_local, pi1_proj_base, body, tcx).ty;\n                 match ty.kind {\n                     ty::Adt(def, _) if def.is_union() => {\n                         // Different fields of a union, we are basically stuck."}, {"sha": "31bee460fa0113f4a9be55e61c87062f0f4c0aad", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -120,7 +120,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                     // derefs, except we stop at the deref of a shared\n                     // reference.\n \n-                    let ty = Place::ty_from(&cursor.local, proj_base, *self.body, self.tcx).ty;\n+                    let ty = Place::ty_from(cursor.local, proj_base, *self.body, self.tcx).ty;\n                     match ty.kind {\n                         ty::RawPtr(_) | ty::Ref(_ /*rgn*/, _ /*ty*/, hir::Mutability::Not) => {\n                             // don't continue traversing over derefs of raw pointers or shared"}, {"sha": "f645435cdf60fa9aedd59d9aff96ea73e140ced4", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -2390,7 +2390,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             match elem {\n                 ProjectionElem::Deref => {\n                     let tcx = self.infcx.tcx;\n-                    let base_ty = Place::ty_from(&borrowed_place.local, proj_base, body, tcx).ty;\n+                    let base_ty = Place::ty_from(borrowed_place.local, proj_base, body, tcx).ty;\n \n                     debug!(\"add_reborrow_constraint - base_ty = {:?}\", base_ty);\n                     match base_ty.kind {"}, {"sha": "62af196174fd7b91e93d4bff86719385ae0183aa", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -109,7 +109,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             let proj_base = &place.projection[..i];\n             let body = self.builder.body;\n             let tcx = self.builder.tcx;\n-            let place_ty = Place::ty_from(&place.local, proj_base, body, tcx).ty;\n+            let place_ty = Place::ty_from(place.local, proj_base, body, tcx).ty;\n             match place_ty.kind {\n                 ty::Ref(..) | ty::RawPtr(..) => {\n                     let proj = &place.projection[..i + 1];\n@@ -490,7 +490,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n         // of the union so it is marked as initialized again.\n         if let [proj_base @ .., ProjectionElem::Field(_, _)] = place.projection {\n             if let ty::Adt(def, _) =\n-                Place::ty_from(&place.local, proj_base, self.builder.body, self.builder.tcx).ty.kind\n+                Place::ty_from(place.local, proj_base, self.builder.body, self.builder.tcx).ty.kind\n             {\n                 if def.is_union() {\n                     place = PlaceRef { local: place.local, projection: proj_base }"}, {"sha": "2c0c0cbbaddb957ca7ee902d0981a7b05cf94b9d", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -46,7 +46,7 @@ pub trait Qualif {\n             let qualif = base_qualif\n                 && Self::in_any_value_of_ty(\n                     cx,\n-                    Place::ty_from(&place.local, proj_base, *cx.body, cx.tcx)\n+                    Place::ty_from(place.local, proj_base, *cx.body, cx.tcx)\n                         .projection_ty(cx.tcx, elem)\n                         .ty,\n                 );\n@@ -149,7 +149,7 @@ pub trait Qualif {\n             Rvalue::Ref(_, _, ref place) | Rvalue::AddressOf(_, ref place) => {\n                 // Special-case reborrows to be more like a copy of the reference.\n                 if let [proj_base @ .., ProjectionElem::Deref] = place.projection.as_ref() {\n-                    let base_ty = Place::ty_from(&place.local, proj_base, *cx.body, cx.tcx).ty;\n+                    let base_ty = Place::ty_from(place.local, proj_base, *cx.body, cx.tcx).ty;\n                     if let ty::Ref(..) = base_ty.kind {\n                         return Self::in_place(\n                             cx,"}, {"sha": "6f109a060dfc1e1712b1127c3615470f61955f03", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -448,7 +448,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n \n         match elem {\n             ProjectionElem::Deref => {\n-                let base_ty = Place::ty_from(place_local, proj_base, *self.body, self.tcx).ty;\n+                let base_ty = Place::ty_from(*place_local, proj_base, *self.body, self.tcx).ty;\n                 if let ty::RawPtr(_) = base_ty.kind {\n                     if proj_base.is_empty() {\n                         if let (local, []) = (place_local, proj_base) {\n@@ -472,7 +472,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {\n-                let base_ty = Place::ty_from(place_local, proj_base, *self.body, self.tcx).ty;\n+                let base_ty = Place::ty_from(*place_local, proj_base, *self.body, self.tcx).ty;\n                 match base_ty.ty_adt_def() {\n                     Some(def) if def.is_union() => {\n                         self.check_op(ops::UnionAccess);\n@@ -664,7 +664,7 @@ fn place_as_reborrow(\n         //\n         // This is sufficient to prevent an access to a `static mut` from being marked as a\n         // reborrow, even if the check above were to disappear.\n-        let inner_ty = Place::ty_from(&place.local, inner, body, tcx).ty;\n+        let inner_ty = Place::ty_from(place.local, inner, body, tcx).ty;\n         match inner_ty.kind {\n             ty::Ref(..) => Some(inner),\n             _ => None,"}, {"sha": "6188414035fce61273608ac9acfc6951e9b56108", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -215,7 +215,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 }\n             }\n             let is_borrow_of_interior_mut = context.is_borrow()\n-                && !Place::ty_from(&place.local, proj_base, self.body, self.tcx).ty.is_freeze(\n+                && !Place::ty_from(place.local, proj_base, self.body, self.tcx).ty.is_freeze(\n                     self.tcx,\n                     self.param_env,\n                     self.source_info.span,\n@@ -260,7 +260,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n-            let base_ty = Place::ty_from(&place.local, proj_base, self.body, self.tcx).ty;\n+            let base_ty = Place::ty_from(place.local, proj_base, self.body, self.tcx).ty;\n             match base_ty.kind {\n                 ty::RawPtr(..) => self.require_unsafe(\n                     \"dereference of raw pointer\",\n@@ -414,7 +414,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             match elem {\n                 ProjectionElem::Field(..) => {\n                     let ty =\n-                        Place::ty_from(&place.local, proj_base, &self.body.local_decls, self.tcx)\n+                        Place::ty_from(place.local, proj_base, &self.body.local_decls, self.tcx)\n                             .ty;\n                     match ty.kind {\n                         ty::Adt(def, _) => match self.tcx.layout_scalar_valid_range(def.did) {"}, {"sha": "48b4d00a2e9b6480d8fa7ebbf94c9136b6d64e6a", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -95,7 +95,7 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             if let PlaceRef { local, projection: &[ref proj_base @ .., ProjectionElem::Deref] } =\n                 place.as_ref()\n             {\n-                if Place::ty_from(&local, proj_base, self.body, self.tcx).ty.is_region_ptr() {\n+                if Place::ty_from(local, proj_base, self.body, self.tcx).ty.is_region_ptr() {\n                     self.optimizations.and_stars.insert(location);\n                 }\n             }"}, {"sha": "f82225c6ae14756251cdb91557d9bfda0b17c1c8", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -329,7 +329,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                                 // FIXME(eddyb) this is probably excessive, with\n                                 // the exception of `union` member accesses.\n                                 let ty =\n-                                    Place::ty_from(&place.local, proj_base, *self.body, self.tcx)\n+                                    Place::ty_from(place.local, proj_base, *self.body, self.tcx)\n                                         .projection_ty(self.tcx, elem)\n                                         .ty;\n                                 if ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n@@ -491,7 +491,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     ProjectionElem::Field(..) => {\n                         if self.const_kind.is_none() {\n                             let base_ty =\n-                                Place::ty_from(&place.local, proj_base, *self.body, self.tcx).ty;\n+                                Place::ty_from(place.local, proj_base, *self.body, self.tcx).ty;\n                             if let Some(def) = base_ty.ty_adt_def() {\n                                 // No promotion of union field accesses.\n                                 if def.is_union() {\n@@ -589,7 +589,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 // Raw reborrows can come from reference to pointer coercions,\n                 // so are allowed.\n                 if let [proj_base @ .., ProjectionElem::Deref] = place.projection.as_ref() {\n-                    let base_ty = Place::ty_from(&place.local, proj_base, *self.body, self.tcx).ty;\n+                    let base_ty = Place::ty_from(place.local, proj_base, *self.body, self.tcx).ty;\n                     if let ty::Ref(..) = base_ty.kind {\n                         return self.validate_place(PlaceRef {\n                             local: place.local,\n@@ -628,7 +628,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 // Special-case reborrows to be more like a copy of the reference.\n                 let mut place = place.as_ref();\n                 if let [proj_base @ .., ProjectionElem::Deref] = &place.projection {\n-                    let base_ty = Place::ty_from(&place.local, proj_base, *self.body, self.tcx).ty;\n+                    let base_ty = Place::ty_from(place.local, proj_base, *self.body, self.tcx).ty;\n                     if let ty::Ref(..) = base_ty.kind {\n                         place = PlaceRef { local: place.local, projection: proj_base };\n                     }\n@@ -647,7 +647,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     while let [proj_base @ .., elem] = place_projection {\n                         // FIXME(eddyb) this is probably excessive, with\n                         // the exception of `union` member accesses.\n-                        let ty = Place::ty_from(&place.local, proj_base, *self.body, self.tcx)\n+                        let ty = Place::ty_from(place.local, proj_base, *self.body, self.tcx)\n                             .projection_ty(self.tcx, elem)\n                             .ty;\n                         if ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {"}, {"sha": "49921badf33d958e066e0fe87e25a7fa5a9e2bc8", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -268,7 +268,7 @@ fn check_place(\n             ProjectionElem::Downcast(_symbol, _variant_index) => {}\n \n             ProjectionElem::Field(..) => {\n-                let base_ty = Place::ty_from(&place.local, &proj_base, body, tcx).ty;\n+                let base_ty = Place::ty_from(place.local, &proj_base, body, tcx).ty;\n                 if let Some(def) = base_ty.ty_adt_def() {\n                     // No union field accesses in `const fn`\n                     if def.is_union() {"}, {"sha": "d7f2abfbe9943b8c9a316fb0b6150bcb3b837d34", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -46,7 +46,7 @@ where\n             // encountered a Deref, which is ABI-aligned\n             ProjectionElem::Deref => break,\n             ProjectionElem::Field(..) => {\n-                let ty = Place::ty_from(&place.local, proj_base, local_decls, tcx).ty;\n+                let ty = Place::ty_from(place.local, proj_base, local_decls, tcx).ty;\n                 match ty.kind {\n                     ty::Adt(def, _) if def.repr.packed() => return true,\n                     _ => {}"}, {"sha": "907300d45aac0142f4088ecafc3cb3d1b43476d1", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a4827dcbd0b7e1304848364a3f736ca4a0cbe6/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=22a4827dcbd0b7e1304848364a3f736ca4a0cbe6", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) {\n         let tcx = self.hir.tcx();\n         let place_ty =\n-            Place::ty_from(&base_place.local, &base_place.projection, &self.local_decls, tcx);\n+            Place::ty_from(base_place.local, &base_place.projection, &self.local_decls, tcx);\n         if let ty::Slice(_) = place_ty.ty.kind {\n             // We need to create fake borrows to ensure that the bounds\n             // check that we just did stays valid. Since we can't assign to\n@@ -374,7 +374,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 match elem {\n                     ProjectionElem::Deref => {\n                         let fake_borrow_deref_ty = Place::ty_from(\n-                            &base_place.local,\n+                            base_place.local,\n                             &base_place.projection[..idx],\n                             &self.local_decls,\n                             tcx,\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                     ProjectionElem::Index(_) => {\n                         let index_ty = Place::ty_from(\n-                            &base_place.local,\n+                            base_place.local,\n                             &base_place.projection[..idx],\n                             &self.local_decls,\n                             tcx,"}]}