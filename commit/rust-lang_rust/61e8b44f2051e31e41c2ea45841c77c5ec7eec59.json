{"sha": "61e8b44f2051e31e41c2ea45841c77c5ec7eec59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZThiNDRmMjA1MWUzMWU0MWMyZWE0NTg0MWM3N2M1ZWM3ZWVjNTk=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-11T20:24:47Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T04:46:39Z"}, "message": "Add support for vectors.", "tree": {"sha": "245deb8b57266c01aedf35207d14ff1845ffe0bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/245deb8b57266c01aedf35207d14ff1845ffe0bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e8b44f2051e31e41c2ea45841c77c5ec7eec59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e8b44f2051e31e41c2ea45841c77c5ec7eec59", "html_url": "https://github.com/rust-lang/rust/commit/61e8b44f2051e31e41c2ea45841c77c5ec7eec59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e8b44f2051e31e41c2ea45841c77c5ec7eec59/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d019d52088eef214a492a252f85038df79f129", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d019d52088eef214a492a252f85038df79f129", "html_url": "https://github.com/rust-lang/rust/commit/30d019d52088eef214a492a252f85038df79f129"}], "stats": {"total": 135, "additions": 72, "deletions": 63}, "files": [{"sha": "3949e88f3c2f6fda27d789cfefe52f9b6d058cf7", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 72, "deletions": 63, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/61e8b44f2051e31e41c2ea45841c77c5ec7eec59/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e8b44f2051e31e41c2ea45841c77c5ec7eec59/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=61e8b44f2051e31e41c2ea45841c77c5ec7eec59", "patch": "@@ -25,6 +25,8 @@ const LexicalBlockTag: int = 11;\n const PointerTypeTag: int = 15;\n const StructureTypeTag: int = 19;\n const MemberTag: int = 13;\n+const ArrayTypeTag: int = 1;\n+const SubrangeTag: int = 33;\n \n const DW_ATE_boolean: int = 0x02;\n const DW_ATE_float: int = 0x04;\n@@ -342,21 +344,9 @@ type struct_ctxt = {\n };\n \n fn finish_structure(cx: @struct_ctxt) -> ValueRef {\n-    let lldata = [lltag(StructureTypeTag),\n-                  cx.file,\n-                  llstr(cx.name), // type name\n-                  cx.file, // source file definition\n-                  lli32(cx.line), // source line definition\n-                  lli64(cx.total_size), // size of members\n-                  lli64(cx.align), // align\n-                  lli64(0), // offset\n-                  lli32(0), // flags\n-                  llnull(), // derived from\n-                  llmdnode(cx.members), // members\n-                  lli32(0),  // runtime language\n-                  llnull()\n-                 ];\n-    ret llmdnode(lldata);\n+    ret create_composite_type(StructureTypeTag, cx.name, cx.file, cx.line,\n+                              cx.total_size, cx.align, 0, option::none,\n+                              option::some(cx.members));\n }\n \n fn create_structure(file: @metadata<file_md>, name: str, line: int)\n@@ -396,7 +386,6 @@ fn get_record_metadata(cx: @crate_ctxt, t: ty::t, fields: [ast::ty_field],\n                                line_from_span(cx.sess.get_codemap(),\n                                               span) as int);\n     for field in fields {\n-        //let field_t = option::get(ccx_tcx(cx).ast_ty_to_ty_cache.get(field.node.mt.ty));\n         let field_t = ty::get_field(ccx_tcx(cx), t, field.node.ident).mt.ty;\n         let ty_md = get_ty_metadata(cx, field_t, field.node.mt.ty);\n         let (size, align) = member_size_and_align(field.node.mt.ty);\n@@ -418,60 +407,20 @@ fn get_boxed_type_metadata(cx: @crate_ctxt, outer: ty::t, inner: ty::t,\n       option::some(md) { ret md; }\n       option::none. {}\n     }*/\n-    let (size, align) = size_and_align_of::<@int>();\n     let fname = filename_from_span(cx, span);\n     let file_node = get_file_metadata(cx, fname);\n     //let cu_node = get_compile_unit_metadata(cx, fname);\n     let tcx = ccx_tcx(cx);\n     let uint_t = ty::mk_uint(tcx);\n     let uint_ty = @{node: ast::ty_uint(ast::ty_u), span: span};\n     let refcount_type = get_basic_type_metadata(cx, uint_t, uint_ty);\n-    /*let refcount_ptr_type = get_pointer_type_metadata(cx,\n-                                                      ty::mk_imm_uniq(tcx, uint_t),\n-                                                      span, refcount_type);*/\n-    /*let boxed_ptr_type = get_pointer_type_metadata(cx, ty::mk_imm_uniq(tcx, inner),\n-                                                   span, boxed);*/\n-    //let ptr_size = sys::size_of::<ctypes::intptr_t>() as int;\n-    //let ptr_align = sys::align_of::<ctypes::intptr_t>() as int;\n-    let size = sys::size_of::<uint>() as int * 8;\n-    let total_size = size;\n-    let refcount = [lltag(MemberTag),\n-                    file_node.node,\n-                    llstr(\"refcnt\"),\n-                    file_node.node,\n-                    lli32(0),\n-                    lli64(size),\n-                    lli64(sys::align_of::<uint>() as int * 8),\n-                    lli64(0),\n-                    lli32(0),\n-                    refcount_type.node];\n-    let size = 64; //XXX member_size_and_align(???)\n-    let boxed_member = [lltag(MemberTag),\n-                        file_node.node,\n-                        llstr(\"boxed\"),\n-                        file_node.node,\n-                        lli32(0),\n-                        lli64(size),\n-                        lli64(64), //XXX align of inner\n-                        lli64(total_size),\n-                        lli32(0),\n-                        boxed.node];\n-    total_size += size;\n-    let members = [llmdnode(refcount), llmdnode(boxed_member)];\n-    let lldata = [lltag(tg),\n-                  file_node.node,\n-                  llstr(ty_to_str(ccx_tcx(cx), outer)),\n-                  file_node.node,\n-                  lli32(0), //XXX source line\n-                  lli64(total_size),  // size in bits\n-                  lli64(align * 8), // alignment in bits\n-                  lli64(0), //XXX offset?\n-                  lli32(0), //XXX flags\n-                  llnull(), // derived from\n-                  llmdnode(members), // members\n-                  lli32(0) // runtime language\n-                 ];\n-    let llnode = llmdnode(lldata);\n+    let scx = create_structure(file_node, ty_to_str(ccx_tcx(cx), outer), 0);\n+    add_member(scx, \"refcnt\", 0, sys::size_of::<uint>() as int, \n+               sys::align_of::<uint>() as int, refcount_type.node);\n+    add_member(scx, \"boxed\", 0, 8, //XXX member_size_and_align(??)\n+               8, //XXX just a guess \n+               boxed.node);\n+    let llnode = finish_structure(scx);\n     let mdval = @{node: llnode, data: {hash: outer}};\n     //update_cache(cache, tg, tydesc_metadata(mdval));\n     llvm::LLVMAddNamedMetadataOperand(cx.llmod, as_buf(\"llvm.dbg.ty\"),\n@@ -480,6 +429,56 @@ fn get_boxed_type_metadata(cx: @crate_ctxt, outer: ty::t, inner: ty::t,\n     ret mdval;\n }\n \n+fn create_composite_type(type_tag: int, name: str, file: ValueRef, line: int,\n+                         size: int, align: int, offset: int,\n+                         derived: option::t<ValueRef>,\n+                         members: option::t<[ValueRef]>)\n+    -> ValueRef {\n+    let lldata = [lltag(type_tag),\n+                  file,\n+                  llstr(name), // type name\n+                  file, // source file definition\n+                  lli32(line), // source line definition\n+                  lli64(size), // size of members\n+                  lli64(align), // align\n+                  lli64(offset), // offset\n+                  lli32(0), // flags\n+                  option::is_none(derived) ? llnull() : // derived from\n+                                             option::get(derived),\n+                  option::is_none(members) ? llnull() : // members\n+                                             llmdnode(option::get(members)),\n+                  lli32(0),  // runtime language\n+                  llnull()\n+                 ];\n+    ret llmdnode(lldata);\n+}\n+\n+fn get_vec_metadata(cx: @crate_ctxt, vec_t: ty::t, elem_t: ty::t, vec_ty: @ast::ty)\n+    -> @metadata<tydesc_md> {\n+    let fname = filename_from_span(cx, vec_ty.span);\n+    let file_node = get_file_metadata(cx, fname);\n+    let elem_ty = alt vec_ty.node { ast::ty_vec(mt) { mt.ty } };\n+    let elem_ty_md = get_ty_metadata(cx, elem_t, elem_ty);\n+    let tcx = ccx_tcx(cx);\n+    let scx = create_structure(file_node, ty_to_str(tcx, vec_t), 0);\n+    let uint_ty = @{node: ast::ty_uint(ast::ty_u), span: vec_ty.span};\n+    let size_t_type = get_basic_type_metadata(cx, ty::mk_uint(tcx), uint_ty);\n+    add_member(scx, \"fill\", 0, sys::size_of::<ctypes::size_t>() as int,\n+               sys::align_of::<ctypes::size_t>() as int, size_t_type.node);\n+    add_member(scx, \"alloc\", 0, sys::size_of::<ctypes::size_t>() as int,\n+               sys::align_of::<ctypes::size_t>() as int, size_t_type.node);\n+    let subrange = llmdnode([lltag(SubrangeTag), lli64(0), lli64(0)]);\n+    let (arr_size, arr_align) = member_size_and_align(elem_ty);\n+    let data_ptr = create_composite_type(ArrayTypeTag, \"\", file_node.node, 0,\n+                                         arr_size, arr_align, 0,\n+                                         option::some(elem_ty_md.node),\n+                                         option::some([subrange]));\n+    add_member(scx, \"data\", 0, 0, // according to an equivalent clang dump, the size should be 0\n+               sys::align_of::<u8>() as int, data_ptr);\n+    let llnode = finish_structure(scx);\n+    ret @{node: llnode, data: {hash: vec_t}};\n+}\n+\n fn member_size_and_align(ty: @ast::ty) -> (int, int) {\n     alt ty.node {\n       ast::ty_bool. { size_and_align_of::<bool>() }\n@@ -512,6 +511,9 @@ fn member_size_and_align(ty: @ast::ty) -> (int, int) {\n         }\n         (total_size, 64) //XXX different align for other arches?\n       }\n+      ast::ty_vec(_) {\n+        size_and_align_of::<ctypes::uintptr_t>()\n+      }\n     }\n }\n \n@@ -545,6 +547,8 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n             }\n             ast::ty_rec(fs)\n           }\n+          ty::ty_vec(mt) { ast::ty_vec({ty: t_to_ty(cx, mt.ty, span),\n+                                        mut: mt.mut}) }\n         };\n         ret @{node: ty, span: span};\n     }\n@@ -572,6 +576,11 @@ fn get_ty_metadata(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_\n       ast::ty_rec(fields) {\n         ret get_record_metadata(cx, t, fields, ty.span);\n       }\n+      ast::ty_vec(mt) {\n+        let inner_t = ty::sequence_element_type(ccx_tcx(cx), t);\n+        let v = get_vec_metadata(cx, t, inner_t, ty);\n+        ret get_pointer_type_metadata(cx, t, ty.span, v);\n+      }\n       _ { ret get_basic_type_metadata(cx, t, ty); }\n     };\n }"}]}