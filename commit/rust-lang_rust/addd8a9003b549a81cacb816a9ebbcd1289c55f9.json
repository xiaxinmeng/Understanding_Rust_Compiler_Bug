{"sha": "addd8a9003b549a81cacb816a9ebbcd1289c55f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZGQ4YTkwMDNiNTQ5YTgxY2FjYjgxNmE5ZWJiY2QxMjg5YzU1Zjk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-12T13:23:27Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:55:38Z"}, "message": "Apply suggestions from code review", "tree": {"sha": "9667ae1890f5130fbeb0c60604b44da628458477", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9667ae1890f5130fbeb0c60604b44da628458477"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/addd8a9003b549a81cacb816a9ebbcd1289c55f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/addd8a9003b549a81cacb816a9ebbcd1289c55f9", "html_url": "https://github.com/rust-lang/rust/commit/addd8a9003b549a81cacb816a9ebbcd1289c55f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/addd8a9003b549a81cacb816a9ebbcd1289c55f9/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b679e77f0462e17f5268e22e07499608ad2199e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b679e77f0462e17f5268e22e07499608ad2199e5", "html_url": "https://github.com/rust-lang/rust/commit/b679e77f0462e17f5268e22e07499608ad2199e5"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "0e07a5983bab5c43cd8b325392365a255cee9711", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/addd8a9003b549a81cacb816a9ebbcd1289c55f9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addd8a9003b549a81cacb816a9ebbcd1289c55f9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=addd8a9003b549a81cacb816a9ebbcd1289c55f9", "patch": "@@ -1231,9 +1231,9 @@ impl<'tcx> IntRange<'tcx> {\n         (*self.range.start(), *self.range.end())\n     }\n \n+    /// Don't treat `usize`/`isize` exhaustively unless the `precise_pointer_size_matching` feature\n+    /// is enabled.\n     fn treat_exhaustively(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        // Don't treat `usize`/`isize` exhaustively unless the `precise_pointer_size_matching`\n-        // feature is enabled.\n         !self.ty.is_ptr_sized_integral() || tcx.features().precise_pointer_size_matching\n     }\n \n@@ -1416,7 +1416,7 @@ impl<'tcx> IntRange<'tcx> {\n     }\n }\n \n-// Ignore spans when comparing, they don't carry semantic information as they are only for lints.\n+/// Ignore spans when comparing, they don't carry semantic information as they are only for lints.\n impl<'tcx> std::cmp::PartialEq for IntRange<'tcx> {\n     fn eq(&self, other: &Self) -> bool {\n         self.range == other.range && self.ty == other.ty\n@@ -2079,9 +2079,9 @@ fn constructor_covered_by_range<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &Pat<'tcx>,\n-) -> bool {\n+) -> Option<()> {\n     if let Single = ctor {\n-        return true;\n+        return Some(());\n     }\n \n     let (pat_from, pat_to, pat_end, ty) = match *pat.kind {\n@@ -2096,16 +2096,11 @@ fn constructor_covered_by_range<'tcx>(\n     };\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, pat_from, pat_to, ty);\n \n-    let to = match compare_const_vals(tcx, ctor_to, pat_to, param_env, ty) {\n-        Some(to) => to,\n-        None => return false,\n-    };\n-    let from = match compare_const_vals(tcx, ctor_from, pat_from, param_env, ty) {\n-        Some(from) => from,\n-        None => return false,\n-    };\n-    (from == Ordering::Greater || from == Ordering::Equal)\n-        && (to == Ordering::Less || (pat_end == ctor_end && to == Ordering::Equal))\n+    let to = compare_const_vals(tcx, ctor_to, pat_to, param_env, ty)?;\n+    let from = compare_const_vals(tcx, ctor_from, pat_from, param_env, ty)?;\n+    let intersects = (from == Ordering::Greater || from == Ordering::Equal)\n+        && (to == Ordering::Less || (pat_end == ctor_end && to == Ordering::Equal));\n+    if intersects { Some(()) } else { None }\n }\n \n fn patterns_for_variant<'p, 'a: 'p, 'tcx>(\n@@ -2251,11 +2246,8 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n                 // by `IntRange`. For these cases, the constructor may not be a\n                 // range so intersection actually devolves into being covered\n                 // by the pattern.\n-                if constructor_covered_by_range(cx.tcx, cx.param_env, constructor, pat) {\n-                    Some(PatStack::default())\n-                } else {\n-                    None\n-                }\n+                constructor_covered_by_range(cx.tcx, cx.param_env, constructor, pat)\n+                    .map(|()| PatStack::default())\n             }\n         }\n "}]}