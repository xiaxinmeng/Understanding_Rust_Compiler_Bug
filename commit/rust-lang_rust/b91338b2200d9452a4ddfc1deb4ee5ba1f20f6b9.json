{"sha": "b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTMzOGIyMjAwZDk0NTJhNGRkZmMxZGViNGVlNWJhMWYyMGY2Yjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-30T09:29:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-30T09:29:25Z"}, "message": "things priroda needs to be public or changed", "tree": {"sha": "f30ce97d03d715a94877551bc38bfdc271b1dace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f30ce97d03d715a94877551bc38bfdc271b1dace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXdOZ1AAoJEFbW7qD8Z6xGMaUP/2UWu/KO5ijFYmxAO8caXT4x\n9jSKE18yecaKylVog8j2A/Yl+XT3TJ8r+5zXFdg4AN7e4k64/LRHmlTLRrG1mO3N\norrO7VgBAmvmkfWrcGc2fXYaOkR6570K4OANq9GK8LPENOzra+14ehuTiir/c05N\nkk8pfA/3I9Py8lXmlhh5oWHcIdgqPVsIKeYcjevZJP/oJ2xaFAVHp4F74SpeIJR6\nW9/qbGbLyRUXKnwLC6v1c5EB5soJdxLZsj3G+ffi/K0ac4DJzBRCJ9MJ+fpZZ5OO\nUaEegyXYZEVKyZLC/Ama2ske7R9x0TlrLsAhBIBBJ2FU8bZyUPpnbEmefl1Hk2SU\n+MEgn9R+epRKwrPOmG623YVjhAieBIoIY1iydKlJcXK1fFoqy5cIfEJpHLiCjhlM\nHL9Rp8Mr6bZezEEnJdJsHMTt4RzHK1ejsxsq0wU50ezrswKgWSpe1+yM8LqN1UKF\n+bm9LmjZ5sLMKCjtsz7Yx9+4nBV960z0FE6JwkZEGWmL0819WlGSbmdPMiGh58z5\nVage1I0B+Vxfxq7NMM++MiLLt6ZMjfdsqXL7vPCYqgPdwqkGl40BfRe23dXE2YJj\nTbBo1YT/s8nOW6Flon4S+w4Nv1yOswfPZl+uEVKLavpmqwhWoS6wTYFAr8VSSgU9\nehS1VMvz6AMoVHhul0D7\n=KESM\n-----END PGP SIGNATURE-----", "payload": "tree f30ce97d03d715a94877551bc38bfdc271b1dace\nparent d309ab72e0d05c6c828e57df04f483bfdee099dc\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467278965 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467278965 +0200\n\nthings priroda needs to be public or changed"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "html_url": "https://github.com/rust-lang/rust/commit/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d309ab72e0d05c6c828e57df04f483bfdee099dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d309ab72e0d05c6c828e57df04f483bfdee099dc", "html_url": "https://github.com/rust-lang/rust/commit/d309ab72e0d05c6c828e57df04f483bfdee099dc"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "d17640bb675a69e01031f94df257679b91ea5eb1", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "patch": "@@ -154,15 +154,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn memory(&self) -> &Memory {\n+    pub fn memory(&self) -> &Memory<'a, 'tcx> {\n         &self.memory\n     }\n \n     pub fn memory_mut(&mut self) -> &mut Memory<'a, 'tcx> {\n         &mut self.memory\n     }\n \n-    pub fn stack(&self) -> &[Frame] {\n+    pub fn stack(&self) -> &[Frame<'a, 'tcx>] {\n         &self.stack\n     }\n \n@@ -235,7 +235,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ty.is_sized(self.tcx, &self.tcx.empty_parameter_environment(), DUMMY_SP)\n     }\n \n-    fn load_mir(&self, def_id: DefId) -> CachedMir<'a, 'tcx> {\n+    pub fn load_mir(&self, def_id: DefId) -> CachedMir<'a, 'tcx> {\n         match self.tcx.map.as_local_node_id(def_id) {\n             Some(node_id) => CachedMir::Ref(self.mir_map.map.get(&node_id).unwrap()),\n             None => {\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    fn monomorphize(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n+    pub fn monomorphize(&self, ty: Ty<'tcx>, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n         let substituted = ty.subst(self.tcx, substs);\n         self.tcx.normalize_associated_type(&substituted)\n     }"}, {"sha": "93dfe4e220174322ed9780468c6013e768cff5c1", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "patch": "@@ -38,4 +38,8 @@ pub use interpreter::{\n     eval_main,\n };\n \n-pub use memory::Memory;\n+pub use memory::{\n+    Memory,\n+    Pointer,\n+    AllocId,\n+};"}, {"sha": "e3e4279049a98e44c4c976234b6ac13b59286ca0", "filename": "src/memory.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=b91338b2200d9452a4ddfc1deb4ee5ba1f20f6b9", "patch": "@@ -16,7 +16,7 @@ use primval::PrimVal;\n ////////////////////////////////////////////////////////////////////////////////\n \n #[derive(Copy, Clone, Debug, Eq, Hash, PartialEq)]\n-pub struct AllocId(u64);\n+pub struct AllocId(pub u64);\n \n impl fmt::Display for AllocId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -77,6 +77,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n     }\n \n+    pub fn allocations<'b>(&'b self) -> ::std::collections::hash_map::Iter<'b, AllocId, Allocation> {\n+        self.alloc_map.iter()\n+    }\n+\n     pub fn create_fn_ptr(&mut self, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n         let def = FunctionDefinition {\n             def_id: def_id,\n@@ -576,7 +580,7 @@ impl UndefMask {\n     }\n \n     /// Check whether the range `start..end` (end-exclusive) is entirely defined.\n-    fn is_range_defined(&self, start: usize, end: usize) -> bool {\n+    pub fn is_range_defined(&self, start: usize, end: usize) -> bool {\n         if end > self.len { return false; }\n         for i in start..end {\n             if !self.get(i) { return false; }"}]}