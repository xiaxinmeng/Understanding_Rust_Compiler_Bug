{"sha": "cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMDlmYWI1ZmZjOGYyMDRmNTljODg3YWQ0ZmI3Yzc1YzNkOTVjMzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-06T07:36:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-06T07:36:28Z"}, "message": "Auto merge of #799 - rust-lang:rustup, r=RalfJung\n\nInitialize MemoryExtra with StdRng\n\nWe need this in a local branch for an synchronous rustc update.", "tree": {"sha": "7ef63edde2bfd3f1c03a10e404093b7e7a610833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef63edde2bfd3f1c03a10e404093b7e7a610833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "html_url": "https://github.com/rust-lang/rust/commit/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad837079e1f18d00090d7ac1c58fda7b3c49a822", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad837079e1f18d00090d7ac1c58fda7b3c49a822", "html_url": "https://github.com/rust-lang/rust/commit/ad837079e1f18d00090d7ac1c58fda7b3c49a822"}, {"sha": "ba8728cd8bbb9852d8884b7444a8b049a432dcd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8728cd8bbb9852d8884b7444a8b049a432dcd1", "html_url": "https://github.com/rust-lang/rust/commit/ba8728cd8bbb9852d8884b7444a8b049a432dcd1"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "e278a80633709871261c1b526a6a9fc1ef8a0824", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1 +1 @@\n-24a9bcbb7cb0d8bdc11b8252a9c13f7562c7e4ca\n+481068a707679257e2a738b40987246e0420e787"}, {"sha": "6132c502531fa5c919b49083d8d39fe03f19b254", "filename": "src/eval.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1,3 +1,5 @@\n+//! Main evaluator loop and setting up the initial stack frame.\n+\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n@@ -29,23 +31,22 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     main_id: DefId,\n     config: MiriConfig,\n ) -> InterpResult<'tcx, InterpCx<'mir, 'tcx, Evaluator<'tcx>>> {\n-    let mut ecx = InterpCx::new(\n-        tcx.at(syntax::source_map::DUMMY_SP),\n-        ty::ParamEnv::reveal_all(),\n-        Evaluator::new(),\n-    );\n \n     // FIXME(https://github.com/rust-lang/miri/pull/803): no validation on Windows.\n-    let target_os = ecx.tcx.tcx.sess.target.target.target_os.to_lowercase();\n+    let target_os = tcx.sess.target.target.target_os.to_lowercase();\n     let validate = if target_os == \"windows\" {\n         false\n     } else {\n         config.validate\n     };\n \n-    // FIXME: InterpCx::new should take an initial MemoryExtra\n-    ecx.memory_mut().extra = MemoryExtra::new(config.seed.map(StdRng::seed_from_u64), validate);\n-    \n+    let mut ecx = InterpCx::new(\n+        tcx.at(syntax::source_map::DUMMY_SP),\n+        ty::ParamEnv::reveal_all(),\n+        Evaluator::new(),\n+        MemoryExtra::new(config.seed.map(StdRng::seed_from_u64), validate),\n+    );\n+\n     let main_instance = ty::Instance::mono(ecx.tcx.tcx, main_id);\n     let main_mir = ecx.load_mir(main_instance.def)?;\n "}, {"sha": "0875331131bd34dd9ccdf0c42851b88dd0fbf36f", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1,3 +1,6 @@\n+//! Global machine state as well as implementation of the interpreter engine\n+//! `Machine` trait.\n+\n use std::rc::Rc;\n use std::borrow::Cow;\n use std::collections::HashMap;\n@@ -48,7 +51,7 @@ pub struct AllocExtra {\n }\n \n /// Extra global memory data\n-#[derive(Default, Clone, Debug)]\n+#[derive(Clone, Debug)]\n pub struct MemoryExtra {\n     pub stacked_borrows: stacked_borrows::MemoryExtra,\n     pub intptrcast: intptrcast::MemoryExtra,"}, {"sha": "aa9a87887d3757267d8c8d2364a742a0865aad15", "filename": "src/range_map.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frange_map.rs?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1,5 +1,3 @@\n-#![allow(unused)]\n-\n //! Implements a map from integer indices to data.\n //! Rather than storing data for every index, internally, this maps entire ranges to the data.\n //! To this end, the APIs all work on ranges, not on individual integers. Ranges are split as\n@@ -8,7 +6,6 @@\n //! via the iteration APIs.\n \n use std::ops;\n-use std::num::NonZeroU64;\n \n use rustc::ty::layout::Size;\n \n@@ -158,7 +155,7 @@ impl<T> RangeMap<T> {\n                 let mut end_idx = first_idx; // when the loop is done, this is the first excluded element.\n                 loop {\n                     // Compute if `end` is the last element we need to look at.\n-                    let done = (self.v[end_idx].range.end >= offset+len);\n+                    let done = self.v[end_idx].range.end >= offset+len;\n                     // We definitely need to include `end`, so move the index.\n                     end_idx += 1;\n                     debug_assert!(done || end_idx < self.v.len(), \"iter_mut: end-offset {} is out-of-bounds\", offset+len);\n@@ -284,7 +281,7 @@ mod tests {\n             .map(|&t| t).collect::<Vec<_>>(), vec![19, 19]);\n \n         // A NOP `iter_mut` should trigger merging.\n-        for x in map.iter_mut(Size::from_bytes(15), Size::from_bytes(5)) { }\n+        for _ in map.iter_mut(Size::from_bytes(15), Size::from_bytes(5)) { }\n         assert_eq!(map.v.len(), 5);\n         assert_eq!(\n             to_vec(&map, 10, 10),"}, {"sha": "e2f2dab518058169e33975a0d6006ea1a82a59c7", "filename": "src/shims/tls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1,3 +1,5 @@\n+//! Implement thread-local storage.\n+\n use std::collections::BTreeMap;\n \n use rustc_target::abi::LayoutOf;"}, {"sha": "acd1aec5b770ba9f498160d51b1310566b07fcb1", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1,3 +1,6 @@\n+//! Implements \"Stacked Borrows\".  See <https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md>\n+//! for further information.\n+\n use std::cell::RefCell;\n use std::collections::{HashMap, HashSet};\n use std::rc::Rc;"}, {"sha": "b8bd869b48c9777cc1453911595113e4a02b72f6", "filename": "tests/run-pass/move-undef-primval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/tests%2Frun-pass%2Fmove-undef-primval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30/tests%2Frun-pass%2Fmove-undef-primval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-undef-primval.rs?ref=cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "patch": "@@ -1,3 +1,5 @@\n+#![allow(deprecated)]\n+\n struct Foo {\n     _inner: i32,\n }"}]}