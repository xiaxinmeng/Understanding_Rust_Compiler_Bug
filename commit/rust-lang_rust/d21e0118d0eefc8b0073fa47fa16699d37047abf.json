{"sha": "d21e0118d0eefc8b0073fa47fa16699d37047abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWUwMTE4ZDBlZWZjOGIwMDczZmE0N2ZhMTY2OTlkMzcwNDdhYmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-11T12:54:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-12T08:48:08Z"}, "message": "more precise span for erroneous consts during CTFE/Miri", "tree": {"sha": "f9be5c9674ec586843c6e08744664918140b4dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9be5c9674ec586843c6e08744664918140b4dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21e0118d0eefc8b0073fa47fa16699d37047abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21e0118d0eefc8b0073fa47fa16699d37047abf", "html_url": "https://github.com/rust-lang/rust/commit/d21e0118d0eefc8b0073fa47fa16699d37047abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21e0118d0eefc8b0073fa47fa16699d37047abf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4d43fe6ae09cf8eed81a82812cffcd8be6154d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4d43fe6ae09cf8eed81a82812cffcd8be6154d", "html_url": "https://github.com/rust-lang/rust/commit/4b4d43fe6ae09cf8eed81a82812cffcd8be6154d"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "b12df60d0610a8f52eeb39c52b601476d41a2ea7", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d21e0118d0eefc8b0073fa47fa16699d37047abf", "patch": "@@ -83,9 +83,11 @@ pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n     ////////////////////////////////////////////////////////////////////////////////\n-    /// If this is `None`, we are unwinding and this function doesn't need any clean-up.\n-    /// Just continue the same as with `Resume`.\n-    pub loc: Option<mir::Location>,\n+    /// If this is `Err`, we are not currently executing any particular statement in\n+    /// this frame (can happen e.g. during frame initialziation, and during unwinding on\n+    /// frames without cleanup code).\n+    /// We basically abuse `Result` as `Either`.\n+    pub(super) loc: Result<mir::Location, Span>,\n }\n \n /// What we store about a frame in an interpreter backtrace.\n@@ -189,11 +191,14 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n     /// Return the `SourceInfo` of the current instruction.\n     pub fn current_source_info(&self) -> Option<&mir::SourceInfo> {\n-        self.loc.map(|loc| self.body.source_info(loc))\n+        self.loc.ok().map(|loc| self.body.source_info(loc))\n     }\n \n     pub fn current_span(&self) -> Span {\n-        self.current_source_info().map(|si| si.span).unwrap_or(self.body.span)\n+        match self.loc {\n+            Ok(loc) => self.body.source_info(loc).span,\n+            Err(span) => span,\n+        }\n     }\n }\n \n@@ -640,7 +645,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // first push a stack frame so we have access to the local substs\n         let pre_frame = Frame {\n             body,\n-            loc: None, // `None` for errors generated before we start evaluating.\n+            loc: Err(body.span), // Span used for errors caused during preamble.\n             return_to_block,\n             return_place,\n             // empty local array, we fill it in below, after we are inside the stack frame and\n@@ -654,9 +659,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Make sure all the constants required by this frame evaluate successfully (post-monomorphization check).\n         for const_ in &body.required_consts {\n+            let span = const_.span;\n             let const_ =\n                 self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal);\n-            self.const_to_op(const_, None)?;\n+            self.const_to_op(const_, None).map_err(|err| {\n+                // If there was an error, set the span of the current frame so this constant.\n+                // Avoiding doing this when evaluation succeeds.\n+                self.frame_mut().loc = Err(span);\n+                err\n+            })?;\n         }\n \n         // Locals are initially uninitialized.\n@@ -683,9 +694,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         // done\n         self.frame_mut().locals = locals;\n-        self.frame_mut().loc = Some(mir::Location::START);\n-\n         M::after_stack_push(self)?;\n+        self.frame_mut().loc = Ok(mir::Location::START);\n         info!(\"ENTERING({}) {}\", self.frame_idx(), self.frame().instance);\n \n         Ok(())\n@@ -694,7 +704,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Jump to the given block.\n     #[inline]\n     pub fn go_to_block(&mut self, target: mir::BasicBlock) {\n-        self.frame_mut().loc = Some(mir::Location { block: target, statement_index: 0 });\n+        self.frame_mut().loc = Ok(mir::Location { block: target, statement_index: 0 });\n     }\n \n     /// *Return* to the given `target` basic block.\n@@ -716,7 +726,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// If `target` is `None`, that indicates the function does not need cleanup during\n     /// unwinding, and we will just keep propagating that upwards.\n     pub fn unwind_to_block(&mut self, target: Option<mir::BasicBlock>) {\n-        self.frame_mut().loc = target.map(|block| mir::Location { block, statement_index: 0 });\n+        self.frame_mut().loc = match target {\n+            Some(block) => Ok(mir::Location { block, statement_index: 0 }),\n+            None => Err(self.frame_mut().body.span),\n+        };\n     }\n \n     /// Pops the current frame from the stack, deallocating the\n@@ -744,8 +757,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         assert_eq!(\n             unwinding,\n             match self.frame().loc {\n-                None => true,\n-                Some(loc) => self.body().basic_blocks()[loc.block].is_cleanup,\n+                Ok(loc) => self.body().basic_blocks()[loc.block].is_cleanup,\n+                Err(_) => true,\n             }\n         );\n "}, {"sha": "adecee3f7cb570e63aa420c5fa7adfd129105be3", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=d21e0118d0eefc8b0073fa47fa16699d37047abf", "patch": "@@ -47,8 +47,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n \n         let loc = match self.frame().loc {\n-            Some(loc) => loc,\n-            None => {\n+            Ok(loc) => loc,\n+            Err(_) => {\n                 // We are unwinding and this fn has no cleanup code.\n                 // Just go on unwinding.\n                 trace!(\"unwinding: skipping frame\");\n@@ -283,7 +283,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         self.eval_terminator(terminator)?;\n         if !self.stack().is_empty() {\n-            if let Some(loc) = self.frame().loc {\n+            if let Ok(loc) = self.frame().loc {\n                 info!(\"// executing {:?}\", loc.block);\n             }\n         }"}, {"sha": "a0c91ff6b54f2be51998052b655fdb5c5e3de303", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=d21e0118d0eefc8b0073fa47fa16699d37047abf", "patch": "@@ -13,22 +13,28 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:5:1\n+  --> $DIR/const-err-multi.rs:5:19\n    |\n LL | pub const B: i8 = A;\n-   | ^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   | ------------------^-\n+   |                   |\n+   |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:7:1\n+  --> $DIR/const-err-multi.rs:7:19\n    |\n LL | pub const C: u8 = A as u8;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   | ------------------^-------\n+   |                   |\n+   |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:9:1\n+  --> $DIR/const-err-multi.rs:9:24\n    |\n LL | pub const D: i8 = 50 - A;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+   | -----------------------^-\n+   |                        |\n+   |                        referenced constant has errors\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3df491bf229ff32db5dd525d914a9743ec82f6b4", "filename": "src/test/ui/consts/const-eval/erroneous-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.rs?ref=d21e0118d0eefc8b0073fa47fa16699d37047abf", "patch": "@@ -7,9 +7,9 @@ impl<T> PrintName<T> {\n     //~^ WARN this operation will panic at runtime\n }\n \n-const fn no_codegen<T>() { //~ERROR evaluation of constant value failed\n+const fn no_codegen<T>() {\n     if false {\n-        let _ = PrintName::<T>::VOID;\n+        let _ = PrintName::<T>::VOID; //~ERROR evaluation of constant value failed\n     }\n }\n "}, {"sha": "f06e2c33fd0cc194194a88c4d8114c10df05049b", "filename": "src/test/ui/consts/const-eval/erroneous-const.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d21e0118d0eefc8b0073fa47fa16699d37047abf/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ferroneous-const.stderr?ref=d21e0118d0eefc8b0073fa47fa16699d37047abf", "patch": "@@ -25,14 +25,10 @@ LL | #![warn(const_err, unconditional_panic)]\n    |         ^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/erroneous-const.rs:10:1\n-   |\n-LL | / const fn no_codegen<T>() {\n-LL | |     if false {\n-LL | |         let _ = PrintName::<T>::VOID;\n-LL | |     }\n-LL | | }\n-   | |_^ referenced constant has errors\n+  --> $DIR/erroneous-const.rs:12:17\n+   |\n+LL |         let _ = PrintName::<T>::VOID;\n+   |                 ^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/erroneous-const.rs:16:22"}]}