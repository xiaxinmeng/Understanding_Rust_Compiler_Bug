{"sha": "d24e612106867c4bb6a1e59bf99aabfb7bc27823", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNGU2MTIxMDY4NjdjNGJiNmExZTU5YmY5OWFhYmZiN2JjMjc4MjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T12:40:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T12:40:47Z"}, "message": "Simplify startup", "tree": {"sha": "df40b6265f303b8fba5f804a7f7ff370e844dea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df40b6265f303b8fba5f804a7f7ff370e844dea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d24e612106867c4bb6a1e59bf99aabfb7bc27823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d24e612106867c4bb6a1e59bf99aabfb7bc27823", "html_url": "https://github.com/rust-lang/rust/commit/d24e612106867c4bb6a1e59bf99aabfb7bc27823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d24e612106867c4bb6a1e59bf99aabfb7bc27823/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591", "html_url": "https://github.com/rust-lang/rust/commit/dcdbbddd1630a4ed01906c2aff0e2b65ed99a591"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "c06d8ac31760982be0bf6c0542341d7215ffdc40", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=d24e612106867c4bb6a1e59bf99aabfb7bc27823", "patch": "@@ -17,7 +17,6 @@ export class Ctx {\n     // on the event loop to get a better picture of what we can do here)\n     client: lc.LanguageClient | null = null;\n     private extCtx: vscode.ExtensionContext;\n-    private onStartHooks: Array<(client: lc.LanguageClient) => void> = [];\n \n     constructor(extCtx: vscode.ExtensionContext) {\n         this.config = new Config(extCtx);\n@@ -39,9 +38,6 @@ export class Ctx {\n         await client.onReady();\n \n         this.client = client;\n-        for (const hook of this.onStartHooks) {\n-            hook(client);\n-        }\n     }\n \n     get activeRustEditor(): vscode.TextEditor | undefined {\n@@ -69,15 +65,6 @@ export class Ctx {\n     pushCleanup(d: Disposable) {\n         this.extCtx.subscriptions.push(d);\n     }\n-\n-    onStart(hook: (client: lc.LanguageClient) => void) {\n-        const client = this.client;\n-        if (client == null) {\n-            this.onStartHooks.push(hook);\n-        } else {\n-            hook(client)\n-        }\n-    }\n }\n \n export interface Disposable {"}, {"sha": "a2db04de872a1a91918d7890f848566fb7b31968", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=d24e612106867c4bb6a1e59bf99aabfb7bc27823", "patch": "@@ -7,7 +7,8 @@ import { Ctx, sendRequestWithRetry } from './ctx';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);\n-    ctx.onStart(client => {\n+    const client = ctx.client;\n+    if (client != null) {\n         client.onNotification(\n             'rust-analyzer/publishDecorations',\n             (params: PublishDecorationsParams) => {\n@@ -28,7 +29,7 @@ export function activateHighlighting(ctx: Ctx) {\n                 highlighter.setHighlights(targetEditor, params.decorations);\n             },\n         );\n-    });\n+    };\n \n     vscode.workspace.onDidChangeConfiguration(\n         _ => highlighter.removeHighlights(),"}, {"sha": "55bbd7f00415d1ffeb6eda4e060ec5147d1294cb", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=d24e612106867c4bb6a1e59bf99aabfb7bc27823", "patch": "@@ -33,9 +33,9 @@ export function activateInlayHints(ctx: Ctx) {\n         }\n     })\n \n-    // We pass async function though it will not be awaited when called,\n-    // thus Promise rejections won't be handled, but this should never throw in fact...\n-    ctx.onStart(async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n+    // XXX: we don't await this, thus Promise rejections won't be handled, but\n+    // this should never throw in fact...\n+    hintsUpdater.setEnabled(ctx.config.displayInlayHints)\n }\n \n interface InlayHintsParams {"}, {"sha": "0bf2c4829bbc8de95ee2c1acac3932eab54733bd", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d24e612106867c4bb6a1e59bf99aabfb7bc27823", "patch": "@@ -11,6 +11,17 @@ let ctx: Ctx | undefined;\n export async function activate(context: vscode.ExtensionContext) {\n     ctx = new Ctx(context);\n \n+    // Note: we try to start the server before we activate type hints so that it\n+    // registers its `onDidChangeDocument` handler before us.\n+    //\n+    // This a horribly, horribly wrong way to deal with this problem.\n+    try {\n+        await ctx.startServer();\n+    } catch (e) {\n+        vscode.window.showErrorMessage(e.message);\n+    }\n+\n+    // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand('reload', (ctx) => {\n         return async () => {\n             vscode.window.showInformationMessage('Reloading rust-analyzer...');\n@@ -28,7 +39,6 @@ export async function activate(context: vscode.ExtensionContext) {\n         }\n     })\n \n-    // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('collectGarbage', commands.collectGarbage);\n     ctx.registerCommand('matchingBrace', commands.matchingBrace);\n@@ -49,15 +59,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     activateStatusDisplay(ctx);\n \n     activateHighlighting(ctx);\n-    // Note: we try to start the server before we activate type hints so that it\n-    // registers its `onDidChangeDocument` handler before us.\n-    //\n-    // This a horribly, horribly wrong way to deal with this problem.\n-    try {\n-        await ctx.startServer();\n-    } catch (e) {\n-        vscode.window.showErrorMessage(e.message);\n-    }\n     activateInlayHints(ctx);\n }\n "}, {"sha": "ed0d8216659db5addbe0d48a9e3b3f3652745ef0", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d24e612106867c4bb6a1e59bf99aabfb7bc27823/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=d24e612106867c4bb6a1e59bf99aabfb7bc27823", "patch": "@@ -9,11 +9,14 @@ const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\n export function activateStatusDisplay(ctx: Ctx) {\n     const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n     ctx.pushCleanup(statusDisplay);\n-    ctx.onStart(client => ctx.pushCleanup(client.onProgress(\n-        WorkDoneProgress.type,\n-        'rustAnalyzer/cargoWatcher',\n-        params => statusDisplay.handleProgressNotification(params)\n-    )));\n+    const client = ctx.client;\n+    if (client != null) {\n+        ctx.pushCleanup(client.onProgress(\n+            WorkDoneProgress.type,\n+            'rustAnalyzer/cargoWatcher',\n+            params => statusDisplay.handleProgressNotification(params)\n+        ))\n+    }\n }\n \n class StatusDisplay implements Disposable {"}]}