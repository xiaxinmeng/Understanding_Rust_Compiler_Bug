{"sha": "d25ddb3130990b82cb6d6f2622b4461e2dcaf477", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNWRkYjMxMzA5OTBiODJjYjZkNmYyNjIyYjQ0NjFlMmRjYWY0Nzc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-31T04:04:53Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-31T04:04:53Z"}, "message": "Add stack traces to error notes.", "tree": {"sha": "dca1b7e2668d18501341fe144ad96df693a6606e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca1b7e2668d18501341fe144ad96df693a6606e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d25ddb3130990b82cb6d6f2622b4461e2dcaf477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d25ddb3130990b82cb6d6f2622b4461e2dcaf477", "html_url": "https://github.com/rust-lang/rust/commit/d25ddb3130990b82cb6d6f2622b4461e2dcaf477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d25ddb3130990b82cb6d6f2622b4461e2dcaf477/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/17df5cfec316d798f5cca703093a0e4a8fb2fcc8", "html_url": "https://github.com/rust-lang/rust/commit/17df5cfec316d798f5cca703093a0e4a8fb2fcc8"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "5b7b60433b1c7b39f21c9fe6ace6045fc28a489a", "filename": "src/interpreter.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d25ddb3130990b82cb6d6f2622b4461e2dcaf477/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d25ddb3130990b82cb6d6f2622b4461e2dcaf477/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=d25ddb3130990b82cb6d6f2622b4461e2dcaf477", "patch": "@@ -50,6 +50,12 @@ struct Interpreter<'a, 'tcx: 'a, 'arena> {\n     /// exists separately from `stack` because it must contain the `Substs` for a function while\n     /// *creating* the `Frame` for that same function.\n     substs_stack: Vec<&'tcx Substs<'tcx>>,\n+\n+    // TODO(tsion): Merge with `substs_stack`. Also try restructuring `Frame` to accomodate.\n+    /// A stack of the things necessary to print good strack traces:\n+    ///   * Function DefIds and Substs to print proper substituted function names.\n+    ///   * Spans pointing to specific function calls in the source.\n+    name_stack: Vec<(DefId, &'tcx Substs<'tcx>, codemap::Span)>,\n }\n \n /// A stack frame.\n@@ -119,12 +125,26 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             memory: Memory::new(),\n             stack: Vec::new(),\n             substs_stack: Vec::new(),\n+            name_stack: Vec::new(),\n         }\n     }\n \n     fn maybe_report<T>(&self, span: codemap::Span, r: EvalResult<T>) -> EvalResult<T> {\n         if let Err(ref e) = r {\n             let mut err = self.tcx.sess.struct_span_err(span, &e.to_string());\n+            for &(def_id, substs, span) in self.name_stack.iter().rev() {\n+                // FIXME(tsion): Find a way to do this without this Display impl hack.\n+                use rustc::util::ppaux;\n+                use std::fmt;\n+                struct Instance<'tcx>(DefId, &'tcx Substs<'tcx>);\n+                impl<'tcx> fmt::Display for Instance<'tcx> {\n+                    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                        ppaux::parameterized(f, self.1, self.0, ppaux::Ns::Value, &[],\n+                            |tcx| tcx.lookup_item_type(self.0).generics)\n+                    }\n+                }\n+                err.span_note(span, &format!(\"inside call to {}\", Instance(def_id, substs)));\n+            }\n             err.emit();\n         }\n         r\n@@ -161,6 +181,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                     TerminatorTarget::Block(block) => current_block = block,\n                     TerminatorTarget::Return => {\n                         self.pop_stack_frame();\n+                        self.name_stack.pop();\n                         continue 'outer;\n                     }\n                     TerminatorTarget::Call => continue 'outer,\n@@ -288,7 +309,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                 // FnMut closure via FnOnce::call_once.\n \n                                 // Only trait methods can have a Self parameter.\n-                                let (def_id, substs) = if substs.self_ty().is_some() {\n+                                let (resolved_def_id, resolved_substs) = if substs.self_ty().is_some() {\n                                     self.trait_method(def_id, substs)\n                                 } else {\n                                     (def_id, substs)\n@@ -318,8 +339,9 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                     }\n                                 }\n \n-                                let mir = self.load_mir(def_id);\n-                                self.push_stack_frame(mir, substs, return_ptr);\n+                                let mir = self.load_mir(resolved_def_id);\n+                                self.name_stack.push((def_id, substs, terminator.span));\n+                                self.push_stack_frame(mir, resolved_substs, return_ptr);\n \n                                 for (i, (src, size)) in arg_srcs.into_iter().enumerate() {\n                                     let dest = self.frame().locals[i];"}]}