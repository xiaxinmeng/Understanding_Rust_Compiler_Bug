{"sha": "0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMDViNGJlODJhZTllNDhiMmM2MDRiOTdmNTQzNmIxZDQzYTE5NGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-16T15:17:01Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T08:53:09Z"}, "message": "Split monster tests into smaller ones", "tree": {"sha": "dc5a9d99c85ea77cce83305bf87c8ab56ed8178e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc5a9d99c85ea77cce83305bf87c8ab56ed8178e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "html_url": "https://github.com/rust-lang/rust/commit/0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35351591af5108e62127ce9f0beeca84392a06ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/35351591af5108e62127ce9f0beeca84392a06ab", "html_url": "https://github.com/rust-lang/rust/commit/35351591af5108e62127ce9f0beeca84392a06ab"}], "stats": {"total": 787, "additions": 456, "deletions": 331}, "files": [{"sha": "c0f08fe057f55840c3f9b026bb5097d08aeec761", "filename": "src/test/ui/existential_types/declared_but_never_defined.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+// declared but never defined\n+existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses"}, {"sha": "29ae10c1c48fb1f36bd98a68100fd5c84a25e24f", "filename": "src/test/ui/existential_types/declared_but_never_defined.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/declared_but_never_defined.rs:17:1\n+   |\n+LL | existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6d0a9b80a3fc06a6f0a77c8a4861d5f0ed81edd0", "filename": "src/test/ui/existential_types/declared_but_not_defined_in_scope.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+mod boo {\n+    // declared in module but not defined inside of it\n+    pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n+}\n+\n+fn bomp() -> boo::Boo {\n+    \"\"\n+}"}, {"sha": "fcd8e2a7f845ac88c46cbc3a773c545b2670e218", "filename": "src/test/ui/existential_types/declared_but_not_defined_in_scope.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,8 @@\n+error: could not find defining uses\n+  --> $DIR/declared_but_not_defined_in_scope.rs:18:5\n+   |\n+LL |     pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "c58ca3f62100121380558bda3d019e1ed9ba6df1", "filename": "src/test/ui/existential_types/different_defining_uses.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+// two definitions with different types\n+existential type Foo: std::fmt::Debug;\n+\n+fn foo() -> Foo {\n+    \"\"\n+}\n+\n+fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+    42i32\n+}"}, {"sha": "63177e8a12374aa5b992cebc35eb319ad42e9266", "filename": "src/test/ui/existential_types/different_defining_uses.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,18 @@\n+error: defining existential type use differs from previous\n+  --> $DIR/different_defining_uses.rs:23:1\n+   |\n+LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | |     42i32\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses.rs:19:1\n+   |\n+LL | / fn foo() -> Foo {\n+LL | |     \"\"\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5bf46ef91bf7c8ec55ae478a9d90599eae24facb", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+// two definitions with different types\n+existential type Foo: std::fmt::Debug;\n+\n+fn foo() -> Foo {\n+    \"\"\n+}\n+\n+fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+    panic!()\n+}\n+\n+fn boo() -> Foo { //~ ERROR defining existential type use differs from previous\n+    loop {}\n+}"}, {"sha": "f0e9f505f6ec5c4246615834cc5e723b23cd95c5", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,34 @@\n+error: defining existential type use differs from previous\n+  --> $DIR/different_defining_uses_never_type.rs:23:1\n+   |\n+LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:19:1\n+   |\n+LL | / fn foo() -> Foo {\n+LL | |     \"\"\n+LL | | }\n+   | |_^\n+\n+error: defining existential type use differs from previous\n+  --> $DIR/different_defining_uses_never_type.rs:27:1\n+   |\n+LL | / fn boo() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | |     loop {}\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type.rs:19:1\n+   |\n+LL | / fn foo() -> Foo {\n+LL | |     \"\"\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0e40221d82936bf6684f191379c288c7ab4f8200", "filename": "src/test/ui/existential_types/different_defining_uses_never_type2.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type2.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+// two definitions with different types\n+existential type Foo: std::fmt::Debug;\n+\n+fn foo() -> Foo {\n+    \"\"\n+}\n+\n+fn bar(arg: bool) -> Foo {\n+    if arg {\n+        panic!()\n+    } else {\n+        \"bar\"\n+    }\n+}\n+\n+fn boo(arg: bool) -> Foo {\n+    if arg {\n+        loop {}\n+    } else {\n+        \"boo\"\n+    }\n+}\n+\n+fn bar2(arg: bool) -> Foo {\n+    if arg {\n+        \"bar2\"\n+    } else {\n+        panic!()\n+    }\n+}\n+\n+fn boo2(arg: bool) -> Foo {\n+    if arg {\n+        \"boo2\"\n+    } else {\n+        loop {}\n+    }\n+}"}, {"sha": "90840bf205ca2e5ebfe75a072e19f59a58a049b2", "filename": "src/test/ui/existential_types/existential_type.nll.stderr", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/35351591af5108e62127ce9f0beeca84392a06ab/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35351591af5108e62127ce9f0beeca84392a06ab/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.nll.stderr?ref=35351591af5108e62127ce9f0beeca84392a06ab", "patch": "@@ -1,111 +0,0 @@\n-error: defining existential type use differs from previous\n-  --> $DIR/existential_type.rs:23:1\n-   |\n-LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n-LL | |     42i32\n-LL | | }\n-   | |_^\n-   |\n-note: previous use here\n-  --> $DIR/existential_type.rs:19:1\n-   |\n-LL | / fn foo() -> Foo {\n-LL | |     \"\"\n-LL | | }\n-   | |_^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:36:5\n-   |\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `Boo` because of return type\n-LL |     \"\" //~ ERROR mismatched types\n-   |     ^^ expected anonymized type, found reference\n-   |\n-   = note: expected type `Boo`\n-              found type `&'static str`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:50:23\n-   |\n-LL |         let _: &str = bomp(); //~ ERROR mismatched types\n-   |                       ^^^^^^ expected &str, found anonymized type\n-   |\n-   = note: expected type `&str`\n-              found type `Boo`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:54:9\n-   |\n-LL |     fn bomp() -> boo::Boo {\n-   |                  -------- expected `Boo` because of return type\n-LL |         \"\" //~ ERROR mismatched types\n-   |         ^^ expected anonymized type, found reference\n-   |\n-   = note: expected type `Boo`\n-              found type `&'static str`\n-\n-error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/existential_type.rs:61:1\n-   |\n-LL | existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Trait` bound\n-   = note: the return type of a function must have a statically known size\n-\n-warning: not reporting region error due to nll\n-  --> $DIR/existential_type.rs:78:1\n-   |\n-LL | existential type WrongGeneric<T>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:93:27\n-   |\n-LL |     let _: &'static str = x; //~ mismatched types\n-   |                           ^ expected reference, found anonymized type\n-   |\n-   = note: expected type `&'static str`\n-              found type `NoReveal`\n-\n-error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n-  --> $DIR/existential_type.rs:94:13\n-   |\n-LL |     let _ = x as &'static str; //~ non-primitive cast\n-   |             ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n-\n-error: could not find defining uses\n-  --> $DIR/existential_type.rs:28:1\n-   |\n-LL | existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/existential_type.rs:32:5\n-   |\n-LL |     pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: defining existential type use differs from previous\n-  --> $DIR/existential_type.rs:74:1\n-   |\n-LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n-LL | |     Some(t).into_iter()\n-LL | | }\n-   | |_^\n-   |\n-note: previous use here\n-  --> $DIR/existential_type.rs:70:1\n-   |\n-LL | / fn my_iter<T>(t: T) -> MyIter<T> {\n-LL | |     std::iter::once(t)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 10 previous errors\n-\n-Some errors occurred: E0277, E0308, E0605.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "6824d362049777bd0ce2f5d3dfae28a1b9111229", "filename": "src/test/ui/existential_types/existential_type.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/35351591af5108e62127ce9f0beeca84392a06ab/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35351591af5108e62127ce9f0beeca84392a06ab/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.rs?ref=35351591af5108e62127ce9f0beeca84392a06ab", "patch": "@@ -1,95 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(existential_type)]\n-\n-fn main() {}\n-\n-// two definitions with different types\n-existential type Foo: std::fmt::Debug;\n-\n-fn foo() -> Foo {\n-    \"\"\n-}\n-\n-fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n-    42i32\n-}\n-\n-// declared but never defined\n-existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n-\n-mod boo {\n-    // declared in module but not defined inside of it\n-    pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n-}\n-\n-fn bomp() -> boo::Boo {\n-    \"\" //~ ERROR mismatched types\n-}\n-\n-mod boo2 {\n-    mod boo {\n-        pub existential type Boo: ::std::fmt::Debug;\n-        fn bomp() -> Boo {\n-            \"\"\n-        }\n-    }\n-\n-    // don't actually know the type here\n-\n-    fn bomp2() {\n-        let _: &str = bomp(); //~ ERROR mismatched types\n-    }\n-\n-    fn bomp() -> boo::Boo {\n-        \"\" //~ ERROR mismatched types\n-    }\n-}\n-\n-// generics\n-\n-trait Trait {}\n-existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n-\n-// no `Trait` bound\n-fn underconstrain<T>(_: T) -> Underconstrained<T> {\n-    unimplemented!()\n-}\n-\n-existential type MyIter<T>: Iterator<Item = T>;\n-\n-fn my_iter<T>(t: T) -> MyIter<T> {\n-    std::iter::once(t)\n-}\n-\n-fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n-    Some(t).into_iter()\n-}\n-\n-existential type WrongGeneric<T>: 'static;\n-//~^ ERROR the parameter type `T` may not live long enough\n-\n-fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-    t\n-}\n-\n-// don't reveal the concrete type\n-existential type NoReveal: std::fmt::Debug;\n-\n-fn define_no_reveal() -> NoReveal {\n-    \"\"\n-}\n-\n-fn no_reveal(x: NoReveal) {\n-    let _: &'static str = x; //~ mismatched types\n-    let _ = x as &'static str; //~ non-primitive cast\n-}"}, {"sha": "3e7476448bf7fbe97a836aba42a1e3ce754bb233", "filename": "src/test/ui/existential_types/existential_type.stderr", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/35351591af5108e62127ce9f0beeca84392a06ab/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35351591af5108e62127ce9f0beeca84392a06ab/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type.stderr?ref=35351591af5108e62127ce9f0beeca84392a06ab", "patch": "@@ -1,120 +0,0 @@\n-error: defining existential type use differs from previous\n-  --> $DIR/existential_type.rs:23:1\n-   |\n-LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n-LL | |     42i32\n-LL | | }\n-   | |_^\n-   |\n-note: previous use here\n-  --> $DIR/existential_type.rs:19:1\n-   |\n-LL | / fn foo() -> Foo {\n-LL | |     \"\"\n-LL | | }\n-   | |_^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:36:5\n-   |\n-LL | fn bomp() -> boo::Boo {\n-   |              -------- expected `Boo` because of return type\n-LL |     \"\" //~ ERROR mismatched types\n-   |     ^^ expected anonymized type, found reference\n-   |\n-   = note: expected type `Boo`\n-              found type `&'static str`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:50:23\n-   |\n-LL |         let _: &str = bomp(); //~ ERROR mismatched types\n-   |                       ^^^^^^ expected &str, found anonymized type\n-   |\n-   = note: expected type `&str`\n-              found type `Boo`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:54:9\n-   |\n-LL |     fn bomp() -> boo::Boo {\n-   |                  -------- expected `Boo` because of return type\n-LL |         \"\" //~ ERROR mismatched types\n-   |         ^^ expected anonymized type, found reference\n-   |\n-   = note: expected type `Boo`\n-              found type `&'static str`\n-\n-error[E0277]: the trait bound `T: Trait` is not satisfied\n-  --> $DIR/existential_type.rs:61:1\n-   |\n-LL | existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: Trait` bound\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/existential_type.rs:78:1\n-   |\n-LL | existential type WrongGeneric<T>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/existential_type.rs:78:1\n-   |\n-LL | existential type WrongGeneric<T>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/existential_type.rs:93:27\n-   |\n-LL |     let _: &'static str = x; //~ mismatched types\n-   |                           ^ expected reference, found anonymized type\n-   |\n-   = note: expected type `&'static str`\n-              found type `NoReveal`\n-\n-error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n-  --> $DIR/existential_type.rs:94:13\n-   |\n-LL |     let _ = x as &'static str; //~ non-primitive cast\n-   |             ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n-\n-error: could not find defining uses\n-  --> $DIR/existential_type.rs:28:1\n-   |\n-LL | existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/existential_type.rs:32:5\n-   |\n-LL |     pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: defining existential type use differs from previous\n-  --> $DIR/existential_type.rs:74:1\n-   |\n-LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n-LL | |     Some(t).into_iter()\n-LL | | }\n-   | |_^\n-   |\n-note: previous use here\n-  --> $DIR/existential_type.rs:70:1\n-   |\n-LL | / fn my_iter<T>(t: T) -> MyIter<T> {\n-LL | |     std::iter::once(t)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 11 previous errors\n-\n-Some errors occurred: E0277, E0308, E0310, E0605.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "109f1cd913214e02dcdd8df7913059b90989a167", "filename": "src/test/ui/existential_types/generic_different_defining_uses.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+existential type MyIter<T>: Iterator<Item = T>;\n+\n+fn my_iter<T>(t: T) -> MyIter<T> {\n+    std::iter::once(t)\n+}\n+\n+fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+    Some(t).into_iter()\n+}"}, {"sha": "bc71af4c9af4b66b992484943937e884c84b7c87", "filename": "src/test/ui/existential_types/generic_different_defining_uses.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,18 @@\n+error: defining existential type use differs from previous\n+  --> $DIR/generic_different_defining_uses.rs:22:1\n+   |\n+LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+LL | |     Some(t).into_iter()\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/generic_different_defining_uses.rs:18:1\n+   |\n+LL | / fn my_iter<T>(t: T) -> MyIter<T> {\n+LL | |     std::iter::once(t)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4b74d6751bd6d593b712d8771adb7f773dff4a7", "filename": "src/test/ui/existential_types/generic_nondefining_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "previous_filename": "src/test/ui/existential_types/existential_type4.rs"}, {"sha": "3c826708649d41db89ba80a9f5f6006e2aca4e3e", "filename": "src/test/ui/existential_types/generic_nondefining_use.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -1,13 +1,13 @@\n error: non-defining existential type use in defining scope\n-  --> $DIR/existential_type4.rs:19:1\n+  --> $DIR/generic_nondefining_use.rs:19:1\n    |\n LL | / fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n LL | |     5u32\n LL | | }\n    | |_^\n    |\n note: used non-generic type u32 for generic parameter\n-  --> $DIR/existential_type4.rs:16:22\n+  --> $DIR/generic_nondefining_use.rs:16:22\n    |\n LL | existential type Cmp<T>: 'static;\n    |                      ^", "previous_filename": "src/test/ui/existential_types/existential_type4.stderr"}, {"sha": "b090cf26b879661b3b1d6f1b68d709b2c6b74c33", "filename": "src/test/ui/existential_types/generic_not_used.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "previous_filename": "src/test/ui/existential_types/existential_type3.rs"}, {"sha": "34d82c0ddb0c9af71dc544018281cc64de206aba", "filename": "src/test/ui/existential_types/generic_not_used.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -1,5 +1,5 @@\n error: type parameter `V` is part of concrete type but not used in parameter list for existential type\n-  --> $DIR/existential_type3.rs:18:73\n+  --> $DIR/generic_not_used.rs:18:73\n    |\n LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n    |  _________________________________________________________________________^", "previous_filename": "src/test/ui/existential_types/existential_type3.stderr"}, {"sha": "8a6cae08ce058b14e56e8a3bd8b9195058de77e3", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:1\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:20:5\n+   |\n+LL |     t\n+   |     ^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "092aa1eda1646b3ad07d973479e34a609572efda", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+existential type WrongGeneric<T>: 'static;\n+//~^ ERROR the parameter type `T` may not live long enough\n+\n+fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+    t\n+}"}, {"sha": "cbf994defc8d956633f0b83bc35278565bcab196", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,18 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:1\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:16:1\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "fdc7a7935a2e80d5cc93bb715d8fee1e6dee806e", "filename": "src/test/ui/existential_types/generic_underconstrained.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+trait Trait {}\n+existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+\n+// no `Trait` bound\n+fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+    unimplemented!()\n+}"}, {"sha": "1454ba575b1f13aa44a46fcc9ec1d6babfde16f5", "filename": "src/test/ui/existential_types/generic_underconstrained.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/generic_underconstrained.rs:17:1\n+   |\n+LL | existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Trait` bound\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bffb6b5ee109c619c5e81b98a994046b0a411b1d", "filename": "src/test/ui/existential_types/generic_underconstrained2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "previous_filename": "src/test/ui/existential_types/existential_type2.rs"}, {"sha": "78e79e7fc861d32ecc4ae7f0b47723615d25548b", "filename": "src/test/ui/existential_types/generic_underconstrained2.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `U` doesn't implement `std::fmt::Debug`\n-  --> $DIR/existential_type2.rs:16:1\n+  --> $DIR/generic_underconstrained2.rs:16:1\n    |\n LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n@@ -9,7 +9,7 @@ LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n    = note: the return type of a function must have a statically known size\n \n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n-  --> $DIR/existential_type2.rs:24:1\n+  --> $DIR/generic_underconstrained2.rs:24:1\n    |\n LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`", "previous_filename": "src/test/ui/existential_types/existential_type2.stderr"}, {"sha": "4517eca60ed726e579b491d5c609d4a8b9c804f3", "filename": "src/test/ui/existential_types/never_reveal_concrete_type.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+// don't reveal the concrete type\n+existential type NoReveal: std::fmt::Debug;\n+\n+fn define_no_reveal() -> NoReveal {\n+    \"\"\n+}\n+\n+fn no_reveal(x: NoReveal) {\n+    let _: &'static str = x; //~ mismatched types\n+    let _ = x as &'static str; //~ non-primitive cast\n+}"}, {"sha": "449799c91b79ae0273f5796135231baf82655912", "filename": "src/test/ui/existential_types/never_reveal_concrete_type.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/never_reveal_concrete_type.rs:24:27\n+   |\n+LL |     let _: &'static str = x; //~ mismatched types\n+   |                           ^ expected reference, found anonymized type\n+   |\n+   = note: expected type `&'static str`\n+              found type `NoReveal`\n+\n+error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n+  --> $DIR/never_reveal_concrete_type.rs:25:13\n+   |\n+LL |     let _ = x as &'static str; //~ non-primitive cast\n+   |             ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0308, E0605.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "086df13ba7055995ecccf85bb709fc8992740f79", "filename": "src/test/ui/existential_types/no_revealing_outside_defining_module.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.rs?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+mod boo2 {\n+    mod boo {\n+        pub existential type Boo: ::std::fmt::Debug;\n+        fn bomp() -> Boo {\n+            \"\"\n+        }\n+    }\n+\n+    // don't actually know the type here\n+\n+    fn bomp2() {\n+        let _: &str = bomp(); //~ ERROR mismatched types\n+    }\n+\n+    fn bomp() -> boo::Boo {\n+        \"\" //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "eebd329548936ffddb208c647fa15c4c4a1ce404", "filename": "src/test/ui/existential_types/no_revealing_outside_defining_module.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f05b4be82ae9e48b2c604b97f5436b1d43a194d/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.stderr?ref=0f05b4be82ae9e48b2c604b97f5436b1d43a194d", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/no_revealing_outside_defining_module.rs:27:23\n+   |\n+LL |         let _: &str = bomp(); //~ ERROR mismatched types\n+   |                       ^^^^^^ expected &str, found anonymized type\n+   |\n+   = note: expected type `&str`\n+              found type `Boo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/no_revealing_outside_defining_module.rs:31:9\n+   |\n+LL |     fn bomp() -> boo::Boo {\n+   |                  -------- expected `Boo` because of return type\n+LL |         \"\" //~ ERROR mismatched types\n+   |         ^^ expected anonymized type, found reference\n+   |\n+   = note: expected type `Boo`\n+              found type `&'static str`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}