{"sha": "e62fce32e53478100ef5bffba11fcf4b700849ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MmZjZTMyZTUzNDc4MTAwZWY1YmZmYmExMWZjZjRiNzAwODQ5ZWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-04T17:20:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-04T17:20:04Z"}, "message": "Rollup merge of #83809 - GuillaumeGomez:remove-initial-ids, r=camelid\n\nRemove unneeded INITIAL_IDS const\n\nSome IDs inside this map didn't exist anymore, some others were duplicates of what we have inside `IdMap`. So instead of keeping the two around and since `INITIAL_IDS` was only used by `IdMap`, no need to keep both of them.", "tree": {"sha": "ea15cff17e55074e18d87f52698288127600e5a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea15cff17e55074e18d87f52698288127600e5a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e62fce32e53478100ef5bffba11fcf4b700849ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgafVFCRBK7hj4Ov3rIwAAdHIIAE/bIjA3LXGR9Z/0HLZ2ul/6\n0+Y5xAnFQc2q5mGATGIXjWBtZJQXrf+bAUTujToxv5NgTuRVry+wWsfCeTF46rZq\nEcNKKjwmx5MF+UD9ebVYQn+tLC3y/G/7vOKwCy6uiX+Z8xwJtrkZoQe3Ui1ONzmH\nJ49EVakhTh/SmoKMj8VfTtjM4Yxf0MZ2EOGvjcm0vQ0F4ktNlIVPEYk9YS3fpd7G\nDIo824jnLZjnhGALePMulrMQK9FONrDTV8oDsnwKivXRpaslL7L6fkN45tEZieE4\nEAFCiw2dMjpbKATGezmlnNiPTcD2TVwElYeXBqhasFWZub7LMDm+IEsNhnXiJ+A=\n=DapL\n-----END PGP SIGNATURE-----\n", "payload": "tree ea15cff17e55074e18d87f52698288127600e5a6\nparent 25026c9fd001dd73493d3376d942f4dd083bf07f\nparent 13e482bf8384062eb0360603a895ffdbfe2cc95a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617556804 +0200\ncommitter GitHub <noreply@github.com> 1617556804 +0200\n\nRollup merge of #83809 - GuillaumeGomez:remove-initial-ids, r=camelid\n\nRemove unneeded INITIAL_IDS const\n\nSome IDs inside this map didn't exist anymore, some others were duplicates of what we have inside `IdMap`. So instead of keeping the two around and since `INITIAL_IDS` was only used by `IdMap`, no need to keep both of them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e62fce32e53478100ef5bffba11fcf4b700849ed", "html_url": "https://github.com/rust-lang/rust/commit/e62fce32e53478100ef5bffba11fcf4b700849ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e62fce32e53478100ef5bffba11fcf4b700849ed/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25026c9fd001dd73493d3376d942f4dd083bf07f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25026c9fd001dd73493d3376d942f4dd083bf07f", "html_url": "https://github.com/rust-lang/rust/commit/25026c9fd001dd73493d3376d942f4dd083bf07f"}, {"sha": "13e482bf8384062eb0360603a895ffdbfe2cc95a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e482bf8384062eb0360603a895ffdbfe2cc95a", "html_url": "https://github.com/rust-lang/rust/commit/13e482bf8384062eb0360603a895ffdbfe2cc95a"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "5e9cfe148f17a584a0074aabbf37ed4513c468a6", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=e62fce32e53478100ef5bffba11fcf4b700849ed", "patch": "@@ -510,7 +510,6 @@ impl Options {\n         let edition = config::parse_crate_edition(&matches);\n \n         let mut id_map = html::markdown::IdMap::new();\n-        id_map.populate(&html::render::INITIAL_IDS);\n         let external_html = match ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),"}, {"sha": "509f1730557756ee7b1cc92d569eb45a4c1b1639", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e62fce32e53478100ef5bffba11fcf4b700849ed", "patch": "@@ -1356,6 +1356,9 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"rustdoc-vars\".to_owned(), 1);\n     map.insert(\"sidebar-vars\".to_owned(), 1);\n     map.insert(\"copy-path\".to_owned(), 1);\n+    map.insert(\"help\".to_owned(), 1);\n+    map.insert(\"TOC\".to_owned(), 1);\n+    map.insert(\"render-detail\".to_owned(), 1);\n     // This is the list of IDs used by rustdoc sections.\n     map.insert(\"fields\".to_owned(), 1);\n     map.insert(\"variants\".to_owned(), 1);\n@@ -1365,6 +1368,12 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"trait-implementations\".to_owned(), 1);\n     map.insert(\"synthetic-implementations\".to_owned(), 1);\n     map.insert(\"blanket-implementations\".to_owned(), 1);\n+    map.insert(\"associated-types\".to_owned(), 1);\n+    map.insert(\"associated-const\".to_owned(), 1);\n+    map.insert(\"required-methods\".to_owned(), 1);\n+    map.insert(\"provided-methods\".to_owned(), 1);\n+    map.insert(\"implementors\".to_owned(), 1);\n+    map.insert(\"synthetic-implementors\".to_owned(), 1);\n     map\n }\n \n@@ -1373,12 +1382,6 @@ impl IdMap {\n         IdMap { map: init_id_map() }\n     }\n \n-    crate fn populate<I: IntoIterator<Item = S>, S: AsRef<str> + ToString>(&mut self, ids: I) {\n-        for id in ids {\n-            let _ = self.derive(id);\n-        }\n-    }\n-\n     crate fn derive<S: AsRef<str> + ToString>(&mut self, candidate: S) -> String {\n         let id = match self.map.get_mut(candidate.as_ref()) {\n             None => candidate.to_string(),"}, {"sha": "1a993f360a1660c7e0718238777973e50df28315", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=e62fce32e53478100ef5bffba11fcf4b700849ed", "patch": "@@ -18,7 +18,7 @@ use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n use super::{\n     print_sidebar, settings, AllTypes, NameDoc, SharedContext, StylePath, BASIC_KEYWORDS,\n-    CURRENT_DEPTH, INITIAL_IDS,\n+    CURRENT_DEPTH,\n };\n \n use crate::clean::{self, AttributesExt};\n@@ -423,14 +423,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     }\n \n     fn make_child_renderer(&self) -> Self {\n-        let mut id_map = IdMap::new();\n-        id_map.populate(&INITIAL_IDS);\n-\n         Self {\n             current: self.current.clone(),\n             dst: self.dst.clone(),\n             render_redirect_pages: self.render_redirect_pages,\n-            id_map: RefCell::new(id_map),\n+            id_map: RefCell::new(IdMap::new()),\n             deref_id_map: RefCell::new(FxHashMap::default()),\n             shared: Rc::clone(&self.shared),\n             cache: Rc::clone(&self.cache),"}, {"sha": "7b656baa1b4bf991fb2be1b474ede7a0739545f2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62fce32e53478100ef5bffba11fcf4b700849ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e62fce32e53478100ef5bffba11fcf4b700849ed", "patch": "@@ -283,24 +283,6 @@ crate struct StylePath {\n \n thread_local!(crate static CURRENT_DEPTH: Cell<usize> = Cell::new(0));\n \n-crate const INITIAL_IDS: [&'static str; 15] = [\n-    \"main\",\n-    \"search\",\n-    \"help\",\n-    \"TOC\",\n-    \"render-detail\",\n-    \"associated-types\",\n-    \"associated-const\",\n-    \"required-methods\",\n-    \"provided-methods\",\n-    \"implementors\",\n-    \"synthetic-implementors\",\n-    \"implementors-list\",\n-    \"synthetic-implementors-list\",\n-    \"methods\",\n-    \"implementations\",\n-];\n-\n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n     if let Some(l) = cx.src_href(item) {\n         write!(buf, \"<a class=\\\"srclink\\\" href=\\\"{}\\\" title=\\\"goto source code\\\">[src]</a>\", l)"}]}