{"sha": "7024dc523ac712249bb78833dab80c5087e1de36", "node_id": "C_kwDOAAsO6NoAKDcwMjRkYzUyM2FjNzEyMjQ5YmI3ODgzM2RhYjgwYzUwODdlMWRlMzY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-28T00:25:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:08:52Z"}, "message": "Overhaul `RegionKind` and `Region`.\n\nSpecifically, change `Region` from this:\n```\npub type Region<'tcx> = &'tcx RegionKind;\n```\nto this:\n```\npub struct Region<'tcx>(&'tcx Interned<RegionKind>);\n```\n\nThis now matches `Ty` and `Predicate` more closely.\n\nThings to note\n- Regions have always been interned, but we haven't been using pointer-based\n  `Eq` and `Hash`. This is now happening.\n- I chose to impl `Deref` for `Region` because it makes pattern matching a lot\n  nicer, and `Region` can be viewed as just a smart wrapper for `RegionKind`.\n- Various methods are moved from `RegionKind` to `Region`.\n- There is a lot of tedious sigil changes.\n- A couple of types like `HighlightBuilder`, `RegionHighlightMode` now have a\n  `'tcx` lifetime because they hold a `Ty<'tcx>`, so they can call `mk_region`.\n- A couple of test outputs change slightly, I'm not sure why, but the new\n  outputs are a little better.", "tree": {"sha": "298dd2afffe0308db1f69202ee272ae2daec9563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298dd2afffe0308db1f69202ee272ae2daec9563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7024dc523ac712249bb78833dab80c5087e1de36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7024dc523ac712249bb78833dab80c5087e1de36", "html_url": "https://github.com/rust-lang/rust/commit/7024dc523ac712249bb78833dab80c5087e1de36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7024dc523ac712249bb78833dab80c5087e1de36/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "925ec0d3c77601ebfa32b148393a5192943c2ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/925ec0d3c77601ebfa32b148393a5192943c2ff1", "html_url": "https://github.com/rust-lang/rust/commit/925ec0d3c77601ebfa32b148393a5192943c2ff1"}], "stats": {"total": 789, "additions": 443, "deletions": 346}, "files": [{"sha": "22edee33c5c1b6c978a9f54fb9384ea53821a845", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -60,8 +60,8 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n \n     /// We sometimes have `region` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n-    fn visit_region(&mut self, region: &ty::Region<'tcx>, location: Location) {\n-        self.add_regular_live_constraint(*region, location);\n+    fn visit_region(&mut self, region: ty::Region<'tcx>, location: Location) {\n+        self.add_regular_live_constraint(region, location);\n         self.super_region(region);\n     }\n "}, {"sha": "904a8a22e0182fea510e4cc4616a75f2e030c963", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -356,8 +356,8 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n     })?;\n \n     debug!(?sub_region, \"cause = {:#?}\", cause);\n-    let nice_error = match (error_region, sub_region) {\n-        (Some(error_region), &ty::ReVar(vid)) => NiceRegionError::new(\n+    let nice_error = match (error_region, *sub_region) {\n+        (Some(error_region), ty::ReVar(vid)) => NiceRegionError::new(\n             infcx,\n             RegionResolutionError::SubSupConflict(\n                 vid,\n@@ -374,7 +374,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n             RegionResolutionError::ConcreteFailure(cause.clone(), error_region, placeholder_region),\n         ),\n         // Note universe here is wrong...\n-        (None, &ty::ReVar(vid)) => NiceRegionError::new(\n+        (None, ty::ReVar(vid)) => NiceRegionError::new(\n             infcx,\n             RegionResolutionError::UpperBoundUniverseConflict(\n                 vid,"}, {"sha": "5da2021e7110adfc2280f5f92a1abaa4c0da1dbe", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -497,14 +497,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // We need to add synthesized lifetimes where appropriate. We do\n         // this by hooking into the pretty printer and telling it to label the\n         // lifetimes without names with the value `'0`.\n-        match ty.kind() {\n-            ty::Ref(\n-                ty::RegionKind::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n-                | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n-                _,\n-                _,\n-            ) => printer.region_highlight_mode.highlighting_bound_region(*br, counter),\n-            _ => {}\n+        if let ty::Ref(region, ..) = ty.kind() {\n+            match **region {\n+                ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n+                | ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n+                    printer.region_highlight_mode.highlighting_bound_region(br, counter)\n+                }\n+                _ => {}\n+            }\n         }\n \n         let _ = ty.print(printer);\n@@ -517,19 +517,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut s = String::new();\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n \n-        let region = match ty.kind() {\n-            ty::Ref(region, _, _) => {\n-                match region {\n-                    ty::RegionKind::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n-                    | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n-                        printer.region_highlight_mode.highlighting_bound_region(*br, counter)\n-                    }\n-                    _ => {}\n+        let region = if let ty::Ref(region, ..) = ty.kind() {\n+            match **region {\n+                ty::ReLateBound(_, ty::BoundRegion { kind: br, .. })\n+                | ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n+                    printer.region_highlight_mode.highlighting_bound_region(br, counter)\n                 }\n-\n-                region\n+                _ => {}\n             }\n-            _ => bug!(\"ty for annotation of borrow region is not a reference\"),\n+            region\n+        } else {\n+            bug!(\"ty for annotation of borrow region is not a reference\");\n         };\n \n         let _ = region.print(printer);"}, {"sha": "ca1e77ff8fdc05a8e003d26044a78062a25ce69c", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     /// Returns `true` if a closure is inferred to be an `FnMut` closure.\n     fn is_closure_fn_mut(&self, fr: RegionVid) -> bool {\n-        if let Some(ty::ReFree(free_region)) = self.to_error_region(fr) {\n+        if let Some(ty::ReFree(free_region)) = self.to_error_region(fr).as_deref() {\n             if let ty::BoundRegionKind::BrEnv = free_region.bound_region {\n                 if let DefiningTy::Closure(_, substs) =\n                     self.regioncx.universal_regions().defining_ty\n@@ -628,8 +628,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         fr_name: RegionName,\n         outlived_fr: RegionVid,\n     ) {\n-        if let (Some(f), Some(ty::RegionKind::ReStatic)) =\n-            (self.to_error_region(fr), self.to_error_region(outlived_fr))\n+        if let (Some(f), Some(ty::ReStatic)) =\n+            (self.to_error_region(fr), self.to_error_region(outlived_fr).as_deref())\n         {\n             if let Some(&ty::Opaque(did, substs)) = self\n                 .infcx\n@@ -652,7 +652,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             bound.kind().skip_binder()\n                         {\n                             let r = r.subst(self.infcx.tcx, substs);\n-                            if let ty::RegionKind::ReStatic = r {\n+                            if r.is_static() {\n                                 found = true;\n                                 break;\n                             } else {"}, {"sha": "3bcc9f7be384fd19772af99ffebe2750d0c11452", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -264,7 +264,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         debug!(\"give_region_a_name: error_region = {:?}\", error_region);\n-        match error_region {\n+        match *error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n                     let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n@@ -433,7 +433,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         span: Span,\n         counter: usize,\n     ) -> RegionNameHighlight {\n-        let mut highlight = RegionHighlightMode::default();\n+        let mut highlight = RegionHighlightMode::new(self.infcx.tcx);\n         highlight.highlighting_region_vid(needle_fr, counter);\n         let type_name =\n             self.infcx.extract_inference_diagnostics_data(ty.into(), Some(highlight)).name;\n@@ -818,7 +818,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             return None;\n         }\n \n-        let mut highlight = RegionHighlightMode::default();\n+        let mut highlight = RegionHighlightMode::new(tcx);\n         highlight.highlighting_region_vid(fr, *self.next_region_name.try_borrow().unwrap());\n         let type_name =\n             self.infcx.extract_inference_diagnostics_data(yield_ty.into(), Some(highlight)).name;"}, {"sha": "a16bdf286738c8929ee77c5761327b3142214bf9", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, OpaqueTypeKey, RegionKind, RegionVid, Ty};\n+use rustc_middle::ty::{self, OpaqueTypeKey, Region, RegionVid, Ty};\n use rustc_span::symbol::sym;\n use std::env;\n use std::fmt::Debug;\n@@ -443,9 +443,9 @@ pub trait ToRegionVid {\n     fn to_region_vid(self) -> RegionVid;\n }\n \n-impl<'tcx> ToRegionVid for &'tcx RegionKind {\n+impl<'tcx> ToRegionVid for Region<'tcx> {\n     fn to_region_vid(self) -> RegionVid {\n-        if let ty::ReVar(vid) = self { *vid } else { bug!(\"region is not an ReVar: {:?}\", self) }\n+        if let ty::ReVar(vid) = *self { vid } else { bug!(\"region is not an ReVar: {:?}\", self) }\n     }\n }\n "}, {"sha": "dee47a3e4408f9ab13cf94a71174a7ab32895823", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -1178,7 +1178,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             VerifyBound::OutlivedBy(r) => {\n-                let r_vid = self.to_region_vid(r);\n+                let r_vid = self.to_region_vid(*r);\n                 self.eval_outlives(r_vid, lower_bound)\n             }\n "}, {"sha": "dc33d0804dabf28d2101169bf672797a98fbf495", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         for vid in self.rev_scc_graph.as_ref().unwrap().upper_bounds(scc) {\n                             match self.definitions[vid].external_name {\n                                 None => {}\n-                                Some(&ty::ReStatic) => {}\n+                                Some(region) if region.is_static() => {}\n                                 Some(region) => return region,\n                             }\n                         }\n@@ -183,7 +183,7 @@ fn check_opaque_type_parameter_valid(\n     for (i, arg) in opaque_type_key.substs.iter().enumerate() {\n         let arg_is_param = match arg.unpack() {\n             GenericArgKind::Type(ty) => matches!(ty.kind(), ty::Param(_)),\n-            GenericArgKind::Lifetime(ty::ReStatic) => {\n+            GenericArgKind::Lifetime(lt) if lt.is_static() => {\n                 tcx.sess\n                     .struct_span_err(span, \"non-defining opaque type use in defining scope\")\n                     .span_label(\n@@ -196,7 +196,7 @@ fn check_opaque_type_parameter_valid(\n                 return false;\n             }\n             GenericArgKind::Lifetime(lt) => {\n-                matches!(lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n+                matches!(*lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n             }\n             GenericArgKind::Const(ct) => matches!(ct.val, ty::ConstKind::Param(_)),\n         };"}, {"sha": "37304b3ef748734f7bdd41a0d61027580fb5d880", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_region(&mut self, region: &mut ty::Region<'tcx>, location: Location) {\n         let old_region = *region;\n-        *region = self.renumber_regions(&old_region);\n+        *region = self.renumber_regions(old_region);\n \n         debug!(?region);\n     }"}, {"sha": "68357556f860fb6202ce2cab28b4bd25f324b9ed", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -142,8 +142,8 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n     }\n \n     fn to_region_vid(&mut self, r: ty::Region<'tcx>) -> ty::RegionVid {\n-        if let ty::RePlaceholder(placeholder) = r {\n-            self.constraints.placeholder_region(self.infcx, *placeholder).to_region_vid()\n+        if let ty::RePlaceholder(placeholder) = *r {\n+            self.constraints.placeholder_region(self.infcx, placeholder).to_region_vid()\n         } else {\n             self.universal_regions.to_region_vid(r)\n         }"}, {"sha": "9a028147a4b60a2db2648e3fb91e223bc26d4bbb", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -358,7 +358,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                     // `where Type:` is lowered to `where Type: 'empty` so that\n                     // we check `Type` is well formed, but there's no use for\n                     // this bound here.\n-                    if let ty::ReEmpty(_) = r1 {\n+                    if r1.is_empty() {\n                         return;\n                     }\n "}, {"sha": "b5c5419fa957d39592ec1384cd6c72cbde475296", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -2318,7 +2318,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             Rvalue::Ref(region, _borrow_kind, borrowed_place) => {\n-                self.add_reborrow_constraint(&body, location, region, borrowed_place);\n+                self.add_reborrow_constraint(&body, location, *region, borrowed_place);\n             }\n \n             Rvalue::BinaryOp("}, {"sha": "72de3805467dc87baa4ea24eb8cee2615fef3a31", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -323,7 +323,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n     /// See `UniversalRegionIndices::to_region_vid`.\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n-        if let ty::ReEmpty(ty::UniverseIndex::ROOT) = r {\n+        if let ty::ReEmpty(ty::UniverseIndex::ROOT) = *r {\n             self.root_empty\n         } else {\n             self.indices.to_region_vid(r)\n@@ -805,7 +805,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     /// during initialization. Relies on the `indices` map having been\n     /// fully initialized.\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n-        if let ty::ReVar(..) = r {\n+        if let ty::ReVar(..) = *r {\n             r.to_region_vid()\n         } else {\n             *self"}, {"sha": "a0550860fa54531be5476ad9298b7333f4edfa72", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -544,7 +544,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                 let arg_value = drop_place.place_ref(\n                     fx,\n                     fx.layout_of(fx.tcx.mk_ref(\n-                        &ty::RegionKind::ReErased,\n+                        fx.tcx.lifetimes.re_erased,\n                         TypeAndMut { ty, mutbl: crate::rustc_hir::Mutability::Mut },\n                     )),\n                 );"}, {"sha": "fa9287d99d7bfbebdce607126510bdfec7596629", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -179,20 +179,20 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n-        match r {\n+        match *r {\n             ty::ReFree(_)\n             | ty::ReErased\n             | ty::ReStatic\n             | ty::ReEmpty(ty::UniverseIndex::ROOT)\n             | ty::ReEarlyBound(..) => r,\n \n             ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(\n-                CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },\n+                CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(placeholder) },\n                 r,\n             ),\n \n             ty::ReVar(vid) => {\n-                let universe = canonicalizer.region_var_universe(*vid);\n+                let universe = canonicalizer.region_var_universe(vid);\n                 canonicalizer.canonical_var_for_region(\n                     CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },\n                     r,\n@@ -240,7 +240,7 @@ impl CanonicalizeMode for CanonicalizeUserTypeAnnotation {\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n-        match r {\n+        match *r {\n             ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReErased | ty::ReStatic => r,\n             ty::ReVar(_) => canonicalizer.canonical_var_for_region_in_root_universe(r),\n             _ => {\n@@ -311,11 +311,7 @@ impl CanonicalizeMode for CanonicalizeFreeRegionsOtherThanStatic {\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n-        if let ty::ReStatic = r {\n-            r\n-        } else {\n-            canonicalizer.canonical_var_for_region_in_root_universe(r)\n-        }\n+        if r.is_static() { r } else { canonicalizer.canonical_var_for_region_in_root_universe(r) }\n     }\n \n     fn any(&self) -> bool {"}, {"sha": "392a178079729351a025be285288b4e1c29c4308", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -237,10 +237,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 v.var_values[BoundVar::new(index)]\n             });\n             match (original_value.unpack(), result_value.unpack()) {\n-                (\n-                    GenericArgKind::Lifetime(ty::ReErased),\n-                    GenericArgKind::Lifetime(ty::ReErased),\n-                ) => {\n+                (GenericArgKind::Lifetime(re1), GenericArgKind::Lifetime(re2))\n+                    if re1.is_erased() && re2.is_erased() =>\n+                {\n                     // No action needed.\n                 }\n \n@@ -429,7 +428,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 }\n                 GenericArgKind::Lifetime(result_value) => {\n                     // e.g., here `result_value` might be `'?1` in the example above...\n-                    if let &ty::RegionKind::ReLateBound(debruijn, br) = result_value {\n+                    if let ty::RegionKind::ReLateBound(debruijn, br) = *result_value {\n                         // ... in which case we would set `canonical_vars[0]` to `Some('static)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n@@ -558,10 +557,9 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                         obligations\n                             .extend(self.at(cause, param_env).eq(v1, v2)?.into_obligations());\n                     }\n-                    (\n-                        GenericArgKind::Lifetime(ty::ReErased),\n-                        GenericArgKind::Lifetime(ty::ReErased),\n-                    ) => {\n+                    (GenericArgKind::Lifetime(re1), GenericArgKind::Lifetime(re2))\n+                        if re1.is_erased() && re2.is_erased() =>\n+                    {\n                         // no action needed\n                     }\n                     (GenericArgKind::Lifetime(v1), GenericArgKind::Lifetime(v2)) => {"}, {"sha": "923a3b1f3d3aee1ce50d579f8b5faaf6be01b592", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -915,7 +915,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         debug_assert_eq!(r, _r);\n         debug!(\"ConstInferUnifier: r={:?}\", r);\n \n-        match r {\n+        match *r {\n             // Never make variables for regions bound within the type itself,\n             // nor for erased regions.\n             ty::ReLateBound(..) | ty::ReErased => {"}, {"sha": "22076bfb9c962a364c756e66759e884817d61450", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -239,7 +239,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     );\n \n     // Explain the region we are capturing.\n-    match hidden_region {\n+    match *hidden_region {\n         ty::ReEmpty(ty::UniverseIndex::ROOT) => {\n             // All lifetimes shorter than the function body are `empty` in\n             // lexical region resolution. The default explanation of \"an empty\n@@ -1114,7 +1114,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         fn push_ty_ref<'tcx>(\n-            region: &ty::Region<'tcx>,\n+            region: ty::Region<'tcx>,\n             ty: Ty<'tcx>,\n             mutbl: hir::Mutability,\n             s: &mut DiagnosticStyledString,\n@@ -1335,14 +1335,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             // When finding T != &T, highlight only the borrow\n             (&ty::Ref(r1, ref_ty1, mutbl1), _) if equals(ref_ty1, t2) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n-                push_ty_ref(&r1, ref_ty1, mutbl1, &mut values.0);\n+                push_ty_ref(r1, ref_ty1, mutbl1, &mut values.0);\n                 values.1.push_normal(t2.to_string());\n                 values\n             }\n             (_, &ty::Ref(r2, ref_ty2, mutbl2)) if equals(t1, ref_ty2) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 values.0.push_normal(t1.to_string());\n-                push_ty_ref(&r2, ref_ty2, mutbl2, &mut values.1);\n+                push_ty_ref(r2, ref_ty2, mutbl2, &mut values.1);\n                 values\n             }\n \n@@ -1351,8 +1351,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if equals(ref_ty1, ref_ty2) =>\n             {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n-                push_ty_ref(&r1, ref_ty1, mutbl1, &mut values.0);\n-                push_ty_ref(&r2, ref_ty2, mutbl2, &mut values.1);\n+                push_ty_ref(r1, ref_ty1, mutbl1, &mut values.0);\n+                push_ty_ref(r2, ref_ty2, mutbl2, &mut values.1);\n                 values\n             }\n "}, {"sha": "f4df7249554471b2650c8a517c7399e93e659557", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn extract_inference_diagnostics_data(\n         &self,\n         arg: GenericArg<'tcx>,\n-        highlight: Option<ty::print::RegionHighlightMode>,\n+        highlight: Option<ty::print::RegionHighlightMode<'tcx>>,\n     ) -> InferenceDiagnosticsData {\n         match arg.unpack() {\n             GenericArgKind::Type(ty) => {"}, {"sha": "ef4c9c24f3eb97c5db7c7f53c69af39ee93a0ebe", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::{Applicability, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n-use rustc_middle::ty::{self, TypeVisitor};\n+use rustc_middle::ty::TypeVisitor;\n use rustc_span::MultiSpan;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -22,7 +22,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             RegionResolutionError::ConcreteFailure(origin, sub, sup) => (origin, sub, sup),\n             _ => return None,\n         };\n-        if *sub != ty::RegionKind::ReStatic {\n+        if !sub.is_static() {\n             return None;\n         }\n         let cause = match origin {"}, {"sha": "8512597cb9137c27db21b6efcd196047cdf095e2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -66,9 +66,9 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n \n     pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n         match (&self.error, self.regions) {\n-            (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), sub, sup)),\n+            (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), *sub, *sup)),\n             (Some(SubSupConflict(_, _, origin, sub, _, sup, _)), None) => {\n-                Some((origin.span(), sub, sup))\n+                Some((origin.span(), *sub, *sup))\n             }\n             (None, Some((span, sub, sup))) => Some((span, sub, sup)),\n             _ => None,"}, {"sha": "17ff5d45c89f99180e00652b0e138be87289e4d3", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         // Suggesting to add a `'static` lifetime to a parameter is nearly always incorrect,\n         // and can steer users down the wrong path.\n-        if *named == ty::ReStatic {\n+        if named.is_static() {\n             return None;\n         }\n "}, {"sha": "7d82c60e6d3e073fd4f6bf952d8e32dce3b81021", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -3,13 +3,14 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::ValuePairs;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n+use rustc_data_structures::intern::Interned;\n use rustc_errors::DiagnosticBuilder;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::{FmtPrinter, Print, RegionHighlightMode};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, RePlaceholder, ReVar, Region, TyCtxt};\n \n use std::fmt::{self, Write};\n \n@@ -31,30 +32,30 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 vid,\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n-                sub_placeholder @ ty::RePlaceholder(_),\n+                sub_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n-                sup_placeholder @ ty::RePlaceholder(_),\n+                sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                Some(self.tcx().mk_region(ReVar(*vid))),\n                 cause,\n-                Some(sub_placeholder),\n-                Some(sup_placeholder),\n+                Some(*sub_placeholder),\n+                Some(*sup_placeholder),\n                 values,\n             ),\n \n             Some(RegionResolutionError::SubSupConflict(\n                 vid,\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n-                sub_placeholder @ ty::RePlaceholder(_),\n+                sub_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n                 _,\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                Some(self.tcx().mk_region(ReVar(*vid))),\n                 cause,\n-                Some(sub_placeholder),\n+                Some(*sub_placeholder),\n                 None,\n                 values,\n             ),\n@@ -65,10 +66,10 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 _,\n                 _,\n-                sup_placeholder @ ty::RePlaceholder(_),\n+                sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                Some(self.tcx().mk_region(ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -81,10 +82,10 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 _,\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n-                sup_placeholder @ ty::RePlaceholder(_),\n+                sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                Some(self.tcx().mk_region(ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -96,9 +97,9 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 _,\n                 _,\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n-                sup_placeholder @ ty::RePlaceholder(_),\n+                sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_region(ty::ReVar(*vid))),\n+                Some(self.tcx().mk_region(ReVar(*vid))),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -107,8 +108,8 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n-                sub_region @ ty::RePlaceholder(_),\n-                sup_region @ ty::RePlaceholder(_),\n+                sub_region @ Region(Interned(RePlaceholder(_), _)),\n+                sup_region @ Region(Interned(RePlaceholder(_), _)),\n             )) => self.try_report_trait_placeholder_mismatch(\n                 None,\n                 cause,\n@@ -119,25 +120,25 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n-                sub_region @ ty::RePlaceholder(_),\n+                sub_region @ Region(Interned(RePlaceholder(_), _)),\n                 sup_region,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                (!sup_region.has_name()).then_some(sup_region),\n+                (!sup_region.has_name()).then_some(*sup_region),\n                 cause,\n-                Some(sub_region),\n+                Some(*sub_region),\n                 None,\n                 values,\n             ),\n \n             Some(RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sub_region,\n-                sup_region @ ty::RePlaceholder(_),\n+                sup_region @ Region(Interned(RePlaceholder(_), _)),\n             )) => self.try_report_trait_placeholder_mismatch(\n-                (!sub_region.has_name()).then_some(sub_region),\n+                (!sub_region.has_name()).then_some(*sub_region),\n                 cause,\n                 None,\n-                Some(sup_region),\n+                Some(*sup_region),\n                 values,\n             ),\n \n@@ -147,10 +148,10 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n \n     fn try_report_trait_placeholder_mismatch(\n         &self,\n-        vid: Option<ty::Region<'tcx>>,\n+        vid: Option<Region<'tcx>>,\n         cause: &ObligationCause<'tcx>,\n-        sub_placeholder: Option<ty::Region<'tcx>>,\n-        sup_placeholder: Option<ty::Region<'tcx>>,\n+        sub_placeholder: Option<Region<'tcx>>,\n+        sup_placeholder: Option<Region<'tcx>>,\n         value_pairs: &ValuePairs<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n         let (expected_substs, found_substs, trait_def_id) = match value_pairs {\n@@ -193,10 +194,10 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn report_trait_placeholder_mismatch(\n         &self,\n-        vid: Option<ty::Region<'tcx>>,\n+        vid: Option<Region<'tcx>>,\n         cause: &ObligationCause<'tcx>,\n-        sub_placeholder: Option<ty::Region<'tcx>>,\n-        sup_placeholder: Option<ty::Region<'tcx>>,\n+        sub_placeholder: Option<Region<'tcx>>,\n+        sup_placeholder: Option<Region<'tcx>>,\n         trait_def_id: DefId,\n         expected_substs: SubstsRef<'tcx>,\n         actual_substs: SubstsRef<'tcx>,\n@@ -306,13 +307,13 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n     fn explain_actual_impl_that_was_found(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n-        sub_placeholder: Option<ty::Region<'tcx>>,\n-        sup_placeholder: Option<ty::Region<'tcx>>,\n+        sub_placeholder: Option<Region<'tcx>>,\n+        sup_placeholder: Option<Region<'tcx>>,\n         has_sub: Option<usize>,\n         has_sup: Option<usize>,\n         expected_trait_ref: ty::TraitRef<'tcx>,\n         actual_trait_ref: ty::TraitRef<'tcx>,\n-        vid: Option<ty::Region<'tcx>>,\n+        vid: Option<Region<'tcx>>,\n         expected_has_vid: Option<usize>,\n         actual_has_vid: Option<usize>,\n         any_self_ty_has_vid: bool,\n@@ -322,7 +323,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         #[derive(Copy, Clone)]\n         struct Highlighted<'tcx, T> {\n             tcx: TyCtxt<'tcx>,\n-            highlight: RegionHighlightMode,\n+            highlight: RegionHighlightMode<'tcx>,\n             value: T,\n         }\n \n@@ -366,7 +367,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n \n         let highlight_trait_ref = |trait_ref| Highlighted {\n             tcx: self.tcx(),\n-            highlight: RegionHighlightMode::default(),\n+            highlight: RegionHighlightMode::new(self.tcx()),\n             value: trait_ref,\n         };\n "}, {"sha": "625fd8642186d914e58fc71b82b8d5a7da3a7da8", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -10,8 +10,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n-    self, AssocItemContainer, RegionKind, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable,\n-    TypeVisitor,\n+    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n@@ -33,25 +32,23 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 sup_origin,\n                 sup_r,\n                 spans,\n-            ) if **sub_r == RegionKind::ReStatic => {\n-                (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans)\n-            }\n+            ) if sub_r.is_static() => (var_origin, sub_origin, sub_r, sup_origin, sup_r, spans),\n             RegionResolutionError::ConcreteFailure(\n                 SubregionOrigin::Subtype(box TypeTrace { cause, .. }),\n                 sub_r,\n                 sup_r,\n-            ) if **sub_r == RegionKind::ReStatic => {\n+            ) if sub_r.is_static() => {\n                 // This is for an implicit `'static` requirement coming from `impl dyn Trait {}`.\n                 if let ObligationCauseCode::UnifyReceiver(ctxt) = cause.code() {\n                     // This may have a closure and it would cause ICE\n                     // through `find_param_with_region` (#78262).\n-                    let anon_reg_sup = tcx.is_suitable_region(sup_r)?;\n+                    let anon_reg_sup = tcx.is_suitable_region(*sup_r)?;\n                     let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n                     if fn_returns.is_empty() {\n                         return None;\n                     }\n \n-                    let param = self.find_param_with_region(sup_r, sub_r)?;\n+                    let param = self.find_param_with_region(*sup_r, *sub_r)?;\n                     let lifetime = if sup_r.has_name() {\n                         format!(\"lifetime `{}`\", sup_r)\n                     } else {\n@@ -101,11 +98,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             \"try_report_static_impl_trait(var={:?}, sub={:?} {:?} sup={:?} {:?})\",\n             var_origin, sub_origin, sub_r, sup_origin, sup_r\n         );\n-        let anon_reg_sup = tcx.is_suitable_region(sup_r)?;\n+        let anon_reg_sup = tcx.is_suitable_region(*sup_r)?;\n         debug!(\"try_report_static_impl_trait: anon_reg_sup={:?}\", anon_reg_sup);\n         let sp = var_origin.span();\n         let return_sp = sub_origin.span();\n-        let param = self.find_param_with_region(sup_r, sub_r)?;\n+        let param = self.find_param_with_region(*sup_r, *sub_r)?;\n         let (lifetime_name, lifetime) = if sup_r.has_name() {\n             (sup_r.to_string(), format!(\"lifetime `{}`\", sup_r))\n         } else {\n@@ -560,7 +557,7 @@ pub(super) struct TraitObjectVisitor(pub(super) FxHashSet<DefId>);\n impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n-            ty::Dynamic(preds, RegionKind::ReStatic) => {\n+            ty::Dynamic(preds, re) if re.is_static() => {\n                 if let Some(def_id) = preds.principal_def_id() {\n                     self.0.insert(def_id);\n                 }"}, {"sha": "9216fa3ca1d31ffc6ec8d6fbabc259544d26cf62", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -81,21 +81,21 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         // Mark all unnamed regions in the type with a number.\n         // This diagnostic is called in response to lifetime errors, so be informative.\n-        struct HighlightBuilder {\n-            highlight: RegionHighlightMode,\n+        struct HighlightBuilder<'tcx> {\n+            highlight: RegionHighlightMode<'tcx>,\n             counter: usize,\n         }\n \n-        impl HighlightBuilder {\n-            fn build(ty: Ty<'_>) -> RegionHighlightMode {\n+        impl<'tcx> HighlightBuilder<'tcx> {\n+            fn build(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> RegionHighlightMode<'tcx> {\n                 let mut builder =\n-                    HighlightBuilder { highlight: RegionHighlightMode::default(), counter: 1 };\n+                    HighlightBuilder { highlight: RegionHighlightMode::new(tcx), counter: 1 };\n                 builder.visit_ty(ty);\n                 builder.highlight\n             }\n         }\n \n-        impl<'tcx> ty::fold::TypeVisitor<'tcx> for HighlightBuilder {\n+        impl<'tcx> ty::fold::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);\n@@ -105,12 +105,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        let expected_highlight = HighlightBuilder::build(expected);\n+        let expected_highlight = HighlightBuilder::build(self.tcx(), expected);\n         let expected = self\n             .infcx\n             .extract_inference_diagnostics_data(expected.into(), Some(expected_highlight))\n             .name;\n-        let found_highlight = HighlightBuilder::build(found);\n+        let found_highlight = HighlightBuilder::build(self.tcx(), found);\n         let found =\n             self.infcx.extract_inference_diagnostics_data(found.into(), Some(found_highlight)).name;\n "}, {"sha": "719f6b37a434353b2d4c9bb83657a32815868119", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 let ty = fn_sig.inputs()[index];\n                 let mut found_anon_region = false;\n                 let new_param_ty = self.tcx().fold_regions(ty, &mut false, |r, _| {\n-                    if *r == *anon_region {\n+                    if r == anon_region {\n                         found_anon_region = true;\n                         replace_region\n                     } else {"}, {"sha": "8e5efa12ac6c13de4c19aa191122764af625ca12", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 let mut err = self.report_and_explain_type_error(trace, &terr);\n-                match (sub, sup) {\n+                match (*sub, *sup) {\n                     (ty::RePlaceholder(_), ty::RePlaceholder(_)) => {}\n                     (ty::RePlaceholder(_), _) => {\n                         note_and_explain_region("}, {"sha": "187c67df3eb31cd552c31f3066f03ab13beb717a", "filename": "compiler/rustc_infer/src/infer/free_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -41,8 +41,8 @@ pub struct FreeRegionMap<'tcx> {\n }\n \n impl<'tcx> FreeRegionMap<'tcx> {\n-    pub fn elements(&self) -> impl Iterator<Item = &Region<'tcx>> {\n-        self.relation.elements()\n+    pub fn elements(&self) -> impl Iterator<Item = Region<'tcx>> + '_ {\n+        self.relation.elements().copied()\n     }\n \n     pub fn is_empty(&self) -> bool {\n@@ -91,7 +91,7 @@ impl<'tcx> FreeRegionMap<'tcx> {\n \n     /// True for free regions other than `'static`.\n     pub fn is_free(&self, r: Region<'_>) -> bool {\n-        matches!(r, ty::ReEarlyBound(_) | ty::ReFree(_))\n+        matches!(*r, ty::ReEarlyBound(_) | ty::ReFree(_))\n     }\n \n     /// True if `r` is a free region or static of the sort that this"}, {"sha": "4e50585ff524f454233fa495b5452a686331b661", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n+use rustc_data_structures::intern::Interned;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -250,8 +251,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 changes.push(b_vid);\n             }\n             if let Some(a_vid) = a_vid {\n-                match *b_data {\n-                    VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n+                match b_data {\n+                    VarValue::Value(Region(Interned(ReStatic, _))) | VarValue::ErrorValue => (),\n                     _ => {\n                         constraints[a_vid].push((a_vid, b_vid));\n                         constraints[b_vid].push((a_vid, b_vid));\n@@ -270,7 +271,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 if self.expand_node(a_region, b_vid, b_data) {\n                     changes.push(b_vid);\n                 }\n-                !matches!(b_data, VarValue::Value(ReStatic) | VarValue::ErrorValue)\n+                !matches!(\n+                    b_data,\n+                    VarValue::Value(Region(Interned(ReStatic, _))) | VarValue::ErrorValue\n+                )\n             });\n         }\n     }\n@@ -301,8 +305,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 // check below for a common case, here purely as an\n                 // optimization.\n                 let b_universe = self.var_infos[b_vid].universe;\n-                if let ReEmpty(a_universe) = a_region {\n-                    if *a_universe == b_universe {\n+                if let ReEmpty(a_universe) = *a_region {\n+                    if a_universe == b_universe {\n                         return false;\n                     }\n                 }\n@@ -321,7 +325,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 // tighter bound than `'static`.\n                 //\n                 // (This might e.g. arise from being asked to prove `for<'a> { 'b: 'a }`.)\n-                if let ty::RePlaceholder(p) = lub {\n+                if let ty::RePlaceholder(p) = *lub {\n                     if b_universe.cannot_name(p.universe) {\n                         lub = self.tcx().lifetimes.re_static;\n                     }\n@@ -372,12 +376,12 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     /// term \"concrete regions\").\n     #[instrument(level = \"trace\", skip(self))]\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n-        let r = match (a, b) {\n-            (&ReLateBound(..), _) | (_, &ReLateBound(..)) | (&ReErased, _) | (_, &ReErased) => {\n+        let r = match (*a, *b) {\n+            (ReLateBound(..), _) | (_, ReLateBound(..)) | (ReErased, _) | (_, ReErased) => {\n                 bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n             }\n \n-            (&ReVar(v_id), _) | (_, &ReVar(v_id)) => {\n+            (ReVar(v_id), _) | (_, ReVar(v_id)) => {\n                 span_bug!(\n                     self.var_infos[v_id].origin.span(),\n                     \"lub_concrete_regions invoked with non-concrete \\\n@@ -387,27 +391,32 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 );\n             }\n \n-            (&ReStatic, _) | (_, &ReStatic) => {\n+            (ReStatic, _) | (_, ReStatic) => {\n                 // nothing lives longer than `'static`\n                 self.tcx().lifetimes.re_static\n             }\n \n-            (&ReEmpty(_), r @ (ReEarlyBound(_) | ReFree(_)))\n-            | (r @ (ReEarlyBound(_) | ReFree(_)), &ReEmpty(_)) => {\n+            (ReEmpty(_), ReEarlyBound(_) | ReFree(_)) => {\n                 // All empty regions are less than early-bound, free,\n                 // and scope regions.\n-                r\n+                b\n             }\n \n-            (&ReEmpty(a_ui), &ReEmpty(b_ui)) => {\n+            (ReEarlyBound(_) | ReFree(_), ReEmpty(_)) => {\n+                // All empty regions are less than early-bound, free,\n+                // and scope regions.\n+                a\n+            }\n+\n+            (ReEmpty(a_ui), ReEmpty(b_ui)) => {\n                 // Empty regions are ordered according to the universe\n                 // they are associated with.\n                 let ui = a_ui.min(b_ui);\n                 self.tcx().mk_region(ReEmpty(ui))\n             }\n \n-            (&ReEmpty(empty_ui), &RePlaceholder(placeholder))\n-            | (&RePlaceholder(placeholder), &ReEmpty(empty_ui)) => {\n+            (ReEmpty(empty_ui), RePlaceholder(placeholder))\n+            | (RePlaceholder(placeholder), ReEmpty(empty_ui)) => {\n                 // If this empty region is from a universe that can\n                 // name the placeholder, then the placeholder is\n                 // larger; otherwise, the only ancestor is `'static`.\n@@ -418,13 +427,13 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 }\n             }\n \n-            (&ReEarlyBound(_) | &ReFree(_), &ReEarlyBound(_) | &ReFree(_)) => {\n+            (ReEarlyBound(_) | ReFree(_), ReEarlyBound(_) | ReFree(_)) => {\n                 self.region_rels.lub_free_regions(a, b)\n             }\n \n             // For these types, we cannot define any additional\n             // relationship:\n-            (&RePlaceholder(..), _) | (_, &RePlaceholder(..)) => {\n+            (RePlaceholder(..), _) | (_, RePlaceholder(..)) => {\n                 if a == b {\n                     a\n                 } else {\n@@ -676,7 +685,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         let node_universe = self.var_infos[node_idx].universe;\n \n         for lower_bound in &lower_bounds {\n-            let effective_lower_bound = if let ty::RePlaceholder(p) = lower_bound.region {\n+            let effective_lower_bound = if let ty::RePlaceholder(p) = *lower_bound.region {\n                 if node_universe.cannot_name(p.universe) {\n                     self.tcx().lifetimes.re_static\n                 } else {\n@@ -721,7 +730,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             .expect(\"lower_vid_bounds should at least include `node_idx`\");\n \n         for upper_bound in &upper_bounds {\n-            if let ty::RePlaceholder(p) = upper_bound.region {\n+            if let ty::RePlaceholder(p) = *upper_bound.region {\n                 if min_universe.cannot_name(p.universe) {\n                     let origin = self.var_infos[node_idx].origin;\n                     errors.push(RegionResolutionError::UpperBoundUniverseConflict(\n@@ -855,11 +864,11 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n \n             VerifyBound::OutlivedBy(r) => {\n-                self.sub_concrete_regions(min, var_values.normalize(self.tcx(), r))\n+                self.sub_concrete_regions(min, var_values.normalize(self.tcx(), *r))\n             }\n \n             VerifyBound::IsEmpty => {\n-                matches!(min, ty::ReEmpty(_))\n+                matches!(*min, ty::ReEmpty(_))\n             }\n \n             VerifyBound::AnyBound(bs) => {\n@@ -884,8 +893,8 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| match r {\n-            ty::ReVar(rid) => self.resolve_var(*rid),\n+        tcx.fold_regions(value, &mut false, |r, _db| match *r {\n+            ty::ReVar(rid) => self.resolve_var(rid),\n             _ => r,\n         })\n     }"}, {"sha": "b592ecbeb663268d14842dc1f51bf8eefb8127b1", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -244,8 +244,8 @@ where\n         scopes: &[BoundRegionScope<'tcx>],\n     ) -> ty::Region<'tcx> {\n         debug!(\"replace_bound_regions(scopes={:?})\", scopes);\n-        if let ty::ReLateBound(debruijn, br) = r {\n-            Self::lookup_bound_region(*debruijn, br, first_free_index, scopes)\n+        if let ty::ReLateBound(debruijn, br) = *r {\n+            Self::lookup_bound_region(debruijn, &br, first_free_index, scopes)\n         } else {\n             r\n         }\n@@ -779,9 +779,9 @@ impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let ScopeInstantiator { bound_region_scope, next_region, .. } = self;\n \n-        match r {\n-            ty::ReLateBound(debruijn, br) if *debruijn == self.target_index => {\n-                bound_region_scope.map.entry(*br).or_insert_with(|| next_region(*br));\n+        match *r {\n+            ty::ReLateBound(debruijn, br) if debruijn == self.target_index => {\n+                bound_region_scope.map.entry(br).or_insert_with(|| next_region(br));\n             }\n \n             _ => {}\n@@ -963,8 +963,8 @@ where\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"TypeGeneralizer::regions(a={:?})\", a);\n \n-        if let ty::ReLateBound(debruijn, _) = a {\n-            if *debruijn < self.first_free_index {\n+        if let ty::ReLateBound(debruijn, _) = *a {\n+            if debruijn < self.first_free_index {\n                 return Ok(a);\n             }\n         }"}, {"sha": "bd8bb9e1fa9ea2b2eb7420ca1b75afd659028484", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -2,8 +2,9 @@ use crate::infer::free_regions::FreeRegionMap;\n use crate::infer::{GenericKind, InferCtxt};\n use crate::traits::query::OutlivesBound;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, ReEarlyBound, ReFree, ReVar, Region};\n \n use super::explicit_outlives_bounds;\n \n@@ -66,7 +67,7 @@ pub struct OutlivesEnvironment<'tcx> {\n /// \"Region-bound pairs\" tracks outlives relations that are known to\n /// be true, either because of explicit where-clauses like `T: 'a` or\n /// because of implied bounds.\n-pub type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n+pub type RegionBoundPairs<'tcx> = Vec<(Region<'tcx>, GenericKind<'tcx>)>;\n \n impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n     pub fn new(param_env: ty::ParamEnv<'tcx>) -> Self {\n@@ -164,10 +165,10 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n             debug!(\"add_outlives_bounds: outlives_bound={:?}\", outlives_bound);\n             match outlives_bound {\n                 OutlivesBound::RegionSubRegion(\n-                    r_a @ (&ty::ReEarlyBound(_) | &ty::ReFree(_)),\n-                    &ty::ReVar(vid_b),\n+                    r_a @ (Region(Interned(ReEarlyBound(_), _)) | Region(Interned(ReFree(_), _))),\n+                    Region(Interned(ReVar(vid_b), _)),\n                 ) => {\n-                    infcx.expect(\"no infcx provided but region vars found\").add_given(r_a, vid_b);\n+                    infcx.expect(\"no infcx provided but region vars found\").add_given(r_a, *vid_b);\n                 }\n                 OutlivesBound::RegionSubParam(r_a, param_b) => {\n                     self.region_bound_pairs_accum.push((r_a, GenericKind::Param(param_b)));"}, {"sha": "0224aba01ef2884dc22c39c3628e660d56c82ae6", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -285,7 +285,7 @@ where\n             let origin = origin.clone();\n             match component {\n                 Component::Region(region1) => {\n-                    self.delegate.push_sub_region_constraint(origin, region, region1);\n+                    self.delegate.push_sub_region_constraint(origin, region, *region1);\n                 }\n                 Component::Param(param_ty) => {\n                     self.param_ty_must_outlive(origin, region, *param_ty);"}, {"sha": "36d18aebfe2a06630dcb0920770af3e913409460", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -154,17 +154,17 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n             let scc = self.mini_graph.sccs.scc(*leak_check_node);\n \n             // Set the universe of each SCC to be the minimum of its constituent universes\n-            let universe = self.rcc.universe(region);\n+            let universe = self.rcc.universe(*region);\n             debug!(\n                 \"assign_placeholder_values: scc={:?} universe={:?} region={:?}\",\n                 scc, universe, region\n             );\n-            self.scc_universes[scc].take_min(universe, region);\n+            self.scc_universes[scc].take_min(universe, *region);\n \n             // Detect those SCCs that directly contain a placeholder\n-            if let ty::RePlaceholder(placeholder) = region {\n+            if let ty::RePlaceholder(placeholder) = **region {\n                 if self.universe_at_start_of_snapshot.cannot_name(placeholder.universe) {\n-                    self.assign_scc_value(scc, *placeholder)?;\n+                    self.assign_scc_value(scc, placeholder)?;\n                 }\n             }\n         }"}, {"sha": "a5bd3b15c8d8f2d890c1f55b04255d384a2d2e57", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 30, "deletions": 35, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -8,6 +8,7 @@ use super::{\n };\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n@@ -502,14 +503,15 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             self.make_subregion(origin, sup, sub);\n \n             match (sub, sup) {\n-                (&ty::ReVar(sub), &ty::ReVar(sup)) => {\n+                (Region(Interned(ReVar(sub), _)), Region(Interned(ReVar(sup), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", sub, sup);\n-                    self.unification_table().union(sub, sup);\n+                    self.unification_table().union(*sub, *sup);\n                     self.any_unifications = true;\n                 }\n-                (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {\n+                (Region(Interned(ReVar(vid), _)), value)\n+                | (value, Region(Interned(ReVar(vid), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", vid, value);\n-                    self.unification_table().union_value(vid, UnifiedRegion(Some(value)));\n+                    self.unification_table().union_value(*vid, UnifiedRegion(Some(value)));\n                     self.any_unifications = true;\n                 }\n                 (_, _) => {}\n@@ -550,20 +552,20 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         // cannot add constraints once regions are resolved\n         debug!(\"origin = {:#?}\", origin);\n \n-        match (sub, sup) {\n-            (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {\n+        match (*sub, *sup) {\n+            (ReLateBound(..), _) | (_, ReLateBound(..)) => {\n                 span_bug!(origin.span(), \"cannot relate bound region: {:?} <= {:?}\", sub, sup);\n             }\n-            (_, &ReStatic) => {\n+            (_, ReStatic) => {\n                 // all regions are subregions of static, so we can ignore this\n             }\n-            (&ReVar(sub_id), &ReVar(sup_id)) => {\n+            (ReVar(sub_id), ReVar(sup_id)) => {\n                 self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);\n             }\n-            (_, &ReVar(sup_id)) => {\n+            (_, ReVar(sup_id)) => {\n                 self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);\n             }\n-            (&ReVar(sub_id), _) => {\n+            (ReVar(sub_id), _) => {\n                 self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);\n             }\n             _ => {\n@@ -591,16 +593,12 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> Region<'tcx> {\n         // cannot add constraints once regions are resolved\n         debug!(\"RegionConstraintCollector: lub_regions({:?}, {:?})\", a, b);\n-        match (a, b) {\n-            (r @ &ReStatic, _) | (_, r @ &ReStatic) => {\n-                r // nothing lives longer than static\n-            }\n-\n-            _ if a == b => {\n-                a // LUB(a,a) = a\n-            }\n-\n-            _ => self.combine_vars(tcx, Lub, a, b, origin),\n+        if a.is_static() || b.is_static() {\n+            a // nothing lives longer than static\n+        } else if a == b {\n+            a // LUB(a,a) = a\n+        } else {\n+            self.combine_vars(tcx, Lub, a, b, origin)\n         }\n     }\n \n@@ -613,16 +611,14 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> Region<'tcx> {\n         // cannot add constraints once regions are resolved\n         debug!(\"RegionConstraintCollector: glb_regions({:?}, {:?})\", a, b);\n-        match (a, b) {\n-            (&ReStatic, r) | (r, &ReStatic) => {\n-                r // static lives longer than everything else\n-            }\n-\n-            _ if a == b => {\n-                a // GLB(a,a) = a\n-            }\n-\n-            _ => self.combine_vars(tcx, Glb, a, b, origin),\n+        if a.is_static() {\n+            b // static lives longer than everything else\n+        } else if b.is_static() {\n+            a // static lives longer than everything else\n+        } else if a == b {\n+            a // GLB(a,a) = a\n+        } else {\n+            self.combine_vars(tcx, Glb, a, b, origin)\n         }\n     }\n \n@@ -639,11 +635,11 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         region: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n-        match region {\n+        match *region {\n             ty::ReVar(rid) => {\n-                let unified_region = self.unification_table().probe_value(*rid);\n+                let unified_region = self.unification_table().probe_value(rid);\n                 unified_region.0.unwrap_or_else(|| {\n-                    let root = self.unification_table().find(*rid).vid;\n+                    let root = self.unification_table().find(rid).vid;\n                     tcx.reuse_or_mk_region(region, ty::ReVar(root))\n                 })\n             }\n@@ -767,8 +763,7 @@ impl<'tcx> VerifyBound<'tcx> {\n     pub fn must_hold(&self) -> bool {\n         match self {\n             VerifyBound::IfEq(..) => false,\n-            VerifyBound::OutlivedBy(ty::ReStatic) => true,\n-            VerifyBound::OutlivedBy(_) => false,\n+            VerifyBound::OutlivedBy(re) => re.is_static(),\n             VerifyBound::IsEmpty => false,\n             VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),\n             VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),"}, {"sha": "b04a0edacb2fb7ca8e26e4b9d79ff803037f5e86", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -2050,7 +2050,7 @@ impl ExplicitOutlivesRequirements {\n         inferred_outlives\n             .iter()\n             .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n-                ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => match a {\n+                ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => match *a {\n                     ty::ReEarlyBound(ebr) if ebr.index == index => Some(b),\n                     _ => None,\n                 },\n@@ -2111,10 +2111,10 @@ impl ExplicitOutlivesRequirements {\n                 if let hir::GenericBound::Outlives(lifetime) = bound {\n                     let is_inferred = match tcx.named_region(lifetime.hir_id) {\n                         Some(Region::Static) if infer_static => {\n-                            inferred_outlives.iter().any(|r| matches!(r, ty::ReStatic))\n+                            inferred_outlives.iter().any(|r| matches!(**r, ty::ReStatic))\n                         }\n                         Some(Region::EarlyBound(index, ..)) => inferred_outlives.iter().any(|r| {\n-                            if let ty::ReEarlyBound(ebr) = r { ebr.index == index } else { false }\n+                            if let ty::ReEarlyBound(ebr) = **r { ebr.index == index } else { false }\n                         }),\n                         _ => false,\n                     };"}, {"sha": "79fbc69c4c239a0ae37383fca7630036e3c5a084", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -194,7 +194,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_region(&mut self,\n-                            region: & $($mutability)? ty::Region<'tcx>,\n+                            region: $(& $mutability)? ty::Region<'tcx>,\n                             _: Location) {\n                 self.super_region(region);\n             }\n@@ -641,7 +641,7 @@ macro_rules! make_mir_visitor {\n                     Rvalue::ThreadLocalRef(_) => {}\n \n                     Rvalue::Ref(r, bk, path) => {\n-                        self.visit_region(r, location);\n+                        self.visit_region($(& $mutability)? *r, location);\n                         let ctx = match bk {\n                             BorrowKind::Shared => PlaceContext::NonMutatingUse(\n                                 NonMutatingUseContext::SharedBorrow\n@@ -900,7 +900,7 @@ macro_rules! make_mir_visitor {\n             fn super_ty(&mut self, _ty: $(& $mutability)? Ty<'tcx>) {\n             }\n \n-            fn super_region(&mut self, _region: & $($mutability)? ty::Region<'tcx>) {\n+            fn super_region(&mut self, _region: $(& $mutability)? ty::Region<'tcx>) {\n             }\n \n             fn super_const(&mut self, _const: & $($mutability)? &'tcx ty::Const<'tcx>) {"}, {"sha": "4c3201610d591d63e99f510c8f166271d45aba1b", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -138,6 +138,12 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {\n     }\n }\n \n+impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Region<'tcx> {\n+    fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n+        self.kind().encode(e)\n+    }\n+}\n+\n impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for AllocId {\n     fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n         e.encode_alloc_id(self)\n@@ -156,7 +162,6 @@ macro_rules! encodable_via_deref {\n \n encodable_via_deref! {\n     &'tcx ty::TypeckResults<'tcx>,\n-    ty::Region<'tcx>,\n     &'tcx traits::ImplSource<'tcx, ()>,\n     &'tcx mir::Body<'tcx>,\n     &'tcx mir::UnsafetyCheckResult,"}, {"sha": "c44c65eaf8eea82c9f4c73ca71ec1aa51f4e7129", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -860,10 +860,10 @@ impl<'tcx> CanonicalUserType<'tcx> {\n                             _ => false,\n                         },\n \n-                        GenericArgKind::Lifetime(r) => match r {\n+                        GenericArgKind::Lifetime(r) => match *r {\n                             ty::ReLateBound(debruijn, br) => {\n                                 // We only allow a `ty::INNERMOST` index in substitutions.\n-                                assert_eq!(*debruijn, ty::INNERMOST);\n+                                assert_eq!(debruijn, ty::INNERMOST);\n                                 cvar == br.var\n                             }\n                             _ => false,\n@@ -930,7 +930,11 @@ impl<'tcx> CommonTypes<'tcx> {\n \n impl<'tcx> CommonLifetimes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {\n-        let mk = |r| interners.region.intern(r, |r| InternedInSet(interners.arena.alloc(r))).0;\n+        let mk = |r| {\n+            Region(Interned::new_unchecked(\n+                interners.region.intern(r, |r| InternedInSet(interners.arena.alloc(r))).0,\n+            ))\n+        };\n \n         CommonLifetimes {\n             re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),\n@@ -1680,7 +1684,7 @@ macro_rules! nop_list_lift {\n }\n \n nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n-nop_lift_old! {region; Region<'a> => Region<'tcx>}\n+nop_lift! {region; Region<'a> => Region<'tcx>}\n nop_lift_old! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n nop_lift_old! {const_allocation; &'a Allocation => &'tcx Allocation}\n nop_lift! {predicate; Predicate<'a> => Predicate<'tcx>}\n@@ -2086,6 +2090,46 @@ impl<'tcx, T: Hash> Hash for InternedInSet<'tcx, List<T>> {\n }\n \n macro_rules! direct_interners {\n+    ($($name:ident: $method:ident($ty:ty): $ret_ctor:ident -> $ret_ty:ty,)+) => {\n+        $(impl<'tcx> Borrow<$ty> for InternedInSet<'tcx, $ty> {\n+            fn borrow<'a>(&'a self) -> &'a $ty {\n+                &self.0\n+            }\n+        }\n+\n+        impl<'tcx> PartialEq for InternedInSet<'tcx, $ty> {\n+            fn eq(&self, other: &Self) -> bool {\n+                // The `Borrow` trait requires that `x.borrow() == y.borrow()`\n+                // equals `x == y`.\n+                self.0 == other.0\n+            }\n+        }\n+\n+        impl<'tcx> Eq for InternedInSet<'tcx, $ty> {}\n+\n+        impl<'tcx> Hash for InternedInSet<'tcx, $ty> {\n+            fn hash<H: Hasher>(&self, s: &mut H) {\n+                // The `Borrow` trait requires that `x.borrow().hash(s) ==\n+                // x.hash(s)`.\n+                self.0.hash(s)\n+            }\n+        }\n+\n+        impl<'tcx> TyCtxt<'tcx> {\n+            pub fn $method(self, v: $ty) -> $ret_ty {\n+                $ret_ctor(Interned::new_unchecked(self.interners.$name.intern(v, |v| {\n+                    InternedInSet(self.interners.arena.alloc(v))\n+                }).0))\n+            }\n+        })+\n+    }\n+}\n+\n+direct_interners! {\n+    region: mk_region(RegionKind): Region -> Region<'tcx>,\n+}\n+\n+macro_rules! direct_interners_old {\n     ($($name:ident: $method:ident($ty:ty),)+) => {\n         $(impl<'tcx> Borrow<$ty> for InternedInSet<'tcx, $ty> {\n             fn borrow<'a>(&'a self) -> &'a $ty {\n@@ -2121,8 +2165,8 @@ macro_rules! direct_interners {\n     }\n }\n \n-direct_interners! {\n-    region: mk_region(RegionKind),\n+// FIXME: eventually these should all be converted to `direct_interners`.\n+direct_interners_old! {\n     const_: mk_const(Const<'tcx>),\n     const_allocation: intern_const_alloc(Allocation),\n     layout: intern_layout(Layout),"}, {"sha": "cb0c4444de9cdd7dcc403b236e4052a225df1b9e", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -960,10 +960,10 @@ impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n-            ty::ReLateBound(index, br) if *index == self.binder_index => {\n+        match *r {\n+            ty::ReLateBound(index, br) if index == self.binder_index => {\n                 if self.bound_vars.len() <= br.var.as_usize() {\n-                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", *br, self.bound_vars);\n+                    bug!(\"Not enough bound vars: {:?} not found in {:?}\", br, self.bound_vars);\n                 }\n                 let list_var = self.bound_vars[br.var.as_usize()];\n                 match list_var {\n@@ -1076,9 +1076,9 @@ pub fn shift_region<'tcx>(\n     region: ty::Region<'tcx>,\n     amount: u32,\n ) -> ty::Region<'tcx> {\n-    match region {\n+    match *region {\n         ty::ReLateBound(debruijn, br) if amount > 0 => {\n-            tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))\n+            tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), br))\n         }\n         _ => region,\n     }"}, {"sha": "4cc5ad85769df6cb6120948a4dd9fc334c42a7ab", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -326,19 +326,11 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n     characteristic_def_id_of_type_cached(ty, &mut SsoHashSet::new())\n }\n \n-impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::RegionKind {\n-    type Output = P::Region;\n-    type Error = P::Error;\n-    fn print(&self, cx: P) -> Result<Self::Output, Self::Error> {\n-        cx.print_region(self)\n-    }\n-}\n-\n impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::Region<'_> {\n     type Output = P::Region;\n     type Error = P::Error;\n     fn print(&self, cx: P) -> Result<Self::Output, Self::Error> {\n-        cx.print_region(self)\n+        cx.print_region(*self)\n     }\n }\n "}, {"sha": "5047fe3f1a3f2cf416bc90ddb18bc9aab03bf2f3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -131,11 +131,13 @@ pub fn with_no_visible_paths<F: FnOnce() -> R, R>(f: F) -> R {\n ///\n /// Regions not selected by the region highlight mode are presently\n /// unaffected.\n-#[derive(Copy, Clone, Default)]\n-pub struct RegionHighlightMode {\n+#[derive(Copy, Clone)]\n+pub struct RegionHighlightMode<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+\n     /// If enabled, when we see the selected region, use \"`'N`\"\n     /// instead of the ordinary behavior.\n-    highlight_regions: [Option<(ty::RegionKind, usize)>; 3],\n+    highlight_regions: [Option<(ty::Region<'tcx>, usize)>; 3],\n \n     /// If enabled, when printing a \"free region\" that originated from\n     /// the given `ty::BoundRegionKind`, print it as \"`'1`\". Free regions that would ordinarily\n@@ -147,12 +149,20 @@ pub struct RegionHighlightMode {\n     highlight_bound_region: Option<(ty::BoundRegionKind, usize)>,\n }\n \n-impl RegionHighlightMode {\n+impl<'tcx> RegionHighlightMode<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        Self {\n+            tcx,\n+            highlight_regions: Default::default(),\n+            highlight_bound_region: Default::default(),\n+        }\n+    }\n+\n     /// If `region` and `number` are both `Some`, invokes\n     /// `highlighting_region`.\n     pub fn maybe_highlighting_region(\n         &mut self,\n-        region: Option<ty::Region<'_>>,\n+        region: Option<ty::Region<'tcx>>,\n         number: Option<usize>,\n     ) {\n         if let Some(k) = region {\n@@ -163,24 +173,24 @@ impl RegionHighlightMode {\n     }\n \n     /// Highlights the region inference variable `vid` as `'N`.\n-    pub fn highlighting_region(&mut self, region: ty::Region<'_>, number: usize) {\n+    pub fn highlighting_region(&mut self, region: ty::Region<'tcx>, number: usize) {\n         let num_slots = self.highlight_regions.len();\n         let first_avail_slot =\n             self.highlight_regions.iter_mut().find(|s| s.is_none()).unwrap_or_else(|| {\n                 bug!(\"can only highlight {} placeholders at a time\", num_slots,)\n             });\n-        *first_avail_slot = Some((*region, number));\n+        *first_avail_slot = Some((region, number));\n     }\n \n     /// Convenience wrapper for `highlighting_region`.\n     pub fn highlighting_region_vid(&mut self, vid: ty::RegionVid, number: usize) {\n-        self.highlighting_region(&ty::ReVar(vid), number)\n+        self.highlighting_region(self.tcx.mk_region(ty::ReVar(vid)), number)\n     }\n \n     /// Returns `Some(n)` with the number to use for the given region, if any.\n     fn region_highlighted(&self, region: ty::Region<'_>) -> Option<usize> {\n         self.highlight_regions.iter().find_map(|h| match h {\n-            Some((r, n)) if r == region => Some(*n),\n+            Some((r, n)) if *r == region => Some(*n),\n             _ => None,\n         })\n     }\n@@ -1054,7 +1064,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                     // Don't print `'_` if there's no unerased regions.\n                     let print_regions = args.iter().any(|arg| match arg.unpack() {\n-                        GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n+                        GenericArgKind::Lifetime(r) => !r.is_erased(),\n                         _ => false,\n                     });\n                     let mut args = args.iter().cloned().filter(|arg| match arg.unpack() {\n@@ -1536,7 +1546,7 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     binder_depth: usize,\n     printed_type_count: usize,\n \n-    pub region_highlight_mode: RegionHighlightMode,\n+    pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n     pub name_resolver: Option<Box<&'a dyn Fn(ty::TyVid) -> Option<String>>>,\n }\n@@ -1566,7 +1576,7 @@ impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n             region_index: 0,\n             binder_depth: 0,\n             printed_type_count: 0,\n-            region_highlight_mode: RegionHighlightMode::default(),\n+            region_highlight_mode: RegionHighlightMode::new(tcx),\n             name_resolver: None,\n         }))\n     }\n@@ -1802,7 +1812,7 @@ impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         // Don't print `'_` if there's no unerased regions.\n         let print_regions = self.tcx.sess.verbose()\n             || args.iter().any(|arg| match arg.unpack() {\n-                GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n+                GenericArgKind::Lifetime(r) => !r.is_erased(),\n                 _ => false,\n             });\n         let args = args.iter().cloned().filter(|arg| match arg.unpack() {\n@@ -2061,7 +2071,7 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let name = &mut self.name;\n         let region = match *r {\n-            ty::ReLateBound(_, br) => self.region_map.entry(br).or_insert_with(|| name(br)),\n+            ty::ReLateBound(_, br) => *self.region_map.entry(br).or_insert_with(|| name(br)),\n             ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n@@ -2070,7 +2080,7 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n                     _ => {\n                         // Index doesn't matter, since this is just for naming and these never get bound\n                         let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind };\n-                        self.region_map.entry(br).or_insert_with(|| name(br))\n+                        *self.region_map.entry(br).or_insert_with(|| name(br))\n                     }\n                 }\n             }\n@@ -2272,7 +2282,7 @@ impl<'tcx, F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n \n             #[instrument(skip(self), level = \"trace\")]\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                trace!(\"address: {:p}\", r);\n+                trace!(\"address: {:p}\", r.0.0);\n                 if let ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) = *r {\n                     self.used_region_names.insert(name);\n                 } else if let ty::RePlaceholder(ty::PlaceholderRegion {\n@@ -2369,7 +2379,7 @@ macro_rules! define_print_and_forward_display {\n }\n \n // HACK(eddyb) this is separate because `ty::RegionKind` doesn't need lifting.\n-impl fmt::Display for ty::RegionKind {\n+impl<'tcx> fmt::Display for ty::Region<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         ty::tls::with(|tcx| {\n             self.print(FmtPrinter::new(tcx, f, Namespace::TypeNS))?;"}, {"sha": "cb921271de0854dbcb192924b4664d144cfb279b", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -12,6 +12,7 @@ use crate::ty::{self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, Typ\n use crate::ty::{DelaySpanBugEmitted, List, ParamEnv};\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n+use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n@@ -21,8 +22,9 @@ use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use std::cmp::Ordering;\n+use std::fmt;\n use std::marker::PhantomData;\n-use std::ops::Range;\n+use std::ops::{Deref, Range};\n use ty::util::IntTypeExt;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n@@ -1391,14 +1393,34 @@ impl ParamConst {\n     }\n }\n \n-pub type Region<'tcx> = &'tcx RegionKind;\n+/// Use this rather than `TyKind`, whenever possible.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+pub struct Region<'tcx>(pub Interned<'tcx, RegionKind>);\n+\n+impl<'tcx> Deref for Region<'tcx> {\n+    type Target = RegionKind;\n+\n+    fn deref(&self) -> &RegionKind {\n+        &self.0.0\n+    }\n+}\n+\n+impl<'tcx> fmt::Debug for Region<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", self.kind())\n+    }\n+}\n \n /// Representation of regions. Note that the NLL checker uses a distinct\n /// representation of regions. For this reason, it internally replaces all the\n /// regions with inference variables -- the index of the variable is then used\n /// to index into internal NLL data structures. See `rustc_const_eval::borrow_check`\n /// module for more information.\n ///\n+/// Note: operations are on the wrapper `Region` type, which is interned,\n+/// rather than this type.\n+///\n /// ## The Region lattice within a given function\n ///\n /// In general, the region lattice looks like\n@@ -1655,9 +1677,13 @@ impl<'tcx> PolyExistentialProjection<'tcx> {\n }\n \n /// Region utilities\n-impl RegionKind {\n+impl<'tcx> Region<'tcx> {\n+    pub fn kind(self) -> RegionKind {\n+        *self.0.0\n+    }\n+\n     /// Is this region named by the user?\n-    pub fn has_name(&self) -> bool {\n+    pub fn has_name(self) -> bool {\n         match *self {\n             RegionKind::ReEarlyBound(ebr) => ebr.has_name(),\n             RegionKind::ReLateBound(_, br) => br.kind.is_named(),\n@@ -1671,24 +1697,39 @@ impl RegionKind {\n     }\n \n     #[inline]\n-    pub fn is_late_bound(&self) -> bool {\n+    pub fn is_static(self) -> bool {\n+        matches!(*self, ty::ReStatic)\n+    }\n+\n+    #[inline]\n+    pub fn is_erased(self) -> bool {\n+        matches!(*self, ty::ReErased)\n+    }\n+\n+    #[inline]\n+    pub fn is_late_bound(self) -> bool {\n         matches!(*self, ty::ReLateBound(..))\n     }\n \n     #[inline]\n-    pub fn is_placeholder(&self) -> bool {\n+    pub fn is_placeholder(self) -> bool {\n         matches!(*self, ty::RePlaceholder(..))\n     }\n \n     #[inline]\n-    pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {\n+    pub fn is_empty(self) -> bool {\n+        matches!(*self, ty::ReEmpty(..))\n+    }\n+\n+    #[inline]\n+    pub fn bound_at_or_above_binder(self, index: ty::DebruijnIndex) -> bool {\n         match *self {\n             ty::ReLateBound(debruijn, _) => debruijn >= index,\n             _ => false,\n         }\n     }\n \n-    pub fn type_flags(&self) -> TypeFlags {\n+    pub fn type_flags(self) -> TypeFlags {\n         let mut flags = TypeFlags::empty();\n \n         match *self {\n@@ -1746,8 +1787,8 @@ impl RegionKind {\n     /// of the impl, and for all the other highlighted regions, it\n     /// would return the `DefId` of the function. In other cases (not shown), this\n     /// function might return the `DefId` of a closure.\n-    pub fn free_region_binding_scope(&self, tcx: TyCtxt<'_>) -> DefId {\n-        match self {\n+    pub fn free_region_binding_scope(self, tcx: TyCtxt<'_>) -> DefId {\n+        match *self {\n             ty::ReEarlyBound(br) => tcx.parent(br.def_id).unwrap(),\n             ty::ReFree(fr) => fr.scope,\n             _ => bug!(\"free_region_binding_scope invoked on inappropriate region: {:?}\", self),"}, {"sha": "21881d697232b50384ca99520d8597ae9876fd2d", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -26,6 +26,9 @@ use std::ops::ControlFlow;\n /// To reduce memory usage, a `GenericArg` is an interned pointer,\n /// with the lowest 2 bits being reserved for a tag to\n /// indicate the type (`Ty`, `Region`, or `Const`) it points to.\n+///\n+/// Note: the `PartialEq`, `Eq` and `Hash` derives are only valid because `Ty`,\n+/// `Region` and `Const` are all interned.\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct GenericArg<'tcx> {\n     ptr: NonZeroUsize,\n@@ -49,8 +52,8 @@ impl<'tcx> GenericArgKind<'tcx> {\n         let (tag, ptr) = match self {\n             GenericArgKind::Lifetime(lt) => {\n                 // Ensure we can use the tag bits.\n-                assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);\n-                (REGION_TAG, lt as *const ty::RegionKind as usize)\n+                assert_eq!(mem::align_of_val(lt.0.0) & TAG_MASK, 0);\n+                (REGION_TAG, lt.0.0 as *const ty::RegionKind as usize)\n             }\n             GenericArgKind::Type(ty) => {\n                 // Ensure we can use the tag bits.\n@@ -117,9 +120,9 @@ impl<'tcx> GenericArg<'tcx> {\n         // and this is just going in the other direction.\n         unsafe {\n             match ptr & TAG_MASK {\n-                REGION_TAG => {\n-                    GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const ty::RegionKind))\n-                }\n+                REGION_TAG => GenericArgKind::Lifetime(ty::Region(Interned::new_unchecked(\n+                    &*((ptr & !TAG_MASK) as *const ty::RegionKind),\n+                ))),\n                 TYPE_TAG => GenericArgKind::Type(Ty(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::TyS<'tcx>),\n                 ))),"}, {"sha": "d3ea5b2406a98d73a4563a73d544ca8ddc0affc3", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -5,8 +5,9 @@ use crate::ty::fold::{FallibleTypeFolder, TypeFolder};\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n-use crate::ty::TyKind::*;\n-use crate::ty::{self, DebruijnIndex, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{\n+    self, DebruijnIndex, DefIdTree, List, ReEarlyBound, Region, Ty, TyCtxt, TyKind::*, TypeFoldable,\n+};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -390,7 +391,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let result = iter::zip(item_substs, impl_substs)\n             .filter(|&(_, k)| {\n                 match k.unpack() {\n-                    GenericArgKind::Lifetime(&ty::RegionKind::ReEarlyBound(ref ebr)) => {\n+                    GenericArgKind::Lifetime(Region(Interned(ReEarlyBound(ref ebr), _))) => {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     GenericArgKind::Type(Ty(Interned("}, {"sha": "08eba8ae02755d7be5bd8f94bd2d9b39bff8bdff", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             (Some((region, elem_ty, _)), _) | (None, Some((region, elem_ty, _))) => {\n                 let tcx = self.tcx;\n                 // make both a slice\n-                ty = tcx.mk_imm_ref(region, tcx.mk_slice(*elem_ty));\n+                ty = tcx.mk_imm_ref(*region, tcx.mk_slice(*elem_ty));\n                 if opt_ref_ty.is_some() {\n                     let temp = self.temp(ty, source_info.span);\n                     self.cfg.push_assign("}, {"sha": "0392c5a5468225c15b5284463db3b936a51684a2", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -3,10 +3,11 @@\n \n use crate::MirPass;\n use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::intern::Interned;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, ReErased, Region, TyCtxt};\n \n const MAX_NUM_BLOCKS: usize = 800;\n const MAX_NUM_LOCALS: usize = 3000;\n@@ -231,11 +232,15 @@ fn normalize_array_len_call<'tcx>(\n                                     // current way of patching doesn't allow to work with `mut`\n                                     (\n                                         ty::Ref(\n-                                            ty::RegionKind::ReErased,\n+                                            Region(Interned(ReErased, _)),\n                                             operand_ty,\n                                             Mutability::Not,\n                                         ),\n-                                        ty::Ref(ty::RegionKind::ReErased, cast_ty, Mutability::Not),\n+                                        ty::Ref(\n+                                            Region(Interned(ReErased, _)),\n+                                            cast_ty,\n+                                            Mutability::Not,\n+                                        ),\n                                     ) => {\n                                         match (operand_ty.kind(), cast_ty.kind()) {\n                                             // current way of patching doesn't allow to work with `mut`"}, {"sha": "51ebc083d5e6df31aee7c770de7f9460428ca1be", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -420,7 +420,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                     hir::Mutability::Not => \"R\",\n                     hir::Mutability::Mut => \"Q\",\n                 });\n-                if *r != ty::ReErased {\n+                if !r.is_erased() {\n                     self = r.print(self)?;\n                 }\n                 self = ty.print(self)?;\n@@ -811,7 +811,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     ) -> Result<Self::Path, Self::Error> {\n         // Don't print any regions if they're all erased.\n         let print_regions = args.iter().any(|arg| match arg.unpack() {\n-            GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n+            GenericArgKind::Lifetime(r) => !r.is_erased(),\n             _ => false,\n         });\n         let args = args.iter().cloned().filter(|arg| match arg.unpack() {"}, {"sha": "b55227637839a049de08ceebbd0f33c9829b89d9", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        match r {\n+        match *r {\n             // Ignore bound regions and `'static` regions that appear in the\n             // type, we only need to remap regions that reference lifetimes\n             // from the function declaraion."}, {"sha": "332d5223872f4ca57e5009b2379db4cca5fb0f3d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -437,7 +437,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                     for (new_region, old_region) in\n                         iter::zip(new_substs.regions(), old_substs.regions())\n                     {\n-                        match (new_region, old_region) {\n+                        match (*new_region, *old_region) {\n                             // If both predicates have an `ReLateBound` (a HRTB) in the\n                             // same spot, we do nothing.\n                             (\n@@ -880,8 +880,8 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        (match r {\n-            ty::ReVar(vid) => self.vid_to_region.get(vid).cloned(),\n+        (match *r {\n+            ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned(),\n             _ => None,\n         })\n         .unwrap_or_else(|| r.super_fold_with(self))"}, {"sha": "30fa3dbe0831e67627b685bb37a70761c256f0c6", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r0: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        let r1 = match r0 {\n+        let r1 = match *r0 {\n             ty::ReVar(_) => self\n                 .infcx\n                 .inner"}, {"sha": "d6743fce58823befeaf83e9bbefbac68472f1957", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -451,7 +451,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::Lifetime<RustInterner<'tcx>> {\n         use rustc_middle::ty::RegionKind::*;\n \n-        match self {\n+        match *self {\n             ReEarlyBound(_) => {\n                 panic!(\"Should have already been substituted.\");\n             }\n@@ -915,8 +915,8 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     }\n \n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n-            ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n+        match *r {\n+            ty::ReLateBound(index, br) if index == self.binder_index => match br.kind {\n                 ty::BoundRegionKind::BrNamed(def_id, _name) => {\n                     if !self.named_parameters.iter().any(|d| *d == def_id) {\n                         self.named_parameters.push(def_id);\n@@ -977,12 +977,12 @@ impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n-        match r {\n-            ty::ReLateBound(index, br) if *index == self.binder_index => match br.kind {\n+        match *r {\n+            ty::ReLateBound(index, br) if index == self.binder_index => match br.kind {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n                     Some(idx) => {\n                         let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(*idx) };\n-                        return self.tcx.mk_region(RegionKind::ReLateBound(*index, new_br));\n+                        return self.tcx.mk_region(RegionKind::ReLateBound(index, new_br));\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n                 },\n@@ -1054,7 +1054,7 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n     }\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n-        match r {\n+        match *r {\n             // FIXME(chalk) - jackh726 - this currently isn't hit in any tests,\n             // since canonicalization will already change these to canonical\n             // variables (ty::ReLateBound).\n@@ -1144,7 +1144,7 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n     }\n \n     fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n+        match *r {\n             ty::RePlaceholder(p) if p.universe == self.universe_index => {\n                 if let ty::BoundRegionKind::BrAnon(anon) = p.name {\n                     self.next_anon_region_placeholder = self.next_anon_region_placeholder.max(anon);"}, {"sha": "91c4398c178ca293c261442067830357e851afb8", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -90,8 +90,8 @@ impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n-            ty::ReLateBound(index, br) if *index == self.binder_index => {\n+        match *r {\n+            ty::ReLateBound(index, br) if index == self.binder_index => {\n                 match self.vars.entry(br.var.as_u32()) {\n                     Entry::Vacant(entry) => {\n                         entry.insert(ty::BoundVariableKind::Region(br.kind));"}, {"sha": "e44f80d5ac3f2e9b2ec5c18e6051886364e17cc8", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -410,7 +410,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n \n     let self_ty = trait_ref.self_ty();\n     let self_ty_matches = match self_ty.kind() {\n-        ty::Dynamic(ref data, ty::ReStatic) => data.principal().is_none(),\n+        ty::Dynamic(ref data, re) if re.is_static() => data.principal().is_none(),\n         _ => false,\n     };\n "}, {"sha": "df9aff44e929697c0d0eb7448b50eeab0f561800", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -2669,7 +2669,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // If any of the derived region bounds are 'static, that is always\n         // the best choice.\n-        if derived_region_bounds.iter().any(|&r| ty::ReStatic == *r) {\n+        if derived_region_bounds.iter().any(|r| r.is_static()) {\n             return Some(tcx.lifetimes.re_static);\n         }\n "}, {"sha": "f64a90ed10e22a3ea2a8137967c3d855cdf6ecb6", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -269,7 +269,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         },\n                     };\n                     autoref = Some(Adjustment {\n-                        kind: Adjust::Borrow(AutoBorrow::Ref(region, mutbl)),\n+                        kind: Adjust::Borrow(AutoBorrow::Ref(*region, mutbl)),\n                         target: method.sig.inputs()[0],\n                     });\n                 }"}, {"sha": "56b6c09069027bcba1dfaba683b554b6656f4e55", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             .try_coerce(\n                                 self.expr,\n                                 fcx.tcx.mk_ref(\n-                                    &ty::RegionKind::ReErased,\n+                                    fcx.tcx.lifetimes.re_erased,\n                                     TypeAndMut { ty: expr_ty, mutbl },\n                                 ),\n                                 self.cast_ty,\n@@ -419,7 +419,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         .try_coerce(\n                             self.expr,\n                             fcx.tcx.mk_ref(\n-                                &ty::RegionKind::ReErased,\n+                                fcx.tcx.lifetimes.re_erased,\n                                 TypeAndMut { ty: self.expr_ty, mutbl },\n                             ),\n                             self.cast_ty,"}, {"sha": "6e9c69c2d53ba04b90af3e3419c68655515173f5", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::MAX_SIMD_LANES;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, RegionKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, MultiSpan, Span};\n@@ -269,7 +269,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n                             ty::Adt(ref adt, _) => {\n                                 adt.did == panic_info_did\n                                     && mutbl == hir::Mutability::Not\n-                                    && *region != RegionKind::ReStatic\n+                                    && !region.is_static()\n                             }\n                             _ => false,\n                         },\n@@ -469,8 +469,8 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"FindParentLifetimeVisitor: r={:?}\", r);\n-            if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n-                if *index < self.0.parent_count as u32 {\n+            if let ty::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = *r {\n+                if index < self.0.parent_count as u32 {\n                     return ControlFlow::Break(FoundParentLifetime);\n                 } else {\n                     return ControlFlow::CONTINUE;"}, {"sha": "be7ac006926a9fc5201b24f41f59681b166c3949", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -472,7 +472,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             }\n         };\n         adjustments.push(Adjustment {\n-            kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),\n+            kind: Adjust::Borrow(AutoBorrow::Ref(*r_borrow, mutbl)),\n             target: ty,\n         });\n "}, {"sha": "e5ef52e0324e795b76ef40b9f1db3913a23a18e2", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let ty::Ref(region, t_type, mutability) = self_ty.kind() {\n                 let trait_type = self\n                     .tcx\n-                    .mk_ref(region, ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() });\n+                    .mk_ref(*region, ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() });\n                 // We probe again to see if there might be a borrow mutability discrepancy.\n                 match self.lookup_probe(\n                     span,"}, {"sha": "81e2b3bc1621f2b026091c52bedb3667b0076158", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -1086,7 +1086,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let ty::Ref(region, t_type, mutability) = rcvr_ty.kind() {\n                     if needs_mut {\n                         let trait_type = self.tcx.mk_ref(\n-                            region,\n+                            *region,\n                             ty::TypeAndMut { ty: *t_type, mutbl: mutability.invert() },\n                         );\n                         err.note(&format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty));\n@@ -1462,8 +1462,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // just this list.\n             for (rcvr_ty, post) in &[\n                 (rcvr_ty, \"\"),\n-                (self.tcx.mk_mut_ref(&ty::ReErased, rcvr_ty), \"&mut \"),\n-                (self.tcx.mk_imm_ref(&ty::ReErased, rcvr_ty), \"&\"),\n+                (self.tcx.mk_mut_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&mut \"),\n+                (self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&\"),\n             ] {\n                 if let Ok(pick) = self.lookup_probe(\n                     span,"}, {"sha": "dd49d6f489259695639bba5fd8c08a64dbc899f8", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -221,7 +221,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             },\n                         };\n                         let autoref = Adjustment {\n-                            kind: Adjust::Borrow(AutoBorrow::Ref(region, mutbl)),\n+                            kind: Adjust::Borrow(AutoBorrow::Ref(*region, mutbl)),\n                             target: method.sig.inputs()[0],\n                         };\n                         self.apply_adjustments(lhs_expr, vec![autoref]);\n@@ -238,7 +238,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             },\n                         };\n                         let autoref = Adjustment {\n-                            kind: Adjust::Borrow(AutoBorrow::Ref(region, mutbl)),\n+                            kind: Adjust::Borrow(AutoBorrow::Ref(*region, mutbl)),\n                             target: method.sig.inputs()[1],\n                         };\n                         // HACK(eddyb) Bypass checks due to reborrows being in"}, {"sha": "318979b462759413fad36d629de06aa229041fef", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.apply_adjustments(\n                 oprnd_expr,\n                 vec![Adjustment {\n-                    kind: Adjust::Borrow(AutoBorrow::Ref(region, AutoBorrowMutability::Not)),\n+                    kind: Adjust::Borrow(AutoBorrow::Ref(*region, AutoBorrowMutability::Not)),\n                     target: method.sig.inputs()[0],\n                 }],\n             );\n@@ -165,9 +165,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut adjustments = self.adjust_steps(autoderef);\n                 if let ty::Ref(region, _, hir::Mutability::Not) = method.sig.inputs()[0].kind() {\n                     adjustments.push(Adjustment {\n-                        kind: Adjust::Borrow(AutoBorrow::Ref(region, AutoBorrowMutability::Not)),\n+                        kind: Adjust::Borrow(AutoBorrow::Ref(*region, AutoBorrowMutability::Not)),\n                         target: self.tcx.mk_ref(\n-                            region,\n+                            *region,\n                             ty::TypeAndMut { mutbl: hir::Mutability::Not, ty: adjusted_ty },\n                         ),\n                     });\n@@ -432,9 +432,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // not the case today.\n                         allow_two_phase_borrow: AllowTwoPhase::No,\n                     };\n-                    adjustment.kind = Adjust::Borrow(AutoBorrow::Ref(region, mutbl));\n-                    adjustment.target =\n-                        self.tcx.mk_ref(region, ty::TypeAndMut { ty: source, mutbl: mutbl.into() });\n+                    adjustment.kind = Adjust::Borrow(AutoBorrow::Ref(*region, mutbl));\n+                    adjustment.target = self\n+                        .tcx\n+                        .mk_ref(*region, ty::TypeAndMut { ty: source, mutbl: mutbl.into() });\n                 }\n                 source = adjustment.target;\n             }"}, {"sha": "513e8576f2d1936882fbfe59a76469e39ed49523", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -689,7 +689,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         let rptr_ty = self.resolve_node_type(id);\n         if let ty::Ref(r, _, _) = rptr_ty.kind() {\n             debug!(\"rptr_ty={}\", rptr_ty);\n-            self.link_region(span, r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);\n+            self.link_region(span, *r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);\n         }\n     }\n "}, {"sha": "949d857bff46288302154e0c80ea49e6e63f19be", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -966,7 +966,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx,\n                     ty,\n                     max_capture_info.capture_kind,\n-                    Some(&ty::ReErased),\n+                    Some(self.tcx.lifetimes.re_erased),\n                 )\n             }\n         };\n@@ -997,7 +997,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 capture.place.ty(),\n                 capture.info.capture_kind,\n-                Some(&ty::ReErased),\n+                Some(self.tcx.lifetimes.re_erased),\n             );\n \n             // Checks if a capture implements any of the auto traits"}, {"sha": "313927196714689f61d4b6cc53a2ebca522cd8e2", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -336,7 +336,7 @@ fn check_gat_where_clauses(\n             // Ignore `'static` lifetimes for the purpose of this lint: it's\n             // because we know it outlives everything and so doesn't give meaninful\n             // clues\n-            if let ty::ReStatic = region {\n+            if region.is_static() {\n                 continue;\n             }\n             for (ty, ty_idx) in &types {\n@@ -381,14 +381,14 @@ fn check_gat_where_clauses(\n             // Ignore `'static` lifetimes for the purpose of this lint: it's\n             // because we know it outlives everything and so doesn't give meaninful\n             // clues\n-            if let ty::ReStatic = region_a {\n+            if region_a.is_static() {\n                 continue;\n             }\n             for (region_b, region_b_idx) in &regions {\n                 if region_a == region_b {\n                     continue;\n                 }\n-                if let ty::ReStatic = region_b {\n+                if region_b.is_static() {\n                     continue;\n                 }\n \n@@ -569,7 +569,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n     wf_tys: &FxHashSet<Ty<'tcx>>,\n     add_constraints: impl for<'a> FnOnce(\n         &'a InferCtxt<'a, 'tcx>,\n-        &'a Vec<(&'tcx ty::RegionKind, GenericKind<'tcx>)>,\n+        &'a Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>,\n     ),\n ) -> bool {\n     // Unfortunately, we have to use a new `InferCtxt` each call, because"}, {"sha": "4d3c718dc519304680656a56bc7f228efae5e962", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -751,7 +751,7 @@ impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n         }\n     }\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        if let ty::ReLateBound(..) = r { r } else { self.tcx.lifetimes.re_erased }\n+        if r.is_late_bound() { r } else { self.tcx.lifetimes.re_erased }\n     }\n }\n "}, {"sha": "401ba188728c17e3cd0b8607607c7d6d61b3ab69", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -147,7 +147,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n         use ty::TyKind::*;\n         match (source.kind(), target.kind()) {\n             (&Ref(r_a, _, mutbl_a), Ref(r_b, _, mutbl_b))\n-                if infcx.at(&cause, param_env).eq(r_a, r_b).is_ok() && mutbl_a == *mutbl_b => {}\n+                if infcx.at(&cause, param_env).eq(r_a, *r_b).is_ok() && mutbl_a == *mutbl_b => {}\n             (&RawPtr(tm_a), &RawPtr(tm_b)) if tm_a.mutbl == tm_b.mutbl => (),\n             (&Adt(def_a, substs_a), &Adt(def_b, substs_b))\n                 if def_a.is_struct() && def_b.is_struct() =>"}, {"sha": "f73bb5378db99f0e224bf4b006d70c5d5483009c", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -301,7 +301,7 @@ impl<'tcx> TypeVisitor<'tcx> for AreUniqueParamsVisitor {\n         }\n     }\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match r {\n+        match *r {\n             ty::ReEarlyBound(p) => {\n                 if self.seen.insert(p.index) {\n                     ControlFlow::CONTINUE"}, {"sha": "0d6c5701259f1ba91d8f3f4da93b6c3c68f9ac12", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -395,7 +395,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n+        let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match *r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n         });\n@@ -1878,7 +1878,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                 Some(ty) => {\n                     let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n                     // Typeck doesn't expect erased regions to be returned from `type_of`.\n-                    let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match r {\n+                    let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n                         ty::ReErased => tcx.lifetimes.re_static,\n                         _ => r,\n                     });"}, {"sha": "90555b213c1cab86a6ce974be718f5bceca2058a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -829,7 +829,7 @@ fn infer_placeholder_type<'a>(\n     }\n \n     // Typeck doesn't expect erased regions to be returned from `type_of`.\n-    tcx.fold_regions(ty, &mut false, |r, _| match r {\n+    tcx.fold_regions(ty, &mut false, |r, _| match *r {\n         ty::ReErased => tcx.lifetimes.re_static,\n         _ => r,\n     })"}, {"sha": "7b709b302f630a0b0369f32c5f9c9f84acf4e7fc", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -180,6 +180,6 @@ impl<'tcx> TypeFolder<'tcx> for EraseAllBoundRegions<'tcx> {\n         self.tcx\n     }\n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n-        if let ty::ReLateBound(..) = r { &ty::ReErased } else { r }\n+        if r.is_late_bound() { self.tcx.lifetimes.re_erased } else { r }\n     }\n }"}, {"sha": "92f88a15ee4163c3f66868ee076f07d76b54657b", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -269,7 +269,7 @@ fn check_static_lifetimes<'tcx>(\n     parent_substs: &Vec<GenericArg<'tcx>>,\n     span: Span,\n ) {\n-    if tcx.any_free_region_meets(parent_substs, |r| *r == ty::ReStatic) {\n+    if tcx.any_free_region_meets(parent_substs, |r| r.is_static()) {\n         tcx.sess.struct_span_err(span, \"cannot specialize on `'static` lifetime\").emit();\n     }\n }"}, {"sha": "139be8a42de7ed91dd6a187c5d6253432f0181fe", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -105,14 +105,14 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some((\n                             ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n-                                ty::OutlivesPredicate(ty1, region2),\n+                                ty::OutlivesPredicate(ty1, *region2),\n                             ))\n                             .to_predicate(tcx),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n                             ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n-                                ty::OutlivesPredicate(region1, region2),\n+                                ty::OutlivesPredicate(region1, *region2),\n                             ))\n                             .to_predicate(tcx),\n                             span,"}, {"sha": "1a32003da8daeeef08e69205402119c4cea138fc", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -133,7 +133,7 @@ pub fn insert_outlives_predicate<'tcx>(\n \n fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n-    match region {\n+    match *region {\n         // These correspond to `T: 'a` relationships:\n         //\n         //     struct Foo<'a, T> {"}, {"sha": "a3154d8f03bf82ee752993d13839e2ff8ebaf20d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -297,7 +297,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     .get(name)\n                     .unwrap_or(&empty)\n                     .iter()\n-                    .map(|region| GenericBound::Outlives(Self::get_lifetime(region, names_map)))\n+                    .map(|region| GenericBound::Outlives(Self::get_lifetime(*region, names_map)))\n                     .collect();\n \n                 if bounds.is_empty() {"}, {"sha": "dcaa760a88c1023e9f2b82377eefd1bc5e0ff719", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -218,9 +218,9 @@ impl Clean<Constant> for hir::ConstArg {\n     }\n }\n \n-impl Clean<Option<Lifetime>> for ty::RegionKind {\n+impl Clean<Option<Lifetime>> for ty::Region<'_> {\n     fn clean(&self, _cx: &mut DocContext<'_>) -> Option<Lifetime> {\n-        match *self {\n+        match **self {\n             ty::ReStatic => Some(Lifetime::statik()),\n             ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) => {\n                 Some(Lifetime(name))\n@@ -327,7 +327,7 @@ impl<'tcx> Clean<Option<WherePredicate>>\n     fn clean(&self, cx: &mut DocContext<'_>) -> Option<WherePredicate> {\n         let ty::OutlivesPredicate(a, b) = self;\n \n-        if let (ty::ReEmpty(_), ty::ReEmpty(_)) = (a, b) {\n+        if a.is_empty() && b.is_empty() {\n             return None;\n         }\n \n@@ -342,7 +342,7 @@ impl<'tcx> Clean<Option<WherePredicate>> for ty::OutlivesPredicate<Ty<'tcx>, ty:\n     fn clean(&self, cx: &mut DocContext<'_>) -> Option<WherePredicate> {\n         let ty::OutlivesPredicate(ty, lt) = self;\n \n-        if let ty::ReEmpty(_) = lt {\n+        if lt.is_empty() {\n             return None;\n         }\n "}, {"sha": "b59ee146f05737c9c5089dce2c548a905c718420", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -89,7 +89,7 @@ fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => match lt {\n+            GenericArgKind::Lifetime(lt) => match *lt {\n                 ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrAnon(_), .. }) => {\n                     Some(GenericArg::Lifetime(Lifetime::elided()))\n                 }"}, {"sha": "2697d46bdb2f42a510b6d12f7bf9c1a19abec2f0", "filename": "src/test/ui/issues/issue-35570.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n-  --> $DIR/issue-35570.rs:8:4\n+  --> $DIR/issue-35570.rs:8:40\n    |\n LL | fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n-   |    ^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "6844e86653299c00810f2b600408e18710338e72", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n-  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:4\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:49\n    |\n LL | fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n-   |    ^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n    |\n help: consider restricting type parameter `T`\n    |"}, {"sha": "c3cb02329a11c7c3b944ae1be9de30170de4c80d", "filename": "src/tools/clippy/clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7024dc523ac712249bb78833dab80c5087e1de36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7024dc523ac712249bb78833dab80c5087e1de36/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=7024dc523ac712249bb78833dab80c5087e1de36", "patch": "@@ -73,7 +73,7 @@ pub(super) fn check<'tcx>(\n                     match cx.qpath_res(p, fun.hir_id) {\n                         hir::def::Res::Def(hir::def::DefKind::Fn | hir::def::DefKind::AssocFn, def_id) => matches!(\n                             cx.tcx.fn_sig(def_id).output().skip_binder().kind(),\n-                            ty::Ref(ty::ReStatic, ..)\n+                            ty::Ref(re, ..) if re.is_static(),\n                         ),\n                         _ => false,\n                     }\n@@ -87,7 +87,7 @@ pub(super) fn check<'tcx>(\n                     .map_or(false, |method_id| {\n                         matches!(\n                             cx.tcx.fn_sig(method_id).output().skip_binder().kind(),\n-                            ty::Ref(ty::ReStatic, ..)\n+                            ty::Ref(re, ..) if re.is_static()\n                         )\n                     })\n             },"}]}