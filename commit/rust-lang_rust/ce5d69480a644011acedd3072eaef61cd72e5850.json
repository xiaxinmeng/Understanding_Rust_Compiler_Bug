{"sha": "ce5d69480a644011acedd3072eaef61cd72e5850", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNWQ2OTQ4MGE2NDQwMTFhY2VkZDMwNzJlYWVmNjFjZDcyZTU4NTA=", "commit": {"author": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2019-04-02T22:09:56Z"}, "committer": {"name": "Alex Gaynor", "email": "agaynor@mozilla.com", "date": "2019-04-08T16:58:09Z"}, "message": "Add must_use annotations to Result::is_ok and is_err", "tree": {"sha": "b110096293347cc6386b1e40e902095cbe55e612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b110096293347cc6386b1e40e902095cbe55e612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce5d69480a644011acedd3072eaef61cd72e5850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5d69480a644011acedd3072eaef61cd72e5850", "html_url": "https://github.com/rust-lang/rust/commit/ce5d69480a644011acedd3072eaef61cd72e5850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce5d69480a644011acedd3072eaef61cd72e5850/comments", "author": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3750348daff89741e3153e0e120aa70a45ff5b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/3750348daff89741e3153e0e120aa70a45ff5b68", "html_url": "https://github.com/rust-lang/rust/commit/3750348daff89741e3153e0e120aa70a45ff5b68"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "68ef087d84b90f3ed3246ac725fb3e7f5bb684df", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ce5d69480a644011acedd3072eaef61cd72e5850", "patch": "@@ -178,6 +178,7 @@ impl<T> Option<T> {\n     /// ```\n     ///\n     /// [`Some`]: #variant.Some\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n@@ -200,6 +201,7 @@ impl<T> Option<T> {\n     /// ```\n     ///\n     /// [`None`]: #variant.None\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_none(&self) -> bool {"}, {"sha": "e22a9ebbca4c3918c80c414ed221e9cb677861ec", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ce5d69480a644011acedd3072eaef61cd72e5850", "patch": "@@ -277,6 +277,7 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<i32, &str> = Err(\"Some error message\");\n     /// assert_eq!(x.is_ok(), false);\n     /// ```\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_ok(&self) -> bool {\n@@ -301,6 +302,7 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<i32, &str> = Err(\"Some error message\");\n     /// assert_eq!(x.is_err(), true);\n     /// ```\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_err(&self) -> bool {"}, {"sha": "0301891c9b292df8738eb58ab91df0a577aa2160", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=ce5d69480a644011acedd3072eaef61cd72e5850", "patch": "@@ -1471,7 +1471,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n+            assert!(OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok());\n         }\n \n         #[test]\n@@ -1481,7 +1481,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n+            assert!(!OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err());\n         }\n     }\n \n@@ -1868,7 +1868,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_ok();\n+            assert!(OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_ok());\n         }\n \n         #[test]\n@@ -1878,7 +1878,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_err();\n+            assert!(!OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_err());\n         }\n \n         #[test]\n@@ -1888,7 +1888,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n+            assert!(OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok());\n         }\n \n         #[test]\n@@ -1898,7 +1898,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n+            assert!(!OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err());\n         }\n \n         #[test]"}, {"sha": "685c7909ff294a87b6c84923b91896191b1a532b", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=ce5d69480a644011acedd3072eaef61cd72e5850", "patch": "@@ -1005,7 +1005,7 @@ impl<T> SyncSender<T> {\n     /// thread::spawn(move || {\n     ///     // This will return an error and send\n     ///     // no message if the buffer is full\n-    ///     sync_sender2.try_send(3).is_err();\n+    ///     let _ = sync_sender2.try_send(3);\n     /// });\n     ///\n     /// let mut msg;"}, {"sha": "3d15c9980c352681745065eff4a878c15f1dc94e", "filename": "src/test/run-pass/issues/issue-18353.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce5d69480a644011acedd3072eaef61cd72e5850/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs?ref=ce5d69480a644011acedd3072eaef61cd72e5850", "patch": "@@ -11,5 +11,5 @@ struct Str {\n \n fn main() {\n     let str: Option<&Str> = None;\n-    str.is_some();\n+    let _ = str.is_some();\n }"}]}