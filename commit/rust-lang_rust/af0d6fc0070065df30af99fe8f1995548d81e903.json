{"sha": "af0d6fc0070065df30af99fe8f1995548d81e903", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMGQ2ZmMwMDcwMDY1ZGYzMGFmOTlmZThmMTk5NTU0OGQ4MWU5MDM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-17T23:47:08Z"}, "message": "Use copy bound in atomic operations to generate simpler MIR", "tree": {"sha": "57fed36f9f1827598f53bd0ee9768d39a213d59b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57fed36f9f1827598f53bd0ee9768d39a213d59b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0d6fc0070065df30af99fe8f1995548d81e903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0d6fc0070065df30af99fe8f1995548d81e903", "html_url": "https://github.com/rust-lang/rust/commit/af0d6fc0070065df30af99fe8f1995548d81e903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0d6fc0070065df30af99fe8f1995548d81e903/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660326e9791d5caf3186b14521498c2584a494ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/660326e9791d5caf3186b14521498c2584a494ab", "html_url": "https://github.com/rust-lang/rust/commit/660326e9791d5caf3186b14521498c2584a494ab"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "220f221cdd36dc2713fb836392d44d706b2cefae", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af0d6fc0070065df30af99fe8f1995548d81e903/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0d6fc0070065df30af99fe8f1995548d81e903/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=af0d6fc0070065df30af99fe8f1995548d81e903", "patch": "@@ -2259,7 +2259,7 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n }\n \n #[inline]\n-unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n+unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {\n     match order {\n         Release => intrinsics::atomic_store_rel(dst, val),\n         Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n@@ -2270,7 +2270,7 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n }\n \n #[inline]\n-unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n+unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_load_acq(dst),\n         Relaxed => intrinsics::atomic_load_relaxed(dst),\n@@ -2282,7 +2282,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n         Release => intrinsics::atomic_xchg_rel(dst, val),\n@@ -2295,7 +2295,7 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xadd_acq(dst, val),\n         Release => intrinsics::atomic_xadd_rel(dst, val),\n@@ -2308,7 +2308,7 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xsub_acq(dst, val),\n         Release => intrinsics::atomic_xsub_rel(dst, val),\n@@ -2320,7 +2320,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_compare_exchange<T>(\n+unsafe fn atomic_compare_exchange<T: Copy>(\n     dst: *mut T,\n     old: T,\n     new: T,\n@@ -2346,7 +2346,7 @@ unsafe fn atomic_compare_exchange<T>(\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_compare_exchange_weak<T>(\n+unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     dst: *mut T,\n     old: T,\n     new: T,\n@@ -2372,7 +2372,7 @@ unsafe fn atomic_compare_exchange_weak<T>(\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_and_acq(dst, val),\n         Release => intrinsics::atomic_and_rel(dst, val),\n@@ -2384,7 +2384,7 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_nand_acq(dst, val),\n         Release => intrinsics::atomic_nand_rel(dst, val),\n@@ -2396,7 +2396,7 @@ unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_or_acq(dst, val),\n         Release => intrinsics::atomic_or_rel(dst, val),\n@@ -2408,7 +2408,7 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xor_acq(dst, val),\n         Release => intrinsics::atomic_xor_rel(dst, val),\n@@ -2421,7 +2421,7 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the max value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_max_acq(dst, val),\n         Release => intrinsics::atomic_max_rel(dst, val),\n@@ -2434,7 +2434,7 @@ unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the min value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_min_acq(dst, val),\n         Release => intrinsics::atomic_min_rel(dst, val),\n@@ -2447,7 +2447,7 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the max value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_umax_acq(dst, val),\n         Release => intrinsics::atomic_umax_rel(dst, val),\n@@ -2460,7 +2460,7 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the min value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_umin_acq(dst, val),\n         Release => intrinsics::atomic_umin_rel(dst, val),"}]}