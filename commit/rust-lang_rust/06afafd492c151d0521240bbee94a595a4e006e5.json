{"sha": "06afafd492c151d0521240bbee94a595a4e006e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YWZhZmQ0OTJjMTUxZDA1MjEyNDBiYmVlOTRhNTk1YTRlMDA2ZTU=", "commit": {"author": {"name": "Roxane Fruytier", "email": "roxane.fruytier@hotmail.com", "date": "2021-06-29T18:17:25Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-06-29T21:47:57Z"}, "message": "Use diagnostic items to check for Send, UnwindSafe and RefUnwindSafe traits", "tree": {"sha": "d333d7f7bf20a3dcb1c4d239700bf923c0412bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d333d7f7bf20a3dcb1c4d239700bf923c0412bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06afafd492c151d0521240bbee94a595a4e006e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06afafd492c151d0521240bbee94a595a4e006e5", "html_url": "https://github.com/rust-lang/rust/commit/06afafd492c151d0521240bbee94a595a4e006e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06afafd492c151d0521240bbee94a595a4e006e5/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e569dd2dff023378debce3b98e19bf3ef8c6904", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e569dd2dff023378debce3b98e19bf3ef8c6904", "html_url": "https://github.com/rust-lang/rust/commit/3e569dd2dff023378debce3b98e19bf3ef8c6904"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "13c14d26b70f47dade04918e3d49b14b2e27ae86", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06afafd492c151d0521240bbee94a595a4e006e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06afafd492c151d0521240bbee94a595a4e006e5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=06afafd492c151d0521240bbee94a595a4e006e5", "patch": "@@ -690,12 +690,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // Blacklist traits for which it would be nonsensical to suggest borrowing.\n         // For instance, immutable references are always Copy, so suggesting to\n         // borrow would always succeed, but it's probably not what the user wanted.\n-        let blacklist: Vec<_> =\n-            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized, LangItem::Send]\n+        let mut blacklist: Vec<_> =\n+            [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized]\n                 .iter()\n                 .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n                 .collect();\n \n+        blacklist.push(self.tcx.get_diagnostic_item(sym::send_trait).unwrap());\n+\n         let span = obligation.cause.span;\n         let param_env = obligation.param_env;\n         let trait_ref = trait_ref.skip_binder();"}, {"sha": "197c4e3b319ab894328a511643772494a04b9c6c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06afafd492c151d0521240bbee94a595a4e006e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06afafd492c151d0521240bbee94a595a4e006e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=06afafd492c151d0521240bbee94a595a4e006e5", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().send_trait(),\n+            tcx.get_diagnostic_item(sym::send_trait),\n         ) {\n             auto_trait_reasons.insert(\"`Send`\");\n         }\n@@ -679,15 +679,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().unwind_safe_trait(),\n+            tcx.get_diagnostic_item(sym::unwind_safe_trait),\n         ) {\n             auto_trait_reasons.insert(\"`UnwindSafe`\");\n         }\n \n         if self.need_2229_migrations_for_trait(\n             min_captures,\n             var_hir_id,\n-            tcx.lang_items().ref_unwind_safe_trait(),\n+            tcx.get_diagnostic_item(sym::ref_unwind_safe_trait),\n         ) {\n             auto_trait_reasons.insert(\"`RefUnwindSafe`\");\n         }"}, {"sha": "7bc987db8814bd620d26d98e11bc6e810f910fc2", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06afafd492c151d0521240bbee94a595a4e006e5/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06afafd492c151d0521240bbee94a595a4e006e5/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=06afafd492c151d0521240bbee94a595a4e006e5", "patch": "@@ -133,7 +133,7 @@ pub fn panic_any<M: 'static + Any + Send>(msg: M) -> ! {\n /// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n /// implemented for any closed over variables passed to `catch_unwind`.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[rustc_diagnostic_item = \"unwind_safe_trait\"]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unwind_safe_trait\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may not be safely transferred across an unwind boundary\",\n     label = \"`{Self}` may not be safely transferred across an unwind boundary\"\n@@ -149,7 +149,7 @@ pub auto trait UnwindSafe {}\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// [`UnwindSafe`] trait, for more information see that documentation.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[rustc_diagnostic_item = \"ref_unwind_safe_trait\"]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"ref_unwind_safe_trait\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may contain interior mutability and a reference may not be safely \\\n                transferrable across a catch_unwind boundary\","}]}