{"sha": "35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YmY0NjZhMjc2NGFiZGU0Yzc4Mzg5YzVmYzkxY2E5YzRlOWFiMjg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-25T15:53:52Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:53Z"}, "message": "Remove super_traits_of query, just leave a helper function", "tree": {"sha": "ca810a948b665af347da7df0fc8c5a5d921743e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca810a948b665af347da7df0fc8c5a5d921743e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/kACgkQgTGiTgx5\n76+UHA/8CV1NEm4kb/4B4uIqlZxCYRJ95Mgr7nK+mxgn3tvr7T4Y8GsMeazdyCF1\nPYPIh82At1jhuW+MmjFdGCXmEXiyi2Kz/WCbOmynW9ihGnNcsknwq54bBnQUP3Tn\n/FTCXi3OKhfySXB/QqpzY8Nynj5RPw57/nLQ5dYzKAM9uTXGdnhhag6+90m4S5Ih\nITm129ZqZtx+3XksZC/GJdjucJajdXfm6ulipa85taBsp3iBv84obH+PYH62/EKL\nKS0LDfgmJkeCrAMaQie00muscO2tHXFNAMkCBYslEmcMrAFd0K5Jcrjk3LLwMD8t\n15l/Q5tb5Yn4lB+fdaddrZtJCcDDc2FPszqtUdNTk/s2V5BPQF9JF8XWsapDX5FL\n7Q0aSTFJyfTHdgIbWWgpp0wrzZARQMTuavoJTP3lfh4y6XTKcfRSFmExIQSJBjBN\nOVou9p7j97lHA4p85J9ndiA455/3WyXC0ZV9OuYmDwNs0Y8Uul99pL5t9+LnAsQE\n8/JqH2wGRyhUslCZxNAO32x6UGGgRgw7kNaUCvo21c9AQyFInienNrLKdM4fsRiG\neXim3GLlhb8Zep6iUkdU+gI2MEP2R4BwTXJcqFWLdnEmVEtu39hbr5/p7+PHshpc\nEf97p9MW8TpDky2Pu2HQlWcOvlN0409HiVDUZ+EElcdrcsaDQow=\n=cUYt\n-----END PGP SIGNATURE-----", "payload": "tree ca810a948b665af347da7df0fc8c5a5d921743e7\nparent a6136d8b8324afbbed8fc7e4c3533d3e509a91fc\nauthor Santiago Pastorino <spastorino@gmail.com> 1606319632 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487033 -0300\n\nRemove super_traits_of query, just leave a helper function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "html_url": "https://github.com/rust-lang/rust/commit/35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "html_url": "https://github.com/rust-lang/rust/commit/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "b516810205fefef1c945caf385fcd6d107f8246c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "patch": "@@ -436,12 +436,6 @@ rustc_queries! {\n             desc { |tcx| \"computing the super predicates of `{}`\", tcx.def_path_str(key) }\n         }\n \n-        /// Maps from the `DefId` of a trait to the list of\n-        /// all the ancestors super traits.\n-        query super_traits_of(key: DefId) -> Lrc<FxHashSet<DefId>> {\n-            desc { |tcx| \"computing the super traits of `{}`\", tcx.def_path_str(key) }\n-        }\n-\n         /// The `Option<Ident>` is the name of an associated type. If it is `None`, then this query\n         /// returns the full set of predicates. If `Some<Ident>`, then the query returns only the\n         /// subset of super-predicates that reference traits that define the given associated type."}, {"sha": "6a60d65661a701a0750d2c63181499be1c067476", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "patch": "@@ -2095,6 +2095,29 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// Computes the def-ids of the transitive super-traits of `trait_def_id`. This (intentionally)\n+    /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n+    /// to identify which traits may define a given associated type to help avoid cycle errors.\n+    /// Returns `Lrc<FxHashSet<DefId>>` so that cloning is cheaper.\n+    fn super_traits_of(self, trait_def_id: DefId) -> Lrc<FxHashSet<DefId>> {\n+        let mut set = FxHashSet::default();\n+        let mut stack = vec![trait_def_id];\n+        while let Some(trait_did) = stack.pop() {\n+            if !set.insert(trait_did) {\n+                continue;\n+            }\n+\n+            let generic_predicates = self.super_predicates_of(trait_did);\n+            for (predicate, _) in generic_predicates.predicates {\n+                if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n+                    stack.push(data.def_id());\n+                }\n+            }\n+        }\n+\n+        Lrc::new(set)\n+    }\n+\n     /// Given a closure signature, returns an equivalent fn signature. Detuples\n     /// and so forth -- so e.g., if we have a sig with `Fn<(u32, i32)>` then\n     /// you would get a `fn(u32, i32)`."}, {"sha": "28c4da1a7432e2c146ae968c9cad55326427320f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35bf466a2764abde4c78389c5fc91ca9c4e9ab28/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=35bf466a2764abde4c78389c5fc91ca9c4e9ab28", "patch": "@@ -26,7 +26,6 @@ use rustc_ast::{MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -81,7 +80,6 @@ pub fn provide(providers: &mut Providers) {\n         projection_ty_from_predicates,\n         explicit_predicates_of,\n         super_predicates_of,\n-        super_traits_of,\n         super_predicates_that_define_assoc_type,\n         trait_explicit_predicates_and_bounds,\n         type_param_predicates,\n@@ -1116,29 +1114,6 @@ fn super_predicates_that_define_assoc_type(\n     }\n }\n \n-/// Computes the def-ids of the transitive super-traits of `trait_def_id`. This (intentionally)\n-/// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n-/// to identify which traits may define a given associated type to help avoid cycle errors.\n-/// Returns `Lrc<FxHashSet<DefId>>` so that cloning is cheaper.\n-fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Lrc<FxHashSet<DefId>> {\n-    let mut set = FxHashSet::default();\n-    let mut stack = vec![trait_def_id];\n-    while let Some(trait_did) = stack.pop() {\n-        if !set.insert(trait_did) {\n-            continue;\n-        }\n-\n-        let generic_predicates = tcx.super_predicates_of(trait_did);\n-        for (predicate, _) in generic_predicates.predicates {\n-            if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n-                stack.push(data.def_id());\n-            }\n-        }\n-    }\n-\n-    Lrc::new(set)\n-}\n-\n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     let item = tcx.hir().expect_item(hir_id);"}]}