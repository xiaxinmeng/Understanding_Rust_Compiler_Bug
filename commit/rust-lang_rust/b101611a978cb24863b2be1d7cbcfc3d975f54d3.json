{"sha": "b101611a978cb24863b2be1d7cbcfc3d975f54d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDE2MTFhOTc4Y2IyNDg2M2IyYmUxZDdjYmNmYzNkOTc1ZjU0ZDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:48:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:50:57Z"}, "message": "Rustup to rustc 1.16.0-nightly (468227129 2017-01-03): Dogfood fixes", "tree": {"sha": "b9ea9c92a7f4ec23383dd009c109801b1252199f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ea9c92a7f4ec23383dd009c109801b1252199f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b101611a978cb24863b2be1d7cbcfc3d975f54d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b101611a978cb24863b2be1d7cbcfc3d975f54d3", "html_url": "https://github.com/rust-lang/rust/commit/b101611a978cb24863b2be1d7cbcfc3d975f54d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b101611a978cb24863b2be1d7cbcfc3d975f54d3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6dd65620e932eacb408b5b2825baf833e560719", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dd65620e932eacb408b5b2825baf833e560719", "html_url": "https://github.com/rust-lang/rust/commit/d6dd65620e932eacb408b5b2825baf833e560719"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "6a02e69a8818d01d5fad7bf96d5e7012105b62d0", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=b101611a978cb24863b2be1d7cbcfc3d975f54d3", "patch": "@@ -58,9 +58,9 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if let ExprClosure(_, _, eid, _) = expr.node {\n             let body = self.cx.tcx.map.body(eid);\n-            let expr = &body.value;\n-            if matches!(expr.node, ExprBlock(_)) {\n-                self.found_block = Some(&expr);\n+            let ex = &body.value;\n+            if matches!(ex.node, ExprBlock(_)) {\n+                self.found_block = Some(ex);\n                 return;\n             }\n         }"}, {"sha": "19289803299493d6ce5e99e42ad0f15429248594", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=b101611a978cb24863b2be1d7cbcfc3d975f54d3", "patch": "@@ -50,14 +50,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaPass {\n fn check_closure(cx: &LateContext, expr: &Expr) {\n     if let ExprClosure(_, ref decl, eid, _) = expr.node {\n         let body = cx.tcx.map.body(eid);\n-        let ref ex = body.value;\n+        let ex = &body.value;\n         if let ExprCall(ref caller, ref args) = ex.node {\n             if args.len() != decl.inputs.len() {\n                 // Not the same number of arguments, there\n                 // is no way the closure is the same as the function\n                 return;\n             }\n-            if is_adjusted(cx, &ex) || args.iter().any(|arg| is_adjusted(cx, arg)) {\n+            if is_adjusted(cx, ex) || args.iter().any(|arg| is_adjusted(cx, arg)) {\n                 // Are the expression or the arguments type-adjusted? Then we need the closure\n                 return;\n             }"}, {"sha": "36d774b4f9f3c8ec20e052d7f7cffe27337c7d3f", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=b101611a978cb24863b2be1d7cbcfc3d975f54d3", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             }\n         }\n \n-        self.check_raw_ptr(cx, unsafety, decl, &body, nodeid);\n+        self.check_raw_ptr(cx, unsafety, decl, body, nodeid);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n \n             if let hir::TraitMethod::Provided(eid) = *eid {\n                 let body = cx.tcx.map.body(eid);\n-                self.check_raw_ptr(cx, sig.unsafety, &sig.decl, &body, item.id);\n+                self.check_raw_ptr(cx, sig.unsafety, &sig.decl, body, item.id);\n             }\n         }\n     }\n@@ -141,9 +141,9 @@ impl<'a, 'tcx> Functions {\n     ) {\n         let expr = &body.value;\n         if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(nodeid) {\n-            let raw_ptrs = iter_input_pats(&decl, body).zip(decl.inputs.iter())\n-                                                            .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n-                                                            .collect::<HashSet<_>>();\n+            let raw_ptrs = iter_input_pats(decl, body).zip(decl.inputs.iter())\n+                                                      .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n+                                                      .collect::<HashSet<_>>();\n \n             if !raw_ptrs.is_empty() {\n                 let mut v = DerefVisitor {"}, {"sha": "3006e5fc9b0d191c91f144bfeddae62f8b070ba0", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=b101611a978cb24863b2be1d7cbcfc3d975f54d3", "patch": "@@ -137,7 +137,7 @@ fn could_use_elision<'a, 'tcx: 'a, T: Iterator<Item = &'tcx Lifetime>>(\n \n     // extract lifetimes in input argument types\n     for arg in &func.inputs {\n-        input_visitor.visit_ty(&arg);\n+        input_visitor.visit_ty(arg);\n     }\n     // extract lifetimes in output type\n     if let Return(ref ty) = func.output {"}, {"sha": "a16fe7ae009119acf847587112d696c348fde8a9", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=b101611a978cb24863b2be1d7cbcfc3d975f54d3", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if in_external_macro(cx, body.value.span) {\n             return;\n         }\n-        check_fn(cx, decl, &body);\n+        check_fn(cx, decl, body);\n     }\n }\n "}, {"sha": "ae320db63bcd308c5ffd4abcac905b4798a2c3dc", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b101611a978cb24863b2be1d7cbcfc3d975f54d3/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b101611a978cb24863b2be1d7cbcfc3d975f54d3", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n \n fn check_fn_decl(cx: &LateContext, decl: &FnDecl) {\n     for input in &decl.inputs {\n-        check_ty(cx, &input);\n+        check_ty(cx, input);\n     }\n \n     if let FunctionRetTy::Return(ref ty) = decl.output {\n@@ -651,7 +651,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n impl<'a, 'tcx> TypeComplexityPass {\n     fn check_fndecl(&self, cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl) {\n         for arg in &decl.inputs {\n-            self.check_type(cx, &arg);\n+            self.check_type(cx, arg);\n         }\n         if let Return(ref ty) = decl.output {\n             self.check_type(cx, ty);"}]}