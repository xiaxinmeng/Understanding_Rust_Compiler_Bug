{"sha": "a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YjNhNDAzYWMxNjE4MjRkNDJiYzI0OGI1YzUwZWE3NGFhMThlYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-31T08:52:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-31T08:52:32Z"}, "message": "Auto merge of #6277 - ebroto:rustup, r=ebroto\n\nRustup\n\nchangelog: none", "tree": {"sha": "070d57d6d5e3b0b6a782fa66a9f7215ebf8a9c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/070d57d6d5e3b0b6a782fa66a9f7215ebf8a9c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "html_url": "https://github.com/rust-lang/rust/commit/a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084b203988e04bcf89d3b2d6bbc77b65ecfab553", "url": "https://api.github.com/repos/rust-lang/rust/commits/084b203988e04bcf89d3b2d6bbc77b65ecfab553", "html_url": "https://github.com/rust-lang/rust/commit/084b203988e04bcf89d3b2d6bbc77b65ecfab553"}, {"sha": "2eb248dd16f6727a2cdaa66f3f529a53bbcc54c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb248dd16f6727a2cdaa66f3f529a53bbcc54c7", "html_url": "https://github.com/rust-lang/rust/commit/2eb248dd16f6727a2cdaa66f3f529a53bbcc54c7"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "6ff189fc85926e61a2349bc3e6bc5fe370738204", "filename": ".github/driver.sh", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdriver.sh?ref=a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "patch": "@@ -7,9 +7,9 @@ sysroot=$(./target/debug/clippy-driver --print sysroot)\n test \"$sysroot\" = \"$(rustc --print sysroot)\"\n \n if [[ ${OS} == \"Windows\" ]]; then\n-  desired_sysroot=C:/tmp\n+\tdesired_sysroot=C:/tmp\n else\n-  desired_sysroot=/tmp\n+\tdesired_sysroot=/tmp\n fi\n sysroot=$(./target/debug/clippy-driver --sysroot $desired_sysroot --print sysroot)\n test \"$sysroot\" = $desired_sysroot\n@@ -22,20 +22,18 @@ unset CARGO_MANIFEST_DIR\n \n # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n # FIXME: How to match the clippy invocation in compile-test.rs?\n-./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/double_neg.rs 2> double_neg.stderr && exit 1\n-sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" double_neg.stderr > normalized.stderr\n+./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/double_neg.rs 2>double_neg.stderr && exit 1\n+sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" double_neg.stderr >normalized.stderr\n diff -u normalized.stderr tests/ui/double_neg.stderr\n \n-\n # make sure \"clippy-driver --rustc --arg\" and \"rustc --arg\" behave the same\n-SYSROOT=`rustc --print sysroot`\n+SYSROOT=$(rustc --print sysroot)\n diff -u <(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver --rustc --version --verbose) <(rustc --version --verbose)\n \n-\n-echo \"fn main() {}\" > target/driver_test.rs\n+echo \"fn main() {}\" >target/driver_test.rs\n # we can't run 2 rustcs on the same file at the same time\n-CLIPPY=`LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver ./target/driver_test.rs --rustc`\n-RUSTC=`rustc ./target/driver_test.rs`\n+CLIPPY=$(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver ./target/driver_test.rs --rustc)\n+RUSTC=$(rustc ./target/driver_test.rs)\n diff -u <($CLIPPY) <($RUSTC)\n \n # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR"}, {"sha": "5c3af014ee12873b3d92fd5d388e11c5973de44c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "patch": "@@ -11,6 +11,7 @@\n #![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n+#![feature(control_flow_enum)]\n #![recursion_limit = \"512\"]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]"}, {"sha": "344ed02361de959ccf6270fb0d0b2775dc1bd9a7", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b3a403ac161824d42bc248b5c50ea74aa18ea5/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a6b3a403ac161824d42bc248b5c50ea74aa18ea5", "patch": "@@ -18,6 +18,7 @@ use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, Re\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use std::convert::TryFrom;\n+use std::ops::ControlFlow;\n \n macro_rules! unwrap_or_continue {\n     ($x:expr) => {\n@@ -517,7 +518,10 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 self.possible_borrower.add(borrowed.local, lhs);\n             },\n             other => {\n-                if !ContainsRegion.visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty) {\n+                if ContainsRegion\n+                    .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n+                    .is_continue()\n+                {\n                     return;\n                 }\n                 rvalue_locals(other, |rhs| {\n@@ -539,7 +543,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n             // If the call returns something with lifetimes,\n             // let's conservatively assume the returned value contains lifetime of all the arguments.\n             // For example, given `let y: Foo<'a> = foo(x)`, `y` is considered to be a possible borrower of `x`.\n-            if !ContainsRegion.visit_ty(&self.body.local_decls[*dest].ty) {\n+            if ContainsRegion.visit_ty(&self.body.local_decls[*dest].ty).is_continue() {\n                 return;\n             }\n \n@@ -558,8 +562,8 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n struct ContainsRegion;\n \n impl TypeVisitor<'_> for ContainsRegion {\n-    fn visit_region(&mut self, _: ty::Region<'_>) -> bool {\n-        true\n+    fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<()> {\n+        ControlFlow::BREAK\n     }\n }\n "}]}