{"sha": "13537d2e0ce54f88909e6f44006254490ae1d1ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNTM3ZDJlMGNlNTRmODg5MDllNmY0NDAwNjI1NDQ5MGFlMWQxYWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-12T05:10:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-21T01:02:38Z"}, "message": "core: remove unused 'mut' variables", "tree": {"sha": "34fa89bd6ae9e2fe75415a1f50e2a841756ef566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34fa89bd6ae9e2fe75415a1f50e2a841756ef566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13537d2e0ce54f88909e6f44006254490ae1d1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13537d2e0ce54f88909e6f44006254490ae1d1ab", "html_url": "https://github.com/rust-lang/rust/commit/13537d2e0ce54f88909e6f44006254490ae1d1ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13537d2e0ce54f88909e6f44006254490ae1d1ab/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1985c9dd06379b8a173239e90007db926ec052e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1985c9dd06379b8a173239e90007db926ec052e", "html_url": "https://github.com/rust-lang/rust/commit/d1985c9dd06379b8a173239e90007db926ec052e"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "79125a67aa74e8ed79a0974fc515bba2333f9add", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -121,7 +121,7 @@ fn test_with_ref() {\n #[test]\n fn test_with_mut_ref() {\n     let good = ~[1, 2, 3];\n-    let mut v = ~[1, 2];\n+    let v = ~[1, 2];\n     let c = Cell(v);\n     do c.with_mut_ref() |v| { v.push(3); }\n     let v = c.take();"}, {"sha": "70c96c9c806e4a84799981120c144b82524aa292", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -67,7 +67,7 @@ pub fn deflate_bytes(bytes: &const [u8]) -> ~[u8] {\n pub fn inflate_bytes(bytes: &const [u8]) -> ~[u8] {\n     do vec::as_const_buf(bytes) |b, len| {\n         unsafe {\n-            let mut outsz : size_t = 0;\n+            let outsz : size_t = 0;\n             let res =\n                 rustrt::tinfl_decompress_mem_to_heap(b as *c_void,\n                                                      len as size_t,"}, {"sha": "dbed4b8e0bf02966b2bc41a87c0e81b4c0923016", "filename": "src/libcore/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -844,7 +844,7 @@ pub mod windows {\n             while i < s.len() {\n                 if is_sep(s[i]) {\n                     let pre = s.slice(2, i).to_owned();\n-                    let mut rest = s.slice(i, s.len()).to_owned();\n+                    let rest = s.slice(i, s.len()).to_owned();\n                     return Some((pre, rest));\n                 }\n                 i += 1;"}, {"sha": "89062ff465bfacc28b683ece351827f8d88a3b2a", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -693,7 +693,7 @@ struct XorShiftState {\n impl Rng for XorShiftState {\n     fn next(&self) -> u32 {\n         let x = self.x;\n-        let mut t = x ^ (x << 11);\n+        let t = x ^ (x << 11);\n         self.x = self.y;\n         self.y = self.z;\n         self.z = self.w;"}, {"sha": "03e44e00d88311d91581608050376eaf7cc7a927", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -210,7 +210,7 @@ pub impl ReprVisitor {\n     #[inline(always)]\n     fn visit_ptr_inner(&self, ptr: *c_void, inner: *TyDesc) -> bool {\n         unsafe {\n-            let mut u = ReprVisitor(ptr, self.writer);\n+            let u = ReprVisitor(ptr, self.writer);\n             let v = reflect::MovePtrAdaptor(u);\n             visit_tydesc(inner, @v as @TyVisitor);\n             true\n@@ -667,7 +667,7 @@ pub fn write_repr<T>(writer: @Writer, object: &T) {\n     unsafe {\n         let ptr = ptr::to_unsafe_ptr(object) as *c_void;\n         let tydesc = intrinsic::get_tydesc::<T>();\n-        let mut u = ReprVisitor(ptr, writer);\n+        let u = ReprVisitor(ptr, writer);\n         let v = reflect::MovePtrAdaptor(u);\n         visit_tydesc(tydesc, @v as @TyVisitor)\n     }"}, {"sha": "4cbc8d7056970446f75f1cdcac35392c709af885", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -402,7 +402,7 @@ fn loop_smoke_test() {\n fn idle_new_then_close() {\n     do run_in_bare_thread {\n         let mut loop_ = Loop::new();\n-        let mut idle_watcher = { IdleWatcher::new(&mut loop_) };\n+        let idle_watcher = { IdleWatcher::new(&mut loop_) };\n         idle_watcher.close();\n     }\n }"}, {"sha": "bcfe8b2cfdf9f1efeb474d45831a745a1a370939", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -393,7 +393,7 @@ fn connect_read() {\n                 let buf = vec_from_uv_buf(buf);\n                 rtdebug!(\"read cb!\");\n                 if status.is_none() {\n-                    let bytes = buf.unwrap();\n+                    let _bytes = buf.unwrap();\n                     rtdebug!(\"%s\", bytes.slice(0, nread as uint).to_str());\n                 } else {\n                     rtdebug!(\"status after read: %s\", status.get().to_str());"}, {"sha": "d4e547de3837b6e293b8d9767c0e4827cd9c1d1d", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -206,7 +206,7 @@ impl TcpListener for UvTcpListener {\n                     let mut server_stream_watcher = server_stream_watcher;\n                     let mut loop_ = loop_from_watcher(&server_stream_watcher);\n                     let mut client_tcp_watcher = TcpWatcher::new(&mut loop_);\n-                    let mut client_tcp_watcher = client_tcp_watcher.as_stream();\n+                    let client_tcp_watcher = client_tcp_watcher.as_stream();\n                     // XXX: Need's to be surfaced in interface\n                     server_stream_watcher.accept(client_tcp_watcher);\n                     Some(~UvStream::new(client_tcp_watcher))"}, {"sha": "f9d7f4a229c4277662e13d0a71b11ed8cc70c99e", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -343,7 +343,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n         fn force_destroy(&mut self) { destroy_repr(&mut self.r, true); }\n     }\n \n-    let mut repr = ProgRepr {\n+    let repr = ProgRepr {\n         pid: pid,\n         in_fd: pipe_input.out,\n         out_file: os::fdopen(pipe_output.in),"}, {"sha": "38d68175679cad33687cccaa6cd43e27e93c5a24", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -673,7 +673,7 @@ pub fn levdistance(s: &str, t: &str) -> uint {\n \n         for t.each_chari |j, tc| {\n \n-            let mut next = dcol[j + 1];\n+            let next = dcol[j + 1];\n \n             if sc == tc {\n                 dcol[j + 1] = current;\n@@ -909,7 +909,7 @@ impl TotalOrd for @str {\n /// Bytewise slice less than\n fn lt(a: &str, b: &str) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(a_len, b_len);\n+    let end = uint::min(a_len, b_len);\n \n     let mut i = 0;\n     while i < end {\n@@ -1715,7 +1715,7 @@ pub fn utf16_chars(v: &[u16], f: &fn(char)) {\n     let len = vec::len(v);\n     let mut i = 0u;\n     while (i < len && v[i] != 0u16) {\n-        let mut u = v[i];\n+        let u = v[i];\n \n         if  u <= 0xD7FF_u16 || u >= 0xE000_u16 {\n             f(u as char);"}, {"sha": "d872d38a27801ef77edef90b7cc2a72f8389121a", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -575,7 +575,7 @@ fn spawn_raw_oldsched(opts: TaskOpts, f: ~fn()) {\n             };\n             assert!(!new_task.is_null());\n             // Getting killed after here would leak the task.\n-            let mut notify_chan = if opts.notify_chan.is_none() {\n+            let notify_chan = if opts.notify_chan.is_none() {\n                 None\n             } else {\n                 Some(opts.notify_chan.swap_unwrap())"}, {"sha": "ee33e2ed20bba0c936f13b07f292ea21bae5254d", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -538,7 +538,7 @@ pub mod rt {\n     pub fn conv_str(cv: Conv, s: &str, buf: &mut ~str) {\n         // For strings, precision is the maximum characters\n         // displayed\n-        let mut unpadded = match cv.precision {\n+        let unpadded = match cv.precision {\n           CountImplied => s,\n           CountIs(max) => if (max as uint) < str::char_len(s) {\n             str::slice(s, 0, max as uint)\n@@ -596,7 +596,7 @@ pub mod rt {\n     #[deriving(Eq)]\n     pub enum PadMode { PadSigned, PadUnsigned, PadNozero, PadFloat }\n \n-    pub fn pad(cv: Conv, mut s: &str, head: Option<char>, mode: PadMode,\n+    pub fn pad(cv: Conv, s: &str, head: Option<char>, mode: PadMode,\n                buf: &mut ~str) {\n         let headsize = match head { Some(_) => 1, _ => 0 };\n         let uwidth : uint = match cv.width {"}, {"sha": "e478936ff65cc746529be05461976dae357252fa", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13537d2e0ce54f88909e6f44006254490ae1d1ab/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=13537d2e0ce54f88909e6f44006254490ae1d1ab", "patch": "@@ -1755,7 +1755,7 @@ impl<T: TotalOrd> TotalOrd for @[T] {\n \n fn lt<T:Ord>(a: &[T], b: &[T]) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n-    let mut end = uint::min(a_len, b_len);\n+    let end = uint::min(a_len, b_len);\n \n     let mut i = 0;\n     while i < end {\n@@ -3897,7 +3897,7 @@ mod tests {\n \n     #[test]\n     fn reversed_mut() {\n-        let mut v2 = reversed::<int>(~[10, 20]);\n+        let v2 = reversed::<int>(~[10, 20]);\n         assert!(v2[0] == 20);\n         assert!(v2[1] == 10);\n     }"}]}