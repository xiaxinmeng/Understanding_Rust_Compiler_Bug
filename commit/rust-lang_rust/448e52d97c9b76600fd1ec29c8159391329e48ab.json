{"sha": "448e52d97c9b76600fd1ec29c8159391329e48ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OGU1MmQ5N2M5Yjc2NjAwZmQxZWMyOWM4MTU5MzkxMzI5ZTQ4YWI=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-18T09:55:17Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-18T10:11:25Z"}, "message": "Add coverage to continue statements\n\n`continue` statements were missing coverage. This was particularly\nnoticeable in a match pattern that contained only a `continue`\nstatement, leaving the branch appear uncounted. This PR addresses the\nproblem and adds tests to prove it.", "tree": {"sha": "979d49e603e385ebac68fefe74de006e893411c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/979d49e603e385ebac68fefe74de006e893411c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/448e52d97c9b76600fd1ec29c8159391329e48ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/448e52d97c9b76600fd1ec29c8159391329e48ab", "html_url": "https://github.com/rust-lang/rust/commit/448e52d97c9b76600fd1ec29c8159391329e48ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/448e52d97c9b76600fd1ec29c8159391329e48ab/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ca4b7e600241850e61be48dee859f1604de50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ca4b7e600241850e61be48dee859f1604de50d", "html_url": "https://github.com/rust-lang/rust/commit/83ca4b7e600241850e61be48dee859f1604de50d"}], "stats": {"total": 162, "additions": 160, "deletions": 2}, "files": [{"sha": "2727e70f278dbc687fd26ca33c578dfd5c2d3356", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/448e52d97c9b76600fd1ec29c8159391329e48ab/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448e52d97c9b76600fd1ec29c8159391329e48ab/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=448e52d97c9b76600fd1ec29c8159391329e48ab", "patch": "@@ -618,6 +618,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         } else {\n             assert!(value.is_none(), \"`return` and `break` should have a destination\");\n+            // `continue` statements generate no MIR statement with the `continue` statement's Span,\n+            // and the `InstrumentCoverage` statement will have no way to generate a coverage\n+            // code region for the `continue` statement, unless we add a dummy `Assign` here:\n+            let mut local_decl = LocalDecl::new(self.tcx.mk_unit(), span);\n+            local_decl = local_decl.immutable();\n+            let temp = self.local_decls.push(local_decl);\n+            let temp_place = Place::from(temp);\n+            self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(temp) });\n+            self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);\n+            self.cfg.push(block, Statement { source_info, kind: StatementKind::StorageDead(temp) });\n         }\n \n         let region_scope = self.scopes.breakable_scopes[break_index].region_scope;"}, {"sha": "f6120447017d9a5a570d2bc39018524c7e220376", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=448e52d97c9b76600fd1ec29c8159391329e48ab", "patch": "@@ -8,6 +8,7 @@ fn main() -> () {\n     let mut _4: !;                       // in scope 0 at $DIR/loop_test.rs:13:5: 16:6\n     let mut _5: ();                      // in scope 0 at $DIR/loop_test.rs:6:1: 17:2\n     let _6: i32;                         // in scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+    let _7: ();                          // in scope 0 at $DIR/loop_test.rs:15:9: 15:17\n     scope 1 {\n         debug x => _6;                   // in scope 1 at $DIR/loop_test.rs:14:13: 14:14\n     }\n@@ -42,6 +43,9 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n         FakeRead(ForLet(None), _6);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n+        StorageLive(_7);                 // scope 1 at $DIR/loop_test.rs:15:9: 15:17\n+        _7 = const ();                   // scope 1 at $DIR/loop_test.rs:15:9: 15:17\n+        StorageDead(_7);                 // scope 1 at $DIR/loop_test.rs:15:9: 15:17\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n         goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n     }"}, {"sha": "28e0f1953e0499ac762619f1a084ccc42ea2b72b", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.continue.txt", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.continue.txt", "raw_url": "https://github.com/rust-lang/rust/raw/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.continue.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.continue.txt?ref=448e52d97c9b76600fd1ec29c8159391329e48ab", "patch": "@@ -0,0 +1,75 @@\n+    1|       |#![allow(unused_assignments, unused_variables)]\n+    2|       |\n+    3|      1|fn main() {\n+    4|      1|    let is_true = std::env::args().len() == 1;\n+    5|      1|\n+    6|      1|    let mut x = 0;\n+    7|     11|    for _ in 0..10 {\n+                      ^10\n+    8|     10|        match is_true {\n+    9|       |            true => {\n+   10|     10|                continue;\n+   11|       |            }\n+   12|      0|            _ => {\n+   13|      0|                x = 1;\n+   14|      0|            }\n+   15|      0|        }\n+   16|      0|        x = 3;\n+   17|       |    }\n+   18|     11|    for _ in 0..10 {\n+                      ^10\n+   19|     10|        match is_true {\n+   20|      0|            false => {\n+   21|      0|                x = 1;\n+   22|      0|            }\n+   23|       |            _ => {\n+   24|     10|                continue;\n+   25|       |            }\n+   26|       |        }\n+   27|      0|        x = 3;\n+   28|       |    }\n+   29|     11|    for _ in 0..10 {\n+                      ^10\n+   30|     10|        match is_true {\n+   31|     10|            true => {\n+   32|     10|                x = 1;\n+   33|     10|            }\n+   34|       |            _ => {\n+   35|      0|                continue;\n+   36|       |            }\n+   37|       |        }\n+   38|     10|        x = 3;\n+   39|       |    }\n+   40|     11|    for _ in 0..10 {\n+                      ^10\n+   41|     10|        if is_true {\n+   42|     10|            continue;\n+   43|      0|        }\n+   44|      0|        x = 3;\n+   45|       |    }\n+   46|     11|    for _ in 0..10 {\n+                      ^10\n+   47|     10|        match is_true {\n+   48|      0|            false => {\n+   49|      0|                x = 1;\n+   50|      0|            }\n+   51|     10|            _ => {\n+   52|     10|                let _ = x;\n+   53|     10|            }\n+   54|       |        }\n+   55|     10|        x = 3;\n+   56|       |    }\n+   57|      1|    for _ in 0..10 {\n+   58|      1|        match is_true {\n+   59|      0|            false => {\n+   60|      0|                x = 1;\n+   61|      0|            }\n+   62|       |            _ => {\n+   63|      1|                break;\n+   64|       |            }\n+   65|       |        }\n+   66|      0|        x = 3;\n+   67|       |    }\n+   68|       |    let _ = x;\n+   69|      1|}\n+"}, {"sha": "f5beb9ef24a0e4b355772651115ce519a316b16f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=448e52d97c9b76600fd1ec29c8159391329e48ab", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}"}, {"sha": "624aa98341b80c61ec28ed702991239ed82386e5", "filename": "src/test/run-make-fulldeps/coverage/continue.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcontinue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/448e52d97c9b76600fd1ec29c8159391329e48ab/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcontinue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcontinue.rs?ref=448e52d97c9b76600fd1ec29c8159391329e48ab", "patch": "@@ -0,0 +1,69 @@\n+#![allow(unused_assignments, unused_variables)]\n+\n+fn main() {\n+    let is_true = std::env::args().len() == 1;\n+\n+    let mut x = 0;\n+    for _ in 0..10 {\n+        match is_true {\n+            true => {\n+                continue;\n+            }\n+            _ => {\n+                x = 1;\n+            }\n+        }\n+        x = 3;\n+    }\n+    for _ in 0..10 {\n+        match is_true {\n+            false => {\n+                x = 1;\n+            }\n+            _ => {\n+                continue;\n+            }\n+        }\n+        x = 3;\n+    }\n+    for _ in 0..10 {\n+        match is_true {\n+            true => {\n+                x = 1;\n+            }\n+            _ => {\n+                continue;\n+            }\n+        }\n+        x = 3;\n+    }\n+    for _ in 0..10 {\n+        if is_true {\n+            continue;\n+        }\n+        x = 3;\n+    }\n+    for _ in 0..10 {\n+        match is_true {\n+            false => {\n+                x = 1;\n+            }\n+            _ => {\n+                let _ = x;\n+            }\n+        }\n+        x = 3;\n+    }\n+    for _ in 0..10 {\n+        match is_true {\n+            false => {\n+                x = 1;\n+            }\n+            _ => {\n+                break;\n+            }\n+        }\n+        x = 3;\n+    }\n+    let _ = x;\n+}"}]}