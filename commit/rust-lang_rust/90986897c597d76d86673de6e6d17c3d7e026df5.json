{"sha": "90986897c597d76d86673de6e6d17c3d7e026df5", "node_id": "C_kwDOAAsO6NoAKDkwOTg2ODk3YzU5N2Q3NmQ4NjY3M2RlNmU2ZDE3YzNkN2UwMjZkZjU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-18T02:48:42Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-18T17:16:01Z"}, "message": "rustdoc: Box `ty` field of `GenericParamDefKind::Const`\n\nThis cuts the size of `GenericParamDef` in half, from 104 bytes to 56\nbytes. I think the extra indirection should be worth the size savings.", "tree": {"sha": "0a48eda64649a7c22c8eaca730170d58bfddbc1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a48eda64649a7c22c8eaca730170d58bfddbc1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90986897c597d76d86673de6e6d17c3d7e026df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90986897c597d76d86673de6e6d17c3d7e026df5", "html_url": "https://github.com/rust-lang/rust/commit/90986897c597d76d86673de6e6d17c3d7e026df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90986897c597d76d86673de6e6d17c3d7e026df5/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b52a633e46dad4fe1bc99c4fa9794225bff3106", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b52a633e46dad4fe1bc99c4fa9794225bff3106", "html_url": "https://github.com/rust-lang/rust/commit/9b52a633e46dad4fe1bc99c4fa9794225bff3106"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "075efd29b5969839251e8f3cf70a4a109c730f69", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90986897c597d76d86673de6e6d17c3d7e026df5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90986897c597d76d86673de6e6d17c3d7e026df5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=90986897c597d76d86673de6e6d17c3d7e026df5", "patch": "@@ -430,7 +430,7 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,\n-                    ty: cx.tcx.type_of(self.def_id).clean(cx),\n+                    ty: Box::new(cx.tcx.type_of(self.def_id).clean(cx)),\n                     default: match has_default {\n                         true => Some(Box::new(cx.tcx.const_param_default(self.def_id).to_string())),\n                         false => None,\n@@ -470,7 +470,7 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n-                    ty: ty.clean(cx),\n+                    ty: Box::new(ty.clean(cx)),\n                     default: default.map(|ct| {\n                         let def_id = cx.tcx.hir().local_def_id(ct.hir_id);\n                         Box::new(ty::Const::from_anon_const(cx.tcx, def_id).to_string())"}, {"sha": "98bb32ed8d93b0edce54c5f0ce4a7f51af67b689", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90986897c597d76d86673de6e6d17c3d7e026df5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90986897c597d76d86673de6e6d17c3d7e026df5/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=90986897c597d76d86673de6e6d17c3d7e026df5", "patch": "@@ -1224,7 +1224,7 @@ crate enum GenericParamDefKind {\n     },\n     Const {\n         did: DefId,\n-        ty: Type,\n+        ty: Box<Type>,\n         default: Option<Box<String>>,\n     },\n }\n@@ -1240,7 +1240,7 @@ impl GenericParamDefKind {\n     crate fn get_type(&self) -> Option<Type> {\n         match self {\n             GenericParamDefKind::Type { default, .. } => default.as_deref().cloned(),\n-            GenericParamDefKind::Const { ty, .. } => Some(ty.clone()),\n+            GenericParamDefKind::Const { ty, .. } => Some((&**ty).clone()),\n             GenericParamDefKind::Lifetime { .. } => None,\n         }\n     }\n@@ -1254,7 +1254,7 @@ crate struct GenericParamDef {\n \n // `GenericParamDef` is used in many places. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericParamDef, 104);\n+rustc_data_structures::static_assert_size!(GenericParamDef, 56);\n \n impl GenericParamDef {\n     crate fn is_synthetic_type_param(&self) -> bool {"}, {"sha": "924275dc1858885bd7e7a2cb6d6ef148d101479d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90986897c597d76d86673de6e6d17c3d7e026df5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90986897c597d76d86673de6e6d17c3d7e026df5/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=90986897c597d76d86673de6e6d17c3d7e026df5", "patch": "@@ -333,7 +333,7 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 default: default.map(|x| (*x).into_tcx(tcx)),\n             },\n             Const { did: _, ty, default } => {\n-                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default: default.map(|x| *x) }\n+                GenericParamDefKind::Const { ty: (*ty).into_tcx(tcx), default: default.map(|x| *x) }\n             }\n         }\n     }"}]}