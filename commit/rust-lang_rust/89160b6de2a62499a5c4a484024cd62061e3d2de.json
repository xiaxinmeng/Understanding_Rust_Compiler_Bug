{"sha": "89160b6de2a62499a5c4a484024cd62061e3d2de", "node_id": "C_kwDOAAsO6NoAKDg5MTYwYjZkZTJhNjI0OTlhNWM0YTQ4NDAyNGNkNjIwNjFlM2QyZGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T08:11:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T08:11:41Z"}, "message": "Auto merge of #10487 - nyurik:readme-fixes, r=dswij\n\nGramar, and spelin kleanup\n\nA few minor cleanups in various markdown files, mostly focusing on spelling and ignoring non-compilable codeblocks. Also a few markdown tables, etc.\n\nP.S. I'm no grammar expert, do take with a grain of salt.\n\nchangelog: none", "tree": {"sha": "c873b9b3467bd46e2683d5eb5e8eaed27f405c04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c873b9b3467bd46e2683d5eb5e8eaed27f405c04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89160b6de2a62499a5c4a484024cd62061e3d2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89160b6de2a62499a5c4a484024cd62061e3d2de", "html_url": "https://github.com/rust-lang/rust/commit/89160b6de2a62499a5c4a484024cd62061e3d2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89160b6de2a62499a5c4a484024cd62061e3d2de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d43714a1016c13851338a7e56f5c9de9455815e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d43714a1016c13851338a7e56f5c9de9455815e7", "html_url": "https://github.com/rust-lang/rust/commit/d43714a1016c13851338a7e56f5c9de9455815e7"}, {"sha": "41b367fa5f0127ed7d245f517aaed9b8f4855974", "url": "https://api.github.com/repos/rust-lang/rust/commits/41b367fa5f0127ed7d245f517aaed9b8f4855974", "html_url": "https://github.com/rust-lang/rust/commit/41b367fa5f0127ed7d245f517aaed9b8f4855974"}], "stats": {"total": 150, "additions": 75, "deletions": 75}, "files": [{"sha": "85798e0e80c15ea5a2abaff1c5dcbaeb5883aaa9", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -11,7 +11,7 @@ Lints are divided into categories, each with a default [lint level](https://doc.\n You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category.\n \n | Category              | Description                                                                         | Default level |\n-| --------------------- | ----------------------------------------------------------------------------------- | ------------- |\n+|-----------------------|-------------------------------------------------------------------------------------|---------------|\n | `clippy::all`         | all lints that are on by default (correctness, suspicious, style, complexity, perf) | **warn/deny** |\n | `clippy::correctness` | code that is outright wrong or useless                                              | **deny**      |\n | `clippy::suspicious`  | code that is most likely wrong or useless                                           | **warn**      |\n@@ -130,7 +130,7 @@ for example.\n \n You can add Clippy to Travis CI in the same way you use it locally:\n \n-```yml\n+```yaml\n language: rust\n rust:\n   - stable\n@@ -253,7 +253,7 @@ rust-version = \"1.30\"\n \n The MSRV can also be specified as an attribute, like below.\n \n-```rust\n+```rust,ignore\n #![feature(custom_inner_attributes)]\n #![clippy::msrv = \"1.30.0\"]\n "}, {"sha": "3b6270962680efdf48033a12083986de2fec4cf8", "filename": "book/src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FREADME.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -14,7 +14,7 @@ much Clippy is supposed to ~~annoy~~ help you by changing the lint level by\n category.\n \n | Category              | Description                                                                         | Default level |\n-| --------------------- | ----------------------------------------------------------------------------------- | ------------- |\n+|-----------------------|-------------------------------------------------------------------------------------|---------------|\n | `clippy::all`         | all lints that are on by default (correctness, suspicious, style, complexity, perf) | **warn/deny** |\n | `clippy::correctness` | code that is outright wrong or useless                                              | **deny**      |\n | `clippy::suspicious`  | code that is most likely wrong or useless                                           | **warn**      |"}, {"sha": "4947d3d12262439cb0753a4ed5c409933f05290c", "filename": "book/src/configuration.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -3,7 +3,7 @@\n > **Note:** The configuration file is unstable and may be deprecated in the future.\n \n Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a\n-basic `variable = value` mapping eg.\n+basic `variable = value` mapping e.g.\n \n ```toml\n avoid-breaking-exported-api = false\n@@ -60,7 +60,7 @@ And to warn on `lint_name`, run\n cargo clippy -- -W clippy::lint_name\n ```\n \n-This also works with lint groups. For example you can run Clippy with warnings for all lints enabled:\n+This also works with lint groups. For example, you can run Clippy with warnings for all lints enabled:\n \n ```terminal\n cargo clippy -- -W clippy::pedantic\n@@ -84,7 +84,7 @@ msrv = \"1.30.0\"\n \n The MSRV can also be specified as an attribute, like below.\n \n-```rust\n+```rust,ignore\n #![feature(custom_inner_attributes)]\n #![clippy::msrv = \"1.30.0\"]\n \n@@ -96,7 +96,7 @@ fn main() {\n You can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\n is equivalent to `msrv = 1.30.0`.\n \n-Note: `custom_inner_attributes` is an unstable feature so it has to be enabled explicitly.\n+Note: `custom_inner_attributes` is an unstable feature, so it has to be enabled explicitly.\n \n Lints that recognize this configuration option can be\n found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)"}, {"sha": "616e6d182b729d5d97d8402d283ea12b3f270480", "filename": "book/src/development/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2FREADME.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -5,7 +5,7 @@ making Clippy better by contributing to it. In that case, welcome to the\n project!\n \n > _Note:_ If you're just interested in using Clippy, there's nothing to see from\n-> this point onward and you should return to one of the earlier chapters.\n+> this point onward, and you should return to one of the earlier chapters.\n \n ## Getting started\n "}, {"sha": "3f4088e74eaf7e573b7053c0113e4e6f78c1cc82", "filename": "book/src/development/adding_lints.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -24,7 +24,7 @@ because that's clearly a non-descriptive name.\n   - [Lint passes](#lint-passes)\n   - [Emitting a lint](#emitting-a-lint)\n   - [Adding the lint logic](#adding-the-lint-logic)\n-  - [Specifying the lint's minimum supported Rust version (MSRV)](#specifying-the-lints-minimum-supported-rust-version-msrv)\n+  - [Specifying the lint's minimum supported Rust version (MSRV)](#specifying-the-lints-minimum-supported-rust-version--msrv-)\n   - [Author lint](#author-lint)\n   - [Print HIR lint](#print-hir-lint)\n   - [Documentation](#documentation)\n@@ -275,7 +275,7 @@ When declaring a new lint by hand and `cargo dev update_lints` is used, the lint\n pass may have to be registered manually in the `register_plugins` function in\n `clippy_lints/src/lib.rs`:\n \n-```rust\n+```rust,ignore\n store.register_early_pass(|| Box::new(foo_functions::FooFunctions));\n ```\n \n@@ -301,7 +301,7 @@ either [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass].\n \n In short, the `LateLintPass` has access to type information while the\n `EarlyLintPass` doesn't. If you don't need access to type information, use the\n-`EarlyLintPass`. The `EarlyLintPass` is also faster. However linting speed\n+`EarlyLintPass`. The `EarlyLintPass` is also faster. However, linting speed\n hasn't really been a concern with Clippy so far.\n \n Since we don't need type information for checking the function name, we used\n@@ -318,7 +318,7 @@ implementation of the lint logic.\n \n Let's start by implementing the `EarlyLintPass` for our `FooFunctions`:\n \n-```rust\n+```rust,ignore\n impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         // TODO: Emit lint here\n@@ -337,10 +337,10 @@ variety of lint emission functions. They can all be found in\n [`clippy_utils/src/diagnostics.rs`][diagnostics].\n \n `span_lint_and_help` seems most appropriate in this case. It allows us to\n-provide an extra help message and we can't really suggest a better name\n+provide an extra help message, and we can't really suggest a better name\n automatically. This is how it looks:\n \n-```rust\n+```rust,ignore\n impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, span: Span, _: NodeId) {\n         span_lint_and_help(\n@@ -479,7 +479,7 @@ the value from `clippy.toml`. This can be accounted for using the\n `extract_msrv_attr!(LintContext)` macro and passing\n `LateContext`/`EarlyContext`.\n \n-```rust\n+```rust,ignore\n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         ...\n@@ -493,7 +493,7 @@ the lint's test file, `tests/ui/manual_strip.rs` in this example. It should\n have a case for the version below the MSRV and one with the same contents but\n for the MSRV version itself.\n \n-```rust\n+```rust,ignore\n ...\n \n #[clippy::msrv = \"1.44\"]\n@@ -524,7 +524,7 @@ define_Conf! {\n \n If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n-work for all of the Rust syntax, but can give a good starting point.\n+work for all the Rust syntax, but can give a good starting point.\n \n The quickest way to use it, is the [Rust playground:\n play.rust-lang.org][author_example]. Put the code you want to lint into the\n@@ -617,7 +617,7 @@ output in the `stdout` part.\n \n ## PR Checklist\n \n-Before submitting your PR make sure you followed all of the basic requirements:\n+Before submitting your PR make sure you followed all the basic requirements:\n \n <!-- Sync this with `.github/PULL_REQUEST_TEMPLATE` -->\n \n@@ -637,7 +637,7 @@ for some users. Adding a configuration is done in the following steps:\n \n 1. Adding a new configuration entry to [`clippy_lints::utils::conf`] like this:\n \n-   ```rust\n+   ```rust,ignore\n    /// Lint: LINT_NAME.\n    ///\n    /// <The configuration field doc comment>\n@@ -690,7 +690,7 @@ for some users. Adding a configuration is done in the following steps:\n    configuration value is now cloned or copied into a local value that is then\n    passed to the impl struct like this:\n \n-   ```rust\n+   ```rust,ignore\n    // Default generated registration:\n    store.register_*_pass(|| box module::StructName);\n "}, {"sha": "b07d3de7187e546fb316d088d42855029e521e3e", "filename": "book/src/development/basics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fbasics.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -125,7 +125,7 @@ We follow a rustc no merge-commit policy. See\n ## Common Abbreviations\n \n | Abbreviation | Meaning                                |\n-| ------------ | -------------------------------------- |\n+|--------------|----------------------------------------|\n | UB           | Undefined Behavior                     |\n | FP           | False Positive                         |\n | FN           | False Negative                         |"}, {"sha": "09171d86a2097965e286812d951c73fc6c9dddb2", "filename": "book/src/development/common_tools_writing_lints.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -3,7 +3,7 @@\n You may need following tooltips to catch up with common operations.\n \n - [Common tools for writing lints](#common-tools-for-writing-lints)\n-  - [Retrieving the type of an expression](#retrieving-the-type-of-an-expression)\n+  - [Retrieving the type of expression](#retrieving-the-type-of-expression)\n   - [Checking if an expr is calling a specific method](#checking-if-an-expr-is-calling-a-specific-method)\n   - [Checking for a specific type](#checking-for-a-specific-type)\n   - [Checking if a type implements a specific trait](#checking-if-a-type-implements-a-specific-trait)\n@@ -16,7 +16,7 @@ Useful Rustc dev guide links:\n - [Type checking](https://rustc-dev-guide.rust-lang.org/type-checking.html)\n - [Ty module](https://rustc-dev-guide.rust-lang.org/ty.html)\n \n-## Retrieving the type of an expression\n+## Retrieving the type of expression\n \n Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for\n example to answer following questions:\n@@ -45,7 +45,7 @@ impl LateLintPass<'_> for MyStructLint {\n }\n ```\n \n-Similarly in [`TypeckResults`][TypeckResults] methods, you have the\n+Similarly, in [`TypeckResults`][TypeckResults] methods, you have the\n [`pat_ty()`][pat_ty] method to retrieve a type from a pattern.\n \n Two noticeable items here:\n@@ -192,7 +192,7 @@ functions to deal with macros:\n - `span.from_expansion()`: detects if a span is from macro expansion or\n   desugaring. Checking this is a common first step in a lint.\n \n-   ```rust\n+   ```rust,ignore\n    if expr.span.from_expansion() {\n        // just forget it\n        return;\n@@ -203,11 +203,11 @@ functions to deal with macros:\n   if so, which macro call expanded it. It is sometimes useful to check if the\n   context of two spans are equal.\n \n-  ```rust\n+  ```rust,ignore\n   // expands to `1 + 0`, but don't lint\n   1 + mac!()\n   ```\n-  ```rust\n+  ```rust,ignore\n   if left.span.ctxt() != right.span.ctxt() {\n       // the coder most likely cannot modify this expression\n       return;\n@@ -246,7 +246,7 @@ functions to deal with macros:\n   `macro_rules!` with `a == $b`, `$b` is expanded to some expression with a\n   different context from `a`.\n \n-   ```rust\n+   ```rust,ignore\n    macro_rules! m {\n        ($a:expr, $b:expr) => {\n            if $a.is_some() {"}, {"sha": "de5de4bebaa91ef8bb0dc079a5a480ea22440f44", "filename": "book/src/development/infrastructure/book.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -13,7 +13,7 @@ guide to Clippy that you're reading right now. The Clippy book is formatted with\n While not strictly necessary since the book source is simply Markdown text\n files, having mdBook locally will allow you to build, test and serve the book\n locally to view changes before you commit them to the repository. You likely\n-already have `cargo` installed, so the easiest option is to simply:\n+already have `cargo` installed, so the easiest option is to:\n \n ```shell\n cargo install mdbook\n@@ -26,7 +26,7 @@ instructions for other options.\n \n The book's\n [src](https://github.com/rust-lang/rust-clippy/tree/master/book/src)\n-directory contains all of the markdown files used to generate the book. If you\n+directory contains all the markdown files used to generate the book. If you\n want to see your changes in real time, you can use the mdBook `serve` command to\n run a web server locally that will automatically update changes as they are\n made. From the top level of your `rust-clippy` directory:"}, {"sha": "df9b1bbe18f326a385bf53c0c0c58be6200ce0c6", "filename": "book/src/development/infrastructure/changelog_update.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -101,7 +101,7 @@ Look for the [`beta-accepted`] label and make sure to also include the PRs with\n that label in the changelog. If you can, remove the `beta-accepted` labels\n **after** the changelog PR was merged.\n \n-> _Note:_ Some of those PRs might even got backported to the previous `beta`.\n+> _Note:_ Some of those PRs might even get backported to the previous `beta`.\n > Those have to be included in the changelog of the _previous_ release.\n \n ### 4. Update `clippy::version` attributes"}, {"sha": "98fabf8e89aee9e66dd3ed51c0bf13b9010556f5", "filename": "book/src/development/infrastructure/release.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -44,7 +44,7 @@ $ git push origin backport_remerge  # This can be pushed to your fork\n ```\n \n After this, open a PR to the master branch. In this PR, the commit hash of the\n-`HEAD` of the `beta` branch must exists. In addition to that, no files should be\n+`HEAD` of the `beta` branch must exist. In addition to that, no files should be\n changed by this PR.\n \n ## Update the `beta` branch"}, {"sha": "7fb127c6284f98520020ad3943116a4b86df70ab", "filename": "book/src/development/infrastructure/sync.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -47,7 +47,7 @@ sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subt\n \n > _Note:_ If you are a Debian user, `dash` is the shell used by default for\n > scripts instead of `sh`. This shell has a hardcoded recursion limit set to\n-> 1000. In order to make this process work, you need to force the script to run\n+> 1,000. In order to make this process work, you need to force the script to run\n > `bash` instead. You can do this by editing the first line of the `git-subtree`\n > script and changing `sh` to `bash`.\n \n@@ -71,10 +71,10 @@ $ git remote add clippy-local /path/to/rust-clippy\n \n ## Performing the sync from [`rust-lang/rust`] to Clippy\n \n-Here is a TL;DR version of the sync process (all of the following commands have\n+Here is a TL;DR version of the sync process (all the following commands have\n to be run inside the `rust` directory):\n \n-1. Clone the [`rust-lang/rust`] repository or make sure it is up to date.\n+1. Clone the [`rust-lang/rust`] repository or make sure it is up-to-date.\n 2. Checkout the commit from the latest available nightly. You can get it using\n    `rustup check`.\n 3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n@@ -107,7 +107,7 @@ to be run inside the `rust` directory):\n \n ## Performing the sync from Clippy to [`rust-lang/rust`]\n \n-All of the following commands have to be run inside the `rust` directory.\n+All the following commands have to be run inside the `rust` directory.\n \n 1. Make sure you have checked out the latest `master` of `rust-lang/rust`.\n 2. Sync the `rust-lang/rust-clippy` master to the rust-copy of Clippy:"}, {"sha": "059c22ce1ce8c003b02e4023b39945a57f7b18d9", "filename": "book/src/development/proposals/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -6,6 +6,6 @@ or around Clippy in the long run.\n Besides adding more and more lints and improve the lints that Clippy already\n has, Clippy is also interested in making the experience of its users, developers\n and maintainers better over time. Projects that address bigger picture things\n-like this usually take more time and it is useful to have a proposal for those\n+like this usually take more time, and it is useful to have a proposal for those\n first. This is the place where such proposals are collected, so that we can\n refer to them when working on them."}, {"sha": "4406616bbb613c4faee3aba01b832bc28a621e4d", "filename": "book/src/development/proposals/roadmap-2021.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -52,8 +52,8 @@ In the following, plans to improve the usability are covered.\n \n #### No Output After `cargo check`\n \n-Currently when `cargo clippy` is run after `cargo check`, it does not produce\n-any output. This is especially problematic since `rust-analyzer` is on the rise\n+Currently, when `cargo clippy` is run after `cargo check`, it does not produce\n+any output. This is especially problematic since `rust-analyzer` is on the rise,\n and it uses `cargo check` for checking code. A fix is already implemented, but\n it still has to be pushed over the finish line. This also includes the\n stabilization of the `cargo clippy --fix` command or the support of multi-span\n@@ -221,7 +221,7 @@ regarding the user facing issues.\n \n Rust's roadmap process was established by [RFC 1728] in 2016. Since then every\n year a roadmap was published, that defined the bigger plans for the coming\n-years. This years roadmap can be found [here][Rust Roadmap 2021].\n+years. This year roadmap can be found [here][Rust Roadmap 2021].\n \n [RFC 1728]: https://rust-lang.github.io/rfcs/1728-north-star.html\n "}, {"sha": "36d722609f4ace2bf6bd2a136f6cf713ff7e7d51", "filename": "book/src/development/proposals/syntax-tree-patterns.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -16,7 +16,7 @@ lints. For non-trivial lints, it often requires nested pattern matching of AST /\n HIR nodes. For example, testing that an expression is a boolean literal requires\n the following checks:\n \n-```rust\n+```rust,ignore\n if let ast::ExprKind::Lit(lit) = &expr.node {\n     if let ast::LitKind::Bool(_) = &lit.node {\n         ...\n@@ -28,7 +28,7 @@ Writing this kind of matching code quickly becomes a complex task and the\n resulting code is often hard to comprehend. The code below shows a simplified\n version of the pattern matching required by the `collapsible_if` lint:\n \n-```rust\n+```rust,ignore\n // simplified version of the collapsible_if lint\n if let ast::ExprKind::If(check, then, None) = &expr.node {\n     if then.stmts.len() == 1 {\n@@ -111,7 +111,7 @@ expressions that are boolean literals with value `false`.\n \n The pattern can then be used to implement lints in the following way:\n \n-```rust\n+```rust,ignore\n ...\n \n impl EarlyLintPass for MyAwesomeLint {\n@@ -346,7 +346,7 @@ pattern!{\n one could get references to the nodes that matched the subpatterns in the\n following way:\n \n-```rust\n+```rust,ignore\n ...\n fn check_expr(expr: &syntax::ast::Expr) {\n     if let Some(result) = my_pattern(expr) {\n@@ -372,7 +372,7 @@ matches arrays that consist of any number of literal expressions. Because those\n expressions are named `foo`, the result struct contains a `foo` attribute which\n is a vector of expressions:\n \n-```rust\n+```rust,ignore\n ...\n if let Some(result) = my_pattern_seq(expr) {\n     result.foo        // type: Vec<&syntax::ast::Expr>\n@@ -394,7 +394,7 @@ In the pattern above, the `bar` name is only defined if the pattern matches a\n boolean literal. If it matches an integer literal, the name isn't set. To\n account for this, the result struct's `bar` attribute is an option type:\n \n-```rust\n+```rust,ignore\n ...\n if let Some(result) = my_pattern_alt(expr) {\n     result.bar        // type: Option<&bool>\n@@ -404,7 +404,7 @@ if let Some(result) = my_pattern_alt(expr) {\n It's also possible to use a name in multiple alternation branches if they have\n compatible types:\n \n-```rust\n+```rust,ignore\n pattern!{\n     // matches if expression is a boolean or integer literal\n     my_pattern_mult: Expr =\n@@ -519,7 +519,7 @@ The `Alt`, `Seq` and `Opt` structs look like these:\n > Note: The current implementation can be found\n > [here](https://github.com/fkohlgrueber/pattern-matching/blob/dfb3bc9fbab69cec7c91e72564a63ebaa2ede638/pattern-match/src/matchers.rs#L35-L60).\n \n-```rust\n+```rust,ignore\n pub enum Alt<T> {\n     Any,\n     Elmt(Box<T>),\n@@ -580,7 +580,7 @@ implementations is the `IsMatch` trait. It defines how to match *PatternTree*\n nodes against specific syntax tree nodes. A simplified implementation of the\n `IsMatch` trait is shown below:\n \n-```rust\n+```rust,ignore\n pub trait IsMatch<O> {\n     fn is_match(&self, other: &'o O) -> bool;\n }\n@@ -619,7 +619,7 @@ approach (matching against the coarse pattern first and checking for additional\n properties later) might be slower than the current practice of checking for\n structure and additional properties in one pass. For example, the following lint\n \n-```rust\n+```rust,ignore\n pattern!{\n     pat_if_without_else: Expr =\n         If(\n@@ -644,7 +644,7 @@ first matches against the pattern and then checks that the `then` block doesn't\n start with a comment. Using clippy's current approach, it's possible to check\n for these conditions earlier:\n \n-```rust\n+```rust,ignore\n fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if_chain! {\n         if let ast::ExprKind::If(ref check, ref then, None) = expr.node;\n@@ -708,7 +708,7 @@ is similar to actual Rust syntax (probably like the `quote!` macro). For\n example, a pattern that matches `if` expressions that have `false` in their\n condition could look like this:\n \n-```rust\n+```rust,ignore\n if false {\n     #[*]\n }\n@@ -742,7 +742,7 @@ affects the structure of the resulting AST. `1 + 0 + 0` is parsed as `(1 + 0) +\n Another example of a problem would be named submatches. Take a look at this\n pattern:\n \n-```rust\n+```rust,ignore\n fn test() {\n     1 #foo\n }\n@@ -862,7 +862,7 @@ op b` and recommends changing it to `a op= b` requires that both occurrences of\n `a` are the same. Using `=#...` as syntax for backreferences, the lint could be\n implemented like this:\n \n-```rust\n+```rust,ignore\n pattern!{\n     assign_op_pattern: Expr =\n         Assign(_#target, Binary(_, =#target, _)"}, {"sha": "d54fff9deba1847f436599dcf58d1580fa06bc20", "filename": "book/src/installation.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Finstallation.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Finstallation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finstallation.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -17,8 +17,8 @@ $ rustup component add clippy [--toolchain=<name>]\n \n ## From Source\n \n-Take a look at the [Basics] chapter in the Clippy developer guide to find step\n-by step instructions on how to build and install Clippy from source.\n+Take a look at the [Basics] chapter in the Clippy developer guide to find step-by-step\n+instructions on how to build and install Clippy from source.\n \n [Basics]: development/basics.md#install-from-source\n [Usage]: usage.md"}, {"sha": "78e1a55cff32e5ade599b92f3ee8cdd254e6a308", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -195,7 +195,7 @@ The maximum cognitive complexity a function can have\n ### disallowed-names\n The list of disallowed names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n-default configuration of Clippy. By default any configuration will replace the default value.\n+default configuration of Clippy. By default, any configuration will replace the default value.\n \n **Default Value:** `[\"foo\", \"baz\", \"quux\"]` (`Vec<String>`)\n \n@@ -205,7 +205,7 @@ default configuration of Clippy. By default any configuration will replace the d\n ### doc-valid-idents\n The list of words this lint should not consider as identifiers needing ticks. The value\n `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n-default configuration of Clippy. By default any configuraction will replace the default value. For example:\n+default configuration of Clippy. By default, any configuration will replace the default value. For example:\n * `doc-valid-idents = [\"ClipPy\"]` would replace the default list with `[\"ClipPy\"]`.\n * `doc-valid-idents = [\"ClipPy\", \"..\"]` would append `ClipPy` to the default list.\n \n@@ -415,7 +415,7 @@ For internal testing only, ignores the current `publish` settings in the Cargo m\n Enforce the named macros always use the braces specified.\n \n A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro\n-is could be used with a full path two `MacroMatcher`s have to be added one with the full path\n+could be used with a full path two `MacroMatcher`s have to be added one with the full path\n `crate_name::macro_name` and one with just the macro name.\n \n **Default Value:** `[]` (`Vec<crate::nonstandard_macro_braces::MacroMatcher>`)\n@@ -449,7 +449,7 @@ Whether to apply the raw pointer heuristic to determine if a type is `Send`.\n \n ### max-suggested-slice-pattern-length\n When Clippy suggests using a slice pattern, this is the maximum number of elements allowed in\n-the slice pattern that is suggested. If more elements would be necessary, the lint is suppressed.\n+the slice pattern that is suggested. If more elements are necessary, the lint is suppressed.\n For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n \n **Default Value:** `3` (`u64`)"}, {"sha": "442dc63914e9dafb8df2202369e8a88bab406662", "filename": "book/src/lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flints.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -17,7 +17,7 @@ The different lint groups were defined in the [Clippy 1.0 RFC].\n The `clippy::correctness` group is the only lint group in Clippy which lints are\n deny-by-default and abort the compilation when triggered. This is for good\n reason: If you see a `correctness` lint, it means that your code is outright\n-wrong or useless and you should try to fix it.\n+wrong or useless, and you should try to fix it.\n \n Lints in this category are carefully picked and should be free of false\n positives. So just `#[allow]`ing those lints is not recommended.\n@@ -41,7 +41,7 @@ simplify your code. It mostly focuses on code that can be written in a shorter\n and more readable way, while preserving the semantics.\n \n If you should see a complexity lint, it usually means that you can remove or\n-replace some code and it is recommended to do so. However, if you need the more\n+replace some code, and it is recommended to do so. However, if you need the more\n complex code for some expressiveness reason, it is recommended to allow\n complexity lints on a case-by-case basis.\n \n@@ -50,9 +50,9 @@ complexity lints on a case-by-case basis.\n The `clippy::perf` group gives you suggestions on how you can increase the\n performance of your code. Those lints are mostly about code that the compiler\n can't trivially optimize, but has to be written in a slightly different way to\n-make the optimizer's job easier.\n+make the optimizer job easier.\n \n-Perf lints are usually easy to apply and it is recommended to do so.\n+Perf lints are usually easy to apply, and it is recommended to do so.\n \n ## Style\n \n@@ -91,7 +91,7 @@ and your use case.\n \n Lints from this group will restrict you in some way. If you enable a restriction\n lint for your crate it is recommended to also fix code that this lint triggers\n-on. However, those lints are really strict by design and you might want to\n+on. However, those lints are really strict by design, and you might want to\n `#[allow]` them in some special cases, with a comment justifying that.\n \n ## Cargo"}, {"sha": "32084a9199b7327213fd04f5d0339d87b44166dc", "filename": "book/src/usage.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -19,7 +19,7 @@ cargo clippy\n ### Lint configuration\n \n The above command will run the default set of lints, which are included in the\n-lint group `clippy::all`. You might want to use even more lints or you might not\n+lint group `clippy::all`. You might want to use even more lints, or you may not\n agree with every Clippy lint, and for that there are ways to configure lint\n levels.\n \n@@ -98,7 +98,7 @@ other of Clippy's lint groups.\n You can configure lint levels in source code the same way you can configure\n `rustc` lints:\n \n-```rust\n+```rust,ignore\n #![allow(clippy::style)]\n \n #[warn(clippy::double_neg)]"}, {"sha": "f75a5cf7196a252d2e5d7f1507fa7859c0566cb7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -275,13 +275,13 @@ define_Conf! {\n     ///\n     /// The list of disallowed names to lint about. NB: `bar` is not here since it has legitimate uses. The value\n     /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n-    /// default configuration of Clippy. By default any configuration will replace the default value.\n+    /// default configuration of Clippy. By default, any configuration will replace the default value.\n     (disallowed_names: Vec<String> = super::DEFAULT_DISALLOWED_NAMES.iter().map(ToString::to_string).collect()),\n     /// Lint: DOC_MARKDOWN.\n     ///\n     /// The list of words this lint should not consider as identifiers needing ticks. The value\n     /// `\"..\"` can be used as part of the list to indicate, that the configured values should be appended to the\n-    /// default configuration of Clippy. By default any configuraction will replace the default value. For example:\n+    /// default configuration of Clippy. By default, any configuration will replace the default value. For example:\n     /// * `doc-valid-idents = [\"ClipPy\"]` would replace the default list with `[\"ClipPy\"]`.\n     /// * `doc-valid-idents = [\"ClipPy\", \"..\"]` would append `ClipPy` to the default list.\n     ///\n@@ -390,7 +390,7 @@ define_Conf! {\n     /// Enforce the named macros always use the braces specified.\n     ///\n     /// A `MacroMatcher` can be added like so `{ name = \"macro_name\", brace = \"(\" }`. If the macro\n-    /// is could be used with a full path two `MacroMatcher`s have to be added one with the full path\n+    /// could be used with a full path two `MacroMatcher`s have to be added one with the full path\n     /// `crate_name::macro_name` and one with just the macro name.\n     (standard_macro_braces: Vec<crate::nonstandard_macro_braces::MacroMatcher> = Vec::new()),\n     /// Lint: MISSING_ENFORCED_IMPORT_RENAMES.\n@@ -408,7 +408,7 @@ define_Conf! {\n     /// Lint: INDEX_REFUTABLE_SLICE.\n     ///\n     /// When Clippy suggests using a slice pattern, this is the maximum number of elements allowed in\n-    /// the slice pattern that is suggested. If more elements would be necessary, the lint is suppressed.\n+    /// the slice pattern that is suggested. If more elements are necessary, the lint is suppressed.\n     /// For example, `[_, _, _, e, ..]` is a slice pattern with 4 elements.\n     (max_suggested_slice_pattern_length: u64 = 3),\n     /// Lint: AWAIT_HOLDING_INVALID_TYPE."}, {"sha": "ffb99cde4f8690facf16da165cef8d8f802d3951", "filename": "etc/relicense/RELICENSE_DOCUMENTATION.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/etc%2Frelicense%2FRELICENSE_DOCUMENTATION.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/etc%2Frelicense%2FRELICENSE_DOCUMENTATION.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/etc%2Frelicense%2FRELICENSE_DOCUMENTATION.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -35,7 +35,7 @@ relicensing are archived on GitHub. We also have saved Wayback Machine copies of\n \n The usernames of commenters on these issues can be found in relicense_comments.txt\n \n-There are a couple people in relicense_comments.txt who are not found in contributors.txt:\n+There are a few people in relicense_comments.txt who are not found in contributors.txt:\n \n - @EpocSquadron has [made minor text contributions to the\n   README](https://github.com/rust-lang/rust-clippy/commits?author=EpocSquadron) which have since been overwritten, and\n@@ -55,7 +55,7 @@ There are a couple people in relicense_comments.txt who are not found in contrib\n   we rewrote (see below)\n \n \n-Two of these contributors had nonminor contributions (#2184, #427) requiring a rewrite, carried out in #3251\n+Two of these contributors had non-minor contributions (#2184, #427) requiring a rewrite, carried out in #3251\n ([archive](http://web.archive.org/web/20181005192411/https://github.com/rust-lang-nursery/rust-clippy/pull/3251),\n [screenshot](https://user-images.githubusercontent.com/1617736/46573515-5cb69580-c94b-11e8-86e5-b456452121b2.png))\n "}, {"sha": "faf3ce9093a21c29601ddc623ff3518188e6005a", "filename": "lintcheck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89160b6de2a62499a5c4a484024cd62061e3d2de/lintcheck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/89160b6de2a62499a5c4a484024cd62061e3d2de/lintcheck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FREADME.md?ref=89160b6de2a62499a5c4a484024cd62061e3d2de", "patch": "@@ -16,7 +16,7 @@ or\n cargo lintcheck\n ```\n \n-By default the logs will be saved into\n+By default, the logs will be saved into\n `lintcheck-logs/lintcheck_crates_logs.txt`.\n \n You can set a custom sources.toml by adding `--crates-toml custom.toml` or using"}]}