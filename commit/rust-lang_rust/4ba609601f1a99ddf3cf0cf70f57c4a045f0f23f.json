{"sha": "4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f", "node_id": "C_kwDOAAsO6NoAKDRiYTYwOTYwMWYxYTk5ZGRmM2NmMGNmNzBmNTdjNGEwNDVmMGYyM2Y", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-08T04:16:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-10T23:38:40Z"}, "message": "Tweak `NamedMatch` representation.\n\nThe `Lrc` isn't necessary, neither is the `SmallVec`. Performance is\nchanged negligibly, but the new code is simpler.", "tree": {"sha": "7e4dbf889e53196d6d1b64cf035612980de71e49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e4dbf889e53196d6d1b64cf035612980de71e49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f", "html_url": "https://github.com/rust-lang/rust/commit/4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482b25b321d06ee2b9e438e458ed41b691553736", "url": "https://api.github.com/repos/rust-lang/rust/commits/482b25b321d06ee2b9e438e458ed41b691553736", "html_url": "https://github.com/rust-lang/rust/commit/482b25b321d06ee2b9e438e458ed41b691553736"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "d26f80e82fcfebb5e46735c5d857f80b829c9e4d", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=4ba609601f1a99ddf3cf0cf70f57c4a045f0f23f", "patch": "@@ -81,22 +81,12 @@ use rustc_session::parse::ParseSess;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n-use smallvec::{smallvec, SmallVec};\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::symbol::Ident;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n-// One element is enough to cover 95-99% of vectors for most benchmarks. Also, vectors longer than\n-// one frequently have many elements, not just two or three.\n-type NamedMatchVec = SmallVec<[NamedMatch; 1]>;\n-\n-// This type is used a lot. Make sure it doesn't unintentionally get bigger.\n-#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(NamedMatchVec, 48);\n-\n /// A unit within a matcher that a `MatcherPos` can refer to. Similar to (and derived from)\n /// `mbe::TokenTree`, but designed specifically for fast and easy traversal during matching.\n /// Notable differences to `mbe::TokenTree`:\n@@ -221,7 +211,7 @@ struct MatcherPos {\n     /// with one element per metavar decl in the matcher. Each element records token trees matched\n     /// against the relevant metavar by the black box parser. An element will be a `MatchedSeq` if\n     /// the corresponding metavar decl is within a sequence.\n-    matches: Lrc<NamedMatchVec>,\n+    matches: Lrc<Vec<NamedMatch>>,\n }\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -246,18 +236,12 @@ impl MatcherPos {\n                 let mut curr = &mut matches[metavar_idx];\n                 for _ in 0..seq_depth - 1 {\n                     match curr {\n-                        MatchedSeq(seq) => {\n-                            let seq = Lrc::make_mut(seq);\n-                            curr = seq.last_mut().unwrap();\n-                        }\n+                        MatchedSeq(seq) => curr = seq.last_mut().unwrap(),\n                         _ => unreachable!(),\n                     }\n                 }\n                 match curr {\n-                    MatchedSeq(seq) => {\n-                        let seq = Lrc::make_mut(seq);\n-                        seq.push(m);\n-                    }\n+                    MatchedSeq(seq) => seq.push(m),\n                     _ => unreachable!(),\n                 }\n             }\n@@ -350,7 +334,7 @@ pub(super) fn count_metavar_decls(matcher: &[TokenTree]) -> usize {\n /// ```\n #[derive(Debug, Clone)]\n crate enum NamedMatch {\n-    MatchedSeq(Lrc<NamedMatchVec>),\n+    MatchedSeq(Vec<NamedMatch>),\n \n     // A metavar match of type `tt`.\n     MatchedTokenTree(rustc_ast::tokenstream::TokenTree),\n@@ -388,7 +372,7 @@ pub struct TtParser {\n \n     /// Pre-allocate an empty match array, so it can be cloned cheaply for macros with many rules\n     /// that have no metavars.\n-    empty_matches: Lrc<NamedMatchVec>,\n+    empty_matches: Lrc<Vec<NamedMatch>>,\n }\n \n impl TtParser {\n@@ -398,7 +382,7 @@ impl TtParser {\n             cur_mps: vec![],\n             next_mps: vec![],\n             bb_mps: vec![],\n-            empty_matches: Lrc::new(smallvec![]),\n+            empty_matches: Lrc::new(vec![]),\n         }\n     }\n \n@@ -452,11 +436,7 @@ impl TtParser {\n                 } => {\n                     // Install an empty vec for each metavar within the sequence.\n                     for metavar_idx in next_metavar..next_metavar + num_metavar_decls {\n-                        mp.push_match(\n-                            metavar_idx,\n-                            seq_depth,\n-                            MatchedSeq(self.empty_matches.clone()),\n-                        );\n+                        mp.push_match(metavar_idx, seq_depth, MatchedSeq(vec![]));\n                     }\n \n                     if op == KleeneOp::ZeroOrMore || op == KleeneOp::ZeroOrOne {"}]}