{"sha": "d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjkxN2E5ZDZkNmVlYmIzN2IxNmQ4OTZjZGVmOTk1M2NlMzRlMmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-05T08:45:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-05T08:45:48Z"}, "message": "fix for latest rustc", "tree": {"sha": "b546e435b3f31dab93bc58d1f55ddba067f29e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b546e435b3f31dab93bc58d1f55ddba067f29e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "html_url": "https://github.com/rust-lang/rust/commit/d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93e110f37058cced8042935db76e97ac67d7c450", "url": "https://api.github.com/repos/rust-lang/rust/commits/93e110f37058cced8042935db76e97ac67d7c450", "html_url": "https://github.com/rust-lang/rust/commit/93e110f37058cced8042935db76e97ac67d7c450"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "0680001291b772727b23919947ce6b72cc2929ab", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "patch": "@@ -1 +1 @@\n-a45743345659c775b01484574af2818c46a2cb03\n+11a51488f03405ea539a9fe84973ee972eaa7b96"}, {"sha": "37e5fe42c3de7829f71c77d48f87700ba12d3972", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "patch": "@@ -655,9 +655,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // This is `libc::pthread_key_t`.\n                 let key_type = args[0].layout.ty\n                     .builtin_deref(true)\n-                    .ok_or_else(|| err_ub!(Ub(format!(\n+                    .ok_or_else(|| err_ub_format!(\n                         \"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\"\n-                    ))))?\n+                    ))?\n                     .ty;\n                 let key_layout = this.layout_of(key_type)?;\n "}, {"sha": "c96869c80cee7c1c549a5294272bd435bcd4a793", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "patch": "@@ -44,7 +44,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"assume\" => {\n                 let cond = this.read_scalar(args[0])?.to_bool()?;\n                 if !cond {\n-                    throw_unsup!(AssumptionNotHeld);\n+                    throw_ub_format!(\"`assume` intrinsic called with `false`\");\n                 }\n             }\n \n@@ -316,9 +316,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     // Check if `b` is -1, which is the \"min_value / -1\" case.\n                     let minus1 = Scalar::from_int(-1, dest.layout.size);\n                     return Err(if b.to_scalar().unwrap() == minus1 {\n-                        err_ub!(Ub(format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")))\n+                        err_ub_format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")\n                     } else {\n-                        err_ub!(Ub(format!(\"exact_div: {:?} cannot be divided by {:?} without remainder\", *a, *b)))\n+                        err_ub_format!(\"exact_div: {:?} cannot be divided by {:?} without remainder\", *a, *b)\n                     }.into());\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;"}, {"sha": "d2190bd969e3d04575475fd691579123a60cae9e", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "patch": "@@ -158,7 +158,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 StackPopCleanup::None { cleanup: true },\n             )?;\n             let arg_local = this.frame().body.args_iter().next().ok_or_else(\n-                || err_ub!(Ub(format!(\"TLS dtor does not take enough arguments.\"))),\n+                || err_ub_format!(\"TLS dtor does not take enough arguments.\"),\n             )?;\n             let dest = this.local_place(arg_local)?;\n             this.write_scalar(ptr, dest)?;"}, {"sha": "01ed6ec225d204c23ad03ab0e3df18d2e0b63813", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "patch": "@@ -273,14 +273,14 @@ impl<'tcx> Stack {\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n                 if let Some(tag) = tag {\n-                    throw_ub_format!(\n+                    throw_ub!(UbExperimental(format!(\n                         \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n                         tag, item\n-                    );\n+                    )));\n                 } else {\n-                    throw_ub_format!(\n+                    throw_ub!(UbExperimental(format!(\n                         \"deallocating while item is protected: {:?}\", item\n-                    );\n+                    )));\n                 }\n             }\n         }\n@@ -299,7 +299,7 @@ impl<'tcx> Stack {\n \n         // Step 1: Find granting item.\n         let granting_idx = self.find_granting(access, tag)\n-            .ok_or_else(|| err_ub!(Ub(format!(\n+            .ok_or_else(|| err_ub!(UbExperimental(format!(\n                 \"no item granting {} to tag {:?} found in borrow stack\",\n                 access, tag,\n             ))))?;\n@@ -346,7 +346,7 @@ impl<'tcx> Stack {\n     ) -> InterpResult<'tcx> {\n         // Step 1: Find granting item.\n         self.find_granting(AccessKind::Write, tag)\n-            .ok_or_else(|| err_ub!(Ub(format!(\n+            .ok_or_else(|| err_ub!(UbExperimental(format!(\n                 \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n                 tag,\n             ))))?;\n@@ -378,7 +378,7 @@ impl<'tcx> Stack {\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let granting_idx = self.find_granting(access, derived_from)\n-            .ok_or_else(|| err_ub!(Ub(format!(\n+            .ok_or_else(|| err_ub!(UbExperimental(format!(\n                 \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\", new.perm, derived_from,\n             ))))?;\n "}, {"sha": "7b18cab7980577d7a286ad3855ea11927417457d", "filename": "tests/compile-fail/assume.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d26917a9d6d6eebb37b16d896cdef9953ce34e2f/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=d26917a9d6d6eebb37b16d896cdef9953ce34e2f", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ `assume` argument was false\n+        std::intrinsics::assume(x > 42); //~ `assume` intrinsic called with `false`\n     }\n }"}]}