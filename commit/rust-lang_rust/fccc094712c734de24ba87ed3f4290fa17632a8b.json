{"sha": "fccc094712c734de24ba87ed3f4290fa17632a8b", "node_id": "C_kwDOAAsO6NoAKGZjY2MwOTQ3MTJjNzM0ZGUyNGJhODdlZDNmNDI5MGZhMTc2MzJhOGI", "commit": {"author": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-15T05:52:23Z"}, "committer": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-15T05:52:23Z"}, "message": "Make minor improvements and cleanups", "tree": {"sha": "acb45c10fcc08bf376d38e78405e515e568fd812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb45c10fcc08bf376d38e78405e515e568fd812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fccc094712c734de24ba87ed3f4290fa17632a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fccc094712c734de24ba87ed3f4290fa17632a8b", "html_url": "https://github.com/rust-lang/rust/commit/fccc094712c734de24ba87ed3f4290fa17632a8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fccc094712c734de24ba87ed3f4290fa17632a8b/comments", "author": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6fd4dbe59b12ab2d063dc6ba3c5003c1a389ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6fd4dbe59b12ab2d063dc6ba3c5003c1a389ed", "html_url": "https://github.com/rust-lang/rust/commit/0c6fd4dbe59b12ab2d063dc6ba3c5003c1a389ed"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "79b5f3d2f61b7eaf552c06b0978278d0b276eb1b", "filename": "xtask/src/publish.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fccc094712c734de24ba87ed3f4290fa17632a8b/xtask%2Fsrc%2Fpublish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fccc094712c734de24ba87ed3f4290fa17632a8b/xtask%2Fsrc%2Fpublish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpublish.rs?ref=fccc094712c734de24ba87ed3f4290fa17632a8b", "patch": "@@ -16,9 +16,9 @@ impl flags::PublishReleaseNotes {\n             format!(\"\\nSee also [original changelog]({original_changelog_url}).\");\n         markdown.push_str(&additional_paragraph);\n         if self.dry_run {\n-            println!(\"{}\", markdown);\n+            println!(\"{markdown}\");\n         } else {\n-            update_release(sh, &tag_name, &markdown)?;\n+            update_release(sh, tag_name, &markdown)?;\n         }\n         Ok(())\n     }\n@@ -67,7 +67,7 @@ fn update_release(sh: &Shell, tag_name: &str, release_notes: &str) -> Result<()>\n         Err(_) => bail!(\"Please obtain a personal access token from https://github.com/settings/tokens and set the `GITHUB_TOKEN` environment variable.\"),\n     };\n     let accept = \"Accept: application/vnd.github+json\";\n-    let authorization = format!(\"Authorization: Bearer {}\", token);\n+    let authorization = format!(\"Authorization: Bearer {token}\");\n     let api_version = \"X-GitHub-Api-Version: 2022-11-28\";\n     let release_url = \"https://api.github.com/repos/rust-lang/rust-analyzer/releases\";\n \n@@ -80,10 +80,10 @@ fn update_release(sh: &Shell, tag_name: &str, release_notes: &str) -> Result<()>\n \n     let mut patch = String::new();\n     write_json::object(&mut patch)\n-        .string(\"tag_name\", &tag_name)\n+        .string(\"tag_name\", tag_name)\n         .string(\"target_commitish\", \"master\")\n-        .string(\"name\", &tag_name)\n-        .string(\"body\", &release_notes)\n+        .string(\"name\", tag_name)\n+        .string(\"body\", release_notes)\n         .bool(\"draft\", false)\n         .bool(\"prerelease\", false);\n     let _ = cmd!(\n@@ -102,7 +102,7 @@ mod tests {\n     #[test]\n     fn original_changelog_url_creation() {\n         let input = \"2019-07-24-changelog-0.adoc\";\n-        let actual = create_original_changelog_url(&input);\n+        let actual = create_original_changelog_url(input);\n         let expected = \"https://rust-analyzer.github.io/thisweek/2019/07/24/changelog-0.html\";\n         assert_eq!(actual, expected);\n     }"}, {"sha": "c30267295bf41b4e74dc8a65390b2b3d9d39d602", "filename": "xtask/src/publish/notes.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fccc094712c734de24ba87ed3f4290fa17632a8b/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fccc094712c734de24ba87ed3f4290fa17632a8b/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpublish%2Fnotes.rs?ref=fccc094712c734de24ba87ed3f4290fa17632a8b", "patch": "@@ -5,9 +5,9 @@ use std::{\n     iter::Peekable,\n };\n \n-const LISTING_DELIMITER: &'static str = \"----\";\n-const IMAGE_BLOCK_PREFIX: &'static str = \"image::\";\n-const VIDEO_BLOCK_PREFIX: &'static str = \"video::\";\n+const LISTING_DELIMITER: &str = \"----\";\n+const IMAGE_BLOCK_PREFIX: &str = \"image::\";\n+const VIDEO_BLOCK_PREFIX: &str = \"video::\";\n \n struct Converter<'a, 'b, R: BufRead> {\n     iter: &'a mut Peekable<Lines<R>>,\n@@ -89,7 +89,7 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n         while let Some(line) = self.iter.peek() {\n             let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n \n-            if get_list_item(&line).is_some() {\n+            if get_list_item(line).is_some() {\n                 let line = self.iter.next().unwrap()?;\n                 let line = process_inline_macros(&line)?;\n                 let (marker, item) = get_list_item(&line).unwrap();\n@@ -253,17 +253,16 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n     {\n         while let Some(line) = self.iter.peek() {\n             let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n-            if predicate(&line) {\n+            if predicate(line) {\n                 break;\n             }\n \n             self.write_indent(level);\n             let line = self.iter.next().unwrap()?;\n             let line = line.trim_start();\n-            let line = process_inline_macros(&line)?;\n-            if line.ends_with('+') {\n-                let line = &line[..(line.len() - 1)];\n-                self.output.push_str(line);\n+            let line = process_inline_macros(line)?;\n+            if let Some(stripped) = line.strip_suffix('+') {\n+                self.output.push_str(stripped);\n                 self.output.push('\\\\');\n             } else {\n                 self.output.push_str(&line);\n@@ -339,8 +338,8 @@ fn get_title(line: &str) -> Option<(usize, &str)> {\n }\n \n fn get_list_item(line: &str) -> Option<(ListMarker, &str)> {\n-    const HYPHYEN_MARKER: &'static str = \"- \";\n-    if let Some(text) = line.strip_prefix(HYPHYEN_MARKER) {\n+    const HYPHEN_MARKER: &str = \"- \";\n+    if let Some(text) = line.strip_prefix(HYPHEN_MARKER) {\n         Some((ListMarker::Hyphen, text))\n     } else if let Some((count, text)) = strip_prefix_symbol(line, '*') {\n         Some((ListMarker::Asterisk(count), text))"}]}