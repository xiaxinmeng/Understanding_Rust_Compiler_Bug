{"sha": "756b7b23c43cff52b1e2a89fae341c0a7389ee09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmI3YjIzYzQzY2ZmNTJiMWUyYTg5ZmFlMzQxYzBhNzM4OWVlMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-02T21:51:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-02T21:51:10Z"}, "message": "auto merge of #16180 : jbcrail/rust/fix-comments, r=steveklabnik", "tree": {"sha": "47aa392a3889484b574a73224b2c8bc57e652bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47aa392a3889484b574a73224b2c8bc57e652bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756b7b23c43cff52b1e2a89fae341c0a7389ee09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756b7b23c43cff52b1e2a89fae341c0a7389ee09", "html_url": "https://github.com/rust-lang/rust/commit/756b7b23c43cff52b1e2a89fae341c0a7389ee09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756b7b23c43cff52b1e2a89fae341c0a7389ee09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147d117cff53198f17989a34b92513c33e059544", "url": "https://api.github.com/repos/rust-lang/rust/commits/147d117cff53198f17989a34b92513c33e059544", "html_url": "https://github.com/rust-lang/rust/commit/147d117cff53198f17989a34b92513c33e059544"}, {"sha": "ad06dfe496e4e1abbc65268a58275ca2b483def5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad06dfe496e4e1abbc65268a58275ca2b483def5", "html_url": "https://github.com/rust-lang/rust/commit/ad06dfe496e4e1abbc65268a58275ca2b483def5"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "ba201a4a633c62708d2902513cb499de800974e0", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -136,7 +136,7 @@ pub struct Config {\n     // Extra parameter to run adb on arm-linux-androideabi\n     pub adb_path: String,\n \n-    // Extra parameter to run test sute on arm-linux-androideabi\n+    // Extra parameter to run test suite on arm-linux-androideabi\n     pub adb_test_dir: String,\n \n     // status whether android device available or not"}, {"sha": "a9c7673d4ddfbff90feca391b653d4f339954792", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -325,7 +325,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let DebuggerCommands { commands, check_lines, .. } = parse_debugger_commands(testfile, \"gdb\");\n     let mut cmds = commands.connect(\"\\n\");\n \n-    // compile test file (it shoud have 'compile-flags:-g' in the header)\n+    // compile test file (it should have 'compile-flags:-g' in the header)\n     let compiler_run_result = compile_test(config, props, testfile);\n     if !compiler_run_result.status.success() {\n         fatal_proc_rec(\"compilation failed!\", &compiler_run_result);\n@@ -520,7 +520,7 @@ fn run_debuginfo_lldb_test(config: &Config, props: &TestProps, testfile: &Path)\n \n     let config = &mut config;\n \n-    // compile test file (it shoud have 'compile-flags:-g' in the header)\n+    // compile test file (it should have 'compile-flags:-g' in the header)\n     let compile_result = compile_test(config, props, testfile);\n     if !compile_result.status.success() {\n         fatal_proc_rec(\"compilation failed!\", &compile_result);"}, {"sha": "14d4f90a077cf878b1c40a2ecdcb03d3b4a43dcd", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -1532,7 +1532,7 @@ pub struct BitPositions<'a> {\n     next_idx: uint\n }\n \n-/// An iterator combining wo `BitvSet` iterators.\n+/// An iterator combining two `BitvSet` iterators.\n pub struct TwoBitPositions<'a> {\n     set: &'a BitvSet,\n     other: &'a BitvSet,"}, {"sha": "bf2c8c83d87b6042d33cb7ac72eb7c6eade2be5d", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -119,7 +119,7 @@\n //!     //           10      |               |\n //!     //                   +---------------+\n //!     //\n-//!     // The graph is represented as an adjecency list where each index,\n+//!     // The graph is represented as an adjacency list where each index,\n //!     // corresponding to a node value, has a list of outgoing edges.\n //!     // Chosen for it's efficiency.\n //!     let graph = vec!["}, {"sha": "684a15f9aae50028cdb0add0fcd3dc66f393bc81", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -842,7 +842,7 @@ pub mod raw {\n     /// Create a `String` from a null-terminated *u8 buffer\n     ///\n     /// This function is unsafe because we dereference memory until we find the NUL character,\n-    /// which is not guaranteed to be present. Additionaly, the slice is not checked to see\n+    /// which is not guaranteed to be present. Additionally, the slice is not checked to see\n     /// whether it contains valid UTF-8\n     pub unsafe fn from_buf(buf: *const u8) -> String {\n         let mut len = 0;"}, {"sha": "becd2d3f9628cc8fc56c88c9e607b07740f72986", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -449,7 +449,7 @@ pub struct UnsafeCell<T> {\n }\n \n impl<T> UnsafeCell<T> {\n-    /// Construct a new instance of `UnsafeCell` which will wrapp the specified\n+    /// Construct a new instance of `UnsafeCell` which will wrap the specified\n     /// value.\n     ///\n     /// All access to the inner value through methods is `unsafe`, and it is"}, {"sha": "73fe8f6a93f82d4cf7169fb6b677ed5d68d814d4", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -118,7 +118,7 @@ extern fn bootstrap_green_task(task: uint, code: *mut (), env: *mut ()) -> ! {\n     // preserving a handle to the GreenTask down to this point, this\n     // unfortunately must call `GreenTask::convert`. In order to avoid\n     // this we could add a `terminate` function to the `Runtime` trait\n-    // in libstd, but that seems less appropriate since the coversion\n+    // in libstd, but that seems less appropriate since the conversion\n     // method exists.\n     GreenTask::convert(task).terminate();\n }"}, {"sha": "cf2d6e7fb45ae18ab1f5fb62502f34a612bf477c", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -769,7 +769,7 @@ impl rtio::RtioUdpSocket for UdpSocket {\n // It turns out that there's this nifty MSG_DONTWAIT flag which can be passed to\n // send/recv, but the niftiness wears off once you realize it only works well on\n // linux [1] [2]. This means that it's pretty easy to get a nonblocking\n-// operation on linux (no flag fidding, no affecting other objects), but not on\n+// operation on linux (no flag fiddling, no affecting other objects), but not on\n // other platforms.\n //\n // To work around this constraint on other platforms, we end up using the"}, {"sha": "d5b22b4b018c9a103b0f216148e4882a161c7335", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -311,7 +311,7 @@ impl UnixStream {\n                     }\n                 }\n \n-                // An example I found on microsoft's website used 20\n+                // An example I found on Microsoft's website used 20\n                 // seconds, libuv uses 30 seconds, hence we make the\n                 // obvious choice of waiting for 25 seconds.\n                 None => {"}, {"sha": "d2e1fca0da75d3cc7c4bec3fc28d05ea21789ab7", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -11,7 +11,7 @@\n //! Finds crate binaries and loads their metadata\n //!\n //! Might I be the first to welcome you to a world of platform differences,\n-//! version requirements, dependency graphs, conficting desires, and fun! This\n+//! version requirements, dependency graphs, conflicting desires, and fun! This\n //! is the major guts (along with metadata::creader) of the compiler for loading\n //! crates and resolving dependencies. Let's take a tour!\n //!\n@@ -83,7 +83,7 @@\n //! 5. Does the target in the metadata agree with the current target?\n //! 6. Does the SVH match? (more on this later)\n //!\n-//! If the file answeres `yes` to all these questions, then the file is\n+//! If the file answers `yes` to all these questions, then the file is\n //! considered as being *candidate* for being accepted. It is illegal to have\n //! more than two candidates as the compiler has no method by which to resolve\n //! this conflict. Additionally, rlib/dylib candidates are considered\n@@ -173,7 +173,7 @@\n //! ## Loading transitive dependencies\n //!\n //! Dealing with same-named-but-distinct crates is not just a local problem, but\n-//! one that also needs to be dealt with for transitive dependences. Note that\n+//! one that also needs to be dealt with for transitive dependencies. Note that\n //! in the letter above `--extern` flags only apply to the *local* set of\n //! dependencies, not the upstream transitive dependencies. Consider this\n //! dependency graph:\n@@ -660,7 +660,7 @@ impl<'a> Context<'a> {\n             false\n         });\n \n-        // Now that we have an itertor of good candidates, make sure there's at\n+        // Now that we have an iterator of good candidates, make sure there's at\n         // most one rlib and at most one dylib.\n         let mut rlibs = HashSet::new();\n         let mut dylibs = HashSet::new();"}, {"sha": "ce8f37514a4cdd80e7847c62b724150e402640d2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -269,7 +269,7 @@ pub struct ctxt {\n \n     /// Stores the type parameters which were substituted to obtain the type\n     /// of this node.  This only applies to nodes that refer to entities\n-    /// param<eterized by type parameters, such as generic fns, types, or\n+    /// parameterized by type parameters, such as generic fns, types, or\n     /// other items.\n     pub item_substs: RefCell<NodeMap<ItemSubsts>>,\n "}, {"sha": "1700354e329e3388f309444fde73701d6cf422a9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -1098,7 +1098,7 @@ impl Context {\n         Ok(())\n     }\n \n-    /// Non-parellelized version of rendering an item. This will take the input\n+    /// Non-parallelized version of rendering an item. This will take the input\n     /// item, render its contents, and then invoke the specified closure with\n     /// all sub-items which need to be rendered.\n     ///"}, {"sha": "60db4fda05190098046ed477101d521a98276680", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -60,7 +60,7 @@ impl Counts {\n }\n \n #[deriving(Encodable, Decodable, PartialEq, Eq)]\n-/// A summarized module, which includes total counts and summarized chilcren\n+/// A summarized module, which includes total counts and summarized children\n /// modules.\n pub struct ModuleSummary {\n     pub name: String,"}, {"sha": "c49e557a3237dc4d32aa74e80f094ade61362b90", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -28,7 +28,7 @@ pub struct StreamWatcher {\n     // Cache the last used uv_write_t so we don't have to allocate a new one on\n     // every call to uv_write(). Ideally this would be a stack-allocated\n     // structure, but currently we don't have mappings for all the structures\n-    // defined in libuv, so we're foced to malloc this.\n+    // defined in libuv, so we're forced to malloc this.\n     last_write_req: Option<Request>,\n \n     blocked_writer: Option<BlockedTask>,"}, {"sha": "e95a5305bc7700ea6106c6ab2b372bd372ec7238", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -1937,7 +1937,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// # Example\n     ///\n     /// This is a slightly silly example where we define the number's\n-    /// parity as the equivilance class. It is important that the\n+    /// parity as the equivalence class. It is important that the\n     /// values hash the same, which is why we implement `Hash`.\n     ///\n     /// ```rust"}, {"sha": "771eb9e13e836d962902632b003b65d48c5ff844", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -79,7 +79,7 @@ pub fn get_host_addresses(host: &str) -> IoResult<Vec<IpAddr>> {\n     lookup(Some(host), None, None).map(|a| a.move_iter().map(|i| i.address.ip).collect())\n }\n \n-/// Full-fleged resolution. This function will perform a synchronous call to\n+/// Full-fledged resolution. This function will perform a synchronous call to\n /// getaddrinfo, controlled by the parameters\n ///\n /// # Arguments"}, {"sha": "dfa691d1823420368b4efed722bb83904f374f23", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -873,7 +873,7 @@ pub fn make_absolute(p: &Path) -> Path {\n ///\n /// let root = Path::new(\"/\");\n /// assert!(os::change_dir(&root));\n-/// println!(\"Succesfully changed working directory to {}!\", root.display());\n+/// println!(\"Successfully changed working directory to {}!\", root.display());\n /// ```\n pub fn change_dir(p: &Path) -> bool {\n     return chdir(p);"}, {"sha": "665cd48a278df68a26c8424a90e048baea60ea57", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -223,7 +223,7 @@ impl<T: Send> Mutex<T> {\n     pub fn lock<'a>(&'a self) -> MutexGuard<'a, T> {\n         let guard = self.lock.lock();\n \n-        // These two accesses are safe because we're guranteed at this point\n+        // These two accesses are safe because we're guaranteed at this point\n         // that we have exclusive access to this mutex. We are indeed able to\n         // promote ourselves from &Mutex to `&mut T`\n         let poison = unsafe { &mut *self.failed.get() };\n@@ -326,7 +326,7 @@ impl<T: Send + Share> RWLock<T> {\n     pub fn write<'a>(&'a self) -> RWLockWriteGuard<'a, T> {\n         let guard = self.lock.write();\n \n-        // These two accesses are safe because we're guranteed at this point\n+        // These two accesses are safe because we're guaranteed at this point\n         // that we have exclusive access to this rwlock. We are indeed able to\n         // promote ourselves from &RWLock to `&mut T`\n         let poison = unsafe { &mut *self.failed.get() };"}, {"sha": "21252619d11aeb27e3d5781a8e5df9d8dba59a2f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -426,7 +426,7 @@ pub fn require_unique_names(diagnostic: &SpanHandler, metas: &[Gc<MetaItem>]) {\n /// not allowed on univariant or zero-variant enums, which have no discriminant.\n ///\n /// If a discriminant type is so specified, then the discriminant will be\n-/// present (before fields, if any) with that type; reprensentation\n+/// present (before fields, if any) with that type; representation\n /// optimizations which would remove it will not be done.\n pub fn find_repr_attr(diagnostic: &SpanHandler, attr: &Attribute, acc: ReprAttr)\n     -> ReprAttr {"}, {"sha": "02a748eed8e47bce84a1f951fb4ec9563f041f04", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -41,7 +41,7 @@\n //! }\n //! ```\n //!\n-//! Other interesting scenarios are whe the item has type parameters or\n+//! Other interesting scenarios are when the item has type parameters or\n //! references other non-built-in types.  A type definition like:\n //!\n //! ```ignore"}, {"sha": "de3be4f8f385513cfa1806a5d44b4cae647ed61b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -4356,7 +4356,7 @@ impl<'a> Parser<'a> {\n         return self.parse_single_struct_field(Inherited, attrs);\n     }\n \n-    /// Parse visiility: PUB, PRIV, or nothing\n+    /// Parse visibility: PUB, PRIV, or nothing\n     fn parse_visibility(&mut self) -> Visibility {\n         if self.eat_keyword(keywords::Pub) { Public }\n         else { Inherited }"}, {"sha": "f28e6829b00d84725796dcb3c42ddd137537e6f6", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756b7b23c43cff52b1e2a89fae341c0a7389ee09/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=756b7b23c43cff52b1e2a89fae341c0a7389ee09", "patch": "@@ -225,12 +225,12 @@ pub fn mk_printer(out: Box<io::Writer>, linewidth: uint) -> Printer {\n /// 'right' indices denote the active portion of the ring buffer as well as\n /// describing hypothetical points-in-the-infinite-stream at most 3N tokens\n /// apart (i.e. \"not wrapped to ring-buffer boundaries\"). The paper will switch\n-/// between using 'left' and 'right' terms to denote the wrapepd-to-ring-buffer\n+/// between using 'left' and 'right' terms to denote the wrapped-to-ring-buffer\n /// and point-in-infinite-stream senses freely.\n ///\n /// There is a parallel ring buffer, 'size', that holds the calculated size of\n /// each token. Why calculated? Because for Begin/End pairs, the \"size\"\n-/// includes everything betwen the pair. That is, the \"size\" of Begin is\n+/// includes everything between the pair. That is, the \"size\" of Begin is\n /// actually the sum of the sizes of everything between Begin and the paired\n /// End that follows. Since that is arbitrarily far in the future, 'size' is\n /// being rewritten regularly while the printer runs; in fact most of the\n@@ -270,7 +270,7 @@ pub struct Printer {\n     left: uint,\n     /// Index of right side of input stream\n     right: uint,\n-    /// Ring-buffr stream goes through\n+    /// Ring-buffer stream goes through\n     token: Vec<Token> ,\n     /// Ring-buffer of calculated sizes\n     size: Vec<int> ,"}]}