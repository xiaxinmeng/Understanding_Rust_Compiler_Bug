{"sha": "995f741a0e3a57d4142c0590b3266514fa0a0e29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NWY3NDFhMGUzYTU3ZDQxNDJjMDU5MGIzMjY2NTE0ZmEwYTBlMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-10T09:11:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-10T09:11:36Z"}, "message": "Auto merge of #42556 - scottmcm:ctz-nz, r=BurntSushi\n\nGet LLVM to stop generating dead assembly in next_power_of_two\n\nIt turns out that LLVM can turn `@llvm.ctlz.i64(_, true)` into `@llvm.ctlz.i64(_, false)` ([`ctlz`](http://llvm.org/docs/LangRef.html#llvm-ctlz-intrinsic)) where valuable, but never does the opposite.  That leads to some silly assembly getting generated in certain cases.\n\nA contrived-but-clear example https://is.gd/VAIKuC:\n```rust\nfn foo(x:u64) -> u32 {\n    if x == 0 { return !0; }\n    x.leading_zeros()\n}\n```\nGenerates\n```asm\n\ttestq\t%rdi, %rdi\n\tje\t.LBB0_1\n\tje\t.LBB0_3    ; <-- wha?\n\tbsrq\t%rdi, %rax\n\txorq\t$63, %rax\n\tretq\n.LBB0_1:\n\tmovl\t$-1, %eax\n\tretq\n.LBB0_3:\n\tmovl\t$64, %eax  ; <-- dead\n\tretq\n```\n\nI noticed this in `next_power_of_two`, which without this PR generates the following:\n```asm\n\tcmpq\t$2, %rcx\n\tjae\t.LBB1_2\n\tmovl\t$1, %eax\n\tretq\n.LBB1_2:\n\tdecq\t%rcx\n\tje\t.LBB1_3\n\tbsrq\t%rcx, %rcx\n\txorq\t$63, %rcx\n\tjmp\t.LBB1_5\n.LBB1_3:\n\tmovl\t$64, %ecx  ; <-- dead\n.LBB1_5:\n\tmovq\t$-1, %rax\n\tshrq\t%cl, %rax\n\tincq\t%rax\n\tretq\n```\n\nAnd with this PR becomes\n```asm\n\tcmpq\t$2, %rcx\n\tjae\t.LBB0_2\n\tmovl\t$1, %eax\n\tretq\n.LBB0_2:\n\tdecq\t%rcx\n\tbsrq\t%rcx, %rcx\n\txorl\t$63, %ecx\n\tmovq\t$-1, %rax\n\tshrq\t%cl, %rax\n\tincq\t%rax\n\tretq\n```", "tree": {"sha": "f1f259211c1e5dd2635b06d03d511121c6571101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f259211c1e5dd2635b06d03d511121c6571101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995f741a0e3a57d4142c0590b3266514fa0a0e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995f741a0e3a57d4142c0590b3266514fa0a0e29", "html_url": "https://github.com/rust-lang/rust/commit/995f741a0e3a57d4142c0590b3266514fa0a0e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995f741a0e3a57d4142c0590b3266514fa0a0e29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1480499b484d142dfa704ae20bd33eae518c1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1480499b484d142dfa704ae20bd33eae518c1d0", "html_url": "https://github.com/rust-lang/rust/commit/e1480499b484d142dfa704ae20bd33eae518c1d0"}, {"sha": "6d86f0c018b57fcb9ca12c801939130b7f8e441e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d86f0c018b57fcb9ca12c801939130b7f8e441e", "html_url": "https://github.com/rust-lang/rust/commit/6d86f0c018b57fcb9ca12c801939130b7f8e441e"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "8188c15a2829cdf2dc798fa6338f487a6937db12", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=995f741a0e3a57d4142c0590b3266514fa0a0e29", "patch": "@@ -1229,6 +1229,23 @@ extern \"rust-intrinsic\" {\n     /// ```\n     pub fn ctlz<T>(x: T) -> T;\n \n+    /// Like `ctlz`, but extra-unsafe as it returns `undef` when\n+    /// given an `x` with value `0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(core_intrinsics)]\n+    ///\n+    /// use std::intrinsics::ctlz_nonzero;\n+    ///\n+    /// let x = 0b0001_1100_u8;\n+    /// let num_leading = unsafe { ctlz_nonzero(x) };\n+    /// assert_eq!(num_leading, 3);\n+    /// ```\n+    #[cfg(not(stage0))]\n+    pub fn ctlz_nonzero<T>(x: T) -> T;\n+\n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n     ///\n     /// # Examples\n@@ -1256,6 +1273,23 @@ extern \"rust-intrinsic\" {\n     /// ```\n     pub fn cttz<T>(x: T) -> T;\n \n+    /// Like `cttz`, but extra-unsafe as it returns `undef` when\n+    /// given an `x` with value `0`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(core_intrinsics)]\n+    ///\n+    /// use std::intrinsics::cttz_nonzero;\n+    ///\n+    /// let x = 0b0011_1000_u8;\n+    /// let num_trailing = unsafe { cttz_nonzero(x) };\n+    /// assert_eq!(num_trailing, 3);\n+    /// ```\n+    #[cfg(not(stage0))]\n+    pub fn cttz_nonzero<T>(x: T) -> T;\n+\n     /// Reverses the bytes in an integer type `T`.\n     pub fn bswap<T>(x: T) -> T;\n "}, {"sha": "62d75445cc95e81129988dc75713ba2b9bdf1b7e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=995f741a0e3a57d4142c0590b3266514fa0a0e29", "patch": "@@ -1262,6 +1262,7 @@ macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr,\n      $ctpop:path,\n      $ctlz:path,\n+     $ctlz_nonzero:path,\n      $cttz:path,\n      $bswap:path,\n      $add_with_overflow:path,\n@@ -2184,6 +2185,7 @@ macro_rules! uint_impl {\n         // This method cannot overflow, as in the `next_power_of_two`\n         // overflow cases it instead ends up returning the maximum value\n         // of the type, and can return 0 for 0.\n+        #[inline]\n         fn one_less_than_next_power_of_two(self) -> Self {\n             if self <= 1 { return 0; }\n \n@@ -2192,7 +2194,7 @@ macro_rules! uint_impl {\n             // (such as intel pre-haswell) have more efficient ctlz\n             // intrinsics when the argument is non-zero.\n             let p = self - 1;\n-            let z = p.leading_zeros();\n+            let z = unsafe { $ctlz_nonzero(p) };\n             <$SelfT>::max_value() >> z\n         }\n \n@@ -2236,11 +2238,17 @@ macro_rules! uint_impl {\n     }\n }\n \n+#[cfg(stage0)]\n+unsafe fn ctlz_nonzero<T>(x: T) -> T { intrinsics::ctlz(x) }\n+#[cfg(not(stage0))]\n+unsafe fn ctlz_nonzero<T>(x: T) -> T { intrinsics::ctlz_nonzero(x) }\n+\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2253,6 +2261,7 @@ impl u16 {\n     uint_impl! { u16, u16, 16,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2265,6 +2274,7 @@ impl u32 {\n     uint_impl! { u32, u32, 32,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2277,6 +2287,7 @@ impl u64 {\n     uint_impl! { u64, u64, 64,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2289,6 +2300,7 @@ impl u128 {\n     uint_impl! { u128, u128, 128,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2302,6 +2314,7 @@ impl usize {\n     uint_impl! { usize, u16, 16,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2314,6 +2327,7 @@ impl usize {\n     uint_impl! { usize, u32, 32,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,\n@@ -2327,6 +2341,7 @@ impl usize {\n     uint_impl! { usize, u64, 64,\n         intrinsics::ctpop,\n         intrinsics::ctlz,\n+        ctlz_nonzero,\n         intrinsics::cttz,\n         intrinsics::bswap,\n         intrinsics::add_with_overflow,"}, {"sha": "de908bb24a7abb522a1d99f9bd15a557f327188d", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=995f741a0e3a57d4142c0590b3266514fa0a0e29", "patch": "@@ -267,7 +267,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n             };\n             bcx.call(expect, &[llargs[0], C_i32(ccx, rw), llargs[1], C_i32(ccx, cache_type)], None)\n         },\n-        \"ctlz\" | \"cttz\" | \"ctpop\" | \"bswap\" |\n+        \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"ctpop\" | \"bswap\" |\n         \"add_with_overflow\" | \"sub_with_overflow\" | \"mul_with_overflow\" |\n         \"overflowing_add\" | \"overflowing_sub\" | \"overflowing_mul\" |\n         \"unchecked_div\" | \"unchecked_rem\" | \"unchecked_shl\" | \"unchecked_shr\" => {\n@@ -280,6 +280,12 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                             let llfn = ccx.get_intrinsic(&format!(\"llvm.{}.i{}\", name, width));\n                             bcx.call(llfn, &[llargs[0], y], None)\n                         }\n+                        \"ctlz_nonzero\" | \"cttz_nonzero\" => {\n+                            let y = C_bool(bcx.ccx, true);\n+                            let llvm_name = &format!(\"llvm.{}.i{}\", &name[..4], width);\n+                            let llfn = ccx.get_intrinsic(llvm_name);\n+                            bcx.call(llfn, &[llargs[0], y], None)\n+                        }\n                         \"ctpop\" => bcx.call(ccx.get_intrinsic(&format!(\"llvm.ctpop.i{}\", width)),\n                                         &llargs, None),\n                         \"bswap\" => {"}, {"sha": "4d9f50b0fc0c94d6e925c9f94a282a671454ac30", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=995f741a0e3a57d4142c0590b3266514fa0a0e29", "patch": "@@ -272,7 +272,8 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"volatile_store\" =>\n                 (1, vec![ tcx.mk_mut_ptr(param(0)), param(0) ], tcx.mk_nil()),\n \n-            \"ctpop\" | \"ctlz\" | \"cttz\" | \"bswap\" => (1, vec![param(0)], param(0)),\n+            \"ctpop\" | \"ctlz\" | \"ctlz_nonzero\" | \"cttz\" | \"cttz_nonzero\" | \"bswap\" =>\n+                (1, vec![param(0)], param(0)),\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec![param(0), param(0)],"}, {"sha": "4896f02da20b0b280e6fde0dbd555a4e5c4c8c1e", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995f741a0e3a57d4142c0590b3266514fa0a0e29/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=995f741a0e3a57d4142c0590b3266514fa0a0e29", "patch": "@@ -14,7 +14,9 @@ mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn ctpop<T>(x: T) -> T;\n         pub fn ctlz<T>(x: T) -> T;\n+        pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn cttz<T>(x: T) -> T;\n+        pub fn cttz_nonzero<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n     }\n }\n@@ -68,6 +70,21 @@ pub fn main() {\n         assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n         assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n \n+        assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n+        assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n+        assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n+        assert_eq!(ctlz_nonzero(1u64), 63); assert_eq!(ctlz_nonzero(1i64), 63);\n+\n+        assert_eq!(ctlz_nonzero(10u8), 4); assert_eq!(ctlz_nonzero(10i8), 4);\n+        assert_eq!(ctlz_nonzero(10u16), 12); assert_eq!(ctlz_nonzero(10i16), 12);\n+        assert_eq!(ctlz_nonzero(10u32), 28); assert_eq!(ctlz_nonzero(10i32), 28);\n+        assert_eq!(ctlz_nonzero(10u64), 60); assert_eq!(ctlz_nonzero(10i64), 60);\n+\n+        assert_eq!(ctlz_nonzero(100u8), 1); assert_eq!(ctlz_nonzero(100i8), 1);\n+        assert_eq!(ctlz_nonzero(100u16), 9); assert_eq!(ctlz_nonzero(100i16), 9);\n+        assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n+        assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n+\n         assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n         assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n         assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n@@ -93,6 +110,26 @@ pub fn main() {\n         assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n         assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n \n+        assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n+        assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n+        assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n+        assert_eq!(cttz_nonzero(-1i64 as u64), 0); assert_eq!(cttz_nonzero(-1i64), 0);\n+\n+        assert_eq!(cttz_nonzero(1u8), 0); assert_eq!(cttz_nonzero(1i8), 0);\n+        assert_eq!(cttz_nonzero(1u16), 0); assert_eq!(cttz_nonzero(1i16), 0);\n+        assert_eq!(cttz_nonzero(1u32), 0); assert_eq!(cttz_nonzero(1i32), 0);\n+        assert_eq!(cttz_nonzero(1u64), 0); assert_eq!(cttz_nonzero(1i64), 0);\n+\n+        assert_eq!(cttz_nonzero(10u8), 1); assert_eq!(cttz_nonzero(10i8), 1);\n+        assert_eq!(cttz_nonzero(10u16), 1); assert_eq!(cttz_nonzero(10i16), 1);\n+        assert_eq!(cttz_nonzero(10u32), 1); assert_eq!(cttz_nonzero(10i32), 1);\n+        assert_eq!(cttz_nonzero(10u64), 1); assert_eq!(cttz_nonzero(10i64), 1);\n+\n+        assert_eq!(cttz_nonzero(100u8), 2); assert_eq!(cttz_nonzero(100i8), 2);\n+        assert_eq!(cttz_nonzero(100u16), 2); assert_eq!(cttz_nonzero(100i16), 2);\n+        assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n+        assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n+\n         assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n         assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n         assert_eq!(bswap(0x0A0Bu16), 0x0B0A);"}]}