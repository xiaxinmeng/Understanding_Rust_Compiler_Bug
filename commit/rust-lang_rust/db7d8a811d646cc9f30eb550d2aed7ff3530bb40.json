{"sha": "db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "node_id": "C_kwDOAAsO6NoAKGRiN2Q4YTgxMWQ2NDZjYzlmMzBlYjU1MGQyYWVkN2ZmMzUzMGJiNDA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T13:03:18Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T18:29:43Z"}, "message": "Give fields of ModuleCodegenResult names", "tree": {"sha": "3f725f8a5411abf6ece245f1f06ddb51b7b6a252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f725f8a5411abf6ece245f1f06ddb51b7b6a252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "html_url": "https://github.com/rust-lang/rust/commit/db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7d8a811d646cc9f30eb550d2aed7ff3530bb40/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "html_url": "https://github.com/rust-lang/rust/commit/f76ca2247998bff4e10b73fcb464a0a83edbfeb0"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "3bbd286b3d79d92f872e97589aeae056844be60e", "filename": "src/driver/aot.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/db7d8a811d646cc9f30eb550d2aed7ff3530bb40/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7d8a811d646cc9f30eb550d2aed7ff3530bb40/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "patch": "@@ -20,11 +20,11 @@ use cranelift_object::{ObjectBuilder, ObjectModule};\n use crate::global_asm::GlobalAsmConfig;\n use crate::{prelude::*, BackendConfig};\n \n-struct ModuleCodegenResult(\n-    CompiledModule,\n-    Option<CompiledModule>,\n-    Option<(WorkProductId, WorkProduct)>,\n-);\n+struct ModuleCodegenResult {\n+    module_regular: CompiledModule,\n+    module_global_asm: Option<CompiledModule>,\n+    work_product: Option<(WorkProductId, WorkProduct)>,\n+}\n \n impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n     fn hash_stable(&self, _: &mut HCX, _: &mut StableHasher) {\n@@ -47,7 +47,7 @@ impl OngoingCodegen {\n         let mut modules = vec![];\n \n         for module_codegen_result in self.modules {\n-            let ModuleCodegenResult(module_regular, module_global_asm, work_product) =\n+            let ModuleCodegenResult { module_regular, module_global_asm, work_product } =\n                 module_codegen_result;\n             if let Some((work_product_id, work_product)) = work_product {\n                 work_products.insert(work_product_id, work_product);\n@@ -124,23 +124,23 @@ fn emit_module(\n         )\n     };\n \n-    ModuleCodegenResult(\n-        CompiledModule {\n+    ModuleCodegenResult {\n+        module_regular: CompiledModule {\n             name: name.clone(),\n             kind,\n             object: Some(tmp_file),\n             dwarf_object: None,\n             bytecode: None,\n         },\n-        global_asm_object_file.map(|global_asm_object_file| CompiledModule {\n+        module_global_asm: global_asm_object_file.map(|global_asm_object_file| CompiledModule {\n             name: format!(\"{name}.asm\"),\n             kind,\n             object: Some(global_asm_object_file),\n             dwarf_object: None,\n             bytecode: None,\n         }),\n         work_product,\n-    )\n+    }\n }\n \n fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCodegenResult {\n@@ -178,15 +178,15 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n         false\n     };\n \n-    ModuleCodegenResult(\n-        CompiledModule {\n+    ModuleCodegenResult {\n+        module_regular: CompiledModule {\n             name: cgu.name().to_string(),\n             kind: ModuleKind::Regular,\n             object: Some(obj_out_regular),\n             dwarf_object: None,\n             bytecode: None,\n         },\n-        if has_global_asm {\n+        module_global_asm: if has_global_asm {\n             Some(CompiledModule {\n                 name: cgu.name().to_string(),\n                 kind: ModuleKind::Regular,\n@@ -197,8 +197,8 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n         } else {\n             None\n         },\n-        Some((cgu.work_product_id(), work_product)),\n-    )\n+        work_product: Some((cgu.work_product_id(), work_product)),\n+    }\n }\n \n fn module_codegen(\n@@ -341,7 +341,7 @@ pub(crate) fn run_aot(\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n \n     let allocator_module = if created_alloc_shim {\n-        let ModuleCodegenResult(module, module_global_asm, work_product) = emit_module(\n+        let ModuleCodegenResult { module_regular, module_global_asm, work_product } = emit_module(\n             tcx,\n             &backend_config,\n             \"allocator_shim\".to_string(),\n@@ -355,7 +355,7 @@ pub(crate) fn run_aot(\n         if let Some((id, product)) = work_product {\n             work_products.insert(id, product);\n         }\n-        Some(module)\n+        Some(module_regular)\n     } else {\n         None\n     };"}]}