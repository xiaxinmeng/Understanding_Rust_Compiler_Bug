{"sha": "de3fd021f5eef7b3c2fad795920e542798104d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlM2ZkMDIxZjVlZWY3YjNjMmZhZDc5NTkyMGU1NDI3OTgxMDRkMWQ=", "commit": {"author": {"name": "togiberlin", "email": "togi.berlin@gmail.com", "date": "2019-09-04T12:53:47Z"}, "committer": {"name": "togiberlin", "email": "togi.berlin@gmail.com", "date": "2019-10-22T15:16:45Z"}, "message": "Target-feature documented as unsafe. rustc book and rustc -C help have been modified.", "tree": {"sha": "29449fbcbc382c303c5bfcd19959a016a2718c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29449fbcbc382c303c5bfcd19959a016a2718c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3fd021f5eef7b3c2fad795920e542798104d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3fd021f5eef7b3c2fad795920e542798104d1d", "html_url": "https://github.com/rust-lang/rust/commit/de3fd021f5eef7b3c2fad795920e542798104d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3fd021f5eef7b3c2fad795920e542798104d1d/comments", "author": {"login": "togiberlin", "id": 13764830, "node_id": "MDQ6VXNlcjEzNzY0ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13764830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/togiberlin", "html_url": "https://github.com/togiberlin", "followers_url": "https://api.github.com/users/togiberlin/followers", "following_url": "https://api.github.com/users/togiberlin/following{/other_user}", "gists_url": "https://api.github.com/users/togiberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/togiberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/togiberlin/subscriptions", "organizations_url": "https://api.github.com/users/togiberlin/orgs", "repos_url": "https://api.github.com/users/togiberlin/repos", "events_url": "https://api.github.com/users/togiberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/togiberlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "togiberlin", "id": 13764830, "node_id": "MDQ6VXNlcjEzNzY0ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13764830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/togiberlin", "html_url": "https://github.com/togiberlin", "followers_url": "https://api.github.com/users/togiberlin/followers", "following_url": "https://api.github.com/users/togiberlin/following{/other_user}", "gists_url": "https://api.github.com/users/togiberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/togiberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/togiberlin/subscriptions", "organizations_url": "https://api.github.com/users/togiberlin/orgs", "repos_url": "https://api.github.com/users/togiberlin/repos", "events_url": "https://api.github.com/users/togiberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/togiberlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50ffa79589600f515ff2710830c23cd2dce7cb76", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ffa79589600f515ff2710830c23cd2dce7cb76", "html_url": "https://github.com/rust-lang/rust/commit/50ffa79589600f515ff2710830c23cd2dce7cb76"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "b603c7b231e68471aacb58fe47a4349f52e80226", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=de3fd021f5eef7b3c2fad795920e542798104d1d", "patch": "@@ -14,6 +14,7 @@\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n+    - [Known Issues](targets/known-issues.md)\n - [Profile-guided Optimization](profile-guided-optimization.md)\n - [Linker-plugin based LTO](linker-plugin-lto.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "f5d5f2089d7e76901c0f5a84912e8d02aaa26c84", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=de3fd021f5eef7b3c2fad795920e542798104d1d", "patch": "@@ -61,6 +61,8 @@ enabling or disabling a feature.\n To see the valid options and an example of use, run `rustc --print\n target-features`.\n \n+Using this flag is unsafe and might result in [undefined runtime behavior](../targets/known-issues.md).\n+\n ## passes\n \n This flag can be used to add extra LLVM passes to the compilation."}, {"sha": "bdb3c5196585e09df6fc73d44116e4509603bea1", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=de3fd021f5eef7b3c2fad795920e542798104d1d", "patch": "@@ -145,7 +145,7 @@ of print values are:\n   target CPU may be selected with the `-C target-cpu=val` flag.\n - `target-features` \u2014 List of available target features for the current\n   target. Target features may be enabled with the `-C target-feature=val`\n-  flag.\n+  flag. This flag is unsafe. See [known issues](targets/known-issues.md) for more details.\n - `relocation-models` \u2014 List of relocation models. Relocation models may be\n   selected with the `-C relocation-model=val` flag.\n - `code-models` \u2014 List of code models. Code models may be selected with the"}, {"sha": "5859df83f645bc8ea5e3cc4fd4e6057a29fad440", "filename": "src/doc/rustc/src/targets/index.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Findex.md?ref=de3fd021f5eef7b3c2fad795920e542798104d1d", "patch": "@@ -11,3 +11,9 @@ To compile to a particular target, use the `--target` flag:\n ```bash\n $ rustc src/main.rs --target=wasm32-unknown-unknown\n ```\n+## Target Features\n+`x86`,  and `ARMv8` are two popular CPU architectures. Their instruction sets form a common baseline across most CPUs. However, some CPUs extend these with custom instruction sets, e.g. vector (`AVX`), bitwise manipulation (`BMI`) or cryptographic (`AES`).\n+\n+Developers, who know on which CPUs their compiled code is going to run can choose to add (or remove) CPU specific instruction sets via the `-C target-feature=val` flag.\n+\n+Please note, that this flag is generally considered as unsafe. More details can be found in [this section](known-issues.md)."}, {"sha": "89fd8ea6d32e96f1b3869eb9e5d091a16d0c3821", "filename": "src/doc/rustc/src/targets/known-issues.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fknown-issues.md", "raw_url": "https://github.com/rust-lang/rust/raw/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fknown-issues.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fknown-issues.md?ref=de3fd021f5eef7b3c2fad795920e542798104d1d", "patch": "@@ -0,0 +1,13 @@\n+# Known Issues\n+This section informs you about known \"gotchas\". Keep in mind, that this section is (and always will be) incomplete. For suggestions and amendments, feel free to [contribute](../contributing.md) to this guide.\n+\n+## Target Features\n+Most target-feature problems arise, when mixing code that have the target-feature _enabled_ with code that have it _disabled_. If you want to avoid undefined behavior, it is recommended to build _all code_ (including the standard library and imported crates) with a common set of target-features.\n+\n+By default, compiling your code with the `-C target-feature` flag will not recompile the entire standard library and/or imported crates with matching target features. Therefore, target features are generally considered as unsafe. Using `#[target_feature]` on individual functions makes the function unsafe.\n+\n+Examples:\n+\n+| Target-Feature | Issue | Seen on | Description | Details |\n+| -------------- | ----- | ------- | ----------- | ------- |\n+| `+soft-float` <br> and <br> `-sse` | Segfaults and ABI mismatches | `x86` and `x86-64` | The `x86` and `x86_64` architecture uses SSE registers (aka `xmm`) for floating point operations. Using software emulated floats (\"soft-floats\") disables usage of `xmm` registers, but parts of Rust's core libraries (e.g. `std::f32` or `std::f64`) are compiled without soft-floats and expect parameters to be passed in `xmm` registers. This leads to ABI mismatches. <br><br>  Attempting to compile with disabled SSE causes the same error, too. | [#63466](https://github.com/rust-lang/rust/issues/63466) |"}, {"sha": "33b9ddaa622303f2c553810f0f686e29699a28ca", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3fd021f5eef7b3c2fad795920e542798104d1d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=de3fd021f5eef7b3c2fad795920e542798104d1d", "patch": "@@ -1149,7 +1149,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n     target_feature: String = (String::new(), parse_string, [TRACKED],\n-        \"target specific attributes (`rustc --print target-features` for details)\"),\n+        \"target specific attributes. (`rustc --print target-features` for details). \\\n+        This feature is unsafe.\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],"}]}