{"sha": "f515af7e3b6070804e8cfc7e31c95e59bb663666", "node_id": "C_kwDOAAsO6NoAKGY1MTVhZjdlM2I2MDcwODA0ZThjZmM3ZTMxYzk1ZTU5YmI2NjM2NjY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-12T09:19:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-12T09:19:52Z"}, "message": "Add regex-error-pattern flag in compiletest", "tree": {"sha": "71dd97c56b3a87255cbf91657119245811d1c681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71dd97c56b3a87255cbf91657119245811d1c681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f515af7e3b6070804e8cfc7e31c95e59bb663666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f515af7e3b6070804e8cfc7e31c95e59bb663666", "html_url": "https://github.com/rust-lang/rust/commit/f515af7e3b6070804e8cfc7e31c95e59bb663666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f515af7e3b6070804e8cfc7e31c95e59bb663666/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f4c3119957aa0a250cab08ab586b7a9a680ef1", "html_url": "https://github.com/rust-lang/rust/commit/b3f4c3119957aa0a250cab08ab586b7a9a680ef1"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "17f2b77dab052b65c97de24da48136ddde73dfc4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f515af7e3b6070804e8cfc7e31c95e59bb663666/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f515af7e3b6070804e8cfc7e31c95e59bb663666/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=f515af7e3b6070804e8cfc7e31c95e59bb663666", "patch": "@@ -60,6 +60,8 @@ impl EarlyProps {\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     pub error_patterns: Vec<String>,\n+    // Regexes that should be expected, in order, on standard out\n+    pub regex_error_patterns: Vec<String>,\n     // Extra flags to pass to the compiler\n     pub compile_flags: Vec<String>,\n     // Extra flags to pass when the compiled code is run (such as --bench)\n@@ -163,6 +165,7 @@ pub struct TestProps {\n \n mod directives {\n     pub const ERROR_PATTERN: &'static str = \"error-pattern\";\n+    pub const REGEX_ERROR_PATTERN: &'static str = \"regex-error-pattern\";\n     pub const COMPILE_FLAGS: &'static str = \"compile-flags\";\n     pub const RUN_FLAGS: &'static str = \"run-flags\";\n     pub const SHOULD_ICE: &'static str = \"should-ice\";\n@@ -200,6 +203,7 @@ impl TestProps {\n     pub fn new() -> Self {\n         TestProps {\n             error_patterns: vec![],\n+            regex_error_patterns: vec![],\n             compile_flags: vec![],\n             run_flags: None,\n             pp_exact: None,\n@@ -285,6 +289,12 @@ impl TestProps {\n                     &mut self.error_patterns,\n                     |r| r,\n                 );\n+                config.push_name_value_directive(\n+                    ln,\n+                    REGEX_ERROR_PATTERN,\n+                    &mut self.regex_error_patterns,\n+                    |r| r,\n+                );\n \n                 if let Some(flags) = config.parse_name_value_directive(ln, COMPILE_FLAGS) {\n                     self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));"}, {"sha": "5517b5a12c3935f5ac04a5b5cd9492e87ce84680", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f515af7e3b6070804e8cfc7e31c95e59bb663666/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f515af7e3b6070804e8cfc7e31c95e59bb663666/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f515af7e3b6070804e8cfc7e31c95e59bb663666", "patch": "@@ -323,12 +323,13 @@ impl<'test> TestCx<'test> {\n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n         if !expected_errors.is_empty() {\n-            if !self.props.error_patterns.is_empty() {\n+            if !self.props.error_patterns.is_empty() || !self.props.regex_error_patterns.is_empty()\n+            {\n                 self.fatal(\"both error pattern and expected errors specified\");\n             }\n             self.check_expected_errors(expected_errors, &proc_res);\n         } else {\n-            self.check_error_patterns(&output_to_check, &proc_res, pm);\n+            self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n         }\n         if self.props.should_ice {\n             match proc_res.status.code() {\n@@ -363,7 +364,7 @@ impl<'test> TestCx<'test> {\n \n         let output_to_check = self.get_output(&proc_res);\n         self.check_correct_failure_status(&proc_res);\n-        self.check_error_patterns(&output_to_check, &proc_res, pm);\n+        self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n     }\n \n     fn get_output(&self, proc_res: &ProcRes) -> String {\n@@ -1222,14 +1223,13 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_error_patterns(\n+    fn check_all_error_patterns(\n         &self,\n         output_to_check: &str,\n         proc_res: &ProcRes,\n         pm: Option<PassMode>,\n     ) {\n-        debug!(\"check_error_patterns\");\n-        if self.props.error_patterns.is_empty() {\n+        if self.props.error_patterns.is_empty() && self.props.regex_error_patterns.is_empty() {\n             if pm.is_some() {\n                 // FIXME(#65865)\n                 return;\n@@ -1243,13 +1243,8 @@ impl<'test> TestCx<'test> {\n \n         let mut missing_patterns: Vec<String> = Vec::new();\n \n-        for pattern in &self.props.error_patterns {\n-            if output_to_check.contains(pattern.trim()) {\n-                debug!(\"found error pattern {}\", pattern);\n-            } else {\n-                missing_patterns.push(pattern.to_string());\n-            }\n-        }\n+        self.check_error_patterns(output_to_check, &mut missing_patterns);\n+        self.check_regex_error_patterns(output_to_check, proc_res, &mut missing_patterns);\n \n         if missing_patterns.is_empty() {\n             return;\n@@ -1268,6 +1263,44 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn check_error_patterns(&self, output_to_check: &str, missing_patterns: &mut Vec<String>) {\n+        debug!(\"check_error_patterns\");\n+        for pattern in &self.props.error_patterns {\n+            if output_to_check.contains(pattern.trim()) {\n+                debug!(\"found error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n+            }\n+        }\n+    }\n+\n+    fn check_regex_error_patterns(\n+        &self,\n+        output_to_check: &str,\n+        proc_res: &ProcRes,\n+        missing_patterns: &mut Vec<String>,\n+    ) {\n+        debug!(\"check_regex_error_patterns\");\n+\n+        for pattern in &self.props.regex_error_patterns {\n+            let pattern = pattern.trim();\n+            let re = match Regex::new(pattern) {\n+                Ok(re) => re,\n+                Err(err) => {\n+                    self.fatal_proc_rec(\n+                        &format!(\"invalid regex error pattern '{}': {:?}\", pattern, err),\n+                        proc_res,\n+                    );\n+                }\n+            };\n+            if re.is_match(output_to_check) {\n+                debug!(\"found regex error pattern {}\", pattern);\n+            } else {\n+                missing_patterns.push(pattern.to_string());\n+            }\n+        }\n+    }\n+\n     fn check_no_compiler_crash(&self, proc_res: &ProcRes, should_ice: bool) {\n         match proc_res.status.code() {\n             Some(101) if !should_ice => {\n@@ -1892,7 +1925,9 @@ impl<'test> TestCx<'test> {\n                 // If we are extracting and matching errors in the new\n                 // fashion, then you want JSON mode. Old-skool error\n                 // patterns still match the raw compiler output.\n-                if self.props.error_patterns.is_empty() {\n+                if self.props.error_patterns.is_empty()\n+                    && self.props.regex_error_patterns.is_empty()\n+                {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                     rustc.args(&[\"--json\", \"future-incompat\"]);\n                 }\n@@ -3268,10 +3303,11 @@ impl<'test> TestCx<'test> {\n                 self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n             }\n \n-            if !self.props.error_patterns.is_empty() {\n+            if !self.props.error_patterns.is_empty() || !self.props.regex_error_patterns.is_empty()\n+            {\n                 // \"// error-pattern\" comments\n                 let output_to_check = self.get_output(&proc_res);\n-                self.check_error_patterns(&output_to_check, &proc_res, pm);\n+                self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n             }\n         }\n \n@@ -3285,15 +3321,16 @@ impl<'test> TestCx<'test> {\n             self.props.error_patterns\n         );\n         if !explicit && self.config.compare_mode.is_none() {\n-            let check_patterns =\n-                should_run == WillExecute::No && !self.props.error_patterns.is_empty();\n+            let check_patterns = should_run == WillExecute::No\n+                && (!self.props.error_patterns.is_empty()\n+                    || !self.props.regex_error_patterns.is_empty());\n \n             let check_annotations = !check_patterns || !expected_errors.is_empty();\n \n             if check_patterns {\n                 // \"// error-pattern\" comments\n                 let output_to_check = self.get_output(&proc_res);\n-                self.check_error_patterns(&output_to_check, &proc_res, pm);\n+                self.check_all_error_patterns(&output_to_check, &proc_res, pm);\n             }\n \n             if check_annotations {"}]}