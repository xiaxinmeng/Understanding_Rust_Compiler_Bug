{"sha": "e176324fc593644a3ce00aa2ec7c1887d571003e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNzYzMjRmYzU5MzY0NGEzY2UwMGFhMmVjN2MxODg3ZDU3MTAwM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-06T15:43:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-06T15:43:07Z"}, "message": "Auto merge of #3665 - jsgf:master, r=oli-obk\n\nStart making clippy easier to invoke in non-cargo contexts\n\nClippy (clippy-driver) currently has a couple of strong but unnecessary couplings with cargo. This series:\n1. makes detection of check builds more robust, and\n2. make clippy-driver use the --sysroot specified on the command line as its internal sysroot.", "tree": {"sha": "4a74d3bff33e70a937a688bc97a7b57b241b3777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a74d3bff33e70a937a688bc97a7b57b241b3777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e176324fc593644a3ce00aa2ec7c1887d571003e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e176324fc593644a3ce00aa2ec7c1887d571003e", "html_url": "https://github.com/rust-lang/rust/commit/e176324fc593644a3ce00aa2ec7c1887d571003e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e176324fc593644a3ce00aa2ec7c1887d571003e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "450cacc5f4b93aca5e06f3a193e92fc88aad79d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/450cacc5f4b93aca5e06f3a193e92fc88aad79d8", "html_url": "https://github.com/rust-lang/rust/commit/450cacc5f4b93aca5e06f3a193e92fc88aad79d8"}, {"sha": "f0131fbab6331eb44d88c94783be2ac9b87f8b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0131fbab6331eb44d88c94783be2ac9b87f8b06", "html_url": "https://github.com/rust-lang/rust/commit/f0131fbab6331eb44d88c94783be2ac9b87f8b06"}], "stats": {"total": 119, "additions": 97, "deletions": 22}, "files": [{"sha": "c371048502735f041da9bdbf489c51c6e1b9ea16", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e176324fc593644a3ce00aa2ec7c1887d571003e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e176324fc593644a3ce00aa2ec7c1887d571003e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e176324fc593644a3ce00aa2ec7c1887d571003e", "patch": "@@ -34,7 +34,6 @@ path = \"src/main.rs\"\n \n [[bin]]\n name = \"clippy-driver\"\n-test = false\n path = \"src/driver.rs\"\n \n [dependencies]"}, {"sha": "20b93276017867f388b9eedbacd54dbad396700f", "filename": "ci/base-tests.sh", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e176324fc593644a3ce00aa2ec7c1887d571003e/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e176324fc593644a3ce00aa2ec7c1887d571003e/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=e176324fc593644a3ce00aa2ec7c1887d571003e", "patch": "@@ -11,19 +11,45 @@ cargo build --features debugging\n cargo test --features debugging\n # for faster build, share target dir between subcrates\n export CARGO_TARGET_DIR=`pwd`/target/\n-cd clippy_lints && cargo test && cd ..\n-cd rustc_tools_util && cargo test && cd ..\n-cd clippy_dev && cargo test && cd ..\n+(cd clippy_lints && cargo test)\n+(cd rustc_tools_util && cargo test)\n+(cd clippy_dev && cargo test)\n \n # make sure clippy can be called via ./path/to/cargo-clippy\n-cd clippy_workspace_tests\n-../target/debug/cargo-clippy\n-cd ..\n+(\n+  cd clippy_workspace_tests\n+  ../target/debug/cargo-clippy\n+)\n \n # Perform various checks for lint registration\n ./util/dev update_lints --check\n cargo +nightly fmt --all -- --check\n \n+# Check running clippy-driver without cargo\n+(\n+  export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n+\n+  # Check sysroot handling\n+  sysroot=$(./target/debug/clippy-driver --print sysroot)\n+  test $sysroot = $(rustc --print sysroot)\n+\n+  sysroot=$(./target/debug/clippy-driver --sysroot /tmp --print sysroot)\n+  test $sysroot = /tmp\n+\n+  sysroot=$(SYSROOT=/tmp ./target/debug/clippy-driver --print sysroot)\n+  test $sysroot = /tmp\n+\n+  # Make sure this isn't set - clippy-driver should cope without it\n+  unset CARGO_MANIFEST_DIR\n+\n+  # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n+  # XXX How to match the clippy invocation in compile-test.rs?\n+  ! ./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr\n+  diff <(sed -e 's,tests/ui,$DIR,' -e '/= help/d' cstring.stderr) tests/ui/cstring.stderr\n+\n+  # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR\n+)\n+\n # make sure tests are formatted\n \n # some lints are sensitive to formatting, exclude some files"}, {"sha": "b0b4394ebb883c5717d04d3b2da40e20f2399766", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e176324fc593644a3ce00aa2ec7c1887d571003e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e176324fc593644a3ce00aa2ec7c1887d571003e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e176324fc593644a3ce00aa2ec7c1887d571003e", "patch": "@@ -163,8 +163,13 @@ pub fn lookup_conf_file() -> io::Result<Option<path::PathBuf>> {\n     /// Possible filename to search for.\n     const CONFIG_FILE_NAMES: [&str; 2] = [\".clippy.toml\", \"clippy.toml\"];\n \n-    let mut current = path::PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\").expect(\"CARGO_MANIFEST_DIR not set\"));\n-\n+    // Start looking for a config file in CLIPPY_CONF_DIR, or failing that, CARGO_MANIFEST_DIR.\n+    // If neither of those exist, use \".\".\n+    let mut current = path::PathBuf::from(\n+        env::var(\"CLIPPY_CONF_DIR\")\n+            .or_else(|_| env::var(\"CARGO_MANIFEST_DIR\"))\n+            .unwrap_or_else(|_| \".\".to_string()),\n+    );\n     loop {\n         for config_file_name in &CONFIG_FILE_NAMES {\n             let config_file = current.join(config_file_name);"}, {"sha": "fbff693f8870964b226cf1f80852bf3c69c40acf", "filename": "src/driver.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e176324fc593644a3ce00aa2ec7c1887d571003e/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e176324fc593644a3ce00aa2ec7c1887d571003e/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=e176324fc593644a3ce00aa2ec7c1887d571003e", "patch": "@@ -20,6 +20,46 @@ fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }\n \n+/// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n+/// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n+fn arg_value<'a>(\n+    args: impl IntoIterator<Item = &'a String>,\n+    find_arg: &str,\n+    pred: impl Fn(&str) -> bool,\n+) -> Option<&'a str> {\n+    let mut args = args.into_iter().map(String::as_str);\n+\n+    while let Some(arg) = args.next() {\n+        let arg: Vec<_> = arg.splitn(2, '=').collect();\n+        if arg.get(0) != Some(&find_arg) {\n+            continue;\n+        }\n+\n+        let value = arg.get(1).cloned().or_else(|| args.next());\n+        if value.as_ref().map_or(false, |p| pred(p)) {\n+            return value;\n+        }\n+    }\n+    None\n+}\n+\n+#[test]\n+fn test_arg_value() {\n+    let args: Vec<_> = [\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"]\n+        .iter()\n+        .map(|s| s.to_string())\n+        .collect();\n+\n+    assert_eq!(arg_value(None, \"--foobar\", |_| true), None);\n+    assert_eq!(arg_value(&args, \"--bar\", |_| false), None);\n+    assert_eq!(arg_value(&args, \"--bar\", |_| true), Some(\"bar\"));\n+    assert_eq!(arg_value(&args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n+    assert_eq!(arg_value(&args, \"--bar\", |p| p == \"foo\"), None);\n+    assert_eq!(arg_value(&args, \"--foobar\", |p| p == \"foo\"), None);\n+    assert_eq!(arg_value(&args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n+    assert_eq!(arg_value(&args, \"--foo\", |_| true), None);\n+}\n+\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n@@ -32,8 +72,19 @@ pub fn main() {\n                 exit(0);\n             }\n \n-            let sys_root = option_env!(\"SYSROOT\")\n-                .map(String::from)\n+            let mut orig_args: Vec<String> = env::args().collect();\n+\n+            // Get the sysroot, looking from most specific to this invocation to the least:\n+            // - command line\n+            // - runtime environment\n+            //    - SYSROOT\n+            //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n+            // - sysroot from rustc in the path\n+            // - compile-time environment\n+            let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n+            let have_sys_root_arg = sys_root_arg.is_some();\n+            let sys_root = sys_root_arg\n+                .map(|s| s.to_string())\n                 .or_else(|| std::env::var(\"SYSROOT\").ok())\n                 .or_else(|| {\n                     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n@@ -49,11 +100,11 @@ pub fn main() {\n                         .and_then(|out| String::from_utf8(out.stdout).ok())\n                         .map(|s| s.trim().to_owned())\n                 })\n+                .or_else(|| option_env!(\"SYSROOT\").map(String::from))\n                 .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n             // We're invoking the compiler programmatically, so we ignore this/\n-            let mut orig_args: Vec<String> = env::args().collect();\n             if orig_args.len() <= 1 {\n                 std::process::exit(1);\n             }\n@@ -64,7 +115,7 @@ pub fn main() {\n             // this conditional check for the --sysroot flag is there so users can call\n             // `clippy_driver` directly\n             // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n+            let mut args: Vec<String> = if have_sys_root_arg {\n                 orig_args.clone()\n             } else {\n                 orig_args\n@@ -79,7 +130,7 @@ pub fn main() {\n             // crate is\n             // linted but not built\n             let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-                || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+                || arg_value(&orig_args, \"--emit\", |val| val.split(',').any(|e| e == \"metadata\")).is_some();\n \n             if clippy_enabled {\n                 args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);"}, {"sha": "208262ca30f12a10d6438f7359d5f58a791cad5c", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e176324fc593644a3ce00aa2ec7c1887d571003e/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e176324fc593644a3ce00aa2ec7c1887d571003e/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=e176324fc593644a3ce00aa2ec7c1887d571003e", "patch": "@@ -61,10 +61,8 @@ where\n {\n     let mut args = vec![\"check\".to_owned()];\n \n-    let mut found_dashes = false;\n     for arg in old_args.by_ref() {\n-        found_dashes |= arg == \"--\";\n-        if found_dashes {\n+        if arg == \"--\" {\n             break;\n         }\n         args.push(arg);\n@@ -82,11 +80,7 @@ where\n     let target_dir = std::env::var_os(\"CLIPPY_DOGFOOD\")\n         .map(|_| {\n             std::env::var_os(\"CARGO_MANIFEST_DIR\").map_or_else(\n-                || {\n-                    let mut fallback = std::ffi::OsString::new();\n-                    fallback.push(\"clippy_dogfood\");\n-                    fallback\n-                },\n+                || std::ffi::OsString::from(\"clippy_dogfood\"),\n                 |d| {\n                     std::path::PathBuf::from(d)\n                         .join(\"target\")"}]}