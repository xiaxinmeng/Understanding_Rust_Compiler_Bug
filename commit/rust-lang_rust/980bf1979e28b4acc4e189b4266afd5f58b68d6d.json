{"sha": "980bf1979e28b4acc4e189b4266afd5f58b68d6d", "node_id": "C_kwDOAAsO6NoAKDk4MGJmMTk3OWUyOGI0YWNjNGUxODliNDI2NmFmZDVmNThiNjhkNmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-15T00:01:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-15T00:01:36Z"}, "message": "Rollup merge of #106859 - tialaramex:master, r=Nilstrieb\n\nSuggestion for type mismatch when we need a u8 but the programmer wrote a char literal\n\nToday Rust just points out that we have a char and we need a u8, but if I wrote 'A' then I could fix this by just writing b'A' instead. This code should detect the case where we're about to report a type mismatch of this kind, and the programmer wrote a char literal, and the char they wrote is ASCII, so therefore just prefixing b to make a byte literal will do what they meant.\n\nI have definitely written this mistake more than once, it's not difficult to figure out what to do, but the compiler might as well tell us anyway.\n\nI provided a test with two simple examples where the suggestion is appropriate, and one where it is not because the char literal is not ASCII, showing that the suggestion is only triggered in the former cases.\n\nI have contributed only a small typo doc fix before, so this is my first substantive rustc change.", "tree": {"sha": "9f5ba0bbb63b7ca679e098636a1e0ffff6e4b82b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f5ba0bbb63b7ca679e098636a1e0ffff6e4b82b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/980bf1979e28b4acc4e189b4266afd5f58b68d6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjw0JgCRBK7hj4Ov3rIwAAKFQIADeG2MIl4f6z80MYF7x50lGV\nKN1tcuqxQe5H2X3mMSPbJFBVykZoan8TyQbI4jsrLLN1D8L5din2JKAlltDPf3+f\nt0PEHl3ZwwOaG7/KXDU/VrpCUxzzxJClsrbGNgN0RvZ+80w4zThwb7knIH2kePsn\nCzdbJetUEG7EfqTEfVI2udieUo0IqfnQNLqAz2iAcHID7Owrif8/lnuph/NjdNwQ\n9yxVQzTCipAysfFEy2aH8eVU1CmjcrJiBIuseyaymVrQUjMhhkH8vAyeON29Jtf5\n4SexCXbQcOQoL0hM3xAh24QEwiZxaoqPO1kNjaitXxgwlvDMfJZiLB2+oDhh+jU=\n=f7q1\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f5ba0bbb63b7ca679e098636a1e0ffff6e4b82b\nparent d7fcd01f6778a01a133a4947f6a693593e89d8b3\nparent 130d02b62e65c5f2a434eaec63c4249e9d508487\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673740896 +0100\ncommitter GitHub <noreply@github.com> 1673740896 +0100\n\nRollup merge of #106859 - tialaramex:master, r=Nilstrieb\n\nSuggestion for type mismatch when we need a u8 but the programmer wrote a char literal\n\nToday Rust just points out that we have a char and we need a u8, but if I wrote 'A' then I could fix this by just writing b'A' instead. This code should detect the case where we're about to report a type mismatch of this kind, and the programmer wrote a char literal, and the char they wrote is ASCII, so therefore just prefixing b to make a byte literal will do what they meant.\n\nI have definitely written this mistake more than once, it's not difficult to figure out what to do, but the compiler might as well tell us anyway.\n\nI provided a test with two simple examples where the suggestion is appropriate, and one where it is not because the char literal is not ASCII, showing that the suggestion is only triggered in the former cases.\n\nI have contributed only a small typo doc fix before, so this is my first substantive rustc change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/980bf1979e28b4acc4e189b4266afd5f58b68d6d", "html_url": "https://github.com/rust-lang/rust/commit/980bf1979e28b4acc4e189b4266afd5f58b68d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/980bf1979e28b4acc4e189b4266afd5f58b68d6d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7fcd01f6778a01a133a4947f6a693593e89d8b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fcd01f6778a01a133a4947f6a693593e89d8b3", "html_url": "https://github.com/rust-lang/rust/commit/d7fcd01f6778a01a133a4947f6a693593e89d8b3"}, {"sha": "130d02b62e65c5f2a434eaec63c4249e9d508487", "url": "https://api.github.com/repos/rust-lang/rust/commits/130d02b62e65c5f2a434eaec63c4249e9d508487", "html_url": "https://github.com/rust-lang/rust/commit/130d02b62e65c5f2a434eaec63c4249e9d508487"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "abd99fc74dacc323b664a50f396b4911f15a6be5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/980bf1979e28b4acc4e189b4266afd5f58b68d6d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980bf1979e28b4acc4e189b4266afd5f58b68d6d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=980bf1979e28b4acc4e189b4266afd5f58b68d6d", "patch": "@@ -1923,6 +1923,22 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (ty::Tuple(fields), _) => {\n                             self.emit_tuple_wrap_err(&mut err, span, found, fields)\n                         }\n+                        // If a byte was expected and the found expression is a char literal\n+                        // containing a single ASCII character, perhaps the user meant to write `b'c'` to\n+                        // specify a byte literal\n+                        (ty::Uint(ty::UintTy::U8), ty::Char) => {\n+                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n+                                && let Some(code) = code.strip_prefix('\\'').and_then(|s| s.strip_suffix('\\''))\n+                                && code.chars().next().map_or(false, |c| c.is_ascii())\n+                            {\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"if you meant to write a byte literal, prefix with `b`\",\n+                                    format!(\"b'{}'\", escape_literal(code)),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                        }\n                         // If a character was expected and the found expression is a string literal\n                         // containing a single character, perhaps the user meant to write `'c'` to\n                         // specify a character literal (issue #92479)"}, {"sha": "34199f8c37c101d2d7236a45ece953407427910d", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/980bf1979e28b4acc4e189b4266afd5f58b68d6d/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980bf1979e28b4acc4e189b4266afd5f58b68d6d/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.rs?ref=980bf1979e28b4acc4e189b4266afd5f58b68d6d", "patch": "@@ -0,0 +1,18 @@\n+// Tests that a suggestion is issued for type mismatch errors when a\n+// u8 is expected and a char literal which is ASCII is supplied.\n+\n+fn foo(_t: u8) {}\n+\n+fn main() {\n+    let _x: u8 = 'X';\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: if you meant to write a byte literal, prefix with `b`\n+\n+    foo('#');\n+    //~^ ERROR: mismatched types [E0308]\n+    //~| HELP: if you meant to write a byte literal, prefix with `b`\n+\n+    // Do not issue the suggestion if the char literal isn't ASCII\n+    let _t: u8 = '\u20ac';\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "c9c2e7498d058c7953160e03f43494977bfa6deb", "filename": "tests/ui/suggestions/type-mismatch-byte-literal.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/980bf1979e28b4acc4e189b4266afd5f58b68d6d/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/980bf1979e28b4acc4e189b4266afd5f58b68d6d/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-mismatch-byte-literal.stderr?ref=980bf1979e28b4acc4e189b4266afd5f58b68d6d", "patch": "@@ -0,0 +1,42 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:7:18\n+   |\n+LL |     let _x: u8 = 'X';\n+   |             --   ^^^ expected `u8`, found `char`\n+   |             |\n+   |             expected due to this\n+   |\n+help: if you meant to write a byte literal, prefix with `b`\n+   |\n+LL |     let _x: u8 = b'X';\n+   |                  ~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:11:9\n+   |\n+LL |     foo('#');\n+   |     --- ^^^ expected `u8`, found `char`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/type-mismatch-byte-literal.rs:4:4\n+   |\n+LL | fn foo(_t: u8) {}\n+   |    ^^^ ------\n+help: if you meant to write a byte literal, prefix with `b`\n+   |\n+LL |     foo(b'#');\n+   |         ~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch-byte-literal.rs:16:18\n+   |\n+LL |     let _t: u8 = '\u20ac';\n+   |             --   ^^^ expected `u8`, found `char`\n+   |             |\n+   |             expected due to this\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}