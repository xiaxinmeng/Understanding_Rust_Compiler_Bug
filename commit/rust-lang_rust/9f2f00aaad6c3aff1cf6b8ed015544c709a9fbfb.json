{"sha": "9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMmYwMGFhYWQ2YzNhZmYxY2Y2YjhlZDAxNTU0NGM3MDlhOWZiZmI=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-24T16:18:24Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:51Z"}, "message": "allow unsized types in `RangeArgument`", "tree": {"sha": "dd8866fcf2594a72ab7b0f3db3f0b63448a3c789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd8866fcf2594a72ab7b0f3db3f0b63448a3c789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "html_url": "https://github.com/rust-lang/rust/commit/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679", "html_url": "https://github.com/rust-lang/rust/commit/14b0ea8aa6886ef831b2e8074c5bbd7b36cc5679"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "1fa634362cfa33ae6ac7d043aedc125b199218dc", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "patch": "@@ -73,7 +73,7 @@ pub trait RangeArgument<T: ?Sized> {\n \n // FIXME add inclusive ranges to RangeArgument\n \n-impl<T> RangeArgument<T> for RangeFull {}\n+impl<T: ?Sized> RangeArgument<T> for RangeFull {}\n \n impl<T> RangeArgument<T> for RangeFrom<T> {\n     fn start(&self) -> Bound<&T> {\n@@ -113,3 +113,21 @@ impl<T> RangeArgument<T> for (Bound<T>, Bound<T>) {\n         }\n     }\n }\n+\n+impl<'a, T: ?Sized + 'a> RangeArgument<T> for (Bound<&'a T>, Bound<&'a T>) {\n+    fn start(&self) -> Bound<&T> {\n+        match *self {\n+            (Included(start), _) => Included(start),\n+            (Excluded(start), _) => Excluded(start),\n+            (Unbounded, _)       => Unbounded,\n+        }\n+    }\n+\n+    fn end(&self) -> Bound<&T> {\n+        match *self {\n+            (_, Included(end)) => Included(end),\n+            (_, Excluded(end)) => Excluded(end),\n+            (_, Unbounded)     => Unbounded,\n+        }\n+    }\n+}"}]}