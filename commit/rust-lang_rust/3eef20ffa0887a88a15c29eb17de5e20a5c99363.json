{"sha": "3eef20ffa0887a88a15c29eb17de5e20a5c99363", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZWYyMGZmYTA4ODdhODhhMTVjMjllYjE3ZGU1ZTIwYTVjOTkzNjM=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-11-22T19:36:29Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-12-22T11:19:46Z"}, "message": "Improve documentation on `success` and `failure` arguments", "tree": {"sha": "13f878d2bd67b4e9794345025087ac62135e7162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f878d2bd67b4e9794345025087ac62135e7162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eef20ffa0887a88a15c29eb17de5e20a5c99363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eef20ffa0887a88a15c29eb17de5e20a5c99363", "html_url": "https://github.com/rust-lang/rust/commit/3eef20ffa0887a88a15c29eb17de5e20a5c99363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eef20ffa0887a88a15c29eb17de5e20a5c99363/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427996a2868ec958dc1a5bee564fb8f377241255", "url": "https://api.github.com/repos/rust-lang/rust/commits/427996a2868ec958dc1a5bee564fb8f377241255", "html_url": "https://github.com/rust-lang/rust/commit/427996a2868ec958dc1a5bee564fb8f377241255"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "36857979af8c111d319d37210197ed7e83b8ef48", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3eef20ffa0887a88a15c29eb17de5e20a5c99363/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eef20ffa0887a88a15c29eb17de5e20a5c99363/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=3eef20ffa0887a88a15c29eb17de5e20a5c99363", "patch": "@@ -514,9 +514,10 @@ impl AtomicBool {\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n     /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if the\n-    /// operation succeeds while the second describes the required ordering when the\n-    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// ordering of this operation. `success` describes the required ordering for the\n+    /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n+    /// `failure` describes the required ordering for the load operation that takes place when\n+    /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n@@ -572,9 +573,10 @@ impl AtomicBool {\n     /// previous value.\n     ///\n     /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if the\n-    /// operation succeeds while the second describes the required ordering when the\n-    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// ordering of this operation. `success` describes the required ordering for the\n+    /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n+    /// `failure` describes the required ordering for the load operation that takes place when\n+    /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n@@ -1138,9 +1140,10 @@ impl<T> AtomicPtr<T> {\n     /// the previous value. On success this value is guaranteed to be equal to `current`.\n     ///\n     /// `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if the\n-    /// operation succeeds while the second describes the required ordering when the\n-    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// ordering of this operation. `success` describes the required ordering for the\n+    /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n+    /// `failure` describes the required ordering for the load operation that takes place when\n+    /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n@@ -1201,9 +1204,10 @@ impl<T> AtomicPtr<T> {\n     /// previous value.\n     ///\n     /// `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n-    /// ordering of this operation. The first describes the required ordering if the\n-    /// operation succeeds while the second describes the required ordering when the\n-    /// operation fails. Using [`Acquire`] as success ordering makes the store part\n+    /// ordering of this operation. `success` describes the required ordering for the\n+    /// read-modify-write operation that takes place if the comparison with `current` succeeds.\n+    /// `failure` describes the required ordering for the load operation that takes place when\n+    /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n@@ -1708,9 +1712,10 @@ containing the previous value. On success this value is guaranteed to be equal t\n `current`.\n \n `compare_exchange` takes two [`Ordering`] arguments to describe the memory\n-ordering of this operation. The first describes the required ordering if the\n-operation succeeds while the second describes the required ordering when the\n-operation fails. Using [`Acquire`] as success ordering makes the store part\n+ordering of this operation. `success` describes the required ordering for the\n+read-modify-write operation that takes place if the comparison with `current` succeeds.\n+`failure` describes the required ordering for the load operation that takes place when\n+the comparison fails. Using [`Acquire`] as success ordering makes the store part\n of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n@@ -1760,9 +1765,10 @@ platforms. The return value is a result indicating whether the new value was\n written and containing the previous value.\n \n `compare_exchange_weak` takes two [`Ordering`] arguments to describe the memory\n-ordering of this operation. The first describes the required ordering if the\n-operation succeeds while the second describes the required ordering when the\n-operation fails. Using [`Acquire`] as success ordering makes the store part\n+ordering of this operation. `success` describes the required ordering for the\n+read-modify-write operation that takes place if the comparison with `current` succeeds.\n+`failure` describes the required ordering for the load operation that takes place when\n+the comparison fails. Using [`Acquire`] as success ordering makes the store part\n of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering."}]}