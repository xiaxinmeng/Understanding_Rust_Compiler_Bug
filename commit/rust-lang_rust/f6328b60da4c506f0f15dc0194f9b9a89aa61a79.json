{"sha": "f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzI4YjYwZGE0YzUwNmYwZjE1ZGMwMTk0ZjliOWE4OWFhNjFhNzk=", "commit": {"author": {"name": "Aaron Liblong", "email": "liblonga@physics.utoronto.ca", "date": "2014-12-08T06:03:35Z"}, "committer": {"name": "Aaron Liblong", "email": "liblonga@physics.utoronto.ca", "date": "2014-12-19T23:21:24Z"}, "message": "Reform power_of_two methods for perf increase & semantic change to consider 0 not a power of 2.\n\nVec panics when attempting to reserve capacity > int::MAX (uint::MAX / 2).", "tree": {"sha": "fa079f83c6ba1a4d2651230958c078e7c6ef1a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa079f83c6ba1a4d2651230958c078e7c6ef1a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "html_url": "https://github.com/rust-lang/rust/commit/f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/comments", "author": {"login": "aliblong", "id": 7608707, "node_id": "MDQ6VXNlcjc2MDg3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7608707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliblong", "html_url": "https://github.com/aliblong", "followers_url": "https://api.github.com/users/aliblong/followers", "following_url": "https://api.github.com/users/aliblong/following{/other_user}", "gists_url": "https://api.github.com/users/aliblong/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliblong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliblong/subscriptions", "organizations_url": "https://api.github.com/users/aliblong/orgs", "repos_url": "https://api.github.com/users/aliblong/repos", "events_url": "https://api.github.com/users/aliblong/events{/privacy}", "received_events_url": "https://api.github.com/users/aliblong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliblong", "id": 7608707, "node_id": "MDQ6VXNlcjc2MDg3MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7608707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliblong", "html_url": "https://github.com/aliblong", "followers_url": "https://api.github.com/users/aliblong/followers", "following_url": "https://api.github.com/users/aliblong/following{/other_user}", "gists_url": "https://api.github.com/users/aliblong/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliblong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliblong/subscriptions", "organizations_url": "https://api.github.com/users/aliblong/orgs", "repos_url": "https://api.github.com/users/aliblong/repos", "events_url": "https://api.github.com/users/aliblong/events{/privacy}", "received_events_url": "https://api.github.com/users/aliblong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d6956c3bdb290b9fd539c5dc15a2b502da5e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d6956c3bdb290b9fd539c5dc15a2b502da5e7a", "html_url": "https://github.com/rust-lang/rust/commit/99d6956c3bdb290b9fd539c5dc15a2b502da5e7a"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "e986b2044306f058291a07cb37d1aa01342a9743", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "patch": "@@ -710,20 +710,10 @@ impl<T> Vec<T> {\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn reserve(&mut self, additional: uint) {\n         if self.cap - self.len < additional {\n-            match self.len.checked_add(additional) {\n-                None => panic!(\"Vec::reserve: `uint` overflow\"),\n-                // if the checked_add\n-                Some(new_cap) => {\n-                    let amort_cap = new_cap.next_power_of_two();\n-                    // next_power_of_two will overflow to exactly 0 for really big capacities\n-                    let cap = if amort_cap == 0 {\n-                        new_cap\n-                    } else {\n-                        amort_cap\n-                    };\n-                    self.grow_capacity(cap)\n-                }\n-            }\n+            let err_msg = \"Vec::reserve: `uint` overflow\";\n+            let new_cap = self.len.checked_add(additional).expect(err_msg)\n+                                  .checked_next_power_of_two().expect(err_msg);\n+            self.grow_capacity(new_cap);\n         }\n     }\n "}, {"sha": "39d8ac279a0863d0b29d1c1643ff4630c4f40a81", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "patch": "@@ -673,35 +673,30 @@ signed_int_impl! { int }\n #[unstable = \"recently settled as part of numerics reform\"]\n pub trait UnsignedInt: Int {\n     /// Returns `true` iff `self == 2^k` for some `k`.\n+    #[inline]\n     fn is_power_of_two(self) -> bool {\n-        (self - Int::one()) & self == Int::zero()\n+        (self - Int::one()) & self == Int::zero() && !(self == Int::zero())\n     }\n \n     /// Returns the smallest power of two greater than or equal to `self`.\n+    /// Unspecified behavior on overflow.\n     #[inline]\n     fn next_power_of_two(self) -> Self {\n-        let halfbits = size_of::<Self>() * 4;\n-        let mut tmp = self - Int::one();\n-        let mut shift = 1u;\n-        while shift <= halfbits {\n-            tmp = tmp | (tmp >> shift);\n-            shift = shift << 1u;\n-        }\n-        tmp + Int::one()\n+        let bits = size_of::<Self>() * 8;\n+        let one: Self = Int::one();\n+        one << ((bits - (self - one).leading_zeros()) % bits)\n     }\n \n     /// Returns the smallest power of two greater than or equal to `n`. If the\n     /// next power of two is greater than the type's maximum value, `None` is\n     /// returned, otherwise the power of two is wrapped in `Some`.\n     fn checked_next_power_of_two(self) -> Option<Self> {\n-        let halfbits = size_of::<Self>() * 4;\n-        let mut tmp = self - Int::one();\n-        let mut shift = 1u;\n-        while shift <= halfbits {\n-            tmp = tmp | (tmp >> shift);\n-            shift = shift << 1u;\n+        let npot = self.next_power_of_two();\n+        if npot >= self {\n+            Some(npot)\n+        } else {\n+            None\n         }\n-        tmp.checked_add(Int::one())\n     }\n }\n "}, {"sha": "6bfea7e3cb2a84b0b68a921dbe03a1d44c7e3c5c", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "patch": "@@ -623,10 +623,10 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// Resizes the internal vectors to a new capacity. It's your responsibility to:\n     ///   1) Make sure the new capacity is enough for all the elements, accounting\n     ///      for the load factor.\n-    ///   2) Ensure new_capacity is a power of two.\n+    ///   2) Ensure new_capacity is a power of two or zero.\n     fn resize(&mut self, new_capacity: uint) {\n         assert!(self.table.size() <= new_capacity);\n-        assert!(new_capacity.is_power_of_two());\n+        assert!(new_capacity.is_power_of_two() || new_capacity == 0);\n \n         let mut old_table = replace(&mut self.table, RawTable::new(new_capacity));\n         let old_size = old_table.size();"}, {"sha": "fdece4fbc0d9f3e57c9445ee00bec642d9ab1ad4", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6328b60da4c506f0f15dc0194f9b9a89aa61a79/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=f6328b60da4c506f0f15dc0194f9b9a89aa61a79", "patch": "@@ -664,11 +664,32 @@ mod tests {\n         assert_eq!(third.checked_mul(4), None);\n     }\n \n+    macro_rules! test_is_power_of_two {\n+        ($test_name:ident, $T:ident) => (\n+            fn $test_name() {\n+                #![test]\n+                assert_eq!((0 as $T).is_power_of_two(), false);\n+                assert_eq!((1 as $T).is_power_of_two(), true);\n+                assert_eq!((2 as $T).is_power_of_two(), true);\n+                assert_eq!((3 as $T).is_power_of_two(), false);\n+                assert_eq!((4 as $T).is_power_of_two(), true);\n+                assert_eq!((5 as $T).is_power_of_two(), false);\n+                assert!(($T::MAX / 2 + 1).is_power_of_two(), true);\n+            }\n+        )\n+    }\n+\n+    test_is_power_of_two!{ test_is_power_of_two_u8, u8 }\n+    test_is_power_of_two!{ test_is_power_of_two_u16, u16 }\n+    test_is_power_of_two!{ test_is_power_of_two_u32, u32 }\n+    test_is_power_of_two!{ test_is_power_of_two_u64, u64 }\n+    test_is_power_of_two!{ test_is_power_of_two_uint, uint }\n+\n     macro_rules! test_next_power_of_two {\n         ($test_name:ident, $T:ident) => (\n             fn $test_name() {\n                 #![test]\n-                assert_eq!((0 as $T).next_power_of_two(), 0);\n+                assert_eq!((0 as $T).next_power_of_two(), 1);\n                 let mut next_power = 1;\n                 for i in range::<$T>(1, 40) {\n                      assert_eq!(i.next_power_of_two(), next_power);\n@@ -688,15 +709,15 @@ mod tests {\n         ($test_name:ident, $T:ident) => (\n             fn $test_name() {\n                 #![test]\n-                assert_eq!((0 as $T).checked_next_power_of_two(), None);\n+                assert_eq!((0 as $T).checked_next_power_of_two(), Some(1));\n+                assert!(($T::MAX / 2).checked_next_power_of_two().is_some());\n+                assert_eq!(($T::MAX - 1).checked_next_power_of_two(), None);\n+                assert_eq!($T::MAX.checked_next_power_of_two(), None);\n                 let mut next_power = 1;\n                 for i in range::<$T>(1, 40) {\n                      assert_eq!(i.checked_next_power_of_two(), Some(next_power));\n                      if i == next_power { next_power *= 2 }\n                 }\n-                assert!(($T::MAX / 2).checked_next_power_of_two().is_some());\n-                assert_eq!(($T::MAX - 1).checked_next_power_of_two(), None);\n-                assert_eq!($T::MAX.checked_next_power_of_two(), None);\n             }\n         )\n     }"}]}