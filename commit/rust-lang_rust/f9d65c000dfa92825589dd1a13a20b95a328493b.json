{"sha": "f9d65c000dfa92825589dd1a13a20b95a328493b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDY1YzAwMGRmYTkyODI1NTg5ZGQxYTEzYTIwYjk1YTMyODQ5M2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-19T23:01:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-19T23:01:37Z"}, "message": "Rollup merge of #60590 - petertodd:2018-test-union-nonzero, r=nikomatsakis,Centril\n\nTest interaction of unions with non-zero/niche-filling optimization\n\nNotably this nails down part of the behavior that MaybeUninit assumes, e.g. that a Option<MaybeUninit<&u8>> does not take advantage of non-zero optimization, and thus is a safe construct.\n\nIt also verifies the status quo: that even unions that could theoretically take advantage of niches don't. (relevant: https://github.com/rust-lang/rust/issues/36394)", "tree": {"sha": "a30423db68035d0500fc8e349abee50ff434bc84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30423db68035d0500fc8e349abee50ff434bc84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d65c000dfa92825589dd1a13a20b95a328493b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4eBRCRBK7hj4Ov3rIwAAdHIIAKMgZf9ib4uZSKHnGVjEGXfR\nGGxF/W1JzADhi+MBAh8MAvL1JfRLLcOa6YMXu+ncwGcPhQ8zYn0GejLIdDgDXPmd\nf3SfDcLKeOI+vQ7B+3fHFS65TLcDHbn2f1og29sbhgbFaeI9RvpAfsIhk59KSCzP\nFK2nb0iutp5Srum5NEhKiuDmEoVDnTwiPjGyXbDO4Nm21kjvkRpQG/eDnB5qDj+E\nIg2j0IcjYaio5QKLHHNeivUr5J+MRtuVB3o24HZq9pCajEBU0ClNo6fzBppLP0Qv\nBIQE+Pqv398B5LBiUqo69U9zm8frVDNtxi/w9qYE5suuV/iuxqCWcICrBx8iwHs=\n=hKqS\n-----END PGP SIGNATURE-----\n", "payload": "tree a30423db68035d0500fc8e349abee50ff434bc84\nparent 6afcb5628523b0baae5704ad34ac1aba8ba10de6\nparent a91ad60158647c1f6a89b9c01915279ce9314a65\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558306897 +0200\ncommitter GitHub <noreply@github.com> 1558306897 +0200\n\nRollup merge of #60590 - petertodd:2018-test-union-nonzero, r=nikomatsakis,Centril\n\nTest interaction of unions with non-zero/niche-filling optimization\n\nNotably this nails down part of the behavior that MaybeUninit assumes, e.g. that a Option<MaybeUninit<&u8>> does not take advantage of non-zero optimization, and thus is a safe construct.\n\nIt also verifies the status quo: that even unions that could theoretically take advantage of niches don't. (relevant: https://github.com/rust-lang/rust/issues/36394)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d65c000dfa92825589dd1a13a20b95a328493b", "html_url": "https://github.com/rust-lang/rust/commit/f9d65c000dfa92825589dd1a13a20b95a328493b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d65c000dfa92825589dd1a13a20b95a328493b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6afcb5628523b0baae5704ad34ac1aba8ba10de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6afcb5628523b0baae5704ad34ac1aba8ba10de6", "html_url": "https://github.com/rust-lang/rust/commit/6afcb5628523b0baae5704ad34ac1aba8ba10de6"}, {"sha": "a91ad60158647c1f6a89b9c01915279ce9314a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/a91ad60158647c1f6a89b9c01915279ce9314a65", "html_url": "https://github.com/rust-lang/rust/commit/a91ad60158647c1f6a89b9c01915279ce9314a65"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "bd84b46bf3d234a9e6bbb3db18775974d837241b", "filename": "src/test/run-pass/union/union-nonzero.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f9d65c000dfa92825589dd1a13a20b95a328493b/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d65c000dfa92825589dd1a13a20b95a328493b/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-nonzero.rs?ref=f9d65c000dfa92825589dd1a13a20b95a328493b", "patch": "@@ -0,0 +1,51 @@\n+// run-pass\n+#![allow(dead_code)]\n+\n+// Tests that unions aren't subject to unsafe non-zero/niche-filling optimizations.\n+//\n+// For example, if a union `U` can contain both a `&T` and a `*const T`, there's definitely no\n+// bit-value that an `Option<U>` could reuse as `None`; this test makes sure that isn't done.\n+//\n+// Secondly, this tests the status quo (not a guarantee; subject to change!) to not apply such\n+// optimizations to types containing unions even if they're theoretically possible. (discussion:\n+// https://github.com/rust-lang/rust/issues/36394)\n+//\n+// Notably this nails down part of the behavior that `MaybeUninit` assumes: that a\n+// `Option<MaybeUninit<&u8>>` does not take advantage of non-zero optimization, and thus is a safe\n+// construct.\n+\n+use std::mem::{size_of, transmute};\n+\n+union U1<A: Copy> {\n+    a: A,\n+}\n+\n+union U2<A: Copy, B: Copy> {\n+    a: A,\n+    b: B,\n+}\n+\n+// Option<E> uses a value other than 0 and 1 as None\n+#[derive(Clone,Copy)]\n+enum E {\n+    A = 0,\n+    B = 1,\n+}\n+\n+fn main() {\n+    // Unions do not participate in niche-filling/non-zero optimization...\n+    assert!(size_of::<Option<U2<&u8, u8>>>() > size_of::<U2<&u8, u8>>());\n+    assert!(size_of::<Option<U2<&u8, ()>>>() > size_of::<U2<&u8, ()>>());\n+    assert!(size_of::<Option<U2<u8, E>>>() > size_of::<U2<u8, E>>());\n+\n+    // ...even when theoretically possible:\n+    assert!(size_of::<Option<U1<&u8>>>() > size_of::<U1<&u8>>());\n+    assert!(size_of::<Option<U2<&u8, &u8>>>() > size_of::<U2<&u8, &u8>>());\n+\n+    // The unused bits of the () variant can have any value.\n+    let zeroed: U2<&u8, ()> = unsafe { transmute(std::ptr::null::<u8>()) };\n+\n+    if let None = Some(zeroed) {\n+        panic!()\n+    }\n+}"}, {"sha": "0127261b2b7d0a6111f68b71c1af2690c5c7819b", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9d65c000dfa92825589dd1a13a20b95a328493b/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d65c000dfa92825589dd1a13a20b95a328493b/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=f9d65c000dfa92825589dd1a13a20b95a328493b", "patch": "@@ -57,6 +57,15 @@ pub enum Enum4<A, B, C, D> {\n     Four(D)\n }\n \n+pub union Union1<A: Copy> {\n+    a: A,\n+}\n+\n+pub union Union2<A: Copy, B: Copy> {\n+    a: A,\n+    b: B,\n+}\n+\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n     let _x: MyOption<NonZeroU32> = Default::default();\n@@ -69,5 +78,13 @@ fn start(_: isize, _: *const *const u8) -> isize {\n     let _e: Enum4<(), char, (), ()> = Enum4::One(());\n     let _f: Enum4<(), (), bool, ()> = Enum4::One(());\n     let _g: Enum4<(), (), (), MyOption<u8>> = Enum4::One(());\n+\n+    // Unions do not currently participate in niche filling.\n+    let _h: MyOption<Union2<NonZeroU32, u32>> = Default::default();\n+\n+    // ...even when theoretically possible.\n+    let _i: MyOption<Union1<NonZeroU32>> = Default::default();\n+    let _j: MyOption<Union2<NonZeroU32, NonZeroU32>> = Default::default();\n+\n     0\n }"}, {"sha": "301edc0d086b11fee1b251fd47b5ab7ebba36190", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9d65c000dfa92825589dd1a13a20b95a328493b/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f9d65c000dfa92825589dd1a13a20b95a328493b/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=f9d65c000dfa92825589dd1a13a20b95a328493b", "patch": "@@ -14,6 +14,21 @@ print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size     end padding: 1 bytes\n+print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n+print-type-size type: `MyOption<Union2<std::num::NonZeroU32, std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n+print-type-size type: `MyOption<Union2<std::num::NonZeroU32, u32>>`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 4 bytes\n+print-type-size     variant `Some`: 4 bytes\n+print-type-size         field `.0`: 4 bytes\n+print-type-size     variant `None`: 0 bytes\n print-type-size type: `NestedNonZero`: 8 bytes, alignment: 4 bytes\n print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n@@ -36,6 +51,17 @@ print-type-size type: `MyOption<std::num::NonZeroU32>`: 4 bytes, alignment: 4 by\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size type: `Union1<std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Union1`: 4 bytes\n+print-type-size         field `.a`: 4 bytes\n+print-type-size type: `Union2<std::num::NonZeroU32, std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Union2`: 4 bytes\n+print-type-size         field `.a`: 4 bytes\n+print-type-size         field `.b`: 4 bytes, offset: 0 bytes, alignment: 4 bytes\n+print-type-size type: `Union2<std::num::NonZeroU32, u32>`: 4 bytes, alignment: 4 bytes\n+print-type-size     variant `Union2`: 4 bytes\n+print-type-size         field `.a`: 4 bytes\n+print-type-size         field `.b`: 4 bytes, offset: 0 bytes, alignment: 4 bytes\n print-type-size type: `std::num::NonZeroU32`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.0`: 4 bytes\n print-type-size type: `Enum4<(), (), (), MyOption<u8>>`: 2 bytes, alignment: 1 bytes"}]}