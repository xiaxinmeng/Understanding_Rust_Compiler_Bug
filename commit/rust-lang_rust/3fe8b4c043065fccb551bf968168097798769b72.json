{"sha": "3fe8b4c043065fccb551bf968168097798769b72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZThiNGMwNDMwNjVmY2NiNTUxYmY5NjgxNjgwOTc3OTg3NjliNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-28T21:25:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-28T21:25:48Z"}, "message": "Rollup merge of #57915 - petrochenkov:notto-disu, r=zackmdavis\n\nPretty print `$crate` as `crate` or `crate_name` in more cases\n\nSo, people do parse output of `--pretty=expanded` (sigh), so covering only the legacy proc-macro case (like it was done in https://github.com/rust-lang/rust/pull/57155) is not enough.\n\nThis PRs resolves all `$crate`s produced by macros, so they are all printed in the parseable form `$crate::foo` -> `crate::foo` or `crate_name::foo`.\n\nFixes https://github.com/rust-lang/rust/issues/38016#issuecomment-455851334\nFixes https://github.com/rust-lang/rust/pull/57155#issuecomment-455807195", "tree": {"sha": "f91a8ff95c2cd51e7d257ea2a2312c0153c04984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91a8ff95c2cd51e7d257ea2a2312c0153c04984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fe8b4c043065fccb551bf968168097798769b72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcT3NcCRBK7hj4Ov3rIwAAdHIIAG4irz5FIhCjv8dZEZm3nzbu\nSZb+suIsusKmAdsApf9TdBiSonX7sYN2KLmkmy7gQeGxU0gq4fRka0vrEChmgMDK\nYd93On6JCwPLb7Rk4SWaMlV/f8l0hwH+cPQ6DyDbHpKb7i5VsXAlkZ6LnFmVjawr\nkylIQYfzdvUXiw0yl3/IxqSncRbVaEcaSumT+uKKqbRWuUU4Fnm5qc6XW2xzi/Jo\nqUBjPo1KJwag310nuom+FG8qzR917OKUxJkS0J7opD3x3G+1dkmxXhhN3uFKq7aN\nRFcXNDhBlMjX2RH2I40ZTv1Sr2kgzERkPrxbbewiW/Y4EkQxX6y2G6QzjQ5fVZM=\n=/xjQ\n-----END PGP SIGNATURE-----\n", "payload": "tree f91a8ff95c2cd51e7d257ea2a2312c0153c04984\nparent d3bb907eff4e1c59667ee0fccbc21a08d023bd74\nparent c375333362bd1b5f006f6d627ff129c2c54d620c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548710748 +0100\ncommitter GitHub <noreply@github.com> 1548710748 +0100\n\nRollup merge of #57915 - petrochenkov:notto-disu, r=zackmdavis\n\nPretty print `$crate` as `crate` or `crate_name` in more cases\n\nSo, people do parse output of `--pretty=expanded` (sigh), so covering only the legacy proc-macro case (like it was done in https://github.com/rust-lang/rust/pull/57155) is not enough.\n\nThis PRs resolves all `$crate`s produced by macros, so they are all printed in the parseable form `$crate::foo` -> `crate::foo` or `crate_name::foo`.\n\nFixes https://github.com/rust-lang/rust/issues/38016#issuecomment-455851334\nFixes https://github.com/rust-lang/rust/pull/57155#issuecomment-455807195\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe8b4c043065fccb551bf968168097798769b72", "html_url": "https://github.com/rust-lang/rust/commit/3fe8b4c043065fccb551bf968168097798769b72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fe8b4c043065fccb551bf968168097798769b72/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3bb907eff4e1c59667ee0fccbc21a08d023bd74", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3bb907eff4e1c59667ee0fccbc21a08d023bd74", "html_url": "https://github.com/rust-lang/rust/commit/d3bb907eff4e1c59667ee0fccbc21a08d023bd74"}, {"sha": "c375333362bd1b5f006f6d627ff129c2c54d620c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c375333362bd1b5f006f6d627ff129c2c54d620c", "html_url": "https://github.com/rust-lang/rust/commit/c375333362bd1b5f006f6d627ff129c2c54d620c"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "abf575aed672538166871f377c4e2e52a56d9743", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3fe8b4c043065fccb551bf968168097798769b72", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n-use syntax::ext::base::{Annotatable, MacroKind, SyntaxExtension};\n+use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::{self, Mark};\n use syntax::ext::tt::macro_rules;\n@@ -129,9 +129,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n         mark\n     }\n \n-    fn resolve_dollar_crates(&mut self, annotatable: &Annotatable) {\n-        pub struct ResolveDollarCrates<'a, 'b: 'a> {\n-            pub resolver: &'a mut Resolver<'b>,\n+    fn resolve_dollar_crates(&mut self, fragment: &AstFragment) {\n+        struct ResolveDollarCrates<'a, 'b: 'a> {\n+            resolver: &'a mut Resolver<'b>\n         }\n         impl<'a> Visitor<'a> for ResolveDollarCrates<'a, '_> {\n             fn visit_ident(&mut self, ident: Ident) {\n@@ -146,7 +146,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             fn visit_mac(&mut self, _: &ast::Mac) {}\n         }\n \n-        annotatable.visit_with(&mut ResolveDollarCrates { resolver: self });\n+        fragment.visit_with(&mut ResolveDollarCrates { resolver: self });\n     }\n \n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,"}, {"sha": "9a04c9d60b86822d21b4cf165ed09d4e4bd228b4", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3fe8b4c043065fccb551bf968168097798769b72", "patch": "@@ -537,11 +537,8 @@ impl<'a> Resolver<'a> {\n                  primary_binding: &'a NameBinding<'a>, secondary_binding: &'a NameBinding<'a>)\n                  -> &'a NameBinding<'a> {\n         self.arenas.alloc_name_binding(NameBinding {\n-            kind: primary_binding.kind.clone(),\n             ambiguity: Some((secondary_binding, kind)),\n-            vis: primary_binding.vis,\n-            span: primary_binding.span,\n-            expansion: primary_binding.expansion,\n+            ..primary_binding.clone()\n         })\n     }\n "}, {"sha": "09e7e57f78cfa8643f72e658b384db3ec96b4814", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3fe8b4c043065fccb551bf968168097798769b72", "patch": "@@ -14,7 +14,6 @@ use parse::token;\n use ptr::P;\n use smallvec::SmallVec;\n use symbol::{keywords, Ident, Symbol};\n-use visit::Visitor;\n use ThinVec;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -136,17 +135,6 @@ impl Annotatable {\n             _ => false,\n         }\n     }\n-\n-    pub fn visit_with<'a, V: Visitor<'a>>(&'a self, visitor: &mut V) {\n-        match self {\n-            Annotatable::Item(item) => visitor.visit_item(item),\n-            Annotatable::TraitItem(trait_item) => visitor.visit_trait_item(trait_item),\n-            Annotatable::ImplItem(impl_item) => visitor.visit_impl_item(impl_item),\n-            Annotatable::ForeignItem(foreign_item) => visitor.visit_foreign_item(foreign_item),\n-            Annotatable::Stmt(stmt) => visitor.visit_stmt(stmt),\n-            Annotatable::Expr(expr) => visitor.visit_expr(expr),\n-        }\n-    }\n }\n \n // A more flexible ItemDecorator.\n@@ -742,7 +730,7 @@ pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n \n-    fn resolve_dollar_crates(&mut self, annotatable: &Annotatable);\n+    fn resolve_dollar_crates(&mut self, fragment: &AstFragment);\n     fn visit_ast_fragment_with_placeholders(&mut self, mark: Mark, fragment: &AstFragment,\n                                             derives: &[Mark]);\n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>);\n@@ -776,7 +764,7 @@ impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n \n-    fn resolve_dollar_crates(&mut self, _annotatable: &Annotatable) {}\n+    fn resolve_dollar_crates(&mut self, _fragment: &AstFragment) {}\n     fn visit_ast_fragment_with_placeholders(&mut self, _invoc: Mark, _fragment: &AstFragment,\n                                             _derives: &[Mark]) {}\n     fn add_builtin(&mut self, _ident: ast::Ident, _ext: Lrc<SyntaxExtension>) {}"}, {"sha": "1b4b44270ad0601f4108d76d6ea211bef5c60547", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe8b4c043065fccb551bf968168097798769b72/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3fe8b4c043065fccb551bf968168097798769b72", "patch": "@@ -443,6 +443,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     /// prepares data for resolving paths of macro invocations.\n     fn collect_invocations(&mut self, fragment: AstFragment, derives: &[Mark])\n                            -> (AstFragment, Vec<Invocation>) {\n+        // Resolve `$crate`s in the fragment for pretty-printing.\n+        self.cx.resolver.resolve_dollar_crates(&fragment);\n+\n         let (fragment_with_placeholders, invocations) = {\n             let mut collector = InvocationCollector {\n                 cfg: StripUnconfigured {\n@@ -574,8 +577,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(invoc.fragment_kind.expect_from_annotatables(items))\n             }\n             AttrProcMacro(ref mac, ..) => {\n-                // Resolve `$crate`s in case we have to go though stringification.\n-                self.cx.resolver.resolve_dollar_crates(&item);\n                 self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::Token(DUMMY_SP, Token::interpolated(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n@@ -917,8 +918,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         match *ext {\n             ProcMacroDerive(ref ext, ..) => {\n-                // Resolve `$crate`s in case we have to go though stringification.\n-                self.cx.resolver.resolve_dollar_crates(&item);\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this"}, {"sha": "3d2d949be2b2e1dc78e6d68bf88f439c76885521", "filename": "src/test/pretty/dollar-crate.pp", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fe8b4c043065fccb551bf968168097798769b72/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/3fe8b4c043065fccb551bf968168097798769b72/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=3fe8b4c043065fccb551bf968168097798769b72", "patch": "@@ -0,0 +1,18 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::v1::*;\n+#[macro_use]\n+extern crate std;\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:dollar-crate.pp\n+\n+fn main() {\n+    {\n+        ::std::io::_print(::std::fmt::Arguments::new_v1(&[\"rust\\n\"],\n+                                                        &match () {\n+                                                             () => [],\n+                                                         }));\n+    };\n+}"}, {"sha": "e46bc7f4859a77bfcf657312d5da1f26996a39b0", "filename": "src/test/pretty/dollar-crate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fe8b4c043065fccb551bf968168097798769b72/src%2Ftest%2Fpretty%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fe8b4c043065fccb551bf968168097798769b72/src%2Ftest%2Fpretty%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.rs?ref=3fe8b4c043065fccb551bf968168097798769b72", "patch": "@@ -0,0 +1,7 @@\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:dollar-crate.pp\n+\n+fn main() {\n+    println!(\"rust\");\n+}"}]}