{"sha": "c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjQ4OWFmOTEyYmVhOWNhOWYwZmEwMzc4ZDdjMGFjYWNmNmM1OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T17:48:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T17:48:12Z"}, "message": "Auto merge of #44613 - QuietMisdreavus:rustdoc-perf, r=michaelwoerister\n\nsome low-hanging rustdoc optimizations\n\nThere were a few discussions earlier today in #rust-internals about the syscall usage and overall performance of rustdoc. This PR is intended to pick some low-hanging fruit and try to rein in some of the performance issues of rustdoc.", "tree": {"sha": "f13285a475cde29d2f97d75864aa7359c36a2562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13285a475cde29d2f97d75864aa7359c36a2562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "html_url": "https://github.com/rust-lang/rust/commit/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2689fd2402590961dae32f35369a8685c89022fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2689fd2402590961dae32f35369a8685c89022fb", "html_url": "https://github.com/rust-lang/rust/commit/2689fd2402590961dae32f35369a8685c89022fb"}, {"sha": "2c9d452a295c192f3e4762225fc4f4feef6f769c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9d452a295c192f3e4762225fc4f4feef6f769c", "html_url": "https://github.com/rust-lang/rust/commit/2c9d452a295c192f3e4762225fc4f4feef6f769c"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "3c789cb3a15939d3c50afa7d35356b8418e6c31f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "patch": "@@ -125,6 +125,21 @@ pub struct SharedContext {\n     /// Warnings for the user if rendering would differ using different markdown\n     /// parsers.\n     pub markdown_warnings: RefCell<Vec<(Span, String, Vec<html_diff::Difference>)>>,\n+    /// The directories that have already been created in this doc run. Used to reduce the number\n+    /// of spurious `create_dir_all` calls.\n+    pub created_dirs: RefCell<FxHashSet<PathBuf>>,\n+}\n+\n+impl SharedContext {\n+    fn ensure_dir(&self, dst: &Path) -> io::Result<()> {\n+        let mut dirs = self.created_dirs.borrow_mut();\n+        if !dirs.contains(dst) {\n+            fs::create_dir_all(dst)?;\n+            dirs.insert(dst.to_path_buf());\n+        }\n+\n+        Ok(())\n+    }\n }\n \n /// Indicates where an external crate can be found.\n@@ -463,6 +478,7 @@ pub fn run(mut krate: clean::Crate,\n         },\n         css_file_extension: css_file_extension.clone(),\n         markdown_warnings: RefCell::new(vec![]),\n+        created_dirs: RefCell::new(FxHashSet()),\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -794,7 +810,6 @@ fn write_shared(cx: &Context,\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n     // operation with respect to all other rustdocs running around.\n-    try_err!(fs::create_dir_all(&cx.dst), &cx.dst);\n     let _lock = flock::Lock::panicking_new(&cx.dst.join(\".lock\"), true, true, true);\n \n     // Add all the static files. These may already exist, but we just\n@@ -1518,8 +1533,8 @@ impl Context {\n                 this.render_item(&mut buf, &item, false).unwrap();\n                 // buf will be empty if the module is stripped and there is no redirect for it\n                 if !buf.is_empty() {\n+                    try_err!(this.shared.ensure_dir(&this.dst), &this.dst);\n                     let joint_dst = this.dst.join(\"index.html\");\n-                    try_err!(fs::create_dir_all(&this.dst), &this.dst);\n                     let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n                     try_err!(dst.write_all(&buf), &joint_dst);\n                 }\n@@ -1553,18 +1568,19 @@ impl Context {\n                 let name = item.name.as_ref().unwrap();\n                 let item_type = item.type_();\n                 let file_name = &item_path(item_type, name);\n+                try_err!(self.shared.ensure_dir(&self.dst), &self.dst);\n                 let joint_dst = self.dst.join(file_name);\n-                try_err!(fs::create_dir_all(&self.dst), &self.dst);\n                 let mut dst = try_err!(File::create(&joint_dst), &joint_dst);\n                 try_err!(dst.write_all(&buf), &joint_dst);\n \n                 // Redirect from a sane URL using the namespace to Rustdoc's\n                 // URL for the page.\n                 let redir_name = format!(\"{}.{}.html\", name, item_type.name_space());\n                 let redir_dst = self.dst.join(redir_name);\n-                if let Ok(mut redirect_out) = OpenOptions::new().create_new(true)\n+                if let Ok(redirect_out) = OpenOptions::new().create_new(true)\n                                                                 .write(true)\n                                                                 .open(&redir_dst) {\n+                    let mut redirect_out = BufWriter::new(redirect_out);\n                     try_err!(layout::redirect(&mut redirect_out, file_name), &redir_dst);\n                 }\n \n@@ -1574,7 +1590,8 @@ impl Context {\n                 if item_type == ItemType::Macro {\n                     let redir_name = format!(\"{}.{}!.html\", item_type, name);\n                     let redir_dst = self.dst.join(redir_name);\n-                    let mut redirect_out = try_err!(File::create(&redir_dst), &redir_dst);\n+                    let redirect_out = try_err!(File::create(&redir_dst), &redir_dst);\n+                    let mut redirect_out = BufWriter::new(redirect_out);\n                     try_err!(layout::redirect(&mut redirect_out, file_name), &redir_dst);\n                 }\n             }"}]}