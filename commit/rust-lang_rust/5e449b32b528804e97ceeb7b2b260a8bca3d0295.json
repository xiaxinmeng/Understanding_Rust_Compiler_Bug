{"sha": "5e449b32b528804e97ceeb7b2b260a8bca3d0295", "node_id": "C_kwDOAAsO6NoAKDVlNDQ5YjMyYjUyODgwNGU5N2NlZWI3YjJiMjYwYThiY2EzZDAyOTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T20:15:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T20:15:46Z"}, "message": "Rollup merge of #108902 - lcnr:do-while-sus, r=davidtwco,Nilstrieb\n\nno more do while :<", "tree": {"sha": "2198a3fabb17412ec5c008a2918d3d633332ca94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2198a3fabb17412ec5c008a2918d3d633332ca94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e449b32b528804e97ceeb7b2b260a8bca3d0295", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC4/yCRBK7hj4Ov3rIwAAU1AIAJCO2AIivkHXx0jU1qFgA4zz\nXdcMyeYmav1inwEztwh0/+FpUAisMwFPqpK8LsDVFR8oDSOMF7oaUOU1GqZhchVW\ntjk4YVHdPlz2O22joEOUNI/LQLUSbYEBsW/zkd5cq446sgwv1ZxCqprBIg295CD7\nw/CWiGGWgY/amq367BEIKkGfiRpGU1ANQJs8S3PDv0a6Vuc0TORYbZsBmxaHjSIP\nZBFx8bHAF6pw4Chxo6RM8VSI5CyvaCWgKVpoX5RIC4OWBFQ9zJt7kD8kzZ3LK4am\niKIPpHZZ3ezilUMHjt/7IecRCXG9h2lg7ukteInE52peiUutNvYLXfic4AvCxTI=\n=WHhc\n-----END PGP SIGNATURE-----\n", "payload": "tree 2198a3fabb17412ec5c008a2918d3d633332ca94\nparent 4b784e49a24b8fc9fb5547939e713a51f915a191\nparent a5258d17216d122bfc27f4aad316689f8d29a62a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678479346 +0100\ncommitter GitHub <noreply@github.com> 1678479346 +0100\n\nRollup merge of #108902 - lcnr:do-while-sus, r=davidtwco,Nilstrieb\n\nno more do while :<\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e449b32b528804e97ceeb7b2b260a8bca3d0295", "html_url": "https://github.com/rust-lang/rust/commit/5e449b32b528804e97ceeb7b2b260a8bca3d0295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e449b32b528804e97ceeb7b2b260a8bca3d0295/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b784e49a24b8fc9fb5547939e713a51f915a191", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b784e49a24b8fc9fb5547939e713a51f915a191", "html_url": "https://github.com/rust-lang/rust/commit/4b784e49a24b8fc9fb5547939e713a51f915a191"}, {"sha": "a5258d17216d122bfc27f4aad316689f8d29a62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5258d17216d122bfc27f4aad316689f8d29a62a", "html_url": "https://github.com/rust-lang/rust/commit/a5258d17216d122bfc27f4aad316689f8d29a62a"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "9414d9bfa08638d6677682ea563f13116fd5cc3d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b32b528804e97ceeb7b2b260a8bca3d0295/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b32b528804e97ceeb7b2b260a8bca3d0295/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=5e449b32b528804e97ceeb7b2b260a8bca3d0295", "patch": "@@ -588,8 +588,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // let PATTERN = ... might not even exist until we do the assignment.\n         // so we set it here instead.\n         if set_match_place {\n-            let mut candidate_ref = &candidate;\n-            while let Some(next) = {\n+            let mut next = Some(&candidate);\n+            while let Some(candidate_ref) = next.take() {\n                 for binding in &candidate_ref.bindings {\n                     let local = self.var_local_id(binding.var_id, OutsideGuard);\n                     // `try_to_place` may fail if it is unable to resolve the given\n@@ -617,9 +617,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n                 // All of the subcandidates should bind the same locals, so we\n                 // only visit the first one.\n-                candidate_ref.subcandidates.get(0)\n-            } {\n-                candidate_ref = next;\n+                next = candidate_ref.subcandidates.get(0)\n             }\n         }\n "}, {"sha": "49028ca4e5ec88287ccba9a35cecb1984cd02257", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5e449b32b528804e97ceeb7b2b260a8bca3d0295/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e449b32b528804e97ceeb7b2b260a8bca3d0295/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=5e449b32b528804e97ceeb7b2b260a8bca3d0295", "patch": "@@ -537,29 +537,29 @@ impl TraverseCoverageGraphWithLoops {\n             \"TraverseCoverageGraphWithLoops::next - context_stack: {:?}\",\n             self.context_stack.iter().rev().collect::<Vec<_>>()\n         );\n-        while let Some(next_bcb) = {\n-            // Strip contexts with empty worklists from the top of the stack\n-            while self.context_stack.last().map_or(false, |context| context.worklist.is_empty()) {\n+\n+        while let Some(context) = self.context_stack.last_mut() {\n+            if let Some(next_bcb) = context.worklist.pop() {\n+                if !self.visited.insert(next_bcb) {\n+                    debug!(\"Already visited: {:?}\", next_bcb);\n+                    continue;\n+                }\n+                debug!(\"Visiting {:?}\", next_bcb);\n+                if self.backedges[next_bcb].len() > 0 {\n+                    debug!(\"{:?} is a loop header! Start a new TraversalContext...\", next_bcb);\n+                    self.context_stack.push(TraversalContext {\n+                        loop_backedges: Some((self.backedges[next_bcb].clone(), next_bcb)),\n+                        worklist: Vec::new(),\n+                    });\n+                }\n+                self.extend_worklist(basic_coverage_blocks, next_bcb);\n+                return Some(next_bcb);\n+            } else {\n+                // Strip contexts with empty worklists from the top of the stack\n                 self.context_stack.pop();\n             }\n-            // Pop the next bcb off of the current context_stack. If none, all BCBs were visited.\n-            self.context_stack.last_mut().map_or(None, |context| context.worklist.pop())\n-        } {\n-            if !self.visited.insert(next_bcb) {\n-                debug!(\"Already visited: {:?}\", next_bcb);\n-                continue;\n-            }\n-            debug!(\"Visiting {:?}\", next_bcb);\n-            if self.backedges[next_bcb].len() > 0 {\n-                debug!(\"{:?} is a loop header! Start a new TraversalContext...\", next_bcb);\n-                self.context_stack.push(TraversalContext {\n-                    loop_backedges: Some((self.backedges[next_bcb].clone(), next_bcb)),\n-                    worklist: Vec::new(),\n-                });\n-            }\n-            self.extend_worklist(basic_coverage_blocks, next_bcb);\n-            return Some(next_bcb);\n         }\n+\n         None\n     }\n "}]}