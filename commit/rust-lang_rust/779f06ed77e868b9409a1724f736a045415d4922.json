{"sha": "779f06ed77e868b9409a1724f736a045415d4922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OWYwNmVkNzdlODY4Yjk0MDlhMTcyNGY3MzZhMDQ1NDE1ZDQ5MjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T08:35:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-10T14:10:28Z"}, "message": "Convert more tokens", "tree": {"sha": "07bc6a57f62adce315ca5779329b66990c4f9a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07bc6a57f62adce315ca5779329b66990c4f9a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779f06ed77e868b9409a1724f736a045415d4922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779f06ed77e868b9409a1724f736a045415d4922", "html_url": "https://github.com/rust-lang/rust/commit/779f06ed77e868b9409a1724f736a045415d4922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779f06ed77e868b9409a1724f736a045415d4922/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548f562ddad3bca515b304f82e110aeb319591e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/548f562ddad3bca515b304f82e110aeb319591e3", "html_url": "https://github.com/rust-lang/rust/commit/548f562ddad3bca515b304f82e110aeb319591e3"}], "stats": {"total": 302, "additions": 34, "deletions": 268}, "files": [{"sha": "d86d804b2ee572abf45e3ddc1c6de9cb00133a0b", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/779f06ed77e868b9409a1724f736a045415d4922/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f06ed77e868b9409a1724f736a045415d4922/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=779f06ed77e868b9409a1724f736a045415d4922", "patch": "@@ -1,6 +1,6 @@\n use hir::HirDisplay;\n use ra_syntax::{\n-    ast::{self, AstNode, AstToken, LetStmt, NameOwner, TypeAscriptionOwner},\n+    ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n     TextRange,\n };\n \n@@ -35,7 +35,7 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n     let stmt_range = stmt.syntax().text_range();\n-    let eq_range = stmt.eq_token()?.syntax().text_range();\n+    let eq_range = stmt.eq_token()?.text_range();\n     // Assist should only be applicable if cursor is between 'let' and '='\n     let let_range = TextRange::from_to(stmt_range.start(), eq_range.start());\n     let cursor_in_range = ctx.frange.range.is_subrange(&let_range);"}, {"sha": "106a91c12b68bed6ebb833484b077c120bbc5fd4", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/779f06ed77e868b9409a1724f736a045415d4922/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f06ed77e868b9409a1724f736a045415d4922/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=779f06ed77e868b9409a1724f736a045415d4922", "patch": "@@ -276,7 +276,7 @@ impl ast::DocCommentsOwner for EnumVariant {}\n impl ast::AttrsOwner for EnumVariant {}\n impl EnumVariant {\n     pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -377,7 +377,7 @@ impl ConstDef {\n         support::token2(&self.syntax, T![default])\n     }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![const]) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n@@ -405,7 +405,7 @@ impl ast::TypeAscriptionOwner for StaticDef {}\n impl StaticDef {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![static]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![mut]) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n@@ -435,7 +435,7 @@ impl TypeAliasDef {\n         support::token2(&self.syntax, T![default])\n     }\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![type]) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n@@ -1278,9 +1278,7 @@ impl AstNode for BinExpr {\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n impl ast::AttrsOwner for BinExpr {}\n-impl BinExpr {\n-    pub fn bin_op_token(&self) -> Option<BinOp> { support::token(&self.syntax) }\n-}\n+impl BinExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Literal {\n     pub(crate) syntax: SyntaxNode,\n@@ -1881,7 +1879,7 @@ impl Attr {\n     pub fn excl_token(&self) -> Option<Excl> { support::token(&self.syntax) }\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T!['[']) }\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn input(&self) -> Option<AttrInput> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![']']) }\n }\n@@ -1943,7 +1941,7 @@ impl ast::NameOwner for TypeParam {}\n impl ast::AttrsOwner for TypeParam {}\n impl ast::TypeBoundsOwner for TypeParam {}\n impl TypeParam {\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn default_type(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1965,7 +1963,7 @@ impl ast::NameOwner for ConstParam {}\n impl ast::AttrsOwner for ConstParam {}\n impl ast::TypeAscriptionOwner for ConstParam {}\n impl ConstParam {\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2122,7 +2120,7 @@ impl ast::TypeAscriptionOwner for LetStmt {}\n impl LetStmt {\n     pub fn let_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![let]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![;]) }\n }\n@@ -2144,7 +2142,7 @@ impl AstNode for Condition {\n impl Condition {\n     pub fn let_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![let]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2463,7 +2461,7 @@ impl AstNode for AssocTypeArg {\n impl ast::TypeBoundsOwner for AssocTypeArg {}\n impl AssocTypeArg {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2501,7 +2499,7 @@ impl AstNode for ConstArg {\n }\n impl ConstArg {\n     pub fn literal(&self) -> Option<Literal> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2597,7 +2595,7 @@ impl AstNode for MetaItem {\n }\n impl MetaItem {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n+    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token2(&self.syntax, T![=]) }\n     pub fn attr_input(&self) -> Option<AttrInput> { support::child(&self.syntax) }\n     pub fn nested_meta_items(&self) -> AstChildren<MetaItem> { support::children(&self.syntax) }\n }"}, {"sha": "7611ce4cb0e684a77611b134119149554b5fe5e6", "filename": "crates/ra_syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/779f06ed77e868b9409a1724f736a045415d4922/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f06ed77e868b9409a1724f736a045415d4922/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=779f06ed77e868b9409a1724f736a045415d4922", "patch": "@@ -1410,208 +1410,6 @@ impl AstToken for RangeSeparator {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum BinOp {\n-    Pipepipe(Pipepipe),\n-    Ampamp(Ampamp),\n-    Eqeq(Eqeq),\n-    Neq(Neq),\n-    Lteq(Lteq),\n-    Gteq(Gteq),\n-    LAngle(LAngle),\n-    RAngle(RAngle),\n-    Plus(Plus),\n-    Star(Star),\n-    Minus(Minus),\n-    Slash(Slash),\n-    Percent(Percent),\n-    Shl(Shl),\n-    Shr(Shr),\n-    Caret(Caret),\n-    Pipe(Pipe),\n-    Amp(Amp),\n-    Eq(Eq),\n-    Pluseq(Pluseq),\n-    Slasheq(Slasheq),\n-    Stareq(Stareq),\n-    Percenteq(Percenteq),\n-    Shreq(Shreq),\n-    Shleq(Shleq),\n-    Minuseq(Minuseq),\n-    Pipeeq(Pipeeq),\n-    Ampeq(Ampeq),\n-    Careteq(Careteq),\n-}\n-impl From<Pipepipe> for BinOp {\n-    fn from(node: Pipepipe) -> BinOp { BinOp::Pipepipe(node) }\n-}\n-impl From<Ampamp> for BinOp {\n-    fn from(node: Ampamp) -> BinOp { BinOp::Ampamp(node) }\n-}\n-impl From<Eqeq> for BinOp {\n-    fn from(node: Eqeq) -> BinOp { BinOp::Eqeq(node) }\n-}\n-impl From<Neq> for BinOp {\n-    fn from(node: Neq) -> BinOp { BinOp::Neq(node) }\n-}\n-impl From<Lteq> for BinOp {\n-    fn from(node: Lteq) -> BinOp { BinOp::Lteq(node) }\n-}\n-impl From<Gteq> for BinOp {\n-    fn from(node: Gteq) -> BinOp { BinOp::Gteq(node) }\n-}\n-impl From<LAngle> for BinOp {\n-    fn from(node: LAngle) -> BinOp { BinOp::LAngle(node) }\n-}\n-impl From<RAngle> for BinOp {\n-    fn from(node: RAngle) -> BinOp { BinOp::RAngle(node) }\n-}\n-impl From<Plus> for BinOp {\n-    fn from(node: Plus) -> BinOp { BinOp::Plus(node) }\n-}\n-impl From<Star> for BinOp {\n-    fn from(node: Star) -> BinOp { BinOp::Star(node) }\n-}\n-impl From<Minus> for BinOp {\n-    fn from(node: Minus) -> BinOp { BinOp::Minus(node) }\n-}\n-impl From<Slash> for BinOp {\n-    fn from(node: Slash) -> BinOp { BinOp::Slash(node) }\n-}\n-impl From<Percent> for BinOp {\n-    fn from(node: Percent) -> BinOp { BinOp::Percent(node) }\n-}\n-impl From<Shl> for BinOp {\n-    fn from(node: Shl) -> BinOp { BinOp::Shl(node) }\n-}\n-impl From<Shr> for BinOp {\n-    fn from(node: Shr) -> BinOp { BinOp::Shr(node) }\n-}\n-impl From<Caret> for BinOp {\n-    fn from(node: Caret) -> BinOp { BinOp::Caret(node) }\n-}\n-impl From<Pipe> for BinOp {\n-    fn from(node: Pipe) -> BinOp { BinOp::Pipe(node) }\n-}\n-impl From<Amp> for BinOp {\n-    fn from(node: Amp) -> BinOp { BinOp::Amp(node) }\n-}\n-impl From<Eq> for BinOp {\n-    fn from(node: Eq) -> BinOp { BinOp::Eq(node) }\n-}\n-impl From<Pluseq> for BinOp {\n-    fn from(node: Pluseq) -> BinOp { BinOp::Pluseq(node) }\n-}\n-impl From<Slasheq> for BinOp {\n-    fn from(node: Slasheq) -> BinOp { BinOp::Slasheq(node) }\n-}\n-impl From<Stareq> for BinOp {\n-    fn from(node: Stareq) -> BinOp { BinOp::Stareq(node) }\n-}\n-impl From<Percenteq> for BinOp {\n-    fn from(node: Percenteq) -> BinOp { BinOp::Percenteq(node) }\n-}\n-impl From<Shreq> for BinOp {\n-    fn from(node: Shreq) -> BinOp { BinOp::Shreq(node) }\n-}\n-impl From<Shleq> for BinOp {\n-    fn from(node: Shleq) -> BinOp { BinOp::Shleq(node) }\n-}\n-impl From<Minuseq> for BinOp {\n-    fn from(node: Minuseq) -> BinOp { BinOp::Minuseq(node) }\n-}\n-impl From<Pipeeq> for BinOp {\n-    fn from(node: Pipeeq) -> BinOp { BinOp::Pipeeq(node) }\n-}\n-impl From<Ampeq> for BinOp {\n-    fn from(node: Ampeq) -> BinOp { BinOp::Ampeq(node) }\n-}\n-impl From<Careteq> for BinOp {\n-    fn from(node: Careteq) -> BinOp { BinOp::Careteq(node) }\n-}\n-impl std::fmt::Display for BinOp {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl AstToken for BinOp {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            PIPEPIPE | AMPAMP | EQEQ | NEQ | LTEQ | GTEQ | L_ANGLE | R_ANGLE | PLUS | STAR\n-            | MINUS | SLASH | PERCENT | SHL | SHR | CARET | PIPE | AMP | EQ | PLUSEQ | SLASHEQ\n-            | STAREQ | PERCENTEQ | SHREQ | SHLEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxToken) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            PIPEPIPE => BinOp::Pipepipe(Pipepipe { syntax }),\n-            AMPAMP => BinOp::Ampamp(Ampamp { syntax }),\n-            EQEQ => BinOp::Eqeq(Eqeq { syntax }),\n-            NEQ => BinOp::Neq(Neq { syntax }),\n-            LTEQ => BinOp::Lteq(Lteq { syntax }),\n-            GTEQ => BinOp::Gteq(Gteq { syntax }),\n-            L_ANGLE => BinOp::LAngle(LAngle { syntax }),\n-            R_ANGLE => BinOp::RAngle(RAngle { syntax }),\n-            PLUS => BinOp::Plus(Plus { syntax }),\n-            STAR => BinOp::Star(Star { syntax }),\n-            MINUS => BinOp::Minus(Minus { syntax }),\n-            SLASH => BinOp::Slash(Slash { syntax }),\n-            PERCENT => BinOp::Percent(Percent { syntax }),\n-            SHL => BinOp::Shl(Shl { syntax }),\n-            SHR => BinOp::Shr(Shr { syntax }),\n-            CARET => BinOp::Caret(Caret { syntax }),\n-            PIPE => BinOp::Pipe(Pipe { syntax }),\n-            AMP => BinOp::Amp(Amp { syntax }),\n-            EQ => BinOp::Eq(Eq { syntax }),\n-            PLUSEQ => BinOp::Pluseq(Pluseq { syntax }),\n-            SLASHEQ => BinOp::Slasheq(Slasheq { syntax }),\n-            STAREQ => BinOp::Stareq(Stareq { syntax }),\n-            PERCENTEQ => BinOp::Percenteq(Percenteq { syntax }),\n-            SHREQ => BinOp::Shreq(Shreq { syntax }),\n-            SHLEQ => BinOp::Shleq(Shleq { syntax }),\n-            MINUSEQ => BinOp::Minuseq(Minuseq { syntax }),\n-            PIPEEQ => BinOp::Pipeeq(Pipeeq { syntax }),\n-            AMPEQ => BinOp::Ampeq(Ampeq { syntax }),\n-            CARETEQ => BinOp::Careteq(Careteq { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxToken {\n-        match self {\n-            BinOp::Pipepipe(it) => &it.syntax,\n-            BinOp::Ampamp(it) => &it.syntax,\n-            BinOp::Eqeq(it) => &it.syntax,\n-            BinOp::Neq(it) => &it.syntax,\n-            BinOp::Lteq(it) => &it.syntax,\n-            BinOp::Gteq(it) => &it.syntax,\n-            BinOp::LAngle(it) => &it.syntax,\n-            BinOp::RAngle(it) => &it.syntax,\n-            BinOp::Plus(it) => &it.syntax,\n-            BinOp::Star(it) => &it.syntax,\n-            BinOp::Minus(it) => &it.syntax,\n-            BinOp::Slash(it) => &it.syntax,\n-            BinOp::Percent(it) => &it.syntax,\n-            BinOp::Shl(it) => &it.syntax,\n-            BinOp::Shr(it) => &it.syntax,\n-            BinOp::Caret(it) => &it.syntax,\n-            BinOp::Pipe(it) => &it.syntax,\n-            BinOp::Amp(it) => &it.syntax,\n-            BinOp::Eq(it) => &it.syntax,\n-            BinOp::Pluseq(it) => &it.syntax,\n-            BinOp::Slasheq(it) => &it.syntax,\n-            BinOp::Stareq(it) => &it.syntax,\n-            BinOp::Percenteq(it) => &it.syntax,\n-            BinOp::Shreq(it) => &it.syntax,\n-            BinOp::Shleq(it) => &it.syntax,\n-            BinOp::Minuseq(it) => &it.syntax,\n-            BinOp::Pipeeq(it) => &it.syntax,\n-            BinOp::Ampeq(it) => &it.syntax,\n-            BinOp::Careteq(it) => &it.syntax,\n-        }\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum PrefixOp {\n     Minus(Minus),\n     Excl(Excl),"}, {"sha": "f9cd12d0d105cda5a82cdceffebb8e1ce9171933", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 17, "deletions": 49, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/779f06ed77e868b9409a1724f736a045415d4922/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f06ed77e868b9409a1724f736a045415d4922/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=779f06ed77e868b9409a1724f736a045415d4922", "patch": "@@ -354,7 +354,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n         struct EnumVariant: VisibilityOwner, NameOwner, DocCommentsOwner, AttrsOwner {\n             FieldDefList,\n-            Eq,\n+            T![=],\n             Expr\n         }\n \n@@ -380,23 +380,23 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct ConstDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner {\n             T![default],\n             T![const],\n-            Eq,\n+            T![=],\n             body: Expr,\n             T![;]\n         }\n \n         struct StaticDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeAscriptionOwner {\n             T![static],\n             T![mut],\n-            Eq,\n+            T![=],\n             body: Expr,\n             T![;]\n         }\n \n         struct TypeAliasDef: VisibilityOwner, NameOwner, TypeParamsOwner, AttrsOwner, DocCommentsOwner, TypeBoundsOwner {\n             T![default],\n             T![type],\n-            Eq,\n+            T![=],\n             TypeRef,\n             T![;]\n         }\n@@ -406,14 +406,14 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             T![const],\n             T![unsafe],\n             T![impl],\n-            Excl,\n+            T![!],\n             T![for],\n             ItemList,\n         }\n \n         struct ParenType { T!['('], TypeRef, T![')'] }\n         struct TupleType { T!['('], fields: [TypeRef], T![')'] }\n-        struct NeverType { Excl }\n+        struct NeverType { T![!] }\n         struct PathType { Path }\n         struct PointerType { Star, T![const], T![mut], TypeRef }\n         struct ArrayType { T!['['], TypeRef, T![;], Expr, T![']'] }\n@@ -465,7 +465,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct PrefixExpr: AttrsOwner { PrefixOp, Expr }\n         struct BoxExpr: AttrsOwner { T![box], Expr }\n         struct RangeExpr: AttrsOwner { RangeOp }\n-        struct BinExpr: AttrsOwner { BinOp }\n+        struct BinExpr: AttrsOwner { /*BinOp*/ }\n         struct Literal { LiteralToken }\n \n         struct MatchExpr: AttrsOwner { T![match], Expr, MatchArmList }\n@@ -520,9 +520,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct NameRef { NameRefToken }\n \n         struct MacroCall: NameOwner, AttrsOwner,DocCommentsOwner {\n-            Path, Excl, TokenTree, T![;]\n+            Path, T![!], TokenTree, T![;]\n         }\n-        struct Attr { Pound, Excl, T!['['], Path, Eq, input: AttrInput, T![']'] }\n+        struct Attr { Pound, T![!], T!['['], Path, T![=], input: AttrInput, T![']'] }\n         struct TokenTree {}\n         struct TypeParamList {\n             LAngle,\n@@ -533,11 +533,11 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             RAngle\n         }\n         struct TypeParam: NameOwner, AttrsOwner, TypeBoundsOwner {\n-            Eq,\n+            T![=],\n             default_type: TypeRef,\n         }\n         struct ConstParam: NameOwner, AttrsOwner, TypeAscriptionOwner {\n-            Eq,\n+            T![=],\n             default_val: Expr,\n         }\n         struct LifetimeParam: AttrsOwner { Lifetime}\n@@ -550,11 +550,11 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct LetStmt: AttrsOwner, TypeAscriptionOwner {\n             T![let],\n             Pat,\n-            Eq,\n+            T![=],\n             initializer: Expr,\n             T![;],\n         }\n-        struct Condition { T![let], Pat, Eq, Expr }\n+        struct Condition { T![let], Pat, T![=], Expr }\n         struct Block: AttrsOwner, ModuleItemOwner {\n             T!['{'],\n             statements: [Stmt],\n@@ -607,9 +607,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             RAngle\n         }\n         struct TypeArg { TypeRef }\n-        struct AssocTypeArg : TypeBoundsOwner { NameRef, Eq, TypeRef }\n+        struct AssocTypeArg : TypeBoundsOwner { NameRef, T![=], TypeRef }\n         struct LifetimeArg { Lifetime }\n-        struct ConstArg { Literal, Eq, BlockExpr }\n+        struct ConstArg { Literal, T![=], BlockExpr }\n \n         struct MacroItems: ModuleItemOwner{ }\n \n@@ -630,7 +630,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         }\n \n         struct MetaItem {\n-            Path, Eq, AttrInput, nested_meta_items: [MetaItem]\n+            Path, T![=], AttrInput, nested_meta_items: [MetaItem]\n         }\n \n         struct MacroDef {\n@@ -771,41 +771,9 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n     token_enums: &ast_enums! {\n         enum RangeSeparator { Dotdot, Dotdotdot, Dotdoteq}\n \n-        enum BinOp {\n-            Pipepipe,\n-            Ampamp,\n-            Eqeq,\n-            Neq,\n-            Lteq,\n-            Gteq,\n-            LAngle,\n-            RAngle,\n-            Plus,\n-            Star,\n-            Minus,\n-            Slash,\n-            Percent,\n-            Shl,\n-            Shr,\n-            Caret,\n-            Pipe,\n-            Amp,\n-            Eq,\n-            Pluseq,\n-            Slasheq,\n-            Stareq,\n-            Percenteq,\n-            Shreq,\n-            Shleq,\n-            Minuseq,\n-            Pipeeq,\n-            Ampeq,\n-            Careteq,\n-        }\n-\n         enum PrefixOp {\n             Minus,\n-            Excl,\n+            T![!],\n             Star\n         }\n "}, {"sha": "4c9e447a3040aa563a7d49b5194e36120069142a", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/779f06ed77e868b9409a1724f736a045415d4922/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f06ed77e868b9409a1724f736a045415d4922/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=779f06ed77e868b9409a1724f736a045415d4922", "patch": "@@ -535,6 +535,8 @@ impl Field<'_> {\n                     \"')'\" => \"r_paren\",\n                     \"'['\" => \"l_brack\",\n                     \"']'\" => \"r_brack\",\n+                    \"=\" => \"eq\",\n+                    \"!\" => \"excl\",\n                     _ => name,\n                 };\n                 format_ident!(\"{}_token\", name)"}]}